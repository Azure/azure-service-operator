// Code generated by go-bindata.
// sources:
// pkg/template/assets/cosmosdb.json
// pkg/template/assets/rediscache.json
// pkg/template/assets/storage.json
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cosmosdbJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6b\xdb\x40\x10\xbd\xfb\x57\x88\x6d\x41\x12\xc8\xb2\x5c\x5a\x28\xbe\x35\x18\x4a\x09\xa9\x0b\x0d\xbd\x18\x1f\xc6\xab\x71\xb2\xa9\xb4\xb3\xdd\x9d\x35\xa8\xc5\xff\xbd\xc8\xf2\x87\x24\x5b\x49\x88\x7d\x31\x33\xf3\xde\x9b\xd9\x37\xe3\x7f\xa3\x20\x08\x02\xf1\xde\xc9\x47\x2c\x41\xcc\x02\xf1\xc8\x6c\x66\x93\x49\x13\x48\x4b\xd0\xf0\x80\x25\x6a\x4e\xe1\xaf\xb7\x98\x4a\x2a\x0f\x39\x37\xf9\x90\x4d\x3f\x8d\xb3\xe9\x38\x9b\x4e\x72\x34\x05\x55\x75\xdd\x3d\x96\xa6\x00\xc6\xf4\xc9\x91\x7e\x27\x92\x46\x40\x92\x66\xd4\xfc\x0b\xad\x53\xa4\x6b\x9d\x69\x9a\xd5\xdf\x63\x81\x01\x0b\x25\x32\x5a\x27\x66\x41\xd3\xd5\x3e\x5e\x90\x04\x6e\x20\xe7\xe8\x3e\xc3\x95\xc1\x9a\xe8\x27\x5b\xa5\x1f\xc4\x29\xb9\x4b\xce\xe8\xdf\x4a\xe7\x6f\x43\x1a\x4b\x06\x2d\x2b\x74\xc3\xf8\xc5\xfa\x09\x25\xb7\xf0\xa3\x16\x8b\xd8\x82\x55\xb0\x2e\x7a\x04\x42\x92\x2b\xc9\xcd\x6f\xbe\x43\xb9\x27\x59\x4a\xd2\x12\x38\x0a\xc1\x51\x98\x04\x5e\xab\x3f\x1e\x9b\xce\x22\x8b\x8e\xbc\x95\xf8\xd5\x92\x37\x51\x9c\xaa\x3c\x8e\x57\xa2\xa3\x72\x2c\xa9\x55\x96\x27\x95\x81\x86\xef\x94\xb4\xe4\x68\xc3\xe9\x9c\xa4\xaf\xdd\x9a\xdf\x4c\x72\x60\x58\x83\xc3\x2f\x52\x92\xd7\xec\x44\xd2\x05\x83\x51\x2d\xdb\x1a\xcf\x3f\x8e\xb3\xcf\xfd\x3a\x7d\x1c\xe8\x34\x78\x14\xb6\x87\x0d\xe3\x55\x1f\xd2\x32\x57\x2c\xcf\x1b\x10\x85\xc7\xc4\x15\x4c\x8e\x06\x75\xee\x16\x35\x68\xb9\xea\x25\x0f\x7e\x77\xc9\xea\xe0\x15\xa2\x67\x1c\x6e\x84\xba\xef\xb2\xd8\x6c\xd0\xde\x1f\x1e\xb2\xc3\x7f\x26\x0a\xe3\x74\x08\xd5\x97\xef\xcc\xdf\x35\xaf\xfd\xb9\xec\xeb\x02\x7c\x5a\xa4\xd7\x3d\x60\x87\x63\x03\xaa\xa0\x2d\xda\x1f\x56\x91\x55\x5c\x89\x59\x90\x5d\xad\xde\x5d\x44\x57\xa3\xeb\xf9\xe6\xd7\xc1\x18\x41\x9e\x8d\xe7\xe7\x4f\x60\x60\x59\x5d\x73\x9d\x3d\xd7\xb6\x50\xf8\x17\xd7\x6c\xe0\xa2\x55\x09\xb6\xba\x03\xc7\x68\x6f\xb1\x7a\xbb\x72\xa1\x1c\xdf\x62\xe5\x4e\xf7\xf9\x2d\x8f\xc2\x57\xdd\x56\x98\x04\x83\x6d\xc7\x49\x10\x9e\xaf\x2b\x8c\xd3\x7e\xc3\xab\x8b\x7f\x9a\xd1\x6e\xf4\x3f\x00\x00\xff\xff\x6e\x83\x09\x2a\xc1\x05\x00\x00")

func cosmosdbJsonBytes() ([]byte, error) {
	return bindataRead(
		_cosmosdbJson,
		"cosmosdb.json",
	)
}

func cosmosdbJson() (*asset, error) {
	bytes, err := cosmosdbJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cosmosdb.json", size: 1473, mode: os.FileMode(420), modTime: time.Unix(1563946123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rediscacheJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x44\x06\x29\x89\x94\xba\xc9\x22\x24\xd4\x2b\x07\x84\x56\xac\x10\x8b\xb8\x54\x3d\xcc\xba\xd3\xd6\x6c\xe2\x31\xfe\x58\xa9\xa0\xfe\x77\x94\xa6\xf9\x68\x9a\xa4\x1c\xf6\x40\x7b\xf3\x3c\xbf\xf7\x26\xf3\xc6\x7f\x66\x41\x10\x04\xec\xad\x15\x7b\x2c\x80\x2d\x03\xb6\x77\x4e\x2f\x17\x8b\xea\x80\x17\xa0\x60\x87\x05\x2a\xc7\xe1\xb7\x37\xc8\x05\x15\xe7\x9a\x5d\xdc\xa5\xd9\xfb\x79\x9a\xcd\xd3\x6c\xb1\x41\x9d\xd3\xa1\xc4\x7d\xc7\x42\xe7\xe0\x90\xff\xb4\xa4\xde\xb0\xa4\x12\x10\xa4\x1c\x2a\xf7\x03\x8d\x95\xa4\x4a\x9d\x8c\xa7\xe5\xbf\x06\x68\x30\x50\xa0\x43\x63\xd9\x32\xa8\x5c\x9d\xce\x73\x12\xe0\xaa\x2b\xed\xe9\xa9\xe2\x0e\x1a\x4b\x22\xeb\x8c\x54\x3b\xd6\x14\x8f\x49\x7b\x5b\x1b\xd2\x68\x9c\x44\xcb\xed\xb3\xe7\x0a\x0a\x7c\x15\xa2\x2d\x14\x32\x3f\xbc\x0a\x95\x00\x0d\x42\xba\x09\x32\xa9\xdc\x4d\x26\x54\xf0\x94\xe3\x03\xa9\x47\x9b\x7f\x25\xe3\xc6\xd9\x9e\x88\xf2\x0e\xdd\xac\x43\xca\x5e\xc0\xc8\x92\xa7\x37\x03\x83\x1b\x69\x3f\x82\xd8\xe3\x43\xf5\x01\xd9\x4a\x90\x12\xe0\xa2\x10\x2c\x85\x49\xe0\x95\xfc\xe5\xf1\xf1\xd4\x74\x64\xd0\x92\x37\x02\x3f\x19\xf2\x3a\x8a\xb9\xdc\xc4\xf1\x9a\x5d\xe8\xd4\x90\x52\x67\xd5\xe8\x8c\x18\xfe\x22\x85\x21\x4b\x5b\xc7\x4f\x16\x16\xdf\x4a\x37\x2c\xb9\x04\x83\x96\x9d\x6c\xdd\xa5\xd9\x87\x79\xfa\x6e\x9e\x66\x7d\x9c\xaa\x1b\x68\x5a\x8d\xc2\xcb\xf6\xc2\x78\xdd\xbf\xd4\xc9\x20\x5b\xb5\x41\x8d\xc2\xba\x30\x70\xa7\x9d\xcd\xd5\x28\x4e\x75\xfb\xec\x07\x0b\x97\x2e\xbb\x62\x03\x59\xbe\xd6\x6d\x28\x9a\x84\x4e\x92\x54\xa8\x09\x9a\x4e\x3a\x27\x89\x6a\x5c\x58\x8f\xba\xfb\x3b\x5e\x93\xb3\x81\xc0\x8e\x0a\xf4\xb1\xc3\x7e\xcf\x31\x25\xb5\x95\x3b\x6f\x9a\x47\xe3\x78\x01\x3c\xf6\x92\xbf\x3e\x27\x92\xbc\xd3\xde\xdd\xca\xfd\xf4\xb6\xf7\x12\xf0\x02\xb9\xff\x87\xac\x8d\x6c\xb6\x2c\xc0\x1c\xee\xf1\xf6\x1b\x33\xaa\x9a\x4b\xeb\xee\xf1\x60\x9b\x85\xfc\xbc\x89\xc2\xc1\x65\x0a\x93\x60\xc2\x62\x9c\x04\x61\xbb\x50\x61\xcc\x5b\x73\x23\xee\x2d\x0a\x52\x9b\xff\xd6\x7f\xd7\xde\xfa\xea\x29\x9c\x1d\x67\x7f\x03\x00\x00\xff\xff\xa7\x3e\x2d\x81\x15\x07\x00\x00")

func rediscacheJsonBytes() ([]byte, error) {
	return bindataRead(
		_rediscacheJson,
		"rediscache.json",
	)
}

func rediscacheJson() (*asset, error) {
	bytes, err := rediscacheJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rediscache.json", size: 1813, mode: os.FileMode(420), modTime: time.Unix(1563946509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4f\x6f\xd3\x4e\x10\xbd\xe7\x53\x58\xfe\xfd\xa4\x4d\x24\xc7\xb1\x2b\x21\x50\xab\x1c\x40\x20\x40\x15\x14\xa9\x11\x97\x28\x87\x65\x3d\x69\x97\xda\x3b\xcb\xce\x6c\x8b\x41\xfd\xee\xc8\x71\x9d\x38\x4e\x4c\xaa\xf4\x80\x40\xbe\xed\xfc\x7b\xef\xf9\xcd\xee\xcf\x41\x10\x04\x41\xf8\x3f\xa9\x6b\x28\x64\x78\x1a\x84\xd7\xcc\xf6\x74\x32\xa9\x0f\xe2\x42\x1a\x79\x05\x05\x18\x8e\xe5\x0f\xef\x20\x56\x58\x3c\xc4\x68\x72\x92\xa4\xcf\xc6\x49\x3a\x4e\xd2\x49\x06\x36\xc7\xb2\xca\x9b\x41\x61\x73\xc9\x10\x7f\x25\x34\xff\x85\x51\x3d\x40\xa1\x61\x30\xfc\x19\x1c\x69\x34\xd5\x9c\x34\x4e\xaa\xaf\x49\xb0\xd2\xc9\x02\x18\x1c\x85\xa7\x41\x8d\x6a\x75\x9e\xa3\x92\x5c\x97\x6c\x4e\x57\x11\x2e\x2d\x54\x8d\x2e\xd9\x69\x73\x15\xae\x83\xf7\xd1\xa6\x5a\x2a\x85\xde\xf0\xac\x4e\x3d\xa2\xc1\x8d\x36\xd9\xd1\xa3\x81\x68\xa6\xc1\x1d\x57\x4f\xde\x5a\x74\x4c\xef\x98\x2d\xcd\x9c\x5c\x2e\xb5\xba\x30\x79\xd9\xdf\xed\x15\x62\xde\xea\x35\x68\x75\x0c\x6f\xa5\xd3\xf2\x4b\x0e\x1d\x75\x89\xd1\xc9\x2b\x78\x59\xcb\xf4\x51\x16\xab\x46\x73\x85\x46\x49\x1e\x0a\x49\x28\xa2\xc0\x1b\xfd\xcd\x43\x8d\x75\xe8\x80\xd0\x3b\x05\x6f\x1d\x7a\x3b\x1c\xc5\x3a\x1b\x8d\x16\xe1\xd6\xac\x26\xa5\x9a\x35\x5f\xcf\xea\x01\xfd\x41\x2b\x87\x84\x4b\x8e\x2f\x6b\x2c\x93\x6d\x4c\x14\x46\xdb\x85\xd2\xea\x96\x8b\x4e\x92\xf4\xc5\x38\x79\x3e\x4e\xd2\x6e\x9e\x69\xc8\xac\xa9\x0f\xc5\x2e\x5d\x31\x5a\x74\x0b\x5b\x8e\x0b\xe7\x1b\x5b\x0e\x45\x13\xd8\x53\x93\x81\x05\x93\xd1\x45\x55\x34\x5f\x74\x82\x74\xe3\x77\x7e\xda\x36\xc4\xf6\x94\x96\x65\x45\xa3\xec\x1e\x7f\x04\x2d\x77\x6e\x37\xa8\x0e\xf7\x40\xb4\x0e\x2d\x38\xd6\x1d\x0b\x6c\x74\x6d\xfb\x75\x07\xd2\x43\x68\xb7\x6f\x70\xc0\xab\xdb\x9d\xfa\x12\x77\x99\x76\x7c\xfc\xa0\x69\x88\x9e\xad\xe7\xc7\xb8\xb8\xc7\x6f\x54\xaf\x5c\x47\x9c\x5b\x99\xfb\x47\xba\x65\xff\x35\x01\x65\x7a\xfc\xcc\x5c\x13\x9f\x43\x49\xeb\xe5\x7a\x9f\x0d\xc5\xc1\xc5\x10\x51\x70\x00\xec\x28\x0a\xc4\x66\x41\xc4\x28\xbe\x81\x92\xe6\xc9\x22\x5e\x8d\xee\xa7\x72\xf2\xb7\x50\x49\x7f\x4f\x45\xa1\x31\xa0\xaa\x95\xad\x2f\xaf\x27\xfc\xa2\xe6\x46\x7c\x0d\x4b\xe9\x73\x7e\x63\x32\x8b\xda\x30\x7d\x72\xc8\xa8\x30\x9f\x56\xcf\x26\x9d\xb5\x30\x4f\x45\x74\x80\x53\x24\x9a\xfc\x73\x28\xa7\x22\xfa\x33\x36\x88\xc4\x59\xc3\xe6\xd2\x2f\x97\xfa\xfb\x54\xa1\x83\xf8\x4e\x9b\x0c\xef\x28\x36\xc0\xbd\xae\xef\xea\xfb\x04\xdf\xfc\x7b\xfa\xa6\x47\xea\x5b\x3f\xa5\x83\xfb\xc1\xaf\x00\x00\x00\xff\xff\xa5\xf7\x8d\x6d\x9b\x09\x00\x00")

func storageJsonBytes() ([]byte, error) {
	return bindataRead(
		_storageJson,
		"storage.json",
	)
}

func storageJson() (*asset, error) {
	bytes, err := storageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.json", size: 2459, mode: os.FileMode(420), modTime: time.Unix(1563946123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cosmosdb.json":   cosmosdbJson,
	"rediscache.json": rediscacheJson,
	"storage.json":    storageJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cosmosdb.json":   &bintree{cosmosdbJson, map[string]*bintree{}},
	"rediscache.json": &bintree{rediscacheJson, map[string]*bintree{}},
	"storage.json":    &bintree{storageJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
