trigger:
  branches:
    include:
    - master

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  MAJOR_VERSION: 0
  MINOR_VERSION: 0
  PATCH_VERSION: $(Build.BuildId)
  GOROOT: '/usr/local/go1.12' # Go installation path
  GOPATH: '$(System.DefaultWorkingDirectory)/gopath' # Go workspace path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  MODULE_PATH: '$(GOPATH)/src/$(Build.Repository.Name)' # Path to the module's code
  IMAGE_NAME: 'candidate/k8s/azure-service-operator'
  KUBEBUILDER_ASSETS: $(MODULE_PATH)/bin
  # CONTAINER_REGISTRY:     - set this value in Azure Devops variables - Name of Service Connection
  # AZURE_SUBSCRIPTION_ID   - set this value in Azure Devops variables
  # AZURE_TENANT_ID:        - set this value in Azure Devops variables
  # AZURE_CLIENT_ID:        - set this value in Azure Devops variables
  # AZURE_CLIENT_SECRET:    - set this value in Azure Devops variables
  # REQUEUE_AFTER:          - set this value in Azure Devops variables

steps:

- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  lfs: "true"

- script: |
    set -x
    ls -l /usr/local/go*
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(MODULE_PATH)'
    shopt -s extglob
    mv !(GOPATH) '$(MODULE_PATH)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    go version
    go env
  displayName: 'Set up the Go workspace'
  env:
    GO111MODULE: on

- script: |
    set -x
    os=$(go env GOOS)
    arch=$(go env GOARCH)

    mkdir -p $(MODULE_PATH)/bin

    # download kubebuilder
    curl -sL https://go.kubebuilder.io/dl/2.0.0-alpha.4/${os}/${arch} | tar -xz -C $(MODULE_PATH)/bin
    mv $(MODULE_PATH)/bin/kubebuilder_2.0.0-alpha.4_${os}_${arch}/bin/* $(MODULE_PATH)/bin

    # download kustomize
    curl -o $(MODULE_PATH)/bin/kustomize -sL https://go.kubebuilder.io/kustomize/${os}/${arch}

    # set permission
    chmod a+x $(MODULE_PATH)/bin/*
    export PATH=$PATH:$(MODULE_PATH)/bin
    echo '##vso[task.prependpath]$(MODULE_PATH)/bin'

    which kustomize
    kustomize version

    go mod download
    go get -u github.com/jstemmer/go-junit-report
    go get github.com/axw/gocov/gocov
    go get github.com/AlekSi/gocov-xml
    go get -u gopkg.in/matm/v1/gocov-html
    go get golang.org/x/tools/cmd/cover
    go get github.com/onsi/ginkgo/ginkgo
  displayName: 'Install kubebuilder, kustomize and set environment'
  env:
    GO111MODULE: on
    KUBEBUILDER_ASSETS: $(MODULE_PATH)/bin
  workingDirectory: '$(MODULE_PATH)'

- script: |
    set -e
    make test
    make api-test
    gocov convert coverage.txt > coverage.json
    gocov-xml < coverage.json > coverage.xml
    mkdir coverage
  continueOnError: 'false'
  displayName: 'Run unit tests'
  env:
    GO111MODULE: on
    KUBEBUILDER_ASSETS: $(MODULE_PATH)/bin
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    REQUEUE_AFTER: $(REQUEUE_AFTER)
  workingDirectory: '$(MODULE_PATH)'

- script: |
    set -e

    # Setup terraform configuration variables
    cat >./terraform.auto.tfvars <<EOL
    resource_group = "aso-integration-$(PATCH_VERSION)"
    service_principal_app_id = "$(AZURE_CLIENT_ID)"
    service_principal_client_secret = "$(AZURE_CLIENT_SECRET)"
    EOL

    echo $KUBECONFIG
    kubectl config view
    ls -la ~/
    mkdir ~/.kube
    ls -la ~/.kube/

    # terraform-and-deploy
    make terraform ARGS="-auto-approve"
    make generate
    make install-cert-manager
    make build-and-push
    make deploy

    # Wait for the pod to come up
    kubectl wait pod -n azureoperator-system --for condition=ready --timeout=60s --all

    # Run tests
    make test-existing
  continueOnError: 'false'
  displayName: 'Create AKS cluster and Run integration tests'
  env:
    GO111MODULE: on
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    REQUEUE_AFTER: $(REQUEUE_AFTER)
    KUBEBUILDER_ASSETS: $(MODULE_PATH)/bin
  workingDirectory: '$(MODULE_PATH)'

- script: |
    terraform destroy -auto-approve
  env:
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
  condition: always()
  workingDirectory: '$(MODULE_PATH)'
  displayName: 'Terraform Cleanup'

- task: PublishTestResults@2
  displayName: 'Publish `make test` JUnit Report'
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
    failTaskOnFailedTests: 'true'
    failOnStandardError: 'true'

- task: PublishTestResults@2
  displayName: 'Publish `make test-existing` JUnit Report'
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report-existing.xml
    failTaskOnFailedTests: 'true'
    failOnStandardError: 'true'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
    failIfCoverageEmpty: 'true'
    failOnStandardError: 'true'

- script: docker build -t $(IMAGE_NAME) .  # add options to this command to meet your needs
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Docker build'
  workingDirectory: '$(MODULE_PATH)'

- task: Docker@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: $(CONTAINER_REGISTRY)

- task: Docker@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Build and Push Docker Image $(IMAGE_NAME)
  inputs:
    command: buildAndPush
    containerRegistry: $(CONTAINER_REGISTRY)
    repository: $(IMAGE_NAME)
    Dockerfile: "$(MODULE_PATH)/Dockerfile"
    buildContext: $(MODULE_PATH)
    tags: |
      latest
      $(MAJOR_VERSION).$(MINOR_VERSION).$(PATCH_VERSION)

- script: |
    make kustomize > $(Build.ArtifactStagingDirectory)/setup.yaml
    echo $IMG > $(Build.ArtifactStagingDirectory)/azure-service-operator.txt
  continueOnError: 'false'
  displayName: 'Publish deployment manifests'
  workingDirectory: '$(MODULE_PATH)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: drop
