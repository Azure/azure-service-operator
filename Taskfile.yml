version: '3.7'

run: when_changed
output: prefixed

vars:
  ROOT: ./v2
  PACKAGE: github.com/Azure/azure-service-operator/v2

  GENERATOR_BIN: bin/aso-gen
  CONTROLLER_BIN: bin/aso-controller

  CROSSPLANE_APP: crossplane-gen
  CROSSPLANE_ROOT: "{{.ROOT}}/crossplane"

  SCRIPTS_ROOT: ./scripts

  VERSION: 
    # Version tags for the v2 controller must start with "v2", e.g. "v2.0.0-alpha.0".
    sh: "{{.SCRIPTS_ROOT}}/build-version.py v2"

  VERSION_FLAGS: -ldflags "-X {{.PACKAGE}}/internal/version.BuildVersion={{.VERSION}}"

  CONTROLLER_DOCKER_IMAGE: azureserviceoperator:{{.VERSION}}
  PUBLIC_REGISTRY: mcr.microsoft.com/k8s/
  LOCAL_REGISTRY_CONTROLLER_DOCKER_IMAGE: localhost:5000/azureserviceoperator:latest

  # how long to let tests against live resources run for
  LIVE_TEST_TIMEOUT: 2h

tasks:
  ## top-level targets ##
  default:
    desc: Perform all fast local pre-commit tasks.
    deps:
    - quick-checks
    - crossplane:generate-crds

  ci:
    desc: Run all CI checks.
    deps: 
    - ci-checks
    - controller:test-integration-envtest-cover
    - crossplane:ci

  ci-live:
    desc: Run all CI checks with live Azure resources. Requires that auth environment variables are set.
    deps: 
    - ci-checks
    - controller:test-integration-envtest-live

  lint:
    desc: Run fast lint checks.
    deps: [generate-types]
    dir: "{{.ROOT}}"
    cmds:
    - golangci-lint run -v

  lint-full:
    desc: Run all lint checks.
    deps: [generate-types]
    dir: "{{.ROOT}}"
    cmds:
    - golangci-lint run -v --fast=false

  format-code:
    desc: Ensure all code is correctly formatted.
    dir: "{{.ROOT}}"
    cmds: 
    - gofmt -l -s -w .

  test:
    desc: Run unit tests.
    dir: "{{.ROOT}}"
    deps: [generate-types]
    cmds:
    - go test ./... -short -tags=noexit -run '{{default ".*" .TEST_FILTER}}'

  test:update-golden-files:
    desc: Update golden test outputs.
    dir: "{{.ROOT}}"
    cmds:
    - go test ./... -short -run ^TestGolden -update

  test-cover:
    desc: Run unit tests and output coverage.
    dir: "{{.ROOT}}"
    deps: [generate-types]
    cmds:
    - go test ./... -short -tags=noexit -run '{{default ".*" .TEST_FILTER}}' -race -covermode atomic -coverprofile=coverage.out -coverpkg=./...

  generate-types:
    cmds:
      - task: generate-types-generic
        vars:
          CONFIG: azure-arm.yaml
          OUTPUT: api

  generate-types-generic:
    label: "generate-types: {{.CONFIG}}"
    desc: Run {{.GENERATOR_BIN}} to generate input files for controller-gen for {{.CONTROLLER_BIN}}, and controller-gen for deepcopy implementation.
    dir: "{{.ROOT}}"
    deps: [generator:build]
    sources:
      - "{{.GENERATOR_BIN}}"
      - "{{.CONFIG}}"
    cmds:
      - find {{.OUTPUT}} -type f '(' -name '*_gen.go' -o -name '*_gen_test.go' ')' -delete
      - find {{.OUTPUT}} -type f -name "zz_generated.deepcopy.go" -delete
      # re-generate '…_gen.go' files
      - ./{{.GENERATOR_BIN}} gen-types {{.CONFIG}}
      # re-generate deepcopy 'zz_generated.deepcopy.go' files
      - cd {{.OUTPUT}} && controller-gen "object:headerFile={{.headerFile}}" paths=./...
    vars:
      headerFile:
        sh: realpath boilerplate.go.txt

  generate-crds:
    desc: Run controller-gen to generate {{.CONTROLLER_BIN}} CRD files.
    deps: [generate-types]
    dir: "{{.ROOT}}"
    sources:
    - "api/**/*.go" 
    cmds:
    - mkdir -p "{{.OUTPUT}}"
    - if [ -d "{{.OUTPUT}}/crd/bases" ]; then find "{{.OUTPUT}}/crd/bases" -type f -delete; fi
    - cd api && controller-gen {{.CRD_OPTIONS}} {{.RBAC_OPTIONS}} {{.WEBHOOK_OPTIONS}} paths=./...
    vars:
      OUTPUT:
        sh: realpath config
      CRD_OPTIONS: crd:crdVersions=v1,allowDangerousTypes=true output:crd:artifacts:config={{.OUTPUT}}/crd/bases
      WEBHOOK_OPTIONS: webhook output:webhook:artifacts:config={{.OUTPUT}}/webhook
      RBAC_OPTIONS: rbac:roleName=manager-role output:rbac:artifacts:config={{.OUTPUT}}/rbac

  quick-checks:
    deps: [test]
    cmds:
    # These must run after `test` because that might regenerate files
    - task: header-check
    - task: specifier-check
    - task: format-code
    # Lint is forced to the end because it expects the code is formatted
    - task: lint
  
  ci-checks:
    # does a full lint and doesn’t format code
    # since we want to ensure that code is formatted
    deps: [header-check, specifier-check, lint-full, test-cover]

  ############### Generator targets ###############

  generator:build:
    desc: Generate the {{.GENERATOR_BIN}} binary.
    dir: "{{.ROOT}}"
    # let go figure out caching etc. dependent tasks will use the binary as a `source`
    cmds:
    - go build {{.VERSION_FLAGS}} -o {{.GENERATOR_BIN}} ./tools/generator

  generator:diagrams:
    desc: Regenerate all GraphViz diagrams
    dir: docs/design/images
    sources: ["*/*.dot"]
    cmds:
    - "for f in **/*.dot; do dot -Tpng -o${f%.dot}.png $f; done"

  ############### Controller targets ###############

  controller:build:
    desc: Generate the {{.CONTROLLER_BIN}} binary.
    dir: "{{.ROOT}}"
    # let go figure out caching etc. dependent tasks will use the binary as a `source`
    cmds:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build {{.VERSION_FLAGS}} -o {{.CONTROLLER_BIN}} ./cmd/controller

  controller:docker-build:
    desc: Builds the {{.CONTROLLER_BIN}} Docker image.
    dir: "{{.ROOT}}"
    deps: [controller:build]
    sources:
    - Dockerfile
    - "{{.CONTROLLER_BIN}}"
    cmds:
    - docker build . -t {{.CONTROLLER_DOCKER_IMAGE}}

  controller:docker-build-and-save:
    desc: Builds the {{.CONTROLLER_BIN}} Docker image and saves it using docker save.
    dir: "{{.ROOT}}"
    deps: [controller:docker-build]
    cmds:
    - docker save {{.CONTROLLER_DOCKER_IMAGE}} > bin/$(echo '{{.CONTROLLER_DOCKER_IMAGE}}' | sed -e 's/:/_/g').tar

  controller:docker-tag-version:
    desc: Tags the {{.CONTROLLER_BIN}} Docker image with the appropriate version.
    dir: "{{.ROOT}}"
    deps: [controller:docker-build]
    cmds:
    - 'if [ -z "{{.DOCKER_PUSH_TARGET}}" ]; then echo "Error: DOCKER_PUSH_TARGET must be set"; exit 1; fi'
    - docker tag {{.CONTROLLER_DOCKER_IMAGE}} "{{.DOCKER_PUSH_TARGET}}/{{.CONTROLLER_DOCKER_IMAGE}}"

  controller:docker-push-local:
    desc: Pushes the controller container image to a local registry
    deps: [controller:docker-build]
    dir: "{{.ROOT}}"
    cmds:
    - docker tag {{.CONTROLLER_DOCKER_IMAGE}} {{.LOCAL_REGISTRY_CONTROLLER_DOCKER_IMAGE}}
    - docker push {{.LOCAL_REGISTRY_CONTROLLER_DOCKER_IMAGE}}

  controller:test-integration-envtest:
    desc: Run integration tests with envtest using record/replay.
    dir: "{{.ROOT}}"
    deps: [controller:generate-kustomize]
    cmds:
    # -race fails at the moment in controller-runtime
    - go test -run '{{default ".*" .TEST_FILTER}}' ./...

  controller:test-integration-envtest-cover:
    desc: Run integration tests with envtest using record/replay and output coverage.
    dir: "{{.ROOT}}"
    deps: [controller:generate-kustomize]
    cmds:
    # -race fails at the moment in controller-runtime
    - go test ./test/controller -run '{{default ".*" .TEST_FILTER}}' -covermode atomic -coverprofile=coverage-integration-envtest.out -coverpkg="./..."

  controller:test-integration-envtest-live:
    desc: Run integration tests with envtest against live data and output coverage.
    dir: "{{.ROOT}}"
    deps: [controller:generate-kustomize, cleanup-azure-resources]
    cmds:
    # -race fails at the moment in controller-runtime
    - RECORD_REPLAY=0 go test ./test/controller -run '{{default ".*" .TEST_FILTER}}' -timeout {{.LIVE_TEST_TIMEOUT}} -covermode atomic -coverprofile=coverage-integration-envtest-live.out -coverpkg="./..."

  controller:generate-genruntime-deepcopy:
    desc: Run controller-gen to generate {{.CONTROLLER_BIN}} CRD files.
    dir: "{{.ROOT}}"
    sources:
      - "pkg/genruntime/**/*.go"
    cmds:
      - find pkg/genruntime -type f -name "zz_generated.*" -delete
      - cd pkg/genruntime && controller-gen object:headerFile={{.headerFile}} paths=./...
    vars:
      headerFile: 
        sh: realpath boilerplate.go.txt

  controller:generate-kustomize:
    desc: Run {{.GENERATOR_BIN}} to generate the Kustomize file.
    deps: [generate-crds, controller:generate-genruntime-deepcopy]
    dir: "{{.ROOT}}"
    sources:
      - "{{.GENERATOR_BIN}}"
      - config/crd/bases/**/*.yaml
    generates:
      - config/crd/kustomization.yaml
    cmds:
      - ./{{.GENERATOR_BIN}} gen-kustomize config/crd

  controller:run-kustomize:
    desc: Generates the CRD & configuration bundle.
    deps: [controller:generate-kustomize]
    dir: "{{.ROOT}}"
    cmds:
    - mkdir -p bin # in case it doesn’t exist
    - kustomize build config/default | sed -e 's@localhost:5000/azureserviceoperator:latest@{{.PUBLIC_REGISTRY}}{{.CONTROLLER_DOCKER_IMAGE}}@g' > bin/azureserviceoperator_{{.VERSION}}.yaml

  controller:kind-delete:
    desc: Deletes a kind cluster
    cmds:
      - "kind delete cluster --name=asov2"

  controller:kind-create:
    desc: Creates a kind cluster
    cmds:
      - "export KIND_CLUSTER_NAME=asov2 && {{.SCRIPTS_ROOT}}/kind-with-registry.sh"

  controller:install:
    desc: Installs the controller, webhooks, and CRDs into the default kubectl cluster
    dir: "{{.ROOT}}"
    deps: [controller:generate-kustomize]
    cmds:
      - kustomize build config/default | kubectl apply -f - # TODO: may need | sed "s_${CONFIG_REGISTRY}_${REGISTRY}/${IMG}_" at some point
      - "{{.SCRIPTS_ROOT}}/deploy_testing_secret.sh"

  controller:install-cert-manager:
    desc: Installs cert manager
    cmds:
      - "kubectl create namespace cert-manager"
      - "kubectl label namespace cert-manager cert-manager.io/disable-validation=true"
      - "kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml"  # TODO: Bump this version?

  ############### Crossplane targets ###############

  crossplane:generate-types:
    cmds:
      - task: generate-types-generic
        vars: 
          CONFIG: azure-crossplane.yaml
          OUTPUT: crossplane

  crossplane:generate-crds:
    desc: Run controller-gen to generate {{.CROSSPLANE_APP}} CRD files.
    deps: [crossplane:generate-types]
    dir: "{{.CROSSPLANE_ROOT}}"
    sources:
      - "_apis/**/*_gen.go" # depends on all generated types
    cmds:
      - mkdir -p ./_apis
      - find ./_apis -type f -name "zz_generated.*" -delete
      - if [ -d "./config/crd/bases" ]; then find "./config/crd/bases" -type f -delete; fi
      # must CD into _apis as it is ignored by default (this is on purpose to not kill gopls!)
      - cd _apis && controller-gen "object:headerFile={{.BOILERPLATE}}" paths=./...
      - cd _apis && controller-gen {{.CRD_OPTIONS}} rbac:roleName=manager-role webhook paths=./... output:crd:artifacts:config=../config/crd/bases output:webhook:artifacts:config=../config/webhook
    vars:
      CRD_OPTIONS: "crd:crdVersions=v1,allowDangerousTypes=true"
      BOILERPLATE:
        sh: realpath ../boilerplate.go.txt

  crossplane:ci:
    deps: [header-check, specifier-check, crossplane:generate-crds]

  ############### Shared targets ###############

  cleanup-azure-resources:
    desc: Removes any old resources created by integration tests.
    # This finds all resource groups which match the specified pattern (asotest*)
    # and are older than a day (86400 seconds). This is a bit horrible but it works...
    # [*]: this must match what is specified in raw_client.go
    cmds:
      - |
        rgs=`az group list --query '[*].{Name: name, CreatedAt: tags.CreatedAt}' \
          | jq -r '.[] | select(.Name | test("^asotest")) | select(.CreatedAt == null or now-(.CreatedAt | fromdate) > 86400) | .Name'`; \
        for rgname in ${rgs[@]} ; do \
          echo "$rgname will be deleted"; \
          az group delete --name $rgname --no-wait --yes; \
        done

  header-check:
    desc: Ensure all files have an appropriate license header.
    cmds: [python3 ./scripts/check_headers.py]

  specifier-check:
    desc: Check that format specifiers %v and %+v are not used
    # Both %v and %+v result in all the values from structs being dumped into the string. If that 
    # struct happens to contain a secret or sensitive information, it ends up dumped out in an 
    # uncontrolled way, potentially leading to a security issue or a problem with PII disclosure.
    # The buried risk here is that while %v might be safe now, a future change to the struct might
    # introduce a disclosure later on. 
    cmds:
      - cmd: echo "==> Checking format specifiers <=="
        silent: true
      - cmd: '! git grep -e "%+v" -e "%v" --break --heading --line-number -I "*.go"'
