// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

//Generated from:
type AgentPool_StatusARM struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Properties: Properties of an agent pool.
	Properties *ManagedClusterAgentPoolProfileProperties_StatusARM `json:"properties,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`
}

//Generated from:
type ManagedClusterAgentPoolProfileProperties_StatusARM struct {
	//AvailabilityZones: Availability zones for nodes. Must use
	//VirtualMachineScaleSets AgentPoolType.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`

	//Count: Number of agents (VMs) to host docker containers. Allowed values must be
	//in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to
	//1000 (inclusive) for system pools. The default value is 1.
	Count *int `json:"count,omitempty"`

	//EnableAutoScaling: Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`

	//EnableEncryptionAtHost: Whether to enable EncryptionAtHost
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	//EnableFIPS: Whether to use FIPS enabled OS
	EnableFIPS *bool `json:"enableFIPS,omitempty"`

	//EnableNodePublicIP: Enable public IP for nodes
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`

	//EnableUltraSSD: Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`

	//GpuInstanceProfile: GPUInstanceProfile to be used to specify GPU MIG instance
	//profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g,
	//MIG4g and MIG7g.
	GpuInstanceProfile *GPUInstanceProfile_Status `json:"gpuInstanceProfile,omitempty"`

	//KubeletConfig: KubeletConfig specifies the configuration of kubelet on agent
	//nodes.
	KubeletConfig *KubeletConfig_StatusARM `json:"kubeletConfig,omitempty"`

	//KubeletDiskType: KubeletDiskType determines the placement of emptyDir volumes,
	//container runtime data root, and Kubelet ephemeral storage. Currently allows one
	//value, OS, resulting in Kubelet using the OS disk for data.
	KubeletDiskType *KubeletDiskType_Status `json:"kubeletDiskType,omitempty"`

	//LinuxOSConfig: LinuxOSConfig specifies the OS configuration of linux agent nodes.
	LinuxOSConfig *LinuxOSConfig_StatusARM `json:"linuxOSConfig,omitempty"`

	//MaxCount: Maximum number of nodes for auto-scaling
	MaxCount *int `json:"maxCount,omitempty"`

	//MaxPods: Maximum number of pods that can run on a node.
	MaxPods *int `json:"maxPods,omitempty"`

	//MinCount: Minimum number of nodes for auto-scaling
	MinCount *int `json:"minCount,omitempty"`

	//Mode: AgentPoolMode represents mode of an agent pool
	Mode *AgentPoolMode_Status `json:"mode,omitempty"`

	//NodeImageVersion: Version of node image
	NodeImageVersion *string `json:"nodeImageVersion,omitempty"`

	//NodeLabels: Agent pool node labels to be persisted across all nodes in agent
	//pool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	//NodePublicIPPrefixID: Public IP Prefix ID. VM nodes use IPs assigned from this
	//Public IP Prefix.
	NodePublicIPPrefixID *string `json:"nodePublicIPPrefixID,omitempty"`

	//NodeTaints: Taints added to new nodes during node pool create and scale. For
	//example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`

	//OrchestratorVersion: Version of orchestrator specified when creating the managed
	//cluster.
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`

	//OsDiskSizeGB: OS Disk Size in GB to be used to specify the disk size for every
	//machine in this master/agent pool. If you specify 0, it will apply the default
	//osDisk size according to the vmSize specified.
	OsDiskSizeGB *int `json:"osDiskSizeGB,omitempty"`

	//OsDiskType: OS disk type to be used for machines in a given agent pool. Allowed
	//values are 'Ephemeral' and 'Managed'. If unspecified, defaults to 'Ephemeral'
	//when the VM supports ephemeral OS and has a cache disk larger than the requested
	//OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after
	//creation.
	OsDiskType *OSDiskType_Status `json:"osDiskType,omitempty"`

	//OsSKU: OsSKU to be used to specify os sku. Choose from Ubuntu(default) and
	//CBLMariner for Linux OSType. Not applicable to Windows OSType.
	OsSKU *OSSKU_Status `json:"osSKU,omitempty"`

	//OsType: OsType to be used to specify os type. Choose from Linux and Windows.
	//Default to Linux.
	OsType *OSType_Status `json:"osType,omitempty"`

	//PodSubnetID: Pod SubnetID specifies the VNet's subnet identifier for pods.
	PodSubnetID *string `json:"podSubnetID,omitempty"`

	//PowerState: Describes whether the Agent Pool is Running or Stopped
	PowerState *PowerState_StatusARM `json:"powerState,omitempty"`

	//ProvisioningState: The current deployment or provisioning state, which only
	//appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ProximityPlacementGroupID: The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`

	//ScaleSetEvictionPolicy: ScaleSetEvictionPolicy to be used to specify eviction
	//policy for Spot virtual machine scale set. Default to Delete.
	ScaleSetEvictionPolicy *ScaleSetEvictionPolicy_Status `json:"scaleSetEvictionPolicy,omitempty"`

	//ScaleSetPriority: ScaleSetPriority to be used to specify virtual machine scale
	//set priority. Default to regular.
	ScaleSetPriority *ScaleSetPriority_Status `json:"scaleSetPriority,omitempty"`

	//SpotMaxPrice: SpotMaxPrice to be used to specify the maximum price you are
	//willing to pay in US Dollars. Possible values are any decimal value greater than
	//zero or -1 which indicates default price to be up-to on-demand.
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`

	//Tags: Agent pool tags to be persisted on the agent pool virtual machine scale
	//set.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: AgentPoolType represents types of an agent pool
	Type *AgentPoolType_Status `json:"type,omitempty"`

	//UpgradeSettings: Settings for upgrading the agentpool
	UpgradeSettings *AgentPoolUpgradeSettings_StatusARM `json:"upgradeSettings,omitempty"`

	//VmSize: Size of agent VMs.
	VmSize *string `json:"vmSize,omitempty"`

	//VnetSubnetID: VNet SubnetID specifies the VNet's subnet identifier for nodes and
	//maybe pods
	VnetSubnetID *string `json:"vnetSubnetID,omitempty"`
}

//Generated from:
type AgentPoolMode_Status string

const (
	AgentPoolMode_StatusSystem = AgentPoolMode_Status("System")
	AgentPoolMode_StatusUser   = AgentPoolMode_Status("User")
)

//Generated from:
type AgentPoolType_Status string

const (
	AgentPoolType_StatusAvailabilitySet         = AgentPoolType_Status("AvailabilitySet")
	AgentPoolType_StatusVirtualMachineScaleSets = AgentPoolType_Status("VirtualMachineScaleSets")
)

//Generated from:
type AgentPoolUpgradeSettings_StatusARM struct {
	//MaxSurge: Count or percentage of additional nodes to be added during upgrade. If
	//empty uses AKS default
	MaxSurge *string `json:"maxSurge,omitempty"`
}

//Generated from:
type GPUInstanceProfile_Status string

const (
	GPUInstanceProfile_StatusMIG1G = GPUInstanceProfile_Status("MIG1g")
	GPUInstanceProfile_StatusMIG2G = GPUInstanceProfile_Status("MIG2g")
	GPUInstanceProfile_StatusMIG3G = GPUInstanceProfile_Status("MIG3g")
	GPUInstanceProfile_StatusMIG4G = GPUInstanceProfile_Status("MIG4g")
	GPUInstanceProfile_StatusMIG7G = GPUInstanceProfile_Status("MIG7g")
)

//Generated from:
type KubeletConfig_StatusARM struct {
	//AllowedUnsafeSysctls: Allowlist of unsafe sysctls or unsafe sysctl patterns
	//(ending in `*`).
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`

	//ContainerLogMaxFiles: The maximum number of container log files that can be
	//present for a container. The number must be â‰¥ 2.
	ContainerLogMaxFiles *int `json:"containerLogMaxFiles,omitempty"`

	//ContainerLogMaxSizeMB: The maximum size (e.g. 10Mi) of container log file before
	//it is rotated.
	ContainerLogMaxSizeMB *int `json:"containerLogMaxSizeMB,omitempty"`

	//CpuCfsQuota: Enable CPU CFS quota enforcement for containers that specify CPU
	//limits.
	CpuCfsQuota *bool `json:"cpuCfsQuota,omitempty"`

	//CpuCfsQuotaPeriod: Sets CPU CFS quota period value.
	CpuCfsQuotaPeriod *string `json:"cpuCfsQuotaPeriod,omitempty"`

	//CpuManagerPolicy: CPU Manager policy to use.
	CpuManagerPolicy *string `json:"cpuManagerPolicy,omitempty"`

	//FailSwapOn: If set to true it will make the Kubelet fail to start if swap is
	//enabled on the node.
	FailSwapOn *bool `json:"failSwapOn,omitempty"`

	//ImageGcHighThreshold: The percent of disk usage after which image garbage
	//collection is always run.
	ImageGcHighThreshold *int `json:"imageGcHighThreshold,omitempty"`

	//ImageGcLowThreshold: The percent of disk usage before which image garbage
	//collection is never run.
	ImageGcLowThreshold *int `json:"imageGcLowThreshold,omitempty"`

	//PodMaxPids: The maximum number of processes per pod.
	PodMaxPids *int `json:"podMaxPids,omitempty"`

	//TopologyManagerPolicy: Topology Manager policy to use.
	TopologyManagerPolicy *string `json:"topologyManagerPolicy,omitempty"`
}

//Generated from:
type KubeletDiskType_Status string

const (
	KubeletDiskType_StatusOS        = KubeletDiskType_Status("OS")
	KubeletDiskType_StatusTemporary = KubeletDiskType_Status("Temporary")
)

//Generated from:
type LinuxOSConfig_StatusARM struct {
	//SwapFileSizeMB: SwapFileSizeMB specifies size in MB of a swap file will be
	//created on each node.
	SwapFileSizeMB *int `json:"swapFileSizeMB,omitempty"`

	//Sysctls: Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig_StatusARM `json:"sysctls,omitempty"`

	//TransparentHugePageDefrag: Transparent Huge Page defrag configuration.
	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty"`

	//TransparentHugePageEnabled: Transparent Huge Page enabled configuration.
	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty"`
}

//Generated from:
type OSDiskType_Status string

const (
	OSDiskType_StatusEphemeral = OSDiskType_Status("Ephemeral")
	OSDiskType_StatusManaged   = OSDiskType_Status("Managed")
)

//Generated from:
type OSSKU_Status string

const (
	OSSKU_StatusCBLMariner = OSSKU_Status("CBLMariner")
	OSSKU_StatusUbuntu     = OSSKU_Status("Ubuntu")
)

//Generated from:
type OSType_Status string

const (
	OSType_StatusLinux   = OSType_Status("Linux")
	OSType_StatusWindows = OSType_Status("Windows")
)

//Generated from:
type PowerState_StatusARM struct {
	//Code: Tells whether the cluster is Running or Stopped
	Code *PowerStateStatusCode `json:"code,omitempty"`
}

//Generated from:
type ScaleSetEvictionPolicy_Status string

const (
	ScaleSetEvictionPolicy_StatusDeallocate = ScaleSetEvictionPolicy_Status("Deallocate")
	ScaleSetEvictionPolicy_StatusDelete     = ScaleSetEvictionPolicy_Status("Delete")
)

//Generated from:
type ScaleSetPriority_Status string

const (
	ScaleSetPriority_StatusRegular = ScaleSetPriority_Status("Regular")
	ScaleSetPriority_StatusSpot    = ScaleSetPriority_Status("Spot")
)

type PowerStateStatusCode string

const (
	PowerStateStatusCodeRunning = PowerStateStatusCode("Running")
	PowerStateStatusCodeStopped = PowerStateStatusCode("Stopped")
)

//Generated from:
type SysctlConfig_StatusARM struct {
	//FsAioMaxNr: Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `json:"fsAioMaxNr,omitempty"`

	//FsFileMax: Sysctl setting fs.file-max.
	FsFileMax *int `json:"fsFileMax,omitempty"`

	//FsInotifyMaxUserWatches: Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `json:"fsInotifyMaxUserWatches,omitempty"`

	//FsNrOpen: Sysctl setting fs.nr_open.
	FsNrOpen *int `json:"fsNrOpen,omitempty"`

	//KernelThreadsMax: Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `json:"kernelThreadsMax,omitempty"`

	//NetCoreNetdevMaxBacklog: Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `json:"netCoreNetdevMaxBacklog,omitempty"`

	//NetCoreOptmemMax: Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `json:"netCoreOptmemMax,omitempty"`

	//NetCoreRmemDefault: Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `json:"netCoreRmemDefault,omitempty"`

	//NetCoreRmemMax: Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `json:"netCoreRmemMax,omitempty"`

	//NetCoreSomaxconn: Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `json:"netCoreSomaxconn,omitempty"`

	//NetCoreWmemDefault: Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `json:"netCoreWmemDefault,omitempty"`

	//NetCoreWmemMax: Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `json:"netCoreWmemMax,omitempty"`

	//NetIpv4IpLocalPortRange: Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `json:"netIpv4IpLocalPortRange,omitempty"`

	//NetIpv4NeighDefaultGcThresh1: Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `json:"netIpv4NeighDefaultGcThresh1,omitempty"`

	//NetIpv4NeighDefaultGcThresh2: Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `json:"netIpv4NeighDefaultGcThresh2,omitempty"`

	//NetIpv4NeighDefaultGcThresh3: Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `json:"netIpv4NeighDefaultGcThresh3,omitempty"`

	//NetIpv4TcpFinTimeout: Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `json:"netIpv4TcpFinTimeout,omitempty"`

	//NetIpv4TcpKeepaliveProbes: Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `json:"netIpv4TcpKeepaliveProbes,omitempty"`

	//NetIpv4TcpKeepaliveTime: Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `json:"netIpv4TcpKeepaliveTime,omitempty"`

	//NetIpv4TcpMaxSynBacklog: Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `json:"netIpv4TcpMaxSynBacklog,omitempty"`

	//NetIpv4TcpMaxTwBuckets: Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `json:"netIpv4TcpMaxTwBuckets,omitempty"`

	//NetIpv4TcpTwReuse: Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty"`

	//NetIpv4TcpkeepaliveIntvl: Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `json:"netIpv4TcpkeepaliveIntvl,omitempty"`

	//NetNetfilterNfConntrackBuckets: Sysctl setting
	//net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `json:"netNetfilterNfConntrackBuckets,omitempty"`

	//NetNetfilterNfConntrackMax: Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `json:"netNetfilterNfConntrackMax,omitempty"`

	//VmMaxMapCount: Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `json:"vmMaxMapCount,omitempty"`

	//VmSwappiness: Sysctl setting vm.swappiness.
	VmSwappiness *int `json:"vmSwappiness,omitempty"`

	//VmVfsCachePressure: Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `json:"vmVfsCachePressure,omitempty"`
}
