// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM, VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM(subject VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkTapPropertiesFormatStatusARMGenerator())
}

func Test_VirtualNetworkTapPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatStatusARM, VirtualNetworkTapPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatStatusARM runs a test to see if a specific instance of VirtualNetworkTapPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatStatusARM(subject VirtualNetworkTapPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//VirtualNetworkTapPropertiesFormatStatusARMGenerator()
var virtualNetworkTapPropertiesFormatStatusARMGenerator gopter.Gen

// VirtualNetworkTapPropertiesFormatStatusARMGenerator returns a generator of VirtualNetworkTapPropertiesFormat_StatusARM instances for property testing.
// We first initialize virtualNetworkTapPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapPropertiesFormatStatusARMGenerator() gopter.Gen {
	if virtualNetworkTapPropertiesFormatStatusARMGenerator != nil {
		return virtualNetworkTapPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM(generators)
	virtualNetworkTapPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM(generators)
	virtualNetworkTapPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_StatusARM{}), generators)

	return virtualNetworkTapPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(ProvisioningState_StatusDeleting, ProvisioningState_StatusFailed, ProvisioningState_StatusSucceeded, ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["DestinationNetworkInterfaceIPConfiguration"] = gen.PtrOf(NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["NetworkInterfaceTapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
}

func Test_FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM, FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(subject FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(subject NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM, NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(subject NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
func NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM, FrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(subject FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//FrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_StatusIPv4, IPVersion_StatusIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(ProvisioningState_StatusDeleting, ProvisioningState_StatusFailed, ProvisioningState_StatusSucceeded, ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["InboundNatPools"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["InboundNatRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["LoadBalancingRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["OutboundRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM
//instances for property testing - lazily instantiated by
//NetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_StatusIPv4, IPVersion_StatusIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(ProvisioningState_StatusDeleting, ProvisioningState_StatusFailed, ProvisioningState_StatusSucceeded, ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARM, ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARM(subject ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
func ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM, BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(subject BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARM, InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARM(subject InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
func InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM, NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM instances for property testing
//- lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM, PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM(subject PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuStatusARMGenerator())
}

func Test_Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusVirtualNetworkTapSubResourceEmbeddedARM, SubnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusVirtualNetworkTapSubResourceEmbeddedARM(subject Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SubnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var subnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
func SubnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return subnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	subnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return subnetStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM
//instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_VirtualNetworkTap_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(ProvisioningState_StatusDeleting, ProvisioningState_StatusFailed, ProvisioningState_StatusSucceeded, ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusVirtualNetworkTapSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddressStatusARMGenerator())
}

func Test_ApplicationGatewayBackendAddress_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressStatusARM, ApplicationGatewayBackendAddressStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressStatusARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressStatusARM(subject ApplicationGatewayBackendAddress_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_StatusARM instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddressStatusARMGenerator()
var applicationGatewayBackendAddressStatusARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressStatusARMGenerator returns a generator of ApplicationGatewayBackendAddress_StatusARM instances for property testing.
func ApplicationGatewayBackendAddressStatusARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressStatusARMGenerator != nil {
		return applicationGatewayBackendAddressStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatusARM(generators)
	applicationGatewayBackendAddressStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_StatusARM{}), generators)

	return applicationGatewayBackendAddressStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatusARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
