// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/apis/microsoft.network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources=virtualnetworks,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources={virtualnetworks/status,virtualnetworks/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworks
type VirtualNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworks_Spec  `json:"spec,omitempty"`
	Status            VirtualNetwork_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetwork{}

// GetConditions returns the conditions of the resource
func (virtualNetwork *VirtualNetwork) GetConditions() conditions.Conditions {
	return virtualNetwork.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (virtualNetwork *VirtualNetwork) SetConditions(conditions conditions.Conditions) {
	virtualNetwork.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-network-azure-com-v1alpha1api20201101-virtualnetwork,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=virtualnetworks,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworks.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetwork{}

// Default applies defaults to the VirtualNetwork resource
func (virtualNetwork *VirtualNetwork) Default() {
	virtualNetwork.defaultImpl()
	var temp interface{} = virtualNetwork
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (virtualNetwork *VirtualNetwork) defaultAzureName() {
	if virtualNetwork.Spec.AzureName == "" {
		virtualNetwork.Spec.AzureName = virtualNetwork.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetwork resource
func (virtualNetwork *VirtualNetwork) defaultImpl() { virtualNetwork.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetwork{}

// AzureName returns the Azure name of the resource
func (virtualNetwork *VirtualNetwork) AzureName() string {
	return virtualNetwork.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (virtualNetwork *VirtualNetwork) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(virtualNetwork.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: virtualNetwork.Namespace, Name: virtualNetwork.Spec.Owner.Name}
}

// +kubebuilder:webhook:path=/validate-microsoft-network-azure-com-v1alpha1api20201101-virtualnetwork,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=virtualnetworks,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworks.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetwork{}

// ValidateCreate validates the creation of the resource
func (virtualNetwork *VirtualNetwork) ValidateCreate() error {
	validations := virtualNetwork.createValidations()
	var temp interface{} = virtualNetwork
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (virtualNetwork *VirtualNetwork) ValidateDelete() error {
	validations := virtualNetwork.deleteValidations()
	var temp interface{} = virtualNetwork
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (virtualNetwork *VirtualNetwork) ValidateUpdate(old runtime.Object) error {
	validations := virtualNetwork.updateValidations()
	var temp interface{} = virtualNetwork
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (virtualNetwork *VirtualNetwork) createValidations() []func() error {
	return []func() error{virtualNetwork.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (virtualNetwork *VirtualNetwork) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (virtualNetwork *VirtualNetwork) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return virtualNetwork.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (virtualNetwork *VirtualNetwork) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&virtualNetwork.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualNetwork populates our VirtualNetwork from the provided source VirtualNetwork
func (virtualNetwork *VirtualNetwork) AssignPropertiesFromVirtualNetwork(source *v1alpha1api20201101storage.VirtualNetwork) error {

	// Spec
	var spec VirtualNetworks_Spec
	err := spec.AssignPropertiesFromVirtualNetworksSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromVirtualNetworksSpec()")
	}
	virtualNetwork.Spec = spec

	// Status
	var status VirtualNetwork_Status
	err = status.AssignPropertiesFromVirtualNetworkStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromVirtualNetworkStatus()")
	}
	virtualNetwork.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetwork populates the provided destination VirtualNetwork from our VirtualNetwork
func (virtualNetwork *VirtualNetwork) AssignPropertiesToVirtualNetwork(destination *v1alpha1api20201101storage.VirtualNetwork) error {

	// Spec
	var spec v1alpha1api20201101storage.VirtualNetworks_Spec
	err := virtualNetwork.Spec.AssignPropertiesToVirtualNetworksSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToVirtualNetworksSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.VirtualNetwork_Status
	err = virtualNetwork.Status.AssignPropertiesToVirtualNetworkStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToVirtualNetworkStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (virtualNetwork *VirtualNetwork) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: virtualNetwork.Spec.OriginalVersion(),
		Kind:    "VirtualNetwork",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworks
type VirtualNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetwork `json:"items"`
}

//Generated from:
type VirtualNetwork_Status struct {
	//AddressSpace: The AddressSpace that contains an array of IP address ranges that
	//can be used by subnets.
	AddressSpace *AddressSpace_Status `json:"addressSpace,omitempty"`

	//BgpCommunities: Bgp Communities sent over ExpressRoute with each route
	//corresponding to a prefix in this VNET.
	BgpCommunities *VirtualNetworkBgpCommunities_Status `json:"bgpCommunities,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DdosProtectionPlan: The DDoS protection plan associated with the virtual network.
	DdosProtectionPlan *SubResource_Status `json:"ddosProtectionPlan,omitempty"`

	//DhcpOptions: The dhcpOptions that contains an array of DNS servers available to
	//VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions_Status `json:"dhcpOptions,omitempty"`

	//EnableDdosProtection: Indicates if DDoS protection is enabled for all the
	//protected resources in the virtual network. It requires a DDoS protection plan
	//associated with the resource.
	EnableDdosProtection *bool `json:"enableDdosProtection,omitempty"`

	//EnableVmProtection: Indicates if VM protection is enabled for all the subnets in
	//the virtual network.
	EnableVmProtection *bool `json:"enableVmProtection,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//ExtendedLocation: The extended location of the virtual network.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this VNET.
	IpAllocations []SubResource_Status `json:"ipAllocations,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resourceGuid property of the Virtual Network resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Subnets: A list of subnets in a Virtual Network.
	Subnets []Subnet_Status_VirtualNetwork_SubResourceEmbedded `json:"subnets,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//VirtualNetworkPeerings: A list of peerings in a Virtual Network.
	VirtualNetworkPeerings []VirtualNetworkPeering_Status_SubResourceEmbedded `json:"virtualNetworkPeerings,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetwork_Status{}

// ConvertStatusFrom populates our VirtualNetwork_Status from the provided source
func (virtualNetworkStatus *VirtualNetwork_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetwork_Status)
	if ok {
		// Populate our instance from source
		return virtualNetworkStatus.AssignPropertiesFromVirtualNetworkStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetwork_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = virtualNetworkStatus.AssignPropertiesFromVirtualNetworkStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetwork_Status
func (virtualNetworkStatus *VirtualNetwork_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetwork_Status)
	if ok {
		// Populate destination from our instance
		return virtualNetworkStatus.AssignPropertiesToVirtualNetworkStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetwork_Status{}
	err := virtualNetworkStatus.AssignPropertiesToVirtualNetworkStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetwork_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkStatus *VirtualNetwork_Status) CreateEmptyARMValue() interface{} {
	return VirtualNetwork_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkStatus *VirtualNetwork_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetwork_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetwork_StatusARM, got %T", armInput)
	}

	// Set property ‘AddressSpace’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressSpace != nil {
			var addressSpace1 AddressSpace_Status
			err := addressSpace1.PopulateFromARM(owner, *typedInput.Properties.AddressSpace)
			if err != nil {
				return err
			}
			addressSpace := addressSpace1
			virtualNetworkStatus.AddressSpace = &addressSpace
		}
	}

	// Set property ‘BgpCommunities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpCommunities != nil {
			var bgpCommunities1 VirtualNetworkBgpCommunities_Status
			err := bgpCommunities1.PopulateFromARM(owner, *typedInput.Properties.BgpCommunities)
			if err != nil {
				return err
			}
			bgpCommunities := bgpCommunities1
			virtualNetworkStatus.BgpCommunities = &bgpCommunities
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DdosProtectionPlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosProtectionPlan != nil {
			var ddosProtectionPlan1 SubResource_Status
			err := ddosProtectionPlan1.PopulateFromARM(owner, *typedInput.Properties.DdosProtectionPlan)
			if err != nil {
				return err
			}
			ddosProtectionPlan := ddosProtectionPlan1
			virtualNetworkStatus.DdosProtectionPlan = &ddosProtectionPlan
		}
	}

	// Set property ‘DhcpOptions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DhcpOptions != nil {
			var dhcpOptions1 DhcpOptions_Status
			err := dhcpOptions1.PopulateFromARM(owner, *typedInput.Properties.DhcpOptions)
			if err != nil {
				return err
			}
			dhcpOptions := dhcpOptions1
			virtualNetworkStatus.DhcpOptions = &dhcpOptions
		}
	}

	// Set property ‘EnableDdosProtection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDdosProtection != nil {
			enableDdosProtection := *typedInput.Properties.EnableDdosProtection
			virtualNetworkStatus.EnableDdosProtection = &enableDdosProtection
		}
	}

	// Set property ‘EnableVmProtection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableVmProtection != nil {
			enableVmProtection := *typedInput.Properties.EnableVmProtection
			virtualNetworkStatus.EnableVmProtection = &enableVmProtection
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		virtualNetworkStatus.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		virtualNetworkStatus.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		virtualNetworkStatus.Id = &id
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworkStatus.IpAllocations = append(virtualNetworkStatus.IpAllocations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		virtualNetworkStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			virtualNetworkStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			virtualNetworkStatus.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Subnets’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Subnets {
			var item1 Subnet_Status_VirtualNetwork_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworkStatus.Subnets = append(virtualNetworkStatus.Subnets, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		virtualNetworkStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			virtualNetworkStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		virtualNetworkStatus.Type = &typeVar
	}

	// Set property ‘VirtualNetworkPeerings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualNetworkPeerings {
			var item1 VirtualNetworkPeering_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworkStatus.VirtualNetworkPeerings = append(virtualNetworkStatus.VirtualNetworkPeerings, item1)
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkStatus populates our VirtualNetwork_Status from the provided source VirtualNetwork_Status
func (virtualNetworkStatus *VirtualNetwork_Status) AssignPropertiesFromVirtualNetworkStatus(source *v1alpha1api20201101storage.VirtualNetwork_Status) error {

	// AddressSpace
	if source.AddressSpace != nil {
		var addressSpace AddressSpace_Status
		err := addressSpace.AssignPropertiesFromAddressSpaceStatus(source.AddressSpace)
		if err != nil {
			return errors.Wrap(err, "populating AddressSpace from AddressSpace, calling AssignPropertiesFromAddressSpaceStatus()")
		}
		virtualNetworkStatus.AddressSpace = &addressSpace
	} else {
		virtualNetworkStatus.AddressSpace = nil
	}

	// BgpCommunities
	if source.BgpCommunities != nil {
		var bgpCommunity VirtualNetworkBgpCommunities_Status
		err := bgpCommunity.AssignPropertiesFromVirtualNetworkBgpCommunitiesStatus(source.BgpCommunities)
		if err != nil {
			return errors.Wrap(err, "populating BgpCommunities from BgpCommunities, calling AssignPropertiesFromVirtualNetworkBgpCommunitiesStatus()")
		}
		virtualNetworkStatus.BgpCommunities = &bgpCommunity
	} else {
		virtualNetworkStatus.BgpCommunities = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	virtualNetworkStatus.Conditions = conditionList

	// DdosProtectionPlan
	if source.DdosProtectionPlan != nil {
		var ddosProtectionPlan SubResource_Status
		err := ddosProtectionPlan.AssignPropertiesFromSubResourceStatus(source.DdosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "populating DdosProtectionPlan from DdosProtectionPlan, calling AssignPropertiesFromSubResourceStatus()")
		}
		virtualNetworkStatus.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		virtualNetworkStatus.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if source.DhcpOptions != nil {
		var dhcpOption DhcpOptions_Status
		err := dhcpOption.AssignPropertiesFromDhcpOptionsStatus(source.DhcpOptions)
		if err != nil {
			return errors.Wrap(err, "populating DhcpOptions from DhcpOptions, calling AssignPropertiesFromDhcpOptionsStatus()")
		}
		virtualNetworkStatus.DhcpOptions = &dhcpOption
	} else {
		virtualNetworkStatus.DhcpOptions = nil
	}

	// EnableDdosProtection
	if source.EnableDdosProtection != nil {
		enableDdosProtection := *source.EnableDdosProtection
		virtualNetworkStatus.EnableDdosProtection = &enableDdosProtection
	} else {
		virtualNetworkStatus.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if source.EnableVmProtection != nil {
		enableVmProtection := *source.EnableVmProtection
		virtualNetworkStatus.EnableVmProtection = &enableVmProtection
	} else {
		virtualNetworkStatus.EnableVmProtection = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		virtualNetworkStatus.Etag = &etag
	} else {
		virtualNetworkStatus.Etag = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocationStatus()")
		}
		virtualNetworkStatus.ExtendedLocation = &extendedLocation
	} else {
		virtualNetworkStatus.ExtendedLocation = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		virtualNetworkStatus.Id = &id
	} else {
		virtualNetworkStatus.Id = nil
	}

	// IpAllocations
	ipAllocationList := make([]SubResource_Status, len(source.IpAllocations))
	for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
		// Shadow the loop variable to avoid aliasing
		ipAllocationItem := ipAllocationItem
		var ipAllocation SubResource_Status
		err := ipAllocation.AssignPropertiesFromSubResourceStatus(&ipAllocationItem)
		if err != nil {
			return errors.Wrap(err, "populating IpAllocations from IpAllocations, calling AssignPropertiesFromSubResourceStatus()")
		}
		ipAllocationList[ipAllocationIndex] = ipAllocation
	}
	virtualNetworkStatus.IpAllocations = ipAllocationList

	// Location
	if source.Location != nil {
		location := *source.Location
		virtualNetworkStatus.Location = &location
	} else {
		virtualNetworkStatus.Location = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualNetworkStatus.Name = &name
	} else {
		virtualNetworkStatus.Name = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		virtualNetworkStatus.ProvisioningState = &provisioningState
	} else {
		virtualNetworkStatus.ProvisioningState = nil
	}

	// ResourceGuid
	if source.ResourceGuid != nil {
		resourceGuid := *source.ResourceGuid
		virtualNetworkStatus.ResourceGuid = &resourceGuid
	} else {
		virtualNetworkStatus.ResourceGuid = nil
	}

	// Subnets
	subnetList := make([]Subnet_Status_VirtualNetwork_SubResourceEmbedded, len(source.Subnets))
	for subnetIndex, subnetItem := range source.Subnets {
		// Shadow the loop variable to avoid aliasing
		subnetItem := subnetItem
		var subnet Subnet_Status_VirtualNetwork_SubResourceEmbedded
		err := subnet.AssignPropertiesFromSubnetStatusVirtualNetworkSubResourceEmbedded(&subnetItem)
		if err != nil {
			return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesFromSubnetStatusVirtualNetworkSubResourceEmbedded()")
		}
		subnetList[subnetIndex] = subnet
	}
	virtualNetworkStatus.Subnets = subnetList

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	virtualNetworkStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		virtualNetworkStatus.Type = &typeVar
	} else {
		virtualNetworkStatus.Type = nil
	}

	// VirtualNetworkPeerings
	virtualNetworkPeeringList := make([]VirtualNetworkPeering_Status_SubResourceEmbedded, len(source.VirtualNetworkPeerings))
	for virtualNetworkPeeringIndex, virtualNetworkPeeringItem := range source.VirtualNetworkPeerings {
		// Shadow the loop variable to avoid aliasing
		virtualNetworkPeeringItem := virtualNetworkPeeringItem
		var virtualNetworkPeering VirtualNetworkPeering_Status_SubResourceEmbedded
		err := virtualNetworkPeering.AssignPropertiesFromVirtualNetworkPeeringStatusSubResourceEmbedded(&virtualNetworkPeeringItem)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkPeerings from VirtualNetworkPeerings, calling AssignPropertiesFromVirtualNetworkPeeringStatusSubResourceEmbedded()")
		}
		virtualNetworkPeeringList[virtualNetworkPeeringIndex] = virtualNetworkPeering
	}
	virtualNetworkStatus.VirtualNetworkPeerings = virtualNetworkPeeringList

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkStatus populates the provided destination VirtualNetwork_Status from our VirtualNetwork_Status
func (virtualNetworkStatus *VirtualNetwork_Status) AssignPropertiesToVirtualNetworkStatus(destination *v1alpha1api20201101storage.VirtualNetwork_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressSpace
	if virtualNetworkStatus.AddressSpace != nil {
		var addressSpace v1alpha1api20201101storage.AddressSpace_Status
		err := (*virtualNetworkStatus.AddressSpace).AssignPropertiesToAddressSpaceStatus(&addressSpace)
		if err != nil {
			return errors.Wrap(err, "populating AddressSpace from AddressSpace, calling AssignPropertiesToAddressSpaceStatus()")
		}
		destination.AddressSpace = &addressSpace
	} else {
		destination.AddressSpace = nil
	}

	// BgpCommunities
	if virtualNetworkStatus.BgpCommunities != nil {
		var bgpCommunity v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status
		err := (*virtualNetworkStatus.BgpCommunities).AssignPropertiesToVirtualNetworkBgpCommunitiesStatus(&bgpCommunity)
		if err != nil {
			return errors.Wrap(err, "populating BgpCommunities from BgpCommunities, calling AssignPropertiesToVirtualNetworkBgpCommunitiesStatus()")
		}
		destination.BgpCommunities = &bgpCommunity
	} else {
		destination.BgpCommunities = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(virtualNetworkStatus.Conditions))
	for conditionIndex, conditionItem := range virtualNetworkStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// DdosProtectionPlan
	if virtualNetworkStatus.DdosProtectionPlan != nil {
		var ddosProtectionPlan v1alpha1api20201101storage.SubResource_Status
		err := (*virtualNetworkStatus.DdosProtectionPlan).AssignPropertiesToSubResourceStatus(&ddosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "populating DdosProtectionPlan from DdosProtectionPlan, calling AssignPropertiesToSubResourceStatus()")
		}
		destination.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		destination.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if virtualNetworkStatus.DhcpOptions != nil {
		var dhcpOption v1alpha1api20201101storage.DhcpOptions_Status
		err := (*virtualNetworkStatus.DhcpOptions).AssignPropertiesToDhcpOptionsStatus(&dhcpOption)
		if err != nil {
			return errors.Wrap(err, "populating DhcpOptions from DhcpOptions, calling AssignPropertiesToDhcpOptionsStatus()")
		}
		destination.DhcpOptions = &dhcpOption
	} else {
		destination.DhcpOptions = nil
	}

	// EnableDdosProtection
	if virtualNetworkStatus.EnableDdosProtection != nil {
		enableDdosProtection := *virtualNetworkStatus.EnableDdosProtection
		destination.EnableDdosProtection = &enableDdosProtection
	} else {
		destination.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if virtualNetworkStatus.EnableVmProtection != nil {
		enableVmProtection := *virtualNetworkStatus.EnableVmProtection
		destination.EnableVmProtection = &enableVmProtection
	} else {
		destination.EnableVmProtection = nil
	}

	// Etag
	if virtualNetworkStatus.Etag != nil {
		etag := *virtualNetworkStatus.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// ExtendedLocation
	if virtualNetworkStatus.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := (*virtualNetworkStatus.ExtendedLocation).AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocationStatus()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	if virtualNetworkStatus.Id != nil {
		id := *virtualNetworkStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// IpAllocations
	ipAllocationList := make([]v1alpha1api20201101storage.SubResource_Status, len(virtualNetworkStatus.IpAllocations))
	for ipAllocationIndex, ipAllocationItem := range virtualNetworkStatus.IpAllocations {
		// Shadow the loop variable to avoid aliasing
		ipAllocationItem := ipAllocationItem
		var ipAllocation v1alpha1api20201101storage.SubResource_Status
		err := ipAllocationItem.AssignPropertiesToSubResourceStatus(&ipAllocation)
		if err != nil {
			return errors.Wrap(err, "populating IpAllocations from IpAllocations, calling AssignPropertiesToSubResourceStatus()")
		}
		ipAllocationList[ipAllocationIndex] = ipAllocation
	}
	destination.IpAllocations = ipAllocationList

	// Location
	if virtualNetworkStatus.Location != nil {
		location := *virtualNetworkStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Name
	if virtualNetworkStatus.Name != nil {
		name := *virtualNetworkStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// ProvisioningState
	if virtualNetworkStatus.ProvisioningState != nil {
		provisioningState := string(*virtualNetworkStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	if virtualNetworkStatus.ResourceGuid != nil {
		resourceGuid := *virtualNetworkStatus.ResourceGuid
		destination.ResourceGuid = &resourceGuid
	} else {
		destination.ResourceGuid = nil
	}

	// Subnets
	subnetList := make([]v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded, len(virtualNetworkStatus.Subnets))
	for subnetIndex, subnetItem := range virtualNetworkStatus.Subnets {
		// Shadow the loop variable to avoid aliasing
		subnetItem := subnetItem
		var subnet v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded
		err := subnetItem.AssignPropertiesToSubnetStatusVirtualNetworkSubResourceEmbedded(&subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesToSubnetStatusVirtualNetworkSubResourceEmbedded()")
		}
		subnetList[subnetIndex] = subnet
	}
	destination.Subnets = subnetList

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range virtualNetworkStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if virtualNetworkStatus.Type != nil {
		typeVar := *virtualNetworkStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// VirtualNetworkPeerings
	virtualNetworkPeeringList := make([]v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded, len(virtualNetworkStatus.VirtualNetworkPeerings))
	for virtualNetworkPeeringIndex, virtualNetworkPeeringItem := range virtualNetworkStatus.VirtualNetworkPeerings {
		// Shadow the loop variable to avoid aliasing
		virtualNetworkPeeringItem := virtualNetworkPeeringItem
		var virtualNetworkPeering v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded
		err := virtualNetworkPeeringItem.AssignPropertiesToVirtualNetworkPeeringStatusSubResourceEmbedded(&virtualNetworkPeering)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkPeerings from VirtualNetworkPeerings, calling AssignPropertiesToVirtualNetworkPeeringStatusSubResourceEmbedded()")
		}
		virtualNetworkPeeringList[virtualNetworkPeeringIndex] = virtualNetworkPeering
	}
	destination.VirtualNetworkPeerings = virtualNetworkPeeringList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworks_Spec struct {
	// +kubebuilder:validation:Required
	//AddressSpace: The AddressSpace that contains an array of IP address ranges that
	//can be used by subnets.
	AddressSpace AddressSpace `json:"addressSpace"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BgpCommunities: Bgp Communities sent over ExpressRoute with each route
	//corresponding to a prefix in this VNET.
	BgpCommunities *VirtualNetworkBgpCommunities `json:"bgpCommunities,omitempty"`

	//DdosProtectionPlan: The DDoS protection plan associated with the virtual network.
	DdosProtectionPlan *SubResource `json:"ddosProtectionPlan,omitempty"`

	//DhcpOptions: The dhcpOptions that contains an array of DNS servers available to
	//VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions `json:"dhcpOptions,omitempty"`

	//EnableDdosProtection: Indicates if DDoS protection is enabled for all the
	//protected resources in the virtual network. It requires a DDoS protection plan
	//associated with the resource.
	EnableDdosProtection *bool `json:"enableDdosProtection,omitempty"`

	//EnableVmProtection: Indicates if VM protection is enabled for all the subnets in
	//the virtual network.
	EnableVmProtection *bool `json:"enableVmProtection,omitempty"`

	//ExtendedLocation: The extended location of the virtual network.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this VNET.
	IpAllocations []SubResource `json:"ipAllocations,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Subnets: A list of subnets in a Virtual Network.
	Subnets []VirtualNetworks_Spec_Properties_Subnets `json:"subnets,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworks_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworksSpec *VirtualNetworks_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworksSpec == nil {
		return nil, nil
	}
	var result VirtualNetworks_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = VirtualNetworksSpecAPIVersion20201101

	// Set property ‘ExtendedLocation’:
	if virtualNetworksSpec.ExtendedLocation != nil {
		extendedLocationARM, err := (*virtualNetworksSpec.ExtendedLocation).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	result.Location = virtualNetworksSpec.Location

	// Set property ‘Name’:
	result.Name = name

	// Set property ‘Properties’:
	addressSpaceARM, err := virtualNetworksSpec.AddressSpace.ConvertToARM(name, resolvedReferences)
	if err != nil {
		return nil, err
	}
	result.Properties.AddressSpace = addressSpaceARM.(AddressSpaceARM)
	if virtualNetworksSpec.BgpCommunities != nil {
		bgpCommunitiesARM, err := (*virtualNetworksSpec.BgpCommunities).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		bgpCommunities := bgpCommunitiesARM.(VirtualNetworkBgpCommunitiesARM)
		result.Properties.BgpCommunities = &bgpCommunities
	}
	if virtualNetworksSpec.DdosProtectionPlan != nil {
		ddosProtectionPlanARM, err := (*virtualNetworksSpec.DdosProtectionPlan).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		ddosProtectionPlan := ddosProtectionPlanARM.(SubResourceARM)
		result.Properties.DdosProtectionPlan = &ddosProtectionPlan
	}
	if virtualNetworksSpec.DhcpOptions != nil {
		dhcpOptionsARM, err := (*virtualNetworksSpec.DhcpOptions).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		dhcpOptions := dhcpOptionsARM.(DhcpOptionsARM)
		result.Properties.DhcpOptions = &dhcpOptions
	}
	if virtualNetworksSpec.EnableDdosProtection != nil {
		enableDdosProtection := *virtualNetworksSpec.EnableDdosProtection
		result.Properties.EnableDdosProtection = &enableDdosProtection
	}
	if virtualNetworksSpec.EnableVmProtection != nil {
		enableVmProtection := *virtualNetworksSpec.EnableVmProtection
		result.Properties.EnableVmProtection = &enableVmProtection
	}
	for _, item := range virtualNetworksSpec.IpAllocations {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.IpAllocations = append(result.Properties.IpAllocations, itemARM.(SubResourceARM))
	}
	for _, item := range virtualNetworksSpec.Subnets {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.Subnets = append(result.Properties.Subnets, itemARM.(VirtualNetworks_Spec_Properties_SubnetsARM))
	}

	// Set property ‘Tags’:
	if virtualNetworksSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range virtualNetworksSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = VirtualNetworksSpecTypeMicrosoftNetworkVirtualNetworks
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworksSpec *VirtualNetworks_Spec) CreateEmptyARMValue() interface{} {
	return VirtualNetworks_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworksSpec *VirtualNetworks_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworks_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworks_SpecARM, got %T", armInput)
	}

	// Set property ‘AddressSpace’:
	// copying flattened property:
	var addressSpace AddressSpace
	err := addressSpace.PopulateFromARM(owner, typedInput.Properties.AddressSpace)
	if err != nil {
		return err
	}
	virtualNetworksSpec.AddressSpace = addressSpace

	// Set property ‘AzureName’:
	virtualNetworksSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BgpCommunities’:
	// copying flattened property:
	if typedInput.Properties.BgpCommunities != nil {
		var bgpCommunities1 VirtualNetworkBgpCommunities
		err = bgpCommunities1.PopulateFromARM(owner, *typedInput.Properties.BgpCommunities)
		if err != nil {
			return err
		}
		bgpCommunities := bgpCommunities1
		virtualNetworksSpec.BgpCommunities = &bgpCommunities
	}

	// Set property ‘DdosProtectionPlan’:
	// copying flattened property:
	if typedInput.Properties.DdosProtectionPlan != nil {
		var ddosProtectionPlan1 SubResource
		err = ddosProtectionPlan1.PopulateFromARM(owner, *typedInput.Properties.DdosProtectionPlan)
		if err != nil {
			return err
		}
		ddosProtectionPlan := ddosProtectionPlan1
		virtualNetworksSpec.DdosProtectionPlan = &ddosProtectionPlan
	}

	// Set property ‘DhcpOptions’:
	// copying flattened property:
	if typedInput.Properties.DhcpOptions != nil {
		var dhcpOptions1 DhcpOptions
		err = dhcpOptions1.PopulateFromARM(owner, *typedInput.Properties.DhcpOptions)
		if err != nil {
			return err
		}
		dhcpOptions := dhcpOptions1
		virtualNetworksSpec.DhcpOptions = &dhcpOptions
	}

	// Set property ‘EnableDdosProtection’:
	// copying flattened property:
	if typedInput.Properties.EnableDdosProtection != nil {
		enableDdosProtection := *typedInput.Properties.EnableDdosProtection
		virtualNetworksSpec.EnableDdosProtection = &enableDdosProtection
	}

	// Set property ‘EnableVmProtection’:
	// copying flattened property:
	if typedInput.Properties.EnableVmProtection != nil {
		enableVmProtection := *typedInput.Properties.EnableVmProtection
		virtualNetworksSpec.EnableVmProtection = &enableVmProtection
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err = extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		virtualNetworksSpec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	for _, item := range typedInput.Properties.IpAllocations {
		var item1 SubResource
		err = item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworksSpec.IpAllocations = append(virtualNetworksSpec.IpAllocations, item1)
	}

	// Set property ‘Location’:
	virtualNetworksSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	virtualNetworksSpec.Owner = owner

	// Set property ‘Subnets’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Subnets {
		var item1 VirtualNetworks_Spec_Properties_Subnets
		err = item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworksSpec.Subnets = append(virtualNetworksSpec.Subnets, item1)
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		virtualNetworksSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			virtualNetworksSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworks_Spec{}

// ConvertSpecFrom populates our VirtualNetworks_Spec from the provided source
func (virtualNetworksSpec *VirtualNetworks_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworks_Spec)
	if ok {
		// Populate our instance from source
		return virtualNetworksSpec.AssignPropertiesFromVirtualNetworksSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworks_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = virtualNetworksSpec.AssignPropertiesFromVirtualNetworksSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworks_Spec
func (virtualNetworksSpec *VirtualNetworks_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworks_Spec)
	if ok {
		// Populate destination from our instance
		return virtualNetworksSpec.AssignPropertiesToVirtualNetworksSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworks_Spec{}
	err := virtualNetworksSpec.AssignPropertiesToVirtualNetworksSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworksSpec populates our VirtualNetworks_Spec from the provided source VirtualNetworks_Spec
func (virtualNetworksSpec *VirtualNetworks_Spec) AssignPropertiesFromVirtualNetworksSpec(source *v1alpha1api20201101storage.VirtualNetworks_Spec) error {

	// AddressSpace
	if source.AddressSpace != nil {
		var addressSpace AddressSpace
		err := addressSpace.AssignPropertiesFromAddressSpace(source.AddressSpace)
		if err != nil {
			return errors.Wrap(err, "populating AddressSpace from AddressSpace, calling AssignPropertiesFromAddressSpace()")
		}
		virtualNetworksSpec.AddressSpace = addressSpace
	} else {
		virtualNetworksSpec.AddressSpace = AddressSpace{}
	}

	// AzureName
	virtualNetworksSpec.AzureName = source.AzureName

	// BgpCommunities
	if source.BgpCommunities != nil {
		var bgpCommunity VirtualNetworkBgpCommunities
		err := bgpCommunity.AssignPropertiesFromVirtualNetworkBgpCommunities(source.BgpCommunities)
		if err != nil {
			return errors.Wrap(err, "populating BgpCommunities from BgpCommunities, calling AssignPropertiesFromVirtualNetworkBgpCommunities()")
		}
		virtualNetworksSpec.BgpCommunities = &bgpCommunity
	} else {
		virtualNetworksSpec.BgpCommunities = nil
	}

	// DdosProtectionPlan
	if source.DdosProtectionPlan != nil {
		var ddosProtectionPlan SubResource
		err := ddosProtectionPlan.AssignPropertiesFromSubResource(source.DdosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "populating DdosProtectionPlan from DdosProtectionPlan, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworksSpec.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		virtualNetworksSpec.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if source.DhcpOptions != nil {
		var dhcpOption DhcpOptions
		err := dhcpOption.AssignPropertiesFromDhcpOptions(source.DhcpOptions)
		if err != nil {
			return errors.Wrap(err, "populating DhcpOptions from DhcpOptions, calling AssignPropertiesFromDhcpOptions()")
		}
		virtualNetworksSpec.DhcpOptions = &dhcpOption
	} else {
		virtualNetworksSpec.DhcpOptions = nil
	}

	// EnableDdosProtection
	if source.EnableDdosProtection != nil {
		enableDdosProtection := *source.EnableDdosProtection
		virtualNetworksSpec.EnableDdosProtection = &enableDdosProtection
	} else {
		virtualNetworksSpec.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if source.EnableVmProtection != nil {
		enableVmProtection := *source.EnableVmProtection
		virtualNetworksSpec.EnableVmProtection = &enableVmProtection
	} else {
		virtualNetworksSpec.EnableVmProtection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocation()")
		}
		virtualNetworksSpec.ExtendedLocation = &extendedLocation
	} else {
		virtualNetworksSpec.ExtendedLocation = nil
	}

	// IpAllocations
	ipAllocationList := make([]SubResource, len(source.IpAllocations))
	for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
		// Shadow the loop variable to avoid aliasing
		ipAllocationItem := ipAllocationItem
		var ipAllocation SubResource
		err := ipAllocation.AssignPropertiesFromSubResource(&ipAllocationItem)
		if err != nil {
			return errors.Wrap(err, "populating IpAllocations from IpAllocations, calling AssignPropertiesFromSubResource()")
		}
		ipAllocationList[ipAllocationIndex] = ipAllocation
	}
	virtualNetworksSpec.IpAllocations = ipAllocationList

	// Location
	if source.Location != nil {
		virtualNetworksSpec.Location = *source.Location
	} else {
		virtualNetworksSpec.Location = ""
	}

	// Owner
	virtualNetworksSpec.Owner = source.Owner.Copy()

	// Subnets
	subnetList := make([]VirtualNetworks_Spec_Properties_Subnets, len(source.Subnets))
	for subnetIndex, subnetItem := range source.Subnets {
		// Shadow the loop variable to avoid aliasing
		subnetItem := subnetItem
		var subnet VirtualNetworks_Spec_Properties_Subnets
		err := subnet.AssignPropertiesFromVirtualNetworksSpecPropertiesSubnets(&subnetItem)
		if err != nil {
			return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesFromVirtualNetworksSpecPropertiesSubnets()")
		}
		subnetList[subnetIndex] = subnet
	}
	virtualNetworksSpec.Subnets = subnetList

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	virtualNetworksSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSpec populates the provided destination VirtualNetworks_Spec from our VirtualNetworks_Spec
func (virtualNetworksSpec *VirtualNetworks_Spec) AssignPropertiesToVirtualNetworksSpec(destination *v1alpha1api20201101storage.VirtualNetworks_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressSpace
	var addressSpace v1alpha1api20201101storage.AddressSpace
	err := virtualNetworksSpec.AddressSpace.AssignPropertiesToAddressSpace(&addressSpace)
	if err != nil {
		return errors.Wrap(err, "populating AddressSpace from AddressSpace, calling AssignPropertiesToAddressSpace()")
	}
	destination.AddressSpace = &addressSpace

	// AzureName
	destination.AzureName = virtualNetworksSpec.AzureName

	// BgpCommunities
	if virtualNetworksSpec.BgpCommunities != nil {
		var bgpCommunity v1alpha1api20201101storage.VirtualNetworkBgpCommunities
		err := (*virtualNetworksSpec.BgpCommunities).AssignPropertiesToVirtualNetworkBgpCommunities(&bgpCommunity)
		if err != nil {
			return errors.Wrap(err, "populating BgpCommunities from BgpCommunities, calling AssignPropertiesToVirtualNetworkBgpCommunities()")
		}
		destination.BgpCommunities = &bgpCommunity
	} else {
		destination.BgpCommunities = nil
	}

	// DdosProtectionPlan
	if virtualNetworksSpec.DdosProtectionPlan != nil {
		var ddosProtectionPlan v1alpha1api20201101storage.SubResource
		err := (*virtualNetworksSpec.DdosProtectionPlan).AssignPropertiesToSubResource(&ddosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "populating DdosProtectionPlan from DdosProtectionPlan, calling AssignPropertiesToSubResource()")
		}
		destination.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		destination.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if virtualNetworksSpec.DhcpOptions != nil {
		var dhcpOption v1alpha1api20201101storage.DhcpOptions
		err := (*virtualNetworksSpec.DhcpOptions).AssignPropertiesToDhcpOptions(&dhcpOption)
		if err != nil {
			return errors.Wrap(err, "populating DhcpOptions from DhcpOptions, calling AssignPropertiesToDhcpOptions()")
		}
		destination.DhcpOptions = &dhcpOption
	} else {
		destination.DhcpOptions = nil
	}

	// EnableDdosProtection
	if virtualNetworksSpec.EnableDdosProtection != nil {
		enableDdosProtection := *virtualNetworksSpec.EnableDdosProtection
		destination.EnableDdosProtection = &enableDdosProtection
	} else {
		destination.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if virtualNetworksSpec.EnableVmProtection != nil {
		enableVmProtection := *virtualNetworksSpec.EnableVmProtection
		destination.EnableVmProtection = &enableVmProtection
	} else {
		destination.EnableVmProtection = nil
	}

	// ExtendedLocation
	if virtualNetworksSpec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation
		err := (*virtualNetworksSpec.ExtendedLocation).AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocation()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// IpAllocations
	ipAllocationList := make([]v1alpha1api20201101storage.SubResource, len(virtualNetworksSpec.IpAllocations))
	for ipAllocationIndex, ipAllocationItem := range virtualNetworksSpec.IpAllocations {
		// Shadow the loop variable to avoid aliasing
		ipAllocationItem := ipAllocationItem
		var ipAllocation v1alpha1api20201101storage.SubResource
		err := ipAllocationItem.AssignPropertiesToSubResource(&ipAllocation)
		if err != nil {
			return errors.Wrap(err, "populating IpAllocations from IpAllocations, calling AssignPropertiesToSubResource()")
		}
		ipAllocationList[ipAllocationIndex] = ipAllocation
	}
	destination.IpAllocations = ipAllocationList

	// Location
	location := virtualNetworksSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = virtualNetworksSpec.OriginalVersion()

	// Owner
	destination.Owner = virtualNetworksSpec.Owner.Copy()

	// Subnets
	subnetList := make([]v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets, len(virtualNetworksSpec.Subnets))
	for subnetIndex, subnetItem := range virtualNetworksSpec.Subnets {
		// Shadow the loop variable to avoid aliasing
		subnetItem := subnetItem
		var subnet v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets
		err := subnetItem.AssignPropertiesToVirtualNetworksSpecPropertiesSubnets(&subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesToVirtualNetworksSpecPropertiesSubnets()")
		}
		subnetList[subnetIndex] = subnet
	}
	destination.Subnets = subnetList

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range virtualNetworksSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (virtualNetworksSpec *VirtualNetworks_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (virtualNetworksSpec *VirtualNetworks_Spec) SetAzureName(azureName string) {
	virtualNetworksSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/AddressSpace
type AddressSpace struct {
	// +kubebuilder:validation:Required
	//AddressPrefixes: A list of address blocks reserved for this virtual network in
	//CIDR notation.
	AddressPrefixes []string `json:"addressPrefixes"`
}

var _ genruntime.ARMTransformer = &AddressSpace{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (addressSpace *AddressSpace) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if addressSpace == nil {
		return nil, nil
	}
	var result AddressSpaceARM

	// Set property ‘AddressPrefixes’:
	for _, item := range addressSpace.AddressPrefixes {
		result.AddressPrefixes = append(result.AddressPrefixes, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (addressSpace *AddressSpace) CreateEmptyARMValue() interface{} {
	return AddressSpaceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (addressSpace *AddressSpace) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(AddressSpaceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AddressSpaceARM, got %T", armInput)
	}

	// Set property ‘AddressPrefixes’:
	for _, item := range typedInput.AddressPrefixes {
		addressSpace.AddressPrefixes = append(addressSpace.AddressPrefixes, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAddressSpace populates our AddressSpace from the provided source AddressSpace
func (addressSpace *AddressSpace) AssignPropertiesFromAddressSpace(source *v1alpha1api20201101storage.AddressSpace) error {

	// AddressPrefixes
	addressPrefixList := make([]string, len(source.AddressPrefixes))
	for addressPrefixIndex, addressPrefixItem := range source.AddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		addressPrefixItem := addressPrefixItem
		addressPrefixList[addressPrefixIndex] = addressPrefixItem
	}
	addressSpace.AddressPrefixes = addressPrefixList

	// No error
	return nil
}

// AssignPropertiesToAddressSpace populates the provided destination AddressSpace from our AddressSpace
func (addressSpace *AddressSpace) AssignPropertiesToAddressSpace(destination *v1alpha1api20201101storage.AddressSpace) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefixes
	addressPrefixList := make([]string, len(addressSpace.AddressPrefixes))
	for addressPrefixIndex, addressPrefixItem := range addressSpace.AddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		addressPrefixItem := addressPrefixItem
		addressPrefixList[addressPrefixIndex] = addressPrefixItem
	}
	destination.AddressPrefixes = addressPrefixList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type AddressSpace_Status struct {
	//AddressPrefixes: A list of address blocks reserved for this virtual network in
	//CIDR notation.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`
}

var _ genruntime.FromARMConverter = &AddressSpace_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (addressSpaceStatus *AddressSpace_Status) CreateEmptyARMValue() interface{} {
	return AddressSpace_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (addressSpaceStatus *AddressSpace_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(AddressSpace_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AddressSpace_StatusARM, got %T", armInput)
	}

	// Set property ‘AddressPrefixes’:
	for _, item := range typedInput.AddressPrefixes {
		addressSpaceStatus.AddressPrefixes = append(addressSpaceStatus.AddressPrefixes, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAddressSpaceStatus populates our AddressSpace_Status from the provided source AddressSpace_Status
func (addressSpaceStatus *AddressSpace_Status) AssignPropertiesFromAddressSpaceStatus(source *v1alpha1api20201101storage.AddressSpace_Status) error {

	// AddressPrefixes
	addressPrefixList := make([]string, len(source.AddressPrefixes))
	for addressPrefixIndex, addressPrefixItem := range source.AddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		addressPrefixItem := addressPrefixItem
		addressPrefixList[addressPrefixIndex] = addressPrefixItem
	}
	addressSpaceStatus.AddressPrefixes = addressPrefixList

	// No error
	return nil
}

// AssignPropertiesToAddressSpaceStatus populates the provided destination AddressSpace_Status from our AddressSpace_Status
func (addressSpaceStatus *AddressSpace_Status) AssignPropertiesToAddressSpaceStatus(destination *v1alpha1api20201101storage.AddressSpace_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefixes
	addressPrefixList := make([]string, len(addressSpaceStatus.AddressPrefixes))
	for addressPrefixIndex, addressPrefixItem := range addressSpaceStatus.AddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		addressPrefixItem := addressPrefixItem
		addressPrefixList[addressPrefixIndex] = addressPrefixItem
	}
	destination.AddressPrefixes = addressPrefixList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/DhcpOptions
type DhcpOptions struct {
	// +kubebuilder:validation:Required
	//DnsServers: The list of DNS servers IP addresses.
	DnsServers []string `json:"dnsServers"`
}

var _ genruntime.ARMTransformer = &DhcpOptions{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (dhcpOptions *DhcpOptions) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if dhcpOptions == nil {
		return nil, nil
	}
	var result DhcpOptionsARM

	// Set property ‘DnsServers’:
	for _, item := range dhcpOptions.DnsServers {
		result.DnsServers = append(result.DnsServers, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (dhcpOptions *DhcpOptions) CreateEmptyARMValue() interface{} {
	return DhcpOptionsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (dhcpOptions *DhcpOptions) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(DhcpOptionsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DhcpOptionsARM, got %T", armInput)
	}

	// Set property ‘DnsServers’:
	for _, item := range typedInput.DnsServers {
		dhcpOptions.DnsServers = append(dhcpOptions.DnsServers, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromDhcpOptions populates our DhcpOptions from the provided source DhcpOptions
func (dhcpOptions *DhcpOptions) AssignPropertiesFromDhcpOptions(source *v1alpha1api20201101storage.DhcpOptions) error {

	// DnsServers
	dnsServerList := make([]string, len(source.DnsServers))
	for dnsServerIndex, dnsServerItem := range source.DnsServers {
		// Shadow the loop variable to avoid aliasing
		dnsServerItem := dnsServerItem
		dnsServerList[dnsServerIndex] = dnsServerItem
	}
	dhcpOptions.DnsServers = dnsServerList

	// No error
	return nil
}

// AssignPropertiesToDhcpOptions populates the provided destination DhcpOptions from our DhcpOptions
func (dhcpOptions *DhcpOptions) AssignPropertiesToDhcpOptions(destination *v1alpha1api20201101storage.DhcpOptions) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DnsServers
	dnsServerList := make([]string, len(dhcpOptions.DnsServers))
	for dnsServerIndex, dnsServerItem := range dhcpOptions.DnsServers {
		// Shadow the loop variable to avoid aliasing
		dnsServerItem := dnsServerItem
		dnsServerList[dnsServerIndex] = dnsServerItem
	}
	destination.DnsServers = dnsServerList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type DhcpOptions_Status struct {
	//DnsServers: The list of DNS servers IP addresses.
	DnsServers []string `json:"dnsServers,omitempty"`
}

var _ genruntime.FromARMConverter = &DhcpOptions_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (dhcpOptionsStatus *DhcpOptions_Status) CreateEmptyARMValue() interface{} {
	return DhcpOptions_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (dhcpOptionsStatus *DhcpOptions_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(DhcpOptions_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DhcpOptions_StatusARM, got %T", armInput)
	}

	// Set property ‘DnsServers’:
	for _, item := range typedInput.DnsServers {
		dhcpOptionsStatus.DnsServers = append(dhcpOptionsStatus.DnsServers, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromDhcpOptionsStatus populates our DhcpOptions_Status from the provided source DhcpOptions_Status
func (dhcpOptionsStatus *DhcpOptions_Status) AssignPropertiesFromDhcpOptionsStatus(source *v1alpha1api20201101storage.DhcpOptions_Status) error {

	// DnsServers
	dnsServerList := make([]string, len(source.DnsServers))
	for dnsServerIndex, dnsServerItem := range source.DnsServers {
		// Shadow the loop variable to avoid aliasing
		dnsServerItem := dnsServerItem
		dnsServerList[dnsServerIndex] = dnsServerItem
	}
	dhcpOptionsStatus.DnsServers = dnsServerList

	// No error
	return nil
}

// AssignPropertiesToDhcpOptionsStatus populates the provided destination DhcpOptions_Status from our DhcpOptions_Status
func (dhcpOptionsStatus *DhcpOptions_Status) AssignPropertiesToDhcpOptionsStatus(destination *v1alpha1api20201101storage.DhcpOptions_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DnsServers
	dnsServerList := make([]string, len(dhcpOptionsStatus.DnsServers))
	for dnsServerIndex, dnsServerItem := range dhcpOptionsStatus.DnsServers {
		// Shadow the loop variable to avoid aliasing
		dnsServerItem := dnsServerItem
		dnsServerList[dnsServerIndex] = dnsServerItem
	}
	destination.DnsServers = dnsServerList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type Subnet_Status_VirtualNetwork_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_Status_VirtualNetwork_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subnetStatusVirtualNetworkSubResourceEmbedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subnetStatusVirtualNetworkSubResourceEmbedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subnetStatusVirtualNetworkSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnetStatusVirtualNetworkSubResourceEmbedded populates our Subnet_Status_VirtualNetwork_SubResourceEmbedded from the provided source Subnet_Status_VirtualNetwork_SubResourceEmbedded
func (subnetStatusVirtualNetworkSubResourceEmbedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) AssignPropertiesFromSubnetStatusVirtualNetworkSubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		subnetStatusVirtualNetworkSubResourceEmbedded.Id = &id
	} else {
		subnetStatusVirtualNetworkSubResourceEmbedded.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubnetStatusVirtualNetworkSubResourceEmbedded populates the provided destination Subnet_Status_VirtualNetwork_SubResourceEmbedded from our Subnet_Status_VirtualNetwork_SubResourceEmbedded
func (subnetStatusVirtualNetworkSubResourceEmbedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) AssignPropertiesToSubnetStatusVirtualNetworkSubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if subnetStatusVirtualNetworkSubResourceEmbedded.Id != nil {
		id := *subnetStatusVirtualNetworkSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/VirtualNetworkBgpCommunities
type VirtualNetworkBgpCommunities struct {
	// +kubebuilder:validation:Required
	//VirtualNetworkCommunity: The BGP community associated with the virtual network.
	VirtualNetworkCommunity string `json:"virtualNetworkCommunity"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkBgpCommunities{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkBgpCommunities *VirtualNetworkBgpCommunities) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkBgpCommunities == nil {
		return nil, nil
	}
	var result VirtualNetworkBgpCommunitiesARM

	// Set property ‘VirtualNetworkCommunity’:
	result.VirtualNetworkCommunity = virtualNetworkBgpCommunities.VirtualNetworkCommunity
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkBgpCommunities *VirtualNetworkBgpCommunities) CreateEmptyARMValue() interface{} {
	return VirtualNetworkBgpCommunitiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkBgpCommunities *VirtualNetworkBgpCommunities) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkBgpCommunitiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkBgpCommunitiesARM, got %T", armInput)
	}

	// Set property ‘VirtualNetworkCommunity’:
	virtualNetworkBgpCommunities.VirtualNetworkCommunity = typedInput.VirtualNetworkCommunity

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkBgpCommunities populates our VirtualNetworkBgpCommunities from the provided source VirtualNetworkBgpCommunities
func (virtualNetworkBgpCommunities *VirtualNetworkBgpCommunities) AssignPropertiesFromVirtualNetworkBgpCommunities(source *v1alpha1api20201101storage.VirtualNetworkBgpCommunities) error {

	// VirtualNetworkCommunity
	if source.VirtualNetworkCommunity != nil {
		virtualNetworkBgpCommunities.VirtualNetworkCommunity = *source.VirtualNetworkCommunity
	} else {
		virtualNetworkBgpCommunities.VirtualNetworkCommunity = ""
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkBgpCommunities populates the provided destination VirtualNetworkBgpCommunities from our VirtualNetworkBgpCommunities
func (virtualNetworkBgpCommunities *VirtualNetworkBgpCommunities) AssignPropertiesToVirtualNetworkBgpCommunities(destination *v1alpha1api20201101storage.VirtualNetworkBgpCommunities) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// VirtualNetworkCommunity
	virtualNetworkCommunity := virtualNetworkBgpCommunities.VirtualNetworkCommunity
	destination.VirtualNetworkCommunity = &virtualNetworkCommunity

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VirtualNetworkBgpCommunities_Status struct {
	//RegionalCommunity: The BGP community associated with the region of the virtual
	//network.
	RegionalCommunity *string `json:"regionalCommunity,omitempty"`

	// +kubebuilder:validation:Required
	//VirtualNetworkCommunity: The BGP community associated with the virtual network.
	VirtualNetworkCommunity string `json:"virtualNetworkCommunity"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkBgpCommunities_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkBgpCommunitiesStatus *VirtualNetworkBgpCommunities_Status) CreateEmptyARMValue() interface{} {
	return VirtualNetworkBgpCommunities_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkBgpCommunitiesStatus *VirtualNetworkBgpCommunities_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkBgpCommunities_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkBgpCommunities_StatusARM, got %T", armInput)
	}

	// Set property ‘RegionalCommunity’:
	if typedInput.RegionalCommunity != nil {
		regionalCommunity := *typedInput.RegionalCommunity
		virtualNetworkBgpCommunitiesStatus.RegionalCommunity = &regionalCommunity
	}

	// Set property ‘VirtualNetworkCommunity’:
	virtualNetworkBgpCommunitiesStatus.VirtualNetworkCommunity = typedInput.VirtualNetworkCommunity

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkBgpCommunitiesStatus populates our VirtualNetworkBgpCommunities_Status from the provided source VirtualNetworkBgpCommunities_Status
func (virtualNetworkBgpCommunitiesStatus *VirtualNetworkBgpCommunities_Status) AssignPropertiesFromVirtualNetworkBgpCommunitiesStatus(source *v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status) error {

	// RegionalCommunity
	if source.RegionalCommunity != nil {
		regionalCommunity := *source.RegionalCommunity
		virtualNetworkBgpCommunitiesStatus.RegionalCommunity = &regionalCommunity
	} else {
		virtualNetworkBgpCommunitiesStatus.RegionalCommunity = nil
	}

	// VirtualNetworkCommunity
	if source.VirtualNetworkCommunity != nil {
		virtualNetworkBgpCommunitiesStatus.VirtualNetworkCommunity = *source.VirtualNetworkCommunity
	} else {
		virtualNetworkBgpCommunitiesStatus.VirtualNetworkCommunity = ""
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkBgpCommunitiesStatus populates the provided destination VirtualNetworkBgpCommunities_Status from our VirtualNetworkBgpCommunities_Status
func (virtualNetworkBgpCommunitiesStatus *VirtualNetworkBgpCommunities_Status) AssignPropertiesToVirtualNetworkBgpCommunitiesStatus(destination *v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RegionalCommunity
	if virtualNetworkBgpCommunitiesStatus.RegionalCommunity != nil {
		regionalCommunity := *virtualNetworkBgpCommunitiesStatus.RegionalCommunity
		destination.RegionalCommunity = &regionalCommunity
	} else {
		destination.RegionalCommunity = nil
	}

	// VirtualNetworkCommunity
	virtualNetworkCommunity := virtualNetworkBgpCommunitiesStatus.VirtualNetworkCommunity
	destination.VirtualNetworkCommunity = &virtualNetworkCommunity

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VirtualNetworkPeering_Status_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkPeering_Status_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkPeeringStatusSubResourceEmbedded *VirtualNetworkPeering_Status_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return VirtualNetworkPeering_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkPeeringStatusSubResourceEmbedded *VirtualNetworkPeering_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkPeering_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkPeering_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		virtualNetworkPeeringStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkPeeringStatusSubResourceEmbedded populates our VirtualNetworkPeering_Status_SubResourceEmbedded from the provided source VirtualNetworkPeering_Status_SubResourceEmbedded
func (virtualNetworkPeeringStatusSubResourceEmbedded *VirtualNetworkPeering_Status_SubResourceEmbedded) AssignPropertiesFromVirtualNetworkPeeringStatusSubResourceEmbedded(source *v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		virtualNetworkPeeringStatusSubResourceEmbedded.Id = &id
	} else {
		virtualNetworkPeeringStatusSubResourceEmbedded.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkPeeringStatusSubResourceEmbedded populates the provided destination VirtualNetworkPeering_Status_SubResourceEmbedded from our VirtualNetworkPeering_Status_SubResourceEmbedded
func (virtualNetworkPeeringStatusSubResourceEmbedded *VirtualNetworkPeering_Status_SubResourceEmbedded) AssignPropertiesToVirtualNetworkPeeringStatusSubResourceEmbedded(destination *v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if virtualNetworkPeeringStatusSubResourceEmbedded.Id != nil {
		id := *virtualNetworkPeeringStatusSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworks_Spec_Properties_Subnets struct {
	//AddressPrefix: The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//AddressPrefixes: List of address prefixes for the subnet.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	//Delegations: An array of references to the delegations on the subnet.
	Delegations []VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations `json:"delegations,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this subnet.
	IpAllocations []SubResource `json:"ipAllocations,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name string `json:"name"`

	//NatGateway: Nat gateway associated with this subnet.
	NatGateway *SubResource `json:"natGateway,omitempty"`

	//NetworkSecurityGroup: The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *SubResource `json:"networkSecurityGroup,omitempty"`

	//PrivateEndpointNetworkPolicies: Enable or Disable apply network policies on
	//private end point in the subnet.
	PrivateEndpointNetworkPolicies *string `json:"privateEndpointNetworkPolicies,omitempty"`

	//PrivateLinkServiceNetworkPolicies: Enable or Disable apply network policies on
	//private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *string `json:"privateLinkServiceNetworkPolicies,omitempty"`

	//RouteTable: The reference to the RouteTable resource.
	RouteTable *SubResource `json:"routeTable,omitempty"`

	//ServiceEndpointPolicies: An array of service endpoint policies.
	ServiceEndpointPolicies []SubResource `json:"serviceEndpointPolicies,omitempty"`

	//ServiceEndpoints: An array of service endpoints.
	ServiceEndpoints []ServiceEndpointPropertiesFormat `json:"serviceEndpoints,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworks_Spec_Properties_Subnets{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworksSpecPropertiesSubnets *VirtualNetworks_Spec_Properties_Subnets) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworksSpecPropertiesSubnets == nil {
		return nil, nil
	}
	var result VirtualNetworks_Spec_Properties_SubnetsARM

	// Set property ‘Name’:
	result.Name = virtualNetworksSpecPropertiesSubnets.Name

	// Set property ‘Properties’:
	if virtualNetworksSpecPropertiesSubnets.AddressPrefix != nil || virtualNetworksSpecPropertiesSubnets.AddressPrefixes != nil || virtualNetworksSpecPropertiesSubnets.Delegations != nil || virtualNetworksSpecPropertiesSubnets.IpAllocations != nil || virtualNetworksSpecPropertiesSubnets.NatGateway != nil || virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup != nil || virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies != nil || virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies != nil || virtualNetworksSpecPropertiesSubnets.RouteTable != nil || virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies != nil || virtualNetworksSpecPropertiesSubnets.ServiceEndpoints != nil {
		result.Properties = &VirtualNetworks_Spec_Properties_Subnets_PropertiesARM{}
	}
	if virtualNetworksSpecPropertiesSubnets.AddressPrefix != nil {
		result.Properties.AddressPrefix = *virtualNetworksSpecPropertiesSubnets.AddressPrefix
	}
	for _, item := range virtualNetworksSpecPropertiesSubnets.AddressPrefixes {
		result.Properties.AddressPrefixes = append(result.Properties.AddressPrefixes, item)
	}
	for _, item := range virtualNetworksSpecPropertiesSubnets.Delegations {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.Delegations = append(result.Properties.Delegations, itemARM.(VirtualNetworks_Spec_Properties_Subnets_Properties_DelegationsARM))
	}
	for _, item := range virtualNetworksSpecPropertiesSubnets.IpAllocations {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.IpAllocations = append(result.Properties.IpAllocations, itemARM.(SubResourceARM))
	}
	if virtualNetworksSpecPropertiesSubnets.NatGateway != nil {
		natGatewayARM, err := (*virtualNetworksSpecPropertiesSubnets.NatGateway).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		natGateway := natGatewayARM.(SubResourceARM)
		result.Properties.NatGateway = &natGateway
	}
	if virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup != nil {
		networkSecurityGroupARM, err := (*virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		networkSecurityGroup := networkSecurityGroupARM.(SubResourceARM)
		result.Properties.NetworkSecurityGroup = &networkSecurityGroup
	}
	if virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicies := *virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies
		result.Properties.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
	}
	if virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicies := *virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies
		result.Properties.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
	}
	if virtualNetworksSpecPropertiesSubnets.RouteTable != nil {
		routeTableARM, err := (*virtualNetworksSpecPropertiesSubnets.RouteTable).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		routeTable := routeTableARM.(SubResourceARM)
		result.Properties.RouteTable = &routeTable
	}
	for _, item := range virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpointPolicies = append(result.Properties.ServiceEndpointPolicies, itemARM.(SubResourceARM))
	}
	for _, item := range virtualNetworksSpecPropertiesSubnets.ServiceEndpoints {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpoints = append(result.Properties.ServiceEndpoints, itemARM.(ServiceEndpointPropertiesFormatARM))
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworksSpecPropertiesSubnets *VirtualNetworks_Spec_Properties_Subnets) CreateEmptyARMValue() interface{} {
	return VirtualNetworks_Spec_Properties_SubnetsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworksSpecPropertiesSubnets *VirtualNetworks_Spec_Properties_Subnets) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworks_Spec_Properties_SubnetsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworks_Spec_Properties_SubnetsARM, got %T", armInput)
	}

	// Set property ‘AddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		virtualNetworksSpecPropertiesSubnets.AddressPrefix = &typedInput.Properties.AddressPrefix
	}

	// Set property ‘AddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AddressPrefixes {
			virtualNetworksSpecPropertiesSubnets.AddressPrefixes = append(virtualNetworksSpecPropertiesSubnets.AddressPrefixes, item)
		}
	}

	// Set property ‘Delegations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Delegations {
			var item1 VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworksSpecPropertiesSubnets.Delegations = append(virtualNetworksSpecPropertiesSubnets.Delegations, item1)
		}
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworksSpecPropertiesSubnets.IpAllocations = append(virtualNetworksSpecPropertiesSubnets.IpAllocations, item1)
		}
	}

	// Set property ‘Name’:
	virtualNetworksSpecPropertiesSubnets.Name = typedInput.Name

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 SubResource
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			virtualNetworksSpecPropertiesSubnets.NatGateway = &natGateway
		}
	}

	// Set property ‘NetworkSecurityGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkSecurityGroup != nil {
			var networkSecurityGroup1 SubResource
			err := networkSecurityGroup1.PopulateFromARM(owner, *typedInput.Properties.NetworkSecurityGroup)
			if err != nil {
				return err
			}
			networkSecurityGroup := networkSecurityGroup1
			virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup = &networkSecurityGroup
		}
	}

	// Set property ‘PrivateEndpointNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointNetworkPolicies != nil {
			privateEndpointNetworkPolicies := *typedInput.Properties.PrivateEndpointNetworkPolicies
			virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
		}
	}

	// Set property ‘PrivateLinkServiceNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceNetworkPolicies != nil {
			privateLinkServiceNetworkPolicies := *typedInput.Properties.PrivateLinkServiceNetworkPolicies
			virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
		}
	}

	// Set property ‘RouteTable’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RouteTable != nil {
			var routeTable1 SubResource
			err := routeTable1.PopulateFromARM(owner, *typedInput.Properties.RouteTable)
			if err != nil {
				return err
			}
			routeTable := routeTable1
			virtualNetworksSpecPropertiesSubnets.RouteTable = &routeTable
		}
	}

	// Set property ‘ServiceEndpointPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpointPolicies {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies = append(virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies, item1)
		}
	}

	// Set property ‘ServiceEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpoints {
			var item1 ServiceEndpointPropertiesFormat
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworksSpecPropertiesSubnets.ServiceEndpoints = append(virtualNetworksSpecPropertiesSubnets.ServiceEndpoints, item1)
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworksSpecPropertiesSubnets populates our VirtualNetworks_Spec_Properties_Subnets from the provided source VirtualNetworks_Spec_Properties_Subnets
func (virtualNetworksSpecPropertiesSubnets *VirtualNetworks_Spec_Properties_Subnets) AssignPropertiesFromVirtualNetworksSpecPropertiesSubnets(source *v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets) error {

	// AddressPrefix
	if source.AddressPrefix != nil {
		addressPrefix := *source.AddressPrefix
		virtualNetworksSpecPropertiesSubnets.AddressPrefix = &addressPrefix
	} else {
		virtualNetworksSpecPropertiesSubnets.AddressPrefix = nil
	}

	// AddressPrefixes
	addressPrefixList := make([]string, len(source.AddressPrefixes))
	for addressPrefixIndex, addressPrefixItem := range source.AddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		addressPrefixItem := addressPrefixItem
		addressPrefixList[addressPrefixIndex] = addressPrefixItem
	}
	virtualNetworksSpecPropertiesSubnets.AddressPrefixes = addressPrefixList

	// Delegations
	delegationList := make([]VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations, len(source.Delegations))
	for delegationIndex, delegationItem := range source.Delegations {
		// Shadow the loop variable to avoid aliasing
		delegationItem := delegationItem
		var delegation VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations
		err := delegation.AssignPropertiesFromVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations(&delegationItem)
		if err != nil {
			return errors.Wrap(err, "populating Delegations from Delegations, calling AssignPropertiesFromVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations()")
		}
		delegationList[delegationIndex] = delegation
	}
	virtualNetworksSpecPropertiesSubnets.Delegations = delegationList

	// IpAllocations
	ipAllocationList := make([]SubResource, len(source.IpAllocations))
	for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
		// Shadow the loop variable to avoid aliasing
		ipAllocationItem := ipAllocationItem
		var ipAllocation SubResource
		err := ipAllocation.AssignPropertiesFromSubResource(&ipAllocationItem)
		if err != nil {
			return errors.Wrap(err, "populating IpAllocations from IpAllocations, calling AssignPropertiesFromSubResource()")
		}
		ipAllocationList[ipAllocationIndex] = ipAllocation
	}
	virtualNetworksSpecPropertiesSubnets.IpAllocations = ipAllocationList

	// Name
	if source.Name != nil {
		virtualNetworksSpecPropertiesSubnets.Name = *source.Name
	} else {
		virtualNetworksSpecPropertiesSubnets.Name = ""
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource
		err := natGateway.AssignPropertiesFromSubResource(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "populating NatGateway from NatGateway, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworksSpecPropertiesSubnets.NatGateway = &natGateway
	} else {
		virtualNetworksSpecPropertiesSubnets.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup SubResource
		err := networkSecurityGroup.AssignPropertiesFromSubResource(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "populating NetworkSecurityGroup from NetworkSecurityGroup, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	if source.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicy := *source.PrivateEndpointNetworkPolicies
		virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicy
	} else {
		virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies = nil
	}

	// PrivateLinkServiceNetworkPolicies
	if source.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicy := *source.PrivateLinkServiceNetworkPolicies
		virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicy
	} else {
		virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies = nil
	}

	// RouteTable
	if source.RouteTable != nil {
		var routeTable SubResource
		err := routeTable.AssignPropertiesFromSubResource(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "populating RouteTable from RouteTable, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworksSpecPropertiesSubnets.RouteTable = &routeTable
	} else {
		virtualNetworksSpecPropertiesSubnets.RouteTable = nil
	}

	// ServiceEndpointPolicies
	serviceEndpointPolicyList := make([]SubResource, len(source.ServiceEndpointPolicies))
	for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
		// Shadow the loop variable to avoid aliasing
		serviceEndpointPolicyItem := serviceEndpointPolicyItem
		var serviceEndpointPolicy SubResource
		err := serviceEndpointPolicy.AssignPropertiesFromSubResource(&serviceEndpointPolicyItem)
		if err != nil {
			return errors.Wrap(err, "populating ServiceEndpointPolicies from ServiceEndpointPolicies, calling AssignPropertiesFromSubResource()")
		}
		serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
	}
	virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies = serviceEndpointPolicyList

	// ServiceEndpoints
	serviceEndpointList := make([]ServiceEndpointPropertiesFormat, len(source.ServiceEndpoints))
	for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
		// Shadow the loop variable to avoid aliasing
		serviceEndpointItem := serviceEndpointItem
		var serviceEndpoint ServiceEndpointPropertiesFormat
		err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormat(&serviceEndpointItem)
		if err != nil {
			return errors.Wrap(err, "populating ServiceEndpoints from ServiceEndpoints, calling AssignPropertiesFromServiceEndpointPropertiesFormat()")
		}
		serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
	}
	virtualNetworksSpecPropertiesSubnets.ServiceEndpoints = serviceEndpointList

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSpecPropertiesSubnets populates the provided destination VirtualNetworks_Spec_Properties_Subnets from our VirtualNetworks_Spec_Properties_Subnets
func (virtualNetworksSpecPropertiesSubnets *VirtualNetworks_Spec_Properties_Subnets) AssignPropertiesToVirtualNetworksSpecPropertiesSubnets(destination *v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefix
	if virtualNetworksSpecPropertiesSubnets.AddressPrefix != nil {
		addressPrefix := *virtualNetworksSpecPropertiesSubnets.AddressPrefix
		destination.AddressPrefix = &addressPrefix
	} else {
		destination.AddressPrefix = nil
	}

	// AddressPrefixes
	addressPrefixList := make([]string, len(virtualNetworksSpecPropertiesSubnets.AddressPrefixes))
	for addressPrefixIndex, addressPrefixItem := range virtualNetworksSpecPropertiesSubnets.AddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		addressPrefixItem := addressPrefixItem
		addressPrefixList[addressPrefixIndex] = addressPrefixItem
	}
	destination.AddressPrefixes = addressPrefixList

	// Delegations
	delegationList := make([]v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations, len(virtualNetworksSpecPropertiesSubnets.Delegations))
	for delegationIndex, delegationItem := range virtualNetworksSpecPropertiesSubnets.Delegations {
		// Shadow the loop variable to avoid aliasing
		delegationItem := delegationItem
		var delegation v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations
		err := delegationItem.AssignPropertiesToVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations(&delegation)
		if err != nil {
			return errors.Wrap(err, "populating Delegations from Delegations, calling AssignPropertiesToVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations()")
		}
		delegationList[delegationIndex] = delegation
	}
	destination.Delegations = delegationList

	// IpAllocations
	ipAllocationList := make([]v1alpha1api20201101storage.SubResource, len(virtualNetworksSpecPropertiesSubnets.IpAllocations))
	for ipAllocationIndex, ipAllocationItem := range virtualNetworksSpecPropertiesSubnets.IpAllocations {
		// Shadow the loop variable to avoid aliasing
		ipAllocationItem := ipAllocationItem
		var ipAllocation v1alpha1api20201101storage.SubResource
		err := ipAllocationItem.AssignPropertiesToSubResource(&ipAllocation)
		if err != nil {
			return errors.Wrap(err, "populating IpAllocations from IpAllocations, calling AssignPropertiesToSubResource()")
		}
		ipAllocationList[ipAllocationIndex] = ipAllocation
	}
	destination.IpAllocations = ipAllocationList

	// Name
	name := virtualNetworksSpecPropertiesSubnets.Name
	destination.Name = &name

	// NatGateway
	if virtualNetworksSpecPropertiesSubnets.NatGateway != nil {
		var natGateway v1alpha1api20201101storage.SubResource
		err := (*virtualNetworksSpecPropertiesSubnets.NatGateway).AssignPropertiesToSubResource(&natGateway)
		if err != nil {
			return errors.Wrap(err, "populating NatGateway from NatGateway, calling AssignPropertiesToSubResource()")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup != nil {
		var networkSecurityGroup v1alpha1api20201101storage.SubResource
		err := (*virtualNetworksSpecPropertiesSubnets.NetworkSecurityGroup).AssignPropertiesToSubResource(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "populating NetworkSecurityGroup from NetworkSecurityGroup, calling AssignPropertiesToSubResource()")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	if virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicy := *virtualNetworksSpecPropertiesSubnets.PrivateEndpointNetworkPolicies
		destination.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicy
	} else {
		destination.PrivateEndpointNetworkPolicies = nil
	}

	// PrivateLinkServiceNetworkPolicies
	if virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicy := *virtualNetworksSpecPropertiesSubnets.PrivateLinkServiceNetworkPolicies
		destination.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicy
	} else {
		destination.PrivateLinkServiceNetworkPolicies = nil
	}

	// RouteTable
	if virtualNetworksSpecPropertiesSubnets.RouteTable != nil {
		var routeTable v1alpha1api20201101storage.SubResource
		err := (*virtualNetworksSpecPropertiesSubnets.RouteTable).AssignPropertiesToSubResource(&routeTable)
		if err != nil {
			return errors.Wrap(err, "populating RouteTable from RouteTable, calling AssignPropertiesToSubResource()")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceEndpointPolicies
	serviceEndpointPolicyList := make([]v1alpha1api20201101storage.SubResource, len(virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies))
	for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range virtualNetworksSpecPropertiesSubnets.ServiceEndpointPolicies {
		// Shadow the loop variable to avoid aliasing
		serviceEndpointPolicyItem := serviceEndpointPolicyItem
		var serviceEndpointPolicy v1alpha1api20201101storage.SubResource
		err := serviceEndpointPolicyItem.AssignPropertiesToSubResource(&serviceEndpointPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ServiceEndpointPolicies from ServiceEndpointPolicies, calling AssignPropertiesToSubResource()")
		}
		serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
	}
	destination.ServiceEndpointPolicies = serviceEndpointPolicyList

	// ServiceEndpoints
	serviceEndpointList := make([]v1alpha1api20201101storage.ServiceEndpointPropertiesFormat, len(virtualNetworksSpecPropertiesSubnets.ServiceEndpoints))
	for serviceEndpointIndex, serviceEndpointItem := range virtualNetworksSpecPropertiesSubnets.ServiceEndpoints {
		// Shadow the loop variable to avoid aliasing
		serviceEndpointItem := serviceEndpointItem
		var serviceEndpoint v1alpha1api20201101storage.ServiceEndpointPropertiesFormat
		err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormat(&serviceEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating ServiceEndpoints from ServiceEndpoints, calling AssignPropertiesToServiceEndpointPropertiesFormat()")
		}
		serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
	}
	destination.ServiceEndpoints = serviceEndpointList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations struct {
	// +kubebuilder:validation:Required
	//Name: The name of the resource that is unique within a subnet. This name can be
	//used to access the resource.
	Name string `json:"name"`

	//ServiceName: The name of the service to whom the subnet should be delegated
	//(e.g. Microsoft.Sql/servers).
	ServiceName *string `json:"serviceName,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworksSpecPropertiesSubnetsPropertiesDelegations *VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworksSpecPropertiesSubnetsPropertiesDelegations == nil {
		return nil, nil
	}
	var result VirtualNetworks_Spec_Properties_Subnets_Properties_DelegationsARM

	// Set property ‘Name’:
	result.Name = virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.Name

	// Set property ‘Properties’:
	if virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName != nil {
		result.Properties = &ServiceDelegationPropertiesFormatARM{}
	}
	if virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName != nil {
		serviceName := *virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName
		result.Properties.ServiceName = &serviceName
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworksSpecPropertiesSubnetsPropertiesDelegations *VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) CreateEmptyARMValue() interface{} {
	return VirtualNetworks_Spec_Properties_Subnets_Properties_DelegationsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworksSpecPropertiesSubnetsPropertiesDelegations *VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworks_Spec_Properties_Subnets_Properties_DelegationsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworks_Spec_Properties_Subnets_Properties_DelegationsARM, got %T", armInput)
	}

	// Set property ‘Name’:
	virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.Name = typedInput.Name

	// Set property ‘ServiceName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceName != nil {
			serviceName := *typedInput.Properties.ServiceName
			virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName = &serviceName
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations populates our VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations from the provided source VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations
func (virtualNetworksSpecPropertiesSubnetsPropertiesDelegations *VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) AssignPropertiesFromVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations(source *v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) error {

	// Name
	if source.Name != nil {
		virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.Name = *source.Name
	} else {
		virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.Name = ""
	}

	// ServiceName
	if source.ServiceName != nil {
		serviceName := *source.ServiceName
		virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName = &serviceName
	} else {
		virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations populates the provided destination VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations from our VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations
func (virtualNetworksSpecPropertiesSubnetsPropertiesDelegations *VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) AssignPropertiesToVirtualNetworksSpecPropertiesSubnetsPropertiesDelegations(destination *v1alpha1api20201101storage.VirtualNetworks_Spec_Properties_Subnets_Properties_Delegations) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.Name
	destination.Name = &name

	// ServiceName
	if virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName != nil {
		serviceName := *virtualNetworksSpecPropertiesSubnetsPropertiesDelegations.ServiceName
		destination.ServiceName = &serviceName
	} else {
		destination.ServiceName = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&VirtualNetwork{}, &VirtualNetworkList{})
}
