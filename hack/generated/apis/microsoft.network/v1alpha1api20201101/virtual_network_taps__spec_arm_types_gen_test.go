// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkTaps_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTaps_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapsSpecARM, VirtualNetworkTapsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapsSpecARM runs a test to see if a specific instance of VirtualNetworkTaps_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapsSpecARM(subject VirtualNetworkTaps_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTaps_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTaps_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkTapsSpecARMGenerator()
var virtualNetworkTapsSpecARMGenerator gopter.Gen

// VirtualNetworkTapsSpecARMGenerator returns a generator of VirtualNetworkTaps_SpecARM instances for property testing.
// We first initialize virtualNetworkTapsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapsSpecARMGenerator() gopter.Gen {
	if virtualNetworkTapsSpecARMGenerator != nil {
		return virtualNetworkTapsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpecARM(generators)
	virtualNetworkTapsSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTaps_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapsSpecARM(generators)
	virtualNetworkTapsSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTaps_SpecARM{}), generators)

	return virtualNetworkTapsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpecARM(gens map[string]gopter.Gen) {
	gens["APIVersion"] = gen.OneConstOf(VirtualNetworkTapsSpecAPIVersion20201101)
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.OneConstOf(VirtualNetworkTapsSpecTypeMicrosoftNetworkVirtualNetworkTaps)
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapsSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = VirtualNetworkTapPropertiesFormatARMGenerator()
}

func Test_VirtualNetworkTapPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatARM, VirtualNetworkTapPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatARM runs a test to see if a specific instance of VirtualNetworkTapPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatARM(subject VirtualNetworkTapPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapPropertiesFormatARM instances for property testing - lazily instantiated by
//VirtualNetworkTapPropertiesFormatARMGenerator()
var virtualNetworkTapPropertiesFormatARMGenerator gopter.Gen

// VirtualNetworkTapPropertiesFormatARMGenerator returns a generator of VirtualNetworkTapPropertiesFormatARM instances for property testing.
// We first initialize virtualNetworkTapPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapPropertiesFormatARMGenerator() gopter.Gen {
	if virtualNetworkTapPropertiesFormatARMGenerator != nil {
		return virtualNetworkTapPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM(generators)
	virtualNetworkTapPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM(generators)
	virtualNetworkTapPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormatARM{}), generators)

	return virtualNetworkTapPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
	gens["DestinationNetworkInterfaceIPConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
}
