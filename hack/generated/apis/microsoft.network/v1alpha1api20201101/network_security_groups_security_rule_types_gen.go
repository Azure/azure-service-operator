// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/apis/microsoft.network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources=networksecuritygroupssecurityrules,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources={networksecuritygroupssecurityrules/status,networksecuritygroupssecurityrules/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/networkSecurityGroups_securityRules
type NetworkSecurityGroupsSecurityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSecurityGroupsSecurityRules_Spec                                   `json:"spec,omitempty"`
	Status            SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NetworkSecurityGroupsSecurityRule{}

// GetConditions returns the conditions of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) GetConditions() conditions.Conditions {
	return networkSecurityGroupsSecurityRule.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) SetConditions(conditions conditions.Conditions) {
	networkSecurityGroupsSecurityRule.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-network-azure-com-v1alpha1api20201101-networksecuritygroupssecurityrule,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=networksecuritygroupssecurityrules,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.networksecuritygroupssecurityrules.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NetworkSecurityGroupsSecurityRule{}

// Default applies defaults to the NetworkSecurityGroupsSecurityRule resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) Default() {
	networkSecurityGroupsSecurityRule.defaultImpl()
	var temp interface{} = networkSecurityGroupsSecurityRule
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) defaultAzureName() {
	if networkSecurityGroupsSecurityRule.Spec.AzureName == "" {
		networkSecurityGroupsSecurityRule.Spec.AzureName = networkSecurityGroupsSecurityRule.Name
	}
}

// defaultImpl applies the code generated defaults to the NetworkSecurityGroupsSecurityRule resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) defaultImpl() {
	networkSecurityGroupsSecurityRule.defaultAzureName()
}

var _ genruntime.KubernetesResource = &NetworkSecurityGroupsSecurityRule{}

// AzureName returns the Azure name of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) AzureName() string {
	return networkSecurityGroupsSecurityRule.Spec.AzureName
}

// GetSpec returns the specification of this resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) GetSpec() genruntime.ConvertibleSpec {
	return &networkSecurityGroupsSecurityRule.Spec
}

// GetStatus returns the status of this resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) GetStatus() genruntime.ConvertibleStatus {
	return &networkSecurityGroupsSecurityRule.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/networkSecurityGroups/securityRules"
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) GetType() string {
	return "Microsoft.Network/networkSecurityGroups/securityRules"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(networkSecurityGroupsSecurityRule.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: networkSecurityGroupsSecurityRule.Namespace, Name: networkSecurityGroupsSecurityRule.Spec.Owner.Name}
}

// SetStatus sets the status of this resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded); ok {
		networkSecurityGroupsSecurityRule.Status = *st
		return nil
	}

	// Convert status to required version
	var st SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	networkSecurityGroupsSecurityRule.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-network-azure-com-v1alpha1api20201101-networksecuritygroupssecurityrule,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=networksecuritygroupssecurityrules,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.networksecuritygroupssecurityrules.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NetworkSecurityGroupsSecurityRule{}

// ValidateCreate validates the creation of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) ValidateCreate() error {
	validations := networkSecurityGroupsSecurityRule.createValidations()
	var temp interface{} = networkSecurityGroupsSecurityRule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) ValidateDelete() error {
	validations := networkSecurityGroupsSecurityRule.deleteValidations()
	var temp interface{} = networkSecurityGroupsSecurityRule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) ValidateUpdate(old runtime.Object) error {
	validations := networkSecurityGroupsSecurityRule.updateValidations()
	var temp interface{} = networkSecurityGroupsSecurityRule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) createValidations() []func() error {
	return []func() error{networkSecurityGroupsSecurityRule.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return networkSecurityGroupsSecurityRule.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&networkSecurityGroupsSecurityRule.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNetworkSecurityGroupsSecurityRule populates our NetworkSecurityGroupsSecurityRule from the provided source NetworkSecurityGroupsSecurityRule
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) AssignPropertiesFromNetworkSecurityGroupsSecurityRule(source *v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRule) error {

	// Spec
	var spec NetworkSecurityGroupsSecurityRules_Spec
	err := spec.AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec()")
	}
	networkSecurityGroupsSecurityRule.Spec = spec

	// Status
	var status SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
	err = status.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded()")
	}
	networkSecurityGroupsSecurityRule.Status = status

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupsSecurityRule populates the provided destination NetworkSecurityGroupsSecurityRule from our NetworkSecurityGroupsSecurityRule
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) AssignPropertiesToNetworkSecurityGroupsSecurityRule(destination *v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRule) error {

	// Spec
	var spec v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec
	err := networkSecurityGroupsSecurityRule.Spec.AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
	err = networkSecurityGroupsSecurityRule.Status.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (networkSecurityGroupsSecurityRule *NetworkSecurityGroupsSecurityRule) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: networkSecurityGroupsSecurityRule.Spec.OriginalVersion(),
		Kind:    "NetworkSecurityGroupsSecurityRule",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/networkSecurityGroups_securityRules
type NetworkSecurityGroupsSecurityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkSecurityGroupsSecurityRule `json:"items"`
}

type NetworkSecurityGroupsSecurityRules_Spec struct {
	// +kubebuilder:validation:Required
	//Access: The network traffic is allowed or denied.
	Access SecurityRulePropertiesFormatAccess `json:"access"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Description: A description for this rule. Restricted to 140 chars.
	Description *string `json:"description,omitempty"`

	//DestinationAddressPrefix: The destination address prefix. CIDR or destination IP
	//range. Asterisk '*' can also be used to match all source IPs. Default tags such
	//as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
	DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`

	//DestinationAddressPrefixes: The destination address prefixes. CIDR or
	//destination IP ranges.
	DestinationAddressPrefixes []string `json:"destinationAddressPrefixes,omitempty"`

	//DestinationApplicationSecurityGroups: The application security group specified
	//as destination.
	DestinationApplicationSecurityGroups []SubResource `json:"destinationApplicationSecurityGroups,omitempty"`

	//DestinationPortRange: The destination port or range. Integer or range between 0
	//and 65535. Asterisk '*' can also be used to match all ports.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`

	//DestinationPortRanges: The destination port ranges.
	DestinationPortRanges []string `json:"destinationPortRanges,omitempty"`

	// +kubebuilder:validation:Required
	//Direction: The direction of the rule. The direction specifies if rule will be
	//evaluated on incoming or outgoing traffic.
	Direction SecurityRulePropertiesFormatDirection `json:"direction"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.network.azure.com" json:"owner" kind:"NetworkSecurityGroup"`

	// +kubebuilder:validation:Required
	//Priority: The priority of the rule. The value can be between 100 and 4096. The
	//priority number must be unique for each rule in the collection. The lower the
	//priority number, the higher the priority of the rule.
	Priority int `json:"priority"`

	// +kubebuilder:validation:Required
	//Protocol: Network protocol this rule applies to.
	Protocol SecurityRulePropertiesFormatProtocol `json:"protocol"`

	//SourceAddressPrefix: The CIDR or source IP range. Asterisk '*' can also be used
	//to match all source IPs. Default tags such as 'VirtualNetwork',
	//'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule,
	//specifies where network traffic originates from.
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`

	//SourceAddressPrefixes: The CIDR or source IP ranges.
	SourceAddressPrefixes []string `json:"sourceAddressPrefixes,omitempty"`

	//SourceApplicationSecurityGroups: The application security group specified as
	//source.
	SourceApplicationSecurityGroups []SubResource `json:"sourceApplicationSecurityGroups,omitempty"`

	//SourcePortRange: The source port or range. Integer or range between 0 and 65535.
	//Asterisk '*' can also be used to match all ports.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`

	//SourcePortRanges: The source port ranges.
	SourcePortRanges []string `json:"sourcePortRanges,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkSecurityGroupsSecurityRules_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if networkSecurityGroupsSecurityRulesSpec == nil {
		return nil, nil
	}
	var result NetworkSecurityGroupsSecurityRules_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = NetworkSecurityGroupsSecurityRulesSpecAPIVersion20201101

	// Set property ‘Location’:
	if networkSecurityGroupsSecurityRulesSpec.Location != nil {
		location := *networkSecurityGroupsSecurityRulesSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = name

	// Set property ‘Properties’:
	result.Properties.Access = networkSecurityGroupsSecurityRulesSpec.Access
	if networkSecurityGroupsSecurityRulesSpec.Description != nil {
		description := *networkSecurityGroupsSecurityRulesSpec.Description
		result.Properties.Description = &description
	}
	if networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix
		result.Properties.DestinationAddressPrefix = &destinationAddressPrefix
	}
	for _, item := range networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefixes {
		result.Properties.DestinationAddressPrefixes = append(result.Properties.DestinationAddressPrefixes, item)
	}
	for _, item := range networkSecurityGroupsSecurityRulesSpec.DestinationApplicationSecurityGroups {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.DestinationApplicationSecurityGroups = append(result.Properties.DestinationApplicationSecurityGroups, itemARM.(SubResourceARM))
	}
	if networkSecurityGroupsSecurityRulesSpec.DestinationPortRange != nil {
		destinationPortRange := *networkSecurityGroupsSecurityRulesSpec.DestinationPortRange
		result.Properties.DestinationPortRange = &destinationPortRange
	}
	for _, item := range networkSecurityGroupsSecurityRulesSpec.DestinationPortRanges {
		result.Properties.DestinationPortRanges = append(result.Properties.DestinationPortRanges, item)
	}
	result.Properties.Direction = networkSecurityGroupsSecurityRulesSpec.Direction
	result.Properties.Priority = networkSecurityGroupsSecurityRulesSpec.Priority
	result.Properties.Protocol = networkSecurityGroupsSecurityRulesSpec.Protocol
	if networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix != nil {
		sourceAddressPrefix := *networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix
		result.Properties.SourceAddressPrefix = &sourceAddressPrefix
	}
	for _, item := range networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefixes {
		result.Properties.SourceAddressPrefixes = append(result.Properties.SourceAddressPrefixes, item)
	}
	for _, item := range networkSecurityGroupsSecurityRulesSpec.SourceApplicationSecurityGroups {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.SourceApplicationSecurityGroups = append(result.Properties.SourceApplicationSecurityGroups, itemARM.(SubResourceARM))
	}
	if networkSecurityGroupsSecurityRulesSpec.SourcePortRange != nil {
		sourcePortRange := *networkSecurityGroupsSecurityRulesSpec.SourcePortRange
		result.Properties.SourcePortRange = &sourcePortRange
	}
	for _, item := range networkSecurityGroupsSecurityRulesSpec.SourcePortRanges {
		result.Properties.SourcePortRanges = append(result.Properties.SourcePortRanges, item)
	}

	// Set property ‘Tags’:
	if networkSecurityGroupsSecurityRulesSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range networkSecurityGroupsSecurityRulesSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = NetworkSecurityGroupsSecurityRulesSpecTypeMicrosoftNetworkNetworkSecurityGroupsSecurityRules
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) CreateEmptyARMValue() interface{} {
	return NetworkSecurityGroupsSecurityRules_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkSecurityGroupsSecurityRules_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkSecurityGroupsSecurityRules_SpecARM, got %T", armInput)
	}

	// Set property ‘Access’:
	// copying flattened property:
	networkSecurityGroupsSecurityRulesSpec.Access = typedInput.Properties.Access

	// Set property ‘AzureName’:
	networkSecurityGroupsSecurityRulesSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties.Description != nil {
		description := *typedInput.Properties.Description
		networkSecurityGroupsSecurityRulesSpec.Description = &description
	}

	// Set property ‘DestinationAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *typedInput.Properties.DestinationAddressPrefix
		networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix = &destinationAddressPrefix
	}

	// Set property ‘DestinationAddressPrefixes’:
	// copying flattened property:
	for _, item := range typedInput.Properties.DestinationAddressPrefixes {
		networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefixes = append(networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefixes, item)
	}

	// Set property ‘DestinationApplicationSecurityGroups’:
	// copying flattened property:
	for _, item := range typedInput.Properties.DestinationApplicationSecurityGroups {
		var item1 SubResource
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkSecurityGroupsSecurityRulesSpec.DestinationApplicationSecurityGroups = append(networkSecurityGroupsSecurityRulesSpec.DestinationApplicationSecurityGroups, item1)
	}

	// Set property ‘DestinationPortRange’:
	// copying flattened property:
	if typedInput.Properties.DestinationPortRange != nil {
		destinationPortRange := *typedInput.Properties.DestinationPortRange
		networkSecurityGroupsSecurityRulesSpec.DestinationPortRange = &destinationPortRange
	}

	// Set property ‘DestinationPortRanges’:
	// copying flattened property:
	for _, item := range typedInput.Properties.DestinationPortRanges {
		networkSecurityGroupsSecurityRulesSpec.DestinationPortRanges = append(networkSecurityGroupsSecurityRulesSpec.DestinationPortRanges, item)
	}

	// Set property ‘Direction’:
	// copying flattened property:
	networkSecurityGroupsSecurityRulesSpec.Direction = typedInput.Properties.Direction

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		networkSecurityGroupsSecurityRulesSpec.Location = &location
	}

	// Set property ‘Owner’:
	networkSecurityGroupsSecurityRulesSpec.Owner = owner

	// Set property ‘Priority’:
	// copying flattened property:
	networkSecurityGroupsSecurityRulesSpec.Priority = typedInput.Properties.Priority

	// Set property ‘Protocol’:
	// copying flattened property:
	networkSecurityGroupsSecurityRulesSpec.Protocol = typedInput.Properties.Protocol

	// Set property ‘SourceAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties.SourceAddressPrefix != nil {
		sourceAddressPrefix := *typedInput.Properties.SourceAddressPrefix
		networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix = &sourceAddressPrefix
	}

	// Set property ‘SourceAddressPrefixes’:
	// copying flattened property:
	for _, item := range typedInput.Properties.SourceAddressPrefixes {
		networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefixes = append(networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefixes, item)
	}

	// Set property ‘SourceApplicationSecurityGroups’:
	// copying flattened property:
	for _, item := range typedInput.Properties.SourceApplicationSecurityGroups {
		var item1 SubResource
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkSecurityGroupsSecurityRulesSpec.SourceApplicationSecurityGroups = append(networkSecurityGroupsSecurityRulesSpec.SourceApplicationSecurityGroups, item1)
	}

	// Set property ‘SourcePortRange’:
	// copying flattened property:
	if typedInput.Properties.SourcePortRange != nil {
		sourcePortRange := *typedInput.Properties.SourcePortRange
		networkSecurityGroupsSecurityRulesSpec.SourcePortRange = &sourcePortRange
	}

	// Set property ‘SourcePortRanges’:
	// copying flattened property:
	for _, item := range typedInput.Properties.SourcePortRanges {
		networkSecurityGroupsSecurityRulesSpec.SourcePortRanges = append(networkSecurityGroupsSecurityRulesSpec.SourcePortRanges, item)
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		networkSecurityGroupsSecurityRulesSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			networkSecurityGroupsSecurityRulesSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NetworkSecurityGroupsSecurityRules_Spec{}

// ConvertSpecFrom populates our NetworkSecurityGroupsSecurityRules_Spec from the provided source
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec)
	if ok {
		// Populate our instance from source
		return networkSecurityGroupsSecurityRulesSpec.AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = networkSecurityGroupsSecurityRulesSpec.AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NetworkSecurityGroupsSecurityRules_Spec
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec)
	if ok {
		// Populate destination from our instance
		return networkSecurityGroupsSecurityRulesSpec.AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec{}
	err := networkSecurityGroupsSecurityRulesSpec.AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec populates our NetworkSecurityGroupsSecurityRules_Spec from the provided source NetworkSecurityGroupsSecurityRules_Spec
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(source *v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec) error {

	// Access
	if source.Access != nil {
		networkSecurityGroupsSecurityRulesSpec.Access = SecurityRulePropertiesFormatAccess(*source.Access)
	} else {
		networkSecurityGroupsSecurityRulesSpec.Access = ""
	}

	// AzureName
	networkSecurityGroupsSecurityRulesSpec.AzureName = source.AzureName

	// Description
	if source.Description != nil {
		description := *source.Description
		networkSecurityGroupsSecurityRulesSpec.Description = &description
	} else {
		networkSecurityGroupsSecurityRulesSpec.Description = nil
	}

	// DestinationAddressPrefix
	if source.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *source.DestinationAddressPrefix
		networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix = &destinationAddressPrefix
	} else {
		networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix = nil
	}

	// DestinationAddressPrefixes
	destinationAddressPrefixList := make([]string, len(source.DestinationAddressPrefixes))
	for destinationAddressPrefixIndex, destinationAddressPrefixItem := range source.DestinationAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		destinationAddressPrefixItem := destinationAddressPrefixItem
		destinationAddressPrefixList[destinationAddressPrefixIndex] = destinationAddressPrefixItem
	}
	networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefixes = destinationAddressPrefixList

	// DestinationApplicationSecurityGroups
	destinationApplicationSecurityGroupList := make([]SubResource, len(source.DestinationApplicationSecurityGroups))
	for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range source.DestinationApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
		var destinationApplicationSecurityGroup SubResource
		err := destinationApplicationSecurityGroup.AssignPropertiesFromSubResource(&destinationApplicationSecurityGroupItem)
		if err != nil {
			return errors.Wrap(err, "populating DestinationApplicationSecurityGroups from DestinationApplicationSecurityGroups, calling AssignPropertiesFromSubResource()")
		}
		destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
	}
	networkSecurityGroupsSecurityRulesSpec.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList

	// DestinationPortRange
	if source.DestinationPortRange != nil {
		destinationPortRange := *source.DestinationPortRange
		networkSecurityGroupsSecurityRulesSpec.DestinationPortRange = &destinationPortRange
	} else {
		networkSecurityGroupsSecurityRulesSpec.DestinationPortRange = nil
	}

	// DestinationPortRanges
	destinationPortRangeList := make([]string, len(source.DestinationPortRanges))
	for destinationPortRangeIndex, destinationPortRangeItem := range source.DestinationPortRanges {
		// Shadow the loop variable to avoid aliasing
		destinationPortRangeItem := destinationPortRangeItem
		destinationPortRangeList[destinationPortRangeIndex] = destinationPortRangeItem
	}
	networkSecurityGroupsSecurityRulesSpec.DestinationPortRanges = destinationPortRangeList

	// Direction
	if source.Direction != nil {
		networkSecurityGroupsSecurityRulesSpec.Direction = SecurityRulePropertiesFormatDirection(*source.Direction)
	} else {
		networkSecurityGroupsSecurityRulesSpec.Direction = ""
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		networkSecurityGroupsSecurityRulesSpec.Location = &location
	} else {
		networkSecurityGroupsSecurityRulesSpec.Location = nil
	}

	// Owner
	networkSecurityGroupsSecurityRulesSpec.Owner = source.Owner.Copy()

	// Priority
	if source.Priority != nil {
		networkSecurityGroupsSecurityRulesSpec.Priority = *source.Priority
	} else {
		networkSecurityGroupsSecurityRulesSpec.Priority = 0
	}

	// Protocol
	if source.Protocol != nil {
		networkSecurityGroupsSecurityRulesSpec.Protocol = SecurityRulePropertiesFormatProtocol(*source.Protocol)
	} else {
		networkSecurityGroupsSecurityRulesSpec.Protocol = ""
	}

	// SourceAddressPrefix
	if source.SourceAddressPrefix != nil {
		sourceAddressPrefix := *source.SourceAddressPrefix
		networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix = &sourceAddressPrefix
	} else {
		networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix = nil
	}

	// SourceAddressPrefixes
	sourceAddressPrefixList := make([]string, len(source.SourceAddressPrefixes))
	for sourceAddressPrefixIndex, sourceAddressPrefixItem := range source.SourceAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		sourceAddressPrefixItem := sourceAddressPrefixItem
		sourceAddressPrefixList[sourceAddressPrefixIndex] = sourceAddressPrefixItem
	}
	networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefixes = sourceAddressPrefixList

	// SourceApplicationSecurityGroups
	sourceApplicationSecurityGroupList := make([]SubResource, len(source.SourceApplicationSecurityGroups))
	for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range source.SourceApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
		var sourceApplicationSecurityGroup SubResource
		err := sourceApplicationSecurityGroup.AssignPropertiesFromSubResource(&sourceApplicationSecurityGroupItem)
		if err != nil {
			return errors.Wrap(err, "populating SourceApplicationSecurityGroups from SourceApplicationSecurityGroups, calling AssignPropertiesFromSubResource()")
		}
		sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
	}
	networkSecurityGroupsSecurityRulesSpec.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList

	// SourcePortRange
	if source.SourcePortRange != nil {
		sourcePortRange := *source.SourcePortRange
		networkSecurityGroupsSecurityRulesSpec.SourcePortRange = &sourcePortRange
	} else {
		networkSecurityGroupsSecurityRulesSpec.SourcePortRange = nil
	}

	// SourcePortRanges
	sourcePortRangeList := make([]string, len(source.SourcePortRanges))
	for sourcePortRangeIndex, sourcePortRangeItem := range source.SourcePortRanges {
		// Shadow the loop variable to avoid aliasing
		sourcePortRangeItem := sourcePortRangeItem
		sourcePortRangeList[sourcePortRangeIndex] = sourcePortRangeItem
	}
	networkSecurityGroupsSecurityRulesSpec.SourcePortRanges = sourcePortRangeList

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	networkSecurityGroupsSecurityRulesSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec populates the provided destination NetworkSecurityGroupsSecurityRules_Spec from our NetworkSecurityGroupsSecurityRules_Spec
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(destination *v1alpha1api20201101storage.NetworkSecurityGroupsSecurityRules_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Access
	access := string(networkSecurityGroupsSecurityRulesSpec.Access)
	destination.Access = &access

	// AzureName
	destination.AzureName = networkSecurityGroupsSecurityRulesSpec.AzureName

	// Description
	if networkSecurityGroupsSecurityRulesSpec.Description != nil {
		description := *networkSecurityGroupsSecurityRulesSpec.Description
		destination.Description = &description
	} else {
		destination.Description = nil
	}

	// DestinationAddressPrefix
	if networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefix
		destination.DestinationAddressPrefix = &destinationAddressPrefix
	} else {
		destination.DestinationAddressPrefix = nil
	}

	// DestinationAddressPrefixes
	destinationAddressPrefixList := make([]string, len(networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefixes))
	for destinationAddressPrefixIndex, destinationAddressPrefixItem := range networkSecurityGroupsSecurityRulesSpec.DestinationAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		destinationAddressPrefixItem := destinationAddressPrefixItem
		destinationAddressPrefixList[destinationAddressPrefixIndex] = destinationAddressPrefixItem
	}
	destination.DestinationAddressPrefixes = destinationAddressPrefixList

	// DestinationApplicationSecurityGroups
	destinationApplicationSecurityGroupList := make([]v1alpha1api20201101storage.SubResource, len(networkSecurityGroupsSecurityRulesSpec.DestinationApplicationSecurityGroups))
	for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range networkSecurityGroupsSecurityRulesSpec.DestinationApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
		var destinationApplicationSecurityGroup v1alpha1api20201101storage.SubResource
		err := destinationApplicationSecurityGroupItem.AssignPropertiesToSubResource(&destinationApplicationSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "populating DestinationApplicationSecurityGroups from DestinationApplicationSecurityGroups, calling AssignPropertiesToSubResource()")
		}
		destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
	}
	destination.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList

	// DestinationPortRange
	if networkSecurityGroupsSecurityRulesSpec.DestinationPortRange != nil {
		destinationPortRange := *networkSecurityGroupsSecurityRulesSpec.DestinationPortRange
		destination.DestinationPortRange = &destinationPortRange
	} else {
		destination.DestinationPortRange = nil
	}

	// DestinationPortRanges
	destinationPortRangeList := make([]string, len(networkSecurityGroupsSecurityRulesSpec.DestinationPortRanges))
	for destinationPortRangeIndex, destinationPortRangeItem := range networkSecurityGroupsSecurityRulesSpec.DestinationPortRanges {
		// Shadow the loop variable to avoid aliasing
		destinationPortRangeItem := destinationPortRangeItem
		destinationPortRangeList[destinationPortRangeIndex] = destinationPortRangeItem
	}
	destination.DestinationPortRanges = destinationPortRangeList

	// Direction
	direction := string(networkSecurityGroupsSecurityRulesSpec.Direction)
	destination.Direction = &direction

	// Location
	if networkSecurityGroupsSecurityRulesSpec.Location != nil {
		location := *networkSecurityGroupsSecurityRulesSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// OriginalVersion
	destination.OriginalVersion = networkSecurityGroupsSecurityRulesSpec.OriginalVersion()

	// Owner
	destination.Owner = networkSecurityGroupsSecurityRulesSpec.Owner.Copy()

	// Priority
	priority := networkSecurityGroupsSecurityRulesSpec.Priority
	destination.Priority = &priority

	// Protocol
	protocol := string(networkSecurityGroupsSecurityRulesSpec.Protocol)
	destination.Protocol = &protocol

	// SourceAddressPrefix
	if networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix != nil {
		sourceAddressPrefix := *networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefix
		destination.SourceAddressPrefix = &sourceAddressPrefix
	} else {
		destination.SourceAddressPrefix = nil
	}

	// SourceAddressPrefixes
	sourceAddressPrefixList := make([]string, len(networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefixes))
	for sourceAddressPrefixIndex, sourceAddressPrefixItem := range networkSecurityGroupsSecurityRulesSpec.SourceAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		sourceAddressPrefixItem := sourceAddressPrefixItem
		sourceAddressPrefixList[sourceAddressPrefixIndex] = sourceAddressPrefixItem
	}
	destination.SourceAddressPrefixes = sourceAddressPrefixList

	// SourceApplicationSecurityGroups
	sourceApplicationSecurityGroupList := make([]v1alpha1api20201101storage.SubResource, len(networkSecurityGroupsSecurityRulesSpec.SourceApplicationSecurityGroups))
	for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range networkSecurityGroupsSecurityRulesSpec.SourceApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
		var sourceApplicationSecurityGroup v1alpha1api20201101storage.SubResource
		err := sourceApplicationSecurityGroupItem.AssignPropertiesToSubResource(&sourceApplicationSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "populating SourceApplicationSecurityGroups from SourceApplicationSecurityGroups, calling AssignPropertiesToSubResource()")
		}
		sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
	}
	destination.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList

	// SourcePortRange
	if networkSecurityGroupsSecurityRulesSpec.SourcePortRange != nil {
		sourcePortRange := *networkSecurityGroupsSecurityRulesSpec.SourcePortRange
		destination.SourcePortRange = &sourcePortRange
	} else {
		destination.SourcePortRange = nil
	}

	// SourcePortRanges
	sourcePortRangeList := make([]string, len(networkSecurityGroupsSecurityRulesSpec.SourcePortRanges))
	for sourcePortRangeIndex, sourcePortRangeItem := range networkSecurityGroupsSecurityRulesSpec.SourcePortRanges {
		// Shadow the loop variable to avoid aliasing
		sourcePortRangeItem := sourcePortRangeItem
		sourcePortRangeList[sourcePortRangeIndex] = sourcePortRangeItem
	}
	destination.SourcePortRanges = sourcePortRangeList

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range networkSecurityGroupsSecurityRulesSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (networkSecurityGroupsSecurityRulesSpec *NetworkSecurityGroupsSecurityRules_Spec) SetAzureName(azureName string) {
	networkSecurityGroupsSecurityRulesSpec.AzureName = azureName
}

//Generated from:
type SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded struct {
	//Access: The network traffic is allowed or denied.
	Access *SecurityRuleAccess_Status `json:"access,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Description: A description for this rule. Restricted to 140 chars.
	Description *string `json:"description,omitempty"`

	//DestinationAddressPrefix: The destination address prefix. CIDR or destination IP
	//range. Asterisk '*' can also be used to match all source IPs. Default tags such
	//as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
	DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`

	//DestinationAddressPrefixes: The destination address prefixes. CIDR or
	//destination IP ranges.
	DestinationAddressPrefixes []string `json:"destinationAddressPrefixes,omitempty"`

	//DestinationApplicationSecurityGroups: The application security group specified
	//as destination.
	DestinationApplicationSecurityGroups []ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded `json:"destinationApplicationSecurityGroups,omitempty"`

	//DestinationPortRange: The destination port or range. Integer or range between 0
	//and 65535. Asterisk '*' can also be used to match all ports.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`

	//DestinationPortRanges: The destination port ranges.
	DestinationPortRanges []string `json:"destinationPortRanges,omitempty"`

	//Direction: The direction of the rule. The direction specifies if rule will be
	//evaluated on incoming or outgoing traffic.
	Direction *SecurityRuleDirection_Status `json:"direction,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Priority: The priority of the rule. The value can be between 100 and 4096. The
	//priority number must be unique for each rule in the collection. The lower the
	//priority number, the higher the priority of the rule.
	Priority *int `json:"priority,omitempty"`

	//Protocol: Network protocol this rule applies to.
	Protocol *SecurityRulePropertiesFormatStatusProtocol `json:"protocol,omitempty"`

	//ProvisioningState: The provisioning state of the security rule resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//SourceAddressPrefix: The CIDR or source IP range. Asterisk '*' can also be used
	//to match all source IPs. Default tags such as 'VirtualNetwork',
	//'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule,
	//specifies where network traffic originates from.
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`

	//SourceAddressPrefixes: The CIDR or source IP ranges.
	SourceAddressPrefixes []string `json:"sourceAddressPrefixes,omitempty"`

	//SourceApplicationSecurityGroups: The application security group specified as
	//source.
	SourceApplicationSecurityGroups []ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded `json:"sourceApplicationSecurityGroups,omitempty"`

	//SourcePortRange: The source port or range. Integer or range between 0 and 65535.
	//Asterisk '*' can also be used to match all ports.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`

	//SourcePortRanges: The source port ranges.
	SourcePortRanges []string `json:"sourcePortRanges,omitempty"`

	//Type: The type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}

// ConvertStatusFrom populates our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from the provided source
func (securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}
	err := securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Access’:
	// copying flattened property:
	if typedInput.Properties != nil {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Access = &typedInput.Properties.Access
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Description = &description
		}
	}

	// Set property ‘DestinationAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DestinationAddressPrefix != nil {
			destinationAddressPrefix := *typedInput.Properties.DestinationAddressPrefix
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefix = &destinationAddressPrefix
		}
	}

	// Set property ‘DestinationAddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationAddressPrefixes {
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefixes = append(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefixes, item)
		}
	}

	// Set property ‘DestinationApplicationSecurityGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationApplicationSecurityGroups {
			var item1 ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationApplicationSecurityGroups = append(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationApplicationSecurityGroups, item1)
		}
	}

	// Set property ‘DestinationPortRange’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DestinationPortRange != nil {
			destinationPortRange := *typedInput.Properties.DestinationPortRange
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRange = &destinationPortRange
		}
	}

	// Set property ‘DestinationPortRanges’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationPortRanges {
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRanges = append(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRanges, item)
		}
	}

	// Set property ‘Direction’:
	// copying flattened property:
	if typedInput.Properties != nil {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Direction = &typedInput.Properties.Direction
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Name = &name
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Priority = &priority
		}
	}

	// Set property ‘Protocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Protocol = &typedInput.Properties.Protocol
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘SourceAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceAddressPrefix != nil {
			sourceAddressPrefix := *typedInput.Properties.SourceAddressPrefix
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefix = &sourceAddressPrefix
		}
	}

	// Set property ‘SourceAddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourceAddressPrefixes {
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefixes = append(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefixes, item)
		}
	}

	// Set property ‘SourceApplicationSecurityGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourceApplicationSecurityGroups {
			var item1 ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceApplicationSecurityGroups = append(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceApplicationSecurityGroups, item1)
		}
	}

	// Set property ‘SourcePortRange’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourcePortRange != nil {
			sourcePortRange := *typedInput.Properties.SourcePortRange
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRange = &sourcePortRange
		}
	}

	// Set property ‘SourcePortRanges’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourcePortRanges {
			securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRanges = append(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRanges, item)
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from the provided source SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(source *v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {

	// Access
	if source.Access != nil {
		access := SecurityRuleAccess_Status(*source.Access)
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Access = &access
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Access = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Conditions = conditionList

	// Description
	if source.Description != nil {
		description := *source.Description
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Description = &description
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Description = nil
	}

	// DestinationAddressPrefix
	if source.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *source.DestinationAddressPrefix
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefix = &destinationAddressPrefix
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefix = nil
	}

	// DestinationAddressPrefixes
	destinationAddressPrefixList := make([]string, len(source.DestinationAddressPrefixes))
	for destinationAddressPrefixIndex, destinationAddressPrefixItem := range source.DestinationAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		destinationAddressPrefixItem := destinationAddressPrefixItem
		destinationAddressPrefixList[destinationAddressPrefixIndex] = destinationAddressPrefixItem
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefixes = destinationAddressPrefixList

	// DestinationApplicationSecurityGroups
	destinationApplicationSecurityGroupList := make([]ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(source.DestinationApplicationSecurityGroups))
	for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range source.DestinationApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
		var destinationApplicationSecurityGroup ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
		err := destinationApplicationSecurityGroup.AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&destinationApplicationSecurityGroupItem)
		if err != nil {
			return errors.Wrap(err, "populating DestinationApplicationSecurityGroups from DestinationApplicationSecurityGroups, calling AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded()")
		}
		destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList

	// DestinationPortRange
	if source.DestinationPortRange != nil {
		destinationPortRange := *source.DestinationPortRange
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRange = &destinationPortRange
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRange = nil
	}

	// DestinationPortRanges
	destinationPortRangeList := make([]string, len(source.DestinationPortRanges))
	for destinationPortRangeIndex, destinationPortRangeItem := range source.DestinationPortRanges {
		// Shadow the loop variable to avoid aliasing
		destinationPortRangeItem := destinationPortRangeItem
		destinationPortRangeList[destinationPortRangeIndex] = destinationPortRangeItem
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRanges = destinationPortRangeList

	// Direction
	if source.Direction != nil {
		direction := SecurityRuleDirection_Status(*source.Direction)
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Direction = &direction
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Direction = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Etag = &etag
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Etag = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id = &id
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Name = &name
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Name = nil
	}

	// Priority
	if source.Priority != nil {
		priority := *source.Priority
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Priority = &priority
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Priority = nil
	}

	// Protocol
	if source.Protocol != nil {
		protocol := SecurityRulePropertiesFormatStatusProtocol(*source.Protocol)
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Protocol = &protocol
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Protocol = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.ProvisioningState = &provisioningState
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.ProvisioningState = nil
	}

	// SourceAddressPrefix
	if source.SourceAddressPrefix != nil {
		sourceAddressPrefix := *source.SourceAddressPrefix
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefix = &sourceAddressPrefix
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefix = nil
	}

	// SourceAddressPrefixes
	sourceAddressPrefixList := make([]string, len(source.SourceAddressPrefixes))
	for sourceAddressPrefixIndex, sourceAddressPrefixItem := range source.SourceAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		sourceAddressPrefixItem := sourceAddressPrefixItem
		sourceAddressPrefixList[sourceAddressPrefixIndex] = sourceAddressPrefixItem
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefixes = sourceAddressPrefixList

	// SourceApplicationSecurityGroups
	sourceApplicationSecurityGroupList := make([]ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(source.SourceApplicationSecurityGroups))
	for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range source.SourceApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
		var sourceApplicationSecurityGroup ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
		err := sourceApplicationSecurityGroup.AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&sourceApplicationSecurityGroupItem)
		if err != nil {
			return errors.Wrap(err, "populating SourceApplicationSecurityGroups from SourceApplicationSecurityGroups, calling AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded()")
		}
		sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList

	// SourcePortRange
	if source.SourcePortRange != nil {
		sourcePortRange := *source.SourcePortRange
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRange = &sourcePortRange
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRange = nil
	}

	// SourcePortRanges
	sourcePortRangeList := make([]string, len(source.SourcePortRanges))
	for sourcePortRangeIndex, sourcePortRangeItem := range source.SourcePortRanges {
		// Shadow the loop variable to avoid aliasing
		sourcePortRangeItem := sourcePortRangeItem
		sourcePortRangeList[sourcePortRangeIndex] = sourcePortRangeItem
	}
	securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRanges = sourcePortRangeList

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Type = &typeVar
	} else {
		securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates the provided destination SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(destination *v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Access
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Access != nil {
		access := string(*securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Access)
		destination.Access = &access
	} else {
		destination.Access = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Conditions))
	for conditionIndex, conditionItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// Description
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Description != nil {
		description := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Description
		destination.Description = &description
	} else {
		destination.Description = nil
	}

	// DestinationAddressPrefix
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefix
		destination.DestinationAddressPrefix = &destinationAddressPrefix
	} else {
		destination.DestinationAddressPrefix = nil
	}

	// DestinationAddressPrefixes
	destinationAddressPrefixList := make([]string, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefixes))
	for destinationAddressPrefixIndex, destinationAddressPrefixItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		destinationAddressPrefixItem := destinationAddressPrefixItem
		destinationAddressPrefixList[destinationAddressPrefixIndex] = destinationAddressPrefixItem
	}
	destination.DestinationAddressPrefixes = destinationAddressPrefixList

	// DestinationApplicationSecurityGroups
	destinationApplicationSecurityGroupList := make([]v1alpha1api20201101storage.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationApplicationSecurityGroups))
	for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
		var destinationApplicationSecurityGroup v1alpha1api20201101storage.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
		err := destinationApplicationSecurityGroupItem.AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&destinationApplicationSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "populating DestinationApplicationSecurityGroups from DestinationApplicationSecurityGroups, calling AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded()")
		}
		destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
	}
	destination.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList

	// DestinationPortRange
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRange != nil {
		destinationPortRange := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRange
		destination.DestinationPortRange = &destinationPortRange
	} else {
		destination.DestinationPortRange = nil
	}

	// DestinationPortRanges
	destinationPortRangeList := make([]string, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRanges))
	for destinationPortRangeIndex, destinationPortRangeItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.DestinationPortRanges {
		// Shadow the loop variable to avoid aliasing
		destinationPortRangeItem := destinationPortRangeItem
		destinationPortRangeList[destinationPortRangeIndex] = destinationPortRangeItem
	}
	destination.DestinationPortRanges = destinationPortRangeList

	// Direction
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Direction != nil {
		direction := string(*securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Direction)
		destination.Direction = &direction
	} else {
		destination.Direction = nil
	}

	// Etag
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Etag != nil {
		etag := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id != nil {
		id := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Name != nil {
		name := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Priority
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Priority != nil {
		priority := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Priority
		destination.Priority = &priority
	} else {
		destination.Priority = nil
	}

	// Protocol
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Protocol != nil {
		protocol := string(*securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Protocol)
		destination.Protocol = &protocol
	} else {
		destination.Protocol = nil
	}

	// ProvisioningState
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.ProvisioningState != nil {
		provisioningState := string(*securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SourceAddressPrefix
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefix != nil {
		sourceAddressPrefix := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefix
		destination.SourceAddressPrefix = &sourceAddressPrefix
	} else {
		destination.SourceAddressPrefix = nil
	}

	// SourceAddressPrefixes
	sourceAddressPrefixList := make([]string, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefixes))
	for sourceAddressPrefixIndex, sourceAddressPrefixItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceAddressPrefixes {
		// Shadow the loop variable to avoid aliasing
		sourceAddressPrefixItem := sourceAddressPrefixItem
		sourceAddressPrefixList[sourceAddressPrefixIndex] = sourceAddressPrefixItem
	}
	destination.SourceAddressPrefixes = sourceAddressPrefixList

	// SourceApplicationSecurityGroups
	sourceApplicationSecurityGroupList := make([]v1alpha1api20201101storage.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceApplicationSecurityGroups))
	for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourceApplicationSecurityGroups {
		// Shadow the loop variable to avoid aliasing
		sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
		var sourceApplicationSecurityGroup v1alpha1api20201101storage.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
		err := sourceApplicationSecurityGroupItem.AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&sourceApplicationSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "populating SourceApplicationSecurityGroups from SourceApplicationSecurityGroups, calling AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded()")
		}
		sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
	}
	destination.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList

	// SourcePortRange
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRange != nil {
		sourcePortRange := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRange
		destination.SourcePortRange = &sourcePortRange
	} else {
		destination.SourcePortRange = nil
	}

	// SourcePortRanges
	sourcePortRangeList := make([]string, len(securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRanges))
	for sourcePortRangeIndex, sourcePortRangeItem := range securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.SourcePortRanges {
		// Shadow the loop variable to avoid aliasing
		sourcePortRangeItem := sourcePortRangeItem
		sourcePortRangeList[sourcePortRangeIndex] = sourcePortRangeItem
	}
	destination.SourcePortRanges = sourcePortRangeList

	// Type
	if securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Type != nil {
		typeVar := *securityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates our ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from the provided source ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(source *v1alpha1api20201101storage.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id = &id
	} else {
		applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates the provided destination ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from our ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(destination *v1alpha1api20201101storage.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id != nil {
		id := *applicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type SecurityRuleAccess_Status string

const (
	SecurityRuleAccess_StatusAllow = SecurityRuleAccess_Status("Allow")
	SecurityRuleAccess_StatusDeny  = SecurityRuleAccess_Status("Deny")
)

//Generated from:
type SecurityRuleDirection_Status string

const (
	SecurityRuleDirection_StatusInbound  = SecurityRuleDirection_Status("Inbound")
	SecurityRuleDirection_StatusOutbound = SecurityRuleDirection_Status("Outbound")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type SecurityRulePropertiesFormatAccess string

const (
	SecurityRulePropertiesFormatAccessAllow = SecurityRulePropertiesFormatAccess("Allow")
	SecurityRulePropertiesFormatAccessDeny  = SecurityRulePropertiesFormatAccess("Deny")
)

// +kubebuilder:validation:Enum={"Inbound","Outbound"}
type SecurityRulePropertiesFormatDirection string

const (
	SecurityRulePropertiesFormatDirectionInbound  = SecurityRulePropertiesFormatDirection("Inbound")
	SecurityRulePropertiesFormatDirectionOutbound = SecurityRulePropertiesFormatDirection("Outbound")
)

// +kubebuilder:validation:Enum={"Ah","Esp","Icmp","*","Tcp","Udp"}
type SecurityRulePropertiesFormatProtocol string

const (
	SecurityRulePropertiesFormatProtocolAh   = SecurityRulePropertiesFormatProtocol("Ah")
	SecurityRulePropertiesFormatProtocolEsp  = SecurityRulePropertiesFormatProtocol("Esp")
	SecurityRulePropertiesFormatProtocolIcmp = SecurityRulePropertiesFormatProtocol("Icmp")
	SecurityRulePropertiesFormatProtocolStar = SecurityRulePropertiesFormatProtocol("*")
	SecurityRulePropertiesFormatProtocolTcp  = SecurityRulePropertiesFormatProtocol("Tcp")
	SecurityRulePropertiesFormatProtocolUdp  = SecurityRulePropertiesFormatProtocol("Udp")
)

type SecurityRulePropertiesFormatStatusProtocol string

const (
	SecurityRulePropertiesFormatStatusProtocolAh   = SecurityRulePropertiesFormatStatusProtocol("Ah")
	SecurityRulePropertiesFormatStatusProtocolEsp  = SecurityRulePropertiesFormatStatusProtocol("Esp")
	SecurityRulePropertiesFormatStatusProtocolIcmp = SecurityRulePropertiesFormatStatusProtocol("Icmp")
	SecurityRulePropertiesFormatStatusProtocolStar = SecurityRulePropertiesFormatStatusProtocol("*")
	SecurityRulePropertiesFormatStatusProtocolTcp  = SecurityRulePropertiesFormatStatusProtocol("Tcp")
	SecurityRulePropertiesFormatStatusProtocolUdp  = SecurityRulePropertiesFormatStatusProtocol("Udp")
)

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/SubResource
type SubResource struct {
	// +kubebuilder:validation:Required
	//Reference: Resource ID.
	Reference genruntime.ResourceReference `armReference:"Id" json:"reference"`
}

var _ genruntime.ARMTransformer = &SubResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (subResource *SubResource) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if subResource == nil {
		return nil, nil
	}
	var result SubResourceARM

	// Set property ‘Id’:
	referenceARMID, err := resolvedReferences.ARMIDOrErr(subResource.Reference)
	if err != nil {
		return nil, err
	}
	result.Id = referenceARMID
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subResource *SubResource) CreateEmptyARMValue() interface{} {
	return SubResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subResource *SubResource) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	_, ok := armInput.(SubResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResourceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSubResource populates our SubResource from the provided source SubResource
func (subResource *SubResource) AssignPropertiesFromSubResource(source *v1alpha1api20201101storage.SubResource) error {

	// Reference
	subResource.Reference = source.Reference.Copy()

	// No error
	return nil
}

// AssignPropertiesToSubResource populates the provided destination SubResource from our SubResource
func (subResource *SubResource) AssignPropertiesToSubResource(destination *v1alpha1api20201101storage.SubResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	destination.Reference = subResource.Reference.Copy()

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NetworkSecurityGroupsSecurityRule{}, &NetworkSecurityGroupsSecurityRuleList{})
}
