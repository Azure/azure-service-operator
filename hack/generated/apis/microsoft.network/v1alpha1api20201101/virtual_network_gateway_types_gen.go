// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/apis/microsoft.network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources=virtualnetworkgateways,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources={virtualnetworkgateways/status,virtualnetworkgateways/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworkGateways
type VirtualNetworkGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworkGateways_Spec  `json:"spec,omitempty"`
	Status            VirtualNetworkGateway_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworkGateway{}

// GetConditions returns the conditions of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) GetConditions() conditions.Conditions {
	return virtualNetworkGateway.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (virtualNetworkGateway *VirtualNetworkGateway) SetConditions(conditions conditions.Conditions) {
	virtualNetworkGateway.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-network-azure-com-v1alpha1api20201101-virtualnetworkgateway,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworkgateways.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetworkGateway{}

// Default applies defaults to the VirtualNetworkGateway resource
func (virtualNetworkGateway *VirtualNetworkGateway) Default() {
	virtualNetworkGateway.defaultImpl()
	var temp interface{} = virtualNetworkGateway
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (virtualNetworkGateway *VirtualNetworkGateway) defaultAzureName() {
	if virtualNetworkGateway.Spec.AzureName == "" {
		virtualNetworkGateway.Spec.AzureName = virtualNetworkGateway.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworkGateway resource
func (virtualNetworkGateway *VirtualNetworkGateway) defaultImpl() {
	virtualNetworkGateway.defaultAzureName()
}

var _ genruntime.KubernetesResource = &VirtualNetworkGateway{}

// AzureName returns the Azure name of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) AzureName() string {
	return virtualNetworkGateway.Spec.AzureName
}

// GetSpec returns the specification of this resource
func (virtualNetworkGateway *VirtualNetworkGateway) GetSpec() genruntime.ConvertibleSpec {
	return &virtualNetworkGateway.Spec
}

// GetStatus returns the status of this resource
func (virtualNetworkGateway *VirtualNetworkGateway) GetStatus() genruntime.ConvertibleStatus {
	return &virtualNetworkGateway.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworkGateways"
func (virtualNetworkGateway *VirtualNetworkGateway) GetType() string {
	return "Microsoft.Network/virtualNetworkGateways"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (virtualNetworkGateway *VirtualNetworkGateway) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(virtualNetworkGateway.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: virtualNetworkGateway.Namespace, Name: virtualNetworkGateway.Spec.Owner.Name}
}

// SetStatus sets the status of this resource
func (virtualNetworkGateway *VirtualNetworkGateway) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualNetworkGateway_Status); ok {
		virtualNetworkGateway.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualNetworkGateway_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	virtualNetworkGateway.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-network-azure-com-v1alpha1api20201101-virtualnetworkgateway,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworkgateways.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetworkGateway{}

// ValidateCreate validates the creation of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) ValidateCreate() error {
	validations := virtualNetworkGateway.createValidations()
	var temp interface{} = virtualNetworkGateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) ValidateDelete() error {
	validations := virtualNetworkGateway.deleteValidations()
	var temp interface{} = virtualNetworkGateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) ValidateUpdate(old runtime.Object) error {
	validations := virtualNetworkGateway.updateValidations()
	var temp interface{} = virtualNetworkGateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) createValidations() []func() error {
	return []func() error{virtualNetworkGateway.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (virtualNetworkGateway *VirtualNetworkGateway) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return virtualNetworkGateway.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (virtualNetworkGateway *VirtualNetworkGateway) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&virtualNetworkGateway.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualNetworkGateway populates our VirtualNetworkGateway from the provided source VirtualNetworkGateway
func (virtualNetworkGateway *VirtualNetworkGateway) AssignPropertiesFromVirtualNetworkGateway(source *v1alpha1api20201101storage.VirtualNetworkGateway) error {

	// Spec
	var spec VirtualNetworkGateways_Spec
	err := spec.AssignPropertiesFromVirtualNetworkGatewaysSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromVirtualNetworkGatewaysSpec()")
	}
	virtualNetworkGateway.Spec = spec

	// Status
	var status VirtualNetworkGateway_Status
	err = status.AssignPropertiesFromVirtualNetworkGatewayStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromVirtualNetworkGatewayStatus()")
	}
	virtualNetworkGateway.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGateway populates the provided destination VirtualNetworkGateway from our VirtualNetworkGateway
func (virtualNetworkGateway *VirtualNetworkGateway) AssignPropertiesToVirtualNetworkGateway(destination *v1alpha1api20201101storage.VirtualNetworkGateway) error {

	// Spec
	var spec v1alpha1api20201101storage.VirtualNetworkGateways_Spec
	err := virtualNetworkGateway.Spec.AssignPropertiesToVirtualNetworkGatewaysSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToVirtualNetworkGatewaysSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.VirtualNetworkGateway_Status
	err = virtualNetworkGateway.Status.AssignPropertiesToVirtualNetworkGatewayStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToVirtualNetworkGatewayStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (virtualNetworkGateway *VirtualNetworkGateway) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: virtualNetworkGateway.Spec.OriginalVersion(),
		Kind:    "VirtualNetworkGateway",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworkGateways
type VirtualNetworkGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworkGateway `json:"items"`
}

//Generated from:
type VirtualNetworkGateway_Status struct {
	//ActiveActive: ActiveActive flag.
	ActiveActive *bool `json:"activeActive,omitempty"`

	//BgpSettings: Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings_Status `json:"bgpSettings,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CustomRoutes: The reference to the address space resource which represents the
	//custom routes address space specified by the customer for virtual network
	//gateway and VpnClient.
	CustomRoutes *AddressSpace_Status `json:"customRoutes,omitempty"`

	//EnableBgp: Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	//EnableDnsForwarding: Whether dns forwarding is enabled or not.
	EnableDnsForwarding *bool `json:"enableDnsForwarding,omitempty"`

	//EnablePrivateIpAddress: Whether private IP needs to be enabled on this gateway
	//for connections or not.
	EnablePrivateIpAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//ExtendedLocation: The extended location of type local virtual network gateway.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//GatewayDefaultSite: The reference to the LocalNetworkGateway resource which
	//represents local network site having default routes. Assign Null value in case
	//of removing existing default site setting.
	GatewayDefaultSite *SubResource_Status `json:"gatewayDefaultSite,omitempty"`

	//GatewayType: The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewayPropertiesFormatStatusGatewayType `json:"gatewayType,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//InboundDnsForwardingEndpoint: The IP address allocated by the gateway to which
	//dns requests can be sent.
	InboundDnsForwardingEndpoint *string `json:"inboundDnsForwardingEndpoint,omitempty"`

	//IpConfigurations: IP configurations for virtual network gateway.
	IpConfigurations []VirtualNetworkGatewayIPConfiguration_Status `json:"ipConfigurations,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network gateway
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resource GUID property of the virtual network gateway resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Sku: The reference to the VirtualNetworkGatewaySku resource which represents the
	//SKU selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//VNetExtendedLocationResourceId: Customer vnet resource id. VirtualNetworkGateway
	//of type local gateway is associated with the customer vnet.
	VNetExtendedLocationResourceId *string `json:"vNetExtendedLocationResourceId,omitempty"`

	//VpnClientConfiguration: The reference to the VpnClientConfiguration resource
	//which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration_Status `json:"vpnClientConfiguration,omitempty"`

	//VpnGatewayGeneration: The generation for this VirtualNetworkGateway. Must be
	//None if gatewayType is not VPN.
	VpnGatewayGeneration *VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration `json:"vpnGatewayGeneration,omitempty"`

	//VpnType: The type of this virtual network gateway.
	VpnType *VirtualNetworkGatewayPropertiesFormatStatusVpnType `json:"vpnType,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetworkGateway_Status{}

// ConvertStatusFrom populates our VirtualNetworkGateway_Status from the provided source
func (virtualNetworkGatewayStatus *VirtualNetworkGateway_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworkGateway_Status)
	if ok {
		// Populate our instance from source
		return virtualNetworkGatewayStatus.AssignPropertiesFromVirtualNetworkGatewayStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworkGateway_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = virtualNetworkGatewayStatus.AssignPropertiesFromVirtualNetworkGatewayStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetworkGateway_Status
func (virtualNetworkGatewayStatus *VirtualNetworkGateway_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworkGateway_Status)
	if ok {
		// Populate destination from our instance
		return virtualNetworkGatewayStatus.AssignPropertiesToVirtualNetworkGatewayStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworkGateway_Status{}
	err := virtualNetworkGatewayStatus.AssignPropertiesToVirtualNetworkGatewayStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetworkGateway_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewayStatus *VirtualNetworkGateway_Status) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGateway_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewayStatus *VirtualNetworkGateway_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateway_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateway_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveActive != nil {
			activeActive := *typedInput.Properties.ActiveActive
			virtualNetworkGatewayStatus.ActiveActive = &activeActive
		}
	}

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpSettings != nil {
			var bgpSettings1 BgpSettings_Status
			err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
			if err != nil {
				return err
			}
			bgpSettings := bgpSettings1
			virtualNetworkGatewayStatus.BgpSettings = &bgpSettings
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomRoutes != nil {
			var customRoutes1 AddressSpace_Status
			err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
			if err != nil {
				return err
			}
			customRoutes := customRoutes1
			virtualNetworkGatewayStatus.CustomRoutes = &customRoutes
		}
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBgp != nil {
			enableBgp := *typedInput.Properties.EnableBgp
			virtualNetworkGatewayStatus.EnableBgp = &enableBgp
		}
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDnsForwarding != nil {
			enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
			virtualNetworkGatewayStatus.EnableDnsForwarding = &enableDnsForwarding
		}
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePrivateIpAddress != nil {
			enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
			virtualNetworkGatewayStatus.EnablePrivateIpAddress = &enablePrivateIpAddress
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		virtualNetworkGatewayStatus.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		virtualNetworkGatewayStatus.ExtendedLocation = &extendedLocation
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayDefaultSite != nil {
			var gatewayDefaultSite1 SubResource_Status
			err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
			if err != nil {
				return err
			}
			gatewayDefaultSite := gatewayDefaultSite1
			virtualNetworkGatewayStatus.GatewayDefaultSite = &gatewayDefaultSite
		}
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayType != nil {
			gatewayType := *typedInput.Properties.GatewayType
			virtualNetworkGatewayStatus.GatewayType = &gatewayType
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		virtualNetworkGatewayStatus.Id = &id
	}

	// Set property ‘InboundDnsForwardingEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InboundDnsForwardingEndpoint != nil {
			inboundDnsForwardingEndpoint := *typedInput.Properties.InboundDnsForwardingEndpoint
			virtualNetworkGatewayStatus.InboundDnsForwardingEndpoint = &inboundDnsForwardingEndpoint
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 VirtualNetworkGatewayIPConfiguration_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			virtualNetworkGatewayStatus.IpConfigurations = append(virtualNetworkGatewayStatus.IpConfigurations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		virtualNetworkGatewayStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewayStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			virtualNetworkGatewayStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			virtualNetworkGatewayStatus.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 VirtualNetworkGatewaySku_Status
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			virtualNetworkGatewayStatus.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		virtualNetworkGatewayStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			virtualNetworkGatewayStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		virtualNetworkGatewayStatus.Type = &typeVar
	}

	// Set property ‘VNetExtendedLocationResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VNetExtendedLocationResourceId != nil {
			vNetExtendedLocationResourceId := *typedInput.Properties.VNetExtendedLocationResourceId
			virtualNetworkGatewayStatus.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
		}
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnClientConfiguration != nil {
			var vpnClientConfiguration1 VpnClientConfiguration_Status
			err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
			if err != nil {
				return err
			}
			vpnClientConfiguration := vpnClientConfiguration1
			virtualNetworkGatewayStatus.VpnClientConfiguration = &vpnClientConfiguration
		}
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnGatewayGeneration != nil {
			vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
			virtualNetworkGatewayStatus.VpnGatewayGeneration = &vpnGatewayGeneration
		}
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnType != nil {
			vpnType := *typedInput.Properties.VpnType
			virtualNetworkGatewayStatus.VpnType = &vpnType
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayStatus populates our VirtualNetworkGateway_Status from the provided source VirtualNetworkGateway_Status
func (virtualNetworkGatewayStatus *VirtualNetworkGateway_Status) AssignPropertiesFromVirtualNetworkGatewayStatus(source *v1alpha1api20201101storage.VirtualNetworkGateway_Status) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		virtualNetworkGatewayStatus.ActiveActive = &activeActive
	} else {
		virtualNetworkGatewayStatus.ActiveActive = nil
	}

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings_Status
		err := bgpSetting.AssignPropertiesFromBgpSettingsStatus(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "populating BgpSettings from BgpSettings, calling AssignPropertiesFromBgpSettingsStatus()")
		}
		virtualNetworkGatewayStatus.BgpSettings = &bgpSetting
	} else {
		virtualNetworkGatewayStatus.BgpSettings = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	virtualNetworkGatewayStatus.Conditions = conditionList

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace_Status
		err := customRoute.AssignPropertiesFromAddressSpaceStatus(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "populating CustomRoutes from CustomRoutes, calling AssignPropertiesFromAddressSpaceStatus()")
		}
		virtualNetworkGatewayStatus.CustomRoutes = &customRoute
	} else {
		virtualNetworkGatewayStatus.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		virtualNetworkGatewayStatus.EnableBgp = &enableBgp
	} else {
		virtualNetworkGatewayStatus.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		virtualNetworkGatewayStatus.EnableDnsForwarding = &enableDnsForwarding
	} else {
		virtualNetworkGatewayStatus.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		virtualNetworkGatewayStatus.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		virtualNetworkGatewayStatus.EnablePrivateIpAddress = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		virtualNetworkGatewayStatus.Etag = &etag
	} else {
		virtualNetworkGatewayStatus.Etag = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocationStatus()")
		}
		virtualNetworkGatewayStatus.ExtendedLocation = &extendedLocation
	} else {
		virtualNetworkGatewayStatus.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource_Status
		err := gatewayDefaultSite.AssignPropertiesFromSubResourceStatus(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "populating GatewayDefaultSite from GatewayDefaultSite, calling AssignPropertiesFromSubResourceStatus()")
		}
		virtualNetworkGatewayStatus.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		virtualNetworkGatewayStatus.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewayPropertiesFormatStatusGatewayType(*source.GatewayType)
		virtualNetworkGatewayStatus.GatewayType = &gatewayType
	} else {
		virtualNetworkGatewayStatus.GatewayType = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		virtualNetworkGatewayStatus.Id = &id
	} else {
		virtualNetworkGatewayStatus.Id = nil
	}

	// InboundDnsForwardingEndpoint
	if source.InboundDnsForwardingEndpoint != nil {
		inboundDnsForwardingEndpoint := *source.InboundDnsForwardingEndpoint
		virtualNetworkGatewayStatus.InboundDnsForwardingEndpoint = &inboundDnsForwardingEndpoint
	} else {
		virtualNetworkGatewayStatus.InboundDnsForwardingEndpoint = nil
	}

	// IpConfigurations
	ipConfigurationList := make([]VirtualNetworkGatewayIPConfiguration_Status, len(source.IpConfigurations))
	for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
		// Shadow the loop variable to avoid aliasing
		ipConfigurationItem := ipConfigurationItem
		var ipConfiguration VirtualNetworkGatewayIPConfiguration_Status
		err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus(&ipConfigurationItem)
		if err != nil {
			return errors.Wrap(err, "populating IpConfigurations from IpConfigurations, calling AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus()")
		}
		ipConfigurationList[ipConfigurationIndex] = ipConfiguration
	}
	virtualNetworkGatewayStatus.IpConfigurations = ipConfigurationList

	// Location
	if source.Location != nil {
		location := *source.Location
		virtualNetworkGatewayStatus.Location = &location
	} else {
		virtualNetworkGatewayStatus.Location = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualNetworkGatewayStatus.Name = &name
	} else {
		virtualNetworkGatewayStatus.Name = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		virtualNetworkGatewayStatus.ProvisioningState = &provisioningState
	} else {
		virtualNetworkGatewayStatus.ProvisioningState = nil
	}

	// ResourceGuid
	if source.ResourceGuid != nil {
		resourceGuid := *source.ResourceGuid
		virtualNetworkGatewayStatus.ResourceGuid = &resourceGuid
	} else {
		virtualNetworkGatewayStatus.ResourceGuid = nil
	}

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku_Status
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromVirtualNetworkGatewaySkuStatus()")
		}
		virtualNetworkGatewayStatus.Sku = &sku
	} else {
		virtualNetworkGatewayStatus.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	virtualNetworkGatewayStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		virtualNetworkGatewayStatus.Type = &typeVar
	} else {
		virtualNetworkGatewayStatus.Type = nil
	}

	// VNetExtendedLocationResourceId
	if source.VNetExtendedLocationResourceId != nil {
		vNetExtendedLocationResourceId := *source.VNetExtendedLocationResourceId
		virtualNetworkGatewayStatus.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
	} else {
		virtualNetworkGatewayStatus.VNetExtendedLocationResourceId = nil
	}

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VpnClientConfiguration_Status
		err := vpnClientConfiguration.AssignPropertiesFromVpnClientConfigurationStatus(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientConfiguration from VpnClientConfiguration, calling AssignPropertiesFromVpnClientConfigurationStatus()")
		}
		virtualNetworkGatewayStatus.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		virtualNetworkGatewayStatus.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration(*source.VpnGatewayGeneration)
		virtualNetworkGatewayStatus.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		virtualNetworkGatewayStatus.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewayPropertiesFormatStatusVpnType(*source.VpnType)
		virtualNetworkGatewayStatus.VpnType = &vpnType
	} else {
		virtualNetworkGatewayStatus.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayStatus populates the provided destination VirtualNetworkGateway_Status from our VirtualNetworkGateway_Status
func (virtualNetworkGatewayStatus *VirtualNetworkGateway_Status) AssignPropertiesToVirtualNetworkGatewayStatus(destination *v1alpha1api20201101storage.VirtualNetworkGateway_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if virtualNetworkGatewayStatus.ActiveActive != nil {
		activeActive := *virtualNetworkGatewayStatus.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// BgpSettings
	if virtualNetworkGatewayStatus.BgpSettings != nil {
		var bgpSetting v1alpha1api20201101storage.BgpSettings_Status
		err := (*virtualNetworkGatewayStatus.BgpSettings).AssignPropertiesToBgpSettingsStatus(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "populating BgpSettings from BgpSettings, calling AssignPropertiesToBgpSettingsStatus()")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(virtualNetworkGatewayStatus.Conditions))
	for conditionIndex, conditionItem := range virtualNetworkGatewayStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// CustomRoutes
	if virtualNetworkGatewayStatus.CustomRoutes != nil {
		var customRoute v1alpha1api20201101storage.AddressSpace_Status
		err := (*virtualNetworkGatewayStatus.CustomRoutes).AssignPropertiesToAddressSpaceStatus(&customRoute)
		if err != nil {
			return errors.Wrap(err, "populating CustomRoutes from CustomRoutes, calling AssignPropertiesToAddressSpaceStatus()")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if virtualNetworkGatewayStatus.EnableBgp != nil {
		enableBgp := *virtualNetworkGatewayStatus.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if virtualNetworkGatewayStatus.EnableDnsForwarding != nil {
		enableDnsForwarding := *virtualNetworkGatewayStatus.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if virtualNetworkGatewayStatus.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *virtualNetworkGatewayStatus.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// Etag
	if virtualNetworkGatewayStatus.Etag != nil {
		etag := *virtualNetworkGatewayStatus.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// ExtendedLocation
	if virtualNetworkGatewayStatus.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := (*virtualNetworkGatewayStatus.ExtendedLocation).AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocationStatus()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if virtualNetworkGatewayStatus.GatewayDefaultSite != nil {
		var gatewayDefaultSite v1alpha1api20201101storage.SubResource_Status
		err := (*virtualNetworkGatewayStatus.GatewayDefaultSite).AssignPropertiesToSubResourceStatus(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "populating GatewayDefaultSite from GatewayDefaultSite, calling AssignPropertiesToSubResourceStatus()")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if virtualNetworkGatewayStatus.GatewayType != nil {
		gatewayType := string(*virtualNetworkGatewayStatus.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// Id
	if virtualNetworkGatewayStatus.Id != nil {
		id := *virtualNetworkGatewayStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// InboundDnsForwardingEndpoint
	if virtualNetworkGatewayStatus.InboundDnsForwardingEndpoint != nil {
		inboundDnsForwardingEndpoint := *virtualNetworkGatewayStatus.InboundDnsForwardingEndpoint
		destination.InboundDnsForwardingEndpoint = &inboundDnsForwardingEndpoint
	} else {
		destination.InboundDnsForwardingEndpoint = nil
	}

	// IpConfigurations
	ipConfigurationList := make([]v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status, len(virtualNetworkGatewayStatus.IpConfigurations))
	for ipConfigurationIndex, ipConfigurationItem := range virtualNetworkGatewayStatus.IpConfigurations {
		// Shadow the loop variable to avoid aliasing
		ipConfigurationItem := ipConfigurationItem
		var ipConfiguration v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status
		err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus(&ipConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating IpConfigurations from IpConfigurations, calling AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus()")
		}
		ipConfigurationList[ipConfigurationIndex] = ipConfiguration
	}
	destination.IpConfigurations = ipConfigurationList

	// Location
	if virtualNetworkGatewayStatus.Location != nil {
		location := *virtualNetworkGatewayStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Name
	if virtualNetworkGatewayStatus.Name != nil {
		name := *virtualNetworkGatewayStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// ProvisioningState
	if virtualNetworkGatewayStatus.ProvisioningState != nil {
		provisioningState := string(*virtualNetworkGatewayStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	if virtualNetworkGatewayStatus.ResourceGuid != nil {
		resourceGuid := *virtualNetworkGatewayStatus.ResourceGuid
		destination.ResourceGuid = &resourceGuid
	} else {
		destination.ResourceGuid = nil
	}

	// Sku
	if virtualNetworkGatewayStatus.Sku != nil {
		var sku v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status
		err := (*virtualNetworkGatewayStatus.Sku).AssignPropertiesToVirtualNetworkGatewaySkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToVirtualNetworkGatewaySkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range virtualNetworkGatewayStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if virtualNetworkGatewayStatus.Type != nil {
		typeVar := *virtualNetworkGatewayStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// VNetExtendedLocationResourceId
	if virtualNetworkGatewayStatus.VNetExtendedLocationResourceId != nil {
		vNetExtendedLocationResourceId := *virtualNetworkGatewayStatus.VNetExtendedLocationResourceId
		destination.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
	} else {
		destination.VNetExtendedLocationResourceId = nil
	}

	// VpnClientConfiguration
	if virtualNetworkGatewayStatus.VpnClientConfiguration != nil {
		var vpnClientConfiguration v1alpha1api20201101storage.VpnClientConfiguration_Status
		err := (*virtualNetworkGatewayStatus.VpnClientConfiguration).AssignPropertiesToVpnClientConfigurationStatus(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientConfiguration from VpnClientConfiguration, calling AssignPropertiesToVpnClientConfigurationStatus()")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if virtualNetworkGatewayStatus.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*virtualNetworkGatewayStatus.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if virtualNetworkGatewayStatus.VpnType != nil {
		vpnType := string(*virtualNetworkGatewayStatus.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworkGateways_Spec struct {
	//ActiveActive: ActiveActive flag.
	ActiveActive *bool `json:"activeActive,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BgpSettings: Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	//CustomRoutes: The reference to the address space resource which represents the
	//custom routes address space specified by the customer for virtual network
	//gateway and VpnClient.
	CustomRoutes *AddressSpace `json:"customRoutes,omitempty"`

	//EnableBgp: Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	//EnableDnsForwarding: Whether dns forwarding is enabled or not.
	EnableDnsForwarding *bool `json:"enableDnsForwarding,omitempty"`

	//EnablePrivateIpAddress: Whether private IP needs to be enabled on this gateway
	//for connections or not.
	EnablePrivateIpAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	//GatewayDefaultSite: The reference to the LocalNetworkGateway resource which
	//represents local network site having default routes. Assign Null value in case
	//of removing existing default site setting.
	GatewayDefaultSite *SubResource `json:"gatewayDefaultSite,omitempty"`

	//GatewayType: The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewaysSpecPropertiesGatewayType `json:"gatewayType,omitempty"`

	//IpConfigurations: IP configurations for virtual network gateway.
	IpConfigurations []VirtualNetworkGateways_Spec_Properties_IpConfigurations `json:"ipConfigurations,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Sku: The reference to the VirtualNetworkGatewaySku resource which represents the
	//SKU selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku `json:"sku,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//VNetExtendedLocationResourceReference: MAS FIJI customer vnet resource id.
	//VirtualNetworkGateway of type local gateway is associated with the customer vnet.
	VNetExtendedLocationResourceReference *genruntime.ResourceReference `armReference:"VNetExtendedLocationResourceId" json:"vNetExtendedLocationResourceReference,omitempty"`

	//VirtualNetworkExtendedLocation: The extended location of type local virtual
	//network gateway.
	VirtualNetworkExtendedLocation *ExtendedLocation `json:"virtualNetworkExtendedLocation,omitempty"`

	//VpnClientConfiguration: The reference to the VpnClientConfiguration resource
	//which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`

	//VpnGatewayGeneration: The generation for this VirtualNetworkGateway. Must be
	//None if gatewayType is not VPN.
	VpnGatewayGeneration *VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration `json:"vpnGatewayGeneration,omitempty"`

	//VpnType: The type of this virtual network gateway.
	VpnType *VirtualNetworkGatewaysSpecPropertiesVpnType `json:"vpnType,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkGatewaysSpec == nil {
		return nil, nil
	}
	var result VirtualNetworkGateways_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = VirtualNetworkGatewaysSpecAPIVersion20201101

	// Set property ‘Location’:
	result.Location = virtualNetworkGatewaysSpec.Location

	// Set property ‘Name’:
	result.Name = name

	// Set property ‘Properties’:
	if virtualNetworkGatewaysSpec.ActiveActive != nil {
		activeActive := *virtualNetworkGatewaysSpec.ActiveActive
		result.Properties.ActiveActive = &activeActive
	}
	if virtualNetworkGatewaysSpec.BgpSettings != nil {
		bgpSettingsARM, err := (*virtualNetworkGatewaysSpec.BgpSettings).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		bgpSettings := bgpSettingsARM.(BgpSettingsARM)
		result.Properties.BgpSettings = &bgpSettings
	}
	if virtualNetworkGatewaysSpec.CustomRoutes != nil {
		customRoutesARM, err := (*virtualNetworkGatewaysSpec.CustomRoutes).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		customRoutes := customRoutesARM.(AddressSpaceARM)
		result.Properties.CustomRoutes = &customRoutes
	}
	if virtualNetworkGatewaysSpec.EnableBgp != nil {
		enableBgp := *virtualNetworkGatewaysSpec.EnableBgp
		result.Properties.EnableBgp = &enableBgp
	}
	if virtualNetworkGatewaysSpec.EnableDnsForwarding != nil {
		enableDnsForwarding := *virtualNetworkGatewaysSpec.EnableDnsForwarding
		result.Properties.EnableDnsForwarding = &enableDnsForwarding
	}
	if virtualNetworkGatewaysSpec.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *virtualNetworkGatewaysSpec.EnablePrivateIpAddress
		result.Properties.EnablePrivateIpAddress = &enablePrivateIpAddress
	}
	if virtualNetworkGatewaysSpec.GatewayDefaultSite != nil {
		gatewayDefaultSiteARM, err := (*virtualNetworkGatewaysSpec.GatewayDefaultSite).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		gatewayDefaultSite := gatewayDefaultSiteARM.(SubResourceARM)
		result.Properties.GatewayDefaultSite = &gatewayDefaultSite
	}
	if virtualNetworkGatewaysSpec.GatewayType != nil {
		gatewayType := *virtualNetworkGatewaysSpec.GatewayType
		result.Properties.GatewayType = &gatewayType
	}
	for _, item := range virtualNetworkGatewaysSpec.IpConfigurations {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.Properties.IpConfigurations = append(result.Properties.IpConfigurations, itemARM.(VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM))
	}
	if virtualNetworkGatewaysSpec.Sku != nil {
		skuARM, err := (*virtualNetworkGatewaysSpec.Sku).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(VirtualNetworkGatewaySkuARM)
		result.Properties.Sku = &sku
	}
	if virtualNetworkGatewaysSpec.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceIdARMID, err := resolvedReferences.ARMIDOrErr(*virtualNetworkGatewaysSpec.VNetExtendedLocationResourceReference)
		if err != nil {
			return nil, err
		}
		vNetExtendedLocationResourceId := vNetExtendedLocationResourceIdARMID
		result.Properties.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
	}
	if virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation != nil {
		virtualNetworkExtendedLocationARM, err := (*virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		virtualNetworkExtendedLocation := virtualNetworkExtendedLocationARM.(ExtendedLocationARM)
		result.Properties.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	}
	if virtualNetworkGatewaysSpec.VpnClientConfiguration != nil {
		vpnClientConfigurationARM, err := (*virtualNetworkGatewaysSpec.VpnClientConfiguration).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		vpnClientConfiguration := vpnClientConfigurationARM.(VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM)
		result.Properties.VpnClientConfiguration = &vpnClientConfiguration
	}
	if virtualNetworkGatewaysSpec.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := *virtualNetworkGatewaysSpec.VpnGatewayGeneration
		result.Properties.VpnGatewayGeneration = &vpnGatewayGeneration
	}
	if virtualNetworkGatewaysSpec.VpnType != nil {
		vpnType := *virtualNetworkGatewaysSpec.VpnType
		result.Properties.VpnType = &vpnType
	}

	// Set property ‘Tags’:
	if virtualNetworkGatewaysSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range virtualNetworkGatewaysSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = VirtualNetworkGatewaysSpecTypeMicrosoftNetworkVirtualNetworkGateways
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGateways_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_SpecARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties.ActiveActive != nil {
		activeActive := *typedInput.Properties.ActiveActive
		virtualNetworkGatewaysSpec.ActiveActive = &activeActive
	}

	// Set property ‘AzureName’:
	virtualNetworkGatewaysSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties.BgpSettings != nil {
		var bgpSettings1 BgpSettings
		err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
		if err != nil {
			return err
		}
		bgpSettings := bgpSettings1
		virtualNetworkGatewaysSpec.BgpSettings = &bgpSettings
	}

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties.CustomRoutes != nil {
		var customRoutes1 AddressSpace
		err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
		if err != nil {
			return err
		}
		customRoutes := customRoutes1
		virtualNetworkGatewaysSpec.CustomRoutes = &customRoutes
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties.EnableBgp != nil {
		enableBgp := *typedInput.Properties.EnableBgp
		virtualNetworkGatewaysSpec.EnableBgp = &enableBgp
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties.EnableDnsForwarding != nil {
		enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
		virtualNetworkGatewaysSpec.EnableDnsForwarding = &enableDnsForwarding
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
		virtualNetworkGatewaysSpec.EnablePrivateIpAddress = &enablePrivateIpAddress
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties.GatewayDefaultSite != nil {
		var gatewayDefaultSite1 SubResource
		err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
		if err != nil {
			return err
		}
		gatewayDefaultSite := gatewayDefaultSite1
		virtualNetworkGatewaysSpec.GatewayDefaultSite = &gatewayDefaultSite
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties.GatewayType != nil {
		gatewayType := *typedInput.Properties.GatewayType
		virtualNetworkGatewaysSpec.GatewayType = &gatewayType
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	for _, item := range typedInput.Properties.IpConfigurations {
		var item1 VirtualNetworkGateways_Spec_Properties_IpConfigurations
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworkGatewaysSpec.IpConfigurations = append(virtualNetworkGatewaysSpec.IpConfigurations, item1)
	}

	// Set property ‘Location’:
	virtualNetworkGatewaysSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	virtualNetworkGatewaysSpec.Owner = owner

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties.Sku != nil {
		var sku1 VirtualNetworkGatewaySku
		err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		virtualNetworkGatewaysSpec.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		virtualNetworkGatewaysSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			virtualNetworkGatewaysSpec.Tags[key] = value
		}
	}

	// no assignment for property ‘VNetExtendedLocationResourceReference’

	// Set property ‘VirtualNetworkExtendedLocation’:
	// copying flattened property:
	if typedInput.Properties.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation1 ExtendedLocation
		err := virtualNetworkExtendedLocation1.PopulateFromARM(owner, *typedInput.Properties.VirtualNetworkExtendedLocation)
		if err != nil {
			return err
		}
		virtualNetworkExtendedLocation := virtualNetworkExtendedLocation1
		virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties.VpnClientConfiguration != nil {
		var vpnClientConfiguration1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
		if err != nil {
			return err
		}
		vpnClientConfiguration := vpnClientConfiguration1
		virtualNetworkGatewaysSpec.VpnClientConfiguration = &vpnClientConfiguration
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
		virtualNetworkGatewaysSpec.VpnGatewayGeneration = &vpnGatewayGeneration
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties.VpnType != nil {
		vpnType := *typedInput.Properties.VpnType
		virtualNetworkGatewaysSpec.VpnType = &vpnType
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworkGateways_Spec{}

// ConvertSpecFrom populates our VirtualNetworkGateways_Spec from the provided source
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworkGateways_Spec)
	if ok {
		// Populate our instance from source
		return virtualNetworkGatewaysSpec.AssignPropertiesFromVirtualNetworkGatewaysSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworkGateways_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = virtualNetworkGatewaysSpec.AssignPropertiesFromVirtualNetworkGatewaysSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworkGateways_Spec
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworkGateways_Spec)
	if ok {
		// Populate destination from our instance
		return virtualNetworkGatewaysSpec.AssignPropertiesToVirtualNetworkGatewaysSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworkGateways_Spec{}
	err := virtualNetworkGatewaysSpec.AssignPropertiesToVirtualNetworkGatewaysSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpec populates our VirtualNetworkGateways_Spec from the provided source VirtualNetworkGateways_Spec
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) AssignPropertiesFromVirtualNetworkGatewaysSpec(source *v1alpha1api20201101storage.VirtualNetworkGateways_Spec) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		virtualNetworkGatewaysSpec.ActiveActive = &activeActive
	} else {
		virtualNetworkGatewaysSpec.ActiveActive = nil
	}

	// AzureName
	virtualNetworkGatewaysSpec.AzureName = source.AzureName

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings
		err := bgpSetting.AssignPropertiesFromBgpSettings(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "populating BgpSettings from BgpSettings, calling AssignPropertiesFromBgpSettings()")
		}
		virtualNetworkGatewaysSpec.BgpSettings = &bgpSetting
	} else {
		virtualNetworkGatewaysSpec.BgpSettings = nil
	}

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace
		err := customRoute.AssignPropertiesFromAddressSpace(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "populating CustomRoutes from CustomRoutes, calling AssignPropertiesFromAddressSpace()")
		}
		virtualNetworkGatewaysSpec.CustomRoutes = &customRoute
	} else {
		virtualNetworkGatewaysSpec.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		virtualNetworkGatewaysSpec.EnableBgp = &enableBgp
	} else {
		virtualNetworkGatewaysSpec.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		virtualNetworkGatewaysSpec.EnableDnsForwarding = &enableDnsForwarding
	} else {
		virtualNetworkGatewaysSpec.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		virtualNetworkGatewaysSpec.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		virtualNetworkGatewaysSpec.EnablePrivateIpAddress = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource
		err := gatewayDefaultSite.AssignPropertiesFromSubResource(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "populating GatewayDefaultSite from GatewayDefaultSite, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworkGatewaysSpec.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		virtualNetworkGatewaysSpec.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewaysSpecPropertiesGatewayType(*source.GatewayType)
		virtualNetworkGatewaysSpec.GatewayType = &gatewayType
	} else {
		virtualNetworkGatewaysSpec.GatewayType = nil
	}

	// IpConfigurations
	ipConfigurationList := make([]VirtualNetworkGateways_Spec_Properties_IpConfigurations, len(source.IpConfigurations))
	for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
		// Shadow the loop variable to avoid aliasing
		ipConfigurationItem := ipConfigurationItem
		var ipConfiguration VirtualNetworkGateways_Spec_Properties_IpConfigurations
		err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations(&ipConfigurationItem)
		if err != nil {
			return errors.Wrap(err, "populating IpConfigurations from IpConfigurations, calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations()")
		}
		ipConfigurationList[ipConfigurationIndex] = ipConfiguration
	}
	virtualNetworkGatewaysSpec.IpConfigurations = ipConfigurationList

	// Location
	if source.Location != nil {
		virtualNetworkGatewaysSpec.Location = *source.Location
	} else {
		virtualNetworkGatewaysSpec.Location = ""
	}

	// Owner
	virtualNetworkGatewaysSpec.Owner = source.Owner.Copy()

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromVirtualNetworkGatewaySku()")
		}
		virtualNetworkGatewaysSpec.Sku = &sku
	} else {
		virtualNetworkGatewaysSpec.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	virtualNetworkGatewaysSpec.Tags = tagMap

	// VNetExtendedLocationResourceReference
	if source.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := source.VNetExtendedLocationResourceReference.Copy()
		virtualNetworkGatewaysSpec.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		virtualNetworkGatewaysSpec.VNetExtendedLocationResourceReference = nil
	}

	// VirtualNetworkExtendedLocation
	if source.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation ExtendedLocation
		err := virtualNetworkExtendedLocation.AssignPropertiesFromExtendedLocation(source.VirtualNetworkExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkExtendedLocation from VirtualNetworkExtendedLocation, calling AssignPropertiesFromExtendedLocation()")
		}
		virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	} else {
		virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation = nil
	}

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := vpnClientConfiguration.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientConfiguration from VpnClientConfiguration, calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration()")
		}
		virtualNetworkGatewaysSpec.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		virtualNetworkGatewaysSpec.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration(*source.VpnGatewayGeneration)
		virtualNetworkGatewaysSpec.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		virtualNetworkGatewaysSpec.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewaysSpecPropertiesVpnType(*source.VpnType)
		virtualNetworkGatewaysSpec.VpnType = &vpnType
	} else {
		virtualNetworkGatewaysSpec.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpec populates the provided destination VirtualNetworkGateways_Spec from our VirtualNetworkGateways_Spec
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) AssignPropertiesToVirtualNetworkGatewaysSpec(destination *v1alpha1api20201101storage.VirtualNetworkGateways_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if virtualNetworkGatewaysSpec.ActiveActive != nil {
		activeActive := *virtualNetworkGatewaysSpec.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// AzureName
	destination.AzureName = virtualNetworkGatewaysSpec.AzureName

	// BgpSettings
	if virtualNetworkGatewaysSpec.BgpSettings != nil {
		var bgpSetting v1alpha1api20201101storage.BgpSettings
		err := (*virtualNetworkGatewaysSpec.BgpSettings).AssignPropertiesToBgpSettings(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "populating BgpSettings from BgpSettings, calling AssignPropertiesToBgpSettings()")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// CustomRoutes
	if virtualNetworkGatewaysSpec.CustomRoutes != nil {
		var customRoute v1alpha1api20201101storage.AddressSpace
		err := (*virtualNetworkGatewaysSpec.CustomRoutes).AssignPropertiesToAddressSpace(&customRoute)
		if err != nil {
			return errors.Wrap(err, "populating CustomRoutes from CustomRoutes, calling AssignPropertiesToAddressSpace()")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if virtualNetworkGatewaysSpec.EnableBgp != nil {
		enableBgp := *virtualNetworkGatewaysSpec.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if virtualNetworkGatewaysSpec.EnableDnsForwarding != nil {
		enableDnsForwarding := *virtualNetworkGatewaysSpec.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if virtualNetworkGatewaysSpec.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *virtualNetworkGatewaysSpec.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// GatewayDefaultSite
	if virtualNetworkGatewaysSpec.GatewayDefaultSite != nil {
		var gatewayDefaultSite v1alpha1api20201101storage.SubResource
		err := (*virtualNetworkGatewaysSpec.GatewayDefaultSite).AssignPropertiesToSubResource(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "populating GatewayDefaultSite from GatewayDefaultSite, calling AssignPropertiesToSubResource()")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if virtualNetworkGatewaysSpec.GatewayType != nil {
		gatewayType := string(*virtualNetworkGatewaysSpec.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// IpConfigurations
	ipConfigurationList := make([]v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_IpConfigurations, len(virtualNetworkGatewaysSpec.IpConfigurations))
	for ipConfigurationIndex, ipConfigurationItem := range virtualNetworkGatewaysSpec.IpConfigurations {
		// Shadow the loop variable to avoid aliasing
		ipConfigurationItem := ipConfigurationItem
		var ipConfiguration v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_IpConfigurations
		err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations(&ipConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating IpConfigurations from IpConfigurations, calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations()")
		}
		ipConfigurationList[ipConfigurationIndex] = ipConfiguration
	}
	destination.IpConfigurations = ipConfigurationList

	// Location
	location := virtualNetworkGatewaysSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = virtualNetworkGatewaysSpec.OriginalVersion()

	// Owner
	destination.Owner = virtualNetworkGatewaysSpec.Owner.Copy()

	// Sku
	if virtualNetworkGatewaysSpec.Sku != nil {
		var sku v1alpha1api20201101storage.VirtualNetworkGatewaySku
		err := (*virtualNetworkGatewaysSpec.Sku).AssignPropertiesToVirtualNetworkGatewaySku(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToVirtualNetworkGatewaySku()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range virtualNetworkGatewaysSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// VNetExtendedLocationResourceReference
	if virtualNetworkGatewaysSpec.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := virtualNetworkGatewaysSpec.VNetExtendedLocationResourceReference.Copy()
		destination.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		destination.VNetExtendedLocationResourceReference = nil
	}

	// VirtualNetworkExtendedLocation
	if virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation v1alpha1api20201101storage.ExtendedLocation
		err := (*virtualNetworkGatewaysSpec.VirtualNetworkExtendedLocation).AssignPropertiesToExtendedLocation(&virtualNetworkExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkExtendedLocation from VirtualNetworkExtendedLocation, calling AssignPropertiesToExtendedLocation()")
		}
		destination.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	} else {
		destination.VirtualNetworkExtendedLocation = nil
	}

	// VpnClientConfiguration
	if virtualNetworkGatewaysSpec.VpnClientConfiguration != nil {
		var vpnClientConfiguration v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := (*virtualNetworkGatewaysSpec.VpnClientConfiguration).AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientConfiguration from VpnClientConfiguration, calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration()")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if virtualNetworkGatewaysSpec.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*virtualNetworkGatewaysSpec.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if virtualNetworkGatewaysSpec.VpnType != nil {
		vpnType := string(*virtualNetworkGatewaysSpec.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (virtualNetworkGatewaysSpec *VirtualNetworkGateways_Spec) SetAzureName(azureName string) {
	virtualNetworkGatewaysSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/BgpSettings
type BgpSettings struct {
	//Asn: The BGP speaker's ASN.
	Asn *uint32 `json:"asn,omitempty"`

	//BgpPeeringAddress: The BGP peering address and BGP identifier of this BGP
	//speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	//BgpPeeringAddresses: BGP peering address with IP configuration ID for virtual
	//network gateway.
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress `json:"bgpPeeringAddresses,omitempty"`

	//PeerWeight: The weight added to routes learned from this BGP speaker.
	PeerWeight *int `json:"peerWeight,omitempty"`
}

var _ genruntime.ARMTransformer = &BgpSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (bgpSettings *BgpSettings) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if bgpSettings == nil {
		return nil, nil
	}
	var result BgpSettingsARM

	// Set property ‘Asn’:
	if bgpSettings.Asn != nil {
		asn := *bgpSettings.Asn
		result.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if bgpSettings.BgpPeeringAddress != nil {
		bgpPeeringAddress := *bgpSettings.BgpPeeringAddress
		result.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range bgpSettings.BgpPeeringAddresses {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.BgpPeeringAddresses = append(result.BgpPeeringAddresses, itemARM.(IPConfigurationBgpPeeringAddressARM))
	}

	// Set property ‘PeerWeight’:
	if bgpSettings.PeerWeight != nil {
		peerWeight := *bgpSettings.PeerWeight
		result.PeerWeight = &peerWeight
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (bgpSettings *BgpSettings) CreateEmptyARMValue() interface{} {
	return BgpSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (bgpSettings *BgpSettings) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettingsARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		bgpSettings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		bgpSettings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		bgpSettings.BgpPeeringAddresses = append(bgpSettings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		bgpSettings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettings populates our BgpSettings from the provided source BgpSettings
func (bgpSettings *BgpSettings) AssignPropertiesFromBgpSettings(source *v1alpha1api20201101storage.BgpSettings) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		bgpSettings.Asn = &asn
	} else {
		bgpSettings.Asn = nil
	}

	// BgpPeeringAddress
	if source.BgpPeeringAddress != nil {
		bgpPeeringAddress := *source.BgpPeeringAddress
		bgpSettings.BgpPeeringAddress = &bgpPeeringAddress
	} else {
		bgpSettings.BgpPeeringAddress = nil
	}

	// BgpPeeringAddresses
	bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress, len(source.BgpPeeringAddresses))
	for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
		// Shadow the loop variable to avoid aliasing
		bgpPeeringAddressItem := bgpPeeringAddressItem
		var bgpPeeringAddress IPConfigurationBgpPeeringAddress
		err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddress(&bgpPeeringAddressItem)
		if err != nil {
			return errors.Wrap(err, "populating BgpPeeringAddresses from BgpPeeringAddresses, calling AssignPropertiesFromIPConfigurationBgpPeeringAddress()")
		}
		bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
	}
	bgpSettings.BgpPeeringAddresses = bgpPeeringAddressList

	// PeerWeight
	if source.PeerWeight != nil {
		peerWeight := *source.PeerWeight
		bgpSettings.PeerWeight = &peerWeight
	} else {
		bgpSettings.PeerWeight = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBgpSettings populates the provided destination BgpSettings from our BgpSettings
func (bgpSettings *BgpSettings) AssignPropertiesToBgpSettings(destination *v1alpha1api20201101storage.BgpSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if bgpSettings.Asn != nil {
		asn := *bgpSettings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	if bgpSettings.BgpPeeringAddress != nil {
		bgpPeeringAddress := *bgpSettings.BgpPeeringAddress
		destination.BgpPeeringAddress = &bgpPeeringAddress
	} else {
		destination.BgpPeeringAddress = nil
	}

	// BgpPeeringAddresses
	bgpPeeringAddressList := make([]v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress, len(bgpSettings.BgpPeeringAddresses))
	for bgpPeeringAddressIndex, bgpPeeringAddressItem := range bgpSettings.BgpPeeringAddresses {
		// Shadow the loop variable to avoid aliasing
		bgpPeeringAddressItem := bgpPeeringAddressItem
		var bgpPeeringAddress v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress
		err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddress(&bgpPeeringAddress)
		if err != nil {
			return errors.Wrap(err, "populating BgpPeeringAddresses from BgpPeeringAddresses, calling AssignPropertiesToIPConfigurationBgpPeeringAddress()")
		}
		bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
	}
	destination.BgpPeeringAddresses = bgpPeeringAddressList

	// PeerWeight
	if bgpSettings.PeerWeight != nil {
		peerWeight := *bgpSettings.PeerWeight
		destination.PeerWeight = &peerWeight
	} else {
		destination.PeerWeight = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type BgpSettings_Status struct {
	//Asn: The BGP speaker's ASN.
	Asn *uint32 `json:"asn,omitempty"`

	//BgpPeeringAddress: The BGP peering address and BGP identifier of this BGP
	//speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	//BgpPeeringAddresses: BGP peering address with IP configuration ID for virtual
	//network gateway.
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress_Status `json:"bgpPeeringAddresses,omitempty"`

	//PeerWeight: The weight added to routes learned from this BGP speaker.
	PeerWeight *int `json:"peerWeight,omitempty"`
}

var _ genruntime.FromARMConverter = &BgpSettings_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (bgpSettingsStatus *BgpSettings_Status) CreateEmptyARMValue() interface{} {
	return BgpSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (bgpSettingsStatus *BgpSettings_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		bgpSettingsStatus.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		bgpSettingsStatus.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		bgpSettingsStatus.BgpPeeringAddresses = append(bgpSettingsStatus.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		bgpSettingsStatus.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettingsStatus populates our BgpSettings_Status from the provided source BgpSettings_Status
func (bgpSettingsStatus *BgpSettings_Status) AssignPropertiesFromBgpSettingsStatus(source *v1alpha1api20201101storage.BgpSettings_Status) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		bgpSettingsStatus.Asn = &asn
	} else {
		bgpSettingsStatus.Asn = nil
	}

	// BgpPeeringAddress
	if source.BgpPeeringAddress != nil {
		bgpPeeringAddress := *source.BgpPeeringAddress
		bgpSettingsStatus.BgpPeeringAddress = &bgpPeeringAddress
	} else {
		bgpSettingsStatus.BgpPeeringAddress = nil
	}

	// BgpPeeringAddresses
	bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress_Status, len(source.BgpPeeringAddresses))
	for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
		// Shadow the loop variable to avoid aliasing
		bgpPeeringAddressItem := bgpPeeringAddressItem
		var bgpPeeringAddress IPConfigurationBgpPeeringAddress_Status
		err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus(&bgpPeeringAddressItem)
		if err != nil {
			return errors.Wrap(err, "populating BgpPeeringAddresses from BgpPeeringAddresses, calling AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus()")
		}
		bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
	}
	bgpSettingsStatus.BgpPeeringAddresses = bgpPeeringAddressList

	// PeerWeight
	if source.PeerWeight != nil {
		peerWeight := *source.PeerWeight
		bgpSettingsStatus.PeerWeight = &peerWeight
	} else {
		bgpSettingsStatus.PeerWeight = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBgpSettingsStatus populates the provided destination BgpSettings_Status from our BgpSettings_Status
func (bgpSettingsStatus *BgpSettings_Status) AssignPropertiesToBgpSettingsStatus(destination *v1alpha1api20201101storage.BgpSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if bgpSettingsStatus.Asn != nil {
		asn := *bgpSettingsStatus.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	if bgpSettingsStatus.BgpPeeringAddress != nil {
		bgpPeeringAddress := *bgpSettingsStatus.BgpPeeringAddress
		destination.BgpPeeringAddress = &bgpPeeringAddress
	} else {
		destination.BgpPeeringAddress = nil
	}

	// BgpPeeringAddresses
	bgpPeeringAddressList := make([]v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status, len(bgpSettingsStatus.BgpPeeringAddresses))
	for bgpPeeringAddressIndex, bgpPeeringAddressItem := range bgpSettingsStatus.BgpPeeringAddresses {
		// Shadow the loop variable to avoid aliasing
		bgpPeeringAddressItem := bgpPeeringAddressItem
		var bgpPeeringAddress v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status
		err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddressStatus(&bgpPeeringAddress)
		if err != nil {
			return errors.Wrap(err, "populating BgpPeeringAddresses from BgpPeeringAddresses, calling AssignPropertiesToIPConfigurationBgpPeeringAddressStatus()")
		}
		bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
	}
	destination.BgpPeeringAddresses = bgpPeeringAddressList

	// PeerWeight
	if bgpSettingsStatus.PeerWeight != nil {
		peerWeight := *bgpSettingsStatus.PeerWeight
		destination.PeerWeight = &peerWeight
	} else {
		destination.PeerWeight = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VirtualNetworkGatewayIPConfiguration_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAddress: Private IP Address for this gateway.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_Status `json:"privateIPAllocationMethod,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network gateway IP
	//configuration resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *SubResource_Status `json:"publicIPAddress,omitempty"`

	//Subnet: The reference to the subnet resource.
	Subnet *SubResource_Status `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewayIPConfiguration_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewayIPConfigurationStatus *VirtualNetworkGatewayIPConfiguration_Status) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGatewayIPConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewayIPConfigurationStatus *VirtualNetworkGatewayIPConfiguration_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewayIPConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewayIPConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		virtualNetworkGatewayIPConfigurationStatus.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		virtualNetworkGatewayIPConfigurationStatus.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewayIPConfigurationStatus.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			virtualNetworkGatewayIPConfigurationStatus.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			virtualNetworkGatewayIPConfigurationStatus.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			virtualNetworkGatewayIPConfigurationStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource_Status
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			virtualNetworkGatewayIPConfigurationStatus.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_Status
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			virtualNetworkGatewayIPConfigurationStatus.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus populates our VirtualNetworkGatewayIPConfiguration_Status from the provided source VirtualNetworkGatewayIPConfiguration_Status
func (virtualNetworkGatewayIPConfigurationStatus *VirtualNetworkGatewayIPConfiguration_Status) AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus(source *v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status) error {

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		virtualNetworkGatewayIPConfigurationStatus.Etag = &etag
	} else {
		virtualNetworkGatewayIPConfigurationStatus.Etag = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		virtualNetworkGatewayIPConfigurationStatus.Id = &id
	} else {
		virtualNetworkGatewayIPConfigurationStatus.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualNetworkGatewayIPConfigurationStatus.Name = &name
	} else {
		virtualNetworkGatewayIPConfigurationStatus.Name = nil
	}

	// PrivateIPAddress
	if source.PrivateIPAddress != nil {
		privateIPAddress := *source.PrivateIPAddress
		virtualNetworkGatewayIPConfigurationStatus.PrivateIPAddress = &privateIPAddress
	} else {
		virtualNetworkGatewayIPConfigurationStatus.PrivateIPAddress = nil
	}

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_Status(*source.PrivateIPAllocationMethod)
		virtualNetworkGatewayIPConfigurationStatus.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		virtualNetworkGatewayIPConfigurationStatus.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		virtualNetworkGatewayIPConfigurationStatus.ProvisioningState = &provisioningState
	} else {
		virtualNetworkGatewayIPConfigurationStatus.ProvisioningState = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource_Status
		err := publicIPAddress.AssignPropertiesFromSubResourceStatus(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPAddress from PublicIPAddress, calling AssignPropertiesFromSubResourceStatus()")
		}
		virtualNetworkGatewayIPConfigurationStatus.PublicIPAddress = &publicIPAddress
	} else {
		virtualNetworkGatewayIPConfigurationStatus.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_Status
		err := subnet.AssignPropertiesFromSubResourceStatus(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnet from Subnet, calling AssignPropertiesFromSubResourceStatus()")
		}
		virtualNetworkGatewayIPConfigurationStatus.Subnet = &subnet
	} else {
		virtualNetworkGatewayIPConfigurationStatus.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus populates the provided destination VirtualNetworkGatewayIPConfiguration_Status from our VirtualNetworkGatewayIPConfiguration_Status
func (virtualNetworkGatewayIPConfigurationStatus *VirtualNetworkGatewayIPConfiguration_Status) AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus(destination *v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	if virtualNetworkGatewayIPConfigurationStatus.Etag != nil {
		etag := *virtualNetworkGatewayIPConfigurationStatus.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	if virtualNetworkGatewayIPConfigurationStatus.Id != nil {
		id := *virtualNetworkGatewayIPConfigurationStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if virtualNetworkGatewayIPConfigurationStatus.Name != nil {
		name := *virtualNetworkGatewayIPConfigurationStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PrivateIPAddress
	if virtualNetworkGatewayIPConfigurationStatus.PrivateIPAddress != nil {
		privateIPAddress := *virtualNetworkGatewayIPConfigurationStatus.PrivateIPAddress
		destination.PrivateIPAddress = &privateIPAddress
	} else {
		destination.PrivateIPAddress = nil
	}

	// PrivateIPAllocationMethod
	if virtualNetworkGatewayIPConfigurationStatus.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*virtualNetworkGatewayIPConfigurationStatus.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if virtualNetworkGatewayIPConfigurationStatus.ProvisioningState != nil {
		provisioningState := string(*virtualNetworkGatewayIPConfigurationStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddress
	if virtualNetworkGatewayIPConfigurationStatus.PublicIPAddress != nil {
		var publicIPAddress v1alpha1api20201101storage.SubResource_Status
		err := (*virtualNetworkGatewayIPConfigurationStatus.PublicIPAddress).AssignPropertiesToSubResourceStatus(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPAddress from PublicIPAddress, calling AssignPropertiesToSubResourceStatus()")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if virtualNetworkGatewayIPConfigurationStatus.Subnet != nil {
		var subnet v1alpha1api20201101storage.SubResource_Status
		err := (*virtualNetworkGatewayIPConfigurationStatus.Subnet).AssignPropertiesToSubResourceStatus(&subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnet from Subnet, calling AssignPropertiesToSubResourceStatus()")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworkGatewayPropertiesFormatStatusGatewayType string

const (
	VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeExpressRoute = VirtualNetworkGatewayPropertiesFormatStatusGatewayType("ExpressRoute")
	VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeLocalGateway = VirtualNetworkGatewayPropertiesFormatStatusGatewayType("LocalGateway")
	VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeVpn          = VirtualNetworkGatewayPropertiesFormatStatusGatewayType("Vpn")
)

type VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration string

const (
	VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationGeneration1 = VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration("Generation1")
	VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationGeneration2 = VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration("Generation2")
	VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationNone        = VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration("None")
)

type VirtualNetworkGatewayPropertiesFormatStatusVpnType string

const (
	VirtualNetworkGatewayPropertiesFormatStatusVpnTypePolicyBased = VirtualNetworkGatewayPropertiesFormatStatusVpnType("PolicyBased")
	VirtualNetworkGatewayPropertiesFormatStatusVpnTypeRouteBased  = VirtualNetworkGatewayPropertiesFormatStatusVpnType("RouteBased")
)

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/VirtualNetworkGatewaySku
type VirtualNetworkGatewaySku struct {
	//Name: Gateway SKU name.
	Name *VirtualNetworkGatewaySkuName `json:"name,omitempty"`

	//Tier: Gateway SKU tier.
	Tier *VirtualNetworkGatewaySkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGatewaySku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkGatewaySku *VirtualNetworkGatewaySku) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkGatewaySku == nil {
		return nil, nil
	}
	var result VirtualNetworkGatewaySkuARM

	// Set property ‘Name’:
	if virtualNetworkGatewaySku.Name != nil {
		name := *virtualNetworkGatewaySku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if virtualNetworkGatewaySku.Tier != nil {
		tier := *virtualNetworkGatewaySku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaySku *VirtualNetworkGatewaySku) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGatewaySkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaySku *VirtualNetworkGatewaySku) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		virtualNetworkGatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySku populates our VirtualNetworkGatewaySku from the provided source VirtualNetworkGatewaySku
func (virtualNetworkGatewaySku *VirtualNetworkGatewaySku) AssignPropertiesFromVirtualNetworkGatewaySku(source *v1alpha1api20201101storage.VirtualNetworkGatewaySku) error {

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySkuName(*source.Name)
		virtualNetworkGatewaySku.Name = &name
	} else {
		virtualNetworkGatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySkuTier(*source.Tier)
		virtualNetworkGatewaySku.Tier = &tier
	} else {
		virtualNetworkGatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySku populates the provided destination VirtualNetworkGatewaySku from our VirtualNetworkGatewaySku
func (virtualNetworkGatewaySku *VirtualNetworkGatewaySku) AssignPropertiesToVirtualNetworkGatewaySku(destination *v1alpha1api20201101storage.VirtualNetworkGatewaySku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if virtualNetworkGatewaySku.Name != nil {
		name := string(*virtualNetworkGatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if virtualNetworkGatewaySku.Tier != nil {
		tier := string(*virtualNetworkGatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VirtualNetworkGatewaySku_Status struct {
	//Capacity: The capacity.
	Capacity *int `json:"capacity,omitempty"`

	//Name: Gateway SKU name.
	Name *VirtualNetworkGatewaySkuStatusName `json:"name,omitempty"`

	//Tier: Gateway SKU tier.
	Tier *VirtualNetworkGatewaySkuStatusTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewaySku_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaySkuStatus *VirtualNetworkGatewaySku_Status) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGatewaySku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaySkuStatus *VirtualNetworkGatewaySku_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		virtualNetworkGatewaySkuStatus.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewaySkuStatus.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		virtualNetworkGatewaySkuStatus.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySkuStatus populates our VirtualNetworkGatewaySku_Status from the provided source VirtualNetworkGatewaySku_Status
func (virtualNetworkGatewaySkuStatus *VirtualNetworkGatewaySku_Status) AssignPropertiesFromVirtualNetworkGatewaySkuStatus(source *v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status) error {

	// Capacity
	if source.Capacity != nil {
		capacity := *source.Capacity
		virtualNetworkGatewaySkuStatus.Capacity = &capacity
	} else {
		virtualNetworkGatewaySkuStatus.Capacity = nil
	}

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySkuStatusName(*source.Name)
		virtualNetworkGatewaySkuStatus.Name = &name
	} else {
		virtualNetworkGatewaySkuStatus.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySkuStatusTier(*source.Tier)
		virtualNetworkGatewaySkuStatus.Tier = &tier
	} else {
		virtualNetworkGatewaySkuStatus.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySkuStatus populates the provided destination VirtualNetworkGatewaySku_Status from our VirtualNetworkGatewaySku_Status
func (virtualNetworkGatewaySkuStatus *VirtualNetworkGatewaySku_Status) AssignPropertiesToVirtualNetworkGatewaySkuStatus(destination *v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	if virtualNetworkGatewaySkuStatus.Capacity != nil {
		capacity := *virtualNetworkGatewaySkuStatus.Capacity
		destination.Capacity = &capacity
	} else {
		destination.Capacity = nil
	}

	// Name
	if virtualNetworkGatewaySkuStatus.Name != nil {
		name := string(*virtualNetworkGatewaySkuStatus.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if virtualNetworkGatewaySkuStatus.Tier != nil {
		tier := string(*virtualNetworkGatewaySkuStatus.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ExpressRoute","HyperNet","LocalGateway","Vpn"}
type VirtualNetworkGatewaysSpecPropertiesGatewayType string

const (
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeExpressRoute = VirtualNetworkGatewaysSpecPropertiesGatewayType("ExpressRoute")
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeHyperNet     = VirtualNetworkGatewaysSpecPropertiesGatewayType("HyperNet")
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeLocalGateway = VirtualNetworkGatewaysSpecPropertiesGatewayType("LocalGateway")
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeVpn          = VirtualNetworkGatewaysSpecPropertiesGatewayType("Vpn")
)

// +kubebuilder:validation:Enum={"Generation1","Generation2","None"}
type VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGenerationGeneration1 = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("Generation1")
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGenerationGeneration2 = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("Generation2")
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGenerationNone        = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("None")
)

// +kubebuilder:validation:Enum={"PolicyBased","RouteBased"}
type VirtualNetworkGatewaysSpecPropertiesVpnType string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnTypePolicyBased = VirtualNetworkGatewaysSpecPropertiesVpnType("PolicyBased")
	VirtualNetworkGatewaysSpecPropertiesVpnTypeRouteBased  = VirtualNetworkGatewaysSpecPropertiesVpnType("RouteBased")
)

type VirtualNetworkGateways_Spec_Properties_IpConfigurations struct {
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	//PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	//Subnet: The reference to the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_IpConfigurations{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkGatewaysSpecPropertiesIpConfigurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations == nil {
		return nil, nil
	}
	var result VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM

	// Set property ‘Name’:
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name != nil {
		name := *virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod != nil || virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress != nil || virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet != nil {
		result.Properties = &VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}
	}
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := *virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod
		result.Properties.PrivateIPAllocationMethod = &privateIPAllocationMethod
	}
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress != nil {
		publicIPAddressARM, err := (*virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		publicIPAddress := publicIPAddressARM.(SubResourceARM)
		result.Properties.PublicIPAddress = &publicIPAddress
	}
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet != nil {
		subnetARM, err := (*virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		subnet := subnetARM.(SubResourceARM)
		result.Properties.Subnet = &subnet
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaysSpecPropertiesIpConfigurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaysSpecPropertiesIpConfigurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name = &name
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations populates our VirtualNetworkGateways_Spec_Properties_IpConfigurations from the provided source VirtualNetworkGateways_Spec_Properties_IpConfigurations
func (virtualNetworkGatewaysSpecPropertiesIpConfigurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations(source *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_IpConfigurations) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name = &name
	} else {
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name = nil
	}

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod(*source.PrivateIPAllocationMethod)
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource
		err := publicIPAddress.AssignPropertiesFromSubResource(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPAddress from PublicIPAddress, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress = &publicIPAddress
	} else {
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource
		err := subnet.AssignPropertiesFromSubResource(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnet from Subnet, calling AssignPropertiesFromSubResource()")
		}
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet = &subnet
	} else {
		virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations populates the provided destination VirtualNetworkGateways_Spec_Properties_IpConfigurations from our VirtualNetworkGateways_Spec_Properties_IpConfigurations
func (virtualNetworkGatewaysSpecPropertiesIpConfigurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations(destination *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_IpConfigurations) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name != nil {
		name := *virtualNetworkGatewaysSpecPropertiesIpConfigurations.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PrivateIPAllocationMethod
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*virtualNetworkGatewaysSpecPropertiesIpConfigurations.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress != nil {
		var publicIPAddress v1alpha1api20201101storage.SubResource
		err := (*virtualNetworkGatewaysSpecPropertiesIpConfigurations.PublicIPAddress).AssignPropertiesToSubResource(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPAddress from PublicIPAddress, calling AssignPropertiesToSubResource()")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet != nil {
		var subnet v1alpha1api20201101storage.SubResource
		err := (*virtualNetworkGatewaysSpecPropertiesIpConfigurations.Subnet).AssignPropertiesToSubResource(&subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnet from Subnet, calling AssignPropertiesToSubResource()")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration struct {
	//AadAudience: The AADAudience property of the VirtualNetworkGateway resource for
	//vpn client connection used for AAD authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	//AadIssuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	//AadTenant: The AADTenant property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	//RadiusServerAddress: The radius server address property of the
	//VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	//RadiusServerSecret: The radius secret property of the VirtualNetworkGateway
	//resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	//RadiusServers: The radiusServers property for multiple radius server
	//configuration.
	RadiusServers []RadiusServer `json:"radiusServers,omitempty"`

	//VpnAuthenticationTypes: VPN authentication types for the virtual network
	//gateway..
	VpnAuthenticationTypes []VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes `json:"vpnAuthenticationTypes,omitempty"`

	//VpnClientAddressPool: The reference to the address space resource which
	//represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`

	//VpnClientIpsecPolicies: VpnClientIpsecPolicies for virtual network gateway P2S
	//client.
	VpnClientIpsecPolicies []IpsecPolicy `json:"vpnClientIpsecPolicies,omitempty"`

	//VpnClientProtocols: VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols []VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols `json:"vpnClientProtocols,omitempty"`

	//VpnClientRevokedCertificates: VpnClientRevokedCertificate for Virtual network
	//gateway.
	VpnClientRevokedCertificates []VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates `json:"vpnClientRevokedCertificates,omitempty"`

	//VpnClientRootCertificates: VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration == nil {
		return nil, nil
	}
	var result VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM

	// Set property ‘AadAudience’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience != nil {
		aadAudience := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience
		result.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer != nil {
		aadIssuer := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer
		result.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant != nil {
		aadTenant := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant
		result.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress != nil {
		radiusServerAddress := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress
		result.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret != nil {
		radiusServerSecret := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServers {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.RadiusServers = append(result.RadiusServers, itemARM.(RadiusServerARM))
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnAuthenticationTypes {
		result.VpnAuthenticationTypes = append(result.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool != nil {
		vpnClientAddressPoolARM, err := (*virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		vpnClientAddressPool := vpnClientAddressPoolARM.(AddressSpaceARM)
		result.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientIpsecPolicies {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.VpnClientIpsecPolicies = append(result.VpnClientIpsecPolicies, itemARM.(IpsecPolicyARM))
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientProtocols {
		result.VpnClientProtocols = append(result.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRevokedCertificates {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.VpnClientRevokedCertificates = append(result.VpnClientRevokedCertificates, itemARM.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM))
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRootCertificates {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.VpnClientRootCertificates = append(result.VpnClientRootCertificates, itemARM.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM))
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServers = append(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnAuthenticationTypes = append(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientIpsecPolicies = append(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientProtocols = append(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRevokedCertificates = append(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRootCertificates = append(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(source *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) error {

	// AadAudience
	if source.AadAudience != nil {
		aadAudience := *source.AadAudience
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience = &aadAudience
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience = nil
	}

	// AadIssuer
	if source.AadIssuer != nil {
		aadIssuer := *source.AadIssuer
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer = &aadIssuer
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer = nil
	}

	// AadTenant
	if source.AadTenant != nil {
		aadTenant := *source.AadTenant
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant = &aadTenant
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant = nil
	}

	// RadiusServerAddress
	if source.RadiusServerAddress != nil {
		radiusServerAddress := *source.RadiusServerAddress
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress = &radiusServerAddress
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress = nil
	}

	// RadiusServerSecret
	if source.RadiusServerSecret != nil {
		radiusServerSecret := *source.RadiusServerSecret
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret = &radiusServerSecret
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret = nil
	}

	// RadiusServers
	radiusServerList := make([]RadiusServer, len(source.RadiusServers))
	for radiusServerIndex, radiusServerItem := range source.RadiusServers {
		// Shadow the loop variable to avoid aliasing
		radiusServerItem := radiusServerItem
		var radiusServer RadiusServer
		err := radiusServer.AssignPropertiesFromRadiusServer(&radiusServerItem)
		if err != nil {
			return errors.Wrap(err, "populating RadiusServers from RadiusServers, calling AssignPropertiesFromRadiusServer()")
		}
		radiusServerList[radiusServerIndex] = radiusServer
	}
	virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServers = radiusServerList

	// VpnAuthenticationTypes
	vpnAuthenticationTypeList := make([]VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes, len(source.VpnAuthenticationTypes))
	for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
		// Shadow the loop variable to avoid aliasing
		vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
		vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes(vpnAuthenticationTypeItem)
	}
	virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnAuthenticationTypes = vpnAuthenticationTypeList

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpace(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientAddressPool from VpnClientAddressPool, calling AssignPropertiesFromAddressSpace()")
		}
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	vpnClientIpsecPolicyList := make([]IpsecPolicy, len(source.VpnClientIpsecPolicies))
	for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
		// Shadow the loop variable to avoid aliasing
		vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
		var vpnClientIpsecPolicy IpsecPolicy
		err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicy(&vpnClientIpsecPolicyItem)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientIpsecPolicies from VpnClientIpsecPolicies, calling AssignPropertiesFromIpsecPolicy()")
		}
		vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
	}
	virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList

	// VpnClientProtocols
	vpnClientProtocolList := make([]VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols, len(source.VpnClientProtocols))
	for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
		// Shadow the loop variable to avoid aliasing
		vpnClientProtocolItem := vpnClientProtocolItem
		vpnClientProtocolList[vpnClientProtocolIndex] = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols(vpnClientProtocolItem)
	}
	virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientProtocols = vpnClientProtocolList

	// VpnClientRevokedCertificates
	vpnClientRevokedCertificateList := make([]VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates, len(source.VpnClientRevokedCertificates))
	for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
		var vpnClientRevokedCertificate VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
		err := vpnClientRevokedCertificate.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(&vpnClientRevokedCertificateItem)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRevokedCertificates from VpnClientRevokedCertificates, calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates()")
		}
		vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
	}
	virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList

	// VpnClientRootCertificates
	vpnClientRootCertificateList := make([]VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates, len(source.VpnClientRootCertificates))
	for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRootCertificateItem := vpnClientRootCertificateItem
		var vpnClientRootCertificate VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
		err := vpnClientRootCertificate.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(&vpnClientRootCertificateItem)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRootCertificates from VpnClientRootCertificates, calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates()")
		}
		vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
	}
	virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRootCertificates = vpnClientRootCertificateList

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(destination *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience != nil {
		aadAudience := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadAudience
		destination.AadAudience = &aadAudience
	} else {
		destination.AadAudience = nil
	}

	// AadIssuer
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer != nil {
		aadIssuer := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadIssuer
		destination.AadIssuer = &aadIssuer
	} else {
		destination.AadIssuer = nil
	}

	// AadTenant
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant != nil {
		aadTenant := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.AadTenant
		destination.AadTenant = &aadTenant
	} else {
		destination.AadTenant = nil
	}

	// RadiusServerAddress
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress != nil {
		radiusServerAddress := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerAddress
		destination.RadiusServerAddress = &radiusServerAddress
	} else {
		destination.RadiusServerAddress = nil
	}

	// RadiusServerSecret
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret != nil {
		radiusServerSecret := *virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServerSecret
		destination.RadiusServerSecret = &radiusServerSecret
	} else {
		destination.RadiusServerSecret = nil
	}

	// RadiusServers
	radiusServerList := make([]v1alpha1api20201101storage.RadiusServer, len(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServers))
	for radiusServerIndex, radiusServerItem := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.RadiusServers {
		// Shadow the loop variable to avoid aliasing
		radiusServerItem := radiusServerItem
		var radiusServer v1alpha1api20201101storage.RadiusServer
		err := radiusServerItem.AssignPropertiesToRadiusServer(&radiusServer)
		if err != nil {
			return errors.Wrap(err, "populating RadiusServers from RadiusServers, calling AssignPropertiesToRadiusServer()")
		}
		radiusServerList[radiusServerIndex] = radiusServer
	}
	destination.RadiusServers = radiusServerList

	// VpnAuthenticationTypes
	vpnAuthenticationTypeList := make([]string, len(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnAuthenticationTypes))
	for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnAuthenticationTypes {
		// Shadow the loop variable to avoid aliasing
		vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
		vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
	}
	destination.VpnAuthenticationTypes = vpnAuthenticationTypeList

	// VpnClientAddressPool
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool != nil {
		var vpnClientAddressPool v1alpha1api20201101storage.AddressSpace
		err := (*virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientAddressPool).AssignPropertiesToAddressSpace(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientAddressPool from VpnClientAddressPool, calling AssignPropertiesToAddressSpace()")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	vpnClientIpsecPolicyList := make([]v1alpha1api20201101storage.IpsecPolicy, len(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientIpsecPolicies))
	for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientIpsecPolicies {
		// Shadow the loop variable to avoid aliasing
		vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
		var vpnClientIpsecPolicy v1alpha1api20201101storage.IpsecPolicy
		err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicy(&vpnClientIpsecPolicy)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientIpsecPolicies from VpnClientIpsecPolicies, calling AssignPropertiesToIpsecPolicy()")
		}
		vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
	}
	destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList

	// VpnClientProtocols
	vpnClientProtocolList := make([]string, len(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientProtocols))
	for vpnClientProtocolIndex, vpnClientProtocolItem := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientProtocols {
		// Shadow the loop variable to avoid aliasing
		vpnClientProtocolItem := vpnClientProtocolItem
		vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
	}
	destination.VpnClientProtocols = vpnClientProtocolList

	// VpnClientRevokedCertificates
	vpnClientRevokedCertificateList := make([]v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates, len(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRevokedCertificates))
	for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRevokedCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
		var vpnClientRevokedCertificate v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
		err := vpnClientRevokedCertificateItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(&vpnClientRevokedCertificate)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRevokedCertificates from VpnClientRevokedCertificates, calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates()")
		}
		vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
	}
	destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList

	// VpnClientRootCertificates
	vpnClientRootCertificateList := make([]v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates, len(virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRootCertificates))
	for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range virtualNetworkGatewaysSpecPropertiesVpnClientConfiguration.VpnClientRootCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRootCertificateItem := vpnClientRootCertificateItem
		var vpnClientRootCertificate v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
		err := vpnClientRootCertificateItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(&vpnClientRootCertificate)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRootCertificates from VpnClientRootCertificates, calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates()")
		}
		vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
	}
	destination.VpnClientRootCertificates = vpnClientRootCertificateList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VpnClientConfiguration_Status struct {
	//AadAudience: The AADAudience property of the VirtualNetworkGateway resource for
	//vpn client connection used for AAD authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	//AadIssuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	//AadTenant: The AADTenant property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	//RadiusServerAddress: The radius server address property of the
	//VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	//RadiusServerSecret: The radius secret property of the VirtualNetworkGateway
	//resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	//RadiusServers: The radiusServers property for multiple radius server
	//configuration.
	RadiusServers []RadiusServer_Status `json:"radiusServers,omitempty"`

	//VpnAuthenticationTypes: VPN authentication types for the virtual network
	//gateway..
	VpnAuthenticationTypes []VpnClientConfigurationStatusVpnAuthenticationTypes `json:"vpnAuthenticationTypes,omitempty"`

	//VpnClientAddressPool: The reference to the address space resource which
	//represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace_Status `json:"vpnClientAddressPool,omitempty"`

	//VpnClientIpsecPolicies: VpnClientIpsecPolicies for virtual network gateway P2S
	//client.
	VpnClientIpsecPolicies []IpsecPolicy_Status `json:"vpnClientIpsecPolicies,omitempty"`

	//VpnClientProtocols: VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols []VpnClientConfigurationStatusVpnClientProtocols `json:"vpnClientProtocols,omitempty"`

	//VpnClientRevokedCertificates: VpnClientRevokedCertificate for Virtual network
	//gateway.
	VpnClientRevokedCertificates []VpnClientRevokedCertificate_Status `json:"vpnClientRevokedCertificates,omitempty"`

	//VpnClientRootCertificates: VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VpnClientRootCertificate_Status `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientConfiguration_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vpnClientConfigurationStatus *VpnClientConfiguration_Status) CreateEmptyARMValue() interface{} {
	return VpnClientConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vpnClientConfigurationStatus *VpnClientConfiguration_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		vpnClientConfigurationStatus.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		vpnClientConfigurationStatus.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		vpnClientConfigurationStatus.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		vpnClientConfigurationStatus.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		vpnClientConfigurationStatus.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		vpnClientConfigurationStatus.RadiusServers = append(vpnClientConfigurationStatus.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		vpnClientConfigurationStatus.VpnAuthenticationTypes = append(vpnClientConfigurationStatus.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace_Status
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		vpnClientConfigurationStatus.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		vpnClientConfigurationStatus.VpnClientIpsecPolicies = append(vpnClientConfigurationStatus.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		vpnClientConfigurationStatus.VpnClientProtocols = append(vpnClientConfigurationStatus.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VpnClientRevokedCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		vpnClientConfigurationStatus.VpnClientRevokedCertificates = append(vpnClientConfigurationStatus.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VpnClientRootCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		vpnClientConfigurationStatus.VpnClientRootCertificates = append(vpnClientConfigurationStatus.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientConfigurationStatus populates our VpnClientConfiguration_Status from the provided source VpnClientConfiguration_Status
func (vpnClientConfigurationStatus *VpnClientConfiguration_Status) AssignPropertiesFromVpnClientConfigurationStatus(source *v1alpha1api20201101storage.VpnClientConfiguration_Status) error {

	// AadAudience
	if source.AadAudience != nil {
		aadAudience := *source.AadAudience
		vpnClientConfigurationStatus.AadAudience = &aadAudience
	} else {
		vpnClientConfigurationStatus.AadAudience = nil
	}

	// AadIssuer
	if source.AadIssuer != nil {
		aadIssuer := *source.AadIssuer
		vpnClientConfigurationStatus.AadIssuer = &aadIssuer
	} else {
		vpnClientConfigurationStatus.AadIssuer = nil
	}

	// AadTenant
	if source.AadTenant != nil {
		aadTenant := *source.AadTenant
		vpnClientConfigurationStatus.AadTenant = &aadTenant
	} else {
		vpnClientConfigurationStatus.AadTenant = nil
	}

	// RadiusServerAddress
	if source.RadiusServerAddress != nil {
		radiusServerAddress := *source.RadiusServerAddress
		vpnClientConfigurationStatus.RadiusServerAddress = &radiusServerAddress
	} else {
		vpnClientConfigurationStatus.RadiusServerAddress = nil
	}

	// RadiusServerSecret
	if source.RadiusServerSecret != nil {
		radiusServerSecret := *source.RadiusServerSecret
		vpnClientConfigurationStatus.RadiusServerSecret = &radiusServerSecret
	} else {
		vpnClientConfigurationStatus.RadiusServerSecret = nil
	}

	// RadiusServers
	radiusServerList := make([]RadiusServer_Status, len(source.RadiusServers))
	for radiusServerIndex, radiusServerItem := range source.RadiusServers {
		// Shadow the loop variable to avoid aliasing
		radiusServerItem := radiusServerItem
		var radiusServer RadiusServer_Status
		err := radiusServer.AssignPropertiesFromRadiusServerStatus(&radiusServerItem)
		if err != nil {
			return errors.Wrap(err, "populating RadiusServers from RadiusServers, calling AssignPropertiesFromRadiusServerStatus()")
		}
		radiusServerList[radiusServerIndex] = radiusServer
	}
	vpnClientConfigurationStatus.RadiusServers = radiusServerList

	// VpnAuthenticationTypes
	vpnAuthenticationTypeList := make([]VpnClientConfigurationStatusVpnAuthenticationTypes, len(source.VpnAuthenticationTypes))
	for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
		// Shadow the loop variable to avoid aliasing
		vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
		vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VpnClientConfigurationStatusVpnAuthenticationTypes(vpnAuthenticationTypeItem)
	}
	vpnClientConfigurationStatus.VpnAuthenticationTypes = vpnAuthenticationTypeList

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace_Status
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpaceStatus(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientAddressPool from VpnClientAddressPool, calling AssignPropertiesFromAddressSpaceStatus()")
		}
		vpnClientConfigurationStatus.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		vpnClientConfigurationStatus.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	vpnClientIpsecPolicyList := make([]IpsecPolicy_Status, len(source.VpnClientIpsecPolicies))
	for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
		// Shadow the loop variable to avoid aliasing
		vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
		var vpnClientIpsecPolicy IpsecPolicy_Status
		err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicyStatus(&vpnClientIpsecPolicyItem)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientIpsecPolicies from VpnClientIpsecPolicies, calling AssignPropertiesFromIpsecPolicyStatus()")
		}
		vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
	}
	vpnClientConfigurationStatus.VpnClientIpsecPolicies = vpnClientIpsecPolicyList

	// VpnClientProtocols
	vpnClientProtocolList := make([]VpnClientConfigurationStatusVpnClientProtocols, len(source.VpnClientProtocols))
	for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
		// Shadow the loop variable to avoid aliasing
		vpnClientProtocolItem := vpnClientProtocolItem
		vpnClientProtocolList[vpnClientProtocolIndex] = VpnClientConfigurationStatusVpnClientProtocols(vpnClientProtocolItem)
	}
	vpnClientConfigurationStatus.VpnClientProtocols = vpnClientProtocolList

	// VpnClientRevokedCertificates
	vpnClientRevokedCertificateList := make([]VpnClientRevokedCertificate_Status, len(source.VpnClientRevokedCertificates))
	for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
		var vpnClientRevokedCertificate VpnClientRevokedCertificate_Status
		err := vpnClientRevokedCertificate.AssignPropertiesFromVpnClientRevokedCertificateStatus(&vpnClientRevokedCertificateItem)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRevokedCertificates from VpnClientRevokedCertificates, calling AssignPropertiesFromVpnClientRevokedCertificateStatus()")
		}
		vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
	}
	vpnClientConfigurationStatus.VpnClientRevokedCertificates = vpnClientRevokedCertificateList

	// VpnClientRootCertificates
	vpnClientRootCertificateList := make([]VpnClientRootCertificate_Status, len(source.VpnClientRootCertificates))
	for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRootCertificateItem := vpnClientRootCertificateItem
		var vpnClientRootCertificate VpnClientRootCertificate_Status
		err := vpnClientRootCertificate.AssignPropertiesFromVpnClientRootCertificateStatus(&vpnClientRootCertificateItem)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRootCertificates from VpnClientRootCertificates, calling AssignPropertiesFromVpnClientRootCertificateStatus()")
		}
		vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
	}
	vpnClientConfigurationStatus.VpnClientRootCertificates = vpnClientRootCertificateList

	// No error
	return nil
}

// AssignPropertiesToVpnClientConfigurationStatus populates the provided destination VpnClientConfiguration_Status from our VpnClientConfiguration_Status
func (vpnClientConfigurationStatus *VpnClientConfiguration_Status) AssignPropertiesToVpnClientConfigurationStatus(destination *v1alpha1api20201101storage.VpnClientConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	if vpnClientConfigurationStatus.AadAudience != nil {
		aadAudience := *vpnClientConfigurationStatus.AadAudience
		destination.AadAudience = &aadAudience
	} else {
		destination.AadAudience = nil
	}

	// AadIssuer
	if vpnClientConfigurationStatus.AadIssuer != nil {
		aadIssuer := *vpnClientConfigurationStatus.AadIssuer
		destination.AadIssuer = &aadIssuer
	} else {
		destination.AadIssuer = nil
	}

	// AadTenant
	if vpnClientConfigurationStatus.AadTenant != nil {
		aadTenant := *vpnClientConfigurationStatus.AadTenant
		destination.AadTenant = &aadTenant
	} else {
		destination.AadTenant = nil
	}

	// RadiusServerAddress
	if vpnClientConfigurationStatus.RadiusServerAddress != nil {
		radiusServerAddress := *vpnClientConfigurationStatus.RadiusServerAddress
		destination.RadiusServerAddress = &radiusServerAddress
	} else {
		destination.RadiusServerAddress = nil
	}

	// RadiusServerSecret
	if vpnClientConfigurationStatus.RadiusServerSecret != nil {
		radiusServerSecret := *vpnClientConfigurationStatus.RadiusServerSecret
		destination.RadiusServerSecret = &radiusServerSecret
	} else {
		destination.RadiusServerSecret = nil
	}

	// RadiusServers
	radiusServerList := make([]v1alpha1api20201101storage.RadiusServer_Status, len(vpnClientConfigurationStatus.RadiusServers))
	for radiusServerIndex, radiusServerItem := range vpnClientConfigurationStatus.RadiusServers {
		// Shadow the loop variable to avoid aliasing
		radiusServerItem := radiusServerItem
		var radiusServer v1alpha1api20201101storage.RadiusServer_Status
		err := radiusServerItem.AssignPropertiesToRadiusServerStatus(&radiusServer)
		if err != nil {
			return errors.Wrap(err, "populating RadiusServers from RadiusServers, calling AssignPropertiesToRadiusServerStatus()")
		}
		radiusServerList[radiusServerIndex] = radiusServer
	}
	destination.RadiusServers = radiusServerList

	// VpnAuthenticationTypes
	vpnAuthenticationTypeList := make([]string, len(vpnClientConfigurationStatus.VpnAuthenticationTypes))
	for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range vpnClientConfigurationStatus.VpnAuthenticationTypes {
		// Shadow the loop variable to avoid aliasing
		vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
		vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
	}
	destination.VpnAuthenticationTypes = vpnAuthenticationTypeList

	// VpnClientAddressPool
	if vpnClientConfigurationStatus.VpnClientAddressPool != nil {
		var vpnClientAddressPool v1alpha1api20201101storage.AddressSpace_Status
		err := (*vpnClientConfigurationStatus.VpnClientAddressPool).AssignPropertiesToAddressSpaceStatus(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientAddressPool from VpnClientAddressPool, calling AssignPropertiesToAddressSpaceStatus()")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	vpnClientIpsecPolicyList := make([]v1alpha1api20201101storage.IpsecPolicy_Status, len(vpnClientConfigurationStatus.VpnClientIpsecPolicies))
	for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range vpnClientConfigurationStatus.VpnClientIpsecPolicies {
		// Shadow the loop variable to avoid aliasing
		vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
		var vpnClientIpsecPolicy v1alpha1api20201101storage.IpsecPolicy_Status
		err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicyStatus(&vpnClientIpsecPolicy)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientIpsecPolicies from VpnClientIpsecPolicies, calling AssignPropertiesToIpsecPolicyStatus()")
		}
		vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
	}
	destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList

	// VpnClientProtocols
	vpnClientProtocolList := make([]string, len(vpnClientConfigurationStatus.VpnClientProtocols))
	for vpnClientProtocolIndex, vpnClientProtocolItem := range vpnClientConfigurationStatus.VpnClientProtocols {
		// Shadow the loop variable to avoid aliasing
		vpnClientProtocolItem := vpnClientProtocolItem
		vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
	}
	destination.VpnClientProtocols = vpnClientProtocolList

	// VpnClientRevokedCertificates
	vpnClientRevokedCertificateList := make([]v1alpha1api20201101storage.VpnClientRevokedCertificate_Status, len(vpnClientConfigurationStatus.VpnClientRevokedCertificates))
	for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range vpnClientConfigurationStatus.VpnClientRevokedCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
		var vpnClientRevokedCertificate v1alpha1api20201101storage.VpnClientRevokedCertificate_Status
		err := vpnClientRevokedCertificateItem.AssignPropertiesToVpnClientRevokedCertificateStatus(&vpnClientRevokedCertificate)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRevokedCertificates from VpnClientRevokedCertificates, calling AssignPropertiesToVpnClientRevokedCertificateStatus()")
		}
		vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
	}
	destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList

	// VpnClientRootCertificates
	vpnClientRootCertificateList := make([]v1alpha1api20201101storage.VpnClientRootCertificate_Status, len(vpnClientConfigurationStatus.VpnClientRootCertificates))
	for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range vpnClientConfigurationStatus.VpnClientRootCertificates {
		// Shadow the loop variable to avoid aliasing
		vpnClientRootCertificateItem := vpnClientRootCertificateItem
		var vpnClientRootCertificate v1alpha1api20201101storage.VpnClientRootCertificate_Status
		err := vpnClientRootCertificateItem.AssignPropertiesToVpnClientRootCertificateStatus(&vpnClientRootCertificate)
		if err != nil {
			return errors.Wrap(err, "populating VpnClientRootCertificates from VpnClientRootCertificates, calling AssignPropertiesToVpnClientRootCertificateStatus()")
		}
		vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
	}
	destination.VpnClientRootCertificates = vpnClientRootCertificateList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/IPConfigurationBgpPeeringAddress
type IPConfigurationBgpPeeringAddress struct {
	//CustomBgpIpAddresses: The list of custom BGP peering addresses which belong to
	//IP configuration.
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`

	//IpconfigurationId: The ID of IP configuration which belongs to gateway.
	IpconfigurationId *string `json:"ipconfigurationId,omitempty"`
}

var _ genruntime.ARMTransformer = &IPConfigurationBgpPeeringAddress{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipConfigurationBgpPeeringAddress *IPConfigurationBgpPeeringAddress) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if ipConfigurationBgpPeeringAddress == nil {
		return nil, nil
	}
	var result IPConfigurationBgpPeeringAddressARM

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range ipConfigurationBgpPeeringAddress.CustomBgpIpAddresses {
		result.CustomBgpIpAddresses = append(result.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if ipConfigurationBgpPeeringAddress.IpconfigurationId != nil {
		ipconfigurationId := *ipConfigurationBgpPeeringAddress.IpconfigurationId
		result.IpconfigurationId = &ipconfigurationId
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipConfigurationBgpPeeringAddress *IPConfigurationBgpPeeringAddress) CreateEmptyARMValue() interface{} {
	return IPConfigurationBgpPeeringAddressARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipConfigurationBgpPeeringAddress *IPConfigurationBgpPeeringAddress) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddressARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddressARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		ipConfigurationBgpPeeringAddress.CustomBgpIpAddresses = append(ipConfigurationBgpPeeringAddress.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		ipConfigurationBgpPeeringAddress.IpconfigurationId = &ipconfigurationId
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddress populates our IPConfigurationBgpPeeringAddress from the provided source IPConfigurationBgpPeeringAddress
func (ipConfigurationBgpPeeringAddress *IPConfigurationBgpPeeringAddress) AssignPropertiesFromIPConfigurationBgpPeeringAddress(source *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress) error {

	// CustomBgpIpAddresses
	customBgpIpAddressList := make([]string, len(source.CustomBgpIpAddresses))
	for customBgpIpAddressIndex, customBgpIpAddressItem := range source.CustomBgpIpAddresses {
		// Shadow the loop variable to avoid aliasing
		customBgpIpAddressItem := customBgpIpAddressItem
		customBgpIpAddressList[customBgpIpAddressIndex] = customBgpIpAddressItem
	}
	ipConfigurationBgpPeeringAddress.CustomBgpIpAddresses = customBgpIpAddressList

	// IpconfigurationId
	if source.IpconfigurationId != nil {
		ipconfigurationId := *source.IpconfigurationId
		ipConfigurationBgpPeeringAddress.IpconfigurationId = &ipconfigurationId
	} else {
		ipConfigurationBgpPeeringAddress.IpconfigurationId = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddress populates the provided destination IPConfigurationBgpPeeringAddress from our IPConfigurationBgpPeeringAddress
func (ipConfigurationBgpPeeringAddress *IPConfigurationBgpPeeringAddress) AssignPropertiesToIPConfigurationBgpPeeringAddress(destination *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	customBgpIpAddressList := make([]string, len(ipConfigurationBgpPeeringAddress.CustomBgpIpAddresses))
	for customBgpIpAddressIndex, customBgpIpAddressItem := range ipConfigurationBgpPeeringAddress.CustomBgpIpAddresses {
		// Shadow the loop variable to avoid aliasing
		customBgpIpAddressItem := customBgpIpAddressItem
		customBgpIpAddressList[customBgpIpAddressIndex] = customBgpIpAddressItem
	}
	destination.CustomBgpIpAddresses = customBgpIpAddressList

	// IpconfigurationId
	if ipConfigurationBgpPeeringAddress.IpconfigurationId != nil {
		ipconfigurationId := *ipConfigurationBgpPeeringAddress.IpconfigurationId
		destination.IpconfigurationId = &ipconfigurationId
	} else {
		destination.IpconfigurationId = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type IPConfigurationBgpPeeringAddress_Status struct {
	//CustomBgpIpAddresses: The list of custom BGP peering addresses which belong to
	//IP configuration.
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`

	//DefaultBgpIpAddresses: The list of default BGP peering addresses which belong to
	//IP configuration.
	DefaultBgpIpAddresses []string `json:"defaultBgpIpAddresses,omitempty"`

	//IpconfigurationId: The ID of IP configuration which belongs to gateway.
	IpconfigurationId *string `json:"ipconfigurationId,omitempty"`

	//TunnelIpAddresses: The list of tunnel public IP addresses which belong to IP
	//configuration.
	TunnelIpAddresses []string `json:"tunnelIpAddresses,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfigurationBgpPeeringAddress_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipConfigurationBgpPeeringAddressStatus *IPConfigurationBgpPeeringAddress_Status) CreateEmptyARMValue() interface{} {
	return IPConfigurationBgpPeeringAddress_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipConfigurationBgpPeeringAddressStatus *IPConfigurationBgpPeeringAddress_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddress_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddress_StatusARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		ipConfigurationBgpPeeringAddressStatus.CustomBgpIpAddresses = append(ipConfigurationBgpPeeringAddressStatus.CustomBgpIpAddresses, item)
	}

	// Set property ‘DefaultBgpIpAddresses’:
	for _, item := range typedInput.DefaultBgpIpAddresses {
		ipConfigurationBgpPeeringAddressStatus.DefaultBgpIpAddresses = append(ipConfigurationBgpPeeringAddressStatus.DefaultBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		ipConfigurationBgpPeeringAddressStatus.IpconfigurationId = &ipconfigurationId
	}

	// Set property ‘TunnelIpAddresses’:
	for _, item := range typedInput.TunnelIpAddresses {
		ipConfigurationBgpPeeringAddressStatus.TunnelIpAddresses = append(ipConfigurationBgpPeeringAddressStatus.TunnelIpAddresses, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus populates our IPConfigurationBgpPeeringAddress_Status from the provided source IPConfigurationBgpPeeringAddress_Status
func (ipConfigurationBgpPeeringAddressStatus *IPConfigurationBgpPeeringAddress_Status) AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus(source *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status) error {

	// CustomBgpIpAddresses
	customBgpIpAddressList := make([]string, len(source.CustomBgpIpAddresses))
	for customBgpIpAddressIndex, customBgpIpAddressItem := range source.CustomBgpIpAddresses {
		// Shadow the loop variable to avoid aliasing
		customBgpIpAddressItem := customBgpIpAddressItem
		customBgpIpAddressList[customBgpIpAddressIndex] = customBgpIpAddressItem
	}
	ipConfigurationBgpPeeringAddressStatus.CustomBgpIpAddresses = customBgpIpAddressList

	// DefaultBgpIpAddresses
	defaultBgpIpAddressList := make([]string, len(source.DefaultBgpIpAddresses))
	for defaultBgpIpAddressIndex, defaultBgpIpAddressItem := range source.DefaultBgpIpAddresses {
		// Shadow the loop variable to avoid aliasing
		defaultBgpIpAddressItem := defaultBgpIpAddressItem
		defaultBgpIpAddressList[defaultBgpIpAddressIndex] = defaultBgpIpAddressItem
	}
	ipConfigurationBgpPeeringAddressStatus.DefaultBgpIpAddresses = defaultBgpIpAddressList

	// IpconfigurationId
	if source.IpconfigurationId != nil {
		ipconfigurationId := *source.IpconfigurationId
		ipConfigurationBgpPeeringAddressStatus.IpconfigurationId = &ipconfigurationId
	} else {
		ipConfigurationBgpPeeringAddressStatus.IpconfigurationId = nil
	}

	// TunnelIpAddresses
	tunnelIpAddressList := make([]string, len(source.TunnelIpAddresses))
	for tunnelIpAddressIndex, tunnelIpAddressItem := range source.TunnelIpAddresses {
		// Shadow the loop variable to avoid aliasing
		tunnelIpAddressItem := tunnelIpAddressItem
		tunnelIpAddressList[tunnelIpAddressIndex] = tunnelIpAddressItem
	}
	ipConfigurationBgpPeeringAddressStatus.TunnelIpAddresses = tunnelIpAddressList

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddressStatus populates the provided destination IPConfigurationBgpPeeringAddress_Status from our IPConfigurationBgpPeeringAddress_Status
func (ipConfigurationBgpPeeringAddressStatus *IPConfigurationBgpPeeringAddress_Status) AssignPropertiesToIPConfigurationBgpPeeringAddressStatus(destination *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	customBgpIpAddressList := make([]string, len(ipConfigurationBgpPeeringAddressStatus.CustomBgpIpAddresses))
	for customBgpIpAddressIndex, customBgpIpAddressItem := range ipConfigurationBgpPeeringAddressStatus.CustomBgpIpAddresses {
		// Shadow the loop variable to avoid aliasing
		customBgpIpAddressItem := customBgpIpAddressItem
		customBgpIpAddressList[customBgpIpAddressIndex] = customBgpIpAddressItem
	}
	destination.CustomBgpIpAddresses = customBgpIpAddressList

	// DefaultBgpIpAddresses
	defaultBgpIpAddressList := make([]string, len(ipConfigurationBgpPeeringAddressStatus.DefaultBgpIpAddresses))
	for defaultBgpIpAddressIndex, defaultBgpIpAddressItem := range ipConfigurationBgpPeeringAddressStatus.DefaultBgpIpAddresses {
		// Shadow the loop variable to avoid aliasing
		defaultBgpIpAddressItem := defaultBgpIpAddressItem
		defaultBgpIpAddressList[defaultBgpIpAddressIndex] = defaultBgpIpAddressItem
	}
	destination.DefaultBgpIpAddresses = defaultBgpIpAddressList

	// IpconfigurationId
	if ipConfigurationBgpPeeringAddressStatus.IpconfigurationId != nil {
		ipconfigurationId := *ipConfigurationBgpPeeringAddressStatus.IpconfigurationId
		destination.IpconfigurationId = &ipconfigurationId
	} else {
		destination.IpconfigurationId = nil
	}

	// TunnelIpAddresses
	tunnelIpAddressList := make([]string, len(ipConfigurationBgpPeeringAddressStatus.TunnelIpAddresses))
	for tunnelIpAddressIndex, tunnelIpAddressItem := range ipConfigurationBgpPeeringAddressStatus.TunnelIpAddresses {
		// Shadow the loop variable to avoid aliasing
		tunnelIpAddressItem := tunnelIpAddressItem
		tunnelIpAddressList[tunnelIpAddressIndex] = tunnelIpAddressItem
	}
	destination.TunnelIpAddresses = tunnelIpAddressList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/IpsecPolicy
type IpsecPolicy struct {
	// +kubebuilder:validation:Required
	//DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup IpsecPolicyDhGroup `json:"dhGroup"`

	// +kubebuilder:validation:Required
	//IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption IpsecPolicyIkeEncryption `json:"ikeEncryption"`

	// +kubebuilder:validation:Required
	//IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity IpsecPolicyIkeIntegrity `json:"ikeIntegrity"`

	// +kubebuilder:validation:Required
	//IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption IpsecPolicyIpsecEncryption `json:"ipsecEncryption"`

	// +kubebuilder:validation:Required
	//IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity IpsecPolicyIpsecIntegrity `json:"ipsecIntegrity"`

	// +kubebuilder:validation:Required
	//PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup IpsecPolicyPfsGroup `json:"pfsGroup"`

	// +kubebuilder:validation:Required
	//SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes int `json:"saDataSizeKilobytes"`

	// +kubebuilder:validation:Required
	//SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds int `json:"saLifeTimeSeconds"`
}

var _ genruntime.ARMTransformer = &IpsecPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipsecPolicy *IpsecPolicy) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if ipsecPolicy == nil {
		return nil, nil
	}
	var result IpsecPolicyARM

	// Set property ‘DhGroup’:
	result.DhGroup = ipsecPolicy.DhGroup

	// Set property ‘IkeEncryption’:
	result.IkeEncryption = ipsecPolicy.IkeEncryption

	// Set property ‘IkeIntegrity’:
	result.IkeIntegrity = ipsecPolicy.IkeIntegrity

	// Set property ‘IpsecEncryption’:
	result.IpsecEncryption = ipsecPolicy.IpsecEncryption

	// Set property ‘IpsecIntegrity’:
	result.IpsecIntegrity = ipsecPolicy.IpsecIntegrity

	// Set property ‘PfsGroup’:
	result.PfsGroup = ipsecPolicy.PfsGroup

	// Set property ‘SaDataSizeKilobytes’:
	result.SaDataSizeKilobytes = ipsecPolicy.SaDataSizeKilobytes

	// Set property ‘SaLifeTimeSeconds’:
	result.SaLifeTimeSeconds = ipsecPolicy.SaLifeTimeSeconds
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipsecPolicy *IpsecPolicy) CreateEmptyARMValue() interface{} {
	return IpsecPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipsecPolicy *IpsecPolicy) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicyARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	ipsecPolicy.DhGroup = typedInput.DhGroup

	// Set property ‘IkeEncryption’:
	ipsecPolicy.IkeEncryption = typedInput.IkeEncryption

	// Set property ‘IkeIntegrity’:
	ipsecPolicy.IkeIntegrity = typedInput.IkeIntegrity

	// Set property ‘IpsecEncryption’:
	ipsecPolicy.IpsecEncryption = typedInput.IpsecEncryption

	// Set property ‘IpsecIntegrity’:
	ipsecPolicy.IpsecIntegrity = typedInput.IpsecIntegrity

	// Set property ‘PfsGroup’:
	ipsecPolicy.PfsGroup = typedInput.PfsGroup

	// Set property ‘SaDataSizeKilobytes’:
	ipsecPolicy.SaDataSizeKilobytes = typedInput.SaDataSizeKilobytes

	// Set property ‘SaLifeTimeSeconds’:
	ipsecPolicy.SaLifeTimeSeconds = typedInput.SaLifeTimeSeconds

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicy populates our IpsecPolicy from the provided source IpsecPolicy
func (ipsecPolicy *IpsecPolicy) AssignPropertiesFromIpsecPolicy(source *v1alpha1api20201101storage.IpsecPolicy) error {

	// DhGroup
	if source.DhGroup != nil {
		ipsecPolicy.DhGroup = IpsecPolicyDhGroup(*source.DhGroup)
	} else {
		ipsecPolicy.DhGroup = ""
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		ipsecPolicy.IkeEncryption = IpsecPolicyIkeEncryption(*source.IkeEncryption)
	} else {
		ipsecPolicy.IkeEncryption = ""
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		ipsecPolicy.IkeIntegrity = IpsecPolicyIkeIntegrity(*source.IkeIntegrity)
	} else {
		ipsecPolicy.IkeIntegrity = ""
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		ipsecPolicy.IpsecEncryption = IpsecPolicyIpsecEncryption(*source.IpsecEncryption)
	} else {
		ipsecPolicy.IpsecEncryption = ""
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		ipsecPolicy.IpsecIntegrity = IpsecPolicyIpsecIntegrity(*source.IpsecIntegrity)
	} else {
		ipsecPolicy.IpsecIntegrity = ""
	}

	// PfsGroup
	if source.PfsGroup != nil {
		ipsecPolicy.PfsGroup = IpsecPolicyPfsGroup(*source.PfsGroup)
	} else {
		ipsecPolicy.PfsGroup = ""
	}

	// SaDataSizeKilobytes
	if source.SaDataSizeKilobytes != nil {
		ipsecPolicy.SaDataSizeKilobytes = *source.SaDataSizeKilobytes
	} else {
		ipsecPolicy.SaDataSizeKilobytes = 0
	}

	// SaLifeTimeSeconds
	if source.SaLifeTimeSeconds != nil {
		ipsecPolicy.SaLifeTimeSeconds = *source.SaLifeTimeSeconds
	} else {
		ipsecPolicy.SaLifeTimeSeconds = 0
	}

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicy populates the provided destination IpsecPolicy from our IpsecPolicy
func (ipsecPolicy *IpsecPolicy) AssignPropertiesToIpsecPolicy(destination *v1alpha1api20201101storage.IpsecPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	dhGroup := string(ipsecPolicy.DhGroup)
	destination.DhGroup = &dhGroup

	// IkeEncryption
	ikeEncryption := string(ipsecPolicy.IkeEncryption)
	destination.IkeEncryption = &ikeEncryption

	// IkeIntegrity
	ikeIntegrity := string(ipsecPolicy.IkeIntegrity)
	destination.IkeIntegrity = &ikeIntegrity

	// IpsecEncryption
	ipsecEncryption := string(ipsecPolicy.IpsecEncryption)
	destination.IpsecEncryption = &ipsecEncryption

	// IpsecIntegrity
	ipsecIntegrity := string(ipsecPolicy.IpsecIntegrity)
	destination.IpsecIntegrity = &ipsecIntegrity

	// PfsGroup
	pfsGroup := string(ipsecPolicy.PfsGroup)
	destination.PfsGroup = &pfsGroup

	// SaDataSizeKilobytes
	saDataSizeKilobyte := ipsecPolicy.SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = &saDataSizeKilobyte

	// SaLifeTimeSeconds
	saLifeTimeSecond := ipsecPolicy.SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = &saLifeTimeSecond

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type IpsecPolicy_Status struct {
	// +kubebuilder:validation:Required
	//DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup DhGroup_Status `json:"dhGroup"`

	// +kubebuilder:validation:Required
	//IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption IkeEncryption_Status `json:"ikeEncryption"`

	// +kubebuilder:validation:Required
	//IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity IkeIntegrity_Status `json:"ikeIntegrity"`

	// +kubebuilder:validation:Required
	//IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption IpsecEncryption_Status `json:"ipsecEncryption"`

	// +kubebuilder:validation:Required
	//IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity IpsecIntegrity_Status `json:"ipsecIntegrity"`

	// +kubebuilder:validation:Required
	//PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup PfsGroup_Status `json:"pfsGroup"`

	// +kubebuilder:validation:Required
	//SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes int `json:"saDataSizeKilobytes"`

	// +kubebuilder:validation:Required
	//SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds int `json:"saLifeTimeSeconds"`
}

var _ genruntime.FromARMConverter = &IpsecPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipsecPolicyStatus *IpsecPolicy_Status) CreateEmptyARMValue() interface{} {
	return IpsecPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipsecPolicyStatus *IpsecPolicy_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	ipsecPolicyStatus.DhGroup = typedInput.DhGroup

	// Set property ‘IkeEncryption’:
	ipsecPolicyStatus.IkeEncryption = typedInput.IkeEncryption

	// Set property ‘IkeIntegrity’:
	ipsecPolicyStatus.IkeIntegrity = typedInput.IkeIntegrity

	// Set property ‘IpsecEncryption’:
	ipsecPolicyStatus.IpsecEncryption = typedInput.IpsecEncryption

	// Set property ‘IpsecIntegrity’:
	ipsecPolicyStatus.IpsecIntegrity = typedInput.IpsecIntegrity

	// Set property ‘PfsGroup’:
	ipsecPolicyStatus.PfsGroup = typedInput.PfsGroup

	// Set property ‘SaDataSizeKilobytes’:
	ipsecPolicyStatus.SaDataSizeKilobytes = typedInput.SaDataSizeKilobytes

	// Set property ‘SaLifeTimeSeconds’:
	ipsecPolicyStatus.SaLifeTimeSeconds = typedInput.SaLifeTimeSeconds

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicyStatus populates our IpsecPolicy_Status from the provided source IpsecPolicy_Status
func (ipsecPolicyStatus *IpsecPolicy_Status) AssignPropertiesFromIpsecPolicyStatus(source *v1alpha1api20201101storage.IpsecPolicy_Status) error {

	// DhGroup
	if source.DhGroup != nil {
		ipsecPolicyStatus.DhGroup = DhGroup_Status(*source.DhGroup)
	} else {
		ipsecPolicyStatus.DhGroup = ""
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		ipsecPolicyStatus.IkeEncryption = IkeEncryption_Status(*source.IkeEncryption)
	} else {
		ipsecPolicyStatus.IkeEncryption = ""
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		ipsecPolicyStatus.IkeIntegrity = IkeIntegrity_Status(*source.IkeIntegrity)
	} else {
		ipsecPolicyStatus.IkeIntegrity = ""
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		ipsecPolicyStatus.IpsecEncryption = IpsecEncryption_Status(*source.IpsecEncryption)
	} else {
		ipsecPolicyStatus.IpsecEncryption = ""
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		ipsecPolicyStatus.IpsecIntegrity = IpsecIntegrity_Status(*source.IpsecIntegrity)
	} else {
		ipsecPolicyStatus.IpsecIntegrity = ""
	}

	// PfsGroup
	if source.PfsGroup != nil {
		ipsecPolicyStatus.PfsGroup = PfsGroup_Status(*source.PfsGroup)
	} else {
		ipsecPolicyStatus.PfsGroup = ""
	}

	// SaDataSizeKilobytes
	if source.SaDataSizeKilobytes != nil {
		ipsecPolicyStatus.SaDataSizeKilobytes = *source.SaDataSizeKilobytes
	} else {
		ipsecPolicyStatus.SaDataSizeKilobytes = 0
	}

	// SaLifeTimeSeconds
	if source.SaLifeTimeSeconds != nil {
		ipsecPolicyStatus.SaLifeTimeSeconds = *source.SaLifeTimeSeconds
	} else {
		ipsecPolicyStatus.SaLifeTimeSeconds = 0
	}

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicyStatus populates the provided destination IpsecPolicy_Status from our IpsecPolicy_Status
func (ipsecPolicyStatus *IpsecPolicy_Status) AssignPropertiesToIpsecPolicyStatus(destination *v1alpha1api20201101storage.IpsecPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	dhGroup := string(ipsecPolicyStatus.DhGroup)
	destination.DhGroup = &dhGroup

	// IkeEncryption
	ikeEncryption := string(ipsecPolicyStatus.IkeEncryption)
	destination.IkeEncryption = &ikeEncryption

	// IkeIntegrity
	ikeIntegrity := string(ipsecPolicyStatus.IkeIntegrity)
	destination.IkeIntegrity = &ikeIntegrity

	// IpsecEncryption
	ipsecEncryption := string(ipsecPolicyStatus.IpsecEncryption)
	destination.IpsecEncryption = &ipsecEncryption

	// IpsecIntegrity
	ipsecIntegrity := string(ipsecPolicyStatus.IpsecIntegrity)
	destination.IpsecIntegrity = &ipsecIntegrity

	// PfsGroup
	pfsGroup := string(ipsecPolicyStatus.PfsGroup)
	destination.PfsGroup = &pfsGroup

	// SaDataSizeKilobytes
	saDataSizeKilobyte := ipsecPolicyStatus.SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = &saDataSizeKilobyte

	// SaLifeTimeSeconds
	saLifeTimeSecond := ipsecPolicyStatus.SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = &saLifeTimeSecond

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/RadiusServer
type RadiusServer struct {
	// +kubebuilder:validation:Required
	//RadiusServerAddress: The address of this radius server.
	RadiusServerAddress string `json:"radiusServerAddress"`

	//RadiusServerScore: The initial score assigned to this radius server.
	RadiusServerScore *int `json:"radiusServerScore,omitempty"`

	//RadiusServerSecret: The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.ARMTransformer = &RadiusServer{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (radiusServer *RadiusServer) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if radiusServer == nil {
		return nil, nil
	}
	var result RadiusServerARM

	// Set property ‘RadiusServerAddress’:
	result.RadiusServerAddress = radiusServer.RadiusServerAddress

	// Set property ‘RadiusServerScore’:
	if radiusServer.RadiusServerScore != nil {
		radiusServerScore := *radiusServer.RadiusServerScore
		result.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if radiusServer.RadiusServerSecret != nil {
		radiusServerSecret := *radiusServer.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (radiusServer *RadiusServer) CreateEmptyARMValue() interface{} {
	return RadiusServerARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (radiusServer *RadiusServer) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServerARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServerARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	radiusServer.RadiusServerAddress = typedInput.RadiusServerAddress

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		radiusServer.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		radiusServer.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServer populates our RadiusServer from the provided source RadiusServer
func (radiusServer *RadiusServer) AssignPropertiesFromRadiusServer(source *v1alpha1api20201101storage.RadiusServer) error {

	// RadiusServerAddress
	if source.RadiusServerAddress != nil {
		radiusServer.RadiusServerAddress = *source.RadiusServerAddress
	} else {
		radiusServer.RadiusServerAddress = ""
	}

	// RadiusServerScore
	if source.RadiusServerScore != nil {
		radiusServerScore := *source.RadiusServerScore
		radiusServer.RadiusServerScore = &radiusServerScore
	} else {
		radiusServer.RadiusServerScore = nil
	}

	// RadiusServerSecret
	if source.RadiusServerSecret != nil {
		radiusServerSecret := *source.RadiusServerSecret
		radiusServer.RadiusServerSecret = &radiusServerSecret
	} else {
		radiusServer.RadiusServerSecret = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRadiusServer populates the provided destination RadiusServer from our RadiusServer
func (radiusServer *RadiusServer) AssignPropertiesToRadiusServer(destination *v1alpha1api20201101storage.RadiusServer) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	radiusServerAddress := radiusServer.RadiusServerAddress
	destination.RadiusServerAddress = &radiusServerAddress

	// RadiusServerScore
	if radiusServer.RadiusServerScore != nil {
		radiusServerScore := *radiusServer.RadiusServerScore
		destination.RadiusServerScore = &radiusServerScore
	} else {
		destination.RadiusServerScore = nil
	}

	// RadiusServerSecret
	if radiusServer.RadiusServerSecret != nil {
		radiusServerSecret := *radiusServer.RadiusServerSecret
		destination.RadiusServerSecret = &radiusServerSecret
	} else {
		destination.RadiusServerSecret = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type RadiusServer_Status struct {
	// +kubebuilder:validation:Required
	//RadiusServerAddress: The address of this radius server.
	RadiusServerAddress string `json:"radiusServerAddress"`

	//RadiusServerScore: The initial score assigned to this radius server.
	RadiusServerScore *int `json:"radiusServerScore,omitempty"`

	//RadiusServerSecret: The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.FromARMConverter = &RadiusServer_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (radiusServerStatus *RadiusServer_Status) CreateEmptyARMValue() interface{} {
	return RadiusServer_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (radiusServerStatus *RadiusServer_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServer_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServer_StatusARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	radiusServerStatus.RadiusServerAddress = typedInput.RadiusServerAddress

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		radiusServerStatus.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		radiusServerStatus.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServerStatus populates our RadiusServer_Status from the provided source RadiusServer_Status
func (radiusServerStatus *RadiusServer_Status) AssignPropertiesFromRadiusServerStatus(source *v1alpha1api20201101storage.RadiusServer_Status) error {

	// RadiusServerAddress
	if source.RadiusServerAddress != nil {
		radiusServerStatus.RadiusServerAddress = *source.RadiusServerAddress
	} else {
		radiusServerStatus.RadiusServerAddress = ""
	}

	// RadiusServerScore
	if source.RadiusServerScore != nil {
		radiusServerScore := *source.RadiusServerScore
		radiusServerStatus.RadiusServerScore = &radiusServerScore
	} else {
		radiusServerStatus.RadiusServerScore = nil
	}

	// RadiusServerSecret
	if source.RadiusServerSecret != nil {
		radiusServerSecret := *source.RadiusServerSecret
		radiusServerStatus.RadiusServerSecret = &radiusServerSecret
	} else {
		radiusServerStatus.RadiusServerSecret = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRadiusServerStatus populates the provided destination RadiusServer_Status from our RadiusServer_Status
func (radiusServerStatus *RadiusServer_Status) AssignPropertiesToRadiusServerStatus(destination *v1alpha1api20201101storage.RadiusServer_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	radiusServerAddress := radiusServerStatus.RadiusServerAddress
	destination.RadiusServerAddress = &radiusServerAddress

	// RadiusServerScore
	if radiusServerStatus.RadiusServerScore != nil {
		radiusServerScore := *radiusServerStatus.RadiusServerScore
		destination.RadiusServerScore = &radiusServerScore
	} else {
		destination.RadiusServerScore = nil
	}

	// RadiusServerSecret
	if radiusServerStatus.RadiusServerSecret != nil {
		radiusServerSecret := *radiusServerStatus.RadiusServerSecret
		destination.RadiusServerSecret = &radiusServerSecret
	} else {
		destination.RadiusServerSecret = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Dynamic","Static"}
type VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod string

const (
	VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethodDynamic = VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod("Dynamic")
	VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethodStatic  = VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod("Static")
)

// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySkuName string

const (
	VirtualNetworkGatewaySkuNameBasic            = VirtualNetworkGatewaySkuName("Basic")
	VirtualNetworkGatewaySkuNameErGw1AZ          = VirtualNetworkGatewaySkuName("ErGw1AZ")
	VirtualNetworkGatewaySkuNameErGw2AZ          = VirtualNetworkGatewaySkuName("ErGw2AZ")
	VirtualNetworkGatewaySkuNameErGw3AZ          = VirtualNetworkGatewaySkuName("ErGw3AZ")
	VirtualNetworkGatewaySkuNameHighPerformance  = VirtualNetworkGatewaySkuName("HighPerformance")
	VirtualNetworkGatewaySkuNameStandard         = VirtualNetworkGatewaySkuName("Standard")
	VirtualNetworkGatewaySkuNameUltraPerformance = VirtualNetworkGatewaySkuName("UltraPerformance")
	VirtualNetworkGatewaySkuNameVpnGw1           = VirtualNetworkGatewaySkuName("VpnGw1")
	VirtualNetworkGatewaySkuNameVpnGw1AZ         = VirtualNetworkGatewaySkuName("VpnGw1AZ")
	VirtualNetworkGatewaySkuNameVpnGw2           = VirtualNetworkGatewaySkuName("VpnGw2")
	VirtualNetworkGatewaySkuNameVpnGw2AZ         = VirtualNetworkGatewaySkuName("VpnGw2AZ")
	VirtualNetworkGatewaySkuNameVpnGw3           = VirtualNetworkGatewaySkuName("VpnGw3")
	VirtualNetworkGatewaySkuNameVpnGw3AZ         = VirtualNetworkGatewaySkuName("VpnGw3AZ")
	VirtualNetworkGatewaySkuNameVpnGw4           = VirtualNetworkGatewaySkuName("VpnGw4")
	VirtualNetworkGatewaySkuNameVpnGw4AZ         = VirtualNetworkGatewaySkuName("VpnGw4AZ")
	VirtualNetworkGatewaySkuNameVpnGw5           = VirtualNetworkGatewaySkuName("VpnGw5")
	VirtualNetworkGatewaySkuNameVpnGw5AZ         = VirtualNetworkGatewaySkuName("VpnGw5AZ")
)

type VirtualNetworkGatewaySkuStatusName string

const (
	VirtualNetworkGatewaySkuStatusNameBasic            = VirtualNetworkGatewaySkuStatusName("Basic")
	VirtualNetworkGatewaySkuStatusNameErGw1AZ          = VirtualNetworkGatewaySkuStatusName("ErGw1AZ")
	VirtualNetworkGatewaySkuStatusNameErGw2AZ          = VirtualNetworkGatewaySkuStatusName("ErGw2AZ")
	VirtualNetworkGatewaySkuStatusNameErGw3AZ          = VirtualNetworkGatewaySkuStatusName("ErGw3AZ")
	VirtualNetworkGatewaySkuStatusNameHighPerformance  = VirtualNetworkGatewaySkuStatusName("HighPerformance")
	VirtualNetworkGatewaySkuStatusNameStandard         = VirtualNetworkGatewaySkuStatusName("Standard")
	VirtualNetworkGatewaySkuStatusNameUltraPerformance = VirtualNetworkGatewaySkuStatusName("UltraPerformance")
	VirtualNetworkGatewaySkuStatusNameVpnGw1           = VirtualNetworkGatewaySkuStatusName("VpnGw1")
	VirtualNetworkGatewaySkuStatusNameVpnGw1AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw1AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw2           = VirtualNetworkGatewaySkuStatusName("VpnGw2")
	VirtualNetworkGatewaySkuStatusNameVpnGw2AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw2AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw3           = VirtualNetworkGatewaySkuStatusName("VpnGw3")
	VirtualNetworkGatewaySkuStatusNameVpnGw3AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw3AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw4           = VirtualNetworkGatewaySkuStatusName("VpnGw4")
	VirtualNetworkGatewaySkuStatusNameVpnGw4AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw4AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw5           = VirtualNetworkGatewaySkuStatusName("VpnGw5")
	VirtualNetworkGatewaySkuStatusNameVpnGw5AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw5AZ")
)

type VirtualNetworkGatewaySkuStatusTier string

const (
	VirtualNetworkGatewaySkuStatusTierBasic            = VirtualNetworkGatewaySkuStatusTier("Basic")
	VirtualNetworkGatewaySkuStatusTierErGw1AZ          = VirtualNetworkGatewaySkuStatusTier("ErGw1AZ")
	VirtualNetworkGatewaySkuStatusTierErGw2AZ          = VirtualNetworkGatewaySkuStatusTier("ErGw2AZ")
	VirtualNetworkGatewaySkuStatusTierErGw3AZ          = VirtualNetworkGatewaySkuStatusTier("ErGw3AZ")
	VirtualNetworkGatewaySkuStatusTierHighPerformance  = VirtualNetworkGatewaySkuStatusTier("HighPerformance")
	VirtualNetworkGatewaySkuStatusTierStandard         = VirtualNetworkGatewaySkuStatusTier("Standard")
	VirtualNetworkGatewaySkuStatusTierUltraPerformance = VirtualNetworkGatewaySkuStatusTier("UltraPerformance")
	VirtualNetworkGatewaySkuStatusTierVpnGw1           = VirtualNetworkGatewaySkuStatusTier("VpnGw1")
	VirtualNetworkGatewaySkuStatusTierVpnGw1AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw1AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw2           = VirtualNetworkGatewaySkuStatusTier("VpnGw2")
	VirtualNetworkGatewaySkuStatusTierVpnGw2AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw2AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw3           = VirtualNetworkGatewaySkuStatusTier("VpnGw3")
	VirtualNetworkGatewaySkuStatusTierVpnGw3AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw3AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw4           = VirtualNetworkGatewaySkuStatusTier("VpnGw4")
	VirtualNetworkGatewaySkuStatusTierVpnGw4AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw4AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw5           = VirtualNetworkGatewaySkuStatusTier("VpnGw5")
	VirtualNetworkGatewaySkuStatusTierVpnGw5AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw5AZ")
)

// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySkuTier string

const (
	VirtualNetworkGatewaySkuTierBasic            = VirtualNetworkGatewaySkuTier("Basic")
	VirtualNetworkGatewaySkuTierErGw1AZ          = VirtualNetworkGatewaySkuTier("ErGw1AZ")
	VirtualNetworkGatewaySkuTierErGw2AZ          = VirtualNetworkGatewaySkuTier("ErGw2AZ")
	VirtualNetworkGatewaySkuTierErGw3AZ          = VirtualNetworkGatewaySkuTier("ErGw3AZ")
	VirtualNetworkGatewaySkuTierHighPerformance  = VirtualNetworkGatewaySkuTier("HighPerformance")
	VirtualNetworkGatewaySkuTierStandard         = VirtualNetworkGatewaySkuTier("Standard")
	VirtualNetworkGatewaySkuTierUltraPerformance = VirtualNetworkGatewaySkuTier("UltraPerformance")
	VirtualNetworkGatewaySkuTierVpnGw1           = VirtualNetworkGatewaySkuTier("VpnGw1")
	VirtualNetworkGatewaySkuTierVpnGw1AZ         = VirtualNetworkGatewaySkuTier("VpnGw1AZ")
	VirtualNetworkGatewaySkuTierVpnGw2           = VirtualNetworkGatewaySkuTier("VpnGw2")
	VirtualNetworkGatewaySkuTierVpnGw2AZ         = VirtualNetworkGatewaySkuTier("VpnGw2AZ")
	VirtualNetworkGatewaySkuTierVpnGw3           = VirtualNetworkGatewaySkuTier("VpnGw3")
	VirtualNetworkGatewaySkuTierVpnGw3AZ         = VirtualNetworkGatewaySkuTier("VpnGw3AZ")
	VirtualNetworkGatewaySkuTierVpnGw4           = VirtualNetworkGatewaySkuTier("VpnGw4")
	VirtualNetworkGatewaySkuTierVpnGw4AZ         = VirtualNetworkGatewaySkuTier("VpnGw4AZ")
	VirtualNetworkGatewaySkuTierVpnGw5           = VirtualNetworkGatewaySkuTier("VpnGw5")
	VirtualNetworkGatewaySkuTierVpnGw5AZ         = VirtualNetworkGatewaySkuTier("VpnGw5AZ")
)

// +kubebuilder:validation:Enum={"AAD","Certificate","Radius"}
type VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypesAAD         = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("AAD")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypesCertificate = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("Certificate")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypesRadius      = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("Radius")
)

// +kubebuilder:validation:Enum={"IkeV2","OpenVPN","SSTP"}
type VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocolsIkeV2   = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("IkeV2")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocolsOpenVPN = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("OpenVPN")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocolsSSTP    = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("SSTP")
)

type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates struct {
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Thumbprint: The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates == nil {
		return nil, nil
	}
	var result VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM

	// Set property ‘Name’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name != nil {
		name := *virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint != nil {
		result.Properties = &VpnClientRevokedCertificatePropertiesFormatARM{}
	}
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint != nil {
		thumbprint := *virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint
		result.Properties.Thumbprint = &thumbprint
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name = &name
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(source *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name = &name
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name = nil
	}

	// Thumbprint
	if source.Thumbprint != nil {
		thumbprint := *source.Thumbprint
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint = &thumbprint
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(destination *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name != nil {
		name := *virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Thumbprint
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint != nil {
		thumbprint := *virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates.Thumbprint
		destination.Thumbprint = &thumbprint
	} else {
		destination.Thumbprint = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates struct {
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	//PublicCertData: The certificate public data.
	PublicCertData string `json:"publicCertData"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates == nil {
		return nil, nil
	}
	var result VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM

	// Set property ‘Name’:
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name != nil {
		name := *virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	result.Properties.PublicCertData = virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.PublicCertData
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) CreateEmptyARMValue() interface{} {
	return VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name = &name
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.PublicCertData = typedInput.Properties.PublicCertData

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(source *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name = &name
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name = nil
	}

	// PublicCertData
	if source.PublicCertData != nil {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.PublicCertData = *source.PublicCertData
	} else {
		virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.PublicCertData = ""
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
func (virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(destination *v1alpha1api20201101storage.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name != nil {
		name := *virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PublicCertData
	publicCertDatum := virtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates.PublicCertData
	destination.PublicCertData = &publicCertDatum

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type VpnClientConfigurationStatusVpnAuthenticationTypes string

const (
	VpnClientConfigurationStatusVpnAuthenticationTypesAAD         = VpnClientConfigurationStatusVpnAuthenticationTypes("AAD")
	VpnClientConfigurationStatusVpnAuthenticationTypesCertificate = VpnClientConfigurationStatusVpnAuthenticationTypes("Certificate")
	VpnClientConfigurationStatusVpnAuthenticationTypesRadius      = VpnClientConfigurationStatusVpnAuthenticationTypes("Radius")
)

type VpnClientConfigurationStatusVpnClientProtocols string

const (
	VpnClientConfigurationStatusVpnClientProtocolsIkeV2   = VpnClientConfigurationStatusVpnClientProtocols("IkeV2")
	VpnClientConfigurationStatusVpnClientProtocolsOpenVPN = VpnClientConfigurationStatusVpnClientProtocols("OpenVPN")
	VpnClientConfigurationStatusVpnClientProtocolsSSTP    = VpnClientConfigurationStatusVpnClientProtocols("SSTP")
)

//Generated from:
type VpnClientRevokedCertificate_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the VPN client revoked certificate
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//Thumbprint: The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientRevokedCertificate_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vpnClientRevokedCertificateStatus *VpnClientRevokedCertificate_Status) CreateEmptyARMValue() interface{} {
	return VpnClientRevokedCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vpnClientRevokedCertificateStatus *VpnClientRevokedCertificate_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRevokedCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRevokedCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		vpnClientRevokedCertificateStatus.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		vpnClientRevokedCertificateStatus.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		vpnClientRevokedCertificateStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			vpnClientRevokedCertificateStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			vpnClientRevokedCertificateStatus.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRevokedCertificateStatus populates our VpnClientRevokedCertificate_Status from the provided source VpnClientRevokedCertificate_Status
func (vpnClientRevokedCertificateStatus *VpnClientRevokedCertificate_Status) AssignPropertiesFromVpnClientRevokedCertificateStatus(source *v1alpha1api20201101storage.VpnClientRevokedCertificate_Status) error {

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		vpnClientRevokedCertificateStatus.Etag = &etag
	} else {
		vpnClientRevokedCertificateStatus.Etag = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		vpnClientRevokedCertificateStatus.Id = &id
	} else {
		vpnClientRevokedCertificateStatus.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		vpnClientRevokedCertificateStatus.Name = &name
	} else {
		vpnClientRevokedCertificateStatus.Name = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		vpnClientRevokedCertificateStatus.ProvisioningState = &provisioningState
	} else {
		vpnClientRevokedCertificateStatus.ProvisioningState = nil
	}

	// Thumbprint
	if source.Thumbprint != nil {
		thumbprint := *source.Thumbprint
		vpnClientRevokedCertificateStatus.Thumbprint = &thumbprint
	} else {
		vpnClientRevokedCertificateStatus.Thumbprint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientRevokedCertificateStatus populates the provided destination VpnClientRevokedCertificate_Status from our VpnClientRevokedCertificate_Status
func (vpnClientRevokedCertificateStatus *VpnClientRevokedCertificate_Status) AssignPropertiesToVpnClientRevokedCertificateStatus(destination *v1alpha1api20201101storage.VpnClientRevokedCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	if vpnClientRevokedCertificateStatus.Etag != nil {
		etag := *vpnClientRevokedCertificateStatus.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	if vpnClientRevokedCertificateStatus.Id != nil {
		id := *vpnClientRevokedCertificateStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if vpnClientRevokedCertificateStatus.Name != nil {
		name := *vpnClientRevokedCertificateStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// ProvisioningState
	if vpnClientRevokedCertificateStatus.ProvisioningState != nil {
		provisioningState := string(*vpnClientRevokedCertificateStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Thumbprint
	if vpnClientRevokedCertificateStatus.Thumbprint != nil {
		thumbprint := *vpnClientRevokedCertificateStatus.Thumbprint
		destination.Thumbprint = &thumbprint
	} else {
		destination.Thumbprint = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VpnClientRootCertificate_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the VPN client root certificate
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// +kubebuilder:validation:Required
	//PublicCertData: The certificate public data.
	PublicCertData string `json:"publicCertData"`
}

var _ genruntime.FromARMConverter = &VpnClientRootCertificate_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (vpnClientRootCertificateStatus *VpnClientRootCertificate_Status) CreateEmptyARMValue() interface{} {
	return VpnClientRootCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (vpnClientRootCertificateStatus *VpnClientRootCertificate_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRootCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRootCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		vpnClientRootCertificateStatus.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		vpnClientRootCertificateStatus.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		vpnClientRootCertificateStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties.ProvisioningState != nil {
		provisioningState := *typedInput.Properties.ProvisioningState
		vpnClientRootCertificateStatus.ProvisioningState = &provisioningState
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	vpnClientRootCertificateStatus.PublicCertData = typedInput.Properties.PublicCertData

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRootCertificateStatus populates our VpnClientRootCertificate_Status from the provided source VpnClientRootCertificate_Status
func (vpnClientRootCertificateStatus *VpnClientRootCertificate_Status) AssignPropertiesFromVpnClientRootCertificateStatus(source *v1alpha1api20201101storage.VpnClientRootCertificate_Status) error {

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		vpnClientRootCertificateStatus.Etag = &etag
	} else {
		vpnClientRootCertificateStatus.Etag = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		vpnClientRootCertificateStatus.Id = &id
	} else {
		vpnClientRootCertificateStatus.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		vpnClientRootCertificateStatus.Name = &name
	} else {
		vpnClientRootCertificateStatus.Name = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		vpnClientRootCertificateStatus.ProvisioningState = &provisioningState
	} else {
		vpnClientRootCertificateStatus.ProvisioningState = nil
	}

	// PublicCertData
	if source.PublicCertData != nil {
		vpnClientRootCertificateStatus.PublicCertData = *source.PublicCertData
	} else {
		vpnClientRootCertificateStatus.PublicCertData = ""
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientRootCertificateStatus populates the provided destination VpnClientRootCertificate_Status from our VpnClientRootCertificate_Status
func (vpnClientRootCertificateStatus *VpnClientRootCertificate_Status) AssignPropertiesToVpnClientRootCertificateStatus(destination *v1alpha1api20201101storage.VpnClientRootCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	if vpnClientRootCertificateStatus.Etag != nil {
		etag := *vpnClientRootCertificateStatus.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	if vpnClientRootCertificateStatus.Id != nil {
		id := *vpnClientRootCertificateStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if vpnClientRootCertificateStatus.Name != nil {
		name := *vpnClientRootCertificateStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// ProvisioningState
	if vpnClientRootCertificateStatus.ProvisioningState != nil {
		provisioningState := string(*vpnClientRootCertificateStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicCertData
	publicCertDatum := vpnClientRootCertificateStatus.PublicCertData
	destination.PublicCertData = &publicCertDatum

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type DhGroup_Status string

const (
	DhGroup_StatusDHGroup1    = DhGroup_Status("DHGroup1")
	DhGroup_StatusDHGroup14   = DhGroup_Status("DHGroup14")
	DhGroup_StatusDHGroup2    = DhGroup_Status("DHGroup2")
	DhGroup_StatusDHGroup2048 = DhGroup_Status("DHGroup2048")
	DhGroup_StatusDHGroup24   = DhGroup_Status("DHGroup24")
	DhGroup_StatusECP256      = DhGroup_Status("ECP256")
	DhGroup_StatusECP384      = DhGroup_Status("ECP384")
	DhGroup_StatusNone        = DhGroup_Status("None")
)

//Generated from:
type IkeEncryption_Status string

const (
	IkeEncryption_StatusAES128    = IkeEncryption_Status("AES128")
	IkeEncryption_StatusAES192    = IkeEncryption_Status("AES192")
	IkeEncryption_StatusAES256    = IkeEncryption_Status("AES256")
	IkeEncryption_StatusDES       = IkeEncryption_Status("DES")
	IkeEncryption_StatusDES3      = IkeEncryption_Status("DES3")
	IkeEncryption_StatusGCMAES128 = IkeEncryption_Status("GCMAES128")
	IkeEncryption_StatusGCMAES256 = IkeEncryption_Status("GCMAES256")
)

//Generated from:
type IkeIntegrity_Status string

const (
	IkeIntegrity_StatusGCMAES128 = IkeIntegrity_Status("GCMAES128")
	IkeIntegrity_StatusGCMAES256 = IkeIntegrity_Status("GCMAES256")
	IkeIntegrity_StatusMD5       = IkeIntegrity_Status("MD5")
	IkeIntegrity_StatusSHA1      = IkeIntegrity_Status("SHA1")
	IkeIntegrity_StatusSHA256    = IkeIntegrity_Status("SHA256")
	IkeIntegrity_StatusSHA384    = IkeIntegrity_Status("SHA384")
)

//Generated from:
type IpsecEncryption_Status string

const (
	IpsecEncryption_StatusAES128    = IpsecEncryption_Status("AES128")
	IpsecEncryption_StatusAES192    = IpsecEncryption_Status("AES192")
	IpsecEncryption_StatusAES256    = IpsecEncryption_Status("AES256")
	IpsecEncryption_StatusDES       = IpsecEncryption_Status("DES")
	IpsecEncryption_StatusDES3      = IpsecEncryption_Status("DES3")
	IpsecEncryption_StatusGCMAES128 = IpsecEncryption_Status("GCMAES128")
	IpsecEncryption_StatusGCMAES192 = IpsecEncryption_Status("GCMAES192")
	IpsecEncryption_StatusGCMAES256 = IpsecEncryption_Status("GCMAES256")
	IpsecEncryption_StatusNone      = IpsecEncryption_Status("None")
)

//Generated from:
type IpsecIntegrity_Status string

const (
	IpsecIntegrity_StatusGCMAES128 = IpsecIntegrity_Status("GCMAES128")
	IpsecIntegrity_StatusGCMAES192 = IpsecIntegrity_Status("GCMAES192")
	IpsecIntegrity_StatusGCMAES256 = IpsecIntegrity_Status("GCMAES256")
	IpsecIntegrity_StatusMD5       = IpsecIntegrity_Status("MD5")
	IpsecIntegrity_StatusSHA1      = IpsecIntegrity_Status("SHA1")
	IpsecIntegrity_StatusSHA256    = IpsecIntegrity_Status("SHA256")
)

// +kubebuilder:validation:Enum={"DHGroup1","DHGroup14","DHGroup2","DHGroup2048","DHGroup24","ECP256","ECP384","None"}
type IpsecPolicyDhGroup string

const (
	IpsecPolicyDhGroupDHGroup1    = IpsecPolicyDhGroup("DHGroup1")
	IpsecPolicyDhGroupDHGroup14   = IpsecPolicyDhGroup("DHGroup14")
	IpsecPolicyDhGroupDHGroup2    = IpsecPolicyDhGroup("DHGroup2")
	IpsecPolicyDhGroupDHGroup2048 = IpsecPolicyDhGroup("DHGroup2048")
	IpsecPolicyDhGroupDHGroup24   = IpsecPolicyDhGroup("DHGroup24")
	IpsecPolicyDhGroupECP256      = IpsecPolicyDhGroup("ECP256")
	IpsecPolicyDhGroupECP384      = IpsecPolicyDhGroup("ECP384")
	IpsecPolicyDhGroupNone        = IpsecPolicyDhGroup("None")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES256"}
type IpsecPolicyIkeEncryption string

const (
	IpsecPolicyIkeEncryptionAES128    = IpsecPolicyIkeEncryption("AES128")
	IpsecPolicyIkeEncryptionAES192    = IpsecPolicyIkeEncryption("AES192")
	IpsecPolicyIkeEncryptionAES256    = IpsecPolicyIkeEncryption("AES256")
	IpsecPolicyIkeEncryptionDES       = IpsecPolicyIkeEncryption("DES")
	IpsecPolicyIkeEncryptionDES3      = IpsecPolicyIkeEncryption("DES3")
	IpsecPolicyIkeEncryptionGCMAES128 = IpsecPolicyIkeEncryption("GCMAES128")
	IpsecPolicyIkeEncryptionGCMAES256 = IpsecPolicyIkeEncryption("GCMAES256")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES256","MD5","SHA1","SHA256","SHA384"}
type IpsecPolicyIkeIntegrity string

const (
	IpsecPolicyIkeIntegrityGCMAES128 = IpsecPolicyIkeIntegrity("GCMAES128")
	IpsecPolicyIkeIntegrityGCMAES256 = IpsecPolicyIkeIntegrity("GCMAES256")
	IpsecPolicyIkeIntegrityMD5       = IpsecPolicyIkeIntegrity("MD5")
	IpsecPolicyIkeIntegritySHA1      = IpsecPolicyIkeIntegrity("SHA1")
	IpsecPolicyIkeIntegritySHA256    = IpsecPolicyIkeIntegrity("SHA256")
	IpsecPolicyIkeIntegritySHA384    = IpsecPolicyIkeIntegrity("SHA384")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES192","GCMAES256","None"}
type IpsecPolicyIpsecEncryption string

const (
	IpsecPolicyIpsecEncryptionAES128    = IpsecPolicyIpsecEncryption("AES128")
	IpsecPolicyIpsecEncryptionAES192    = IpsecPolicyIpsecEncryption("AES192")
	IpsecPolicyIpsecEncryptionAES256    = IpsecPolicyIpsecEncryption("AES256")
	IpsecPolicyIpsecEncryptionDES       = IpsecPolicyIpsecEncryption("DES")
	IpsecPolicyIpsecEncryptionDES3      = IpsecPolicyIpsecEncryption("DES3")
	IpsecPolicyIpsecEncryptionGCMAES128 = IpsecPolicyIpsecEncryption("GCMAES128")
	IpsecPolicyIpsecEncryptionGCMAES192 = IpsecPolicyIpsecEncryption("GCMAES192")
	IpsecPolicyIpsecEncryptionGCMAES256 = IpsecPolicyIpsecEncryption("GCMAES256")
	IpsecPolicyIpsecEncryptionNone      = IpsecPolicyIpsecEncryption("None")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES192","GCMAES256","MD5","SHA1","SHA256"}
type IpsecPolicyIpsecIntegrity string

const (
	IpsecPolicyIpsecIntegrityGCMAES128 = IpsecPolicyIpsecIntegrity("GCMAES128")
	IpsecPolicyIpsecIntegrityGCMAES192 = IpsecPolicyIpsecIntegrity("GCMAES192")
	IpsecPolicyIpsecIntegrityGCMAES256 = IpsecPolicyIpsecIntegrity("GCMAES256")
	IpsecPolicyIpsecIntegrityMD5       = IpsecPolicyIpsecIntegrity("MD5")
	IpsecPolicyIpsecIntegritySHA1      = IpsecPolicyIpsecIntegrity("SHA1")
	IpsecPolicyIpsecIntegritySHA256    = IpsecPolicyIpsecIntegrity("SHA256")
)

// +kubebuilder:validation:Enum={"ECP256","ECP384","None","PFS1","PFS14","PFS2","PFS2048","PFS24","PFSMM"}
type IpsecPolicyPfsGroup string

const (
	IpsecPolicyPfsGroupECP256  = IpsecPolicyPfsGroup("ECP256")
	IpsecPolicyPfsGroupECP384  = IpsecPolicyPfsGroup("ECP384")
	IpsecPolicyPfsGroupNone    = IpsecPolicyPfsGroup("None")
	IpsecPolicyPfsGroupPFS1    = IpsecPolicyPfsGroup("PFS1")
	IpsecPolicyPfsGroupPFS14   = IpsecPolicyPfsGroup("PFS14")
	IpsecPolicyPfsGroupPFS2    = IpsecPolicyPfsGroup("PFS2")
	IpsecPolicyPfsGroupPFS2048 = IpsecPolicyPfsGroup("PFS2048")
	IpsecPolicyPfsGroupPFS24   = IpsecPolicyPfsGroup("PFS24")
	IpsecPolicyPfsGroupPFSMM   = IpsecPolicyPfsGroup("PFSMM")
)

//Generated from:
type PfsGroup_Status string

const (
	PfsGroup_StatusECP256  = PfsGroup_Status("ECP256")
	PfsGroup_StatusECP384  = PfsGroup_Status("ECP384")
	PfsGroup_StatusNone    = PfsGroup_Status("None")
	PfsGroup_StatusPFS1    = PfsGroup_Status("PFS1")
	PfsGroup_StatusPFS14   = PfsGroup_Status("PFS14")
	PfsGroup_StatusPFS2    = PfsGroup_Status("PFS2")
	PfsGroup_StatusPFS2048 = PfsGroup_Status("PFS2048")
	PfsGroup_StatusPFS24   = PfsGroup_Status("PFS24")
	PfsGroup_StatusPFSMM   = PfsGroup_Status("PFSMM")
)

func init() {
	SchemeBuilder.Register(&VirtualNetworkGateway{}, &VirtualNetworkGatewayList{})
}
