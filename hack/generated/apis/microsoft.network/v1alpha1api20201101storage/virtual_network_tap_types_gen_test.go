// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkTap_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTap, VirtualNetworkTapGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTap runs a test to see if a specific instance of VirtualNetworkTap round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTap(subject VirtualNetworkTap) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap instances for property testing - lazily instantiated by VirtualNetworkTapGenerator()
var virtualNetworkTapGenerator gopter.Gen

// VirtualNetworkTapGenerator returns a generator of VirtualNetworkTap instances for property testing.
func VirtualNetworkTapGenerator() gopter.Gen {
	if virtualNetworkTapGenerator != nil {
		return virtualNetworkTapGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualNetworkTap(generators)
	virtualNetworkTapGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap{}), generators)

	return virtualNetworkTapGenerator
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTap is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTap(gens map[string]gopter.Gen) {
	gens["Spec"] = VirtualNetworkTapsSpecGenerator()
	gens["Status"] = VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
}

func Test_VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded, VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded(subject VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing - lazily
//instantiated by VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
// We first initialize virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded(generators)
	virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded(generators)
	virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return virtualNetworkTapStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["DestinationNetworkInterfaceIPConfiguration"] = gen.PtrOf(NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["NetworkInterfaceTapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
}

func Test_VirtualNetworkTaps_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTaps_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapsSpec, VirtualNetworkTapsSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapsSpec runs a test to see if a specific instance of VirtualNetworkTaps_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapsSpec(subject VirtualNetworkTaps_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTaps_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTaps_Spec instances for property testing - lazily instantiated by
//VirtualNetworkTapsSpecGenerator()
var virtualNetworkTapsSpecGenerator gopter.Gen

// VirtualNetworkTapsSpecGenerator returns a generator of VirtualNetworkTaps_Spec instances for property testing.
// We first initialize virtualNetworkTapsSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapsSpecGenerator() gopter.Gen {
	if virtualNetworkTapsSpecGenerator != nil {
		return virtualNetworkTapsSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpec(generators)
	virtualNetworkTapsSpecGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTaps_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpec(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapsSpec(generators)
	virtualNetworkTapsSpecGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTaps_Spec{}), generators)

	return virtualNetworkTapsSpecGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapsSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapsSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapsSpec(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(SubResourceGenerator())
	gens["DestinationNetworkInterfaceIPConfiguration"] = gen.PtrOf(SubResourceGenerator())
}

func Test_FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded, FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(subject FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing -
//lazily instantiated by FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
// We first initialize frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return frontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["InboundNatPools"] = gen.SliceOf(SubResourceStatusGenerator())
	gens["InboundNatRules"] = gen.SliceOf(SubResourceStatusGenerator())
	gens["LoadBalancingRules"] = gen.SliceOf(SubResourceStatusGenerator())
	gens["OutboundRules"] = gen.SliceOf(SubResourceStatusGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceStatusGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
}

func Test_NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded, NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(subject NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded instances for property
//testing - lazily instantiated by NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
// We first initialize networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return networkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator())
}

func Test_NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbedded, NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbedded(subject NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded instances for property
//testing - lazily instantiated by NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
func NetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbedded(generators)
	networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return networkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded, ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(subject ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded instances for property
//testing - lazily instantiated by
//ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(generators)
	applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(generators)
	applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return applicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddressStatusGenerator())
}

func Test_ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbedded, ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbedded(subject ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing -
//lazily instantiated by ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
func ApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbedded(generators)
	applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return applicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded, BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(subject BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing - lazily
//instantiated by BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
func BackendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(generators)
	backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return backendAddressPoolStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbedded, InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbedded(subject InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing - lazily
//instantiated by InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
func InboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbedded(generators)
	inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return inboundNatRuleStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatus, NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatus runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatus(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status instances for property testing -
//lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatus(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_Status{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatus(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded, PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded(subject PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing - lazily
//instantiated by PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
// We first initialize publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded(generators)
	publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded(generators)
	publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return publicIPAddressStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuStatusGenerator())
}

func Test_Subnet_Status_VirtualNetworkTap_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetworkTap_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusVirtualNetworkTapSubResourceEmbedded, SubnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusVirtualNetworkTapSubResourceEmbedded runs a test to see if a specific instance of Subnet_Status_VirtualNetworkTap_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusVirtualNetworkTapSubResourceEmbedded(subject Subnet_Status_VirtualNetworkTap_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetworkTap_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing - lazily instantiated
//by SubnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator()
var subnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator gopter.Gen

// SubnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator returns a generator of Subnet_Status_VirtualNetworkTap_SubResourceEmbedded instances for property testing.
func SubnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator() gopter.Gen {
	if subnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator != nil {
		return subnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkTapSubResourceEmbedded(generators)
	subnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworkTap_SubResourceEmbedded{}), generators)

	return subnetStatusVirtualNetworkTapSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkTapSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkTapSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddress_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressStatus, ApplicationGatewayBackendAddressStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressStatus runs a test to see if a specific instance of ApplicationGatewayBackendAddress_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressStatus(subject ApplicationGatewayBackendAddress_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_Status instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddressStatusGenerator()
var applicationGatewayBackendAddressStatusGenerator gopter.Gen

// ApplicationGatewayBackendAddressStatusGenerator returns a generator of ApplicationGatewayBackendAddress_Status instances for property testing.
func ApplicationGatewayBackendAddressStatusGenerator() gopter.Gen {
	if applicationGatewayBackendAddressStatusGenerator != nil {
		return applicationGatewayBackendAddressStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatus(generators)
	applicationGatewayBackendAddressStatusGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_Status{}), generators)

	return applicationGatewayBackendAddressStatusGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatus(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
