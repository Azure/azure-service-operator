// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_BatchAccounts_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccounts_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccountsSpecARM, BatchAccountsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccountsSpecARM runs a test to see if a specific instance of BatchAccounts_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccountsSpecARM(subject BatchAccounts_SpecARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual BatchAccounts_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of BatchAccounts_SpecARM instances for property testing - lazily
//instantiated by BatchAccountsSpecARMGenerator()
var batchAccountsSpecARMGenerator gopter.Gen

// BatchAccountsSpecARMGenerator returns a generator of BatchAccounts_SpecARM instances for property testing.
// We first initialize batchAccountsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BatchAccountsSpecARMGenerator() gopter.Gen {
	if batchAccountsSpecARMGenerator != nil {
		return batchAccountsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountsSpecARM(generators)
	batchAccountsSpecARMGenerator = gen.Struct(reflect.TypeOf(BatchAccounts_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountsSpecARM(generators)
	AddRelatedPropertyGeneratorsForBatchAccountsSpecARM(generators)
	batchAccountsSpecARMGenerator = gen.Struct(reflect.TypeOf(BatchAccounts_SpecARM{}), generators)

	return batchAccountsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccountsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccountsSpecARM(gens map[string]gopter.Gen) {
	gens["APIVersion"] = gen.OneConstOf(BatchAccountsSpecAPIVersion20210101)
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.OneConstOf(BatchAccountsSpecTypeMicrosoftBatchBatchAccounts)
}

// AddRelatedPropertyGeneratorsForBatchAccountsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBatchAccountsSpecARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(BatchAccountIdentityARMGenerator())
	gens["Properties"] = BatchAccountCreatePropertiesARMGenerator()
}

func Test_BatchAccountCreatePropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccountCreatePropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccountCreatePropertiesARM, BatchAccountCreatePropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccountCreatePropertiesARM runs a test to see if a specific instance of BatchAccountCreatePropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccountCreatePropertiesARM(subject BatchAccountCreatePropertiesARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual BatchAccountCreatePropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of BatchAccountCreatePropertiesARM instances for property testing -
//lazily instantiated by BatchAccountCreatePropertiesARMGenerator()
var batchAccountCreatePropertiesARMGenerator gopter.Gen

// BatchAccountCreatePropertiesARMGenerator returns a generator of BatchAccountCreatePropertiesARM instances for property testing.
// We first initialize batchAccountCreatePropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BatchAccountCreatePropertiesARMGenerator() gopter.Gen {
	if batchAccountCreatePropertiesARMGenerator != nil {
		return batchAccountCreatePropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountCreatePropertiesARM(generators)
	batchAccountCreatePropertiesARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountCreatePropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountCreatePropertiesARM(generators)
	AddRelatedPropertyGeneratorsForBatchAccountCreatePropertiesARM(generators)
	batchAccountCreatePropertiesARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountCreatePropertiesARM{}), generators)

	return batchAccountCreatePropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccountCreatePropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccountCreatePropertiesARM(gens map[string]gopter.Gen) {
	gens["PoolAllocationMode"] = gen.PtrOf(gen.OneConstOf(BatchAccountCreatePropertiesPoolAllocationModeBatchService, BatchAccountCreatePropertiesPoolAllocationModeUserSubscription))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(BatchAccountCreatePropertiesPublicNetworkAccessDisabled, BatchAccountCreatePropertiesPublicNetworkAccessEnabled))
}

// AddRelatedPropertyGeneratorsForBatchAccountCreatePropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBatchAccountCreatePropertiesARM(gens map[string]gopter.Gen) {
	gens["AutoStorage"] = gen.PtrOf(AutoStorageBasePropertiesARMGenerator())
	gens["Encryption"] = gen.PtrOf(EncryptionPropertiesARMGenerator())
	gens["KeyVaultReference"] = gen.PtrOf(KeyVaultReferenceARMGenerator())
}

func Test_BatchAccountIdentityARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccountIdentityARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccountIdentityARM, BatchAccountIdentityARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccountIdentityARM runs a test to see if a specific instance of BatchAccountIdentityARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccountIdentityARM(subject BatchAccountIdentityARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual BatchAccountIdentityARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of BatchAccountIdentityARM instances for property testing - lazily
//instantiated by BatchAccountIdentityARMGenerator()
var batchAccountIdentityARMGenerator gopter.Gen

// BatchAccountIdentityARMGenerator returns a generator of BatchAccountIdentityARM instances for property testing.
func BatchAccountIdentityARMGenerator() gopter.Gen {
	if batchAccountIdentityARMGenerator != nil {
		return batchAccountIdentityARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountIdentityARM(generators)
	batchAccountIdentityARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountIdentityARM{}), generators)

	return batchAccountIdentityARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccountIdentityARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccountIdentityARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.OneConstOf(BatchAccountIdentityTypeNone, BatchAccountIdentityTypeSystemAssigned, BatchAccountIdentityTypeUserAssigned)
}

func Test_AutoStorageBasePropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoStorageBasePropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoStorageBasePropertiesARM, AutoStorageBasePropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoStorageBasePropertiesARM runs a test to see if a specific instance of AutoStorageBasePropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoStorageBasePropertiesARM(subject AutoStorageBasePropertiesARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual AutoStorageBasePropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of AutoStorageBasePropertiesARM instances for property testing -
//lazily instantiated by AutoStorageBasePropertiesARMGenerator()
var autoStorageBasePropertiesARMGenerator gopter.Gen

// AutoStorageBasePropertiesARMGenerator returns a generator of AutoStorageBasePropertiesARM instances for property testing.
func AutoStorageBasePropertiesARMGenerator() gopter.Gen {
	if autoStorageBasePropertiesARMGenerator != nil {
		return autoStorageBasePropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoStorageBasePropertiesARM(generators)
	autoStorageBasePropertiesARMGenerator = gen.Struct(reflect.TypeOf(AutoStorageBasePropertiesARM{}), generators)

	return autoStorageBasePropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoStorageBasePropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoStorageBasePropertiesARM(gens map[string]gopter.Gen) {
	gens["StorageAccountId"] = gen.AlphaString()
}

func Test_EncryptionPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionPropertiesARM, EncryptionPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionPropertiesARM runs a test to see if a specific instance of EncryptionPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionPropertiesARM(subject EncryptionPropertiesARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual EncryptionPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of EncryptionPropertiesARM instances for property testing - lazily
//instantiated by EncryptionPropertiesARMGenerator()
var encryptionPropertiesARMGenerator gopter.Gen

// EncryptionPropertiesARMGenerator returns a generator of EncryptionPropertiesARM instances for property testing.
// We first initialize encryptionPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionPropertiesARMGenerator() gopter.Gen {
	if encryptionPropertiesARMGenerator != nil {
		return encryptionPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionPropertiesARM(generators)
	encryptionPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EncryptionPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForEncryptionPropertiesARM(generators)
	encryptionPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EncryptionPropertiesARM{}), generators)

	return encryptionPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionPropertiesARM(gens map[string]gopter.Gen) {
	gens["KeySource"] = gen.PtrOf(gen.OneConstOf(EncryptionPropertiesKeySourceMicrosoftBatch, EncryptionPropertiesKeySourceMicrosoftKeyVault))
}

// AddRelatedPropertyGeneratorsForEncryptionPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionPropertiesARM(gens map[string]gopter.Gen) {
	gens["KeyVaultProperties"] = gen.PtrOf(KeyVaultPropertiesARMGenerator())
}

func Test_KeyVaultReferenceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultReferenceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultReferenceARM, KeyVaultReferenceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultReferenceARM runs a test to see if a specific instance of KeyVaultReferenceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultReferenceARM(subject KeyVaultReferenceARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual KeyVaultReferenceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of KeyVaultReferenceARM instances for property testing - lazily
//instantiated by KeyVaultReferenceARMGenerator()
var keyVaultReferenceARMGenerator gopter.Gen

// KeyVaultReferenceARMGenerator returns a generator of KeyVaultReferenceARM instances for property testing.
func KeyVaultReferenceARMGenerator() gopter.Gen {
	if keyVaultReferenceARMGenerator != nil {
		return keyVaultReferenceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultReferenceARM(generators)
	keyVaultReferenceARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultReferenceARM{}), generators)

	return keyVaultReferenceARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultReferenceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultReferenceARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
	gens["Url"] = gen.AlphaString()
}

func Test_KeyVaultPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultPropertiesARM, KeyVaultPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultPropertiesARM runs a test to see if a specific instance of KeyVaultPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultPropertiesARM(subject KeyVaultPropertiesARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual KeyVaultPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of KeyVaultPropertiesARM instances for property testing - lazily
//instantiated by KeyVaultPropertiesARMGenerator()
var keyVaultPropertiesARMGenerator gopter.Gen

// KeyVaultPropertiesARMGenerator returns a generator of KeyVaultPropertiesARM instances for property testing.
func KeyVaultPropertiesARMGenerator() gopter.Gen {
	if keyVaultPropertiesARMGenerator != nil {
		return keyVaultPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultPropertiesARM(generators)
	keyVaultPropertiesARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultPropertiesARM{}), generators)

	return keyVaultPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultPropertiesARM(gens map[string]gopter.Gen) {
	gens["KeyIdentifier"] = gen.PtrOf(gen.AlphaString())
}
