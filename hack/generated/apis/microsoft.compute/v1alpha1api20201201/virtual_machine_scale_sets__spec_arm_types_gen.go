// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

type VirtualMachineScaleSets_SpecARM struct {
	//APIVersion: API Version of the resource type, optional when apiProfile is used
	//on the template
	APIVersion VirtualMachineScaleSetsSpecAPIVersion `json:"apiVersion"`

	//ExtendedLocation: The complex type of the extended location.
	ExtendedLocation *ExtendedLocationARM `json:"extendedLocation,omitempty"`

	//Identity: Identity for the virtual machine scale set.
	Identity *VirtualMachineScaleSetIdentityARM `json:"identity,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	//Name: Name of the resource
	Name string `json:"name"`

	//Plan: Specifies information about the marketplace image used to create the
	//virtual machine. This element is only used for marketplace images. Before you
	//can use a marketplace image from an API, you must enable the image for
	//programmatic use.  In the Azure portal, find the marketplace image that you want
	//to use and then click Want to deploy programmatically, Get Started ->. Enter any
	//required information and then click Save.
	Plan *PlanARM `json:"plan,omitempty"`

	//Properties: Describes the properties of a Virtual Machine Scale Set.
	Properties VirtualMachineScaleSets_Spec_PropertiesARM `json:"properties"`

	//Sku: Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not
	//supported on the hardware the scale set is currently on, you need to deallocate
	//the VMs in the scale set before you modify the SKU name.
	Sku *SkuARM `json:"sku,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type
	Type VirtualMachineScaleSetsSpecType `json:"type"`

	//Zones: The virtual machine scale set zones. NOTE: Availability zones can only be
	//set when you create the scale set
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMResourceSpec = &VirtualMachineScaleSets_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (virtualMachineScaleSetsSpecARM VirtualMachineScaleSets_SpecARM) GetAPIVersion() string {
	return string(virtualMachineScaleSetsSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (virtualMachineScaleSetsSpecARM VirtualMachineScaleSets_SpecARM) GetName() string {
	return virtualMachineScaleSetsSpecARM.Name
}

// GetType returns the Type of the resource
func (virtualMachineScaleSetsSpecARM VirtualMachineScaleSets_SpecARM) GetType() string {
	return string(virtualMachineScaleSetsSpecARM.Type)
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/ExtendedLocation
type ExtendedLocationARM struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType `json:"type,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/Plan
type PlanARM struct {
	//Name: The plan ID.
	Name *string `json:"name,omitempty"`

	//Product: Specifies the product of the image from the marketplace. This is the
	//same value as Offer under the imageReference element.
	Product *string `json:"product,omitempty"`

	//PromotionCode: The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	//Publisher: The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/Sku
type SkuARM struct {
	//Capacity: Specifies the number of virtual machines in the scale set.
	Capacity *int `json:"capacity,omitempty"`

	//Name: The sku name.
	Name *string `json:"name,omitempty"`

	//Tier: Specifies the tier of virtual machines in a scale set.
	//Possible Values:
	//Standard
	//Basic
	Tier *string `json:"tier,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetIdentity
type VirtualMachineScaleSetIdentityARM struct {
	//Type: The type of identity used for the virtual machine scale set. The type
	//'SystemAssigned, UserAssigned' includes both an implicitly created identity and
	//a set of user assigned identities. The type 'None' will remove any identities
	//from the virtual machine scale set.
	Type *VirtualMachineScaleSetIdentityType `json:"type,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-12-01"}
type VirtualMachineScaleSetsSpecAPIVersion string

const VirtualMachineScaleSetsSpecAPIVersion20201201 = VirtualMachineScaleSetsSpecAPIVersion("2020-12-01")

// +kubebuilder:validation:Enum={"Microsoft.Compute/virtualMachineScaleSets"}
type VirtualMachineScaleSetsSpecType string

const VirtualMachineScaleSetsSpecTypeMicrosoftComputeVirtualMachineScaleSets = VirtualMachineScaleSetsSpecType("Microsoft.Compute/virtualMachineScaleSets")

type VirtualMachineScaleSets_Spec_PropertiesARM struct {
	//AdditionalCapabilities: Enables or disables a capability on the virtual machine
	//or virtual machine scale set.
	AdditionalCapabilities *AdditionalCapabilitiesARM `json:"additionalCapabilities,omitempty"`

	//AutomaticRepairsPolicy: Specifies the configuration parameters for automatic
	//repairs on the virtual machine scale set.
	AutomaticRepairsPolicy *AutomaticRepairsPolicyARM `json:"automaticRepairsPolicy,omitempty"`

	//DoNotRunExtensionsOnOverprovisionedVMs: When Overprovision is enabled,
	//extensions are launched only on the requested number of VMs which are finally
	//kept. This property will hence ensure that the extensions do not run on the
	//extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool           `json:"doNotRunExtensionsOnOverprovisionedVMs,omitempty"`
	HostGroup                              *SubResourceARM `json:"hostGroup,omitempty"`

	//OrchestrationMode: Specifies the orchestration mode for the virtual machine
	//scale set.
	OrchestrationMode *VirtualMachineScaleSetsSpecPropertiesOrchestrationMode `json:"orchestrationMode,omitempty"`

	//Overprovision: Specifies whether the Virtual Machine Scale Set should be
	//overprovisioned.
	Overprovision *bool `json:"overprovision,omitempty"`

	//PlatformFaultDomainCount: Fault Domain count for each placement group.
	PlatformFaultDomainCount *int            `json:"platformFaultDomainCount,omitempty"`
	ProximityPlacementGroup  *SubResourceARM `json:"proximityPlacementGroup,omitempty"`

	//ScaleInPolicy: Describes a scale-in policy for a virtual machine scale set.
	ScaleInPolicy *ScaleInPolicyARM `json:"scaleInPolicy,omitempty"`

	//SinglePlacementGroup: When true this limits the scale set to a single placement
	//group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true,
	//it may be modified to false. However, if singlePlacementGroup is false, it may
	//not be modified to true.
	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty"`

	//UpgradePolicy: Describes an upgrade policy - automatic, manual, or rolling.
	UpgradePolicy *UpgradePolicyARM `json:"upgradePolicy,omitempty"`

	//VirtualMachineProfile: Describes a virtual machine scale set virtual machine
	//profile.
	VirtualMachineProfile *VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfileARM `json:"virtualMachineProfile,omitempty"`

	//ZoneBalance: Whether to force strictly even Virtual Machine distribution cross
	//x-zones in case there is zone outage.
	ZoneBalance *bool `json:"zoneBalance,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/AdditionalCapabilities
type AdditionalCapabilitiesARM struct {
	//UltraSSDEnabled: The flag that enables or disables a capability to have one or
	//more managed data disks with UltraSSD_LRS storage account type on the VM or
	//VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a
	//virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `json:"ultraSSDEnabled,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/AutomaticRepairsPolicy
type AutomaticRepairsPolicyARM struct {
	//Enabled: Specifies whether automatic repairs should be enabled on the virtual
	//machine scale set. The default value is false.
	Enabled *bool `json:"enabled,omitempty"`

	//GracePeriod: The amount of time for which automatic repairs are suspended due to
	//a state change on VM. The grace time starts after the state change has
	//completed. This helps avoid premature or accidental repairs. The time duration
	//should be specified in ISO 8601 format. The minimum allowed grace period is 30
	//minutes (PT30M), which is also the default value. The maximum allowed grace
	//period is 90 minutes (PT90M).
	GracePeriod *string `json:"gracePeriod,omitempty"`
}

// +kubebuilder:validation:Enum={"EdgeZone"}
type ExtendedLocationType string

const ExtendedLocationTypeEdgeZone = ExtendedLocationType("EdgeZone")

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/ScaleInPolicy
type ScaleInPolicyARM struct {
	//Rules: The rules to be followed when scaling-in a virtual machine scale set.
	//Possible values are:
	//Default When a virtual machine scale set is scaled in, the scale set will first
	//be balanced across zones if it is a zonal scale set. Then, it will be balanced
	//across Fault Domains as far as possible. Within each Fault Domain, the virtual
	//machines chosen for removal will be the newest ones that are not protected from
	//scale-in.
	//OldestVM When a virtual machine scale set is being scaled-in, the oldest virtual
	//machines that are not protected from scale-in will be chosen for removal. For
	//zonal virtual machine scale sets, the scale set will first be balanced across
	//zones. Within each zone, the oldest virtual machines that are not protected will
	//be chosen for removal.
	//NewestVM When a virtual machine scale set is being scaled-in, the newest virtual
	//machines that are not protected from scale-in will be chosen for removal. For
	//zonal virtual machine scale sets, the scale set will first be balanced across
	//zones. Within each zone, the newest virtual machines that are not protected will
	//be chosen for removal.
	Rules []ScaleInPolicyRules `json:"rules,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/SubResource
type SubResourceARM struct {
	Id *string `json:"id,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/UpgradePolicy
type UpgradePolicyARM struct {
	//AutomaticOSUpgradePolicy: The configuration parameters used for performing
	//automatic OS upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicyARM `json:"automaticOSUpgradePolicy,omitempty"`

	//Mode: Specifies the mode of an upgrade to virtual machines in the scale set.
	//Possible values are:
	//Manual - You  control the application of updates to virtual machines in the
	//scale set. You do this by using the manualUpgrade action.
	//Automatic - All virtual machines in the scale set are  automatically updated at
	//the same time.
	Mode *UpgradePolicyMode `json:"mode,omitempty"`

	//RollingUpgradePolicy: The configuration parameters used while performing a
	//rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicyARM `json:"rollingUpgradePolicy,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned, UserAssigned","UserAssigned"}
type VirtualMachineScaleSetIdentityType string

const (
	VirtualMachineScaleSetIdentityTypeNone                       = VirtualMachineScaleSetIdentityType("None")
	VirtualMachineScaleSetIdentityTypeSystemAssigned             = VirtualMachineScaleSetIdentityType("SystemAssigned")
	VirtualMachineScaleSetIdentityTypeSystemAssignedUserAssigned = VirtualMachineScaleSetIdentityType("SystemAssigned, UserAssigned")
	VirtualMachineScaleSetIdentityTypeUserAssigned               = VirtualMachineScaleSetIdentityType("UserAssigned")
)

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfileARM struct {
	//BillingProfile: Specifies the billing related details of a Azure Spot VM or VMSS.
	//Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfileARM `json:"billingProfile,omitempty"`

	//DiagnosticsProfile: Specifies the boot diagnostic settings state.
	//Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfileARM `json:"diagnosticsProfile,omitempty"`

	//EvictionPolicy: Specifies the eviction policy for the Azure Spot virtual machine
	//and Azure Spot scale set.
	//For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported
	//and the minimum api-version is 2019-03-01.
	//For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the
	//minimum api-version is 2017-10-30-preview.
	EvictionPolicy *VirtualMachineScaleSetsSpecPropertiesVirtualMachineProfileEvictionPolicy `json:"evictionPolicy,omitempty"`

	//ExtensionProfile: Describes a virtual machine scale set extension profile.
	ExtensionProfile *VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_ExtensionProfileARM `json:"extensionProfile,omitempty"`

	//LicenseType: Specifies that the image or disk that is being used was licensed
	//on-premises.
	//Possible values for Windows Server operating system are:
	//Windows_Client
	//Windows_Server
	//Possible values for Linux Server operating system are:
	//RHEL_BYOS (for RHEL)
	//SLES_BYOS (for SUSE)
	//For more information, see [Azure Hybrid Use Benefit for Windows
	//Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)
	//[Azure Hybrid Use Benefit for Linux
	//Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)
	//Minimum api-version: 2015-06-15
	LicenseType *string `json:"licenseType,omitempty"`

	//NetworkProfile: Describes a virtual machine scale set network profile.
	NetworkProfile *VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfileARM `json:"networkProfile,omitempty"`

	//OsProfile: Describes a virtual machine scale set OS profile.
	OsProfile *VirtualMachineScaleSetOSProfileARM `json:"osProfile,omitempty"`

	//Priority: Specifies the priority for the virtual machines in the scale set.
	//Minimum api-version: 2017-10-30-preview.
	Priority               *VirtualMachineScaleSetsSpecPropertiesVirtualMachineProfilePriority `json:"priority,omitempty"`
	ScheduledEventsProfile *ScheduledEventsProfileARM                                          `json:"scheduledEventsProfile,omitempty"`

	//SecurityProfile: Specifies the Security profile settings for the virtual machine
	//or virtual machine scale set.
	SecurityProfile *SecurityProfileARM `json:"securityProfile,omitempty"`

	//StorageProfile: Describes a virtual machine scale set storage profile.
	StorageProfile *VirtualMachineScaleSetStorageProfileARM `json:"storageProfile,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/AutomaticOSUpgradePolicy
type AutomaticOSUpgradePolicyARM struct {
	//DisableAutomaticRollback: Whether OS image rollback feature should be disabled.
	//Default value is false.
	DisableAutomaticRollback *bool `json:"disableAutomaticRollback,omitempty"`

	//EnableAutomaticOSUpgrade: Indicates whether OS upgrades should automatically be
	//applied to scale set instances in a rolling fashion when a newer version of the
	//OS image becomes available. Default value is false.
	//If this is set to true for Windows based scale sets,
	//[enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet)
	//is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool `json:"enableAutomaticOSUpgrade,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/BillingProfile
type BillingProfileARM struct {
	//MaxPrice: Specifies the maximum price you are willing to pay for a Azure Spot
	//VM/VMSS. This price is in US Dollars.
	//This price will be compared with the current Azure Spot price for the VM size.
	//Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS
	//and the operation will only succeed if  the maxPrice is greater than the current
	//Azure Spot price.
	//The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current
	//Azure Spot price goes beyond the maxPrice after creation of VM/VMSS.
	//Possible values are:
	//- Any decimal value greater than zero. Example: 0.01538
	//-1 – indicates default price to be up-to on-demand.
	//You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should
	//not be evicted for price reasons. Also, the default max price is -1 if it is not
	//provided by you.
	//Minimum api-version: 2019-03-01.
	MaxPrice *float64 `json:"maxPrice,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/DiagnosticsProfile
type DiagnosticsProfileARM struct {
	//BootDiagnostics: Boot Diagnostics is a debugging feature which allows you to
	//view Console Output and Screenshot to diagnose VM status.
	//You can easily view the output of your console log.
	//Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsARM `json:"bootDiagnostics,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/RollingUpgradePolicy
type RollingUpgradePolicyARM struct {
	//EnableCrossZoneUpgrade: Allow VMSS to ignore AZ boundaries when constructing
	//upgrade batches. Take into consideration the Update Domain and
	//maxBatchInstancePercent to determine the batch size.
	EnableCrossZoneUpgrade *bool `json:"enableCrossZoneUpgrade,omitempty"`

	//MaxBatchInstancePercent: The maximum percent of total virtual machine instances
	//that will be upgraded simultaneously by the rolling upgrade in one batch. As
	//this is a maximum, unhealthy instances in previous or future batches can cause
	//the percentage of instances in a batch to decrease to ensure higher reliability.
	//The default value for this parameter is 20%.
	MaxBatchInstancePercent *int `json:"maxBatchInstancePercent,omitempty"`

	//MaxUnhealthyInstancePercent: The maximum percentage of the total virtual machine
	//instances in the scale set that can be simultaneously unhealthy, either as a
	//result of being upgraded, or by being found in an unhealthy state by the virtual
	//machine health checks before the rolling upgrade aborts. This constraint will be
	//checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent *int `json:"maxUnhealthyInstancePercent,omitempty"`

	//MaxUnhealthyUpgradedInstancePercent: The maximum percentage of upgraded virtual
	//machine instances that can be found to be in an unhealthy state. This check will
	//happen after each batch is upgraded. If this percentage is ever exceeded, the
	//rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int `json:"maxUnhealthyUpgradedInstancePercent,omitempty"`

	//PauseTimeBetweenBatches: The wait time between completing the update for all
	//virtual machines in one batch and starting the next batch. The time duration
	//should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches *string `json:"pauseTimeBetweenBatches,omitempty"`

	//PrioritizeUnhealthyInstances: Upgrade all unhealthy instances in a scale set
	//before any healthy instances.
	PrioritizeUnhealthyInstances *bool `json:"prioritizeUnhealthyInstances,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/ScheduledEventsProfile
type ScheduledEventsProfileARM struct {
	TerminateNotificationProfile *TerminateNotificationProfileARM `json:"terminateNotificationProfile,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/SecurityProfile
type SecurityProfileARM struct {
	//EncryptionAtHost: This property can be used by user in the request to enable or
	//disable the Host Encryption for the virtual machine or virtual machine scale
	//set. This will enable the encryption for all the disks including Resource/Temp
	//disk at host itself.
	//Default: The Encryption at host will be disabled unless this property is set to
	//true for the resource.
	EncryptionAtHost *bool `json:"encryptionAtHost,omitempty"`

	//SecurityType: Specifies the SecurityType of the virtual machine. It is set as
	//TrustedLaunch to enable UefiSettings.
	//Default: UefiSettings will not be enabled unless this property is set as
	//TrustedLaunch.
	SecurityType *SecurityProfileSecurityType `json:"securityType,omitempty"`

	//UefiSettings: Specifies the security settings like secure boot and vTPM used
	//while creating the virtual machine.
	//Minimum api-version: 2020-12-01
	UefiSettings *UefiSettingsARM `json:"uefiSettings,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetOSProfile
type VirtualMachineScaleSetOSProfileARM struct {
	//AdminPassword: Specifies the password of the administrator account.
	//Minimum-length (Windows): 8 characters
	//Minimum-length (Linux): 6 characters
	//Max-length (Windows): 123 characters
	//Max-length (Linux): 72 characters
	//Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	//Has lower characters
	//Has upper characters
	//Has a digit
	//Has a special character (Regex match [\W_])
	//Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
	//"pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	//For resetting the password, see [How to reset the Remote Desktop service or its
	//login password in a Windows
	//VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	//For resetting root password, see [Manage users, SSH, and check or repair disks
	//on Azure Linux VMs using the VMAccess
	//Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `json:"adminPassword,omitempty"`

	//AdminUsername: Specifies the name of the administrator account.
	//Windows-only restriction: Cannot end in "."
	//Disallowed values: "administrator", "admin", "user", "user1", "test", "user2",
	//"test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	//"aspnet", "backup", "console", "david", "guest", "john", "owner", "root",
	//"server", "sql", "support", "support_388945a0", "sys", "test2", "test3",
	//"user4", "user5".
	//Minimum-length (Linux): 1  character
	//Max-length (Linux): 64 characters
	//Max-length (Windows): 20 characters
	//<li> For root access to the Linux VM, see [Using root privileges on Linux
	//virtual machines in
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	//<li> For a list of built-in system users on Linux that should not be used in
	//this field, see [Selecting User Names for Linux on
	//Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `json:"adminUsername,omitempty"`

	//ComputerNamePrefix: Specifies the computer name prefix for all of the virtual
	//machines in the scale set. Computer name prefixes must be 1 to 15 characters
	//long.
	ComputerNamePrefix *string `json:"computerNamePrefix,omitempty"`

	//CustomData: Specifies a base-64 encoded string of custom data. The base-64
	//encoded string is decoded to a binary array that is saved as a file on the
	//Virtual Machine. The maximum length of the binary array is 65535 bytes.
	//For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM
	//during
	//creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `json:"customData,omitempty"`

	//LinuxConfiguration: Specifies the Linux operating system settings on the virtual
	//machine.
	//For a list of supported Linux distributions, see [Linux on Azure-Endorsed
	//Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	//For running non-endorsed distributions, see [Information for Non-Endorsed
	//Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfigurationARM `json:"linuxConfiguration,omitempty"`

	//Secrets: Specifies set of certificates that should be installed onto the virtual
	//machines in the scale set.
	Secrets []VaultSecretGroupARM `json:"secrets,omitempty"`

	//WindowsConfiguration: Specifies Windows operating system settings on the virtual
	//machine.
	WindowsConfiguration *WindowsConfigurationARM `json:"windowsConfiguration,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetStorageProfile
type VirtualMachineScaleSetStorageProfileARM struct {
	//DataDisks: Specifies the parameters that are used to add data disks to the
	//virtual machines in the scale set.
	//For more information about disks, see [About disks and VHDs for Azure virtual
	//machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []VirtualMachineScaleSetDataDiskARM `json:"dataDisks,omitempty"`

	//ImageReference: Specifies information about the image to use. You can specify
	//information about platform images, marketplace images, or virtual machine
	//images. This element is required when you want to use a platform image,
	//marketplace image, or virtual machine image, but is not used in other creation
	//operations. NOTE: Image reference publisher and offer can only be set when you
	//create the scale set.
	ImageReference *ImageReferenceARM `json:"imageReference,omitempty"`

	//OsDisk: Describes a virtual machine scale set operating system disk.
	OsDisk *VirtualMachineScaleSetOSDiskARM `json:"osDisk,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_ExtensionProfileARM struct {
	//Extensions: The virtual machine scale set child extension resources.
	Extensions []VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_ExtensionProfile_ExtensionsARM `json:"extensions,omitempty"`

	//ExtensionsTimeBudget: Specifies the time alloted for all extensions to start.
	//The time duration should be between 15 minutes and 120 minutes (inclusive) and
	//should be specified in ISO 8601 format. The default value is 90 minutes
	//(PT1H30M).
	//Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfileARM struct {
	//HealthProbe: The API entity reference.
	HealthProbe *ApiEntityReferenceARM `json:"healthProbe,omitempty"`

	//NetworkInterfaceConfigurations: The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurationsARM `json:"networkInterfaceConfigurations,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/ApiEntityReference
type ApiEntityReferenceARM struct {
	Id *string `json:"id,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/BootDiagnostics
type BootDiagnosticsARM struct {
	//Enabled: Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `json:"enabled,omitempty"`

	//StorageUri: Uri of the storage account to use for placing the console output and
	//screenshot.
	//If storageUri is not specified while enabling boot diagnostics, managed storage
	//will be used.
	StorageUri *string `json:"storageUri,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/ImageReference
type ImageReferenceARM struct {
	Id *string `json:"id,omitempty"`

	//Offer: Specifies the offer of the platform image or marketplace image used to
	//create the virtual machine.
	Offer *string `json:"offer,omitempty"`

	//Publisher: The image publisher.
	Publisher *string `json:"publisher,omitempty"`

	//Sku: The image SKU.
	Sku *string `json:"sku,omitempty"`

	//Version: Specifies the version of the platform image or marketplace image used
	//to create the virtual machine. The allowed formats are Major.Minor.Build or
	//'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use
	//the latest version of an image available at deploy time. Even if you use
	//'latest', the VM image will not automatically update after deploy time even if a
	//new version becomes available.
	Version *string `json:"version,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/LinuxConfiguration
type LinuxConfigurationARM struct {
	//DisablePasswordAuthentication: Specifies whether password authentication should
	//be disabled.
	DisablePasswordAuthentication *bool `json:"disablePasswordAuthentication,omitempty"`

	//PatchSettings: Specifies settings related to VM Guest Patching on Linux.
	PatchSettings *LinuxPatchSettingsARM `json:"patchSettings,omitempty"`

	//ProvisionVMAgent: Indicates whether virtual machine agent should be provisioned
	//on the virtual machine.
	//When this property is not specified in the request body, default behavior is to
	//set it to true.  This will ensure that VM Agent is installed on the VM so that
	//extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	//Ssh: SSH configuration for Linux based VMs running on Azure
	Ssh *SshConfigurationARM `json:"ssh,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/TerminateNotificationProfile
type TerminateNotificationProfileARM struct {
	//Enable: Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool `json:"enable,omitempty"`

	//NotBeforeTimeout: Configurable length of time a Virtual Machine being deleted
	//will have to potentially approve the Terminate Scheduled Event before the event
	//is auto approved (timed out). The configuration must be specified in ISO 8601
	//format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string `json:"notBeforeTimeout,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/UefiSettings
type UefiSettingsARM struct {
	//SecureBootEnabled: Specifies whether secure boot should be enabled on the
	//virtual machine.
	//Minimum api-version: 2020-12-01
	SecureBootEnabled *bool `json:"secureBootEnabled,omitempty"`

	//VTpmEnabled: Specifies whether vTPM should be enabled on the virtual machine.
	//Minimum api-version: 2020-12-01
	VTpmEnabled *bool `json:"vTpmEnabled,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VaultSecretGroup
type VaultSecretGroupARM struct {
	SourceVault *SubResourceARM `json:"sourceVault,omitempty"`

	//VaultCertificates: The list of key vault references in SourceVault which contain
	//certificates.
	VaultCertificates []VaultCertificateARM `json:"vaultCertificates,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetDataDisk
type VirtualMachineScaleSetDataDiskARM struct {
	//Caching: Specifies the caching requirements.
	//Possible values are:
	//None
	//ReadOnly
	//ReadWrite
	//Default: None for Standard storage. ReadOnly for Premium storage.
	Caching *VirtualMachineScaleSetDataDiskCaching `json:"caching,omitempty"`

	//CreateOption: The create option.
	CreateOption VirtualMachineScaleSetDataDiskCreateOption `json:"createOption"`

	//DiskIOPSReadWrite: Specifies the Read-Write IOPS for the managed disk. Should be
	//used only when StorageAccountType is UltraSSD_LRS. If not specified, a default
	//value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite *int `json:"diskIOPSReadWrite,omitempty"`

	//DiskMBpsReadWrite: Specifies the bandwidth in MB per second for the managed
	//disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not
	//specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *int `json:"diskMBpsReadWrite,omitempty"`

	//DiskSizeGB: Specifies the size of an empty data disk in gigabytes. This element
	//can be used to overwrite the size of the disk in a virtual machine image.
	//This value cannot be larger than 1023 GB
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//Lun: Specifies the logical unit number of the data disk. This value is used to
	//identify data disks within the VM and therefore must be unique for each data
	//disk attached to a VM.
	Lun int `json:"lun"`

	//ManagedDisk: Describes the parameters of a ScaleSet managed disk.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParametersARM `json:"managedDisk,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//WriteAcceleratorEnabled: Specifies whether writeAccelerator should be enabled or
	//disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetOSDisk
type VirtualMachineScaleSetOSDiskARM struct {
	//Caching: Specifies the caching requirements.
	//Possible values are:
	//None
	//ReadOnly
	//ReadWrite
	//Default: None for Standard storage. ReadOnly for Premium storage.
	Caching *VirtualMachineScaleSetOSDiskCaching `json:"caching,omitempty"`

	//CreateOption: Specifies how the virtual machines in the scale set should be
	//created.
	//The only allowed value is: FromImage \u2013 This value is used when you are
	//using an image to create the virtual machine. If you are using a platform image,
	//you also use the imageReference element described above. If you are using a
	//marketplace image, you  also use the plan element previously described.
	CreateOption VirtualMachineScaleSetOSDiskCreateOption `json:"createOption"`

	//DiffDiskSettings: Describes the parameters of ephemeral disk settings that can
	//be specified for operating system disk.
	//NOTE: The ephemeral disk settings can only be specified for managed disk.
	DiffDiskSettings *DiffDiskSettingsARM `json:"diffDiskSettings,omitempty"`

	//DiskSizeGB: Specifies the size of the operating system disk in gigabytes. This
	//element can be used to overwrite the size of the disk in a virtual machine image.
	//This value cannot be larger than 1023 GB
	DiskSizeGB *int `json:"diskSizeGB,omitempty"`

	//Image: Describes the uri of a disk.
	Image *VirtualHardDiskARM `json:"image,omitempty"`

	//ManagedDisk: Describes the parameters of a ScaleSet managed disk.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParametersARM `json:"managedDisk,omitempty"`

	//Name: The disk name.
	Name *string `json:"name,omitempty"`

	//OsType: This property allows you to specify the type of the OS that is included
	//in the disk if creating a VM from user-image or a specialized VHD.
	//Possible values are:
	//Windows
	//Linux.
	OsType *VirtualMachineScaleSetOSDiskOsType `json:"osType,omitempty"`

	//VhdContainers: Specifies the container urls that are used to store operating
	//system disks for the scale set.
	VhdContainers []string `json:"vhdContainers,omitempty"`

	//WriteAcceleratorEnabled: Specifies whether writeAccelerator should be enabled or
	//disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_ExtensionProfile_ExtensionsARM struct {
	//Name: The name of the extension.
	Name       *string              `json:"name,omitempty"`
	Properties *GenericExtensionARM `json:"properties,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurationsARM struct {
	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Name: The network configuration name.
	Name string `json:"name"`

	//Properties: Describes a virtual machine scale set network profile's IP
	//configuration.
	Properties *VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_PropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/WindowsConfiguration
type WindowsConfigurationARM struct {
	//AdditionalUnattendContent: Specifies additional base-64 encoded XML formatted
	//information that can be included in the Unattend.xml file, which is used by
	//Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContentARM `json:"additionalUnattendContent,omitempty"`

	//EnableAutomaticUpdates: Indicates whether Automatic Updates is enabled for the
	//Windows virtual machine. Default value is true.
	//For virtual machine scale sets, this property can be updated and updates will
	//take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty"`

	//PatchSettings: Specifies settings related to VM Guest Patching on Windows.
	PatchSettings *PatchSettingsARM `json:"patchSettings,omitempty"`

	//ProvisionVMAgent: Indicates whether virtual machine agent should be provisioned
	//on the virtual machine.
	//When this property is not specified in the request body, default behavior is to
	//set it to true.  This will ensure that VM Agent is installed on the VM so that
	//extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	//TimeZone: Specifies the time zone of the virtual machine. e.g. "Pacific Standard
	//Time".
	//Possible values can be
	//[TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id)
	//value from time zones returned by
	//[TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `json:"timeZone,omitempty"`

	//WinRM: Describes Windows Remote Management configuration of the VM
	WinRM *WinRMConfigurationARM `json:"winRM,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/AdditionalUnattendContent
type AdditionalUnattendContentARM struct {
	//ComponentName: The component name. Currently, the only allowable value is
	//Microsoft-Windows-Shell-Setup.
	ComponentName *AdditionalUnattendContentComponentName `json:"componentName,omitempty"`

	//Content: Specifies the XML formatted content that is added to the unattend.xml
	//file for the specified path and component. The XML must be less than 4KB and
	//must include the root element for the setting or feature that is being inserted.
	Content *string `json:"content,omitempty"`

	//PassName: The pass name. Currently, the only allowable value is OobeSystem.
	PassName *AdditionalUnattendContentPassName `json:"passName,omitempty"`

	//SettingName: Specifies the name of the setting to which the content applies.
	//Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *AdditionalUnattendContentSettingName `json:"settingName,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/DiffDiskSettings
type DiffDiskSettingsARM struct {
	//Option: Specifies the ephemeral disk settings for operating system disk.
	Option *DiffDiskSettingsOption `json:"option,omitempty"`

	//Placement: Specifies the ephemeral disk placement for operating system disk.
	//Possible values are:
	//CacheDisk
	//ResourceDisk
	//Default: CacheDisk if one is configured for the VM size otherwise ResourceDisk
	//is used.
	//Refer to VM size documentation for Windows VM at
	//https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux
	//VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to
	//check which VM sizes exposes a cache disk.
	Placement *DiffDiskSettingsPlacement `json:"placement,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.Extensions.json#/definitions/genericExtension
type GenericExtensionARM struct {
	//Publisher: Microsoft.Compute/extensions - Publisher
	Publisher string `json:"publisher"`

	//Settings: Microsoft.Compute/extensions - Settings
	Settings map[string]v1.JSON `json:"settings"`

	//Type: Microsoft.Compute/extensions - Type
	Type string `json:"type"`

	//TypeHandlerVersion: Microsoft.Compute/extensions - Type handler version
	TypeHandlerVersion string `json:"typeHandlerVersion"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/LinuxPatchSettings
type LinuxPatchSettingsARM struct {
	//PatchMode: Specifies the mode of VM Guest Patching to IaaS virtual machine.
	//Possible values are:
	//ImageDefault - The virtual machine's default patching configuration is used.
	//AutomaticByPlatform - The virtual machine will be automatically updated by the
	//platform. The property provisionVMAgent must be true.
	PatchMode *LinuxPatchSettingsPatchMode `json:"patchMode,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/PatchSettings
type PatchSettingsARM struct {
	//EnableHotpatching: Enables customers to patch their Azure VMs without requiring
	//a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and
	//'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool `json:"enableHotpatching,omitempty"`

	//PatchMode: Specifies the mode of VM Guest Patching to IaaS virtual machine.
	//Possible values are:
	//Manual - You  control the application of patches to a virtual machine. You do
	//this by applying patches manually inside the VM. In this mode, automatic updates
	//are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be
	//false
	//AutomaticByOS - The virtual machine will automatically be updated by the OS. The
	//property WindowsConfiguration.enableAutomaticUpdates must be true.
	//AutomaticByPlatform - the virtual machine will automatically updated by the
	//platform. The properties provisionVMAgent and
	//WindowsConfiguration.enableAutomaticUpdates must be true.
	PatchMode *PatchSettingsPatchMode `json:"patchMode,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/SshConfiguration
type SshConfigurationARM struct {
	//PublicKeys: The list of SSH public keys used to authenticate with linux based
	//VMs.
	PublicKeys []SshPublicKeyARM `json:"publicKeys,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VaultCertificate
type VaultCertificateARM struct {
	//CertificateStore: For Windows VMs, specifies the certificate store on the
	//Virtual Machine to which the certificate should be added. The specified
	//certificate store is implicitly in the LocalMachine account.
	//For Linux VMs, the certificate file is placed under the /var/lib/waagent
	//directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509
	//certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of
	//these files are .pem formatted.
	CertificateStore *string `json:"certificateStore,omitempty"`

	//CertificateUrl: This is the URL of a certificate that has been uploaded to Key
	//Vault as a secret. For adding a secret to the Key Vault, see [Add a key or
	//secret to the key
	//vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
	//In this case, your certificate needs to be It is the Base64 encoding of the
	//following JSON Object which is encoded in UTF-8:
	//{
	//"data":"<Base64-encoded-certificate>",
	//"dataType":"pfx",
	//"password":"<pfx-file-password>"
	//}
	CertificateUrl *string `json:"certificateUrl,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualHardDisk
type VirtualHardDiskARM struct {
	//Uri: Specifies the virtual hard disk's uri.
	Uri *string `json:"uri,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetManagedDiskParameters
type VirtualMachineScaleSetManagedDiskParametersARM struct {
	//DiskEncryptionSet: Describes the parameter of customer managed disk encryption
	//set resource id that can be specified for disk.
	//NOTE: The disk encryption set resource id can only be specified for managed
	//disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
	DiskEncryptionSet *DiskEncryptionSetParametersARM `json:"diskEncryptionSet,omitempty"`

	//StorageAccountType: Specifies the storage account type for the managed disk.
	//NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS
	//Disk.
	StorageAccountType *VirtualMachineScaleSetManagedDiskParametersStorageAccountType `json:"storageAccountType,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_PropertiesARM struct {
	//DnsSettings: Describes a virtual machines scale sets network configuration's DNS
	//settings.
	DnsSettings *VirtualMachineScaleSetNetworkConfigurationDnsSettingsARM `json:"dnsSettings,omitempty"`

	//EnableAcceleratedNetworking: Specifies whether the network interface is
	//accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty"`

	//EnableFpga: Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `json:"enableFpga,omitempty"`

	//EnableIPForwarding: Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`

	//IpConfigurations: Specifies the IP configurations of the network interface.
	IpConfigurations     []VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurationsARM `json:"ipConfigurations"`
	NetworkSecurityGroup *SubResourceARM                                                                                                                              `json:"networkSecurityGroup,omitempty"`

	//Primary: Specifies the primary network interface in case the virtual machine has
	//more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/WinRMConfiguration
type WinRMConfigurationARM struct {
	//Listeners: The list of Windows Remote Management listeners
	Listeners []WinRMListenerARM `json:"listeners,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/DiskEncryptionSetParameters
type DiskEncryptionSetParametersARM struct {
	Id *string `json:"id,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/SshPublicKey
type SshPublicKeyARM struct {
	//KeyData: SSH public key certificate used to authenticate with the VM through
	//ssh. The key needs to be at least 2048-bit and in ssh-rsa format.
	//For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in
	//Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	KeyData *string `json:"keyData,omitempty"`

	//Path: Specifies the full path on the created VM where ssh public key is stored.
	//If the file already exists, the specified key is appended to the file. Example:
	///home/user/.ssh/authorized_keys
	Path *string `json:"path,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetNetworkConfigurationDnsSettings
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsARM struct {
	//DnsServers: List of DNS servers IP addresses
	DnsServers []string `json:"dnsServers,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurationsARM struct {
	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Name: The IP configuration name.
	Name string `json:"name"`

	//Properties: Describes a virtual machine scale set network profile's IP
	//configuration properties.
	Properties *VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurations_PropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/WinRMListener
type WinRMListenerARM struct {
	//CertificateUrl: This is the URL of a certificate that has been uploaded to Key
	//Vault as a secret. For adding a secret to the Key Vault, see [Add a key or
	//secret to the key
	//vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).
	//In this case, your certificate needs to be It is the Base64 encoding of the
	//following JSON Object which is encoded in UTF-8:
	//{
	//"data":"<Base64-encoded-certificate>",
	//"dataType":"pfx",
	//"password":"<pfx-file-password>"
	//}
	CertificateUrl *string `json:"certificateUrl,omitempty"`

	//Protocol: Specifies the protocol of WinRM listener.
	//Possible values are:
	//http
	//https.
	Protocol *WinRMListenerProtocol `json:"protocol,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurations_PropertiesARM struct {
	//ApplicationGatewayBackendAddressPools: Specifies an array of references to
	//backend address pools of application gateways. A scale set can reference backend
	//address pools of multiple application gateways. Multiple scale sets cannot use
	//the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResourceARM `json:"applicationGatewayBackendAddressPools,omitempty"`

	//ApplicationSecurityGroups: Specifies an array of references to application
	//security group.
	ApplicationSecurityGroups []SubResourceARM `json:"applicationSecurityGroups,omitempty"`

	//LoadBalancerBackendAddressPools: Specifies an array of references to backend
	//address pools of load balancers. A scale set can reference backend address pools
	//of one public and one internal load balancer. Multiple scale sets cannot use the
	//same basic sku load balancer.
	LoadBalancerBackendAddressPools []SubResourceARM `json:"loadBalancerBackendAddressPools,omitempty"`

	//LoadBalancerInboundNatPools: Specifies an array of references to inbound Nat
	//pools of the load balancers. A scale set can reference inbound nat pools of one
	//public and one internal load balancer. Multiple scale sets cannot use the same
	//basic sku load balancer.
	LoadBalancerInboundNatPools []SubResourceARM `json:"loadBalancerInboundNatPools,omitempty"`

	//Primary: Specifies the primary network interface in case the virtual machine has
	//more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`

	//PrivateIPAddressVersion: Available from Api-Version 2017-03-30 onwards, it
	//represents whether the specific ipconfiguration is IPv4 or IPv6. Default is
	//taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *VirtualMachineScaleSetsSpecPropertiesVirtualMachineProfileNetworkProfileNetworkInterfaceConfigurationsPropertiesIpConfigurationsPropertiesPrivateIPAddressVersion `json:"privateIPAddressVersion,omitempty"`

	//PublicIPAddressConfiguration: Describes a virtual machines scale set IP
	//Configuration's PublicIPAddress configuration
	PublicIPAddressConfiguration *VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurations_Properties_PublicIPAddressConfigurationARM `json:"publicIPAddressConfiguration,omitempty"`

	//Subnet: The API entity reference.
	Subnet *ApiEntityReferenceARM `json:"subnet,omitempty"`
}

type VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurations_Properties_PublicIPAddressConfigurationARM struct {
	//Name: The publicIP address configuration name.
	Name string `json:"name"`

	//Properties: Describes a virtual machines scale set IP Configuration's
	//PublicIPAddress configuration
	Properties *VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetPublicIPAddressConfigurationProperties
type VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesARM struct {
	//DnsSettings: Describes a virtual machines scale sets network configuration's DNS
	//settings.
	DnsSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsARM `json:"dnsSettings,omitempty"`

	//IdleTimeoutInMinutes: The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//IpTags: The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineScaleSetIpTagARM `json:"ipTags,omitempty"`

	//PublicIPAddressVersion: Available from Api-Version 2019-07-01 onwards, it
	//represents whether the specific ipconfiguration is IPv4 or IPv6. Default is
	//taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesPublicIPAddressVersion `json:"publicIPAddressVersion,omitempty"`
	PublicIPPrefix         *SubResourceARM                                                                     `json:"publicIPPrefix,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetIpTag
type VirtualMachineScaleSetIpTagARM struct {
	//IpTagType: IP tag type. Example: FirstPartyUsage.
	IpTagType *string `json:"ipTagType,omitempty"`

	//Tag: IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `json:"tag,omitempty"`
}

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Compute.json#/definitions/VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsARM struct {
	//DomainNameLabel: The Domain name label.The concatenation of the domain name
	//label and vm index will be the domain name labels of the PublicIPAddress
	//resources that will be created
	DomainNameLabel string `json:"domainNameLabel"`
}
