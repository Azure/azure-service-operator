// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=cache.azure.com,resources=redis,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cache.azure.com,resources={redis/status,redis/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
//Generator information:
//- Generated from: /redis/resource-manager/Microsoft.Cache/stable/2020-06-01/redis.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Redis_SPEC   `json:"spec,omitempty"`
	Status            Redis_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /redis/resource-manager/Microsoft.Cache/stable/2020-06-01/redis.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersionValue = APIVersion("2020-06-01")

type Redis_SPEC struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           RedisParameters `json:"forProvider"`
}

type Redis_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              RedisObservation `json:"atProvider"`
}

type RedisObservation struct {
	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *RedisProperties_MinimumTlsVersion_Status `json:"minimumTlsVersion,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *RedisProperties_PublicNetworkAccess_Status `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration *RedisProperties_RedisConfiguration_Status `json:"redisConfiguration,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per master.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	//Sku: The SKU of the Redis cache to deploy.
	Sku *Sku_Status `json:"sku,omitempty"`

	//StaticIP: Static IP address. Optionally, may be specified when deploying a Redis
	//cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

type RedisParameters struct {
	AzureName string `json:"azureName"`

	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The geo-location where the resource lives
	Location string `json:"location"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *RedisProperties_MinimumTlsVersion_Spec `json:"minimumTlsVersion,omitempty"`
	Name              string                                  `json:"name"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *RedisProperties_PublicNetworkAccess_Spec `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration *RedisProperties_RedisConfiguration_Spec `json:"redisConfiguration,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per master.
	ReplicasPerMaster         *int                `json:"replicasPerMaster,omitempty"`
	ResourceGroupName         string              `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector  `json:"resourceGroupNameSelector,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: The SKU of the Redis cache to deploy.
	Sku Sku_Spec `json:"sku"`

	// +kubebuilder:validation:Pattern="^\\d+\\.\\d+\\.\\d+\\.\\d+$"
	//StaticIP: Static IP address. Optionally, may be specified when deploying a Redis
	//cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	// +kubebuilder:validation:Pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

// +kubebuilder:validation:Enum={"1.0","1.1","1.2"}
type RedisProperties_MinimumTlsVersion_Spec string

const (
	RedisProperties_MinimumTlsVersion_Spec10 = RedisProperties_MinimumTlsVersion_Spec("1.0")
	RedisProperties_MinimumTlsVersion_Spec11 = RedisProperties_MinimumTlsVersion_Spec("1.1")
	RedisProperties_MinimumTlsVersion_Spec12 = RedisProperties_MinimumTlsVersion_Spec("1.2")
)

type RedisProperties_MinimumTlsVersion_Status string

const (
	RedisProperties_MinimumTlsVersion_Status10 = RedisProperties_MinimumTlsVersion_Status("1.0")
	RedisProperties_MinimumTlsVersion_Status11 = RedisProperties_MinimumTlsVersion_Status("1.1")
	RedisProperties_MinimumTlsVersion_Status12 = RedisProperties_MinimumTlsVersion_Status("1.2")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RedisProperties_PublicNetworkAccess_Spec string

const (
	RedisProperties_PublicNetworkAccess_SpecDisabled = RedisProperties_PublicNetworkAccess_Spec("Disabled")
	RedisProperties_PublicNetworkAccess_SpecEnabled  = RedisProperties_PublicNetworkAccess_Spec("Enabled")
)

type RedisProperties_PublicNetworkAccess_Status string

const (
	RedisProperties_PublicNetworkAccess_StatusDisabled = RedisProperties_PublicNetworkAccess_Status("Disabled")
	RedisProperties_PublicNetworkAccess_StatusEnabled  = RedisProperties_PublicNetworkAccess_Status("Enabled")
)

type RedisProperties_RedisConfiguration_Spec struct {
	//AofStorageConnectionString0: First storage account connection string
	AofStorageConnectionString0 *string `json:"aof-storage-connection-string-0,omitempty"`

	//AofStorageConnectionString1: Second storage account connection string
	AofStorageConnectionString1 *string `json:"aof-storage-connection-string-1,omitempty"`

	//MaxfragmentationmemoryReserved: Value in megabytes reserved for fragmentation
	//per shard
	MaxfragmentationmemoryReserved *string `json:"maxfragmentationmemory-reserved,omitempty"`

	//MaxmemoryDelta: Value in megabytes reserved for non-cache usage per shard e.g.
	//failover.
	MaxmemoryDelta *string `json:"maxmemory-delta,omitempty"`

	//MaxmemoryPolicy: The eviction strategy used when your data won't fit within its
	//memory limit.
	MaxmemoryPolicy *string `json:"maxmemory-policy,omitempty"`

	//MaxmemoryReserved: Value in megabytes reserved for non-cache usage per shard
	//e.g. failover.
	MaxmemoryReserved *string `json:"maxmemory-reserved,omitempty"`

	//RdbBackupEnabled: Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `json:"rdb-backup-enabled,omitempty"`

	//RdbBackupFrequency: Specifies the frequency for creating rdb backup
	RdbBackupFrequency *string `json:"rdb-backup-frequency,omitempty"`

	//RdbBackupMaxSnapshotCount: Specifies the maximum number of snapshots for rdb
	//backup
	RdbBackupMaxSnapshotCount *string `json:"rdb-backup-max-snapshot-count,omitempty"`

	//RdbStorageConnectionString: The storage account connection string for storing
	//rdb file
	RdbStorageConnectionString *string           `json:"rdb-storage-connection-string,omitempty"`
	additionalProperties       map[string]string `json:"additionalProperties"`
}

type RedisProperties_RedisConfiguration_Status struct {
	//AofStorageConnectionString0: First storage account connection string
	AofStorageConnectionString0 *string `json:"aof-storage-connection-string-0,omitempty"`

	//AofStorageConnectionString1: Second storage account connection string
	AofStorageConnectionString1 *string `json:"aof-storage-connection-string-1,omitempty"`

	//Maxclients: The max clients config
	Maxclients *string `json:"maxclients,omitempty"`

	//MaxfragmentationmemoryReserved: Value in megabytes reserved for fragmentation
	//per shard
	MaxfragmentationmemoryReserved *string `json:"maxfragmentationmemory-reserved,omitempty"`

	//MaxmemoryDelta: Value in megabytes reserved for non-cache usage per shard e.g.
	//failover.
	MaxmemoryDelta *string `json:"maxmemory-delta,omitempty"`

	//MaxmemoryPolicy: The eviction strategy used when your data won't fit within its
	//memory limit.
	MaxmemoryPolicy *string `json:"maxmemory-policy,omitempty"`

	//MaxmemoryReserved: Value in megabytes reserved for non-cache usage per shard
	//e.g. failover.
	MaxmemoryReserved *string `json:"maxmemory-reserved,omitempty"`

	//RdbBackupEnabled: Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `json:"rdb-backup-enabled,omitempty"`

	//RdbBackupFrequency: Specifies the frequency for creating rdb backup
	RdbBackupFrequency *string `json:"rdb-backup-frequency,omitempty"`

	//RdbBackupMaxSnapshotCount: Specifies the maximum number of snapshots for rdb
	//backup
	RdbBackupMaxSnapshotCount *string `json:"rdb-backup-max-snapshot-count,omitempty"`

	//RdbStorageConnectionString: The storage account connection string for storing
	//rdb file
	RdbStorageConnectionString *string           `json:"rdb-storage-connection-string,omitempty"`
	additionalProperties       map[string]string `json:"additionalProperties"`
}

type Sku_Spec struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family Sku_Family_Spec `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name Sku_Name_Spec `json:"name"`
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family Sku_Family_Status `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name Sku_Name_Status `json:"name"`
}

// +kubebuilder:validation:Enum={"C","P"}
type Sku_Family_Spec string

const (
	Sku_Family_SpecC = Sku_Family_Spec("C")
	Sku_Family_SpecP = Sku_Family_Spec("P")
)

type Sku_Family_Status string

const (
	Sku_Family_StatusC = Sku_Family_Status("C")
	Sku_Family_StatusP = Sku_Family_Status("P")
)

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type Sku_Name_Spec string

const (
	Sku_Name_SpecBasic    = Sku_Name_Spec("Basic")
	Sku_Name_SpecPremium  = Sku_Name_Spec("Premium")
	Sku_Name_SpecStandard = Sku_Name_Spec("Standard")
)

type Sku_Name_Status string

const (
	Sku_Name_StatusBasic    = Sku_Name_Status("Basic")
	Sku_Name_StatusPremium  = Sku_Name_Status("Premium")
	Sku_Name_StatusStandard = Sku_Name_Status("Standard")
)

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
