// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=microsoft.cache.azure.com,resources=redis,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.cache.azure.com,resources={redis/status,redis/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisCreateParameters_Spec   `json:"spec,omitempty"`
	Status            RedisCreateParameters_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

type RedisCreateParameters_Spec struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           RedisCreateParametersParameters `json:"forProvider"`
}

type RedisCreateParameters_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              RedisCreateParametersObservation `json:"atProvider"`
}

type RedisCreateParametersObservation struct {
	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *RedisCreatePropertiesStatusMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *RedisCreatePropertiesStatusPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration map[string]string `json:"redisConfiguration,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per master.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	//Sku: The SKU of the Redis cache to deploy.
	Sku *Sku_Status `json:"sku,omitempty"`

	//StaticIP: Static IP address. Required when deploying a Redis cache inside an
	//existing Azure Virtual Network.
	StaticIP *string `json:"staticIP,omitempty"`

	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

type RedisCreateParametersParameters struct {
	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The geo-location where the resource lives
	Location string `json:"location"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *RedisCreatePropertiesSpecMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *RedisCreatePropertiesSpecPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration map[string]string `json:"redisConfiguration,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per master.
	ReplicasPerMaster         *int                `json:"replicasPerMaster,omitempty"`
	ResourceGroupName         string              `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector  `json:"resourceGroupNameSelector,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: The SKU of the Redis cache to deploy.
	Sku Sku_Spec `json:"sku"`

	// +kubebuilder:validation:Pattern="^\\d+\\.\\d+\\.\\d+\\.\\d+$"
	//StaticIP: Static IP address. Required when deploying a Redis cache inside an
	//existing Azure Virtual Network.
	StaticIP *string `json:"staticIP,omitempty"`

	// +kubebuilder:validation:Pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

// +kubebuilder:validation:Enum={"1.0","1.1","1.2"}
type RedisCreatePropertiesSpecMinimumTlsVersion string

const (
	RedisCreatePropertiesSpecMinimumTlsVersion10 = RedisCreatePropertiesSpecMinimumTlsVersion("1.0")
	RedisCreatePropertiesSpecMinimumTlsVersion11 = RedisCreatePropertiesSpecMinimumTlsVersion("1.1")
	RedisCreatePropertiesSpecMinimumTlsVersion12 = RedisCreatePropertiesSpecMinimumTlsVersion("1.2")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RedisCreatePropertiesSpecPublicNetworkAccess string

const (
	RedisCreatePropertiesSpecPublicNetworkAccessDisabled = RedisCreatePropertiesSpecPublicNetworkAccess("Disabled")
	RedisCreatePropertiesSpecPublicNetworkAccessEnabled  = RedisCreatePropertiesSpecPublicNetworkAccess("Enabled")
)

type RedisCreatePropertiesStatusMinimumTlsVersion string

const (
	RedisCreatePropertiesStatusMinimumTlsVersion10 = RedisCreatePropertiesStatusMinimumTlsVersion("1.0")
	RedisCreatePropertiesStatusMinimumTlsVersion11 = RedisCreatePropertiesStatusMinimumTlsVersion("1.1")
	RedisCreatePropertiesStatusMinimumTlsVersion12 = RedisCreatePropertiesStatusMinimumTlsVersion("1.2")
)

type RedisCreatePropertiesStatusPublicNetworkAccess string

const (
	RedisCreatePropertiesStatusPublicNetworkAccessDisabled = RedisCreatePropertiesStatusPublicNetworkAccess("Disabled")
	RedisCreatePropertiesStatusPublicNetworkAccessEnabled  = RedisCreatePropertiesStatusPublicNetworkAccess("Enabled")
)

//Generated from:
type Sku_Spec struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family SkuSpecFamily `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name SkuSpecName `json:"name"`
}

//Generated from:
type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family SkuStatusFamily `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name SkuStatusName `json:"name"`
}

// +kubebuilder:validation:Enum={"C","P"}
type SkuSpecFamily string

const (
	SkuSpecFamilyC = SkuSpecFamily("C")
	SkuSpecFamilyP = SkuSpecFamily("P")
)

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SkuSpecName string

const (
	SkuSpecNameBasic    = SkuSpecName("Basic")
	SkuSpecNamePremium  = SkuSpecName("Premium")
	SkuSpecNameStandard = SkuSpecName("Standard")
)

type SkuStatusFamily string

const (
	SkuStatusFamilyC = SkuStatusFamily("C")
	SkuStatusFamilyP = SkuStatusFamily("P")
)

type SkuStatusName string

const (
	SkuStatusNameBasic    = SkuStatusName("Basic")
	SkuStatusNamePremium  = SkuStatusName("Premium")
	SkuStatusNameStandard = SkuStatusName("Standard")
)

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
