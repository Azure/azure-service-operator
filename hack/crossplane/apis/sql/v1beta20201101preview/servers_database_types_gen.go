// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101preview

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=serversdatabases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={serversdatabases/status,serversdatabases/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/Databases_legacy.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
type ServersDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
<<<<<<< HEAD
	Spec              ServersDatabase_Spec   `json:"spec,omitempty"`
	Status            ServersDatabase_STATUS `json:"status,omitempty"`
=======
	Spec              ServersDatabases_Spec `json:"spec,omitempty"`
	Status            Database_STATUS       `json:"status,omitempty"`
>>>>>>> main
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/Databases_legacy.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
type ServersDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersDatabase `json:"items"`
}

<<<<<<< HEAD
type ServersDatabase_STATUS struct {
=======
type Database_STATUS struct {
>>>>>>> main
	v1alpha1.ResourceStatus `json:",inline,omitempty"`
	AtProvider              ServersDatabaseObservation `json:"atProvider,omitempty"`
}

type ServersDatabase_Spec struct {
	v1alpha1.ResourceSpec `json:",inline,omitempty"`
	ForProvider           ServersDatabaseParameters `json:"forProvider,omitempty"`
}

type ServersDatabaseObservation struct {
	// AutoPauseDelay: Time in minutes after which database is automatically paused. A value of -1 means that automatic pause
	// is disabled
	AutoPauseDelay *int `json:"autoPauseDelay,omitempty"`

	// CatalogCollation: Collation of the metadata catalog.
<<<<<<< HEAD
	CatalogCollation *DatabaseProperties_CatalogCollation_STATUS `json:"catalogCollation,omitempty"`
=======
	CatalogCollation *DatabasePropertiesSTATUSCatalogCollation `json:"catalogCollation,omitempty"`
>>>>>>> main

	// Collation: The collation of the database.
	Collation *string `json:"collation,omitempty"`

	// CreateMode: Specifies the mode of database creation.
	// Default: regular database creation.
	// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the
	// source database.
	// Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the
	// resource ID of the existing primary database.
	// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId
	// must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
	// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable
	// database resource ID to restore.
	// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If
	// sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise
	// sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
	// restorePointInTime may also be specified to restore from an earlier point in time.
	// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
	// recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
	// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
<<<<<<< HEAD
	CreateMode *DatabaseProperties_CreateMode_STATUS `json:"createMode,omitempty"`
=======
	CreateMode *DatabasePropertiesSTATUSCreateMode `json:"createMode,omitempty"`
>>>>>>> main

	// CreationDate: The creation date of the database (ISO8601 format).
	CreationDate *string `json:"creationDate,omitempty"`

	// CurrentBackupStorageRedundancy: The storage account type used to store backups for this database.
<<<<<<< HEAD
	CurrentBackupStorageRedundancy *DatabaseProperties_CurrentBackupStorageRedundancy_STATUS `json:"currentBackupStorageRedundancy,omitempty"`
=======
	CurrentBackupStorageRedundancy *DatabasePropertiesSTATUSCurrentBackupStorageRedundancy `json:"currentBackupStorageRedundancy,omitempty"`
>>>>>>> main

	// CurrentServiceObjectiveName: The current service level objective name of the database.
	CurrentServiceObjectiveName *string `json:"currentServiceObjectiveName,omitempty"`

	// CurrentSku: The name and tier of the SKU.
	CurrentSku *Sku_STATUS `json:"currentSku,omitempty"`

	// DatabaseId: The ID of the database.
	DatabaseId *string `json:"databaseId,omitempty"`

	// DefaultSecondaryLocation: The default secondary region for this database.
	DefaultSecondaryLocation *string `json:"defaultSecondaryLocation,omitempty"`

	// EarliestRestoreDate: This records the earliest start date and time that restore is available for this database (ISO8601
	// format).
	EarliestRestoreDate *string `json:"earliestRestoreDate,omitempty"`

	// ElasticPoolId: The resource identifier of the elastic pool containing this database.
	ElasticPoolId *string `json:"elasticPoolId,omitempty"`

	// FailoverGroupId: Failover Group resource identifier that this database belongs to.
	FailoverGroupId *string `json:"failoverGroupId,omitempty"`

	// HighAvailabilityReplicaCount: The number of secondary replicas associated with the database that are used to provide
	// high availability.
	HighAvailabilityReplicaCount *int `json:"highAvailabilityReplicaCount,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Kind: Kind of database. This is metadata used for the Azure portal experience.
	Kind *string `json:"kind,omitempty"`

	// LicenseType: The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you
	// have a license and are eligible for the Azure Hybrid Benefit.
<<<<<<< HEAD
	LicenseType *DatabaseProperties_LicenseType_STATUS `json:"licenseType,omitempty"`
=======
	LicenseType *DatabasePropertiesSTATUSLicenseType `json:"licenseType,omitempty"`
>>>>>>> main

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceId: The resource identifier of the long term retention backup associated with create
	// operation of this database.
	LongTermRetentionBackupResourceId *string `json:"longTermRetentionBackupResourceId,omitempty"`

	// MaintenanceConfigurationId: Maintenance configuration id assigned to the database. This configuration defines the period
	// when the maintenance updates will occur.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// ManagedBy: Resource that manages the database.
	ManagedBy *string `json:"managedBy,omitempty"`

	// MaxLogSizeBytes: The max log size for this database.
	MaxLogSizeBytes *int `json:"maxLogSizeBytes,omitempty"`

	// MaxSizeBytes: The max size of the database expressed in bytes.
	MaxSizeBytes *int `json:"maxSizeBytes,omitempty"`

	// MinCapacity: Minimal capacity that database will always have allocated, if not paused
	MinCapacity *float64 `json:"minCapacity,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// PausedDate: The date when database was paused by user configuration or action(ISO8601 format). Null if the database is
	// ready.
	PausedDate *string `json:"pausedDate,omitempty"`

	// ReadScale: The state of read-only routing. If enabled, connections that have application intent set to readonly in their
	// connection string may be routed to a readonly secondary replica in the same region.
<<<<<<< HEAD
	ReadScale *DatabaseProperties_ReadScale_STATUS `json:"readScale,omitempty"`
=======
	ReadScale *DatabasePropertiesSTATUSReadScale `json:"readScale,omitempty"`
>>>>>>> main

	// RecoverableDatabaseId: The resource identifier of the recoverable database associated with create operation of this
	// database.
	RecoverableDatabaseId *string `json:"recoverableDatabaseId,omitempty"`

	// RecoveryServicesRecoveryPointId: The resource identifier of the recovery point associated with create operation of this
	// database.
	RecoveryServicesRecoveryPointId *string `json:"recoveryServicesRecoveryPointId,omitempty"`

	// RequestedBackupStorageRedundancy: The storage account type to be used to store backups for this database.
<<<<<<< HEAD
	RequestedBackupStorageRedundancy *DatabaseProperties_RequestedBackupStorageRedundancy_STATUS `json:"requestedBackupStorageRedundancy,omitempty"`
=======
	RequestedBackupStorageRedundancy *DatabasePropertiesSTATUSRequestedBackupStorageRedundancy `json:"requestedBackupStorageRedundancy,omitempty"`
>>>>>>> main

	// RequestedServiceObjectiveName: The requested service level objective name of the database.
	RequestedServiceObjectiveName *string `json:"requestedServiceObjectiveName,omitempty"`

	// RestorableDroppedDatabaseId: The resource identifier of the restorable dropped database associated with create operation
	// of this database.
	RestorableDroppedDatabaseId *string `json:"restorableDroppedDatabaseId,omitempty"`

	// RestorePointInTime: Specifies the point in time (ISO8601 format) of the source database that will be restored to create
	// the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// ResumedDate: The date when database was resumed by user action or database login (ISO8601 format). Null if the database
	// is paused.
	ResumedDate *string `json:"resumedDate,omitempty"`

	// SampleName: The name of the sample schema to apply when creating this database.
<<<<<<< HEAD
	SampleName *DatabaseProperties_SampleName_STATUS `json:"sampleName,omitempty"`

	// SecondaryType: The secondary type of the database if it is a secondary.  Valid values are Geo and Named.
	SecondaryType *DatabaseProperties_SecondaryType_STATUS `json:"secondaryType,omitempty"`
=======
	SampleName *DatabasePropertiesSTATUSSampleName `json:"sampleName,omitempty"`

	// SecondaryType: The secondary type of the database if it is a secondary.  Valid values are Geo and Named.
	SecondaryType *DatabasePropertiesSTATUSSecondaryType `json:"secondaryType,omitempty"`
>>>>>>> main

	// Sku: The database SKU.
	// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition,
	// family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation`
	// REST API or one of the following commands:
	// ```azurecli
	// az sql db list-editions -l <location> -o table
	// ````
	// ```powershell
	// Get-AzSqlServerServiceObjective -Location <location>
	// ````
	Sku *Sku_STATUS `json:"sku,omitempty"`

	// SourceDatabaseDeletionDate: Specifies the time that the database was deleted.
	SourceDatabaseDeletionDate *string `json:"sourceDatabaseDeletionDate,omitempty"`

	// SourceDatabaseId: The resource identifier of the source database associated with create operation of this database.
	SourceDatabaseId *string `json:"sourceDatabaseId,omitempty"`

	// Status: The status of the database.
<<<<<<< HEAD
	Status *DatabaseProperties_Status_STATUS `json:"status,omitempty"`
=======
	Status *DatabasePropertiesSTATUSStatus `json:"status,omitempty"`
>>>>>>> main

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// ZoneRedundant: Whether or not this database is zone redundant, which means the replicas of this database will be spread
	// across multiple availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

type ServersDatabaseParameters struct {
	// AutoPauseDelay: Time in minutes after which database is automatically paused. A value of -1 means that automatic pause
	// is disabled
	AutoPauseDelay *int   `json:"autoPauseDelay,omitempty"`
	AzureName      string `json:"azureName,omitempty"`

	// CatalogCollation: Collation of the metadata catalog.
	CatalogCollation *DatabaseProperties_CatalogCollation `json:"catalogCollation,omitempty"`

	// Collation: The collation of the database.
	Collation *string `json:"collation,omitempty"`

	// CreateMode: Specifies the mode of database creation.
	// Default: regular database creation.
	// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the
	// source database.
	// Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the
	// resource ID of the existing primary database.
	// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId
	// must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
	// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable
	// database resource ID to restore.
	// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If
	// sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise
	// sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
	// restorePointInTime may also be specified to restore from an earlier point in time.
	// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
	// recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
	// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
	CreateMode *DatabaseProperties_CreateMode `json:"createMode,omitempty"`

	// ElasticPoolId: The resource identifier of the elastic pool containing this database.
	ElasticPoolId *string `json:"elasticPoolId,omitempty"`

	// HighAvailabilityReplicaCount: The number of secondary replicas associated with the database that are used to provide
	// high availability.
	HighAvailabilityReplicaCount *int `json:"highAvailabilityReplicaCount,omitempty"`

	// LicenseType: The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you
	// have a license and are eligible for the Azure Hybrid Benefit.
	LicenseType *DatabaseProperties_LicenseType `json:"licenseType,omitempty"`

	// +kubebuilder:validation:Required
	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceId: The resource identifier of the long term retention backup associated with create
	// operation of this database.
	LongTermRetentionBackupResourceId *string `json:"longTermRetentionBackupResourceId,omitempty"`

	// MaintenanceConfigurationId: Maintenance configuration id assigned to the database. This configuration defines the period
	// when the maintenance updates will occur.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// MaxSizeBytes: The max size of the database expressed in bytes.
	MaxSizeBytes *int `json:"maxSizeBytes,omitempty"`

	// MinCapacity: Minimal capacity that database will always have allocated, if not paused
	MinCapacity *float64 `json:"minCapacity,omitempty"`
	Name        string   `json:"name,omitempty"`

	// ReadScale: The state of read-only routing. If enabled, connections that have application intent set to readonly in their
	// connection string may be routed to a readonly secondary replica in the same region.
	ReadScale *DatabaseProperties_ReadScale `json:"readScale,omitempty"`

	// RecoverableDatabaseId: The resource identifier of the recoverable database associated with create operation of this
	// database.
	RecoverableDatabaseId *string `json:"recoverableDatabaseId,omitempty"`

	// RecoveryServicesRecoveryPointId: The resource identifier of the recovery point associated with create operation of this
	// database.
	RecoveryServicesRecoveryPointId *string `json:"recoveryServicesRecoveryPointId,omitempty"`

	// RequestedBackupStorageRedundancy: The storage account type to be used to store backups for this database.
	RequestedBackupStorageRedundancy *DatabaseProperties_RequestedBackupStorageRedundancy `json:"requestedBackupStorageRedundancy,omitempty"`
	ResourceGroupName                string                                               `json:"resourceGroupName,omitempty"`
	ResourceGroupNameRef             *v1alpha1.Reference                                  `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector        *v1alpha1.Selector                                   `json:"resourceGroupNameSelector,omitempty"`

	// RestorableDroppedDatabaseId: The resource identifier of the restorable dropped database associated with create operation
	// of this database.
	RestorableDroppedDatabaseId *string `json:"restorableDroppedDatabaseId,omitempty"`

	// RestorePointInTime: Specifies the point in time (ISO8601 format) of the source database that will be restored to create
	// the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// SampleName: The name of the sample schema to apply when creating this database.
	SampleName *DatabaseProperties_SampleName `json:"sampleName,omitempty"`

	// SecondaryType: The secondary type of the database if it is a secondary.  Valid values are Geo and Named.
	SecondaryType      *DatabaseProperties_SecondaryType `json:"secondaryType,omitempty"`
	ServerName         string                            `json:"serverName,omitempty"`
	ServerNameRef      *v1alpha1.Reference               `json:"serverNameRef,omitempty"`
	ServerNameSelector *v1alpha1.Selector                `json:"serverNameSelector,omitempty"`

	// Sku: The database SKU.
	// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition,
	// family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation`
	// REST API or one of the following commands:
	// ```azurecli
	// az sql db list-editions -l <location> -o table
	// ````
	// ```powershell
	// Get-AzSqlServerServiceObjective -Location <location>
	// ````
	Sku *Sku `json:"sku,omitempty"`

	// SourceDatabaseDeletionDate: Specifies the time that the database was deleted.
	SourceDatabaseDeletionDate *string `json:"sourceDatabaseDeletionDate,omitempty"`

	// SourceDatabaseId: The resource identifier of the source database associated with create operation of this database.
	SourceDatabaseId *string `json:"sourceDatabaseId,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// ZoneRedundant: Whether or not this database is zone redundant, which means the replicas of this database will be spread
	// across multiple availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

// +kubebuilder:validation:Enum={"DATABASE_DEFAULT","SQL_Latin1_General_CP1_CI_AS"}
type DatabaseProperties_CatalogCollation string

const (
	DatabaseProperties_CatalogCollation_DATABASE_DEFAULT             = DatabaseProperties_CatalogCollation("DATABASE_DEFAULT")
	DatabaseProperties_CatalogCollation_SQL_Latin1_General_CP1_CI_AS = DatabaseProperties_CatalogCollation("SQL_Latin1_General_CP1_CI_AS")
)

type DatabaseProperties_CatalogCollation_STATUS string

const (
	DatabaseProperties_CatalogCollation_DATABASE_DEFAULT_STATUS             = DatabaseProperties_CatalogCollation_STATUS("DATABASE_DEFAULT")
	DatabaseProperties_CatalogCollation_SQL_Latin1_General_CP1_CI_AS_STATUS = DatabaseProperties_CatalogCollation_STATUS("SQL_Latin1_General_CP1_CI_AS")
)

// +kubebuilder:validation:Enum={"Copy","Default","OnlineSecondary","PointInTimeRestore","Recovery","Restore","RestoreExternalBackup","RestoreExternalBackupSecondary","RestoreLongTermRetentionBackup","Secondary"}
type DatabaseProperties_CreateMode string

const (
	DatabaseProperties_CreateMode_Copy                           = DatabaseProperties_CreateMode("Copy")
	DatabaseProperties_CreateMode_Default                        = DatabaseProperties_CreateMode("Default")
	DatabaseProperties_CreateMode_OnlineSecondary                = DatabaseProperties_CreateMode("OnlineSecondary")
	DatabaseProperties_CreateMode_PointInTimeRestore             = DatabaseProperties_CreateMode("PointInTimeRestore")
	DatabaseProperties_CreateMode_Recovery                       = DatabaseProperties_CreateMode("Recovery")
	DatabaseProperties_CreateMode_Restore                        = DatabaseProperties_CreateMode("Restore")
	DatabaseProperties_CreateMode_RestoreExternalBackup          = DatabaseProperties_CreateMode("RestoreExternalBackup")
	DatabaseProperties_CreateMode_RestoreExternalBackupSecondary = DatabaseProperties_CreateMode("RestoreExternalBackupSecondary")
	DatabaseProperties_CreateMode_RestoreLongTermRetentionBackup = DatabaseProperties_CreateMode("RestoreLongTermRetentionBackup")
	DatabaseProperties_CreateMode_Secondary                      = DatabaseProperties_CreateMode("Secondary")
)

type DatabaseProperties_CreateMode_STATUS string

const (
	DatabaseProperties_CreateMode_Copy_STATUS                           = DatabaseProperties_CreateMode_STATUS("Copy")
	DatabaseProperties_CreateMode_Default_STATUS                        = DatabaseProperties_CreateMode_STATUS("Default")
	DatabaseProperties_CreateMode_OnlineSecondary_STATUS                = DatabaseProperties_CreateMode_STATUS("OnlineSecondary")
	DatabaseProperties_CreateMode_PointInTimeRestore_STATUS             = DatabaseProperties_CreateMode_STATUS("PointInTimeRestore")
	DatabaseProperties_CreateMode_Recovery_STATUS                       = DatabaseProperties_CreateMode_STATUS("Recovery")
	DatabaseProperties_CreateMode_Restore_STATUS                        = DatabaseProperties_CreateMode_STATUS("Restore")
	DatabaseProperties_CreateMode_RestoreExternalBackup_STATUS          = DatabaseProperties_CreateMode_STATUS("RestoreExternalBackup")
	DatabaseProperties_CreateMode_RestoreExternalBackupSecondary_STATUS = DatabaseProperties_CreateMode_STATUS("RestoreExternalBackupSecondary")
	DatabaseProperties_CreateMode_RestoreLongTermRetentionBackup_STATUS = DatabaseProperties_CreateMode_STATUS("RestoreLongTermRetentionBackup")
	DatabaseProperties_CreateMode_Secondary_STATUS                      = DatabaseProperties_CreateMode_STATUS("Secondary")
)

type DatabaseProperties_CurrentBackupStorageRedundancy_STATUS string

const (
	DatabaseProperties_CurrentBackupStorageRedundancy_Geo_STATUS   = DatabaseProperties_CurrentBackupStorageRedundancy_STATUS("Geo")
	DatabaseProperties_CurrentBackupStorageRedundancy_Local_STATUS = DatabaseProperties_CurrentBackupStorageRedundancy_STATUS("Local")
	DatabaseProperties_CurrentBackupStorageRedundancy_Zone_STATUS  = DatabaseProperties_CurrentBackupStorageRedundancy_STATUS("Zone")
)

// +kubebuilder:validation:Enum={"BasePrice","LicenseIncluded"}
type DatabaseProperties_LicenseType string

const (
	DatabaseProperties_LicenseType_BasePrice       = DatabaseProperties_LicenseType("BasePrice")
	DatabaseProperties_LicenseType_LicenseIncluded = DatabaseProperties_LicenseType("LicenseIncluded")
)

type DatabaseProperties_LicenseType_STATUS string

const (
	DatabaseProperties_LicenseType_BasePrice_STATUS       = DatabaseProperties_LicenseType_STATUS("BasePrice")
	DatabaseProperties_LicenseType_LicenseIncluded_STATUS = DatabaseProperties_LicenseType_STATUS("LicenseIncluded")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type DatabaseProperties_ReadScale string

const (
	DatabaseProperties_ReadScale_Disabled = DatabaseProperties_ReadScale("Disabled")
	DatabaseProperties_ReadScale_Enabled  = DatabaseProperties_ReadScale("Enabled")
)

type DatabaseProperties_ReadScale_STATUS string

const (
	DatabaseProperties_ReadScale_Disabled_STATUS = DatabaseProperties_ReadScale_STATUS("Disabled")
	DatabaseProperties_ReadScale_Enabled_STATUS  = DatabaseProperties_ReadScale_STATUS("Enabled")
)

// +kubebuilder:validation:Enum={"Geo","Local","Zone"}
type DatabaseProperties_RequestedBackupStorageRedundancy string

const (
	DatabaseProperties_RequestedBackupStorageRedundancy_Geo   = DatabaseProperties_RequestedBackupStorageRedundancy("Geo")
	DatabaseProperties_RequestedBackupStorageRedundancy_Local = DatabaseProperties_RequestedBackupStorageRedundancy("Local")
	DatabaseProperties_RequestedBackupStorageRedundancy_Zone  = DatabaseProperties_RequestedBackupStorageRedundancy("Zone")
)

type DatabaseProperties_RequestedBackupStorageRedundancy_STATUS string

const (
	DatabaseProperties_RequestedBackupStorageRedundancy_Geo_STATUS   = DatabaseProperties_RequestedBackupStorageRedundancy_STATUS("Geo")
	DatabaseProperties_RequestedBackupStorageRedundancy_Local_STATUS = DatabaseProperties_RequestedBackupStorageRedundancy_STATUS("Local")
	DatabaseProperties_RequestedBackupStorageRedundancy_Zone_STATUS  = DatabaseProperties_RequestedBackupStorageRedundancy_STATUS("Zone")
)

// +kubebuilder:validation:Enum={"AdventureWorksLT","WideWorldImportersFull","WideWorldImportersStd"}
type DatabaseProperties_SampleName string

const (
	DatabaseProperties_SampleName_AdventureWorksLT       = DatabaseProperties_SampleName("AdventureWorksLT")
	DatabaseProperties_SampleName_WideWorldImportersFull = DatabaseProperties_SampleName("WideWorldImportersFull")
	DatabaseProperties_SampleName_WideWorldImportersStd  = DatabaseProperties_SampleName("WideWorldImportersStd")
)

type DatabaseProperties_SampleName_STATUS string

const (
	DatabaseProperties_SampleName_AdventureWorksLT_STATUS       = DatabaseProperties_SampleName_STATUS("AdventureWorksLT")
	DatabaseProperties_SampleName_WideWorldImportersFull_STATUS = DatabaseProperties_SampleName_STATUS("WideWorldImportersFull")
	DatabaseProperties_SampleName_WideWorldImportersStd_STATUS  = DatabaseProperties_SampleName_STATUS("WideWorldImportersStd")
)

// +kubebuilder:validation:Enum={"Geo","Named"}
type DatabaseProperties_SecondaryType string

const (
	DatabaseProperties_SecondaryType_Geo   = DatabaseProperties_SecondaryType("Geo")
	DatabaseProperties_SecondaryType_Named = DatabaseProperties_SecondaryType("Named")
)

<<<<<<< HEAD
type DatabaseProperties_SecondaryType_STATUS string

const (
	DatabaseProperties_SecondaryType_Geo_STATUS   = DatabaseProperties_SecondaryType_STATUS("Geo")
	DatabaseProperties_SecondaryType_Named_STATUS = DatabaseProperties_SecondaryType_STATUS("Named")
)

type DatabaseProperties_Status_STATUS string

const (
	DatabaseProperties_Status_AutoClosed_STATUS                        = DatabaseProperties_Status_STATUS("AutoClosed")
	DatabaseProperties_Status_Copying_STATUS                           = DatabaseProperties_Status_STATUS("Copying")
	DatabaseProperties_Status_Creating_STATUS                          = DatabaseProperties_Status_STATUS("Creating")
	DatabaseProperties_Status_Disabled_STATUS                          = DatabaseProperties_Status_STATUS("Disabled")
	DatabaseProperties_Status_EmergencyMode_STATUS                     = DatabaseProperties_Status_STATUS("EmergencyMode")
	DatabaseProperties_Status_Inaccessible_STATUS                      = DatabaseProperties_Status_STATUS("Inaccessible")
	DatabaseProperties_Status_Offline_STATUS                           = DatabaseProperties_Status_STATUS("Offline")
	DatabaseProperties_Status_OfflineChangingDwPerformanceTiers_STATUS = DatabaseProperties_Status_STATUS("OfflineChangingDwPerformanceTiers")
	DatabaseProperties_Status_OfflineSecondary_STATUS                  = DatabaseProperties_Status_STATUS("OfflineSecondary")
	DatabaseProperties_Status_Online_STATUS                            = DatabaseProperties_Status_STATUS("Online")
	DatabaseProperties_Status_OnlineChangingDwPerformanceTiers_STATUS  = DatabaseProperties_Status_STATUS("OnlineChangingDwPerformanceTiers")
	DatabaseProperties_Status_Paused_STATUS                            = DatabaseProperties_Status_STATUS("Paused")
	DatabaseProperties_Status_Pausing_STATUS                           = DatabaseProperties_Status_STATUS("Pausing")
	DatabaseProperties_Status_Recovering_STATUS                        = DatabaseProperties_Status_STATUS("Recovering")
	DatabaseProperties_Status_RecoveryPending_STATUS                   = DatabaseProperties_Status_STATUS("RecoveryPending")
	DatabaseProperties_Status_Restoring_STATUS                         = DatabaseProperties_Status_STATUS("Restoring")
	DatabaseProperties_Status_Resuming_STATUS                          = DatabaseProperties_Status_STATUS("Resuming")
	DatabaseProperties_Status_Scaling_STATUS                           = DatabaseProperties_Status_STATUS("Scaling")
	DatabaseProperties_Status_Shutdown_STATUS                          = DatabaseProperties_Status_STATUS("Shutdown")
	DatabaseProperties_Status_Standby_STATUS                           = DatabaseProperties_Status_STATUS("Standby")
	DatabaseProperties_Status_Suspect_STATUS                           = DatabaseProperties_Status_STATUS("Suspect")
)

=======
type DatabasePropertiesSTATUSCatalogCollation string

const (
	DatabasePropertiesSTATUSCatalogCollation_DATABASEDEFAULT         = DatabasePropertiesSTATUSCatalogCollation("DATABASE_DEFAULT")
	DatabasePropertiesSTATUSCatalogCollation_SQLLatin1GeneralCP1CIAS = DatabasePropertiesSTATUSCatalogCollation("SQL_Latin1_General_CP1_CI_AS")
)

type DatabasePropertiesSTATUSCreateMode string

const (
	DatabasePropertiesSTATUSCreateMode_Copy                           = DatabasePropertiesSTATUSCreateMode("Copy")
	DatabasePropertiesSTATUSCreateMode_Default                        = DatabasePropertiesSTATUSCreateMode("Default")
	DatabasePropertiesSTATUSCreateMode_OnlineSecondary                = DatabasePropertiesSTATUSCreateMode("OnlineSecondary")
	DatabasePropertiesSTATUSCreateMode_PointInTimeRestore             = DatabasePropertiesSTATUSCreateMode("PointInTimeRestore")
	DatabasePropertiesSTATUSCreateMode_Recovery                       = DatabasePropertiesSTATUSCreateMode("Recovery")
	DatabasePropertiesSTATUSCreateMode_Restore                        = DatabasePropertiesSTATUSCreateMode("Restore")
	DatabasePropertiesSTATUSCreateMode_RestoreExternalBackup          = DatabasePropertiesSTATUSCreateMode("RestoreExternalBackup")
	DatabasePropertiesSTATUSCreateMode_RestoreExternalBackupSecondary = DatabasePropertiesSTATUSCreateMode("RestoreExternalBackupSecondary")
	DatabasePropertiesSTATUSCreateMode_RestoreLongTermRetentionBackup = DatabasePropertiesSTATUSCreateMode("RestoreLongTermRetentionBackup")
	DatabasePropertiesSTATUSCreateMode_Secondary                      = DatabasePropertiesSTATUSCreateMode("Secondary")
)

type DatabasePropertiesSTATUSCurrentBackupStorageRedundancy string

const (
	DatabasePropertiesSTATUSCurrentBackupStorageRedundancy_Geo   = DatabasePropertiesSTATUSCurrentBackupStorageRedundancy("Geo")
	DatabasePropertiesSTATUSCurrentBackupStorageRedundancy_Local = DatabasePropertiesSTATUSCurrentBackupStorageRedundancy("Local")
	DatabasePropertiesSTATUSCurrentBackupStorageRedundancy_Zone  = DatabasePropertiesSTATUSCurrentBackupStorageRedundancy("Zone")
)

type DatabasePropertiesSTATUSLicenseType string

const (
	DatabasePropertiesSTATUSLicenseType_BasePrice       = DatabasePropertiesSTATUSLicenseType("BasePrice")
	DatabasePropertiesSTATUSLicenseType_LicenseIncluded = DatabasePropertiesSTATUSLicenseType("LicenseIncluded")
)

type DatabasePropertiesSTATUSReadScale string

const (
	DatabasePropertiesSTATUSReadScale_Disabled = DatabasePropertiesSTATUSReadScale("Disabled")
	DatabasePropertiesSTATUSReadScale_Enabled  = DatabasePropertiesSTATUSReadScale("Enabled")
)

type DatabasePropertiesSTATUSRequestedBackupStorageRedundancy string

const (
	DatabasePropertiesSTATUSRequestedBackupStorageRedundancy_Geo   = DatabasePropertiesSTATUSRequestedBackupStorageRedundancy("Geo")
	DatabasePropertiesSTATUSRequestedBackupStorageRedundancy_Local = DatabasePropertiesSTATUSRequestedBackupStorageRedundancy("Local")
	DatabasePropertiesSTATUSRequestedBackupStorageRedundancy_Zone  = DatabasePropertiesSTATUSRequestedBackupStorageRedundancy("Zone")
)

type DatabasePropertiesSTATUSSampleName string

const (
	DatabasePropertiesSTATUSSampleName_AdventureWorksLT       = DatabasePropertiesSTATUSSampleName("AdventureWorksLT")
	DatabasePropertiesSTATUSSampleName_WideWorldImportersFull = DatabasePropertiesSTATUSSampleName("WideWorldImportersFull")
	DatabasePropertiesSTATUSSampleName_WideWorldImportersStd  = DatabasePropertiesSTATUSSampleName("WideWorldImportersStd")
)

type DatabasePropertiesSTATUSSecondaryType string

const (
	DatabasePropertiesSTATUSSecondaryType_Geo   = DatabasePropertiesSTATUSSecondaryType("Geo")
	DatabasePropertiesSTATUSSecondaryType_Named = DatabasePropertiesSTATUSSecondaryType("Named")
)

type DatabasePropertiesSTATUSStatus string

const (
	DatabasePropertiesSTATUSStatus_AutoClosed                        = DatabasePropertiesSTATUSStatus("AutoClosed")
	DatabasePropertiesSTATUSStatus_Copying                           = DatabasePropertiesSTATUSStatus("Copying")
	DatabasePropertiesSTATUSStatus_Creating                          = DatabasePropertiesSTATUSStatus("Creating")
	DatabasePropertiesSTATUSStatus_Disabled                          = DatabasePropertiesSTATUSStatus("Disabled")
	DatabasePropertiesSTATUSStatus_EmergencyMode                     = DatabasePropertiesSTATUSStatus("EmergencyMode")
	DatabasePropertiesSTATUSStatus_Inaccessible                      = DatabasePropertiesSTATUSStatus("Inaccessible")
	DatabasePropertiesSTATUSStatus_Offline                           = DatabasePropertiesSTATUSStatus("Offline")
	DatabasePropertiesSTATUSStatus_OfflineChangingDwPerformanceTiers = DatabasePropertiesSTATUSStatus("OfflineChangingDwPerformanceTiers")
	DatabasePropertiesSTATUSStatus_OfflineSecondary                  = DatabasePropertiesSTATUSStatus("OfflineSecondary")
	DatabasePropertiesSTATUSStatus_Online                            = DatabasePropertiesSTATUSStatus("Online")
	DatabasePropertiesSTATUSStatus_OnlineChangingDwPerformanceTiers  = DatabasePropertiesSTATUSStatus("OnlineChangingDwPerformanceTiers")
	DatabasePropertiesSTATUSStatus_Paused                            = DatabasePropertiesSTATUSStatus("Paused")
	DatabasePropertiesSTATUSStatus_Pausing                           = DatabasePropertiesSTATUSStatus("Pausing")
	DatabasePropertiesSTATUSStatus_Recovering                        = DatabasePropertiesSTATUSStatus("Recovering")
	DatabasePropertiesSTATUSStatus_RecoveryPending                   = DatabasePropertiesSTATUSStatus("RecoveryPending")
	DatabasePropertiesSTATUSStatus_Restoring                         = DatabasePropertiesSTATUSStatus("Restoring")
	DatabasePropertiesSTATUSStatus_Resuming                          = DatabasePropertiesSTATUSStatus("Resuming")
	DatabasePropertiesSTATUSStatus_Scaling                           = DatabasePropertiesSTATUSStatus("Scaling")
	DatabasePropertiesSTATUSStatus_Shutdown                          = DatabasePropertiesSTATUSStatus("Shutdown")
	DatabasePropertiesSTATUSStatus_Standby                           = DatabasePropertiesSTATUSStatus("Standby")
	DatabasePropertiesSTATUSStatus_Suspect                           = DatabasePropertiesSTATUSStatus("Suspect")
)

// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/definitions/Sku
>>>>>>> main
type Sku struct {
	// Capacity: Capacity of the particular SKU.
	Capacity *int `json:"capacity,omitempty"`

	// Family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`

	// +kubebuilder:validation:Required
	// Name: The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name *string `json:"name,omitempty"`

	// Size: Size of the particular SKU
	Size *string `json:"size,omitempty"`

	// Tier: The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `json:"tier,omitempty"`
}

type Sku_STATUS struct {
	// Capacity: Capacity of the particular SKU.
	Capacity *int `json:"capacity,omitempty"`

	// Family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`

	// Name: The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name *string `json:"name,omitempty"`

	// Size: Size of the particular SKU
	Size *string `json:"size,omitempty"`

	// Tier: The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `json:"tier,omitempty"`
}

func init() {
	SchemeBuilder.Register(&ServersDatabase{}, &ServersDatabaseList{})
}
