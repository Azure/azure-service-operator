// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101preview

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=servers_databases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={servers_databases/status,servers_databases/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/resourceDefinitions/servers_databases
type Servers_Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_Databases_Spec `json:"spec,omitempty"`
	Status            Database_STATUS        `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/resourceDefinitions/servers_databases
type Servers_DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Servers_Database `json:"items"`
}

type Database_STATUS struct {
	v1alpha1.ResourceStatus `json:",inline,omitempty"`
	AtProvider              DatabaseObservation `json:"atProvider,omitempty"`
}

type Servers_Databases_Spec struct {
	v1alpha1.ResourceSpec `json:",inline,omitempty"`
	ForProvider           Servers_DatabasesParameters `json:"forProvider,omitempty"`
}

type DatabaseObservation struct {
	// AutoPauseDelay: Time in minutes after which database is automatically paused. A value of -1 means that automatic pause
	// is disabled
	AutoPauseDelay *int `json:"autoPauseDelay,omitempty"`

	// CatalogCollation: Collation of the metadata catalog.
	CatalogCollation *DatabaseProperties_STATUS_CatalogCollation `json:"catalogCollation,omitempty"`

	// Collation: The collation of the database.
	Collation *string `json:"collation,omitempty"`

	// CreateMode: Specifies the mode of database creation.
	// Default: regular database creation.
	// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the
	// source database.
	// Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the
	// resource ID of the existing primary database.
	// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId
	// must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
	// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable
	// database resource ID to restore.
	// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If
	// sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise
	// sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
	// restorePointInTime may also be specified to restore from an earlier point in time.
	// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
	// recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
	// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
	CreateMode *DatabaseProperties_STATUS_CreateMode `json:"createMode,omitempty"`

	// CreationDate: The creation date of the database (ISO8601 format).
	CreationDate *string `json:"creationDate,omitempty"`

	// CurrentBackupStorageRedundancy: The storage account type used to store backups for this database.
	CurrentBackupStorageRedundancy *DatabaseProperties_STATUS_CurrentBackupStorageRedundancy `json:"currentBackupStorageRedundancy,omitempty"`

	// CurrentServiceObjectiveName: The current service level objective name of the database.
	CurrentServiceObjectiveName *string `json:"currentServiceObjectiveName,omitempty"`

	// CurrentSku: The name and tier of the SKU.
	CurrentSku *Sku_STATUS `json:"currentSku,omitempty"`

	// DatabaseId: The ID of the database.
	DatabaseId *string `json:"databaseId,omitempty"`

	// DefaultSecondaryLocation: The default secondary region for this database.
	DefaultSecondaryLocation *string `json:"defaultSecondaryLocation,omitempty"`

	// EarliestRestoreDate: This records the earliest start date and time that restore is available for this database (ISO8601
	// format).
	EarliestRestoreDate *string `json:"earliestRestoreDate,omitempty"`

	// ElasticPoolId: The resource identifier of the elastic pool containing this database.
	ElasticPoolId *string `json:"elasticPoolId,omitempty"`

	// FailoverGroupId: Failover Group resource identifier that this database belongs to.
	FailoverGroupId *string `json:"failoverGroupId,omitempty"`

	// HighAvailabilityReplicaCount: The number of secondary replicas associated with the database that are used to provide
	// high availability.
	HighAvailabilityReplicaCount *int `json:"highAvailabilityReplicaCount,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Kind: Kind of database. This is metadata used for the Azure portal experience.
	Kind *string `json:"kind,omitempty"`

	// LicenseType: The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you
	// have a license and are eligible for the Azure Hybrid Benefit.
	LicenseType *DatabaseProperties_STATUS_LicenseType `json:"licenseType,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceId: The resource identifier of the long term retention backup associated with create
	// operation of this database.
	LongTermRetentionBackupResourceId *string `json:"longTermRetentionBackupResourceId,omitempty"`

	// MaintenanceConfigurationId: Maintenance configuration id assigned to the database. This configuration defines the period
	// when the maintenance updates will occur.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// ManagedBy: Resource that manages the database.
	ManagedBy *string `json:"managedBy,omitempty"`

	// MaxLogSizeBytes: The max log size for this database.
	MaxLogSizeBytes *int `json:"maxLogSizeBytes,omitempty"`

	// MaxSizeBytes: The max size of the database expressed in bytes.
	MaxSizeBytes *int `json:"maxSizeBytes,omitempty"`

	// MinCapacity: Minimal capacity that database will always have allocated, if not paused
	MinCapacity *float64 `json:"minCapacity,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// PausedDate: The date when database was paused by user configuration or action(ISO8601 format). Null if the database is
	// ready.
	PausedDate *string `json:"pausedDate,omitempty"`

	// ReadScale: The state of read-only routing. If enabled, connections that have application intent set to readonly in their
	// connection string may be routed to a readonly secondary replica in the same region.
	ReadScale *DatabaseProperties_STATUS_ReadScale `json:"readScale,omitempty"`

	// RecoverableDatabaseId: The resource identifier of the recoverable database associated with create operation of this
	// database.
	RecoverableDatabaseId *string `json:"recoverableDatabaseId,omitempty"`

	// RecoveryServicesRecoveryPointId: The resource identifier of the recovery point associated with create operation of this
	// database.
	RecoveryServicesRecoveryPointId *string `json:"recoveryServicesRecoveryPointId,omitempty"`

	// RequestedBackupStorageRedundancy: The storage account type to be used to store backups for this database.
	RequestedBackupStorageRedundancy *DatabaseProperties_STATUS_RequestedBackupStorageRedundancy `json:"requestedBackupStorageRedundancy,omitempty"`

	// RequestedServiceObjectiveName: The requested service level objective name of the database.
	RequestedServiceObjectiveName *string `json:"requestedServiceObjectiveName,omitempty"`

	// RestorableDroppedDatabaseId: The resource identifier of the restorable dropped database associated with create operation
	// of this database.
	RestorableDroppedDatabaseId *string `json:"restorableDroppedDatabaseId,omitempty"`

	// RestorePointInTime: Specifies the point in time (ISO8601 format) of the source database that will be restored to create
	// the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// ResumedDate: The date when database was resumed by user action or database login (ISO8601 format). Null if the database
	// is paused.
	ResumedDate *string `json:"resumedDate,omitempty"`

	// SampleName: The name of the sample schema to apply when creating this database.
	SampleName *DatabaseProperties_STATUS_SampleName `json:"sampleName,omitempty"`

	// SecondaryType: The secondary type of the database if it is a secondary.  Valid values are Geo and Named.
	SecondaryType *DatabaseProperties_STATUS_SecondaryType `json:"secondaryType,omitempty"`

	// Sku: The database SKU.
	// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition,
	// family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation`
	// REST API or one of the following commands:
	// ```azurecli
	// az sql db list-editions -l <location> -o table
	// ````
	// ```powershell
	// Get-AzSqlServerServiceObjective -Location <location>
	// ````
	Sku *Sku_STATUS `json:"sku,omitempty"`

	// SourceDatabaseDeletionDate: Specifies the time that the database was deleted.
	SourceDatabaseDeletionDate *string `json:"sourceDatabaseDeletionDate,omitempty"`

	// SourceDatabaseId: The resource identifier of the source database associated with create operation of this database.
	SourceDatabaseId *string `json:"sourceDatabaseId,omitempty"`

	// Status: The status of the database.
	Status *DatabaseProperties_STATUS_Status `json:"status,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// ZoneRedundant: Whether or not this database is zone redundant, which means the replicas of this database will be spread
	// across multiple availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

type Servers_DatabasesParameters struct {
	// AutoPauseDelay: Time in minutes after which database is automatically paused. A value of -1 means that automatic pause
	// is disabled
	AutoPauseDelay *int `json:"autoPauseDelay,omitempty"`

	// CatalogCollation: Collation of the metadata catalog.
	CatalogCollation *DatabaseProperties_CatalogCollation `json:"catalogCollation,omitempty"`

	// Collation: The collation of the database.
	Collation *string `json:"collation,omitempty"`

	// CreateMode: Specifies the mode of database creation.
	// Default: regular database creation.
	// Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the
	// source database.
	// Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the
	// resource ID of the existing primary database.
	// PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId
	// must be specified as the resource ID of the existing database, and restorePointInTime must be specified.
	// Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable
	// database resource ID to restore.
	// Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If
	// sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise
	// sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
	// restorePointInTime may also be specified to restore from an earlier point in time.
	// RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault.
	// recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.
	// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
	CreateMode *DatabaseProperties_CreateMode `json:"createMode,omitempty"`

	// ElasticPoolId: The resource identifier of the elastic pool containing this database.
	ElasticPoolId *string `json:"elasticPoolId,omitempty"`

	// HighAvailabilityReplicaCount: The number of secondary replicas associated with the database that are used to provide
	// high availability.
	HighAvailabilityReplicaCount *int `json:"highAvailabilityReplicaCount,omitempty"`

	// LicenseType: The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you
	// have a license and are eligible for the Azure Hybrid Benefit.
	LicenseType *DatabaseProperties_LicenseType `json:"licenseType,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceId: The resource identifier of the long term retention backup associated with create
	// operation of this database.
	LongTermRetentionBackupResourceId *string `json:"longTermRetentionBackupResourceId,omitempty"`

	// MaintenanceConfigurationId: Maintenance configuration id assigned to the database. This configuration defines the period
	// when the maintenance updates will occur.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// MaxSizeBytes: The max size of the database expressed in bytes.
	MaxSizeBytes *int `json:"maxSizeBytes,omitempty"`

	// MinCapacity: Minimal capacity that database will always have allocated, if not paused
	MinCapacity *float64 `json:"minCapacity,omitempty"`

	// +kubebuilder:validation:Required
	// Name: The name of the database.
	Name string `json:"name,omitempty"`

	// ReadScale: The state of read-only routing. If enabled, connections that have application intent set to readonly in their
	// connection string may be routed to a readonly secondary replica in the same region.
	ReadScale *DatabaseProperties_ReadScale `json:"readScale,omitempty"`

	// RecoverableDatabaseId: The resource identifier of the recoverable database associated with create operation of this
	// database.
	RecoverableDatabaseId *string `json:"recoverableDatabaseId,omitempty"`

	// RecoveryServicesRecoveryPointId: The resource identifier of the recovery point associated with create operation of this
	// database.
	RecoveryServicesRecoveryPointId *string `json:"recoveryServicesRecoveryPointId,omitempty"`

	// RequestedBackupStorageRedundancy: The storage account type to be used to store backups for this database.
	RequestedBackupStorageRedundancy *DatabaseProperties_RequestedBackupStorageRedundancy `json:"requestedBackupStorageRedundancy,omitempty"`
	ResourceGroupName                string                                               `json:"resourceGroupName,omitempty"`
	ResourceGroupNameRef             *v1alpha1.Reference                                  `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector        *v1alpha1.Selector                                   `json:"resourceGroupNameSelector,omitempty"`

	// RestorableDroppedDatabaseId: The resource identifier of the restorable dropped database associated with create operation
	// of this database.
	RestorableDroppedDatabaseId *string `json:"restorableDroppedDatabaseId,omitempty"`

	// RestorePointInTime: Specifies the point in time (ISO8601 format) of the source database that will be restored to create
	// the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// SampleName: The name of the sample schema to apply when creating this database.
	SampleName *DatabaseProperties_SampleName `json:"sampleName,omitempty"`

	// SecondaryType: The secondary type of the database if it is a secondary.  Valid values are Geo and Named.
	SecondaryType      *DatabaseProperties_SecondaryType `json:"secondaryType,omitempty"`
	ServerName         string                            `json:"serverName,omitempty"`
	ServerNameRef      *v1alpha1.Reference               `json:"serverNameRef,omitempty"`
	ServerNameSelector *v1alpha1.Selector                `json:"serverNameSelector,omitempty"`

	// Sku: An ARM Resource SKU.
	Sku *Sku `json:"sku,omitempty"`

	// SourceDatabaseDeletionDate: Specifies the time that the database was deleted.
	SourceDatabaseDeletionDate *string `json:"sourceDatabaseDeletionDate,omitempty"`

	// SourceDatabaseId: The resource identifier of the source database associated with create operation of this database.
	SourceDatabaseId *string `json:"sourceDatabaseId,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// ZoneRedundant: Whether or not this database is zone redundant, which means the replicas of this database will be spread
	// across multiple availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

// +kubebuilder:validation:Enum={"DATABASE_DEFAULT","SQL_Latin1_General_CP1_CI_AS"}
type DatabaseProperties_CatalogCollation string

const (
	DatabaseProperties_CatalogCollation_DATABASE_DEFAULT             = DatabaseProperties_CatalogCollation("DATABASE_DEFAULT")
	DatabaseProperties_CatalogCollation_SQL_Latin1_General_CP1_CI_AS = DatabaseProperties_CatalogCollation("SQL_Latin1_General_CP1_CI_AS")
)

// +kubebuilder:validation:Enum={"Copy","Default","OnlineSecondary","PointInTimeRestore","Recovery","Restore","RestoreExternalBackup","RestoreExternalBackupSecondary","RestoreLongTermRetentionBackup","Secondary"}
type DatabaseProperties_CreateMode string

const (
	DatabaseProperties_CreateMode_Copy                           = DatabaseProperties_CreateMode("Copy")
	DatabaseProperties_CreateMode_Default                        = DatabaseProperties_CreateMode("Default")
	DatabaseProperties_CreateMode_OnlineSecondary                = DatabaseProperties_CreateMode("OnlineSecondary")
	DatabaseProperties_CreateMode_PointInTimeRestore             = DatabaseProperties_CreateMode("PointInTimeRestore")
	DatabaseProperties_CreateMode_Recovery                       = DatabaseProperties_CreateMode("Recovery")
	DatabaseProperties_CreateMode_Restore                        = DatabaseProperties_CreateMode("Restore")
	DatabaseProperties_CreateMode_RestoreExternalBackup          = DatabaseProperties_CreateMode("RestoreExternalBackup")
	DatabaseProperties_CreateMode_RestoreExternalBackupSecondary = DatabaseProperties_CreateMode("RestoreExternalBackupSecondary")
	DatabaseProperties_CreateMode_RestoreLongTermRetentionBackup = DatabaseProperties_CreateMode("RestoreLongTermRetentionBackup")
	DatabaseProperties_CreateMode_Secondary                      = DatabaseProperties_CreateMode("Secondary")
)

// +kubebuilder:validation:Enum={"BasePrice","LicenseIncluded"}
type DatabaseProperties_LicenseType string

const (
	DatabaseProperties_LicenseType_BasePrice       = DatabaseProperties_LicenseType("BasePrice")
	DatabaseProperties_LicenseType_LicenseIncluded = DatabaseProperties_LicenseType("LicenseIncluded")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type DatabaseProperties_ReadScale string

const (
	DatabaseProperties_ReadScale_Disabled = DatabaseProperties_ReadScale("Disabled")
	DatabaseProperties_ReadScale_Enabled  = DatabaseProperties_ReadScale("Enabled")
)

// +kubebuilder:validation:Enum={"Geo","Local","Zone"}
type DatabaseProperties_RequestedBackupStorageRedundancy string

const (
	DatabaseProperties_RequestedBackupStorageRedundancy_Geo   = DatabaseProperties_RequestedBackupStorageRedundancy("Geo")
	DatabaseProperties_RequestedBackupStorageRedundancy_Local = DatabaseProperties_RequestedBackupStorageRedundancy("Local")
	DatabaseProperties_RequestedBackupStorageRedundancy_Zone  = DatabaseProperties_RequestedBackupStorageRedundancy("Zone")
)

// +kubebuilder:validation:Enum={"AdventureWorksLT","WideWorldImportersFull","WideWorldImportersStd"}
type DatabaseProperties_SampleName string

const (
	DatabaseProperties_SampleName_AdventureWorksLT       = DatabaseProperties_SampleName("AdventureWorksLT")
	DatabaseProperties_SampleName_WideWorldImportersFull = DatabaseProperties_SampleName("WideWorldImportersFull")
	DatabaseProperties_SampleName_WideWorldImportersStd  = DatabaseProperties_SampleName("WideWorldImportersStd")
)

// +kubebuilder:validation:Enum={"Geo","Named"}
type DatabaseProperties_SecondaryType string

const (
	DatabaseProperties_SecondaryType_Geo   = DatabaseProperties_SecondaryType("Geo")
	DatabaseProperties_SecondaryType_Named = DatabaseProperties_SecondaryType("Named")
)

type DatabaseProperties_STATUS_CatalogCollation string

const (
	DatabaseProperties_STATUS_CatalogCollation_DATABASE_DEFAULT             = DatabaseProperties_STATUS_CatalogCollation("DATABASE_DEFAULT")
	DatabaseProperties_STATUS_CatalogCollation_SQL_Latin1_General_CP1_CI_AS = DatabaseProperties_STATUS_CatalogCollation("SQL_Latin1_General_CP1_CI_AS")
)

type DatabaseProperties_STATUS_CreateMode string

const (
	DatabaseProperties_STATUS_CreateMode_Copy                           = DatabaseProperties_STATUS_CreateMode("Copy")
	DatabaseProperties_STATUS_CreateMode_Default                        = DatabaseProperties_STATUS_CreateMode("Default")
	DatabaseProperties_STATUS_CreateMode_OnlineSecondary                = DatabaseProperties_STATUS_CreateMode("OnlineSecondary")
	DatabaseProperties_STATUS_CreateMode_PointInTimeRestore             = DatabaseProperties_STATUS_CreateMode("PointInTimeRestore")
	DatabaseProperties_STATUS_CreateMode_Recovery                       = DatabaseProperties_STATUS_CreateMode("Recovery")
	DatabaseProperties_STATUS_CreateMode_Restore                        = DatabaseProperties_STATUS_CreateMode("Restore")
	DatabaseProperties_STATUS_CreateMode_RestoreExternalBackup          = DatabaseProperties_STATUS_CreateMode("RestoreExternalBackup")
	DatabaseProperties_STATUS_CreateMode_RestoreExternalBackupSecondary = DatabaseProperties_STATUS_CreateMode("RestoreExternalBackupSecondary")
	DatabaseProperties_STATUS_CreateMode_RestoreLongTermRetentionBackup = DatabaseProperties_STATUS_CreateMode("RestoreLongTermRetentionBackup")
	DatabaseProperties_STATUS_CreateMode_Secondary                      = DatabaseProperties_STATUS_CreateMode("Secondary")
)

type DatabaseProperties_STATUS_CurrentBackupStorageRedundancy string

const (
	DatabaseProperties_STATUS_CurrentBackupStorageRedundancy_Geo   = DatabaseProperties_STATUS_CurrentBackupStorageRedundancy("Geo")
	DatabaseProperties_STATUS_CurrentBackupStorageRedundancy_Local = DatabaseProperties_STATUS_CurrentBackupStorageRedundancy("Local")
	DatabaseProperties_STATUS_CurrentBackupStorageRedundancy_Zone  = DatabaseProperties_STATUS_CurrentBackupStorageRedundancy("Zone")
)

type DatabaseProperties_STATUS_LicenseType string

const (
	DatabaseProperties_STATUS_LicenseType_BasePrice       = DatabaseProperties_STATUS_LicenseType("BasePrice")
	DatabaseProperties_STATUS_LicenseType_LicenseIncluded = DatabaseProperties_STATUS_LicenseType("LicenseIncluded")
)

type DatabaseProperties_STATUS_ReadScale string

const (
	DatabaseProperties_STATUS_ReadScale_Disabled = DatabaseProperties_STATUS_ReadScale("Disabled")
	DatabaseProperties_STATUS_ReadScale_Enabled  = DatabaseProperties_STATUS_ReadScale("Enabled")
)

type DatabaseProperties_STATUS_RequestedBackupStorageRedundancy string

const (
	DatabaseProperties_STATUS_RequestedBackupStorageRedundancy_Geo   = DatabaseProperties_STATUS_RequestedBackupStorageRedundancy("Geo")
	DatabaseProperties_STATUS_RequestedBackupStorageRedundancy_Local = DatabaseProperties_STATUS_RequestedBackupStorageRedundancy("Local")
	DatabaseProperties_STATUS_RequestedBackupStorageRedundancy_Zone  = DatabaseProperties_STATUS_RequestedBackupStorageRedundancy("Zone")
)

type DatabaseProperties_STATUS_SampleName string

const (
	DatabaseProperties_STATUS_SampleName_AdventureWorksLT       = DatabaseProperties_STATUS_SampleName("AdventureWorksLT")
	DatabaseProperties_STATUS_SampleName_WideWorldImportersFull = DatabaseProperties_STATUS_SampleName("WideWorldImportersFull")
	DatabaseProperties_STATUS_SampleName_WideWorldImportersStd  = DatabaseProperties_STATUS_SampleName("WideWorldImportersStd")
)

type DatabaseProperties_STATUS_SecondaryType string

const (
	DatabaseProperties_STATUS_SecondaryType_Geo   = DatabaseProperties_STATUS_SecondaryType("Geo")
	DatabaseProperties_STATUS_SecondaryType_Named = DatabaseProperties_STATUS_SecondaryType("Named")
)

type DatabaseProperties_STATUS_Status string

const (
	DatabaseProperties_STATUS_Status_AutoClosed                        = DatabaseProperties_STATUS_Status("AutoClosed")
	DatabaseProperties_STATUS_Status_Copying                           = DatabaseProperties_STATUS_Status("Copying")
	DatabaseProperties_STATUS_Status_Creating                          = DatabaseProperties_STATUS_Status("Creating")
	DatabaseProperties_STATUS_Status_Disabled                          = DatabaseProperties_STATUS_Status("Disabled")
	DatabaseProperties_STATUS_Status_EmergencyMode                     = DatabaseProperties_STATUS_Status("EmergencyMode")
	DatabaseProperties_STATUS_Status_Inaccessible                      = DatabaseProperties_STATUS_Status("Inaccessible")
	DatabaseProperties_STATUS_Status_Offline                           = DatabaseProperties_STATUS_Status("Offline")
	DatabaseProperties_STATUS_Status_OfflineChangingDwPerformanceTiers = DatabaseProperties_STATUS_Status("OfflineChangingDwPerformanceTiers")
	DatabaseProperties_STATUS_Status_OfflineSecondary                  = DatabaseProperties_STATUS_Status("OfflineSecondary")
	DatabaseProperties_STATUS_Status_Online                            = DatabaseProperties_STATUS_Status("Online")
	DatabaseProperties_STATUS_Status_OnlineChangingDwPerformanceTiers  = DatabaseProperties_STATUS_Status("OnlineChangingDwPerformanceTiers")
	DatabaseProperties_STATUS_Status_Paused                            = DatabaseProperties_STATUS_Status("Paused")
	DatabaseProperties_STATUS_Status_Pausing                           = DatabaseProperties_STATUS_Status("Pausing")
	DatabaseProperties_STATUS_Status_Recovering                        = DatabaseProperties_STATUS_Status("Recovering")
	DatabaseProperties_STATUS_Status_RecoveryPending                   = DatabaseProperties_STATUS_Status("RecoveryPending")
	DatabaseProperties_STATUS_Status_Restoring                         = DatabaseProperties_STATUS_Status("Restoring")
	DatabaseProperties_STATUS_Status_Resuming                          = DatabaseProperties_STATUS_Status("Resuming")
	DatabaseProperties_STATUS_Status_Scaling                           = DatabaseProperties_STATUS_Status("Scaling")
	DatabaseProperties_STATUS_Status_Shutdown                          = DatabaseProperties_STATUS_Status("Shutdown")
	DatabaseProperties_STATUS_Status_Standby                           = DatabaseProperties_STATUS_Status("Standby")
	DatabaseProperties_STATUS_Status_Suspect                           = DatabaseProperties_STATUS_Status("Suspect")
)

// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/definitions/Sku
type Sku struct {
	// Capacity: Capacity of the particular SKU.
	Capacity *int `json:"capacity,omitempty"`

	// Family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`

	// +kubebuilder:validation:Required
	// Name: The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name *string `json:"name,omitempty"`

	// Size: Size of the particular SKU
	Size *string `json:"size,omitempty"`

	// Tier: The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `json:"tier,omitempty"`
}

type Sku_STATUS struct {
	// Capacity: Capacity of the particular SKU.
	Capacity *int `json:"capacity,omitempty"`

	// Family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`

	// Name: The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name *string `json:"name,omitempty"`

	// Size: Size of the particular SKU
	Size *string `json:"size,omitempty"`

	// Tier: The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `json:"tier,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Servers_Database{}, &Servers_DatabaseList{})
}
