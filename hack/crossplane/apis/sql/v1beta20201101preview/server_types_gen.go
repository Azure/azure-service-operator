// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101preview

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=servers,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={servers/status,servers/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/resourceDefinitions/servers
type Server struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_Spec  `json:"spec,omitempty"`
	Status            Server_STATUS `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/resourceDefinitions/servers
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Server `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-11-01-preview"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-11-01-preview")

type Server_STATUS struct {
	v1alpha1.ResourceStatus `json:",inline,omitempty"`
	AtProvider              ServerObservation `json:"atProvider,omitempty"`
}

type Servers_Spec struct {
	v1alpha1.ResourceSpec `json:",inline,omitempty"`
	ForProvider           ServersParameters `json:"forProvider,omitempty"`
}

type ServerObservation struct {
	// AdministratorLogin: Administrator username for the server. Once created it cannot be changed.
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// AdministratorLoginPassword: The administrator login password (required for server creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	// Administrators: The Azure Active Directory identity of the server.
	Administrators *ServerExternalAdministrator_STATUS `json:"administrators,omitempty"`

	// FullyQualifiedDomainName: The fully qualified domain name of the server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Identity: The Azure Active Directory identity of the server.
	Identity *ResourceIdentity_STATUS `json:"identity,omitempty"`

	// KeyId: A CMK URI of the key to use for encryption.
	KeyId *string `json:"keyId,omitempty"`

	// Kind: Kind of sql server. This is metadata used for the Azure portal experience.
	Kind *string `json:"kind,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// MinimalTlsVersion: Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
	MinimalTlsVersion *string `json:"minimalTlsVersion,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// PrimaryUserAssignedIdentityId: The resource id of a user assigned identity to be used by default.
	PrimaryUserAssignedIdentityId *string `json:"primaryUserAssignedIdentityId,omitempty"`

	// PrivateEndpointConnections: List of private endpoint connections on a server
	PrivateEndpointConnections []ServerPrivateEndpointConnection_STATUS `json:"privateEndpointConnections,omitempty"`

	// PublicNetworkAccess: Whether or not public endpoint access is allowed for this server.  Value is optional but if passed
	// in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess *ServerPropertiesSTATUSPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// State: The state of the server.
	State *string `json:"state,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// Version: The version of the server.
	Version *string `json:"version,omitempty"`

	// WorkspaceFeature: Whether or not existing server has a workspace created and if it allows connection from workspace
	WorkspaceFeature *ServerPropertiesSTATUSWorkspaceFeature `json:"workspaceFeature,omitempty"`
}

type ServersParameters struct {
	// AdministratorLogin: Administrator username for the server. Once created it cannot be changed.
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// AdministratorLoginPassword: The administrator login password (required for server creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	// Administrators: Properties of a active directory administrator.
	Administrators *ServerExternalAdministrator `json:"administrators,omitempty"`

	// Identity: Azure Active Directory identity configuration for a resource.
	Identity *ResourceIdentity `json:"identity,omitempty"`

	// KeyId: A CMK URI of the key to use for encryption.
	KeyId *string `json:"keyId,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// MinimalTlsVersion: Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
	MinimalTlsVersion *string `json:"minimalTlsVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Name: The name of the server.
	Name string `json:"name,omitempty"`

	// PrimaryUserAssignedIdentityId: The resource id of a user assigned identity to be used by default.
	PrimaryUserAssignedIdentityId *string `json:"primaryUserAssignedIdentityId,omitempty"`

	// PublicNetworkAccess: Whether or not public endpoint access is allowed for this server.  Value is optional but if passed
	// in, must be 'Enabled' or 'Disabled'.
	PublicNetworkAccess       *ServerPropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`
	ResourceGroupName         string                               `json:"resourceGroupName,omitempty"`
	ResourceGroupNameRef      *v1alpha1.Reference                  `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector                   `json:"resourceGroupNameSelector,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// Version: The version of the server.
	Version *string `json:"version,omitempty"`
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/definitions/ResourceIdentity
type ResourceIdentity struct {
	// Type: The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active
	// Directory principal for the resource.
	Type *ResourceIdentityType `json:"type,omitempty"`
}

type ResourceIdentity_STATUS struct {
	// PrincipalId: The Azure Active Directory principal id.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The Azure Active Directory tenant id.
	TenantId *string `json:"tenantId,omitempty"`

	// Type: The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active
	// Directory principal for the resource.
	Type *ResourceIdentitySTATUSType `json:"type,omitempty"`

	// UserAssignedIdentities: The resource ids of the user assigned identities to use
	UserAssignedIdentities map[string]UserIdentity_STATUS `json:"userAssignedIdentities,omitempty"`
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01-preview/Microsoft.Sql.json#/definitions/ServerExternalAdministrator
type ServerExternalAdministrator struct {
	// AdministratorType: Type of the sever administrator.
	AdministratorType *ServerExternalAdministratorAdministratorType `json:"administratorType,omitempty"`

	// AzureADOnlyAuthentication: Azure Active Directory only Authentication enabled.
	AzureADOnlyAuthentication *bool `json:"azureADOnlyAuthentication,omitempty"`

	// Login: Login name of the server administrator.
	Login *string `json:"login,omitempty"`

	// PrincipalType: Principal Type of the sever administrator.
	PrincipalType *ServerExternalAdministratorPrincipalType `json:"principalType,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	// Sid: SID (object ID) of the server administrator.
	Sid *string `json:"sid,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	// TenantId: Tenant ID of the administrator.
	TenantId *string `json:"tenantId,omitempty"`
}

type ServerExternalAdministrator_STATUS struct {
	// AdministratorType: Type of the sever administrator.
	AdministratorType *ServerExternalAdministratorSTATUSAdministratorType `json:"administratorType,omitempty"`

	// AzureADOnlyAuthentication: Azure Active Directory only Authentication enabled.
	AzureADOnlyAuthentication *bool `json:"azureADOnlyAuthentication,omitempty"`

	// Login: Login name of the server administrator.
	Login *string `json:"login,omitempty"`

	// PrincipalType: Principal Type of the sever administrator.
	PrincipalType *ServerExternalAdministratorSTATUSPrincipalType `json:"principalType,omitempty"`

	// Sid: SID (object ID) of the server administrator.
	Sid *string `json:"sid,omitempty"`

	// TenantId: Tenant ID of the administrator.
	TenantId *string `json:"tenantId,omitempty"`
}

type ServerPrivateEndpointConnection_STATUS struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Properties: Private endpoint connection properties
	Properties *PrivateEndpointConnectionProperties_STATUS `json:"properties,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ServerPropertiesPublicNetworkAccess string

const (
	ServerPropertiesPublicNetworkAccess_Disabled = ServerPropertiesPublicNetworkAccess("Disabled")
	ServerPropertiesPublicNetworkAccess_Enabled  = ServerPropertiesPublicNetworkAccess("Enabled")
)

type ServerPropertiesSTATUSPublicNetworkAccess string

const (
	ServerPropertiesSTATUSPublicNetworkAccess_Disabled = ServerPropertiesSTATUSPublicNetworkAccess("Disabled")
	ServerPropertiesSTATUSPublicNetworkAccess_Enabled  = ServerPropertiesSTATUSPublicNetworkAccess("Enabled")
)

type ServerPropertiesSTATUSWorkspaceFeature string

const (
	ServerPropertiesSTATUSWorkspaceFeature_Connected    = ServerPropertiesSTATUSWorkspaceFeature("Connected")
	ServerPropertiesSTATUSWorkspaceFeature_Disconnected = ServerPropertiesSTATUSWorkspaceFeature("Disconnected")
)

type PrivateEndpointConnectionProperties_STATUS struct {
	// PrivateEndpoint: Private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpointProperty_STATUS `json:"privateEndpoint,omitempty"`

	// PrivateLinkServiceConnectionState: Connection state of the private endpoint connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateProperty_STATUS `json:"privateLinkServiceConnectionState,omitempty"`

	// ProvisioningState: State of the private endpoint connection.
	ProvisioningState *PrivateEndpointConnectionPropertiesSTATUSProvisioningState `json:"provisioningState,omitempty"`
}

type ResourceIdentitySTATUSType string

const (
	ResourceIdentitySTATUSType_None                       = ResourceIdentitySTATUSType("None")
	ResourceIdentitySTATUSType_SystemAssigned             = ResourceIdentitySTATUSType("SystemAssigned")
	ResourceIdentitySTATUSType_SystemAssignedUserAssigned = ResourceIdentitySTATUSType("SystemAssigned,UserAssigned")
	ResourceIdentitySTATUSType_UserAssigned               = ResourceIdentitySTATUSType("UserAssigned")
)

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned,UserAssigned","UserAssigned"}
type ResourceIdentityType string

const (
	ResourceIdentityType_None                       = ResourceIdentityType("None")
	ResourceIdentityType_SystemAssigned             = ResourceIdentityType("SystemAssigned")
	ResourceIdentityType_SystemAssignedUserAssigned = ResourceIdentityType("SystemAssigned,UserAssigned")
	ResourceIdentityType_UserAssigned               = ResourceIdentityType("UserAssigned")
)

// +kubebuilder:validation:Enum={"ActiveDirectory"}
type ServerExternalAdministratorAdministratorType string

const ServerExternalAdministratorAdministratorType_ActiveDirectory = ServerExternalAdministratorAdministratorType("ActiveDirectory")

// +kubebuilder:validation:Enum={"Application","Group","User"}
type ServerExternalAdministratorPrincipalType string

const (
	ServerExternalAdministratorPrincipalType_Application = ServerExternalAdministratorPrincipalType("Application")
	ServerExternalAdministratorPrincipalType_Group       = ServerExternalAdministratorPrincipalType("Group")
	ServerExternalAdministratorPrincipalType_User        = ServerExternalAdministratorPrincipalType("User")
)

type ServerExternalAdministratorSTATUSAdministratorType string

const ServerExternalAdministratorSTATUSAdministratorType_ActiveDirectory = ServerExternalAdministratorSTATUSAdministratorType("ActiveDirectory")

type ServerExternalAdministratorSTATUSPrincipalType string

const (
	ServerExternalAdministratorSTATUSPrincipalType_Application = ServerExternalAdministratorSTATUSPrincipalType("Application")
	ServerExternalAdministratorSTATUSPrincipalType_Group       = ServerExternalAdministratorSTATUSPrincipalType("Group")
	ServerExternalAdministratorSTATUSPrincipalType_User        = ServerExternalAdministratorSTATUSPrincipalType("User")
)

type UserIdentity_STATUS struct {
	// ClientId: The Azure Active Directory client id.
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: The Azure Active Directory principal id.
	PrincipalId *string `json:"principalId,omitempty"`
}

type PrivateEndpointConnectionPropertiesSTATUSProvisioningState string

const (
	PrivateEndpointConnectionPropertiesSTATUSProvisioningState_Approving = PrivateEndpointConnectionPropertiesSTATUSProvisioningState("Approving")
	PrivateEndpointConnectionPropertiesSTATUSProvisioningState_Dropping  = PrivateEndpointConnectionPropertiesSTATUSProvisioningState("Dropping")
	PrivateEndpointConnectionPropertiesSTATUSProvisioningState_Failed    = PrivateEndpointConnectionPropertiesSTATUSProvisioningState("Failed")
	PrivateEndpointConnectionPropertiesSTATUSProvisioningState_Ready     = PrivateEndpointConnectionPropertiesSTATUSProvisioningState("Ready")
	PrivateEndpointConnectionPropertiesSTATUSProvisioningState_Rejecting = PrivateEndpointConnectionPropertiesSTATUSProvisioningState("Rejecting")
)

type PrivateEndpointProperty_STATUS struct {
	// Id: Resource id of the private endpoint.
	Id *string `json:"id,omitempty"`
}

type PrivateLinkServiceConnectionStateProperty_STATUS struct {
	// ActionsRequired: The actions required for private link service connection.
	ActionsRequired *PrivateLinkServiceConnectionStatePropertySTATUSActionsRequired `json:"actionsRequired,omitempty"`

	// Description: The private link service connection description.
	Description *string `json:"description,omitempty"`

	// Status: The private link service connection status.
	Status *PrivateLinkServiceConnectionStatePropertySTATUSStatus `json:"status,omitempty"`
}

type PrivateLinkServiceConnectionStatePropertySTATUSActionsRequired string

const PrivateLinkServiceConnectionStatePropertySTATUSActionsRequired_None = PrivateLinkServiceConnectionStatePropertySTATUSActionsRequired("None")

type PrivateLinkServiceConnectionStatePropertySTATUSStatus string

const (
	PrivateLinkServiceConnectionStatePropertySTATUSStatus_Approved     = PrivateLinkServiceConnectionStatePropertySTATUSStatus("Approved")
	PrivateLinkServiceConnectionStatePropertySTATUSStatus_Disconnected = PrivateLinkServiceConnectionStatePropertySTATUSStatus("Disconnected")
	PrivateLinkServiceConnectionStatePropertySTATUSStatus_Pending      = PrivateLinkServiceConnectionStatePropertySTATUSStatus("Pending")
	PrivateLinkServiceConnectionStatePropertySTATUSStatus_Rejected     = PrivateLinkServiceConnectionStatePropertySTATUSStatus("Rejected")
)

func init() {
	SchemeBuilder.Register(&Server{}, &ServerList{})
}
