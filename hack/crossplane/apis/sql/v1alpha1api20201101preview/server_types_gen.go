// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101preview

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=servers,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={servers/status,servers/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
//Generator information:
//- Generated from: /sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/Servers.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
type Server struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_SPEC  `json:"spec,omitempty"`
	Status            Server_Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/Servers.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Server `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-11-01-preview"}
type APIVersion string

const APIVersionValue = APIVersion("2020-11-01-preview")

type Server_Status struct {
	v1alpha1.ResourceStatus `json:",inline"`
	AtProvider              ServerObservation `json:"atProvider"`
}

type Servers_SPEC struct {
	v1alpha1.ResourceSpec `json:",inline"`
	ForProvider           ServersParameters `json:"forProvider"`
}

type ServerObservation struct {
	//AdministratorLogin: Administrator username for the server. Once created it
	//cannot be changed.
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	//AdministratorLoginPassword: The administrator login password (required for
	//server creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	//Administrators: The Azure Active Directory identity of the server.
	Administrators *ServerExternalAdministrator_Status `json:"administrators,omitempty"`

	//FullyQualifiedDomainName: The fully qualified domain name of the server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Identity: The Azure Active Directory identity of the server.
	Identity *ResourceIdentity_Status `json:"identity,omitempty"`

	//KeyId: A CMK URI of the key to use for encryption.
	KeyId *string `json:"keyId,omitempty"`

	//Kind: Kind of sql server. This is metadata used for the Azure portal experience.
	Kind *string `json:"kind,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//MinimalTlsVersion: Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
	MinimalTlsVersion *string `json:"minimalTlsVersion,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//PrimaryUserAssignedIdentityId: The resource id of a user assigned identity to be
	//used by default.
	PrimaryUserAssignedIdentityId *string `json:"primaryUserAssignedIdentityId,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections on a server
	PrivateEndpointConnections []ServerPrivateEndpointConnection_Status `json:"privateEndpointConnections,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess *ServerProperties_PublicNetworkAccess_Status `json:"publicNetworkAccess,omitempty"`

	//State: The state of the server.
	State *string `json:"state,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//Version: The version of the server.
	Version *string `json:"version,omitempty"`

	//WorkspaceFeature: Whether or not existing server has a workspace created and if
	//it allows connection from workspace
	WorkspaceFeature *ServerProperties_WorkspaceFeature_Status `json:"workspaceFeature,omitempty"`
}

type ServersParameters struct {
	//AdministratorLogin: Administrator username for the server. Once created it
	//cannot be changed.
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	//AdministratorLoginPassword: The administrator login password (required for
	//server creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	//Administrators: The Azure Active Directory identity of the server.
	Administrators *ServerExternalAdministrator_Spec `json:"administrators,omitempty"`
	AzureName      string                            `json:"azureName"`

	//Identity: The Azure Active Directory identity of the server.
	Identity *ResourceIdentity_Spec `json:"identity,omitempty"`

	//KeyId: A CMK URI of the key to use for encryption.
	KeyId *string `json:"keyId,omitempty"`

	// +kubebuilder:validation:Required
	//Location: Resource location.
	Location string `json:"location"`

	//MinimalTlsVersion: Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
	MinimalTlsVersion *string `json:"minimalTlsVersion,omitempty"`
	Name              string  `json:"name"`

	//PrimaryUserAssignedIdentityId: The resource id of a user assigned identity to be
	//used by default.
	PrimaryUserAssignedIdentityId *string `json:"primaryUserAssignedIdentityId,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess       *ServerProperties_PublicNetworkAccess_Spec `json:"publicNetworkAccess,omitempty"`
	ResourceGroupName         string                                     `json:"resourceGroupName"`
	ResourceGroupNameRef      *v1alpha1.Reference                        `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector                         `json:"resourceGroupNameSelector,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Version: The version of the server.
	Version *string `json:"version,omitempty"`
}

type ResourceIdentity_Spec struct {
	//Type: The identity type. Set this to 'SystemAssigned' in order to automatically
	//create and assign an Azure Active Directory principal for the resource.
	Type *ResourceIdentity_Type_Spec `json:"type,omitempty"`

	//UserAssignedIdentities: The resource ids of the user assigned identities to use
	UserAssignedIdentities map[string]UserIdentity_Spec `json:"userAssignedIdentities,omitempty"`
}

type ResourceIdentity_Status struct {
	//PrincipalId: The Azure Active Directory principal id.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The Azure Active Directory tenant id.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The identity type. Set this to 'SystemAssigned' in order to automatically
	//create and assign an Azure Active Directory principal for the resource.
	Type *ResourceIdentity_Type_Status `json:"type,omitempty"`

	//UserAssignedIdentities: The resource ids of the user assigned identities to use
	UserAssignedIdentities map[string]UserIdentity_Status `json:"userAssignedIdentities,omitempty"`
}

type ServerExternalAdministrator_Spec struct {
	//AdministratorType: Type of the sever administrator.
	AdministratorType *ServerExternalAdministrator_AdministratorType_Spec `json:"administratorType,omitempty"`

	//AzureADOnlyAuthentication: Azure Active Directory only Authentication enabled.
	AzureADOnlyAuthentication *bool `json:"azureADOnlyAuthentication,omitempty"`

	//Login: Login name of the server administrator.
	Login *string `json:"login,omitempty"`

	//PrincipalType: Principal Type of the sever administrator.
	PrincipalType *ServerExternalAdministrator_PrincipalType_Spec `json:"principalType,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	//Sid: SID (object ID) of the server administrator.
	Sid *string `json:"sid,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	//TenantId: Tenant ID of the administrator.
	TenantId *string `json:"tenantId,omitempty"`
}

type ServerExternalAdministrator_Status struct {
	//AdministratorType: Type of the sever administrator.
	AdministratorType *ServerExternalAdministrator_AdministratorType_Status `json:"administratorType,omitempty"`

	//AzureADOnlyAuthentication: Azure Active Directory only Authentication enabled.
	AzureADOnlyAuthentication *bool `json:"azureADOnlyAuthentication,omitempty"`

	//Login: Login name of the server administrator.
	Login *string `json:"login,omitempty"`

	//PrincipalType: Principal Type of the sever administrator.
	PrincipalType *ServerExternalAdministrator_PrincipalType_Status `json:"principalType,omitempty"`

	//Sid: SID (object ID) of the server administrator.
	Sid *string `json:"sid,omitempty"`

	//TenantId: Tenant ID of the administrator.
	TenantId *string `json:"tenantId,omitempty"`
}

type ServerPrivateEndpointConnection_Status struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Properties: Private endpoint connection properties
	Properties *PrivateEndpointConnectionProperties_Status `json:"properties,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ServerProperties_PublicNetworkAccess_Spec string

const (
	ServerProperties_PublicNetworkAccess_SpecDisabled = ServerProperties_PublicNetworkAccess_Spec("Disabled")
	ServerProperties_PublicNetworkAccess_SpecEnabled  = ServerProperties_PublicNetworkAccess_Spec("Enabled")
)

type ServerProperties_PublicNetworkAccess_Status string

const (
	ServerProperties_PublicNetworkAccess_StatusDisabled = ServerProperties_PublicNetworkAccess_Status("Disabled")
	ServerProperties_PublicNetworkAccess_StatusEnabled  = ServerProperties_PublicNetworkAccess_Status("Enabled")
)

type ServerProperties_WorkspaceFeature_Status string

const (
	ServerProperties_WorkspaceFeature_StatusConnected    = ServerProperties_WorkspaceFeature_Status("Connected")
	ServerProperties_WorkspaceFeature_StatusDisconnected = ServerProperties_WorkspaceFeature_Status("Disconnected")
)

type PrivateEndpointConnectionProperties_Status struct {
	//PrivateEndpoint: Private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpointProperty_Status `json:"privateEndpoint,omitempty"`

	//PrivateLinkServiceConnectionState: Connection state of the private endpoint
	//connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateProperty_Status `json:"privateLinkServiceConnectionState,omitempty"`

	//ProvisioningState: State of the private endpoint connection.
	ProvisioningState *PrivateEndpointConnectionProperties_ProvisioningState_Status `json:"provisioningState,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned,UserAssigned","UserAssigned"}
type ResourceIdentity_Type_Spec string

const (
	ResourceIdentity_Type_SpecNone                       = ResourceIdentity_Type_Spec("None")
	ResourceIdentity_Type_SpecSystemAssigned             = ResourceIdentity_Type_Spec("SystemAssigned")
	ResourceIdentity_Type_SpecSystemAssignedUserAssigned = ResourceIdentity_Type_Spec("SystemAssigned,UserAssigned")
	ResourceIdentity_Type_SpecUserAssigned               = ResourceIdentity_Type_Spec("UserAssigned")
)

type ResourceIdentity_Type_Status string

const (
	ResourceIdentity_Type_StatusNone                       = ResourceIdentity_Type_Status("None")
	ResourceIdentity_Type_StatusSystemAssigned             = ResourceIdentity_Type_Status("SystemAssigned")
	ResourceIdentity_Type_StatusSystemAssignedUserAssigned = ResourceIdentity_Type_Status("SystemAssigned,UserAssigned")
	ResourceIdentity_Type_StatusUserAssigned               = ResourceIdentity_Type_Status("UserAssigned")
)

// +kubebuilder:validation:Enum={"ActiveDirectory"}
type ServerExternalAdministrator_AdministratorType_Spec string

const ServerExternalAdministrator_AdministratorType_SpecActiveDirectory = ServerExternalAdministrator_AdministratorType_Spec("ActiveDirectory")

type ServerExternalAdministrator_AdministratorType_Status string

const ServerExternalAdministrator_AdministratorType_StatusActiveDirectory = ServerExternalAdministrator_AdministratorType_Status("ActiveDirectory")

// +kubebuilder:validation:Enum={"Application","Group","User"}
type ServerExternalAdministrator_PrincipalType_Spec string

const (
	ServerExternalAdministrator_PrincipalType_SpecApplication = ServerExternalAdministrator_PrincipalType_Spec("Application")
	ServerExternalAdministrator_PrincipalType_SpecGroup       = ServerExternalAdministrator_PrincipalType_Spec("Group")
	ServerExternalAdministrator_PrincipalType_SpecUser        = ServerExternalAdministrator_PrincipalType_Spec("User")
)

type ServerExternalAdministrator_PrincipalType_Status string

const (
	ServerExternalAdministrator_PrincipalType_StatusApplication = ServerExternalAdministrator_PrincipalType_Status("Application")
	ServerExternalAdministrator_PrincipalType_StatusGroup       = ServerExternalAdministrator_PrincipalType_Status("Group")
	ServerExternalAdministrator_PrincipalType_StatusUser        = ServerExternalAdministrator_PrincipalType_Status("User")
)

type UserIdentity_Spec struct {
}

type UserIdentity_Status struct {
	//ClientId: The Azure Active Directory client id.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The Azure Active Directory principal id.
	PrincipalId *string `json:"principalId,omitempty"`
}

type PrivateEndpointConnectionProperties_ProvisioningState_Status string

const (
	PrivateEndpointConnectionProperties_ProvisioningState_StatusApproving = PrivateEndpointConnectionProperties_ProvisioningState_Status("Approving")
	PrivateEndpointConnectionProperties_ProvisioningState_StatusDropping  = PrivateEndpointConnectionProperties_ProvisioningState_Status("Dropping")
	PrivateEndpointConnectionProperties_ProvisioningState_StatusFailed    = PrivateEndpointConnectionProperties_ProvisioningState_Status("Failed")
	PrivateEndpointConnectionProperties_ProvisioningState_StatusReady     = PrivateEndpointConnectionProperties_ProvisioningState_Status("Ready")
	PrivateEndpointConnectionProperties_ProvisioningState_StatusRejecting = PrivateEndpointConnectionProperties_ProvisioningState_Status("Rejecting")
)

type PrivateEndpointProperty_Status struct {
	//Id: Resource id of the private endpoint.
	Id *string `json:"id,omitempty"`
}

type PrivateLinkServiceConnectionStateProperty_Status struct {
	//ActionsRequired: The actions required for private link service connection.
	ActionsRequired *PrivateLinkServiceConnectionStateProperty_ActionsRequired_Status `json:"actionsRequired,omitempty"`

	// +kubebuilder:validation:Required
	//Description: The private link service connection description.
	Description string `json:"description"`

	// +kubebuilder:validation:Required
	//Status: The private link service connection status.
	Status PrivateLinkServiceConnectionStateProperty_Status_Status `json:"status"`
}

type PrivateLinkServiceConnectionStateProperty_ActionsRequired_Status string

const PrivateLinkServiceConnectionStateProperty_ActionsRequired_StatusNone = PrivateLinkServiceConnectionStateProperty_ActionsRequired_Status("None")

type PrivateLinkServiceConnectionStateProperty_Status_Status string

const (
	PrivateLinkServiceConnectionStateProperty_Status_StatusApproved     = PrivateLinkServiceConnectionStateProperty_Status_Status("Approved")
	PrivateLinkServiceConnectionStateProperty_Status_StatusDisconnected = PrivateLinkServiceConnectionStateProperty_Status_Status("Disconnected")
	PrivateLinkServiceConnectionStateProperty_Status_StatusPending      = PrivateLinkServiceConnectionStateProperty_Status_Status("Pending")
	PrivateLinkServiceConnectionStateProperty_Status_StatusRejected     = PrivateLinkServiceConnectionStateProperty_Status_Status("Rejected")
)

func init() {
	SchemeBuilder.Register(&Server{}, &ServerList{})
}
