schemaUrl: 'https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json'
schemaUrlRewrite:
  from: 'https://schema.management.azure.com/schemas/'
  to: 'specs/azure-resource-manager-schemas/schemas/'
destinationGoModuleFile: ../crossplane/go.mod
typesOutputPath: apis
pipeline: crossplane
typeFilters:
  - action: prune
    group: definitions
    name: Expression
    because: expression is an ARM template construct which doesn't belong in CRDs
  - action: include
    version: v*api20201101
    group: microsoft.network
    because: Including microsoft.network for Crossplane
  - action: include
    version: v*api20200601
    group: microsoft.cache
    because: Including microsoft.cache for Crossplane
  - action: include
    version: v*api20201101preview
    group: microsoft.sql
    because: Including microsoft.sql
  - action: prune
    version: '*preview'
    because: preview SDK versions are excluded by default
  - action: prune
    group: 'microsoft.*'
    version: '*'
    because: Prune everything else
exportFilters:
  - action: exclude
    group: definitions
    name: '*ResourceBase*'
    because: Not actually a resource, used for inheritance only.
  - action: exclude
    group: deploymenttemplate
    name: '*ResourceBase*'
    because: Not actually a resource, used for inheritance only.
#  - action: include
#    version: v*api20200501
#    group: microsoft.network
#    because: Including microsoft.network for Crossplane
  - action: include-transitive
    version: v*api20200601
    group: microsoft.cache
    name: Redis
    because: Including Redis
  - action: include-transitive
    version: v*api20201101preview
    group: microsoft.sql
    name: Server
    because: Including microsoft.sql Server
  - action: include-transitive
    version: v*api20201101preview
    group: microsoft.sql
    name: ServersDatabase
    because: Including microsoft.sql ServersDatabase
  - action: include-transitive
    group: deploymenttemplate
    because: We need this too
  - action: exclude
    because: Excluding everything else

# Exclusions for packages that currently produce types including AnyType.
# TODO: get rid of these, either by chasing the teams generating
# weird json or by handling them differently in the generator.
anyTypePackages:

typeTransformers:
  # Deal with stuff that exists on ARM resources but doesn't make sense on CRDs
  - group: definitions
    name: NumberOrExpression
    because: NumberOrExpression is an ARM template artifact that doesn't make sense in CRDs
    target:
      name: float
    matchRequired: false  # TODO: Remove this if/when we actually require it
  - name: "*"
    property: Tags
    ifType:
      map:
        key:
          name: string
        value:
          name: any
    target:
      map:
        key:
          name: string
        value:
          name: string
    because: Tags is defined as map[string]interface{} when it should be map[string]string
  - group: deploymenttemplate
    name: ResourceLocations
    target:
      name: string
    because: Modeling this as an enum doesn't work well in the context of CRDs because new regions are regularly added
  - group: definitions
    name: ResourceLocations
    target:
      name: string
    because: Modeling this as an enum doesn't work well in the context of CRDs because new regions are regularly added
  - name: "*"
    property: Condition
    ifType:
      name: bool
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Copy
    ifType:
      group: deploymenttemplate
      version: v1alpha1api20190401
      name: ResourceCopy
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Copy
    ifType:
      group: definitions
      version: v1alpha1api
      name: ResourceCopy
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD. Doesn't match the above because of a quirk in how autogenerated resources include resourceBase.
  - name: "*"
    property: DependsOn
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Scope
    ifType:
      name: string
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Comments
    ifType:
      name: string
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD

  # Deal with readonly properties that were not properly pruned in the JSON schema
  - name: ResourceIdentity
    group: microsoft.sql
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is enitrely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835

status:
  schemaRoot: "./specs/azure-rest-api-specs/specification"

  # the configuration below is copied from the ARM schema repo:
  # https://github.com/Azure/azure-resource-manager-schemas/blob/master/generator/autogenlist.ts
  overrides: [
    {
        basePath: 'blueprint/resource-manager',
        namespace: 'Microsoft.Blueprint',
        resourceConfig: [
            {
                type: 'blueprintAssignments',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
            {
                type: 'blueprints',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
            {
                type: 'blueprints/artifacts',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
            {
                type: 'blueprints/versions',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
        ]
    },
    {
        basePath: 'customproviders/resource-manager',
        namespace: 'Microsoft.CustomProviders',
        resourceConfig: [
            {
                type: 'associations',
                scopes: ScopeType.Extension,
            },
        ],
    },
    {
        basePath: 'consumption/resource-manager',
        namespace: 'Microsoft.Consumption',
        resourceConfig: [
            {
                type: 'budgets',
                scopes: ScopeType.Subcription | ScopeType.ResourceGroup | ScopeType.Extension,
            },
        ],
    },
    {
      basePath: 'digitaltwins/resource-manager',
      resourceConfig: [
          {
              type: 'integrationResources',
              scopes: ScopeType.Extension,
          }
      ]
    },
    {
        basePath: 'deviceprovisioningservices/resource-manager',
        suffix: 'Provisioning',
    },
    {
        basePath: 'frontdoor/resource-manager',
        suffix: 'FrontDoor',
    },
    { 
        basePath: 'eventgrid/resource-manager',
        resourceConfig: [
            {
                type: 'eventSubscriptions',
                scopes: ScopeType.Extension | ScopeType.Subcription | ScopeType.ResourceGroup,
            },
        ],
    },
    {
        basePath: 'machinelearning/resource-manager',
        postProcessor: machineLearningPostProcessor,
    },
    {
        basePath: 'managednetwork/resource-manager',
        resourceConfig: [
            {
                type: 'scopeAssignments',
                scopes: ScopeType.Subcription,
            },
        ],
    },
    {
        basePath: 'policyinsights/resource-manager',
        resourceConfig: [
            {
                type: 'remediations',
                scopes: ScopeType.Subcription | ScopeType.ResourceGroup | ScopeType.ManagementGroup,
            }
        ]
    },
    {
        basePath: 'resources/resource-manager',
        resourceConfig: [
            {
                type: 'deployments',
                scopes: ScopeType.Tenant | ScopeType.ManagementGroup | ScopeType.Subcription | ScopeType.ResourceGroup,
            },
            {
                type: 'tags',
                scopes: ScopeType.ManagementGroup | ScopeType.Subcription | ScopeType.ResourceGroup | ScopeType.Extension,
            },
        ],
        postProcessor: resourcesPostProcessor,
    },
    {
        basePath: 'storSimple1200Series/resource-manager',
        suffix: '1200'
    },
    { 
        basePath: 'storsimple8000series/resource-manager',
        suffix: '8000',
    },
    {
        basePath: 'softwareplan/resource-manager',
        resourceConfig: [
            {
                type: 'hybridUseBenefits',
                scopes: ScopeType.Extension,
            },
        ]
    },
  ]
