// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20211231

import (
	"github.com/Azure/azure-service-operator/hack/generated/microsoft.person/v20211231storage"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_Status `json:"status,omitempty"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *Person) AssignPropertiesFromPerson(source *v20211231storage.Person) error {

	// Spec
	var spec Person_Spec
	err := spec.AssignPropertiesFromPersonSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromPersonSpec()")
	}
	person.Spec = spec

	// Status
	var status Person_Status
	err = status.AssignPropertiesFromPersonStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromPersonStatus()")
	}
	person.Status = status

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *Person) AssignPropertiesToPerson(destination *v20211231storage.Person) error {

	// Spec
	var spec v20211231storage.Person_Spec
	err := person.Spec.AssignPropertiesToPersonSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToPersonSpec()")
	}
	destination.Spec = spec

	// Status
	var status v20211231storage.Person_Status
	err = person.Status.AssignPropertiesToPersonStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToPersonStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// +kubebuilder:object:root=true
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

type Person_Spec struct {
	//CustomerProgram: Level of customer programme (Silver/Gold/Platinum/Diamond)
	CustomerProgram string `json:"customerProgram"`

	//FamilyName: Shared name of the family
	FamilyName string `json:"familyName"`

	//FullName: As would be used to address mail
	FullName string `json:"fullName"`

	//KnownAs: How the person is generally known
	KnownAs string `json:"knownAs"`
}

// AssignPropertiesFromPersonSpec populates our Person_Spec from the provided source Person_Spec
func (personSpec *Person_Spec) AssignPropertiesFromPersonSpec(source *v20211231storage.Person_Spec) error {

	// CustomerProgram
	if source.CustomerProgram != nil {
		personSpec.CustomerProgram = *source.CustomerProgram
	} else {
		personSpec.CustomerProgram = ""
	}

	// FamilyName
	if source.FamilyName != nil {
		personSpec.FamilyName = *source.FamilyName
	} else {
		personSpec.FamilyName = ""
	}

	// FullName
	if source.FullName != nil {
		personSpec.FullName = *source.FullName
	} else {
		personSpec.FullName = ""
	}

	// KnownAs
	if source.KnownAs != nil {
		personSpec.KnownAs = *source.KnownAs
	} else {
		personSpec.KnownAs = ""
	}

	// No error
	return nil
}

// AssignPropertiesToPersonSpec populates the provided destination Person_Spec from our Person_Spec
func (personSpec *Person_Spec) AssignPropertiesToPersonSpec(destination *v20211231storage.Person_Spec) error {

	// CustomerProgram
	customerProgram := personSpec.CustomerProgram
	destination.CustomerProgram = &customerProgram

	// FamilyName
	familyName := personSpec.FamilyName
	destination.FamilyName = &familyName

	// FullName
	fullName := personSpec.FullName
	destination.FullName = &fullName

	// KnownAs
	knownA := personSpec.KnownAs
	destination.KnownAs = &knownA

	// OriginalVersion
	destination.OriginalVersion = personSpec.OriginalVersion()

	// No error
	return nil
}

func (personSpec *Person_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

type Person_Status struct {
	Status string `json:"status"`
}

// AssignPropertiesFromPersonStatus populates our Person_Status from the provided source Person_Status
func (personStatus *Person_Status) AssignPropertiesFromPersonStatus(source *v20211231storage.Person_Status) error {

	// Status
	if source.Status != nil {
		personStatus.Status = *source.Status
	} else {
		personStatus.Status = ""
	}

	// No error
	return nil
}

// AssignPropertiesToPersonStatus populates the provided destination Person_Status from our Person_Status
func (personStatus *Person_Status) AssignPropertiesToPersonStatus(destination *v20211231storage.Person_Status) error {

	// Status
	status := personStatus.Status
	destination.Status = &status

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
