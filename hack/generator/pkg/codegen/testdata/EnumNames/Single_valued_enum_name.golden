// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=test.infra.azure.com,resources=aresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.infra.azure.com,resources={aresources/status,aresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/AResource
type AResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AResource_Spec `json:"spec,omitempty"`
}

var _ genruntime.KubernetesResource = &AResource{}

// AzureName returns the Azure name of the resource (always "onlyonevalue")
func (aResource *AResource) AzureName() string {
	return "onlyonevalue"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (aResource *AResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(aResource.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: aResource.Namespace, Name: aResource.Spec.Owner.Name}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/AResource
type AResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AResource `json:"items"`
}

// +kubebuilder:validation:Enum={"onlyonevalue"}
type AResourceSpecName string

const AResourceSpecNameOnlyonevalue = AResourceSpecName("onlyonevalue")

type AResource_SpecARM struct {
	ApiVersion AResourceSpecApiVersion `json:"apiVersion"`
	Name       string                  `json:"name"`
	Type       AResourceSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &AResource_SpecARM{}

// GetApiVersion returns the ApiVersion of the resource
func (aResourceSpecARM AResource_SpecARM) GetApiVersion() string {
	return string(aResourceSpecARM.ApiVersion)
}

// GetName returns the Name of the resource
func (aResourceSpecARM AResource_SpecARM) GetName() string {
	return aResourceSpecARM.Name
}

// GetType returns the Type of the resource
func (aResourceSpecARM AResource_SpecARM) GetType() string {
	return string(aResourceSpecARM.Type)
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type AResourceSpecApiVersion string

const AResourceSpecApiVersion20200601 = AResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/AResource"}
type AResourceSpecType string

const AResourceSpecTypeMicrosoftAzureAResource = AResourceSpecType("Microsoft.Azure/AResource")

type AResource_Spec struct {
	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ARMTransformer = &AResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (aResourceSpec *AResource_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if aResourceSpec == nil {
		return nil, nil
	}
	var result AResource_SpecARM
	result.ApiVersion = AResourceSpecApiVersion20200601
	result.Name = name
	result.Type = AResourceSpecTypeMicrosoftAzureAResource
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (aResourceSpec *AResource_Spec) CreateEmptyARMValue() interface{} {
	return AResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (aResourceSpec *AResource_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(AResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AResource_SpecARM, got %T", armInput)
	}
	aResourceSpec.Owner = owner
	return nil
}

func init() {
	SchemeBuilder.Register(&AResource{}, &AResourceList{})
}
