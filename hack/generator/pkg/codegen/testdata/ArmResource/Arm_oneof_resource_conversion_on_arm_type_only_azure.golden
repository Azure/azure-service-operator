// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.infra.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.infra.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.infra.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) Default() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: fakeResource.Namespace, Name: fakeResource.Spec.Owner.Name}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	ApiVersion FakeResourceSpecApiVersion `json:"apiVersion"`
	Name       string                     `json:"name"`
	Properties *PropertiesARM             `json:"properties,omitempty"`
	Type       FakeResourceSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetApiVersion returns the ApiVersion of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetApiVersion() string {
	return string(fakeResourceSpecARM.ApiVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetName() string {
	return fakeResourceSpecARM.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetType() string {
	return string(fakeResourceSpecARM.Type)
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *Properties                       `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecARM
	result.ApiVersion = FakeResourceSpecApiVersion20200601
	result.Name = name
	if fakeResourceSpec.Properties != nil {
		propertiesARM, err := (*fakeResourceSpec.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(PropertiesARM)
		result.Properties = &properties
	}
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyARMValue() interface{} {
	return FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))
	fakeResourceSpec.Owner = owner
	if typedInput.Properties != nil {
		var properties1 Properties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		fakeResourceSpec.Properties = &properties
	}
	return nil
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type PropertiesARM struct {
	//Bar: Mutually exclusive with all other properties
	Bar *BarARM `json:"bar,omitempty"`

	//Baz: Mutually exclusive with all other properties
	Baz *BazARM `json:"baz,omitempty"`

	//Foo: Mutually exclusive with all other properties
	Foo *FooARM `json:"foo,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because PropertiesARM represents a discriminated union (JSON OneOf)
func (propertiesARM PropertiesARM) MarshalJSON() ([]byte, error) {
	if propertiesARM.Bar != nil {
		return json.Marshal(propertiesARM.Bar)
	}
	if propertiesARM.Baz != nil {
		return json.Marshal(propertiesARM.Baz)
	}
	if propertiesARM.Foo != nil {
		return json.Marshal(propertiesARM.Foo)
	}
	return nil, nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type BarARM struct {
	Size int `json:"size"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type BazARM struct {
	Enabled bool `json:"enabled"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	Name *string `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type Properties struct {
	//Bar: Mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	//Baz: Mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	//Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

var _ genruntime.ARMTransformer = &Properties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *Properties) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result PropertiesARM
	if properties.Bar != nil {
		barARM, err := (*properties.Bar).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		bar := barARM.(BarARM)
		result.Bar = &bar
	}
	if properties.Baz != nil {
		bazARM, err := (*properties.Baz).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		baz := bazARM.(BazARM)
		result.Baz = &baz
	}
	if properties.Foo != nil {
		fooARM, err := (*properties.Foo).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		foo := fooARM.(FooARM)
		result.Foo = &foo
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *Properties) CreateEmptyARMValue() interface{} {
	return PropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *Properties) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PropertiesARM, got %T", armInput)
	}
	if typedInput.Bar != nil {
		var bar1 Bar
		err := bar1.PopulateFromARM(owner, *typedInput.Bar)
		if err != nil {
			return err
		}
		bar := bar1
		properties.Bar = &bar
	}
	if typedInput.Baz != nil {
		var baz1 Baz
		err := baz1.PopulateFromARM(owner, *typedInput.Baz)
		if err != nil {
			return err
		}
		baz := baz1
		properties.Baz = &baz
	}
	if typedInput.Foo != nil {
		var foo1 Foo
		err := foo1.PopulateFromARM(owner, *typedInput.Foo)
		if err != nil {
			return err
		}
		foo := foo1
		properties.Foo = &foo
	}
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {
	// +kubebuilder:validation:Required
	Size int `json:"size"`
}

var _ genruntime.ARMTransformer = &Bar{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (bar *Bar) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if bar == nil {
		return nil, nil
	}
	var result BarARM
	result.Size = bar.Size
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (bar *Bar) CreateEmptyARMValue() interface{} {
	return BarARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (bar *Bar) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BarARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BarARM, got %T", armInput)
	}
	bar.Size = typedInput.Size
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type Baz struct {
	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled"`
}

var _ genruntime.ARMTransformer = &Baz{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (baz *Baz) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if baz == nil {
		return nil, nil
	}
	var result BazARM
	result.Enabled = baz.Enabled
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (baz *Baz) CreateEmptyARMValue() interface{} {
	return BazARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (baz *Baz) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BazARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BazARM, got %T", armInput)
	}
	baz.Enabled = typedInput.Enabled
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooARM
	if foo.Name != nil {
		name := *foo.Name
		result.Name = &name
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) CreateEmptyARMValue() interface{} {
	return FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}
	if typedInput.Name != nil {
		name := *typedInput.Name
		foo.Name = &name
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
