// Code generated by k8s-infra. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.infra.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.infra.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-infra-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.infra.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.infra.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) Default() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: fakeResource.Namespace, Name: fakeResource.Spec.Owner.Name}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	ApiVersion   FakeResourceSpecApiVersion   `json:"apiVersion"`
	MapFoo       map[string]FooARM            `json:"mapFoo"`
	MapOfArrays  map[string][]FooARM          `json:"mapOfArrays,omitempty"`
	MapOfEnums   map[string]Color             `json:"mapOfEnums,omitempty"`
	MapOfMaps    map[string]map[string]FooARM `json:"mapOfMaps,omitempty"`
	MapOfStrings map[string]string            `json:"mapOfStrings,omitempty"`
	Name         string                       `json:"name"`
	Type         FakeResourceSpecType         `json:"type"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetApiVersion returns the ApiVersion of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetApiVersion() string {
	return string(fakeResourceSpecARM.ApiVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetName() string {
	return fakeResourceSpecARM.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetType() string {
	return string(fakeResourceSpecARM.Type)
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	ColorBlue  = Color("blue")
	ColorGreen = Color("green")
	ColorRed   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecApiVersion string

const FakeResourceSpecApiVersion20200601 = FakeResourceSpecApiVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	MapFoo       map[string]Foo            `json:"mapFoo"`
	MapOfArrays  map[string][]Foo          `json:"mapOfArrays,omitempty"`
	MapOfEnums   map[string]Color          `json:"mapOfEnums,omitempty"`
	MapOfMaps    map[string]map[string]Foo `json:"mapOfMaps,omitempty"`
	MapOfStrings map[string]string         `json:"mapOfStrings,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.infra.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecARM
	result.ApiVersion = FakeResourceSpecApiVersion20200601
	if fakeResourceSpec.MapFoo != nil {
		result.MapFoo = make(map[string]FooARM)
		for key, value := range fakeResourceSpec.MapFoo {
			valueARM, err := value.ConvertToARM(name, resolvedReferences)
			if err != nil {
				return nil, err
			}
			result.MapFoo[key] = valueARM.(FooARM)
		}
	}
	if fakeResourceSpec.MapOfArrays != nil {
		result.MapOfArrays = make(map[string][]FooARM)
		for key, value := range fakeResourceSpec.MapOfArrays {
			var valueTemp []FooARM
			for _, item := range value {
				itemARM, err := item.ConvertToARM(name, resolvedReferences)
				if err != nil {
					return nil, err
				}
				valueTemp = append(valueTemp, itemARM.(FooARM))
			}
			result.MapOfArrays[key] = valueTemp
		}
	}
	if fakeResourceSpec.MapOfEnums != nil {
		result.MapOfEnums = make(map[string]Color)
		for key, value := range fakeResourceSpec.MapOfEnums {
			result.MapOfEnums[key] = value
		}
	}
	if fakeResourceSpec.MapOfMaps != nil {
		result.MapOfMaps = make(map[string]map[string]FooARM)
		for key, value := range fakeResourceSpec.MapOfMaps {
			if value != nil {
				valueTemp := make(map[string]FooARM)
				for valueKey, value1 := range value {
					value1ARM, err := value1.ConvertToARM(name, resolvedReferences)
					if err != nil {
						return nil, err
					}
					valueTemp[valueKey] = value1ARM.(FooARM)
				}
				result.MapOfMaps[key] = valueTemp
			}
		}
	}
	if fakeResourceSpec.MapOfStrings != nil {
		result.MapOfStrings = make(map[string]string)
		for key, value := range fakeResourceSpec.MapOfStrings {
			result.MapOfStrings[key] = value
		}
	}
	result.Name = name
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyARMValue() interface{} {
	return FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))
	if typedInput.MapFoo != nil {
		fakeResourceSpec.MapFoo = make(map[string]Foo)
		for key, value := range typedInput.MapFoo {
			var value1 Foo
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			fakeResourceSpec.MapFoo[key] = value1
		}
	}
	if typedInput.MapOfArrays != nil {
		fakeResourceSpec.MapOfArrays = make(map[string][]Foo)
		for key, value := range typedInput.MapOfArrays {
			var valueTemp []Foo
			for _, item := range value {
				var item1 Foo
				err := item1.PopulateFromARM(owner, item)
				if err != nil {
					return err
				}
				valueTemp = append(valueTemp, item1)
			}
			fakeResourceSpec.MapOfArrays[key] = valueTemp
		}
	}
	if typedInput.MapOfEnums != nil {
		fakeResourceSpec.MapOfEnums = make(map[string]Color)
		for key, value := range typedInput.MapOfEnums {
			fakeResourceSpec.MapOfEnums[key] = value
		}
	}
	if typedInput.MapOfMaps != nil {
		fakeResourceSpec.MapOfMaps = make(map[string]map[string]Foo)
		for key, value := range typedInput.MapOfMaps {
			if value != nil {
				valueTemp := make(map[string]Foo)
				for valueKey, value1 := range value {
					var value2 Foo
					err := value2.PopulateFromARM(owner, value1)
					if err != nil {
						return err
					}
					valueTemp[valueKey] = value2
				}
				fakeResourceSpec.MapOfMaps[key] = valueTemp
			}
		}
	}
	if typedInput.MapOfStrings != nil {
		fakeResourceSpec.MapOfStrings = make(map[string]string)
		for key, value := range typedInput.MapOfStrings {
			fakeResourceSpec.MapOfStrings[key] = value
		}
	}
	fakeResourceSpec.Owner = owner
	return nil
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	FooName *string `json:"fooName,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	FooName *string `json:"fooName,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooARM
	if foo.FooName != nil {
		fooName := *foo.FooName
		result.FooName = &fooName
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) CreateEmptyARMValue() interface{} {
	return FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}
	if typedInput.FooName != nil {
		fooName := *typedInput.FooName
		foo.FooName = &fooName
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
