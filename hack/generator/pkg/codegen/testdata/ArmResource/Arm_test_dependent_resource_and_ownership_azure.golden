// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=as,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={as/status,as/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default() {
	a.defaultImpl()
	var temp interface{} = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl() { a.defaultAzureName() }

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (a *A) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (a *A) GetSpec() genruntime.ConvertibleSpec {
	return &a.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a *A) GetType() string {
	return "Microsoft.Azure/A"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: a.Namespace, Name: a.Spec.Owner.Name}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate() error {
	validations := a.createValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete() error {
	validations := a.deleteValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(old runtime.Object) error {
	validations := a.updateValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func() error {
	return []func() error{a.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return a.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&a.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecARM struct {
	APIVersion ASpecAPIVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       ASpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &A_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (aSpecARM A_SpecARM) GetAPIVersion() string {
	return string(aSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (aSpecARM A_SpecARM) GetName() string {
	return aSpecARM.Name
}

// GetType returns the Type of the resource
func (aSpecARM A_SpecARM) GetType() string {
	return string(aSpecARM.Type)
}

// +kubebuilder:rbac:groups=test.azure.com,resources=bs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={bs/status,bs/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              B_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.bs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &B{}

// Default applies defaults to the B resource
func (b *B) Default() {
	b.defaultImpl()
	var temp interface{} = b
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (b *B) defaultAzureName() {
	if b.Spec.AzureName == "" {
		b.Spec.AzureName = b.Name
	}
}

// defaultImpl applies the code generated defaults to the B resource
func (b *B) defaultImpl() { b.defaultAzureName() }

var _ genruntime.KubernetesResource = &B{}

// AzureName returns the Azure name of the resource
func (b *B) AzureName() string {
	return b.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (b *B) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (b *B) GetSpec() genruntime.ConvertibleSpec {
	return &b.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/B"
func (b *B) GetType() string {
	return "Microsoft.Azure/B"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (b *B) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(b.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: b.Namespace, Name: b.Spec.Owner.Name}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-b,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.bs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &B{}

// ValidateCreate validates the creation of the resource
func (b *B) ValidateCreate() error {
	validations := b.createValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (b *B) ValidateDelete() error {
	validations := b.deleteValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (b *B) ValidateUpdate(old runtime.Object) error {
	validations := b.updateValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (b *B) createValidations() []func() error {
	return []func() error{b.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (b *B) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (b *B) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return b.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (b *B) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&b.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type BList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []B `json:"items"`
}

type B_SpecARM struct {
	APIVersion BSpecAPIVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       BSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &B_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (bSpecARM B_SpecARM) GetAPIVersion() string {
	return string(bSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (bSpecARM B_SpecARM) GetName() string {
	return bSpecARM.Name
}

// GetType returns the Type of the resource
func (bSpecARM B_SpecARM) GetType() string {
	return string(bSpecARM.Type)
}

// +kubebuilder:rbac:groups=test.azure.com,resources=cs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={cs/status,cs/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              C_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-c,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.cs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &C{}

// Default applies defaults to the C resource
func (c *C) Default() {
	c.defaultImpl()
	var temp interface{} = c
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (c *C) defaultAzureName() {
	if c.Spec.AzureName == "" {
		c.Spec.AzureName = c.Name
	}
}

// defaultImpl applies the code generated defaults to the C resource
func (c *C) defaultImpl() { c.defaultAzureName() }

var _ genruntime.KubernetesResource = &C{}

// AzureName returns the Azure name of the resource
func (c *C) AzureName() string {
	return c.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (c *C) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (c *C) GetSpec() genruntime.ConvertibleSpec {
	return &c.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/C"
func (c *C) GetType() string {
	return "Microsoft.Azure/C"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (c *C) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(c.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: c.Namespace, Name: c.Spec.Owner.Name}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-c,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.cs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &C{}

// ValidateCreate validates the creation of the resource
func (c *C) ValidateCreate() error {
	validations := c.createValidations()
	var temp interface{} = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (c *C) ValidateDelete() error {
	validations := c.deleteValidations()
	var temp interface{} = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (c *C) ValidateUpdate(old runtime.Object) error {
	validations := c.updateValidations()
	var temp interface{} = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (c *C) createValidations() []func() error {
	return []func() error{c.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (c *C) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (c *C) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return c.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (c *C) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&c.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type CList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []C `json:"items"`
}

type C_SpecARM struct {
	APIVersion CSpecAPIVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       CSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &C_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (cSpecARM C_SpecARM) GetAPIVersion() string {
	return string(cSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (cSpecARM C_SpecARM) GetName() string {
	return cSpecARM.Name
}

// GetType returns the Type of the resource
func (cSpecARM C_SpecARM) GetType() string {
	return string(cSpecARM.Type)
}

// +kubebuilder:rbac:groups=test.azure.com,resources=ds,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={ds/status,ds/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/D
type D struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              D_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-d,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.ds.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &D{}

// Default applies defaults to the D resource
func (d *D) Default() {
	d.defaultImpl()
	var temp interface{} = d
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (d *D) defaultAzureName() {
	if d.Spec.AzureName == "" {
		d.Spec.AzureName = d.Name
	}
}

// defaultImpl applies the code generated defaults to the D resource
func (d *D) defaultImpl() { d.defaultAzureName() }

var _ genruntime.KubernetesResource = &D{}

// AzureName returns the Azure name of the resource
func (d *D) AzureName() string {
	return d.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (d *D) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (d *D) GetSpec() genruntime.ConvertibleSpec {
	return &d.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/D"
func (d *D) GetType() string {
	return "Microsoft.Azure/D"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (d *D) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(d.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: d.Namespace, Name: d.Spec.Owner.Name}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-d,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.ds.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &D{}

// ValidateCreate validates the creation of the resource
func (d *D) ValidateCreate() error {
	validations := d.createValidations()
	var temp interface{} = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (d *D) ValidateDelete() error {
	validations := d.deleteValidations()
	var temp interface{} = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (d *D) ValidateUpdate(old runtime.Object) error {
	validations := d.updateValidations()
	var temp interface{} = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (d *D) createValidations() []func() error {
	return []func() error{d.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (d *D) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (d *D) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return d.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (d *D) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&d.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/D
type DList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []D `json:"items"`
}

type D_SpecARM struct {
	APIVersion DSpecAPIVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Type       DSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &D_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (dSpecARM D_SpecARM) GetAPIVersion() string {
	return string(dSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (dSpecARM D_SpecARM) GetName() string {
	return dSpecARM.Name
}

// GetType returns the Type of the resource
func (dSpecARM D_SpecARM) GetType() string {
	return string(dSpecARM.Type)
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecAPIVersion string

const ASpecAPIVersion20200601 = ASpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/A"}
type ASpecType string

const ASpecTypeMicrosoftAzureA = ASpecType("Microsoft.Azure/A")

type A_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ARMTransformer = &A_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (aSpec *A_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if aSpec == nil {
		return nil, nil
	}
	var result A_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = ASpecAPIVersion20200601

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Type’:
	result.Type = ASpecTypeMicrosoftAzureA
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (aSpec *A_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &A_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (aSpec *A_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected A_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	aSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	aSpec.Owner = owner

	// No error
	return nil
}

// SetAzureName sets the Azure name of the resource
func (aSpec *A_Spec) SetAzureName(azureName string) { aSpec.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type BSpecAPIVersion string

const BSpecAPIVersion20200601 = BSpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/B"}
type BSpecType string

const BSpecTypeMicrosoftAzureB = BSpecType("Microsoft.Azure/B")

type B_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test.azure.com" json:"owner" kind:"A"`
}

var _ genruntime.ARMTransformer = &B_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (bSpec *B_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if bSpec == nil {
		return nil, nil
	}
	var result B_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = BSpecAPIVersion20200601

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Type’:
	result.Type = BSpecTypeMicrosoftAzureB
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (bSpec *B_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &B_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (bSpec *B_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(B_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected B_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	bSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	bSpec.Owner = owner

	// No error
	return nil
}

// SetAzureName sets the Azure name of the resource
func (bSpec *B_Spec) SetAzureName(azureName string) { bSpec.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type CSpecAPIVersion string

const CSpecAPIVersion20200601 = CSpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/C"}
type CSpecType string

const CSpecTypeMicrosoftAzureC = CSpecType("Microsoft.Azure/C")

type C_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test.azure.com" json:"owner" kind:"B"`
}

var _ genruntime.ARMTransformer = &C_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (cSpec *C_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if cSpec == nil {
		return nil, nil
	}
	var result C_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = CSpecAPIVersion20200601

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Type’:
	result.Type = CSpecTypeMicrosoftAzureC
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (cSpec *C_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &C_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (cSpec *C_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(C_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected C_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	cSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	cSpec.Owner = owner

	// No error
	return nil
}

// SetAzureName sets the Azure name of the resource
func (cSpec *C_Spec) SetAzureName(azureName string) { cSpec.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type DSpecAPIVersion string

const DSpecAPIVersion20200601 = DSpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/D"}
type DSpecType string

const DSpecTypeMicrosoftAzureD = DSpecType("Microsoft.Azure/D")

type D_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"test.azure.com" json:"owner" kind:"B"`
}

var _ genruntime.ARMTransformer = &D_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (dSpec *D_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if dSpec == nil {
		return nil, nil
	}
	var result D_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DSpecAPIVersion20200601

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Type’:
	result.Type = DSpecTypeMicrosoftAzureD
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (dSpec *D_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &D_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (dSpec *D_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(D_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected D_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	dSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	dSpec.Owner = owner

	// No error
	return nil
}

// SetAzureName sets the Azure name of the resource
func (dSpec *D_Spec) SetAzureName(azureName string) { dSpec.AzureName = azureName }

func init() {
	SchemeBuilder.Register(&A{}, &AList{}, &B{}, &BList{}, &C{}, &CList{}, &D{}, &DList{})
}
