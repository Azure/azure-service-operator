// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=as,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={as/status,as/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default() {
	a.defaultImpl()
	var temp interface{} = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl() { a.defaultAzureName() }

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// GetSpec returns the specification of this resource
func (a *A) GetSpec() genruntime.ConvertibleSpec {
	return &a.Spec
}

// GetStatus returns the status of this resource
func (a *A) GetStatus() genruntime.ConvertibleStatus {
	return &a.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a *A) GetType() string {
	return "Microsoft.Azure/A"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: a.Namespace, Name: a.Spec.Owner.Name}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate() error {
	validations := a.createValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete() error {
	validations := a.deleteValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(old runtime.Object) error {
	validations := a.updateValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func() error {
	return []func() error{a.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return a.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&a.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecARM struct {
	APIVersion ASpecAPIVersion `json:"apiVersion"`
	Name       string          `json:"name"`
	Properties *APropertiesARM `json:"properties,omitempty"`
	Type       ASpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &A_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (aSpecARM A_SpecARM) GetAPIVersion() string {
	return string(aSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (aSpecARM A_SpecARM) GetName() string {
	return aSpecARM.Name
}

// GetType returns the Type of the resource
func (aSpecARM A_SpecARM) GetType() string {
	return string(aSpecARM.Type)
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type APropertiesARM struct {
	Left  *Left_SubResourceEmbeddedARM    `json:"left,omitempty"`
	Right *Right_SubResourceEmbedded_1ARM `json:"right,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecAPIVersion string

const ASpecAPIVersion20200601 = ASpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/A"}
type ASpecType string

const ASpecTypeMicrosoftAzureA = ASpecType("Microsoft.Azure/A")

type A_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *AProperties                      `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &A_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (aSpec *A_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if aSpec == nil {
		return nil, nil
	}
	var result A_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = ASpecAPIVersion20200601

	// Set property ‘Name’:
	result.Name = name

	// Set property ‘Properties’:
	if aSpec.Properties != nil {
		propertiesARM, err := (*aSpec.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(APropertiesARM)
		result.Properties = &properties
	}

	// Set property ‘Type’:
	result.Type = ASpecTypeMicrosoftAzureA
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (aSpec *A_Spec) CreateEmptyARMValue() interface{} {
	return A_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (aSpec *A_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected A_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	aSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	aSpec.Owner = owner

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 AProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		aSpec.Properties = &properties
	}

	// No error
	return nil
}

// SetAzureName sets the Azure name of the resource
func (aSpec *A_Spec) SetAzureName(azureName string) { aSpec.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type AProperties struct {
	Left  *Left_SubResourceEmbedded    `json:"left,omitempty"`
	Right *Right_SubResourceEmbedded_1 `json:"right,omitempty"`
}

var _ genruntime.ARMTransformer = &AProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (aProperties *AProperties) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if aProperties == nil {
		return nil, nil
	}
	var result APropertiesARM

	// Set property ‘Left’:
	if aProperties.Left != nil {
		leftARM, err := (*aProperties.Left).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		left := leftARM.(Left_SubResourceEmbeddedARM)
		result.Left = &left
	}

	// Set property ‘Right’:
	if aProperties.Right != nil {
		rightARM, err := (*aProperties.Right).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		right := rightARM.(Right_SubResourceEmbedded_1ARM)
		result.Right = &right
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (aProperties *AProperties) CreateEmptyARMValue() interface{} {
	return APropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (aProperties *AProperties) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(APropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected APropertiesARM, got %T", armInput)
	}

	// Set property ‘Left’:
	if typedInput.Left != nil {
		var left1 Left_SubResourceEmbedded
		err := left1.PopulateFromARM(owner, *typedInput.Left)
		if err != nil {
			return err
		}
		left := left1
		aProperties.Left = &left
	}

	// Set property ‘Right’:
	if typedInput.Right != nil {
		var right1 Right_SubResourceEmbedded_1
		err := right1.PopulateFromARM(owner, *typedInput.Right)
		if err != nil {
			return err
		}
		right := right1
		aProperties.Right = &right
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbeddedARM struct {
	Name       *string                              `json:"name,omitempty"`
	Properties *LeftPropertiesARM                   `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbeddedARM `json:"refField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbedded_1ARM struct {
	Name       *string                                `json:"name,omitempty"`
	Properties *RightPropertiesARM                    `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbedded_1ARM `json:"refField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbeddedARM struct {
	Name       *string                                        `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbeddedARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbedded_1ARM struct {
	Name       *string                                          `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbedded_1ARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/LeftProperties
type LeftPropertiesARM struct {
	StrField *string `json:"strField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbedded struct {
	Name       *string                           `json:"name,omitempty"`
	Properties *LeftProperties                   `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbedded `json:"refField,omitempty"`
}

var _ genruntime.ARMTransformer = &Left_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (leftSubResourceEmbedded *Left_SubResourceEmbedded) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if leftSubResourceEmbedded == nil {
		return nil, nil
	}
	var result Left_SubResourceEmbeddedARM

	// Set property ‘Name’:
	if leftSubResourceEmbedded.Name != nil {
		name := *leftSubResourceEmbedded.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if leftSubResourceEmbedded.Properties != nil {
		propertiesARM, err := (*leftSubResourceEmbedded.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(LeftPropertiesARM)
		result.Properties = &properties
	}

	// Set property ‘RefField’:
	if leftSubResourceEmbedded.RefField != nil {
		refFieldARM, err := (*leftSubResourceEmbedded.RefField).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		refField := refFieldARM.(FakeResource_SubResourceEmbeddedARM)
		result.RefField = &refField
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (leftSubResourceEmbedded *Left_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return Left_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (leftSubResourceEmbedded *Left_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Left_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Left_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		leftSubResourceEmbedded.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 LeftProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		leftSubResourceEmbedded.Properties = &properties
	}

	// Set property ‘RefField’:
	if typedInput.RefField != nil {
		var refField1 FakeResource_SubResourceEmbedded
		err := refField1.PopulateFromARM(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refField := refField1
		leftSubResourceEmbedded.RefField = &refField
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/RightProperties
type RightPropertiesARM struct {
	StrField *string `json:"strField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbedded_1 struct {
	Name       *string                             `json:"name,omitempty"`
	Properties *RightProperties                    `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbedded_1 `json:"refField,omitempty"`
}

var _ genruntime.ARMTransformer = &Right_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rightSubResourceEmbedded1 *Right_SubResourceEmbedded_1) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if rightSubResourceEmbedded1 == nil {
		return nil, nil
	}
	var result Right_SubResourceEmbedded_1ARM

	// Set property ‘Name’:
	if rightSubResourceEmbedded1.Name != nil {
		name := *rightSubResourceEmbedded1.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if rightSubResourceEmbedded1.Properties != nil {
		propertiesARM, err := (*rightSubResourceEmbedded1.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(RightPropertiesARM)
		result.Properties = &properties
	}

	// Set property ‘RefField’:
	if rightSubResourceEmbedded1.RefField != nil {
		refFieldARM, err := (*rightSubResourceEmbedded1.RefField).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		refField := refFieldARM.(FakeResource_SubResourceEmbedded_1ARM)
		result.RefField = &refField
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rightSubResourceEmbedded1 *Right_SubResourceEmbedded_1) CreateEmptyARMValue() interface{} {
	return Right_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rightSubResourceEmbedded1 *Right_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Right_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Right_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rightSubResourceEmbedded1.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 RightProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		rightSubResourceEmbedded1.Properties = &properties
	}

	// Set property ‘RefField’:
	if typedInput.RefField != nil {
		var refField1 FakeResource_SubResourceEmbedded_1
		err := refField1.PopulateFromARM(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refField := refField1
		rightSubResourceEmbedded1.RefField = &refField
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbeddedARM struct {
	Loop2 *Right_SubResourceEmbeddedARM `json:"loop2,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbedded_1ARM struct {
	Loop1 *Left_SubResourceEmbedded_1ARM `json:"loop1,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbedded struct {
	Name       *string                                     `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbedded `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSubResourceEmbedded *FakeResource_SubResourceEmbedded) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if fakeResourceSubResourceEmbedded == nil {
		return nil, nil
	}
	var result FakeResource_SubResourceEmbeddedARM

	// Set property ‘Name’:
	if fakeResourceSubResourceEmbedded.Name != nil {
		name := *fakeResourceSubResourceEmbedded.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if fakeResourceSubResourceEmbedded.Properties != nil {
		propertiesARM, err := (*fakeResourceSubResourceEmbedded.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(FakeResourceProperties_SubResourceEmbeddedARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSubResourceEmbedded *FakeResource_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return FakeResource_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSubResourceEmbedded *FakeResource_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		fakeResourceSubResourceEmbedded.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 FakeResourceProperties_SubResourceEmbedded
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		fakeResourceSubResourceEmbedded.Properties = &properties
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbedded_1 struct {
	Name       *string                                       `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbedded_1 `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSubResourceEmbedded1 *FakeResource_SubResourceEmbedded_1) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if fakeResourceSubResourceEmbedded1 == nil {
		return nil, nil
	}
	var result FakeResource_SubResourceEmbedded_1ARM

	// Set property ‘Name’:
	if fakeResourceSubResourceEmbedded1.Name != nil {
		name := *fakeResourceSubResourceEmbedded1.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if fakeResourceSubResourceEmbedded1.Properties != nil {
		propertiesARM, err := (*fakeResourceSubResourceEmbedded1.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(FakeResourceProperties_SubResourceEmbedded_1ARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSubResourceEmbedded1 *FakeResource_SubResourceEmbedded_1) CreateEmptyARMValue() interface{} {
	return FakeResource_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSubResourceEmbedded1 *FakeResource_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		fakeResourceSubResourceEmbedded1.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 FakeResourceProperties_SubResourceEmbedded_1
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		fakeResourceSubResourceEmbedded1.Properties = &properties
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/LeftProperties
type LeftProperties struct {
	StrField *string `json:"strField,omitempty"`
}

var _ genruntime.ARMTransformer = &LeftProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (leftProperties *LeftProperties) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if leftProperties == nil {
		return nil, nil
	}
	var result LeftPropertiesARM

	// Set property ‘StrField’:
	if leftProperties.StrField != nil {
		strField := *leftProperties.StrField
		result.StrField = &strField
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (leftProperties *LeftProperties) CreateEmptyARMValue() interface{} {
	return LeftPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (leftProperties *LeftProperties) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(LeftPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LeftPropertiesARM, got %T", armInput)
	}

	// Set property ‘StrField’:
	if typedInput.StrField != nil {
		strField := *typedInput.StrField
		leftProperties.StrField = &strField
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/RightProperties
type RightProperties struct {
	StrField *string `json:"strField,omitempty"`
}

var _ genruntime.ARMTransformer = &RightProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rightProperties *RightProperties) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if rightProperties == nil {
		return nil, nil
	}
	var result RightPropertiesARM

	// Set property ‘StrField’:
	if rightProperties.StrField != nil {
		strField := *rightProperties.StrField
		result.StrField = &strField
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rightProperties *RightProperties) CreateEmptyARMValue() interface{} {
	return RightPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rightProperties *RightProperties) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(RightPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RightPropertiesARM, got %T", armInput)
	}

	// Set property ‘StrField’:
	if typedInput.StrField != nil {
		strField := *typedInput.StrField
		rightProperties.StrField = &strField
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbedded struct {
	Loop2 *Right_SubResourceEmbedded `json:"loop2,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResourceProperties_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourcePropertiesSubResourceEmbedded *FakeResourceProperties_SubResourceEmbedded) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if fakeResourcePropertiesSubResourceEmbedded == nil {
		return nil, nil
	}
	var result FakeResourceProperties_SubResourceEmbeddedARM

	// Set property ‘Loop2’:
	if fakeResourcePropertiesSubResourceEmbedded.Loop2 != nil {
		loop2ARM, err := (*fakeResourcePropertiesSubResourceEmbedded.Loop2).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		loop2 := loop2ARM.(Right_SubResourceEmbeddedARM)
		result.Loop2 = &loop2
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourcePropertiesSubResourceEmbedded *FakeResourceProperties_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return FakeResourceProperties_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourcePropertiesSubResourceEmbedded *FakeResourceProperties_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResourceProperties_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResourceProperties_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Loop2’:
	if typedInput.Loop2 != nil {
		var loop Right_SubResourceEmbedded
		err := loop.PopulateFromARM(owner, *typedInput.Loop2)
		if err != nil {
			return err
		}
		loop2 := loop
		fakeResourcePropertiesSubResourceEmbedded.Loop2 = &loop2
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbedded_1 struct {
	Loop1 *Left_SubResourceEmbedded_1 `json:"loop1,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResourceProperties_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourcePropertiesSubResourceEmbedded1 *FakeResourceProperties_SubResourceEmbedded_1) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if fakeResourcePropertiesSubResourceEmbedded1 == nil {
		return nil, nil
	}
	var result FakeResourceProperties_SubResourceEmbedded_1ARM

	// Set property ‘Loop1’:
	if fakeResourcePropertiesSubResourceEmbedded1.Loop1 != nil {
		loop1ARM, err := (*fakeResourcePropertiesSubResourceEmbedded1.Loop1).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		loop1 := loop1ARM.(Left_SubResourceEmbedded_1ARM)
		result.Loop1 = &loop1
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourcePropertiesSubResourceEmbedded1 *FakeResourceProperties_SubResourceEmbedded_1) CreateEmptyARMValue() interface{} {
	return FakeResourceProperties_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourcePropertiesSubResourceEmbedded1 *FakeResourceProperties_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResourceProperties_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResourceProperties_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Loop1’:
	if typedInput.Loop1 != nil {
		var loop Left_SubResourceEmbedded_1
		err := loop.PopulateFromARM(owner, *typedInput.Loop1)
		if err != nil {
			return err
		}
		loop1 := loop
		fakeResourcePropertiesSubResourceEmbedded1.Loop1 = &loop1
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbedded_1ARM struct {
	Name       *string            `json:"name,omitempty"`
	Properties *LeftPropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbeddedARM struct {
	Name       *string             `json:"name,omitempty"`
	Properties *RightPropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbedded_1 struct {
	Name       *string         `json:"name,omitempty"`
	Properties *LeftProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Left_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (leftSubResourceEmbedded1 *Left_SubResourceEmbedded_1) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if leftSubResourceEmbedded1 == nil {
		return nil, nil
	}
	var result Left_SubResourceEmbedded_1ARM

	// Set property ‘Name’:
	if leftSubResourceEmbedded1.Name != nil {
		name := *leftSubResourceEmbedded1.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if leftSubResourceEmbedded1.Properties != nil {
		propertiesARM, err := (*leftSubResourceEmbedded1.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(LeftPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (leftSubResourceEmbedded1 *Left_SubResourceEmbedded_1) CreateEmptyARMValue() interface{} {
	return Left_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (leftSubResourceEmbedded1 *Left_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Left_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Left_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		leftSubResourceEmbedded1.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 LeftProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		leftSubResourceEmbedded1.Properties = &properties
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbedded struct {
	Name       *string          `json:"name,omitempty"`
	Properties *RightProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Right_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rightSubResourceEmbedded *Right_SubResourceEmbedded) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if rightSubResourceEmbedded == nil {
		return nil, nil
	}
	var result Right_SubResourceEmbeddedARM

	// Set property ‘Name’:
	if rightSubResourceEmbedded.Name != nil {
		name := *rightSubResourceEmbedded.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if rightSubResourceEmbedded.Properties != nil {
		propertiesARM, err := (*rightSubResourceEmbedded.Properties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(RightPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rightSubResourceEmbedded *Right_SubResourceEmbedded) CreateEmptyARMValue() interface{} {
	return Right_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rightSubResourceEmbedded *Right_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Right_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Right_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rightSubResourceEmbedded.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 RightProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		rightSubResourceEmbedded.Properties = &properties
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&A{}, &AList{})
}
