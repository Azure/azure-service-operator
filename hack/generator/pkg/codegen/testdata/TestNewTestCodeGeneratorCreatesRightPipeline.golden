Expected Pipeline Stages for Test Code Generation
-------------------------------------------------
loadTestSchema                                       Load and walk schema (test)
addStatusFromSwagger                                 Add information from Swagger specs for 'status' fields
allof-anyof-objects                                  Convert allOf and oneOf to object types
flattenResources                                     Flatten nested resource types
augmentSpecWithStatus                                Merges information from Status into Spec
stripUnused                                          Strip unused types for test
nameTypes                                            Name inner types for CRD
propertyRewrites                                     Modify property types using configured transforms
makeStatusPropertiesOptional                         Forces all status properties to be optional
removeStatusPropertyValidation                       Removes validation from all status properties
unrollRecursiveTypes                                 Unroll directly recursive types since they are not supported by controller-gen
determineResourceOwnership                           Determine ARM resource relationships
removeAliases                                        Remove type aliases
pluralizeNames                                       Improve resource pluralization
stripUnused                                          Strip unused types for test
assertTypesStructureValid                            Verify that all local TypeNames refer to a type
filterTypes                                          Apply export filters to reduce the number of generated types
verifyNoErroredTypes                                 Verify there are no ErroredType's containing errors
stripUnused                                          Strip unused types for test
replaceAnyTypeWithJSON                               Replace properties using interface{} with arbitrary JSON
addCrossResourceReferences                azure      Replace cross-resource references with genruntime.ResourceReference
applyKubernetesResourceInterface          azure      Add the KubernetesResource interface to every resource
flattenProperties                                    Apply flattening to properties marked for flattening
stripUnused                                          Strip unused types for test
createConversionGraph                     azure      Create the graph of conversions between versions of each resource group
simplifyDefinitions                                  Flatten definitions by removing wrapper types
injectJSONTestCases                       azure      Add test cases to verify JSON serialization
injectPropertyAssignmentTestCases         azure      Add test cases to verify PropertyAssignment functions
markStorageVersion                                   Mark the latest version of each resource as the storage version
ensureArmTypeExistsForEveryType           azure      Check that an ARM type exists for both Spec and Status of each resource
exportTestPackages                                   Export packages for test
exportControllerResourceRegistrations     azure      Export resource registrations to ""
