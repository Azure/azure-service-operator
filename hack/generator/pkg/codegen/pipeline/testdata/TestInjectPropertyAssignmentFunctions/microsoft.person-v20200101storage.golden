// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101storage

import (
	"github.com/Azure/azure-service-operator/testing/microsoft.person/v20200101storage"
	"github.com/Azure/azure-service-operator/testing/microsoft.person/v20211231storage"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
//Storage version of v20200101.Person
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              v20200101storage.Person_Spec   `json:"spec,omitempty"`
	Status            v20200101storage.Person_Status `json:"status,omitempty"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *v20200101storage.Person) AssignPropertiesFromPerson(source *v20211231storage.Person) error {

	// Spec
	var spec Person_Spec
	err := spec.AssignPropertiesFromPersonSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromPersonSpec()")
	}
	person.Spec = spec

	// Status
	var status Person_Status
	err = status.AssignPropertiesFromPersonStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromPersonStatus()")
	}
	person.Status = status

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *v20200101storage.Person) AssignPropertiesToPerson(destination *v20211231storage.Person) error {

	// Spec
	var spec v20211231storage.Person_Spec
	err := person.Spec.AssignPropertiesToPersonSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToPersonSpec()")
	}
	destination.Spec = spec

	// Status
	var status v20211231storage.Person_Status
	err = person.Status.AssignPropertiesToPersonStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToPersonStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// +kubebuilder:object:root=true
//Storage version of v20200101.Person
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []v20200101storage.Person `json:"items"`
}

//Storage version of v20200101.Person_Spec
type Person_Spec struct {
	FamilyName *string `json:"familyName,omitempty"`
	FullName   *string `json:"fullName,omitempty"`
	KnownAs    *string `json:"knownAs,omitempty"`
}

// AssignPropertiesFromPersonSpec populates our Person_Spec from the provided source Person_Spec
func (personSpec *v20200101storage.Person_Spec) AssignPropertiesFromPersonSpec(source *v20211231storage.Person_Spec) error {

	// FamilyName
	if source.FamilyName != nil {
		familyName := *source.FamilyName
		personSpec.FamilyName = &familyName
	} else {
		personSpec.FamilyName = nil
	}

	// FullName
	if source.FullName != nil {
		fullName := *source.FullName
		personSpec.FullName = &fullName
	} else {
		personSpec.FullName = nil
	}

	// KnownAs
	if source.KnownAs != nil {
		knownA := *source.KnownAs
		personSpec.KnownAs = &knownA
	} else {
		personSpec.KnownAs = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPersonSpec populates the provided destination Person_Spec from our Person_Spec
func (personSpec *v20200101storage.Person_Spec) AssignPropertiesToPersonSpec(destination *v20211231storage.Person_Spec) error {

	// FamilyName
	if personSpec.FamilyName != nil {
		familyName := *personSpec.FamilyName
		destination.FamilyName = &familyName
	} else {
		destination.FamilyName = nil
	}

	// FullName
	if personSpec.FullName != nil {
		fullName := *personSpec.FullName
		destination.FullName = &fullName
	} else {
		destination.FullName = nil
	}

	// KnownAs
	if personSpec.KnownAs != nil {
		knownA := *personSpec.KnownAs
		destination.KnownAs = &knownA
	} else {
		destination.KnownAs = nil
	}

	// No error
	return nil
}

//Storage version of v20200101.Person_Status
type Person_Status struct {
	Status *string `json:"status,omitempty"`
}

// AssignPropertiesFromPersonStatus populates our Person_Status from the provided source Person_Status
func (personStatus *v20200101storage.Person_Status) AssignPropertiesFromPersonStatus(source *v20211231storage.Person_Status) error {

	// Status
	if source.Status != nil {
		status := *source.Status
		personStatus.Status = &status
	} else {
		personStatus.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPersonStatus populates the provided destination Person_Status from our Person_Status
func (personStatus *v20200101storage.Person_Status) AssignPropertiesToPersonStatus(destination *v20211231storage.Person_Status) error {

	// Status
	if personStatus.Status != nil {
		status := *personStatus.Status
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&v20200101storage.Person{}, &v20200101storage.PersonList{})
}
