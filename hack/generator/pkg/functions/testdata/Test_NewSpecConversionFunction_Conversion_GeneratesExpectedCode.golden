// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	personv20211231 "github.com/Azure/azure-service-operator/testing/microsoft.person/v20211231"
	"github.com/pkg/errors"
)

type Person_Spec struct {
	//FamilyName: Shared name of the family
	FamilyName string `json:"familyName"`

	//FullName: As would be used to address mail
	FullName string `json:"fullName"`

	//KnownAs: How the person is generally known
	KnownAs string `json:"knownAs"`
}

// AssignPropertiesFromPersonSpec populates our Person_Spec from the provided source Person_Spec
func (personSpec *Person_Spec) AssignPropertiesFromPersonSpec(source *personv20211231.Person_Spec) error {

	// FamilyName
	personSpec.FamilyName = source.FamilyName

	// FullName
	personSpec.FullName = source.FullName

	// KnownAs
	personSpec.KnownAs = source.KnownAs

	// No error
	return nil
}

// AssignPropertiesToPersonSpec populates the provided destination Person_Spec from our Person_Spec
func (personSpec *Person_Spec) AssignPropertiesToPersonSpec(destination *personv20211231.Person_Spec) error {

	// FamilyName
	destination.FamilyName = personSpec.FamilyName

	// FullName
	destination.FullName = personSpec.FullName

	// KnownAs
	destination.KnownAs = personSpec.KnownAs

	// No error
	return nil
}

// ConvertSpecFrom populates our Person_Spec from the provided source
func (personSpec *Person_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*personv20211231.Person_Spec)
	if ok {
		// Populate our instance from source
		return personSpec.AssignPropertiesFromPersonSpec(src)
	}

	// Convert to an intermediate form
	src = &personv20211231.Person_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = personSpec.AssignPropertiesFromPersonSpec(src)
	return err
}

// ConvertSpecTo populates the provided destination from our Person_Spec
func (personSpec *Person_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*personv20211231.Person_Spec)
	if ok {
		// Populate destination from our instance
		return personSpec.AssignPropertiesToPersonSpec(dst)
	}

	// Convert to an intermediate form
	dst = &personv20211231.Person_Spec{}
	err := personSpec.AssignPropertiesToPersonSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	return err
}
