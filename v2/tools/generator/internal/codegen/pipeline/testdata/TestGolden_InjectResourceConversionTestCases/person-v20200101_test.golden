// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/testing/person/v20200101storage"
	"github.com/Azure/azure-service-operator/testing/person/v20211231storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Person_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person to hub returns original",
		prop.ForAll(RunResourceConversionTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForPerson tests if a specific instance of Person round trips to the hub storage version and back losslessly
func RunResourceConversionTestForPerson(subject Person) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211231storage.Person
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Person
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person to Person via AssignPropertiesToPerson & AssignPropertiesFromPerson returns original",
		prop.ForAll(RunPropertyAssignmentTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPerson tests if a specific instance of Person can be assigned to v20200101storage and back losslessly
func RunPropertyAssignmentTestForPerson(subject Person) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20200101storage.Person
	err := copied.AssignPropertiesToPerson(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Person
	err = actual.AssignPropertiesFromPerson(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson runs a test to see if a specific instance of Person round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson(subject Person) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person instances for property testing - lazily instantiated by PersonGenerator()
var personGenerator gopter.Gen

// PersonGenerator returns a generator of Person instances for property testing.
func PersonGenerator() gopter.Gen {
	if personGenerator != nil {
		return personGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPerson(generators)
	personGenerator = gen.Struct(reflect.TypeOf(Person{}), generators)

	return personGenerator
}

// AddRelatedPropertyGeneratorsForPerson is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPerson(gens map[string]gopter.Gen) {
	gens["Spec"] = Person_SpecGenerator()
	gens["Status"] = Person_StatusGenerator()
}

func Test_Person_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person_Spec to Person_Spec via AssignPropertiesToPerson_Spec & AssignPropertiesFromPerson_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForPerson_Spec, Person_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPerson_Spec tests if a specific instance of Person_Spec can be assigned to v20200101storage and back losslessly
func RunPropertyAssignmentTestForPerson_Spec(subject Person_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20200101storage.Person_Spec
	err := copied.AssignPropertiesToPerson_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Person_Spec
	err = actual.AssignPropertiesFromPerson_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson_Spec, Person_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson_Spec runs a test to see if a specific instance of Person_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson_Spec(subject Person_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person_Spec instances for property testing - lazily instantiated by Person_SpecGenerator()
var person_specGenerator gopter.Gen

// Person_SpecGenerator returns a generator of Person_Spec instances for property testing.
func Person_SpecGenerator() gopter.Gen {
	if person_specGenerator != nil {
		return person_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_Spec(generators)
	person_specGenerator = gen.Struct(reflect.TypeOf(Person_Spec{}), generators)

	return person_specGenerator
}

// AddIndependentPropertyGeneratorsForPerson_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPerson_Spec(gens map[string]gopter.Gen) {
	gens["FamilyName"] = gen.AlphaString()
	gens["FullName"] = gen.AlphaString()
	gens["KnownAs"] = gen.AlphaString()
}

func Test_Person_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person_Status to Person_Status via AssignPropertiesToPerson_Status & AssignPropertiesFromPerson_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForPerson_Status, Person_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPerson_Status tests if a specific instance of Person_Status can be assigned to v20200101storage and back losslessly
func RunPropertyAssignmentTestForPerson_Status(subject Person_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20200101storage.Person_Status
	err := copied.AssignPropertiesToPerson_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Person_Status
	err = actual.AssignPropertiesFromPerson_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson_Status, Person_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson_Status runs a test to see if a specific instance of Person_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson_Status(subject Person_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person_Status instances for property testing - lazily instantiated by Person_StatusGenerator()
var person_statusGenerator gopter.Gen

// Person_StatusGenerator returns a generator of Person_Status instances for property testing.
func Person_StatusGenerator() gopter.Gen {
	if person_statusGenerator != nil {
		return person_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_Status(generators)
	person_statusGenerator = gen.Struct(reflect.TypeOf(Person_Status{}), generators)

	return person_statusGenerator
}

// AddIndependentPropertyGeneratorsForPerson_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPerson_Status(gens map[string]gopter.Gen) {
	gens["Status"] = gen.AlphaString()
}
