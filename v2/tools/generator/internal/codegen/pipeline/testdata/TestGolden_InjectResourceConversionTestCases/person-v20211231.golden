// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20211231

import (
	"fmt"
	v20211231s "github.com/Azure/azure-service-operator/testing/person/v20211231storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_STATUS `json:"status,omitempty"`
}

var _ conversion.Convertible = &Person{}

// ConvertFrom populates our Person from the provided hub Person
func (person *Person) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211231s.Person)
	if !ok {
		return fmt.Errorf("expected person/v20211231storage/Person but received %T instead", hub)
	}

	return person.AssignProperties_From_Person(source)
}

// ConvertTo populates the provided hub Person from our Person
func (person *Person) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211231s.Person)
	if !ok {
		return fmt.Errorf("expected person/v20211231storage/Person but received %T instead", hub)
	}

	return person.AssignProperties_To_Person(destination)
}

// AssignProperties_From_Person populates our Person from the provided source Person
func (person *Person) AssignProperties_From_Person(source *v20211231s.Person) error {

	// ObjectMeta
	person.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Person_Spec
	err := spec.AssignProperties_From_Person_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Person_Spec() to populate field Spec")
	}
	person.Spec = spec

	// Status
	var status Person_STATUS
	err = status.AssignProperties_From_Person_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Person_STATUS() to populate field Status")
	}
	person.Status = status

	// No error
	return nil
}

// AssignProperties_To_Person populates the provided destination Person from our Person
func (person *Person) AssignProperties_To_Person(destination *v20211231s.Person) error {

	// ObjectMeta
	destination.ObjectMeta = *person.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211231s.Person_Spec
	err := person.Spec.AssignProperties_To_Person_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Person_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211231s.Person_STATUS
	err = person.Status.AssignProperties_To_Person_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Person_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// +kubebuilder:object:root=true
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

type Person_Spec struct {
	// FamilyName: Shared name of the family
	FamilyName string `json:"familyName,omitempty"`

	// FullName: As would be used to address mail
	FullName string `json:"fullName,omitempty"`

	// KnownAs: How the person is generally known
	KnownAs            string  `json:"knownAs,omitempty"`
	PostalAddress      Address `json:"postalAddress,omitempty"`
	ResidentialAddress Address `json:"residentialAddress,omitempty"`
}

// AssignProperties_From_Person_Spec populates our Person_Spec from the provided source Person_Spec
func (person *Person_Spec) AssignProperties_From_Person_Spec(source *v20211231s.Person_Spec) error {

	// FamilyName
	person.FamilyName = genruntime.GetOptionalStringValue(source.FamilyName)

	// FullName
	person.FullName = genruntime.GetOptionalStringValue(source.FullName)

	// KnownAs
	person.KnownAs = genruntime.GetOptionalStringValue(source.KnownAs)

	// PostalAddress
	if source.PostalAddress != nil {
		var postalAddress Address
		err := postalAddress.AssignProperties_From_Address(source.PostalAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Address() to populate field PostalAddress")
		}
		person.PostalAddress = postalAddress
	} else {
		person.PostalAddress = Address{}
	}

	// ResidentialAddress
	if source.ResidentialAddress != nil {
		var residentialAddress Address
		err := residentialAddress.AssignProperties_From_Address(source.ResidentialAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Address() to populate field ResidentialAddress")
		}
		person.ResidentialAddress = residentialAddress
	} else {
		person.ResidentialAddress = Address{}
	}

	// No error
	return nil
}

// AssignProperties_To_Person_Spec populates the provided destination Person_Spec from our Person_Spec
func (person *Person_Spec) AssignProperties_To_Person_Spec(destination *v20211231s.Person_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FamilyName
	familyName := person.FamilyName
	destination.FamilyName = &familyName

	// FullName
	fullName := person.FullName
	destination.FullName = &fullName

	// KnownAs
	knownA := person.KnownAs
	destination.KnownAs = &knownA

	// PostalAddress
	var postalAddress v20211231s.Address
	err := person.PostalAddress.AssignProperties_To_Address(&postalAddress)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Address() to populate field PostalAddress")
	}
	destination.PostalAddress = &postalAddress

	// ResidentialAddress
	var residentialAddress v20211231s.Address
	err = person.ResidentialAddress.AssignProperties_To_Address(&residentialAddress)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Address() to populate field ResidentialAddress")
	}
	destination.ResidentialAddress = &residentialAddress

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Person_STATUS struct {
	// Status: Current status
	Status string `json:"status,omitempty"`
}

// AssignProperties_From_Person_STATUS populates our Person_STATUS from the provided source Person_STATUS
func (person *Person_STATUS) AssignProperties_From_Person_STATUS(source *v20211231s.Person_STATUS) error {

	// Status
	person.Status = genruntime.GetOptionalStringValue(source.Status)

	// No error
	return nil
}

// AssignProperties_To_Person_STATUS populates the provided destination Person_STATUS from our Person_STATUS
func (person *Person_STATUS) AssignProperties_To_Person_STATUS(destination *v20211231s.Person_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	status := person.Status
	destination.Status = &status

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Address struct {
	// City: City or town (or nearest)
	City string `json:"city,omitempty"`

	// FullAddress: Full written address for map or postal use
	FullAddress string `json:"fullAddress,omitempty"`
}

// AssignProperties_From_Address populates our Address from the provided source Address
func (address *Address) AssignProperties_From_Address(source *v20211231s.Address) error {

	// City
	address.City = genruntime.GetOptionalStringValue(source.City)

	// FullAddress
	address.FullAddress = genruntime.GetOptionalStringValue(source.FullAddress)

	// No error
	return nil
}

// AssignProperties_To_Address populates the provided destination Address from our Address
func (address *Address) AssignProperties_To_Address(destination *v20211231s.Address) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// City
	city := address.City
	destination.City = &city

	// FullAddress
	fullAddress := address.FullAddress
	destination.FullAddress = &fullAddress

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
