// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101storage

import (
	"encoding/json"
	v20211231s "github.com/Azure/azure-service-operator/testing/person/v20211231storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Person_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person to hub returns original",
		prop.ForAll(RunResourceConversionTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForPerson tests if a specific instance of Person round trips to the hub storage version and back losslessly
func RunResourceConversionTestForPerson(subject Person) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211231s.Person
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Person
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person to Person via AssignProperties_To_Person & AssignProperties_From_Person returns original",
		prop.ForAll(RunPropertyAssignmentTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPerson tests if a specific instance of Person can be assigned to v20211231storage and back losslessly
func RunPropertyAssignmentTestForPerson(subject Person) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211231s.Person
	err := copied.AssignProperties_To_Person(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Person
	err = actual.AssignProperties_From_Person(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson runs a test to see if a specific instance of Person round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson(subject Person) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person instances for property testing - lazily instantiated by PersonGenerator()
var personGenerator gopter.Gen

// PersonGenerator returns a generator of Person instances for property testing.
func PersonGenerator() gopter.Gen {
	if personGenerator != nil {
		return personGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPerson(generators)
	personGenerator = gen.Struct(reflect.TypeOf(Person{}), generators)

	return personGenerator
}

// AddRelatedPropertyGeneratorsForPerson is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPerson(gens map[string]gopter.Gen) {
	gens["Spec"] = Person_SpecGenerator()
	gens["Status"] = Person_STATUSGenerator()
}

func Test_Person_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person_Spec to Person_Spec via AssignProperties_To_Person_Spec & AssignProperties_From_Person_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForPerson_Spec, Person_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPerson_Spec tests if a specific instance of Person_Spec can be assigned to v20211231storage and back losslessly
func RunPropertyAssignmentTestForPerson_Spec(subject Person_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211231s.Person_Spec
	err := copied.AssignProperties_To_Person_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Person_Spec
	err = actual.AssignProperties_From_Person_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson_Spec, Person_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson_Spec runs a test to see if a specific instance of Person_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson_Spec(subject Person_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person_Spec instances for property testing - lazily instantiated by Person_SpecGenerator()
var person_SpecGenerator gopter.Gen

// Person_SpecGenerator returns a generator of Person_Spec instances for property testing.
func Person_SpecGenerator() gopter.Gen {
	if person_SpecGenerator != nil {
		return person_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_Spec(generators)
	person_SpecGenerator = gen.Struct(reflect.TypeOf(Person_Spec{}), generators)

	return person_SpecGenerator
}

// AddIndependentPropertyGeneratorsForPerson_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPerson_Spec(gens map[string]gopter.Gen) {
	gens["FamilyName"] = gen.PtrOf(gen.AlphaString())
	gens["FullName"] = gen.PtrOf(gen.AlphaString())
	gens["KnownAs"] = gen.PtrOf(gen.AlphaString())
}

func Test_Person_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Person_STATUS to Person_STATUS via AssignProperties_To_Person_STATUS & AssignProperties_From_Person_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForPerson_STATUS, Person_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPerson_STATUS tests if a specific instance of Person_STATUS can be assigned to v20211231storage and back losslessly
func RunPropertyAssignmentTestForPerson_STATUS(subject Person_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211231s.Person_STATUS
	err := copied.AssignProperties_To_Person_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Person_STATUS
	err = actual.AssignProperties_From_Person_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Person_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson_STATUS, Person_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson_STATUS runs a test to see if a specific instance of Person_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson_STATUS(subject Person_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person_STATUS instances for property testing - lazily instantiated by Person_STATUSGenerator()
var person_STATUSGenerator gopter.Gen

// Person_STATUSGenerator returns a generator of Person_STATUS instances for property testing.
func Person_STATUSGenerator() gopter.Gen {
	if person_STATUSGenerator != nil {
		return person_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_STATUS(generators)
	person_STATUSGenerator = gen.Struct(reflect.TypeOf(Person_STATUS{}), generators)

	return person_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPerson_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPerson_STATUS(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}
