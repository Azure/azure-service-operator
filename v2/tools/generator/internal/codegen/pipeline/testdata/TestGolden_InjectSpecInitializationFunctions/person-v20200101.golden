// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_STATUS `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

type Person_Spec struct {
	Addresses []Address_Spec `json:"addresses,omitempty"`

	// FamilyName: Shared name of the family
	FamilyName string `json:"familyName,omitempty"`

	// FullName: As would be used to address mail
	FullName string `json:"fullName,omitempty"`

	// KnownAs: How the person is generally known
	KnownAs         string                       `json:"knownAs,omitempty"`
	PersonReference genruntime.ResourceReference `json:"personReference,omitempty"`
}

// Initialize_From_Person_STATUS populates our Person_Spec from the provided source Person_STATUS
func (person *Person_Spec) Initialize_From_Person_STATUS(source *Person_STATUS) error {

	// Addresses
	if source.Addresses != nil {
		addressList := make([]Address_Spec, len(source.Addresses))
		for addressIndex, addressItem := range source.Addresses {
			// Shadow the loop variable to avoid aliasing
			addressItem := addressItem
			var address Address_Spec
			err := address.Initialize_From_Location_STATUS(&addressItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_Location_STATUS() to populate field Addresses")
			}
			addressList[addressIndex] = address
		}
		person.Addresses = addressList
	} else {
		person.Addresses = nil
	}

	// FamilyName
	person.FamilyName = source.FamilyName

	// FullName
	person.FullName = source.FullName

	// KnownAs
	person.KnownAs = source.KnownAs

	// PersonReference
	person.PersonReference = genruntime.CreateResourceReferenceFromARMID(source.PersonId)

	// No error
	return nil
}

type Person_STATUS struct {
	Addresses []Location_STATUS `json:"addresses,omitempty"`

	// FamilyName: Shared name of the family
	FamilyName string `json:"familyName,omitempty"`

	// FullName: As would be used to address mail
	FullName string `json:"fullName,omitempty"`

	// KnownAs: How the person is generally known
	KnownAs  string `json:"knownAs,omitempty"`
	PersonId string `json:"personId,omitempty"`

	// Status: Current status
	Status string `json:"status,omitempty"`
}

type Address_Spec struct {
	// City: City or town (or nearest)
	City string `json:"city,omitempty"`

	// FullAddress: Full written address for map or postal use
	FullAddress string `json:"fullAddress,omitempty"`
}

// Initialize_From_Location_STATUS populates our Address_Spec from the provided source Location_STATUS
func (address *Address_Spec) Initialize_From_Location_STATUS(source *Location_STATUS) error {

	// City
	address.City = source.City

	// FullAddress
	address.FullAddress = source.FullAddress

	// No error
	return nil
}

type Location_STATUS struct {
	// City: City or town (or nearest)
	City string `json:"city,omitempty"`

	// FullAddress: Full written address for map or postal use
	FullAddress string `json:"fullAddress,omitempty"`

	// Status: Current status
	Status string `json:"status,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
