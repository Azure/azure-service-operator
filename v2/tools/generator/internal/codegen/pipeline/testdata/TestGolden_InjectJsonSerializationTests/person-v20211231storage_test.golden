// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20211231storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Person_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson, PersonGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson runs a test to see if a specific instance of Person round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson(subject Person) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person instances for property testing - lazily instantiated by PersonGenerator()
var personGenerator gopter.Gen

// PersonGenerator returns a generator of Person instances for property testing.
func PersonGenerator() gopter.Gen {
	if personGenerator != nil {
		return personGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPerson(generators)
	personGenerator = gen.Struct(reflect.TypeOf(Person{}), generators)

	return personGenerator
}

// AddRelatedPropertyGeneratorsForPerson is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPerson(gens map[string]gopter.Gen) {
	gens["Spec"] = Person_SpecGenerator()
	gens["Status"] = Person_STATUSGenerator()
}

func Test_Person_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson_Spec, Person_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson_Spec runs a test to see if a specific instance of Person_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson_Spec(subject Person_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person_Spec instances for property testing - lazily instantiated by Person_SpecGenerator()
var person_SpecGenerator gopter.Gen

// Person_SpecGenerator returns a generator of Person_Spec instances for property testing.
// We first initialize person_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Person_SpecGenerator() gopter.Gen {
	if person_SpecGenerator != nil {
		return person_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_Spec(generators)
	person_SpecGenerator = gen.Struct(reflect.TypeOf(Person_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_Spec(generators)
	AddRelatedPropertyGeneratorsForPerson_Spec(generators)
	person_SpecGenerator = gen.Struct(reflect.TypeOf(Person_Spec{}), generators)

	return person_SpecGenerator
}

// AddIndependentPropertyGeneratorsForPerson_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPerson_Spec(gens map[string]gopter.Gen) {
	gens["FamilyName"] = gen.PtrOf(gen.AlphaString())
	gens["FullName"] = gen.PtrOf(gen.AlphaString())
	gens["KnownAs"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPerson_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPerson_Spec(gens map[string]gopter.Gen) {
	gens["PostalAddress"] = gen.PtrOf(AddressGenerator())
	gens["ResidentialAddress"] = gen.PtrOf(AddressGenerator())
}

func Test_Person_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Person_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPerson_STATUS, Person_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPerson_STATUS runs a test to see if a specific instance of Person_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPerson_STATUS(subject Person_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Person_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Person_STATUS instances for property testing - lazily instantiated by Person_STATUSGenerator()
var person_STATUSGenerator gopter.Gen

// Person_STATUSGenerator returns a generator of Person_STATUS instances for property testing.
func Person_STATUSGenerator() gopter.Gen {
	if person_STATUSGenerator != nil {
		return person_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPerson_STATUS(generators)
	person_STATUSGenerator = gen.Struct(reflect.TypeOf(Person_STATUS{}), generators)

	return person_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPerson_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPerson_STATUS(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}

func Test_Address_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Address via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddress, AddressGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddress runs a test to see if a specific instance of Address round trips to JSON and back losslessly
func RunJSONSerializationTestForAddress(subject Address) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Address
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Address instances for property testing - lazily instantiated by AddressGenerator()
var addressGenerator gopter.Gen

// AddressGenerator returns a generator of Address instances for property testing.
func AddressGenerator() gopter.Gen {
	if addressGenerator != nil {
		return addressGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddress(generators)
	addressGenerator = gen.Struct(reflect.TypeOf(Address{}), generators)

	return addressGenerator
}

// AddIndependentPropertyGeneratorsForAddress is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddress(gens map[string]gopter.Gen) {
	gens["City"] = gen.PtrOf(gen.AlphaString())
	gens["FullAddress"] = gen.PtrOf(gen.AlphaString())
}
