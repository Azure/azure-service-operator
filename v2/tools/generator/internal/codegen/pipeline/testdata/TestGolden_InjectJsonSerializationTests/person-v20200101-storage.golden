// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	storage "github.com/Azure/azure-service-operator/testing/person/v20211231/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// Storage version of v20200101.Person
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_STATUS `json:"status,omitempty"`
}

// AssignProperties_From_Person populates our Person from the provided source Person
func (person *Person) AssignProperties_From_Person(source *storage.Person) error {

	// ObjectMeta
	person.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Person_Spec
	err := spec.AssignProperties_From_Person_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Person_Spec() to populate field Spec")
	}
	person.Spec = spec

	// Status
	var status Person_STATUS
	err = status.AssignProperties_From_Person_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Person_STATUS() to populate field Status")
	}
	person.Status = status

	// Invoke the augmentConversionForPerson interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson); ok {
		err := augmentedPerson.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Person populates the provided destination Person from our Person
func (person *Person) AssignProperties_To_Person(destination *storage.Person) error {

	// ObjectMeta
	destination.ObjectMeta = *person.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.Person_Spec
	err := person.Spec.AssignProperties_To_Person_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Person_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.Person_STATUS
	err = person.Status.AssignProperties_To_Person_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Person_STATUS() to populate field Status")
	}
	destination.Status = status

	// Invoke the augmentConversionForPerson interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson); ok {
		err := augmentedPerson.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// +kubebuilder:object:root=true
// Storage version of v20200101.Person
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

type augmentConversionForPerson interface {
	AssignPropertiesFrom(src *storage.Person) error
	AssignPropertiesTo(dst *storage.Person) error
}

// Storage version of v20200101.Person_Spec
type Person_Spec struct {
	FamilyName  *string                `json:"familyName,omitempty"`
	FullName    *string                `json:"fullName,omitempty"`
	KnownAs     *string                `json:"knownAs,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_Person_Spec populates our Person_Spec from the provided source Person_Spec
func (person *Person_Spec) AssignProperties_From_Person_Spec(source *storage.Person_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// FamilyName
	person.FamilyName = genruntime.ClonePointerToString(source.FamilyName)

	// FullName
	person.FullName = genruntime.ClonePointerToString(source.FullName)

	// KnownAs
	person.KnownAs = genruntime.ClonePointerToString(source.KnownAs)

	// PostalAddress
	if source.PostalAddress != nil {
		propertyBag.Add("PostalAddress", *source.PostalAddress)
	} else {
		propertyBag.Remove("PostalAddress")
	}

	// ResidentialAddress
	if source.ResidentialAddress != nil {
		propertyBag.Add("ResidentialAddress", *source.ResidentialAddress)
	} else {
		propertyBag.Remove("ResidentialAddress")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		person.PropertyBag = propertyBag
	} else {
		person.PropertyBag = nil
	}

	// Invoke the augmentConversionForPerson_Spec interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson_Spec); ok {
		err := augmentedPerson.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Person_Spec populates the provided destination Person_Spec from our Person_Spec
func (person *Person_Spec) AssignProperties_To_Person_Spec(destination *storage.Person_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)

	// FamilyName
	destination.FamilyName = genruntime.ClonePointerToString(person.FamilyName)

	// FullName
	destination.FullName = genruntime.ClonePointerToString(person.FullName)

	// KnownAs
	destination.KnownAs = genruntime.ClonePointerToString(person.KnownAs)

	// PostalAddress
	if propertyBag.Contains("PostalAddress") {
		var postalAddress storage.Address
		err := propertyBag.Pull("PostalAddress", &postalAddress)
		if err != nil {
			return errors.Wrap(err, "pulling 'PostalAddress' from propertyBag")
		}

		destination.PostalAddress = &postalAddress
	} else {
		destination.PostalAddress = nil
	}

	// ResidentialAddress
	if propertyBag.Contains("ResidentialAddress") {
		var residentialAddress storage.Address
		err := propertyBag.Pull("ResidentialAddress", &residentialAddress)
		if err != nil {
			return errors.Wrap(err, "pulling 'ResidentialAddress' from propertyBag")
		}

		destination.ResidentialAddress = &residentialAddress
	} else {
		destination.ResidentialAddress = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForPerson_Spec interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson_Spec); ok {
		err := augmentedPerson.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v20200101.Person_STATUS
type Person_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Status      *string                `json:"status,omitempty"`
}

// AssignProperties_From_Person_STATUS populates our Person_STATUS from the provided source Person_STATUS
func (person *Person_STATUS) AssignProperties_From_Person_STATUS(source *storage.Person_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Status
	person.Status = genruntime.ClonePointerToString(source.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		person.PropertyBag = propertyBag
	} else {
		person.PropertyBag = nil
	}

	// Invoke the augmentConversionForPerson_STATUS interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson_STATUS); ok {
		err := augmentedPerson.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Person_STATUS populates the provided destination Person_STATUS from our Person_STATUS
func (person *Person_STATUS) AssignProperties_To_Person_STATUS(destination *storage.Person_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)

	// Status
	destination.Status = genruntime.ClonePointerToString(person.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForPerson_STATUS interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson_STATUS); ok {
		err := augmentedPerson.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForPerson_Spec interface {
	AssignPropertiesFrom(src *storage.Person_Spec) error
	AssignPropertiesTo(dst *storage.Person_Spec) error
}

type augmentConversionForPerson_STATUS interface {
	AssignPropertiesFrom(src *storage.Person_STATUS) error
	AssignPropertiesTo(dst *storage.Person_STATUS) error
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
