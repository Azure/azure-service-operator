// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	storage "github.com/Azure/azure-service-operator/testing/person/v20200101/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

type Person_Spec struct {
	// FamilyName: Shared name of the family
	FamilyName string `json:"familyName,omitempty"`

	// FullName: As would be used to address mail
	FullName  string    `json:"fullName,omitempty"`
	Residence Residence `json:"residence,omitempty"`
}

// AssignProperties_From_Person_Spec populates our Person_Spec from the provided source Person_Spec
func (person *Person_Spec) AssignProperties_From_Person_Spec(source *storage.Person_Spec) error {

	// FamilyName
	person.FamilyName = genruntime.GetOptionalStringValue(source.FamilyName)

	// FullName
	person.FullName = genruntime.GetOptionalStringValue(source.FullName)

	// Residence
	if source.Residence != nil {
		var residence Residence
		err := residence.AssignProperties_From_Residence(source.Residence)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Residence() to populate field Residence")
		}
		person.Residence = residence
	} else {
		person.Residence = Residence{}
	}

	// No error
	return nil
}

// AssignProperties_To_Person_Spec populates the provided destination Person_Spec from our Person_Spec
func (person *Person_Spec) AssignProperties_To_Person_Spec(destination *storage.Person_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FamilyName
	familyName := person.FamilyName
	destination.FamilyName = &familyName

	// FullName
	fullName := person.FullName
	destination.FullName = &fullName

	// Residence
	var residence storage.Residence
	err := person.Residence.AssignProperties_To_Residence(&residence)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Residence() to populate field Residence")
	}
	destination.Residence = &residence

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Residence struct {
	// City: City or town (or nearest)
	City string `json:"city,omitempty"`

	// FullAddress: Full written address for map or postal use
	FullAddress string `json:"fullAddress,omitempty"`
}

// AssignProperties_From_Residence populates our Residence from the provided source Residence
func (residence *Residence) AssignProperties_From_Residence(source *storage.Residence) error {

	// City
	residence.City = genruntime.GetOptionalStringValue(source.City)

	// FullAddress
	residence.FullAddress = genruntime.GetOptionalStringValue(source.FullAddress)

	// No error
	return nil
}

// AssignProperties_To_Residence populates the provided destination Residence from our Residence
func (residence *Residence) AssignProperties_To_Residence(destination *storage.Residence) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// City
	city := residence.City
	destination.City = &city

	// FullAddress
	fullAddress := residence.FullAddress
	destination.FullAddress = &fullAddress

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
