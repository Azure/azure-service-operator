// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	v20220630s "github.com/Azure/azure-service-operator/testing/person/v20220630/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Storage version of v20211231.Person_Spec
type Person_Spec struct {
	FamilyName  *string                `json:"familyName,omitempty"`
	FullName    *string                `json:"fullName,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_Person_Spec populates our Person_Spec from the provided source Person_Spec
func (person *Person_Spec) AssignProperties_From_Person_Spec(source *v20220630s.Person_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// FamilyName
	person.FamilyName = genruntime.ClonePointerToString(source.FamilyName)

	// FullName
	person.FullName = genruntime.ClonePointerToString(source.FullName)

	// Residence
	if source.Residence != nil {
		propertyBag.Add("Residence", *source.Residence)
	} else {
		propertyBag.Remove("Residence")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		person.PropertyBag = propertyBag
	} else {
		person.PropertyBag = nil
	}

	// Invoke the augmentConversionForPerson_Spec interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson_Spec); ok {
		err := augmentedPerson.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Person_Spec populates the provided destination Person_Spec from our Person_Spec
func (person *Person_Spec) AssignProperties_To_Person_Spec(destination *v20220630s.Person_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)

	// FamilyName
	destination.FamilyName = genruntime.ClonePointerToString(person.FamilyName)

	// FullName
	destination.FullName = genruntime.ClonePointerToString(person.FullName)

	// Residence
	if propertyBag.Contains("Residence") {
		var residence v20220630s.Residence
		err := propertyBag.Pull("Residence", &residence)
		if err != nil {
			return errors.Wrap(err, "pulling 'Residence' from propertyBag")
		}

		destination.Residence = &residence
	} else {
		destination.Residence = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForPerson_Spec interface (if implemented) to customize the conversion
	var personAsAny any = person
	if augmentedPerson, ok := personAsAny.(augmentConversionForPerson_Spec); ok {
		err := augmentedPerson.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForPerson_Spec interface {
	AssignPropertiesFrom(src *v20220630s.Person_Spec) error
	AssignPropertiesTo(dst *v20220630s.Person_Spec) error
}
