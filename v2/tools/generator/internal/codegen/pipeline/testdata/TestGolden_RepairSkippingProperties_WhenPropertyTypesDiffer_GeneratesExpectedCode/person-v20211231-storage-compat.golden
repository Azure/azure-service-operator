// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	storage "github.com/Azure/azure-service-operator/testing/person/v20220630/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/rotisserie/eris"
)

// Storage version of v20200101.Residence
type Residence struct {
	City        *string                `json:"city,omitempty"`
	FullAddress *string                `json:"fullAddress,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_Residence populates our Residence from the provided source Residence
func (residence *Residence) AssignProperties_From_Residence(source *storage.Residence) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// City
	residence.City = genruntime.ClonePointerToString(source.City)

	// FullAddress
	residence.FullAddress = genruntime.ClonePointerToString(source.FullAddress)

	// Suburb
	if source.Suburb != nil {
		propertyBag.Add("Suburb", *source.Suburb)
	} else {
		propertyBag.Remove("Suburb")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		residence.PropertyBag = propertyBag
	} else {
		residence.PropertyBag = nil
	}

	// Invoke the augmentConversionForResidence interface (if implemented) to customize the conversion
	var residenceAsAny any = residence
	if augmentedResidence, ok := residenceAsAny.(augmentConversionForResidence); ok {
		err := augmentedResidence.AssignPropertiesFrom(source)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Residence populates the provided destination Residence from our Residence
func (residence *Residence) AssignProperties_To_Residence(destination *storage.Residence) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(residence.PropertyBag)

	// City
	destination.City = genruntime.ClonePointerToString(residence.City)

	// FullAddress
	destination.FullAddress = genruntime.ClonePointerToString(residence.FullAddress)

	// Suburb
	if propertyBag.Contains("Suburb") {
		var suburb string
		err := propertyBag.Pull("Suburb", &suburb)
		if err != nil {
			return eris.Wrap(err, "pulling 'Suburb' from propertyBag")
		}

		destination.Suburb = &suburb
	} else {
		destination.Suburb = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForResidence interface (if implemented) to customize the conversion
	var residenceAsAny any = residence
	if augmentedResidence, ok := residenceAsAny.(augmentConversionForResidence); ok {
		err := augmentedResidence.AssignPropertiesTo(destination)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForResidence interface {
	AssignPropertiesFrom(src *storage.Residence) error
	AssignPropertiesTo(dst *storage.Residence) error
}
