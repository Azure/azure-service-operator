// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/testing/person/v20200101/arm"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_STATUS `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

// +kubebuilder:validation:Enum={"v2020"}
type APIVersion string

const APIVersion_v2020 = APIVersion("v2020")

type Person_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName  string            `json:"azureName,omitempty"`
	Properties *PersonProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Person_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (person *Person_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if person == nil {
		return nil, nil
	}
	result := &arm.Person_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if person.Properties != nil {
		properties_ARM, err := (*person.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *properties_ARM.(*arm.PersonProperties)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (person *Person_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Person_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (person *Person_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Person_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Person_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	person.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Properties":
	if typedInput.Properties != nil {
		var properties1 PersonProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		person.Properties = &properties
	}

	// No error
	return nil
}

type Person_STATUS struct {
	// Status: Current status
	Status string `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &Person_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (person *Person_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Person_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (person *Person_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Person_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Person_STATUS, got %T", armInput)
	}

	// Set property "Status":
	person.Status = typedInput.Status

	// No error
	return nil
}

type PersonProperties struct {
	// FamilyName: Shared name of the family
	FamilyName string `json:"familyName,omitempty"`

	// FullName: As would be used to address mail
	FullName genruntime.SecretReference `json:"fullName,omitempty"`

	// KnownAs: How the person is generally known
	KnownAs string `json:"knownAs,omitempty"`

	// SecretData: Secret data
	SecretData *genruntime.SecretMapReference `json:"secretData,omitempty"`

	// SecretSlice: Secret data
	SecretSlice []genruntime.SecretReference `json:"secretSlice,omitempty"`
}

var _ genruntime.ARMTransformer = &PersonProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *PersonProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &arm.PersonProperties{}

	// Set property "FamilyName":
	result.FamilyName = properties.FamilyName

	// Set property "FullName":
	fullNameSecret, err := resolved.ResolvedSecrets.Lookup(properties.FullName)
	if err != nil {
		return nil, eris.Wrap(err, "looking up secret for property FullName")
	}
	result.FullName = fullNameSecret

	// Set property "KnownAs":
	result.KnownAs = properties.KnownAs

	// Set property "SecretData":
	if properties.SecretData != nil {
		var temp map[string]string
		tempSecret, err := resolved.ResolvedSecretMaps.Lookup(*properties.SecretData)
		if err != nil {
			return nil, eris.Wrap(err, "looking up secret for property temp")
		}
		temp = tempSecret
		result.SecretData = temp
	}

	// Set property "SecretSlice":
	for _, item := range properties.SecretSlice {
		itemSecret, err := resolved.ResolvedSecrets.Lookup(item)
		if err != nil {
			return nil, eris.Wrap(err, "looking up secret for property item")
		}
		result.SecretSlice = append(result.SecretSlice, itemSecret)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *PersonProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.PersonProperties{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *PersonProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.PersonProperties)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.PersonProperties, got %T", armInput)
	}

	// Set property "FamilyName":
	properties.FamilyName = typedInput.FamilyName

	// no assignment for property "FullName"

	// Set property "KnownAs":
	properties.KnownAs = typedInput.KnownAs

	// no assignment for property "SecretData"

	// no assignment for property "SecretSlice"

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
