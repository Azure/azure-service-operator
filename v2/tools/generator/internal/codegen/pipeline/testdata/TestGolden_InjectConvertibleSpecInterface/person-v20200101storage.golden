// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101storage

import (
	v20211231s "github.com/Azure/azure-service-operator/testing/person/v20211231storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// Storage version of v20200101.Person
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_STATUS `json:"status,omitempty"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *Person) AssignPropertiesFromPerson(source *v20211231s.Person) error {

	// ObjectMeta
	person.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Person_Spec
	err := spec.AssignPropertiesFromPersonSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromPersonSpec() to populate field Spec")
	}
	person.Spec = spec

	// Status
	var status Person_STATUS
	err = status.AssignPropertiesFromPersonSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromPersonSTATUS() to populate field Status")
	}
	person.Status = status

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *Person) AssignPropertiesToPerson(destination *v20211231s.Person) error {

	// ObjectMeta
	destination.ObjectMeta = *person.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211231s.Person_Spec
	err := person.Spec.AssignPropertiesToPersonSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToPersonSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211231s.Person_STATUS
	err = person.Status.AssignPropertiesToPersonSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToPersonSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// +kubebuilder:object:root=true
// Storage version of v20200101.Person
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

// Storage version of v20200101.Person_Spec
type Person_Spec struct {
	FullName    *string                `json:"fullName,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Person_Spec{}

// ConvertSpecFrom populates our Person_Spec from the provided source
func (person *Person_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211231s.Person_Spec)
	if ok {
		// Populate our instance from source
		return person.AssignPropertiesFromPersonSpec(src)
	}

	// Convert to an intermediate form
	src = &v20211231s.Person_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = person.AssignPropertiesFromPersonSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Person_Spec
func (person *Person_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211231s.Person_Spec)
	if ok {
		// Populate destination from our instance
		return person.AssignPropertiesToPersonSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211231s.Person_Spec{}
	err := person.AssignPropertiesToPersonSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromPersonSpec populates our Person_Spec from the provided source Person_Spec
func (person *Person_Spec) AssignPropertiesFromPersonSpec(source *v20211231s.Person_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// FullName
	person.FullName = genruntime.ClonePointerToString(source.FullName)

	// Update the property bag
	if len(propertyBag) > 0 {
		person.PropertyBag = propertyBag
	} else {
		person.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPersonSpec populates the provided destination Person_Spec from our Person_Spec
func (person *Person_Spec) AssignPropertiesToPersonSpec(destination *v20211231s.Person_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)

	// FullName
	destination.FullName = genruntime.ClonePointerToString(person.FullName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v20200101.Person_STATUS
type Person_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Status      *string                `json:"status,omitempty"`
}

// AssignPropertiesFromPersonSTATUS populates our Person_STATUS from the provided source Person_STATUS
func (person *Person_STATUS) AssignPropertiesFromPersonSTATUS(source *v20211231s.Person_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Status
	person.Status = genruntime.ClonePointerToString(source.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		person.PropertyBag = propertyBag
	} else {
		person.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPersonSTATUS populates the provided destination Person_STATUS from our Person_STATUS
func (person *Person_STATUS) AssignPropertiesToPersonSTATUS(destination *v20211231s.Person_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)

	// Status
	destination.Status = genruntime.ClonePointerToString(person.Status)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
