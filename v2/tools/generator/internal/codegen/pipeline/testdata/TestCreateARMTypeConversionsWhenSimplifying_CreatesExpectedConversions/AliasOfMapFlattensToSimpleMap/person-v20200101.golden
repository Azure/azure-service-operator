// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
)

type Person struct {
	// Codes: Expect alias of map on CRD type to become map on ARM type
	Codes Codes `json:"codes,omitempty"`

	// FullName: As would be used to address mail
	FullName string `json:"fullName,omitempty"`
}

var _ genruntime.ARMTransformer = &Person{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (person *Person) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if person == nil {
		return nil, nil
	}
	result := &Person_ARM{}

	// Set property "Codes":
	if person.Codes != nil {
		codesTemp := make(map[string]string, len(person.Codes))
		for key, value := range person.Codes {
			codesTemp[key] = value
		}
		result.Codes = codesTemp
	}

	// Set property "FullName":
	result.FullName = person.FullName
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (person *Person) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Person_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (person *Person) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Person_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Person_ARM, got %T", armInput)
	}

	// Set property "Codes":
	if typedInput.Codes != nil {
		codesTemp := make(map[string]string, len(typedInput.Codes))
		for key, value := range typedInput.Codes {
			codesTemp[key] = value
		}
		person.Codes = Codes(codesTemp)
	}

	// Set property "FullName":
	person.FullName = typedInput.FullName

	// No error
	return nil
}

type Person_ARM struct {
	// Codes: Expect alias of map on CRD type to become map on ARM type
	Codes map[string]string `json:"codes,omitempty"`

	// FullName: As would be used to address mail
	FullName string `json:"fullName,omitempty"`
}

type Codes map[string]string
