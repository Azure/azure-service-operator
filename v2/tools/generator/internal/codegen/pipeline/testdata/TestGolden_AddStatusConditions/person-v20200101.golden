 // Code generated by azure-service-operator-codegen. DO NOT EDIT.
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT license.
 package v20200101
 
-import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+import (
+	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+)
 
 // +kubebuilder:object:root=true
 // +kubebuilder:subresource:status
+// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
+// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
+// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
+// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
 type Person struct {
 	metav1.TypeMeta   `json:",inline"`
 	metav1.ObjectMeta `json:"metadata,omitempty"`
 	Spec              Person_Spec   `json:"spec,omitempty"`
 	Status            Person_STATUS `json:"status,omitempty"`
 }
 
+var _ conditions.Conditioner = &Person{}
+
+// GetConditions returns the conditions of the resource
+func (person *Person) GetConditions() conditions.Conditions {
+	return person.Status.Conditions
+}
+
+// SetConditions sets the conditions on the resource status
+func (person *Person) SetConditions(conditions conditions.Conditions) {
+	person.Status.Conditions = conditions
+}
+
 // +kubebuilder:object:root=true
 type PersonList struct {
 	metav1.TypeMeta `json:",inline"`
 	metav1.ListMeta `json:"metadata,omitempty"`
 	Items           []Person `json:"items"`
 }
 
 type Person_Spec struct {
 	// FullName: As would be used to address mail
 	FullName string `json:"fullName,omitempty"`
 }
 
 type Person_STATUS struct {
+	// Conditions: The observed state of the resource
+	Conditions []conditions.Condition `json:"conditions,omitempty"`
+
 	// Status: Current status
 	Status string `json:"status,omitempty"`
 }
 
 func init() {
 	SchemeBuilder.Register(&Person{}, &PersonList{})
 }
 
