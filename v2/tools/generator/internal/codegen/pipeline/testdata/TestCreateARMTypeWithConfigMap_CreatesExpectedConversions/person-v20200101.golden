// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_STATUS `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

type Person_Spec_ARM struct {
	// Name: The name of the resource
	Name       string                `json:"name,omitempty"`
	Properties *PersonProperties_ARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Person_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "v2020"
func (person Person_Spec_ARM) GetAPIVersion() string {
	return "v2020"
}

// GetName returns the Name of the resource
func (person *Person_Spec_ARM) GetName() string {
	return person.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (person *Person_Spec_ARM) GetType() string {
	return ""
}

type Person_STATUS_ARM struct {
	// Status: Current status
	Status string `json:"status,omitempty"`
}

// +kubebuilder:validation:Enum={"v2020"}
type APIVersion string

const APIVersion_v2020 = APIVersion("v2020")

type Person_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName  string            `json:"azureName,omitempty"`
	Properties *PersonProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Person_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (person *Person_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if person == nil {
		return nil, nil
	}
	result := &Person_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if person.Properties != nil {
		properties_ARM, err := (*person.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *properties_ARM.(*PersonProperties_ARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (person *Person_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Person_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (person *Person_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Person_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Person_Spec_ARM, got %T", armInput)
	}

	// Set property "AzureName":
	person.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Properties":
	if typedInput.Properties != nil {
		var properties1 PersonProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		person.Properties = &properties
	}

	// No error
	return nil
}

type Person_STATUS struct {
	// Status: Current status
	Status string `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &Person_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (person *Person_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Person_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (person *Person_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Person_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Person_STATUS_ARM, got %T", armInput)
	}

	// Set property "Status":
	person.Status = typedInput.Status

	// No error
	return nil
}

type PersonProperties_ARM struct {
	// FamilyName: Shared name of the family
	FamilyName *string `json:"familyName,omitempty" optionalConfigMapPair:"FamilyName"`

	// FullName: As would be used to address mail
	FullName string `json:"fullName,omitempty"`

	// KnownAs: How the person is generally known
	KnownAs string `json:"knownAs,omitempty"`

	// RestrictedName: The name of the resource, restricted to max 25 character length
	RestrictedName *string `json:"restrictedName,omitempty" optionalConfigMapPair:"RestrictedName"`
}

type PersonProperties struct {
	// FamilyName: Shared name of the family
	FamilyName *string `json:"familyName,omitempty" optionalConfigMapPair:"FamilyName"`

	// FamilyNameFromConfig: Shared name of the family
	FamilyNameFromConfig *genruntime.ConfigMapReference `json:"familyNameFromConfig,omitempty" optionalConfigMapPair:"FamilyName"`

	// FullName: As would be used to address mail
	FullName genruntime.ConfigMapReference `json:"fullName,omitempty"`

	// KnownAs: How the person is generally known
	KnownAs string `json:"knownAs,omitempty"`

	// +kubebuilder:validation:MaxLength=25
	// RestrictedName: The name of the resource, restricted to max 25 character length
	RestrictedName *string `json:"restrictedName,omitempty" optionalConfigMapPair:"RestrictedName"`

	// RestrictedNameFromConfig: The name of the resource, restricted to max 25 character length
	RestrictedNameFromConfig *genruntime.ConfigMapReference `json:"restrictedNameFromConfig,omitempty" optionalConfigMapPair:"RestrictedName"`
}

var _ genruntime.ARMTransformer = &PersonProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *PersonProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &PersonProperties_ARM{}

	// Set property "FamilyName":
	if properties.FamilyName != nil {
		familyName := *properties.FamilyName
		result.FamilyName = &familyName
	}
	if properties.FamilyNameFromConfig != nil {
		familyNameValue, err := resolved.ResolvedConfigMaps.Lookup(*properties.FamilyNameFromConfig)
		if err != nil {
			return nil, errors.Wrap(err, "looking up configmap for property FamilyName")
		}
		familyName := familyNameValue
		result.FamilyName = &familyName
	}

	// Set property "FullName":
	fullNameValue, err := resolved.ResolvedConfigMaps.Lookup(properties.FullName)
	if err != nil {
		return nil, errors.Wrap(err, "looking up configmap for property FullName")
	}
	result.FullName = fullNameValue

	// Set property "KnownAs":
	result.KnownAs = properties.KnownAs

	// Set property "RestrictedName":
	if properties.RestrictedName != nil {
		restrictedName := *properties.RestrictedName
		result.RestrictedName = &restrictedName
	}
	if properties.RestrictedNameFromConfig != nil {
		restrictedNameValue, err := resolved.ResolvedConfigMaps.Lookup(*properties.RestrictedNameFromConfig)
		if err != nil {
			return nil, errors.Wrap(err, "looking up configmap for property RestrictedName")
		}
		restrictedName := restrictedNameValue
		result.RestrictedName = &restrictedName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *PersonProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PersonProperties_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *PersonProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PersonProperties_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PersonProperties_ARM, got %T", armInput)
	}

	// Set property "FamilyName":
	if typedInput.FamilyName != nil {
		familyName := *typedInput.FamilyName
		properties.FamilyName = &familyName
	}

	// no assignment for property "FamilyNameFromConfig"

	// no assignment for property "FullName"

	// Set property "KnownAs":
	properties.KnownAs = typedInput.KnownAs

	// Set property "RestrictedName":
	if typedInput.RestrictedName != nil {
		restrictedName := *typedInput.RestrictedName
		properties.RestrictedName = &restrictedName
	}

	// no assignment for property "RestrictedNameFromConfig"

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
