 // Code generated by azure-service-operator-codegen. DO NOT EDIT.
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT license.
 package v20200101storage
 
 import (
+	"fmt"
 	"github.com/Azure/azure-service-operator/testing/person/v20211231storage"
 	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
 	"github.com/pkg/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"sigs.k8s.io/controller-runtime/pkg/conversion"
 )
 
 // +kubebuilder:object:root=true
 // +kubebuilder:subresource:status
 //Storage version of v20200101.Person
 type Person struct {
 	metav1.TypeMeta   `json:",inline"`
 	metav1.ObjectMeta `json:"metadata,omitempty"`
 	Spec              Person_Spec   `json:"spec,omitempty"`
 	Status            Person_Status `json:"status,omitempty"`
 }
 
+var _ conversion.Convertible = &Person{}
+
+// ConvertFrom populates our Person from the provided hub Person
+func (person *Person) ConvertFrom(hub conversion.Hub) error {
+	source, ok := hub.(*v20211231storage.Person)
+	if !ok {
+		return fmt.Errorf("expected person/v20211231storage/Person but received %T instead", hub)
+	}
+
+	return person.AssignPropertiesFromPerson(source)
+}
+
+// ConvertTo populates the provided hub Person from our Person
+func (person *Person) ConvertTo(hub conversion.Hub) error {
+	destination, ok := hub.(*v20211231storage.Person)
+	if !ok {
+		return fmt.Errorf("expected person/v20211231storage/Person but received %T instead", hub)
+	}
+
+	return person.AssignPropertiesToPerson(destination)
+}
+
 // AssignPropertiesFromPerson populates our Person from the provided source Person
 func (person *Person) AssignPropertiesFromPerson(source *v20211231storage.Person) error {
 
 	// ObjectMeta
 	person.ObjectMeta = *source.ObjectMeta.DeepCopy()
 
 	// Spec
 	var spec Person_Spec
 	err := spec.AssignPropertiesFromPersonSpec(&source.Spec)
 	if err != nil {
 		return errors.Wrap(err, "calling AssignPropertiesFromPersonSpec() to populate field Spec")
 	}
 	person.Spec = spec
 
 	// Status
 	var status Person_Status
 	err = status.AssignPropertiesFromPersonStatus(&source.Status)
 	if err != nil {
 		return errors.Wrap(err, "calling AssignPropertiesFromPersonStatus() to populate field Status")
 	}
 	person.Status = status
 
 	// No error
 	return nil
 }
 
 // AssignPropertiesToPerson populates the provided destination Person from our Person
 func (person *Person) AssignPropertiesToPerson(destination *v20211231storage.Person) error {
 
 	// ObjectMeta
 	destination.ObjectMeta = *person.ObjectMeta.DeepCopy()
 
 	// Spec
 	var spec v20211231storage.Person_Spec
 	err := person.Spec.AssignPropertiesToPersonSpec(&spec)
 	if err != nil {
 		return errors.Wrap(err, "calling AssignPropertiesToPersonSpec() to populate field Spec")
 	}
 	destination.Spec = spec
 
 	// Status
 	var status v20211231storage.Person_Status
 	err = person.Status.AssignPropertiesToPersonStatus(&status)
 	if err != nil {
 		return errors.Wrap(err, "calling AssignPropertiesToPersonStatus() to populate field Status")
 	}
 	destination.Status = status
 
 	// No error
 	return nil
 }
 
 // +kubebuilder:object:root=true
 //Storage version of v20200101.Person
 type PersonList struct {
 	metav1.TypeMeta `json:",inline"`
 	metav1.ListMeta `json:"metadata,omitempty"`
 	Items           []Person `json:"items"`
 }
 
 //Storage version of v20200101.Person_Spec
 type Person_Spec struct {
 	FullName    *string                `json:"fullName,omitempty"`
 	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
 }
 
 // AssignPropertiesFromPersonSpec populates our Person_Spec from the provided source Person_Spec
 func (person *Person_Spec) AssignPropertiesFromPersonSpec(source *v20211231storage.Person_Spec) error {
 	// Clone the existing property bag
 	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)
 
 	// FullName
 	person.FullName = genruntime.ClonePointerToString(source.FullName)
 
 	// Update the property bag
 	if len(propertyBag) > 0 {
 		person.PropertyBag = propertyBag
 	} else {
 		person.PropertyBag = nil
 	}
 
 	// No error
 	return nil
 }
 
 // AssignPropertiesToPersonSpec populates the provided destination Person_Spec from our Person_Spec
 func (person *Person_Spec) AssignPropertiesToPersonSpec(destination *v20211231storage.Person_Spec) error {
 	// Clone the existing property bag
 	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)
 
 	// FullName
 	destination.FullName = genruntime.ClonePointerToString(person.FullName)
 
 	// Update the property bag
 	if len(propertyBag) > 0 {
 		destination.PropertyBag = propertyBag
 	} else {
 		destination.PropertyBag = nil
 	}
 
 	// No error
 	return nil
 }
 
 //Storage version of v20200101.Person_Status
 type Person_Status struct {
 	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
 	Status      *string                `json:"status,omitempty"`
 }
 
 // AssignPropertiesFromPersonStatus populates our Person_Status from the provided source Person_Status
 func (person *Person_Status) AssignPropertiesFromPersonStatus(source *v20211231storage.Person_Status) error {
 	// Clone the existing property bag
 	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)
 
 	// Status
 	person.Status = genruntime.ClonePointerToString(source.Status)
 
 	// Update the property bag
 	if len(propertyBag) > 0 {
 		person.PropertyBag = propertyBag
 	} else {
 		person.PropertyBag = nil
 	}
 
 	// No error
 	return nil
 }
 
 // AssignPropertiesToPersonStatus populates the provided destination Person_Status from our Person_Status
 func (person *Person_Status) AssignPropertiesToPersonStatus(destination *v20211231storage.Person_Status) error {
 	// Clone the existing property bag
 	propertyBag := genruntime.NewPropertyBag(person.PropertyBag)
 
 	// Status
 	destination.Status = genruntime.ClonePointerToString(person.Status)
 
 	// Update the property bag
 	if len(propertyBag) > 0 {
 		destination.PropertyBag = propertyBag
 	} else {
 		destination.PropertyBag = nil
 	}
 
 	// No error
 	return nil
 }
 
 func init() {
 	SchemeBuilder.Register(&Person{}, &PersonList{})
 }
 
