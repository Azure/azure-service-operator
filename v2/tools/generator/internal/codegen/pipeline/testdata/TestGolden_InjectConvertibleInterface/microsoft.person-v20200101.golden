 // Code generated by azure-service-operator-codegen. DO NOT EDIT.
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT license.
 package v20200101
 
 import (
 	"github.com/Azure/azure-service-operator/testing/microsoft.person/v20200101storage"
 	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
 	"github.com/pkg/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"sigs.k8s.io/controller-runtime/pkg/conversion"
 )
 
 // +kubebuilder:object:root=true
 // +kubebuilder:subresource:status
 type Person struct {
 	metav1.TypeMeta   `json:",inline"`
 	metav1.ObjectMeta `json:"metadata,omitempty"`
 	Spec              Person_Spec   `json:"spec,omitempty"`
 	Status            Person_Status `json:"status,omitempty"`
 }
 
+var _ conversion.Convertible = &Person{}
+
+// ConvertFrom populates our Person from the provided hub Person
+func (person *Person) ConvertFrom(hub conversion.Hub) error {
+	// intermediate variable for conversion
+	var source v20200101storage.Person
+
+	err := source.ConvertFrom(hub)
+	if err != nil {
+		return errors.Wrap(err, "converting from hub to source")
+	}
+
+	err = person.AssignPropertiesFromPerson(&source)
+	if err != nil {
+		return errors.Wrap(err, "converting from source to person")
+	}
+
+	return nil
+}
+
+// ConvertTo populates the provided hub Person from our Person
+func (person *Person) ConvertTo(hub conversion.Hub) error {
+	// intermediate variable for conversion
+	var destination v20200101storage.Person
+	err := person.AssignPropertiesToPerson(&destination)
+	if err != nil {
+		return errors.Wrap(err, "converting to destination from person")
+	}
+	err = destination.ConvertTo(hub)
+	if err != nil {
+		return errors.Wrap(err, "converting from destination to hub")
+	}
+
+	return nil
+}
+
 // AssignPropertiesFromPerson populates our Person from the provided source Person
 func (person *Person) AssignPropertiesFromPerson(source *v20200101storage.Person) error {
 
 	// Spec
 	var spec Person_Spec
 	err := spec.AssignPropertiesFromPersonSpec(&source.Spec)
 	if err != nil {
 		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromPersonSpec()")
 	}
 	person.Spec = spec
 
 	// Status
 	var status Person_Status
 	err = status.AssignPropertiesFromPersonStatus(&source.Status)
 	if err != nil {
 		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromPersonStatus()")
 	}
 	person.Status = status
 
 	// No error
 	return nil
 }
 
 // AssignPropertiesToPerson populates the provided destination Person from our Person
 func (person *Person) AssignPropertiesToPerson(destination *v20200101storage.Person) error {
 
 	// Spec
 	var spec v20200101storage.Person_Spec
 	err := person.Spec.AssignPropertiesToPersonSpec(&spec)
 	if err != nil {
 		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToPersonSpec()")
 	}
 	destination.Spec = spec
 
 	// Status
 	var status v20200101storage.Person_Status
 	err = person.Status.AssignPropertiesToPersonStatus(&status)
 	if err != nil {
 		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToPersonStatus()")
 	}
 	destination.Status = status
 
 	// No error
 	return nil
 }
 
 // +kubebuilder:object:root=true
 type PersonList struct {
 	metav1.TypeMeta `json:",inline"`
 	metav1.ListMeta `json:"metadata,omitempty"`
 	Items           []Person `json:"items"`
 }
 
 type Person_Spec struct {
 	//FullName: As would be used to address mail
 	FullName string `json:"fullName"`
 }
 
 // AssignPropertiesFromPersonSpec populates our Person_Spec from the provided source Person_Spec
 func (personSpec *Person_Spec) AssignPropertiesFromPersonSpec(source *v20200101storage.Person_Spec) error {
 
 	// FullName
 	if source.FullName != nil {
 		personSpec.FullName = *source.FullName
 	} else {
 		personSpec.FullName = ""
 	}
 
 	// No error
 	return nil
 }
 
 // AssignPropertiesToPersonSpec populates the provided destination Person_Spec from our Person_Spec
 func (personSpec *Person_Spec) AssignPropertiesToPersonSpec(destination *v20200101storage.Person_Spec) error {
 	// Create a new property bag
 	propertyBag := genruntime.NewPropertyBag()
 
 	// FullName
 	fullName := personSpec.FullName
 	destination.FullName = &fullName
 
 	// Update the property bag
 	if len(propertyBag) > 0 {
 		destination.PropertyBag = propertyBag
 	} else {
 		destination.PropertyBag = nil
 	}
 
 	// No error
 	return nil
 }
 
 type Person_Status struct {
 	Status string `json:"status"`
 }
 
 // AssignPropertiesFromPersonStatus populates our Person_Status from the provided source Person_Status
 func (personStatus *Person_Status) AssignPropertiesFromPersonStatus(source *v20200101storage.Person_Status) error {
 
 	// Status
 	if source.Status != nil {
 		personStatus.Status = *source.Status
 	} else {
 		personStatus.Status = ""
 	}
 
 	// No error
 	return nil
 }
 
 // AssignPropertiesToPersonStatus populates the provided destination Person_Status from our Person_Status
 func (personStatus *Person_Status) AssignPropertiesToPersonStatus(destination *v20200101storage.Person_Status) error {
 	// Create a new property bag
 	propertyBag := genruntime.NewPropertyBag()
 
 	// Status
 	status := personStatus.Status
 	destination.Status = &status
 
 	// Update the property bag
 	if len(propertyBag) > 0 {
 		destination.PropertyBag = propertyBag
 	} else {
 		destination.PropertyBag = nil
 	}
 
 	// No error
 	return nil
 }
 
 func init() {
 	SchemeBuilder.Register(&Person{}, &PersonList{})
 }
 
