// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (fakeResource *FakeResource) GetConditions() conditions.Conditions {
	return fakeResource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (fakeResource *FakeResource) SetConditions(conditions conditions.Conditions) {
	fakeResource.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (fakeResource *FakeResource) Default() {
	fakeResource.defaultImpl()
	var temp interface{} = fakeResource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) defaultAzureName() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (fakeResource *FakeResource) defaultImpl() { fakeResource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (fakeResource *FakeResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (fakeResource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &fakeResource.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (fakeResource *FakeResource) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: fakeResource.Namespace,
		Name:      fakeResource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (fakeResource *FakeResource) ValidateCreate() error {
	validations := fakeResource.createValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (fakeResource *FakeResource) ValidateDelete() error {
	validations := fakeResource.deleteValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (fakeResource *FakeResource) ValidateUpdate(old runtime.Object) error {
	validations := fakeResource.updateValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (fakeResource *FakeResource) createValidations() []func() error {
	return []func() error{fakeResource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (fakeResource *FakeResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (fakeResource *FakeResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return fakeResource.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (fakeResource *FakeResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&fakeResource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (fakeResource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: fakeResource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	APIVersion FakeResourceSpecAPIVersion `json:"apiVersion"`
	Name       string                     `json:"name"`
	Properties *FakeResourcePropertiesARM `json:"properties,omitempty"`
	Type       FakeResourceSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetAPIVersion() string {
	return string(fakeResourceSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetName() string {
	return fakeResourceSpecARM.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetType() string {
	return string(fakeResourceSpecARM.Type)
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourcePropertiesARM struct {
	Id       *string `json:"id,omitempty"`
	SubnetId *string `json:"subnetId,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecAPIVersion string

const FakeResourceSpecAPIVersion20200601 = FakeResourceSpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *FakeResourceProperties           `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = FakeResourceSpecAPIVersion20200601

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if fakeResourceSpec.Properties != nil {
		propertiesARM, err := (*fakeResourceSpec.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(FakeResourcePropertiesARM)
		result.Properties = &properties
	}

	// Set property ‘Type’:
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	fakeResourceSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 FakeResourceProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		fakeResourceSpec.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_Spec{}

// ConvertSpecFrom populates our FakeResource_Spec from the provided source
func (fakeResourceSpec *FakeResource_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == fakeResourceSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(fakeResourceSpec)
}

// ConvertSpecTo populates the provided destination from our FakeResource_Spec
func (fakeResourceSpec *FakeResource_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == fakeResourceSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(fakeResourceSpec)
}

// OriginalVersion returns the original API version used to create the resource.
func (fakeResourceSpec *FakeResource_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties struct {
	//Reference: A string of the form
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//SubnetReference: A string of the form
	///SUBSCRIPTIONS/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
	SubnetReference *genruntime.ResourceReference `armReference:"SubnetId" json:"subnetReference,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResourceProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceProperties *FakeResourceProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if fakeResourceProperties == nil {
		return nil, nil
	}
	var result FakeResourcePropertiesARM

	// Set property ‘Id’:
	if fakeResourceProperties.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*fakeResourceProperties.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘SubnetId’:
	if fakeResourceProperties.SubnetReference != nil {
		subnetReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*fakeResourceProperties.SubnetReference)
		if err != nil {
			return nil, err
		}
		subnetReference := subnetReferenceARMID
		result.SubnetId = &subnetReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceProperties *FakeResourceProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResourcePropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceProperties *FakeResourceProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(FakeResourcePropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResourcePropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// no assignment for property ‘SubnetReference’

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
