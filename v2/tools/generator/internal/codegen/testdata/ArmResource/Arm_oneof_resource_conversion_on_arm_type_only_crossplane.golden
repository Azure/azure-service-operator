// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	"github.com/crossplane/crossplane-runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-06-01")

type FakeResource_Spec struct {
	v1alpha1.ResourceSpec `json:",inline,omitempty"`
	ForProvider           FakeResourceParameters `json:"forProvider,omitempty"`
}

type FakeResourceParameters struct {
	// +kubebuilder:validation:Required
	Name                      string              `json:"name,omitempty"`
	Properties                *Properties         `json:"properties,omitempty"`
	ResourceGroupName         string              `json:"resourceGroupName,omitempty"`
	ResourceGroupNameRef      *v1alpha1.Reference `json:"resourceGroupNameRef,omitempty"`
	ResourceGroupNameSelector *v1alpha1.Selector  `json:"resourceGroupNameSelector,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type Properties struct {
	// Bar: Mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	// Baz: Mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	// Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {
	// +kubebuilder:validation:Required
	Discrim *Bar_Discrim `json:"discrim,omitempty"`

	// +kubebuilder:validation:Required
	Size *int `json:"size,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type Baz struct {
	// +kubebuilder:validation:Required
	Discrim *Baz_Discrim `json:"discrim,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	// +kubebuilder:validation:Required
	Discrim *Foo_Discrim `json:"discrim,omitempty"`
	Name    *string      `json:"name,omitempty"`
}

// +kubebuilder:validation:Enum={"bar"}
type Bar_Discrim string

const Bar_Discrim_Bar = Bar_Discrim("bar")

// +kubebuilder:validation:Enum={"baz"}
type Baz_Discrim string

const Baz_Discrim_Baz = Baz_Discrim("baz")

// +kubebuilder:validation:Enum={"foo"}
type Foo_Discrim string

const Foo_Discrim_Foo = Foo_Discrim("foo")

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
