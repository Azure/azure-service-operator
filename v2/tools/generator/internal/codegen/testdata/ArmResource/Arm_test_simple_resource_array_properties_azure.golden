// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200101

import (
	"fmt"
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1api20200101/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (resource *FakeResource) GetConditions() conditions.Conditions {
	return resource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (resource *FakeResource) SetConditions(conditions conditions.Conditions) {
	resource.Status.Conditions = conditions
}

var _ conversion.Convertible = &FakeResource{}

// ConvertFrom populates our FakeResource from the provided hub FakeResource
func (resource *FakeResource) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200101s.FakeResource)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/FakeResource but received %T instead", hub)
	}

	return resource.AssignProperties_From_FakeResource(source)
}

// ConvertTo populates the provided hub FakeResource from our FakeResource
func (resource *FakeResource) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200101s.FakeResource)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/FakeResource but received %T instead", hub)
	}

	return resource.AssignProperties_To_FakeResource(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (resource *FakeResource) Default() {
	resource.defaultImpl()
	var temp any = resource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (resource *FakeResource) defaultAzureName() {
	if resource.Spec.AzureName == "" {
		resource.Spec.AzureName = resource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (resource *FakeResource) defaultImpl() { resource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (resource *FakeResource) AzureName() string {
	return resource.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (resource FakeResource) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (resource *FakeResource) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (resource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &resource.Spec
}

// GetSupportedOperations returns the operations supported by the resource
func (resource *FakeResource) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always ""
func (resource *FakeResource) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner
func (resource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(resource.Spec)
	return resource.Spec.Owner.AsResourceReference(group, kind)
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (resource *FakeResource) ValidateCreate() (admission.Warnings, error) {
	validations := resource.createValidations()
	var temp any = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (resource *FakeResource) ValidateDelete() (admission.Warnings, error) {
	validations := resource.deleteValidations()
	var temp any = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (resource *FakeResource) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := resource.updateValidations()
	var temp any = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (resource *FakeResource) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){resource.validateResourceReferences, resource.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (resource *FakeResource) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (resource *FakeResource) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return resource.validateResourceReferences()
		},
		resource.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return resource.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (resource *FakeResource) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(resource)
}

// validateResourceReferences validates all resource references
func (resource *FakeResource) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&resource.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (resource *FakeResource) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*FakeResource)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, resource)
}

// AssignProperties_From_FakeResource populates our FakeResource from the provided source FakeResource
func (resource *FakeResource) AssignProperties_From_FakeResource(source *v20200101s.FakeResource) error {

	// ObjectMeta
	resource.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FakeResource_Spec
	err := spec.AssignProperties_From_FakeResource_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_FakeResource_Spec() to populate field Spec")
	}
	resource.Spec = spec

	// No error
	return nil
}

// AssignProperties_To_FakeResource populates the provided destination FakeResource from our FakeResource
func (resource *FakeResource) AssignProperties_To_FakeResource(destination *v20200101s.FakeResource) error {

	// ObjectMeta
	destination.ObjectMeta = *resource.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200101s.FakeResource_Spec
	err := resource.Spec.AssignProperties_To_FakeResource_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_FakeResource_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (resource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: resource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_Spec_ARM struct {
	APIVersion            FakeResource_APIVersion_Spec `json:"apiVersion,omitempty"`
	ArrayFoo              []Foo_ARM                    `json:"arrayFoo,omitempty"`
	ArrayOfArrays         [][]Foo_ARM                  `json:"arrayOfArrays,omitempty"`
	ArrayOfArraysOfArrays [][][]Foo_ARM                `json:"arrayOfArraysOfArrays,omitempty"`
	ArrayOfEnums          []Color                      `json:"arrayOfEnums,omitempty"`
	ArrayOfMaps           []map[string]Foo_ARM         `json:"arrayOfMaps,omitempty"`
	Name                  string                       `json:"name,omitempty"`
	Type                  FakeResource_Type_Spec       `json:"type,omitempty"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (resource FakeResource_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (resource *FakeResource_Spec_ARM) GetName() string {
	return resource.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (resource *FakeResource_Spec_ARM) GetType() string {
	return ""
}

// +kubebuilder:validation:Enum={"2020-01-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-01-01")

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	Color_Blue  = Color("blue")
	Color_Green = Color("green")
	Color_Red   = Color("red")
)

// Mapping from string to Color
var color_Values = map[string]Color{
	"blue":  Color_Blue,
	"green": Color_Green,
	"red":   Color_Red,
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResource_APIVersion_Spec string

const FakeResource_APIVersion_Spec_20200601 = FakeResource_APIVersion_Spec("2020-06-01")

// Mapping from string to FakeResource_APIVersion_Spec
var fakeResource_APIVersion_Spec_Values = map[string]FakeResource_APIVersion_Spec{
	"2020-06-01": FakeResource_APIVersion_Spec_20200601,
}

type FakeResource_Spec struct {
	// +kubebuilder:validation:Required
	APIVersion FakeResource_APIVersion_Spec `json:"apiVersion,omitempty"`

	// +kubebuilder:validation:Required
	ArrayFoo              []Foo            `json:"arrayFoo,omitempty"`
	ArrayOfArrays         [][]Foo          `json:"arrayOfArrays,omitempty"`
	ArrayOfArraysOfArrays [][][]Foo        `json:"arrayOfArraysOfArrays,omitempty"`
	ArrayOfEnums          []Color          `json:"arrayOfEnums,omitempty"`
	ArrayOfMaps           []map[string]Foo `json:"arrayOfMaps,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type FakeResource_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &FakeResource_Spec_ARM{}

	// Set property "APIVersion":
	result.APIVersion = resource.APIVersion

	// Set property "ArrayFoo":
	for _, item := range resource.ArrayFoo {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ArrayFoo = append(result.ArrayFoo, *item_ARM.(*Foo_ARM))
	}

	// Set property "ArrayOfArrays":
	for _, item := range resource.ArrayOfArrays {
		var itemTemp []Foo_ARM
		for _, item1 := range item {
			item1_ARM, err := item1.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			itemTemp = append(itemTemp, *item1_ARM.(*Foo_ARM))
		}
		result.ArrayOfArrays = append(result.ArrayOfArrays, itemTemp)
	}

	// Set property "ArrayOfArraysOfArrays":
	for _, item := range resource.ArrayOfArraysOfArrays {
		var itemTemp [][]Foo_ARM
		for _, item1 := range item {
			var item1Temp []Foo_ARM
			for _, item2 := range item1 {
				item2_ARM, err := item2.ConvertToARM(resolved)
				if err != nil {
					return nil, err
				}
				item1Temp = append(item1Temp, *item2_ARM.(*Foo_ARM))
			}
			itemTemp = append(itemTemp, item1Temp)
		}
		result.ArrayOfArraysOfArrays = append(result.ArrayOfArraysOfArrays, itemTemp)
	}

	// Set property "ArrayOfEnums":
	for _, item := range resource.ArrayOfEnums {
		result.ArrayOfEnums = append(result.ArrayOfEnums, item)
	}

	// Set property "ArrayOfMaps":
	for _, item := range resource.ArrayOfMaps {
		if item != nil {
			itemTemp := make(map[string]Foo_ARM, len(item))
			for key, value := range item {
				value_ARM, err := value.ConvertToARM(resolved)
				if err != nil {
					return nil, err
				}
				itemTemp[key] = *value_ARM.(*Foo_ARM)
			}
			result.ArrayOfMaps = append(result.ArrayOfMaps, itemTemp)
		}
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Type":
	result.Type = resource.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *FakeResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_Spec_ARM, got %T", armInput)
	}

	// Set property "APIVersion":
	resource.APIVersion = typedInput.APIVersion

	// Set property "ArrayFoo":
	for _, item := range typedInput.ArrayFoo {
		var item1 Foo
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resource.ArrayFoo = append(resource.ArrayFoo, item1)
	}

	// Set property "ArrayOfArrays":
	for _, item := range typedInput.ArrayOfArrays {
		var itemTemp []Foo
		for _, item1 := range item {
			var item2 Foo
			err := item2.PopulateFromARM(owner, item1)
			if err != nil {
				return err
			}
			itemTemp = append(itemTemp, item2)
		}
		resource.ArrayOfArrays = append(resource.ArrayOfArrays, itemTemp)
	}

	// Set property "ArrayOfArraysOfArrays":
	for _, item := range typedInput.ArrayOfArraysOfArrays {
		var itemTemp [][]Foo
		for _, item1 := range item {
			var item1Temp []Foo
			for _, item2 := range item1 {
				var item3 Foo
				err := item3.PopulateFromARM(owner, item2)
				if err != nil {
					return err
				}
				item1Temp = append(item1Temp, item3)
			}
			itemTemp = append(itemTemp, item1Temp)
		}
		resource.ArrayOfArraysOfArrays = append(resource.ArrayOfArraysOfArrays, itemTemp)
	}

	// Set property "ArrayOfEnums":
	for _, item := range typedInput.ArrayOfEnums {
		resource.ArrayOfEnums = append(resource.ArrayOfEnums, item)
	}

	// Set property "ArrayOfMaps":
	for _, item := range typedInput.ArrayOfMaps {
		if item != nil {
			itemTemp := make(map[string]Foo, len(item))
			for key, value := range item {
				var value1 Foo
				err := value1.PopulateFromARM(owner, value)
				if err != nil {
					return err
				}
				itemTemp[key] = value1
			}
			resource.ArrayOfMaps = append(resource.ArrayOfMaps, itemTemp)
		}
	}

	// Set property "AzureName":
	resource.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Owner":
	resource.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Type":
	resource.Type = typedInput.Type

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_Spec{}

// ConvertSpecFrom populates our FakeResource_Spec from the provided source
func (resource *FakeResource_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200101s.FakeResource_Spec)
	if ok {
		// Populate our instance from source
		return resource.AssignProperties_From_FakeResource_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200101s.FakeResource_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = resource.AssignProperties_From_FakeResource_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FakeResource_Spec
func (resource *FakeResource_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200101s.FakeResource_Spec)
	if ok {
		// Populate destination from our instance
		return resource.AssignProperties_To_FakeResource_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200101s.FakeResource_Spec{}
	err := resource.AssignProperties_To_FakeResource_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_FakeResource_Spec populates our FakeResource_Spec from the provided source FakeResource_Spec
func (resource *FakeResource_Spec) AssignProperties_From_FakeResource_Spec(source *v20200101s.FakeResource_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		resource.APIVersion = genruntime.ToEnum(apiVersion, fakeResource_APIVersion_Spec_Values)
	} else {
		resource.APIVersion = ""
	}

	// ArrayFoo
	if source.ArrayFoo != nil {
		arrayFooList := make([]Foo, len(source.ArrayFoo))
		for arrayFooIndex, arrayFooItem := range source.ArrayFoo {
			// Shadow the loop variable to avoid aliasing
			arrayFooItem := arrayFooItem
			var arrayFoo Foo
			err := arrayFoo.AssignProperties_From_Foo(&arrayFooItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field ArrayFoo")
			}
			arrayFooList[arrayFooIndex] = arrayFoo
		}
		resource.ArrayFoo = arrayFooList
	} else {
		resource.ArrayFoo = nil
	}

	// ArrayOfArrays
	if source.ArrayOfArrays != nil {
		arrayOfArrayList := make([][]Foo, len(source.ArrayOfArrays))
		for arrayOfArrayIndex, arrayOfArrayItem := range source.ArrayOfArrays {
			// Shadow the loop variable to avoid aliasing
			arrayOfArrayItem := arrayOfArrayItem
			if arrayOfArrayItem != nil {
				arrayOfArrayList1 := make([]Foo, len(arrayOfArrayItem))
				for arrayOfArrayIndex1, arrayOfArrayItem1 := range arrayOfArrayItem {
					// Shadow the loop variable to avoid aliasing
					arrayOfArrayItem1 := arrayOfArrayItem1
					var arrayOfArray Foo
					err := arrayOfArray.AssignProperties_From_Foo(&arrayOfArrayItem1)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field ArrayOfArrays")
					}
					arrayOfArrayList1[arrayOfArrayIndex1] = arrayOfArray
				}
				arrayOfArrayList[arrayOfArrayIndex] = arrayOfArrayList1
			} else {
				arrayOfArrayList[arrayOfArrayIndex] = nil
			}
		}
		resource.ArrayOfArrays = arrayOfArrayList
	} else {
		resource.ArrayOfArrays = nil
	}

	// ArrayOfArraysOfArrays
	if source.ArrayOfArraysOfArrays != nil {
		arrayOfArraysOfArrayList := make([][][]Foo, len(source.ArrayOfArraysOfArrays))
		for arrayOfArraysOfArrayIndex, arrayOfArraysOfArrayItem := range source.ArrayOfArraysOfArrays {
			// Shadow the loop variable to avoid aliasing
			arrayOfArraysOfArrayItem := arrayOfArraysOfArrayItem
			if arrayOfArraysOfArrayItem != nil {
				arrayOfArraysOfArrayList1 := make([][]Foo, len(arrayOfArraysOfArrayItem))
				for arrayOfArraysOfArrayIndex1, arrayOfArraysOfArrayItem1 := range arrayOfArraysOfArrayItem {
					// Shadow the loop variable to avoid aliasing
					arrayOfArraysOfArrayItem1 := arrayOfArraysOfArrayItem1
					if arrayOfArraysOfArrayItem1 != nil {
						arrayOfArraysOfArrayList2 := make([]Foo, len(arrayOfArraysOfArrayItem1))
						for arrayOfArraysOfArrayIndex2, arrayOfArraysOfArrayItem2 := range arrayOfArraysOfArrayItem1 {
							// Shadow the loop variable to avoid aliasing
							arrayOfArraysOfArrayItem2 := arrayOfArraysOfArrayItem2
							var arrayOfArraysOfArray Foo
							err := arrayOfArraysOfArray.AssignProperties_From_Foo(&arrayOfArraysOfArrayItem2)
							if err != nil {
								return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field ArrayOfArraysOfArrays")
							}
							arrayOfArraysOfArrayList2[arrayOfArraysOfArrayIndex2] = arrayOfArraysOfArray
						}
						arrayOfArraysOfArrayList1[arrayOfArraysOfArrayIndex1] = arrayOfArraysOfArrayList2
					} else {
						arrayOfArraysOfArrayList1[arrayOfArraysOfArrayIndex1] = nil
					}
				}
				arrayOfArraysOfArrayList[arrayOfArraysOfArrayIndex] = arrayOfArraysOfArrayList1
			} else {
				arrayOfArraysOfArrayList[arrayOfArraysOfArrayIndex] = nil
			}
		}
		resource.ArrayOfArraysOfArrays = arrayOfArraysOfArrayList
	} else {
		resource.ArrayOfArraysOfArrays = nil
	}

	// ArrayOfEnums
	if source.ArrayOfEnums != nil {
		arrayOfEnumList := make([]Color, len(source.ArrayOfEnums))
		for arrayOfEnumIndex, arrayOfEnumItem := range source.ArrayOfEnums {
			// Shadow the loop variable to avoid aliasing
			arrayOfEnumItem := arrayOfEnumItem
			arrayOfEnumList[arrayOfEnumIndex] = genruntime.ToEnum(arrayOfEnumItem, color_Values)
		}
		resource.ArrayOfEnums = arrayOfEnumList
	} else {
		resource.ArrayOfEnums = nil
	}

	// ArrayOfMaps
	if source.ArrayOfMaps != nil {
		arrayOfMapList := make([]map[string]Foo, len(source.ArrayOfMaps))
		for arrayOfMapIndex, arrayOfMapItem := range source.ArrayOfMaps {
			// Shadow the loop variable to avoid aliasing
			arrayOfMapItem := arrayOfMapItem
			if arrayOfMapItem != nil {
				arrayOfMap := make(map[string]Foo, len(arrayOfMapItem))
				for arrayOfMapKey, arrayOfMapValue := range arrayOfMapItem {
					// Shadow the loop variable to avoid aliasing
					arrayOfMapValue := arrayOfMapValue
					var arrayOfMapLocal Foo
					err := arrayOfMapLocal.AssignProperties_From_Foo(&arrayOfMapValue)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field ArrayOfMaps")
					}
					arrayOfMap[arrayOfMapKey] = arrayOfMapLocal
				}
				arrayOfMapList[arrayOfMapIndex] = arrayOfMap
			} else {
				arrayOfMapList[arrayOfMapIndex] = nil
			}
		}
		resource.ArrayOfMaps = arrayOfMapList
	} else {
		resource.ArrayOfMaps = nil
	}

	// AzureName
	resource.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		resource.Owner = &owner
	} else {
		resource.Owner = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		resource.Type = genruntime.ToEnum(typeVar, fakeResource_Type_Spec_Values)
	} else {
		resource.Type = ""
	}

	// No error
	return nil
}

// AssignProperties_To_FakeResource_Spec populates the provided destination FakeResource_Spec from our FakeResource_Spec
func (resource *FakeResource_Spec) AssignProperties_To_FakeResource_Spec(destination *v20200101s.FakeResource_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	apiVersion := string(resource.APIVersion)
	destination.APIVersion = &apiVersion

	// ArrayFoo
	if resource.ArrayFoo != nil {
		arrayFooList := make([]v20200101s.Foo, len(resource.ArrayFoo))
		for arrayFooIndex, arrayFooItem := range resource.ArrayFoo {
			// Shadow the loop variable to avoid aliasing
			arrayFooItem := arrayFooItem
			var arrayFoo v20200101s.Foo
			err := arrayFooItem.AssignProperties_To_Foo(&arrayFoo)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field ArrayFoo")
			}
			arrayFooList[arrayFooIndex] = arrayFoo
		}
		destination.ArrayFoo = arrayFooList
	} else {
		destination.ArrayFoo = nil
	}

	// ArrayOfArrays
	if resource.ArrayOfArrays != nil {
		arrayOfArrayList := make([][]v20200101s.Foo, len(resource.ArrayOfArrays))
		for arrayOfArrayIndex, arrayOfArrayItem := range resource.ArrayOfArrays {
			// Shadow the loop variable to avoid aliasing
			arrayOfArrayItem := arrayOfArrayItem
			if arrayOfArrayItem != nil {
				arrayOfArrayList1 := make([]v20200101s.Foo, len(arrayOfArrayItem))
				for arrayOfArrayIndex1, arrayOfArrayItem1 := range arrayOfArrayItem {
					// Shadow the loop variable to avoid aliasing
					arrayOfArrayItem1 := arrayOfArrayItem1
					var arrayOfArray v20200101s.Foo
					err := arrayOfArrayItem1.AssignProperties_To_Foo(&arrayOfArray)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field ArrayOfArrays")
					}
					arrayOfArrayList1[arrayOfArrayIndex1] = arrayOfArray
				}
				arrayOfArrayList[arrayOfArrayIndex] = arrayOfArrayList1
			} else {
				arrayOfArrayList[arrayOfArrayIndex] = nil
			}
		}
		destination.ArrayOfArrays = arrayOfArrayList
	} else {
		destination.ArrayOfArrays = nil
	}

	// ArrayOfArraysOfArrays
	if resource.ArrayOfArraysOfArrays != nil {
		arrayOfArraysOfArrayList := make([][][]v20200101s.Foo, len(resource.ArrayOfArraysOfArrays))
		for arrayOfArraysOfArrayIndex, arrayOfArraysOfArrayItem := range resource.ArrayOfArraysOfArrays {
			// Shadow the loop variable to avoid aliasing
			arrayOfArraysOfArrayItem := arrayOfArraysOfArrayItem
			if arrayOfArraysOfArrayItem != nil {
				arrayOfArraysOfArrayList1 := make([][]v20200101s.Foo, len(arrayOfArraysOfArrayItem))
				for arrayOfArraysOfArrayIndex1, arrayOfArraysOfArrayItem1 := range arrayOfArraysOfArrayItem {
					// Shadow the loop variable to avoid aliasing
					arrayOfArraysOfArrayItem1 := arrayOfArraysOfArrayItem1
					if arrayOfArraysOfArrayItem1 != nil {
						arrayOfArraysOfArrayList2 := make([]v20200101s.Foo, len(arrayOfArraysOfArrayItem1))
						for arrayOfArraysOfArrayIndex2, arrayOfArraysOfArrayItem2 := range arrayOfArraysOfArrayItem1 {
							// Shadow the loop variable to avoid aliasing
							arrayOfArraysOfArrayItem2 := arrayOfArraysOfArrayItem2
							var arrayOfArraysOfArray v20200101s.Foo
							err := arrayOfArraysOfArrayItem2.AssignProperties_To_Foo(&arrayOfArraysOfArray)
							if err != nil {
								return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field ArrayOfArraysOfArrays")
							}
							arrayOfArraysOfArrayList2[arrayOfArraysOfArrayIndex2] = arrayOfArraysOfArray
						}
						arrayOfArraysOfArrayList1[arrayOfArraysOfArrayIndex1] = arrayOfArraysOfArrayList2
					} else {
						arrayOfArraysOfArrayList1[arrayOfArraysOfArrayIndex1] = nil
					}
				}
				arrayOfArraysOfArrayList[arrayOfArraysOfArrayIndex] = arrayOfArraysOfArrayList1
			} else {
				arrayOfArraysOfArrayList[arrayOfArraysOfArrayIndex] = nil
			}
		}
		destination.ArrayOfArraysOfArrays = arrayOfArraysOfArrayList
	} else {
		destination.ArrayOfArraysOfArrays = nil
	}

	// ArrayOfEnums
	if resource.ArrayOfEnums != nil {
		arrayOfEnumList := make([]string, len(resource.ArrayOfEnums))
		for arrayOfEnumIndex, arrayOfEnumItem := range resource.ArrayOfEnums {
			// Shadow the loop variable to avoid aliasing
			arrayOfEnumItem := arrayOfEnumItem
			arrayOfEnumList[arrayOfEnumIndex] = string(arrayOfEnumItem)
		}
		destination.ArrayOfEnums = arrayOfEnumList
	} else {
		destination.ArrayOfEnums = nil
	}

	// ArrayOfMaps
	if resource.ArrayOfMaps != nil {
		arrayOfMapList := make([]map[string]v20200101s.Foo, len(resource.ArrayOfMaps))
		for arrayOfMapIndex, arrayOfMapItem := range resource.ArrayOfMaps {
			// Shadow the loop variable to avoid aliasing
			arrayOfMapItem := arrayOfMapItem
			if arrayOfMapItem != nil {
				arrayOfMap := make(map[string]v20200101s.Foo, len(arrayOfMapItem))
				for arrayOfMapKey, arrayOfMapValue := range arrayOfMapItem {
					// Shadow the loop variable to avoid aliasing
					arrayOfMapValue := arrayOfMapValue
					var arrayOfMapLocal v20200101s.Foo
					err := arrayOfMapValue.AssignProperties_To_Foo(&arrayOfMapLocal)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field ArrayOfMaps")
					}
					arrayOfMap[arrayOfMapKey] = arrayOfMapLocal
				}
				arrayOfMapList[arrayOfMapIndex] = arrayOfMap
			} else {
				arrayOfMapList[arrayOfMapIndex] = nil
			}
		}
		destination.ArrayOfMaps = arrayOfMapList
	} else {
		destination.ArrayOfMaps = nil
	}

	// AzureName
	destination.AzureName = resource.AzureName

	// OriginalVersion
	destination.OriginalVersion = resource.OriginalVersion()

	// Owner
	if resource.Owner != nil {
		owner := resource.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Type
	typeVar := string(resource.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (resource *FakeResource_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (resource *FakeResource_Spec) SetAzureName(azureName string) { resource.AzureName = azureName }

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResource_Type_Spec string

const FakeResource_Type_Spec_MicrosoftAzureFakeResource = FakeResource_Type_Spec("Microsoft.Azure/FakeResource")

// Mapping from string to FakeResource_Type_Spec
var fakeResource_Type_Spec_Values = map[string]FakeResource_Type_Spec{
	"microsoft.azure/fakeresource": FakeResource_Type_Spec_MicrosoftAzureFakeResource,
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo_ARM struct {
	Name *string `json:"name,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	result := &Foo_ARM{}

	// Set property "Name":
	if foo.Name != nil {
		name := *foo.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Foo_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Foo_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Foo_ARM, got %T", armInput)
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		foo.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_Foo populates our Foo from the provided source Foo
func (foo *Foo) AssignProperties_From_Foo(source *v20200101s.Foo) error {

	// Name
	foo.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Foo populates the provided destination Foo from our Foo
func (foo *Foo) AssignProperties_To_Foo(destination *v20200101s.Foo) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(foo.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
