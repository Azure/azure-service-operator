// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_SPEC `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (resource *FakeResource) GetConditions() conditions.Conditions {
	return resource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (resource *FakeResource) SetConditions(conditions conditions.Conditions) {
	resource.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (resource *FakeResource) Default() {
	resource.defaultImpl()
	var temp interface{} = resource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (resource *FakeResource) defaultAzureName() {
	if resource.Spec.AzureName == "" {
		resource.Spec.AzureName = resource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (resource *FakeResource) defaultImpl() { resource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (resource *FakeResource) AzureName() string {
	return resource.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "placeholder for golden tests"
func (resource FakeResource) GetAPIVersion() string {
	return string(APIVersionAPIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (resource *FakeResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (resource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &resource.Spec
}

// GetType returns the ARM Type of the resource. This is always ""
func (resource *FakeResource) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (resource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(resource.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  resource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (resource *FakeResource) ValidateCreate() error {
	validations := resource.createValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (resource *FakeResource) ValidateDelete() error {
	validations := resource.deleteValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (resource *FakeResource) ValidateUpdate(old runtime.Object) error {
	validations := resource.updateValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (resource *FakeResource) createValidations() []func() error {
	return []func() error{resource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (resource *FakeResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (resource *FakeResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return resource.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (resource *FakeResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&resource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// Hub marks that this FakeResource is the hub type for conversion
func (resource *FakeResource) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (resource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: resource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SPECARM struct {
	APIVersion            FakeResource_APIVersion_SPEC `json:"apiVersion"`
	ArrayFoo              []FooARM                     `json:"arrayFoo"`
	ArrayOfArrays         [][]FooARM                   `json:"arrayOfArrays,omitempty"`
	ArrayOfArraysOfArrays [][][]FooARM                 `json:"arrayOfArraysOfArrays,omitempty"`
	ArrayOfEnums          []Color                      `json:"arrayOfEnums,omitempty"`
	ArrayOfMaps           []map[string]FooARM          `json:"arrayOfMaps,omitempty"`
	Name                  string                       `json:"name"`
	Type                  FakeResource_Type_SPEC       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SPECARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "placeholder for golden tests"
func (specarm FakeResource_SPECARM) GetAPIVersion() string {
	return string(APIVersionAPIVersionValue)
}

// GetName returns the Name of the resource
func (specarm FakeResource_SPECARM) GetName() string {
	return specarm.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (specarm FakeResource_SPECARM) GetType() string {
	return ""
}

// +kubebuilder:validation:Enum={placeholder for golden tests}
type APIVersion string

const APIVersionAPIVersionValue = APIVersion(placeholder for golden tests)

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	ColorBlue  = Color("blue")
	ColorGreen = Color("green")
	ColorRed   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResource_APIVersion_SPEC string

const FakeResource_APIVersion_SPEC20200601 = FakeResource_APIVersion_SPEC("2020-06-01")

type FakeResource_SPEC struct {
	// +kubebuilder:validation:Required
	APIVersion FakeResource_APIVersion_SPEC `json:"apiVersion"`

	// +kubebuilder:validation:Required
	ArrayFoo              []Foo            `json:"arrayFoo"`
	ArrayOfArrays         [][]Foo          `json:"arrayOfArrays,omitempty"`
	ArrayOfArraysOfArrays [][][]Foo        `json:"arrayOfArraysOfArrays,omitempty"`
	ArrayOfEnums          []Color          `json:"arrayOfEnums,omitempty"`
	ArrayOfMaps           []map[string]Foo `json:"arrayOfMaps,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type FakeResource_Type_SPEC `json:"type"`
}

var _ genruntime.ARMTransformer = &FakeResource_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *FakeResource_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result FakeResource_SPECARM

	// Set property ‘APIVersion’:
	result.APIVersion = spec.APIVersion

	// Set property ‘ArrayFoo’:
	for _, item := range spec.ArrayFoo {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ArrayFoo = append(result.ArrayFoo, itemARM.(FooARM))
	}

	// Set property ‘ArrayOfArrays’:
	for _, item := range spec.ArrayOfArrays {
		var itemTemp []FooARM
		for _, item1 := range item {
			item1ARM, err := item1.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			itemTemp = append(itemTemp, item1ARM.(FooARM))
		}
		result.ArrayOfArrays = append(result.ArrayOfArrays, itemTemp)
	}

	// Set property ‘ArrayOfArraysOfArrays’:
	for _, item := range spec.ArrayOfArraysOfArrays {
		var itemTemp [][]FooARM
		for _, item1 := range item {
			var item1Temp []FooARM
			for _, item2 := range item1 {
				item2ARM, err := item2.ConvertToARM(resolved)
				if err != nil {
					return nil, err
				}
				item1Temp = append(item1Temp, item2ARM.(FooARM))
			}
			itemTemp = append(itemTemp, item1Temp)
		}
		result.ArrayOfArraysOfArrays = append(result.ArrayOfArraysOfArrays, itemTemp)
	}

	// Set property ‘ArrayOfEnums’:
	for _, item := range spec.ArrayOfEnums {
		result.ArrayOfEnums = append(result.ArrayOfEnums, item)
	}

	// Set property ‘ArrayOfMaps’:
	for _, item := range spec.ArrayOfMaps {
		if item != nil {
			itemTemp := make(map[string]FooARM)
			for key, value := range item {
				valueARM, err := value.ConvertToARM(resolved)
				if err != nil {
					return nil, err
				}
				itemTemp[key] = valueARM.(FooARM)
			}
			result.ArrayOfMaps = append(result.ArrayOfMaps, itemTemp)
		}
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Type’:
	result.Type = spec.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *FakeResource_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *FakeResource_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SPECARM, got %T", armInput)
	}

	// Set property ‘APIVersion’:
	spec.APIVersion = typedInput.APIVersion

	// Set property ‘ArrayFoo’:
	for _, item := range typedInput.ArrayFoo {
		var item1 Foo
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.ArrayFoo = append(spec.ArrayFoo, item1)
	}

	// Set property ‘ArrayOfArrays’:
	for _, item := range typedInput.ArrayOfArrays {
		var itemTemp []Foo
		for _, item1 := range item {
			var item2 Foo
			err := item2.PopulateFromARM(owner, item1)
			if err != nil {
				return err
			}
			itemTemp = append(itemTemp, item2)
		}
		spec.ArrayOfArrays = append(spec.ArrayOfArrays, itemTemp)
	}

	// Set property ‘ArrayOfArraysOfArrays’:
	for _, item := range typedInput.ArrayOfArraysOfArrays {
		var itemTemp [][]Foo
		for _, item1 := range item {
			var item1Temp []Foo
			for _, item2 := range item1 {
				var item3 Foo
				err := item3.PopulateFromARM(owner, item2)
				if err != nil {
					return err
				}
				item1Temp = append(item1Temp, item3)
			}
			itemTemp = append(itemTemp, item1Temp)
		}
		spec.ArrayOfArraysOfArrays = append(spec.ArrayOfArraysOfArrays, itemTemp)
	}

	// Set property ‘ArrayOfEnums’:
	for _, item := range typedInput.ArrayOfEnums {
		spec.ArrayOfEnums = append(spec.ArrayOfEnums, item)
	}

	// Set property ‘ArrayOfMaps’:
	for _, item := range typedInput.ArrayOfMaps {
		if item != nil {
			itemTemp := make(map[string]Foo)
			for key, value := range item {
				var value1 Foo
				err := value1.PopulateFromARM(owner, value)
				if err != nil {
					return err
				}
				itemTemp[key] = value1
			}
			spec.ArrayOfMaps = append(spec.ArrayOfMaps, itemTemp)
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Type’:
	spec.Type = typedInput.Type

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_SPEC{}

// ConvertSpecFrom populates our FakeResource_SPEC from the provided source
func (spec *FakeResource_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == spec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(spec)
}

// ConvertSpecTo populates the provided destination from our FakeResource_SPEC
func (spec *FakeResource_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == spec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(spec)
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *FakeResource_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *FakeResource_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResource_Type_SPEC string

const FakeResource_Type_SPECMicrosoftAzureFakeResource = FakeResource_Type_SPEC("Microsoft.Azure/FakeResource")

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	Name *string `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooARM

	// Set property ‘Name’:
	if foo.Name != nil {
		name := *foo.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		foo.Name = &name
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
