// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/testing/test/v1alpha1api20200101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &A{}

// GetConditions returns the conditions of the resource
func (a *A) GetConditions() conditions.Conditions {
	return a.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (a *A) SetConditions(conditions conditions.Conditions) { a.Status.Conditions = conditions }

var _ conversion.Convertible = &A{}

// ConvertFrom populates our A from the provided hub A
func (a *A) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200101storage.A)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/A but received %T instead", hub)
	}

	return a.AssignPropertiesFromA(source)
}

// ConvertTo populates the provided hub A from our A
func (a *A) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200101storage.A)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/A but received %T instead", hub)
	}

	return a.AssignPropertiesToA(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default() {
	a.defaultImpl()
	var temp interface{} = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl() { a.defaultAzureName() }

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (a A) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (a *A) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (a *A) GetSpec() genruntime.ConvertibleSpec {
	return &a.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a *A) GetType() string {
	return "Microsoft.Azure/A"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  a.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate() error {
	validations := a.createValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete() error {
	validations := a.deleteValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(old runtime.Object) error {
	validations := a.updateValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func() error {
	return []func() error{a.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return a.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&a.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromA populates our A from the provided source A
func (a *A) AssignPropertiesFromA(source *v1alpha1api20200101storage.A) error {

	// ObjectMeta
	a.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec A_Spec
	err := spec.AssignPropertiesFromASpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromASpec() to populate field Spec")
	}
	a.Spec = spec

	// No error
	return nil
}

// AssignPropertiesToA populates the provided destination A from our A
func (a *A) AssignPropertiesToA(destination *v1alpha1api20200101storage.A) error {

	// ObjectMeta
	destination.ObjectMeta = *a.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200101storage.A_Spec
	err := a.Spec.AssignPropertiesToASpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToASpec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (a *A) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: a.Spec.OriginalVersion(),
		Kind:    "A",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecARM struct {
	Name string `json:"name,omitempty"`
}

var _ genruntime.ARMResourceSpec = &A_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (a A_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (a A_SpecARM) GetName() string {
	return a.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a A_SpecARM) GetType() string {
	return "Microsoft.Azure/A"
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              B_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &B{}

// GetConditions returns the conditions of the resource
func (b *B) GetConditions() conditions.Conditions {
	return b.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (b *B) SetConditions(conditions conditions.Conditions) { b.Status.Conditions = conditions }

var _ conversion.Convertible = &B{}

// ConvertFrom populates our B from the provided hub B
func (b *B) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200101storage.B)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/B but received %T instead", hub)
	}

	return b.AssignPropertiesFromB(source)
}

// ConvertTo populates the provided hub B from our B
func (b *B) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200101storage.B)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/B but received %T instead", hub)
	}

	return b.AssignPropertiesToB(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.bs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &B{}

// Default applies defaults to the B resource
func (b *B) Default() {
	b.defaultImpl()
	var temp interface{} = b
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (b *B) defaultAzureName() {
	if b.Spec.AzureName == "" {
		b.Spec.AzureName = b.Name
	}
}

// defaultImpl applies the code generated defaults to the B resource
func (b *B) defaultImpl() { b.defaultAzureName() }

var _ genruntime.KubernetesResource = &B{}

// AzureName returns the Azure name of the resource
func (b *B) AzureName() string {
	return b.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (b B) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (b *B) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (b *B) GetSpec() genruntime.ConvertibleSpec {
	return &b.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/B"
func (b *B) GetType() string {
	return "Microsoft.Azure/B"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (b *B) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(b.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  b.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-b,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.bs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &B{}

// ValidateCreate validates the creation of the resource
func (b *B) ValidateCreate() error {
	validations := b.createValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (b *B) ValidateDelete() error {
	validations := b.deleteValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (b *B) ValidateUpdate(old runtime.Object) error {
	validations := b.updateValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (b *B) createValidations() []func() error {
	return []func() error{b.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (b *B) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (b *B) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return b.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (b *B) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&b.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromB populates our B from the provided source B
func (b *B) AssignPropertiesFromB(source *v1alpha1api20200101storage.B) error {

	// ObjectMeta
	b.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec B_Spec
	err := spec.AssignPropertiesFromBSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBSpec() to populate field Spec")
	}
	b.Spec = spec

	// No error
	return nil
}

// AssignPropertiesToB populates the provided destination B from our B
func (b *B) AssignPropertiesToB(destination *v1alpha1api20200101storage.B) error {

	// ObjectMeta
	destination.ObjectMeta = *b.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200101storage.B_Spec
	err := b.Spec.AssignPropertiesToBSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBSpec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (b *B) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: b.Spec.OriginalVersion(),
		Kind:    "B",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type BList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []B `json:"items"`
}

type B_SpecARM struct {
	Name string `json:"name,omitempty"`
}

var _ genruntime.ARMResourceSpec = &B_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (b B_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (b B_SpecARM) GetName() string {
	return b.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/B"
func (b B_SpecARM) GetType() string {
	return "Microsoft.Azure/B"
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              C_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &C{}

// GetConditions returns the conditions of the resource
func (c *C) GetConditions() conditions.Conditions {
	return c.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (c *C) SetConditions(conditions conditions.Conditions) { c.Status.Conditions = conditions }

var _ conversion.Convertible = &C{}

// ConvertFrom populates our C from the provided hub C
func (c *C) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200101storage.C)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/C but received %T instead", hub)
	}

	return c.AssignPropertiesFromC(source)
}

// ConvertTo populates the provided hub C from our C
func (c *C) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200101storage.C)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/C but received %T instead", hub)
	}

	return c.AssignPropertiesToC(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-c,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.cs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &C{}

// Default applies defaults to the C resource
func (c *C) Default() {
	c.defaultImpl()
	var temp interface{} = c
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (c *C) defaultAzureName() {
	if c.Spec.AzureName == "" {
		c.Spec.AzureName = c.Name
	}
}

// defaultImpl applies the code generated defaults to the C resource
func (c *C) defaultImpl() { c.defaultAzureName() }

var _ genruntime.KubernetesResource = &C{}

// AzureName returns the Azure name of the resource
func (c *C) AzureName() string {
	return c.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (c C) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (c *C) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (c *C) GetSpec() genruntime.ConvertibleSpec {
	return &c.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/C"
func (c *C) GetType() string {
	return "Microsoft.Azure/C"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (c *C) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(c.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  c.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-c,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.cs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &C{}

// ValidateCreate validates the creation of the resource
func (c *C) ValidateCreate() error {
	validations := c.createValidations()
	var temp interface{} = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (c *C) ValidateDelete() error {
	validations := c.deleteValidations()
	var temp interface{} = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (c *C) ValidateUpdate(old runtime.Object) error {
	validations := c.updateValidations()
	var temp interface{} = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (c *C) createValidations() []func() error {
	return []func() error{c.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (c *C) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (c *C) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return c.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (c *C) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&c.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromC populates our C from the provided source C
func (c *C) AssignPropertiesFromC(source *v1alpha1api20200101storage.C) error {

	// ObjectMeta
	c.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec C_Spec
	err := spec.AssignPropertiesFromCSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromCSpec() to populate field Spec")
	}
	c.Spec = spec

	// No error
	return nil
}

// AssignPropertiesToC populates the provided destination C from our C
func (c *C) AssignPropertiesToC(destination *v1alpha1api20200101storage.C) error {

	// ObjectMeta
	destination.ObjectMeta = *c.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200101storage.C_Spec
	err := c.Spec.AssignPropertiesToCSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToCSpec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (c *C) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: c.Spec.OriginalVersion(),
		Kind:    "C",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type CList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []C `json:"items"`
}

type C_SpecARM struct {
	Name string `json:"name,omitempty"`
}

var _ genruntime.ARMResourceSpec = &C_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (c C_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (c C_SpecARM) GetName() string {
	return c.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/C"
func (c C_SpecARM) GetType() string {
	return "Microsoft.Azure/C"
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/D
type D struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              D_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &D{}

// GetConditions returns the conditions of the resource
func (d *D) GetConditions() conditions.Conditions {
	return d.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (d *D) SetConditions(conditions conditions.Conditions) { d.Status.Conditions = conditions }

var _ conversion.Convertible = &D{}

// ConvertFrom populates our D from the provided hub D
func (d *D) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20200101storage.D)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/D but received %T instead", hub)
	}

	return d.AssignPropertiesFromD(source)
}

// ConvertTo populates the provided hub D from our D
func (d *D) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20200101storage.D)
	if !ok {
		return fmt.Errorf("expected test/v1alpha1api20200101storage/D but received %T instead", hub)
	}

	return d.AssignPropertiesToD(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-d,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.ds.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &D{}

// Default applies defaults to the D resource
func (d *D) Default() {
	d.defaultImpl()
	var temp interface{} = d
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (d *D) defaultAzureName() {
	if d.Spec.AzureName == "" {
		d.Spec.AzureName = d.Name
	}
}

// defaultImpl applies the code generated defaults to the D resource
func (d *D) defaultImpl() { d.defaultAzureName() }

var _ genruntime.KubernetesResource = &D{}

// AzureName returns the Azure name of the resource
func (d *D) AzureName() string {
	return d.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (d D) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (d *D) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (d *D) GetSpec() genruntime.ConvertibleSpec {
	return &d.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/D"
func (d *D) GetType() string {
	return "Microsoft.Azure/D"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (d *D) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(d.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  d.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-d,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.ds.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &D{}

// ValidateCreate validates the creation of the resource
func (d *D) ValidateCreate() error {
	validations := d.createValidations()
	var temp interface{} = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (d *D) ValidateDelete() error {
	validations := d.deleteValidations()
	var temp interface{} = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (d *D) ValidateUpdate(old runtime.Object) error {
	validations := d.updateValidations()
	var temp interface{} = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (d *D) createValidations() []func() error {
	return []func() error{d.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (d *D) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (d *D) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return d.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (d *D) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&d.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromD populates our D from the provided source D
func (d *D) AssignPropertiesFromD(source *v1alpha1api20200101storage.D) error {

	// ObjectMeta
	d.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec D_Spec
	err := spec.AssignPropertiesFromDSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDSpec() to populate field Spec")
	}
	d.Spec = spec

	// No error
	return nil
}

// AssignPropertiesToD populates the provided destination D from our D
func (d *D) AssignPropertiesToD(destination *v1alpha1api20200101storage.D) error {

	// ObjectMeta
	destination.ObjectMeta = *d.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20200101storage.D_Spec
	err := d.Spec.AssignPropertiesToDSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDSpec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (d *D) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: d.Spec.OriginalVersion(),
		Kind:    "D",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/D
type DList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []D `json:"items"`
}

type D_SpecARM struct {
	Name string `json:"name,omitempty"`
}

var _ genruntime.ARMResourceSpec = &D_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (d D_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (d D_SpecARM) GetName() string {
	return d.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/D"
func (d D_SpecARM) GetType() string {
	return "Microsoft.Azure/D"
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecAPIVersion string

const ASpecAPIVersion20200601 = ASpecAPIVersion("2020-06-01")

type A_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
}

var _ genruntime.ARMTransformer = &A_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (a *A_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if a == nil {
		return nil, nil
	}
	var result A_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (a *A_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &A_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (a *A_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected A_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	a.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	a.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &A_Spec{}

// ConvertSpecFrom populates our A_Spec from the provided source
func (a *A_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200101storage.A_Spec)
	if ok {
		// Populate our instance from source
		return a.AssignPropertiesFromASpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200101storage.A_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = a.AssignPropertiesFromASpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our A_Spec
func (a *A_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200101storage.A_Spec)
	if ok {
		// Populate destination from our instance
		return a.AssignPropertiesToASpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200101storage.A_Spec{}
	err := a.AssignPropertiesToASpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromASpec populates our A_Spec from the provided source A_Spec
func (a *A_Spec) AssignPropertiesFromASpec(source *v1alpha1api20200101storage.A_Spec) error {

	// AzureName
	a.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		a.Owner = &owner
	} else {
		a.Owner = nil
	}

	// No error
	return nil
}

// AssignPropertiesToASpec populates the provided destination A_Spec from our A_Spec
func (a *A_Spec) AssignPropertiesToASpec(destination *v1alpha1api20200101storage.A_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = a.AzureName

	// OriginalVersion
	destination.OriginalVersion = a.OriginalVersion()

	// Owner
	if a.Owner != nil {
		owner := a.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (a *A_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (a *A_Spec) SetAzureName(azureName string) { a.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type BSpecAPIVersion string

const BSpecAPIVersion20200601 = BSpecAPIVersion("2020-06-01")

type B_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a test.azure.com/A resource
	Owner *genruntime.KnownResourceReference `group:"test.azure.com" json:"owner,omitempty" kind:"A"`
}

var _ genruntime.ARMTransformer = &B_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (b *B_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if b == nil {
		return nil, nil
	}
	var result B_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (b *B_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &B_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (b *B_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(B_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected B_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	b.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	b.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &B_Spec{}

// ConvertSpecFrom populates our B_Spec from the provided source
func (b *B_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200101storage.B_Spec)
	if ok {
		// Populate our instance from source
		return b.AssignPropertiesFromBSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200101storage.B_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = b.AssignPropertiesFromBSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our B_Spec
func (b *B_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200101storage.B_Spec)
	if ok {
		// Populate destination from our instance
		return b.AssignPropertiesToBSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200101storage.B_Spec{}
	err := b.AssignPropertiesToBSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromBSpec populates our B_Spec from the provided source B_Spec
func (b *B_Spec) AssignPropertiesFromBSpec(source *v1alpha1api20200101storage.B_Spec) error {

	// AzureName
	b.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		b.Owner = &owner
	} else {
		b.Owner = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBSpec populates the provided destination B_Spec from our B_Spec
func (b *B_Spec) AssignPropertiesToBSpec(destination *v1alpha1api20200101storage.B_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = b.AzureName

	// OriginalVersion
	destination.OriginalVersion = b.OriginalVersion()

	// Owner
	if b.Owner != nil {
		owner := b.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (b *B_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (b *B_Spec) SetAzureName(azureName string) { b.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type CSpecAPIVersion string

const CSpecAPIVersion20200601 = CSpecAPIVersion("2020-06-01")

type C_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a test.azure.com/B resource
	Owner *genruntime.KnownResourceReference `group:"test.azure.com" json:"owner,omitempty" kind:"B"`
}

var _ genruntime.ARMTransformer = &C_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (c *C_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if c == nil {
		return nil, nil
	}
	var result C_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (c *C_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &C_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (c *C_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(C_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected C_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	c.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	c.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &C_Spec{}

// ConvertSpecFrom populates our C_Spec from the provided source
func (c *C_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200101storage.C_Spec)
	if ok {
		// Populate our instance from source
		return c.AssignPropertiesFromCSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200101storage.C_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = c.AssignPropertiesFromCSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our C_Spec
func (c *C_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200101storage.C_Spec)
	if ok {
		// Populate destination from our instance
		return c.AssignPropertiesToCSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200101storage.C_Spec{}
	err := c.AssignPropertiesToCSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromCSpec populates our C_Spec from the provided source C_Spec
func (c *C_Spec) AssignPropertiesFromCSpec(source *v1alpha1api20200101storage.C_Spec) error {

	// AzureName
	c.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		c.Owner = &owner
	} else {
		c.Owner = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCSpec populates the provided destination C_Spec from our C_Spec
func (c *C_Spec) AssignPropertiesToCSpec(destination *v1alpha1api20200101storage.C_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = c.AzureName

	// OriginalVersion
	destination.OriginalVersion = c.OriginalVersion()

	// Owner
	if c.Owner != nil {
		owner := c.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (c *C_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (c *C_Spec) SetAzureName(azureName string) { c.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type DSpecAPIVersion string

const DSpecAPIVersion20200601 = DSpecAPIVersion("2020-06-01")

type D_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a test.azure.com/B resource
	Owner *genruntime.KnownResourceReference `group:"test.azure.com" json:"owner,omitempty" kind:"B"`
}

var _ genruntime.ARMTransformer = &D_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (d *D_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if d == nil {
		return nil, nil
	}
	var result D_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (d *D_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &D_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (d *D_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(D_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected D_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	d.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	d.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &D_Spec{}

// ConvertSpecFrom populates our D_Spec from the provided source
func (d *D_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200101storage.D_Spec)
	if ok {
		// Populate our instance from source
		return d.AssignPropertiesFromDSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200101storage.D_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = d.AssignPropertiesFromDSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our D_Spec
func (d *D_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200101storage.D_Spec)
	if ok {
		// Populate destination from our instance
		return d.AssignPropertiesToDSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200101storage.D_Spec{}
	err := d.AssignPropertiesToDSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDSpec populates our D_Spec from the provided source D_Spec
func (d *D_Spec) AssignPropertiesFromDSpec(source *v1alpha1api20200101storage.D_Spec) error {

	// AzureName
	d.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		d.Owner = &owner
	} else {
		d.Owner = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDSpec populates the provided destination D_Spec from our D_Spec
func (d *D_Spec) AssignPropertiesToDSpec(destination *v1alpha1api20200101storage.D_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = d.AzureName

	// OriginalVersion
	destination.OriginalVersion = d.OriginalVersion()

	// Owner
	if d.Owner != nil {
		owner := d.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (d *D_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (d *D_Spec) SetAzureName(azureName string) { d.AzureName = azureName }

func init() {
	SchemeBuilder.Register(&A{}, &AList{}, &B{}, &BList{}, &C{}, &CList{}, &D{}, &DList{})
}
