// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	"fmt"
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &A{}

// GetConditions returns the conditions of the resource
func (a *A) GetConditions() conditions.Conditions {
	return a.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (a *A) SetConditions(conditions conditions.Conditions) { a.Status.Conditions = conditions }

var _ conversion.Convertible = &A{}

// ConvertFrom populates our A from the provided hub A
func (a *A) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200101s.A)
	if !ok {
		return fmt.Errorf("expected test/v1beta20200101storage/A but received %T instead", hub)
	}

	return a.AssignPropertiesFromA(source)
}

// ConvertTo populates the provided hub A from our A
func (a *A) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200101s.A)
	if !ok {
		return fmt.Errorf("expected test/v1beta20200101storage/A but received %T instead", hub)
	}

	return a.AssignPropertiesToA(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1beta20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1beta20200101,name=default.v1beta20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default() {
	a.defaultImpl()
	var temp interface{} = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl() { a.defaultAzureName() }

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (a A) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (a *A) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (a *A) GetSpec() genruntime.ConvertibleSpec {
	return &a.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a *A) GetType() string {
	return "Microsoft.Azure/A"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  a.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1beta20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1beta20200101,name=validate.v1beta20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate() error {
	validations := a.createValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete() error {
	validations := a.deleteValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(old runtime.Object) error {
	validations := a.updateValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func() error {
	return []func() error{a.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return a.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&a.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromA populates our A from the provided source A
func (a *A) AssignPropertiesFromA(source *v20200101s.A) error {

	// ObjectMeta
	a.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec A_Spec
	err := spec.AssignPropertiesFromASpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromASpec() to populate field Spec")
	}
	a.Spec = spec

	// No error
	return nil
}

// AssignPropertiesToA populates the provided destination A from our A
func (a *A) AssignPropertiesToA(destination *v20200101s.A) error {

	// ObjectMeta
	destination.ObjectMeta = *a.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200101s.A_Spec
	err := a.Spec.AssignPropertiesToASpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToASpec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (a *A) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: a.Spec.OriginalVersion(),
		Kind:    "A",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecARM struct {
	Name       string          `json:"name,omitempty"`
	Properties *APropertiesARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &A_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (a A_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (a A_SpecARM) GetName() string {
	return a.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a A_SpecARM) GetType() string {
	return "Microsoft.Azure/A"
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type APropertiesARM struct {
	Left  *Left_SubResourceEmbeddedARM    `json:"left,omitempty"`
	Right *Right_SubResourceEmbedded_1ARM `json:"right,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecAPIVersion string

const ASpecAPIVersion20200601 = ASpecAPIVersion("2020-06-01")

type A_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a resources.azure.com/ResourceGroup resource
	Owner      *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Properties *AProperties                       `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &A_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (a *A_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if a == nil {
		return nil, nil
	}
	var result A_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if a.Properties != nil {
		propertiesARM, err := (*a.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(APropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (a *A_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &A_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (a *A_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected A_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	a.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	a.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 AProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		a.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &A_Spec{}

// ConvertSpecFrom populates our A_Spec from the provided source
func (a *A_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200101s.A_Spec)
	if ok {
		// Populate our instance from source
		return a.AssignPropertiesFromASpec(src)
	}

	// Convert to an intermediate form
	src = &v20200101s.A_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = a.AssignPropertiesFromASpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our A_Spec
func (a *A_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200101s.A_Spec)
	if ok {
		// Populate destination from our instance
		return a.AssignPropertiesToASpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200101s.A_Spec{}
	err := a.AssignPropertiesToASpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromASpec populates our A_Spec from the provided source A_Spec
func (a *A_Spec) AssignPropertiesFromASpec(source *v20200101s.A_Spec) error {

	// AzureName
	a.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		a.Owner = &owner
	} else {
		a.Owner = nil
	}

	// Properties
	if source.Properties != nil {
		var property AProperties
		err := property.AssignPropertiesFromAProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAProperties() to populate field Properties")
		}
		a.Properties = &property
	} else {
		a.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToASpec populates the provided destination A_Spec from our A_Spec
func (a *A_Spec) AssignPropertiesToASpec(destination *v20200101s.A_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = a.AzureName

	// OriginalVersion
	destination.OriginalVersion = a.OriginalVersion()

	// Owner
	if a.Owner != nil {
		owner := a.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Properties
	if a.Properties != nil {
		var property v20200101s.AProperties
		err := a.Properties.AssignPropertiesToAProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (a *A_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (a *A_Spec) SetAzureName(azureName string) { a.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type AProperties struct {
	Left  *Left_SubResourceEmbedded    `json:"left,omitempty"`
	Right *Right_SubResourceEmbedded_1 `json:"right,omitempty"`
}

var _ genruntime.ARMTransformer = &AProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *AProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result APropertiesARM

	// Set property ‘Left’:
	if properties.Left != nil {
		leftARM, err := (*properties.Left).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		left := leftARM.(Left_SubResourceEmbeddedARM)
		result.Left = &left
	}

	// Set property ‘Right’:
	if properties.Right != nil {
		rightARM, err := (*properties.Right).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		right := rightARM.(Right_SubResourceEmbedded_1ARM)
		result.Right = &right
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &APropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(APropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected APropertiesARM, got %T", armInput)
	}

	// Set property ‘Left’:
	if typedInput.Left != nil {
		var left1 Left_SubResourceEmbedded
		err := left1.PopulateFromARM(owner, *typedInput.Left)
		if err != nil {
			return err
		}
		left := left1
		properties.Left = &left
	}

	// Set property ‘Right’:
	if typedInput.Right != nil {
		var right1 Right_SubResourceEmbedded_1
		err := right1.PopulateFromARM(owner, *typedInput.Right)
		if err != nil {
			return err
		}
		right := right1
		properties.Right = &right
	}

	// No error
	return nil
}

// AssignPropertiesFromAProperties populates our AProperties from the provided source AProperties
func (properties *AProperties) AssignPropertiesFromAProperties(source *v20200101s.AProperties) error {

	// Left
	if source.Left != nil {
		var left Left_SubResourceEmbedded
		err := left.AssignPropertiesFromLeftSubResourceEmbedded(source.Left)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLeftSubResourceEmbedded() to populate field Left")
		}
		properties.Left = &left
	} else {
		properties.Left = nil
	}

	// Right
	if source.Right != nil {
		var right Right_SubResourceEmbedded_1
		err := right.AssignPropertiesFromRightSubResourceEmbedded1(source.Right)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRightSubResourceEmbedded1() to populate field Right")
		}
		properties.Right = &right
	} else {
		properties.Right = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAProperties populates the provided destination AProperties from our AProperties
func (properties *AProperties) AssignPropertiesToAProperties(destination *v20200101s.AProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Left
	if properties.Left != nil {
		var left v20200101s.Left_SubResourceEmbedded
		err := properties.Left.AssignPropertiesToLeftSubResourceEmbedded(&left)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLeftSubResourceEmbedded() to populate field Left")
		}
		destination.Left = &left
	} else {
		destination.Left = nil
	}

	// Right
	if properties.Right != nil {
		var right v20200101s.Right_SubResourceEmbedded_1
		err := properties.Right.AssignPropertiesToRightSubResourceEmbedded1(&right)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRightSubResourceEmbedded1() to populate field Right")
		}
		destination.Right = &right
	} else {
		destination.Right = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbeddedARM struct {
	Name       *string                              `json:"name,omitempty"`
	Properties *LeftPropertiesARM                   `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbeddedARM `json:"refField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbedded_1ARM struct {
	Name       *string                                `json:"name,omitempty"`
	Properties *RightPropertiesARM                    `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbedded_1ARM `json:"refField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbeddedARM struct {
	Name       *string                                        `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbeddedARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbedded_1ARM struct {
	Name       *string                                          `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbedded_1ARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/LeftProperties
type LeftPropertiesARM struct {
	StrField *string `json:"strField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbedded struct {
	Name       *string                           `json:"name,omitempty"`
	Properties *LeftProperties                   `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbedded `json:"refField,omitempty"`
}

var _ genruntime.ARMTransformer = &Left_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *Left_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result Left_SubResourceEmbeddedARM

	// Set property ‘Name’:
	if embedded.Name != nil {
		name := *embedded.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if embedded.Properties != nil {
		propertiesARM, err := (*embedded.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(LeftPropertiesARM)
		result.Properties = &properties
	}

	// Set property ‘RefField’:
	if embedded.RefField != nil {
		refFieldARM, err := (*embedded.RefField).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		refField := refFieldARM.(FakeResource_SubResourceEmbeddedARM)
		result.RefField = &refField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Left_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Left_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Left_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Left_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Left_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 LeftProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		embedded.Properties = &properties
	}

	// Set property ‘RefField’:
	if typedInput.RefField != nil {
		var refField1 FakeResource_SubResourceEmbedded
		err := refField1.PopulateFromARM(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refField := refField1
		embedded.RefField = &refField
	}

	// No error
	return nil
}

// AssignPropertiesFromLeftSubResourceEmbedded populates our Left_SubResourceEmbedded from the provided source Left_SubResourceEmbedded
func (embedded *Left_SubResourceEmbedded) AssignPropertiesFromLeftSubResourceEmbedded(source *v20200101s.Left_SubResourceEmbedded) error {

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property LeftProperties
		err := property.AssignPropertiesFromLeftProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLeftProperties() to populate field Properties")
		}
		embedded.Properties = &property
	} else {
		embedded.Properties = nil
	}

	// RefField
	if source.RefField != nil {
		var refField FakeResource_SubResourceEmbedded
		err := refField.AssignPropertiesFromFakeResourceSubResourceEmbedded(source.RefField)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFakeResourceSubResourceEmbedded() to populate field RefField")
		}
		embedded.RefField = &refField
	} else {
		embedded.RefField = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLeftSubResourceEmbedded populates the provided destination Left_SubResourceEmbedded from our Left_SubResourceEmbedded
func (embedded *Left_SubResourceEmbedded) AssignPropertiesToLeftSubResourceEmbedded(destination *v20200101s.Left_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// Properties
	if embedded.Properties != nil {
		var property v20200101s.LeftProperties
		err := embedded.Properties.AssignPropertiesToLeftProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLeftProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// RefField
	if embedded.RefField != nil {
		var refField v20200101s.FakeResource_SubResourceEmbedded
		err := embedded.RefField.AssignPropertiesToFakeResourceSubResourceEmbedded(&refField)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFakeResourceSubResourceEmbedded() to populate field RefField")
		}
		destination.RefField = &refField
	} else {
		destination.RefField = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/RightProperties
type RightPropertiesARM struct {
	StrField *string `json:"strField,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbedded_1 struct {
	Name       *string                             `json:"name,omitempty"`
	Properties *RightProperties                    `json:"properties,omitempty"`
	RefField   *FakeResource_SubResourceEmbedded_1 `json:"refField,omitempty"`
}

var _ genruntime.ARMTransformer = &Right_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded1 *Right_SubResourceEmbedded_1) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded1 == nil {
		return nil, nil
	}
	var result Right_SubResourceEmbedded_1ARM

	// Set property ‘Name’:
	if embedded1.Name != nil {
		name := *embedded1.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if embedded1.Properties != nil {
		propertiesARM, err := (*embedded1.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(RightPropertiesARM)
		result.Properties = &properties
	}

	// Set property ‘RefField’:
	if embedded1.RefField != nil {
		refFieldARM, err := (*embedded1.RefField).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		refField := refFieldARM.(FakeResource_SubResourceEmbedded_1ARM)
		result.RefField = &refField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded1 *Right_SubResourceEmbedded_1) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Right_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded1 *Right_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Right_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Right_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded1.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 RightProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		embedded1.Properties = &properties
	}

	// Set property ‘RefField’:
	if typedInput.RefField != nil {
		var refField1 FakeResource_SubResourceEmbedded_1
		err := refField1.PopulateFromARM(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refField := refField1
		embedded1.RefField = &refField
	}

	// No error
	return nil
}

// AssignPropertiesFromRightSubResourceEmbedded1 populates our Right_SubResourceEmbedded_1 from the provided source Right_SubResourceEmbedded_1
func (embedded1 *Right_SubResourceEmbedded_1) AssignPropertiesFromRightSubResourceEmbedded1(source *v20200101s.Right_SubResourceEmbedded_1) error {

	// Name
	embedded1.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property RightProperties
		err := property.AssignPropertiesFromRightProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRightProperties() to populate field Properties")
		}
		embedded1.Properties = &property
	} else {
		embedded1.Properties = nil
	}

	// RefField
	if source.RefField != nil {
		var refField FakeResource_SubResourceEmbedded_1
		err := refField.AssignPropertiesFromFakeResourceSubResourceEmbedded1(source.RefField)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFakeResourceSubResourceEmbedded1() to populate field RefField")
		}
		embedded1.RefField = &refField
	} else {
		embedded1.RefField = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRightSubResourceEmbedded1 populates the provided destination Right_SubResourceEmbedded_1 from our Right_SubResourceEmbedded_1
func (embedded1 *Right_SubResourceEmbedded_1) AssignPropertiesToRightSubResourceEmbedded1(destination *v20200101s.Right_SubResourceEmbedded_1) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded1.Name)

	// Properties
	if embedded1.Properties != nil {
		var property v20200101s.RightProperties
		err := embedded1.Properties.AssignPropertiesToRightProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRightProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// RefField
	if embedded1.RefField != nil {
		var refField v20200101s.FakeResource_SubResourceEmbedded_1
		err := embedded1.RefField.AssignPropertiesToFakeResourceSubResourceEmbedded1(&refField)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFakeResourceSubResourceEmbedded1() to populate field RefField")
		}
		destination.RefField = &refField
	} else {
		destination.RefField = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbeddedARM struct {
	Loop2 *Right_SubResourceEmbeddedARM `json:"loop2,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbedded_1ARM struct {
	Loop1 *Left_SubResourceEmbedded_1ARM `json:"loop1,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbedded struct {
	Name       *string                                     `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbedded `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *FakeResource_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result FakeResource_SubResourceEmbeddedARM

	// Set property ‘Name’:
	if embedded.Name != nil {
		name := *embedded.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if embedded.Properties != nil {
		propertiesARM, err := (*embedded.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(FakeResourceProperties_SubResourceEmbeddedARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *FakeResource_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *FakeResource_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 FakeResourceProperties_SubResourceEmbedded
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		embedded.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromFakeResourceSubResourceEmbedded populates our FakeResource_SubResourceEmbedded from the provided source FakeResource_SubResourceEmbedded
func (embedded *FakeResource_SubResourceEmbedded) AssignPropertiesFromFakeResourceSubResourceEmbedded(source *v20200101s.FakeResource_SubResourceEmbedded) error {

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property FakeResourceProperties_SubResourceEmbedded
		err := property.AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded() to populate field Properties")
		}
		embedded.Properties = &property
	} else {
		embedded.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFakeResourceSubResourceEmbedded populates the provided destination FakeResource_SubResourceEmbedded from our FakeResource_SubResourceEmbedded
func (embedded *FakeResource_SubResourceEmbedded) AssignPropertiesToFakeResourceSubResourceEmbedded(destination *v20200101s.FakeResource_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// Properties
	if embedded.Properties != nil {
		var property v20200101s.FakeResourceProperties_SubResourceEmbedded
		err := embedded.Properties.AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResource
type FakeResource_SubResourceEmbedded_1 struct {
	Name       *string                                       `json:"name,omitempty"`
	Properties *FakeResourceProperties_SubResourceEmbedded_1 `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded1 *FakeResource_SubResourceEmbedded_1) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded1 == nil {
		return nil, nil
	}
	var result FakeResource_SubResourceEmbedded_1ARM

	// Set property ‘Name’:
	if embedded1.Name != nil {
		name := *embedded1.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if embedded1.Properties != nil {
		propertiesARM, err := (*embedded1.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(FakeResourceProperties_SubResourceEmbedded_1ARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded1 *FakeResource_SubResourceEmbedded_1) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded1 *FakeResource_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded1.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 FakeResourceProperties_SubResourceEmbedded_1
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		embedded1.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromFakeResourceSubResourceEmbedded1 populates our FakeResource_SubResourceEmbedded_1 from the provided source FakeResource_SubResourceEmbedded_1
func (embedded1 *FakeResource_SubResourceEmbedded_1) AssignPropertiesFromFakeResourceSubResourceEmbedded1(source *v20200101s.FakeResource_SubResourceEmbedded_1) error {

	// Name
	embedded1.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property FakeResourceProperties_SubResourceEmbedded_1
		err := property.AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded1(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded1() to populate field Properties")
		}
		embedded1.Properties = &property
	} else {
		embedded1.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFakeResourceSubResourceEmbedded1 populates the provided destination FakeResource_SubResourceEmbedded_1 from our FakeResource_SubResourceEmbedded_1
func (embedded1 *FakeResource_SubResourceEmbedded_1) AssignPropertiesToFakeResourceSubResourceEmbedded1(destination *v20200101s.FakeResource_SubResourceEmbedded_1) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded1.Name)

	// Properties
	if embedded1.Properties != nil {
		var property v20200101s.FakeResourceProperties_SubResourceEmbedded_1
		err := embedded1.Properties.AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded1(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded1() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/LeftProperties
type LeftProperties struct {
	StrField *string `json:"strField,omitempty"`
}

var _ genruntime.ARMTransformer = &LeftProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *LeftProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result LeftPropertiesARM

	// Set property ‘StrField’:
	if properties.StrField != nil {
		strField := *properties.StrField
		result.StrField = &strField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *LeftProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LeftPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *LeftProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LeftPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LeftPropertiesARM, got %T", armInput)
	}

	// Set property ‘StrField’:
	if typedInput.StrField != nil {
		strField := *typedInput.StrField
		properties.StrField = &strField
	}

	// No error
	return nil
}

// AssignPropertiesFromLeftProperties populates our LeftProperties from the provided source LeftProperties
func (properties *LeftProperties) AssignPropertiesFromLeftProperties(source *v20200101s.LeftProperties) error {

	// StrField
	properties.StrField = genruntime.ClonePointerToString(source.StrField)

	// No error
	return nil
}

// AssignPropertiesToLeftProperties populates the provided destination LeftProperties from our LeftProperties
func (properties *LeftProperties) AssignPropertiesToLeftProperties(destination *v20200101s.LeftProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StrField
	destination.StrField = genruntime.ClonePointerToString(properties.StrField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/RightProperties
type RightProperties struct {
	StrField *string `json:"strField,omitempty"`
}

var _ genruntime.ARMTransformer = &RightProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *RightProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result RightPropertiesARM

	// Set property ‘StrField’:
	if properties.StrField != nil {
		strField := *properties.StrField
		result.StrField = &strField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *RightProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RightPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *RightProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RightPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RightPropertiesARM, got %T", armInput)
	}

	// Set property ‘StrField’:
	if typedInput.StrField != nil {
		strField := *typedInput.StrField
		properties.StrField = &strField
	}

	// No error
	return nil
}

// AssignPropertiesFromRightProperties populates our RightProperties from the provided source RightProperties
func (properties *RightProperties) AssignPropertiesFromRightProperties(source *v20200101s.RightProperties) error {

	// StrField
	properties.StrField = genruntime.ClonePointerToString(source.StrField)

	// No error
	return nil
}

// AssignPropertiesToRightProperties populates the provided destination RightProperties from our RightProperties
func (properties *RightProperties) AssignPropertiesToRightProperties(destination *v20200101s.RightProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StrField
	destination.StrField = genruntime.ClonePointerToString(properties.StrField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbedded struct {
	Loop2 *Right_SubResourceEmbedded `json:"loop2,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResourceProperties_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *FakeResourceProperties_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result FakeResourceProperties_SubResourceEmbeddedARM

	// Set property ‘Loop2’:
	if embedded.Loop2 != nil {
		loop2ARM, err := (*embedded.Loop2).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		loop2 := loop2ARM.(Right_SubResourceEmbeddedARM)
		result.Loop2 = &loop2
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *FakeResourceProperties_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResourceProperties_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *FakeResourceProperties_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResourceProperties_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResourceProperties_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Loop2’:
	if typedInput.Loop2 != nil {
		var loop Right_SubResourceEmbedded
		err := loop.PopulateFromARM(owner, *typedInput.Loop2)
		if err != nil {
			return err
		}
		loop2 := loop
		embedded.Loop2 = &loop2
	}

	// No error
	return nil
}

// AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded populates our FakeResourceProperties_SubResourceEmbedded from the provided source FakeResourceProperties_SubResourceEmbedded
func (embedded *FakeResourceProperties_SubResourceEmbedded) AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded(source *v20200101s.FakeResourceProperties_SubResourceEmbedded) error {

	// Loop2
	if source.Loop2 != nil {
		var loop2 Right_SubResourceEmbedded
		err := loop2.AssignPropertiesFromRightSubResourceEmbedded(source.Loop2)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRightSubResourceEmbedded() to populate field Loop2")
		}
		embedded.Loop2 = &loop2
	} else {
		embedded.Loop2 = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded populates the provided destination FakeResourceProperties_SubResourceEmbedded from our FakeResourceProperties_SubResourceEmbedded
func (embedded *FakeResourceProperties_SubResourceEmbedded) AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded(destination *v20200101s.FakeResourceProperties_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Loop2
	if embedded.Loop2 != nil {
		var loop2 v20200101s.Right_SubResourceEmbedded
		err := embedded.Loop2.AssignPropertiesToRightSubResourceEmbedded(&loop2)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRightSubResourceEmbedded() to populate field Loop2")
		}
		destination.Loop2 = &loop2
	} else {
		destination.Loop2 = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/FakeResourceProperties
type FakeResourceProperties_SubResourceEmbedded_1 struct {
	Loop1 *Left_SubResourceEmbedded_1 `json:"loop1,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResourceProperties_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded1 *FakeResourceProperties_SubResourceEmbedded_1) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded1 == nil {
		return nil, nil
	}
	var result FakeResourceProperties_SubResourceEmbedded_1ARM

	// Set property ‘Loop1’:
	if embedded1.Loop1 != nil {
		loop1ARM, err := (*embedded1.Loop1).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		loop1 := loop1ARM.(Left_SubResourceEmbedded_1ARM)
		result.Loop1 = &loop1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded1 *FakeResourceProperties_SubResourceEmbedded_1) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResourceProperties_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded1 *FakeResourceProperties_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResourceProperties_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResourceProperties_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Loop1’:
	if typedInput.Loop1 != nil {
		var loop Left_SubResourceEmbedded_1
		err := loop.PopulateFromARM(owner, *typedInput.Loop1)
		if err != nil {
			return err
		}
		loop1 := loop
		embedded1.Loop1 = &loop1
	}

	// No error
	return nil
}

// AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded1 populates our FakeResourceProperties_SubResourceEmbedded_1 from the provided source FakeResourceProperties_SubResourceEmbedded_1
func (embedded1 *FakeResourceProperties_SubResourceEmbedded_1) AssignPropertiesFromFakeResourcePropertiesSubResourceEmbedded1(source *v20200101s.FakeResourceProperties_SubResourceEmbedded_1) error {

	// Loop1
	if source.Loop1 != nil {
		var loop1 Left_SubResourceEmbedded_1
		err := loop1.AssignPropertiesFromLeftSubResourceEmbedded1(source.Loop1)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLeftSubResourceEmbedded1() to populate field Loop1")
		}
		embedded1.Loop1 = &loop1
	} else {
		embedded1.Loop1 = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded1 populates the provided destination FakeResourceProperties_SubResourceEmbedded_1 from our FakeResourceProperties_SubResourceEmbedded_1
func (embedded1 *FakeResourceProperties_SubResourceEmbedded_1) AssignPropertiesToFakeResourcePropertiesSubResourceEmbedded1(destination *v20200101s.FakeResourceProperties_SubResourceEmbedded_1) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Loop1
	if embedded1.Loop1 != nil {
		var loop1 v20200101s.Left_SubResourceEmbedded_1
		err := embedded1.Loop1.AssignPropertiesToLeftSubResourceEmbedded1(&loop1)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLeftSubResourceEmbedded1() to populate field Loop1")
		}
		destination.Loop1 = &loop1
	} else {
		destination.Loop1 = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbedded_1ARM struct {
	Name       *string            `json:"name,omitempty"`
	Properties *LeftPropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbeddedARM struct {
	Name       *string             `json:"name,omitempty"`
	Properties *RightPropertiesARM `json:"properties,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Left
type Left_SubResourceEmbedded_1 struct {
	Name       *string         `json:"name,omitempty"`
	Properties *LeftProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Left_SubResourceEmbedded_1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded1 *Left_SubResourceEmbedded_1) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded1 == nil {
		return nil, nil
	}
	var result Left_SubResourceEmbedded_1ARM

	// Set property ‘Name’:
	if embedded1.Name != nil {
		name := *embedded1.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if embedded1.Properties != nil {
		propertiesARM, err := (*embedded1.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(LeftPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded1 *Left_SubResourceEmbedded_1) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Left_SubResourceEmbedded_1ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded1 *Left_SubResourceEmbedded_1) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Left_SubResourceEmbedded_1ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Left_SubResourceEmbedded_1ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded1.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 LeftProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		embedded1.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromLeftSubResourceEmbedded1 populates our Left_SubResourceEmbedded_1 from the provided source Left_SubResourceEmbedded_1
func (embedded1 *Left_SubResourceEmbedded_1) AssignPropertiesFromLeftSubResourceEmbedded1(source *v20200101s.Left_SubResourceEmbedded_1) error {

	// Name
	embedded1.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property LeftProperties
		err := property.AssignPropertiesFromLeftProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLeftProperties() to populate field Properties")
		}
		embedded1.Properties = &property
	} else {
		embedded1.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLeftSubResourceEmbedded1 populates the provided destination Left_SubResourceEmbedded_1 from our Left_SubResourceEmbedded_1
func (embedded1 *Left_SubResourceEmbedded_1) AssignPropertiesToLeftSubResourceEmbedded1(destination *v20200101s.Left_SubResourceEmbedded_1) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded1.Name)

	// Properties
	if embedded1.Properties != nil {
		var property v20200101s.LeftProperties
		err := embedded1.Properties.AssignPropertiesToLeftProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLeftProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Right
type Right_SubResourceEmbedded struct {
	Name       *string          `json:"name,omitempty"`
	Properties *RightProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &Right_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *Right_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result Right_SubResourceEmbeddedARM

	// Set property ‘Name’:
	if embedded.Name != nil {
		name := *embedded.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if embedded.Properties != nil {
		propertiesARM, err := (*embedded.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(RightPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Right_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Right_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Right_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Right_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Right_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 RightProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		embedded.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromRightSubResourceEmbedded populates our Right_SubResourceEmbedded from the provided source Right_SubResourceEmbedded
func (embedded *Right_SubResourceEmbedded) AssignPropertiesFromRightSubResourceEmbedded(source *v20200101s.Right_SubResourceEmbedded) error {

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// Properties
	if source.Properties != nil {
		var property RightProperties
		err := property.AssignPropertiesFromRightProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRightProperties() to populate field Properties")
		}
		embedded.Properties = &property
	} else {
		embedded.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRightSubResourceEmbedded populates the provided destination Right_SubResourceEmbedded from our Right_SubResourceEmbedded
func (embedded *Right_SubResourceEmbedded) AssignPropertiesToRightSubResourceEmbedded(destination *v20200101s.Right_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// Properties
	if embedded.Properties != nil {
		var property v20200101s.RightProperties
		err := embedded.Properties.AssignPropertiesToRightProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRightProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&A{}, &AList{})
}
