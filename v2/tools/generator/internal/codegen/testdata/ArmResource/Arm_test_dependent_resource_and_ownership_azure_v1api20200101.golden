// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200101

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/testing/test/v1api20200101/arm"
	storage "github.com/Azure/azure-service-operator/testing/test/v1api20200101/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &A{}

// GetConditions returns the conditions of the resource
func (a *A) GetConditions() conditions.Conditions {
	return a.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (a *A) SetConditions(conditions conditions.Conditions) { a.Status.Conditions = conditions }

var _ conversion.Convertible = &A{}

// ConvertFrom populates our A from the provided hub A
func (a *A) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.A)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/A but received %T instead", hub)
	}

	return a.AssignProperties_From_A(source)
}

// ConvertTo populates the provided hub A from our A
func (a *A) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.A)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/A but received %T instead", hub)
	}

	return a.AssignProperties_To_A(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.as.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default() {
	a.defaultImpl()
	var temp any = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl() { a.defaultAzureName() }

var _ configmaps.Exporter = &A{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (a *A) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if a.Spec.OperatorSpec == nil {
		return nil
	}
	return a.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &A{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (a *A) SecretDestinationExpressions() []*core.DestinationExpression {
	if a.Spec.OperatorSpec == nil {
		return nil
	}
	return a.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (a A) GetAPIVersion() string {
	return "2020-01-01"
}

// GetResourceScope returns the scope of the resource
func (a *A) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (a *A) GetSpec() genruntime.ConvertibleSpec {
	return &a.Spec
}

// GetSupportedOperations returns the operations supported by the resource
func (a *A) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always ""
func (a *A) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return a.Spec.Owner.AsResourceReference(group, kind)
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.as.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate() (admission.Warnings, error) {
	validations := a.createValidations()
	var temp any = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete() (admission.Warnings, error) {
	validations := a.deleteValidations()
	var temp any = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := a.updateValidations()
	var temp any = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){a.validateResourceReferences, a.validateOwnerReference, a.validateSecretDestinations, a.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return a.validateResourceReferences()
		},
		a.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return a.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return a.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return a.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (a *A) validateConfigMapDestinations() (admission.Warnings, error) {
	if a.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(a, nil, a.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (a *A) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(a)
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&a.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (a *A) validateSecretDestinations() (admission.Warnings, error) {
	if a.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(a, nil, a.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (a *A) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*A)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, a)
}

// AssignProperties_From_A populates our A from the provided source A
func (a *A) AssignProperties_From_A(source *storage.A) error {

	// ObjectMeta
	a.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec A_Spec
	err := spec.AssignProperties_From_A_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_A_Spec() to populate field Spec")
	}
	a.Spec = spec

	// No error
	return nil
}

// AssignProperties_To_A populates the provided destination A from our A
func (a *A) AssignProperties_To_A(destination *storage.A) error {

	// ObjectMeta
	destination.ObjectMeta = *a.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.A_Spec
	err := a.Spec.AssignProperties_To_A_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_A_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (a *A) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: a.Spec.OriginalVersion(),
		Kind:    "A",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              B_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &B{}

// GetConditions returns the conditions of the resource
func (b *B) GetConditions() conditions.Conditions {
	return b.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (b *B) SetConditions(conditions conditions.Conditions) { b.Status.Conditions = conditions }

var _ conversion.Convertible = &B{}

// ConvertFrom populates our B from the provided hub B
func (b *B) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.B)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/B but received %T instead", hub)
	}

	return b.AssignProperties_From_B(source)
}

// ConvertTo populates the provided hub B from our B
func (b *B) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.B)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/B but received %T instead", hub)
	}

	return b.AssignProperties_To_B(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.bs.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &B{}

// Default applies defaults to the B resource
func (b *B) Default() {
	b.defaultImpl()
	var temp any = b
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (b *B) defaultAzureName() {
	if b.Spec.AzureName == "" {
		b.Spec.AzureName = b.Name
	}
}

// defaultImpl applies the code generated defaults to the B resource
func (b *B) defaultImpl() { b.defaultAzureName() }

var _ configmaps.Exporter = &B{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (b *B) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if b.Spec.OperatorSpec == nil {
		return nil
	}
	return b.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &B{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (b *B) SecretDestinationExpressions() []*core.DestinationExpression {
	if b.Spec.OperatorSpec == nil {
		return nil
	}
	return b.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &B{}

// AzureName returns the Azure name of the resource
func (b *B) AzureName() string {
	return b.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (b B) GetAPIVersion() string {
	return "2020-01-01"
}

// GetResourceScope returns the scope of the resource
func (b *B) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (b *B) GetSpec() genruntime.ConvertibleSpec {
	return &b.Spec
}

// GetSupportedOperations returns the operations supported by the resource
func (b *B) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always ""
func (b *B) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner
func (b *B) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(b.Spec)
	return b.Spec.Owner.AsResourceReference(group, kind)
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-b,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.bs.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &B{}

// ValidateCreate validates the creation of the resource
func (b *B) ValidateCreate() (admission.Warnings, error) {
	validations := b.createValidations()
	var temp any = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (b *B) ValidateDelete() (admission.Warnings, error) {
	validations := b.deleteValidations()
	var temp any = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (b *B) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := b.updateValidations()
	var temp any = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (b *B) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){b.validateResourceReferences, b.validateOwnerReference, b.validateSecretDestinations, b.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (b *B) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (b *B) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return b.validateResourceReferences()
		},
		b.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return b.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return b.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return b.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (b *B) validateConfigMapDestinations() (admission.Warnings, error) {
	if b.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(b, nil, b.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (b *B) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(b)
}

// validateResourceReferences validates all resource references
func (b *B) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&b.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (b *B) validateSecretDestinations() (admission.Warnings, error) {
	if b.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(b, nil, b.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (b *B) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*B)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, b)
}

// AssignProperties_From_B populates our B from the provided source B
func (b *B) AssignProperties_From_B(source *storage.B) error {

	// ObjectMeta
	b.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec B_Spec
	err := spec.AssignProperties_From_B_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_B_Spec() to populate field Spec")
	}
	b.Spec = spec

	// No error
	return nil
}

// AssignProperties_To_B populates the provided destination B from our B
func (b *B) AssignProperties_To_B(destination *storage.B) error {

	// ObjectMeta
	destination.ObjectMeta = *b.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.B_Spec
	err := b.Spec.AssignProperties_To_B_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_B_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (b *B) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: b.Spec.OriginalVersion(),
		Kind:    "B",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type BList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []B `json:"items"`
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type C struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              C_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &C{}

// GetConditions returns the conditions of the resource
func (c *C) GetConditions() conditions.Conditions {
	return c.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (c *C) SetConditions(conditions conditions.Conditions) { c.Status.Conditions = conditions }

var _ conversion.Convertible = &C{}

// ConvertFrom populates our C from the provided hub C
func (c *C) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.C)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/C but received %T instead", hub)
	}

	return c.AssignProperties_From_C(source)
}

// ConvertTo populates the provided hub C from our C
func (c *C) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.C)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/C but received %T instead", hub)
	}

	return c.AssignProperties_To_C(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-c,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.cs.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &C{}

// Default applies defaults to the C resource
func (c *C) Default() {
	c.defaultImpl()
	var temp any = c
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (c *C) defaultAzureName() {
	if c.Spec.AzureName == "" {
		c.Spec.AzureName = c.Name
	}
}

// defaultImpl applies the code generated defaults to the C resource
func (c *C) defaultImpl() { c.defaultAzureName() }

var _ configmaps.Exporter = &C{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (c *C) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if c.Spec.OperatorSpec == nil {
		return nil
	}
	return c.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &C{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (c *C) SecretDestinationExpressions() []*core.DestinationExpression {
	if c.Spec.OperatorSpec == nil {
		return nil
	}
	return c.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &C{}

// AzureName returns the Azure name of the resource
func (c *C) AzureName() string {
	return c.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (c C) GetAPIVersion() string {
	return "2020-01-01"
}

// GetResourceScope returns the scope of the resource
func (c *C) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (c *C) GetSpec() genruntime.ConvertibleSpec {
	return &c.Spec
}

// GetSupportedOperations returns the operations supported by the resource
func (c *C) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always ""
func (c *C) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner
func (c *C) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(c.Spec)
	return c.Spec.Owner.AsResourceReference(group, kind)
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-c,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.cs.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &C{}

// ValidateCreate validates the creation of the resource
func (c *C) ValidateCreate() (admission.Warnings, error) {
	validations := c.createValidations()
	var temp any = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (c *C) ValidateDelete() (admission.Warnings, error) {
	validations := c.deleteValidations()
	var temp any = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (c *C) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := c.updateValidations()
	var temp any = c
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (c *C) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){c.validateResourceReferences, c.validateOwnerReference, c.validateSecretDestinations, c.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (c *C) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (c *C) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return c.validateResourceReferences()
		},
		c.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return c.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return c.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return c.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (c *C) validateConfigMapDestinations() (admission.Warnings, error) {
	if c.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(c, nil, c.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (c *C) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(c)
}

// validateResourceReferences validates all resource references
func (c *C) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&c.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (c *C) validateSecretDestinations() (admission.Warnings, error) {
	if c.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(c, nil, c.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (c *C) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*C)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, c)
}

// AssignProperties_From_C populates our C from the provided source C
func (c *C) AssignProperties_From_C(source *storage.C) error {

	// ObjectMeta
	c.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec C_Spec
	err := spec.AssignProperties_From_C_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_C_Spec() to populate field Spec")
	}
	c.Spec = spec

	// No error
	return nil
}

// AssignProperties_To_C populates the provided destination C from our C
func (c *C) AssignProperties_To_C(destination *storage.C) error {

	// ObjectMeta
	destination.ObjectMeta = *c.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.C_Spec
	err := c.Spec.AssignProperties_To_C_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_C_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (c *C) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: c.Spec.OriginalVersion(),
		Kind:    "C",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/C
type CList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []C `json:"items"`
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/D
type D struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              D_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &D{}

// GetConditions returns the conditions of the resource
func (d *D) GetConditions() conditions.Conditions {
	return d.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (d *D) SetConditions(conditions conditions.Conditions) { d.Status.Conditions = conditions }

var _ conversion.Convertible = &D{}

// ConvertFrom populates our D from the provided hub D
func (d *D) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.D)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/D but received %T instead", hub)
	}

	return d.AssignProperties_From_D(source)
}

// ConvertTo populates the provided hub D from our D
func (d *D) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.D)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101/storage/D but received %T instead", hub)
	}

	return d.AssignProperties_To_D(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-d,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.ds.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &D{}

// Default applies defaults to the D resource
func (d *D) Default() {
	d.defaultImpl()
	var temp any = d
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (d *D) defaultAzureName() {
	if d.Spec.AzureName == "" {
		d.Spec.AzureName = d.Name
	}
}

// defaultImpl applies the code generated defaults to the D resource
func (d *D) defaultImpl() { d.defaultAzureName() }

var _ configmaps.Exporter = &D{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (d *D) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if d.Spec.OperatorSpec == nil {
		return nil
	}
	return d.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &D{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (d *D) SecretDestinationExpressions() []*core.DestinationExpression {
	if d.Spec.OperatorSpec == nil {
		return nil
	}
	return d.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &D{}

// AzureName returns the Azure name of the resource
func (d *D) AzureName() string {
	return d.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (d D) GetAPIVersion() string {
	return "2020-01-01"
}

// GetResourceScope returns the scope of the resource
func (d *D) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (d *D) GetSpec() genruntime.ConvertibleSpec {
	return &d.Spec
}

// GetSupportedOperations returns the operations supported by the resource
func (d *D) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always ""
func (d *D) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner
func (d *D) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(d.Spec)
	return d.Spec.Owner.AsResourceReference(group, kind)
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-d,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.ds.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &D{}

// ValidateCreate validates the creation of the resource
func (d *D) ValidateCreate() (admission.Warnings, error) {
	validations := d.createValidations()
	var temp any = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (d *D) ValidateDelete() (admission.Warnings, error) {
	validations := d.deleteValidations()
	var temp any = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (d *D) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := d.updateValidations()
	var temp any = d
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (d *D) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){d.validateResourceReferences, d.validateOwnerReference, d.validateSecretDestinations, d.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (d *D) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (d *D) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return d.validateResourceReferences()
		},
		d.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return d.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return d.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return d.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (d *D) validateConfigMapDestinations() (admission.Warnings, error) {
	if d.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(d, nil, d.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (d *D) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(d)
}

// validateResourceReferences validates all resource references
func (d *D) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&d.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (d *D) validateSecretDestinations() (admission.Warnings, error) {
	if d.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(d, nil, d.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (d *D) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*D)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, d)
}

// AssignProperties_From_D populates our D from the provided source D
func (d *D) AssignProperties_From_D(source *storage.D) error {

	// ObjectMeta
	d.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec D_Spec
	err := spec.AssignProperties_From_D_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_D_Spec() to populate field Spec")
	}
	d.Spec = spec

	// No error
	return nil
}

// AssignProperties_To_D populates the provided destination D from our D
func (d *D) AssignProperties_To_D(destination *storage.D) error {

	// ObjectMeta
	destination.ObjectMeta = *d.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.D_Spec
	err := d.Spec.AssignProperties_To_D_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_D_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (d *D) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: d.Spec.OriginalVersion(),
		Kind:    "D",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/D
type DList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []D `json:"items"`
}

type A_Spec struct {
	// +kubebuilder:validation:Required
	APIVersion A_APIVersion_Spec `json:"apiVersion,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *AOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type A_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &A_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (a *A_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if a == nil {
		return nil, nil
	}
	result := &arm.A_Spec{}

	// Set property "APIVersion":
	var temp string
	temp = string(a.APIVersion)
	result.APIVersion = arm.A_APIVersion_Spec(temp)

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Type":
	var typeTemp string
	typeTemp = string(a.Type)
	result.Type = arm.A_Type_Spec(typeTemp)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (a *A_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.A_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (a *A_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.A_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.A_Spec, got %T", armInput)
	}

	// Set property "APIVersion":
	var temp string
	temp = string(typedInput.APIVersion)
	a.APIVersion = A_APIVersion_Spec(temp)

	// Set property "AzureName":
	a.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	a.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Type":
	var typeTemp string
	typeTemp = string(typedInput.Type)
	a.Type = A_Type_Spec(typeTemp)

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &A_Spec{}

// ConvertSpecFrom populates our A_Spec from the provided source
func (a *A_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.A_Spec)
	if ok {
		// Populate our instance from source
		return a.AssignProperties_From_A_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.A_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = a.AssignProperties_From_A_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our A_Spec
func (a *A_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.A_Spec)
	if ok {
		// Populate destination from our instance
		return a.AssignProperties_To_A_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.A_Spec{}
	err := a.AssignProperties_To_A_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_A_Spec populates our A_Spec from the provided source A_Spec
func (a *A_Spec) AssignProperties_From_A_Spec(source *storage.A_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		a.APIVersion = genruntime.ToEnum(apiVersion, a_APIVersion_Spec_Values)
	} else {
		a.APIVersion = ""
	}

	// AzureName
	a.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec AOperatorSpec
		err := operatorSpec.AssignProperties_From_AOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_AOperatorSpec() to populate field OperatorSpec")
		}
		a.OperatorSpec = &operatorSpec
	} else {
		a.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		a.Owner = &owner
	} else {
		a.Owner = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		a.Type = genruntime.ToEnum(typeVar, a_Type_Spec_Values)
	} else {
		a.Type = ""
	}

	// No error
	return nil
}

// AssignProperties_To_A_Spec populates the provided destination A_Spec from our A_Spec
func (a *A_Spec) AssignProperties_To_A_Spec(destination *storage.A_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	apiVersion := string(a.APIVersion)
	destination.APIVersion = &apiVersion

	// AzureName
	destination.AzureName = a.AzureName

	// OperatorSpec
	if a.OperatorSpec != nil {
		var operatorSpec storage.AOperatorSpec
		err := a.OperatorSpec.AssignProperties_To_AOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_AOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = a.OriginalVersion()

	// Owner
	if a.Owner != nil {
		owner := a.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Type
	typeVar := string(a.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (a *A_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (a *A_Spec) SetAzureName(azureName string) { a.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-01-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-01-01")

type B_Spec struct {
	// +kubebuilder:validation:Required
	APIVersion B_APIVersion_Spec `json:"apiVersion,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *BOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type B_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &B_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (b *B_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if b == nil {
		return nil, nil
	}
	result := &arm.B_Spec{}

	// Set property "APIVersion":
	var temp string
	temp = string(b.APIVersion)
	result.APIVersion = arm.B_APIVersion_Spec(temp)

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Type":
	var typeTemp string
	typeTemp = string(b.Type)
	result.Type = arm.B_Type_Spec(typeTemp)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (b *B_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.B_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (b *B_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.B_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.B_Spec, got %T", armInput)
	}

	// Set property "APIVersion":
	var temp string
	temp = string(typedInput.APIVersion)
	b.APIVersion = B_APIVersion_Spec(temp)

	// Set property "AzureName":
	b.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	b.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Type":
	var typeTemp string
	typeTemp = string(typedInput.Type)
	b.Type = B_Type_Spec(typeTemp)

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &B_Spec{}

// ConvertSpecFrom populates our B_Spec from the provided source
func (b *B_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.B_Spec)
	if ok {
		// Populate our instance from source
		return b.AssignProperties_From_B_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.B_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = b.AssignProperties_From_B_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our B_Spec
func (b *B_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.B_Spec)
	if ok {
		// Populate destination from our instance
		return b.AssignProperties_To_B_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.B_Spec{}
	err := b.AssignProperties_To_B_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_B_Spec populates our B_Spec from the provided source B_Spec
func (b *B_Spec) AssignProperties_From_B_Spec(source *storage.B_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		b.APIVersion = genruntime.ToEnum(apiVersion, b_APIVersion_Spec_Values)
	} else {
		b.APIVersion = ""
	}

	// AzureName
	b.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec BOperatorSpec
		err := operatorSpec.AssignProperties_From_BOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_BOperatorSpec() to populate field OperatorSpec")
		}
		b.OperatorSpec = &operatorSpec
	} else {
		b.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		b.Owner = &owner
	} else {
		b.Owner = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		b.Type = genruntime.ToEnum(typeVar, b_Type_Spec_Values)
	} else {
		b.Type = ""
	}

	// No error
	return nil
}

// AssignProperties_To_B_Spec populates the provided destination B_Spec from our B_Spec
func (b *B_Spec) AssignProperties_To_B_Spec(destination *storage.B_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	apiVersion := string(b.APIVersion)
	destination.APIVersion = &apiVersion

	// AzureName
	destination.AzureName = b.AzureName

	// OperatorSpec
	if b.OperatorSpec != nil {
		var operatorSpec storage.BOperatorSpec
		err := b.OperatorSpec.AssignProperties_To_BOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_BOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = b.OriginalVersion()

	// Owner
	if b.Owner != nil {
		owner := b.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Type
	typeVar := string(b.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (b *B_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (b *B_Spec) SetAzureName(azureName string) { b.AzureName = azureName }

type C_Spec struct {
	// +kubebuilder:validation:Required
	APIVersion C_APIVersion_Spec `json:"apiVersion,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *COperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type C_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &C_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (c *C_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if c == nil {
		return nil, nil
	}
	result := &arm.C_Spec{}

	// Set property "APIVersion":
	var temp string
	temp = string(c.APIVersion)
	result.APIVersion = arm.C_APIVersion_Spec(temp)

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Type":
	var typeTemp string
	typeTemp = string(c.Type)
	result.Type = arm.C_Type_Spec(typeTemp)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (c *C_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.C_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (c *C_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.C_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.C_Spec, got %T", armInput)
	}

	// Set property "APIVersion":
	var temp string
	temp = string(typedInput.APIVersion)
	c.APIVersion = C_APIVersion_Spec(temp)

	// Set property "AzureName":
	c.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	c.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Type":
	var typeTemp string
	typeTemp = string(typedInput.Type)
	c.Type = C_Type_Spec(typeTemp)

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &C_Spec{}

// ConvertSpecFrom populates our C_Spec from the provided source
func (c *C_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.C_Spec)
	if ok {
		// Populate our instance from source
		return c.AssignProperties_From_C_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.C_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = c.AssignProperties_From_C_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our C_Spec
func (c *C_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.C_Spec)
	if ok {
		// Populate destination from our instance
		return c.AssignProperties_To_C_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.C_Spec{}
	err := c.AssignProperties_To_C_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_C_Spec populates our C_Spec from the provided source C_Spec
func (c *C_Spec) AssignProperties_From_C_Spec(source *storage.C_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		c.APIVersion = genruntime.ToEnum(apiVersion, c_APIVersion_Spec_Values)
	} else {
		c.APIVersion = ""
	}

	// AzureName
	c.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec COperatorSpec
		err := operatorSpec.AssignProperties_From_COperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_COperatorSpec() to populate field OperatorSpec")
		}
		c.OperatorSpec = &operatorSpec
	} else {
		c.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		c.Owner = &owner
	} else {
		c.Owner = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		c.Type = genruntime.ToEnum(typeVar, c_Type_Spec_Values)
	} else {
		c.Type = ""
	}

	// No error
	return nil
}

// AssignProperties_To_C_Spec populates the provided destination C_Spec from our C_Spec
func (c *C_Spec) AssignProperties_To_C_Spec(destination *storage.C_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	apiVersion := string(c.APIVersion)
	destination.APIVersion = &apiVersion

	// AzureName
	destination.AzureName = c.AzureName

	// OperatorSpec
	if c.OperatorSpec != nil {
		var operatorSpec storage.COperatorSpec
		err := c.OperatorSpec.AssignProperties_To_COperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_COperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = c.OriginalVersion()

	// Owner
	if c.Owner != nil {
		owner := c.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Type
	typeVar := string(c.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (c *C_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (c *C_Spec) SetAzureName(azureName string) { c.AzureName = azureName }

type D_Spec struct {
	// +kubebuilder:validation:Required
	APIVersion D_APIVersion_Spec `json:"apiVersion,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *DOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type D_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &D_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (d *D_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if d == nil {
		return nil, nil
	}
	result := &arm.D_Spec{}

	// Set property "APIVersion":
	var temp string
	temp = string(d.APIVersion)
	result.APIVersion = arm.D_APIVersion_Spec(temp)

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Type":
	var typeTemp string
	typeTemp = string(d.Type)
	result.Type = arm.D_Type_Spec(typeTemp)
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (d *D_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.D_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (d *D_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.D_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.D_Spec, got %T", armInput)
	}

	// Set property "APIVersion":
	var temp string
	temp = string(typedInput.APIVersion)
	d.APIVersion = D_APIVersion_Spec(temp)

	// Set property "AzureName":
	d.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	d.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Type":
	var typeTemp string
	typeTemp = string(typedInput.Type)
	d.Type = D_Type_Spec(typeTemp)

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &D_Spec{}

// ConvertSpecFrom populates our D_Spec from the provided source
func (d *D_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.D_Spec)
	if ok {
		// Populate our instance from source
		return d.AssignProperties_From_D_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.D_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = d.AssignProperties_From_D_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our D_Spec
func (d *D_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.D_Spec)
	if ok {
		// Populate destination from our instance
		return d.AssignProperties_To_D_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.D_Spec{}
	err := d.AssignProperties_To_D_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_D_Spec populates our D_Spec from the provided source D_Spec
func (d *D_Spec) AssignProperties_From_D_Spec(source *storage.D_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		d.APIVersion = genruntime.ToEnum(apiVersion, d_APIVersion_Spec_Values)
	} else {
		d.APIVersion = ""
	}

	// AzureName
	d.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec DOperatorSpec
		err := operatorSpec.AssignProperties_From_DOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_DOperatorSpec() to populate field OperatorSpec")
		}
		d.OperatorSpec = &operatorSpec
	} else {
		d.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		d.Owner = &owner
	} else {
		d.Owner = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		d.Type = genruntime.ToEnum(typeVar, d_Type_Spec_Values)
	} else {
		d.Type = ""
	}

	// No error
	return nil
}

// AssignProperties_To_D_Spec populates the provided destination D_Spec from our D_Spec
func (d *D_Spec) AssignProperties_To_D_Spec(destination *storage.D_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	apiVersion := string(d.APIVersion)
	destination.APIVersion = &apiVersion

	// AzureName
	destination.AzureName = d.AzureName

	// OperatorSpec
	if d.OperatorSpec != nil {
		var operatorSpec storage.DOperatorSpec
		err := d.OperatorSpec.AssignProperties_To_DOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_DOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = d.OriginalVersion()

	// Owner
	if d.Owner != nil {
		owner := d.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Type
	typeVar := string(d.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (d *D_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (d *D_Spec) SetAzureName(azureName string) { d.AzureName = azureName }

// +kubebuilder:validation:Enum={"2020-06-01"}
type A_APIVersion_Spec string

const A_APIVersion_Spec_20200601 = A_APIVersion_Spec("2020-06-01")

// Mapping from string to A_APIVersion_Spec
var a_APIVersion_Spec_Values = map[string]A_APIVersion_Spec{
	"2020-06-01": A_APIVersion_Spec_20200601,
}

// +kubebuilder:validation:Enum={"Microsoft.Azure/A"}
type A_Type_Spec string

const A_Type_Spec_MicrosoftAzureA = A_Type_Spec("Microsoft.Azure/A")

// Mapping from string to A_Type_Spec
var a_Type_Spec_Values = map[string]A_Type_Spec{
	"microsoft.azure/a": A_Type_Spec_MicrosoftAzureA,
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type AOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_AOperatorSpec populates our AOperatorSpec from the provided source AOperatorSpec
func (operator *AOperatorSpec) AssignProperties_From_AOperatorSpec(source *storage.AOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AOperatorSpec populates the provided destination AOperatorSpec from our AOperatorSpec
func (operator *AOperatorSpec) AssignProperties_To_AOperatorSpec(destination *storage.AOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type B_APIVersion_Spec string

const B_APIVersion_Spec_20200601 = B_APIVersion_Spec("2020-06-01")

// Mapping from string to B_APIVersion_Spec
var b_APIVersion_Spec_Values = map[string]B_APIVersion_Spec{
	"2020-06-01": B_APIVersion_Spec_20200601,
}

// +kubebuilder:validation:Enum={"Microsoft.Azure/B"}
type B_Type_Spec string

const B_Type_Spec_MicrosoftAzureB = B_Type_Spec("Microsoft.Azure/B")

// Mapping from string to B_Type_Spec
var b_Type_Spec_Values = map[string]B_Type_Spec{
	"microsoft.azure/b": B_Type_Spec_MicrosoftAzureB,
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type BOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_BOperatorSpec populates our BOperatorSpec from the provided source BOperatorSpec
func (operator *BOperatorSpec) AssignProperties_From_BOperatorSpec(source *storage.BOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_BOperatorSpec populates the provided destination BOperatorSpec from our BOperatorSpec
func (operator *BOperatorSpec) AssignProperties_To_BOperatorSpec(destination *storage.BOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type C_APIVersion_Spec string

const C_APIVersion_Spec_20200601 = C_APIVersion_Spec("2020-06-01")

// Mapping from string to C_APIVersion_Spec
var c_APIVersion_Spec_Values = map[string]C_APIVersion_Spec{
	"2020-06-01": C_APIVersion_Spec_20200601,
}

// +kubebuilder:validation:Enum={"Microsoft.Azure/C"}
type C_Type_Spec string

const C_Type_Spec_MicrosoftAzureC = C_Type_Spec("Microsoft.Azure/C")

// Mapping from string to C_Type_Spec
var c_Type_Spec_Values = map[string]C_Type_Spec{
	"microsoft.azure/c": C_Type_Spec_MicrosoftAzureC,
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type COperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_COperatorSpec populates our COperatorSpec from the provided source COperatorSpec
func (operator *COperatorSpec) AssignProperties_From_COperatorSpec(source *storage.COperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_COperatorSpec populates the provided destination COperatorSpec from our COperatorSpec
func (operator *COperatorSpec) AssignProperties_To_COperatorSpec(destination *storage.COperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type D_APIVersion_Spec string

const D_APIVersion_Spec_20200601 = D_APIVersion_Spec("2020-06-01")

// Mapping from string to D_APIVersion_Spec
var d_APIVersion_Spec_Values = map[string]D_APIVersion_Spec{
	"2020-06-01": D_APIVersion_Spec_20200601,
}

// +kubebuilder:validation:Enum={"Microsoft.Azure/D"}
type D_Type_Spec string

const D_Type_Spec_MicrosoftAzureD = D_Type_Spec("Microsoft.Azure/D")

// Mapping from string to D_Type_Spec
var d_Type_Spec_Values = map[string]D_Type_Spec{
	"microsoft.azure/d": D_Type_Spec_MicrosoftAzureD,
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type DOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_DOperatorSpec populates our DOperatorSpec from the provided source DOperatorSpec
func (operator *DOperatorSpec) AssignProperties_From_DOperatorSpec(source *storage.DOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DOperatorSpec populates the provided destination DOperatorSpec from our DOperatorSpec
func (operator *DOperatorSpec) AssignProperties_To_DOperatorSpec(destination *storage.DOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&A{}, &AList{}, &B{}, &BList{}, &C{}, &CList{}, &D{}, &DList{})
}
