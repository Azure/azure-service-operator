// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200101

import (
	"fmt"
	v1api20200101s "github.com/Azure/azure-service-operator/testing/test/v1api20200101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (resource *FakeResource) GetConditions() conditions.Conditions {
	return resource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (resource *FakeResource) SetConditions(conditions conditions.Conditions) {
	resource.Status.Conditions = conditions
}

var _ conversion.Convertible = &FakeResource{}

// ConvertFrom populates our FakeResource from the provided hub FakeResource
func (resource *FakeResource) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1api20200101s.FakeResource)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101storage/FakeResource but received %T instead", hub)
	}

	return resource.AssignProperties_From_FakeResource(source)
}

// ConvertTo populates the provided hub FakeResource from our FakeResource
func (resource *FakeResource) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1api20200101s.FakeResource)
	if !ok {
		return fmt.Errorf("expected test/v1api20200101storage/FakeResource but received %T instead", hub)
	}

	return resource.AssignProperties_To_FakeResource(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (resource *FakeResource) Default() {
	resource.defaultImpl()
	var temp any = resource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (resource *FakeResource) defaultAzureName() {
	if resource.Spec.AzureName == "" {
		resource.Spec.AzureName = resource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (resource *FakeResource) defaultImpl() { resource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (resource *FakeResource) AzureName() string {
	return resource.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (resource FakeResource) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (resource *FakeResource) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (resource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &resource.Spec
}

// GetType returns the ARM Type of the resource. This is always ""
func (resource *FakeResource) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner
func (resource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(resource.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  resource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (resource *FakeResource) ValidateCreate() (admission.Warnings, error) {
	validations := resource.createValidations()
	var temp any = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (resource *FakeResource) ValidateDelete() (admission.Warnings, error) {
	validations := resource.deleteValidations()
	var temp any = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (resource *FakeResource) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := resource.updateValidations()
	var temp any = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (resource *FakeResource) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){resource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (resource *FakeResource) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (resource *FakeResource) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return resource.validateResourceReferences()
		},
		resource.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (resource *FakeResource) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&resource.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (resource *FakeResource) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*FakeResource)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, resource)
}

// AssignProperties_From_FakeResource populates our FakeResource from the provided source FakeResource
func (resource *FakeResource) AssignProperties_From_FakeResource(source *v1api20200101s.FakeResource) error {

	// ObjectMeta
	resource.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FakeResource_Spec
	err := spec.AssignProperties_From_FakeResource_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_FakeResource_Spec() to populate field Spec")
	}
	resource.Spec = spec

	// No error
	return nil
}

// AssignProperties_To_FakeResource populates the provided destination FakeResource from our FakeResource
func (resource *FakeResource) AssignProperties_To_FakeResource(destination *v1api20200101s.FakeResource) error {

	// ObjectMeta
	destination.ObjectMeta = *resource.ObjectMeta.DeepCopy()

	// Spec
	var spec v1api20200101s.FakeResource_Spec
	err := resource.Spec.AssignProperties_To_FakeResource_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_FakeResource_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (resource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: resource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_Spec_ARM struct {
	APIVersion               FakeResource_APIVersion_Spec             `json:"apiVersion,omitempty"`
	MapFoo                   map[string]Foo_ARM                       `json:"mapFoo,omitempty"`
	MapOfArrays              map[string][]Foo_ARM                     `json:"mapOfArrays,omitempty"`
	MapOfEnums               map[string]Color                         `json:"mapOfEnums,omitempty"`
	MapOfMaps                map[string]map[string]Foo_ARM            `json:"mapOfMaps,omitempty"`
	MapOfMapsOfMaps          map[string]map[string]map[string]Foo_ARM `json:"mapOfMapsOfMaps,omitempty"`
	MapOfMapsOfMapsOfStrings map[string]map[string]map[string]string  `json:"mapOfMapsOfMapsOfStrings,omitempty"`
	MapOfStrings             map[string]string                        `json:"mapOfStrings,omitempty"`
	Name                     string                                   `json:"name,omitempty"`
	Type                     FakeResource_Type_Spec                   `json:"type,omitempty"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-01-01"
func (resource FakeResource_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (resource *FakeResource_Spec_ARM) GetName() string {
	return resource.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (resource *FakeResource_Spec_ARM) GetType() string {
	return ""
}

// +kubebuilder:validation:Enum={"2020-01-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-01-01")

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	Color_Blue  = Color("blue")
	Color_Green = Color("green")
	Color_Red   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResource_APIVersion_Spec string

const FakeResource_APIVersion_Spec_20200601 = FakeResource_APIVersion_Spec("2020-06-01")

type FakeResource_Spec struct {
	// +kubebuilder:validation:Required
	APIVersion FakeResource_APIVersion_Spec `json:"apiVersion,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	MapFoo                   map[string]Foo                          `json:"mapFoo,omitempty"`
	MapOfArrays              map[string][]Foo                        `json:"mapOfArrays,omitempty"`
	MapOfEnums               map[string]Color                        `json:"mapOfEnums,omitempty"`
	MapOfMaps                map[string]map[string]Foo               `json:"mapOfMaps,omitempty"`
	MapOfMapsOfMaps          map[string]map[string]map[string]Foo    `json:"mapOfMapsOfMaps,omitempty"`
	MapOfMapsOfMapsOfStrings map[string]map[string]map[string]string `json:"mapOfMapsOfMapsOfStrings,omitempty"`
	MapOfStrings             map[string]string                       `json:"mapOfStrings,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type FakeResource_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &FakeResource_Spec_ARM{}

	// Set property "APIVersion":
	result.APIVersion = resource.APIVersion

	// Set property "MapFoo":
	if resource.MapFoo != nil {
		result.MapFoo = make(map[string]Foo_ARM, len(resource.MapFoo))
		for key, value := range resource.MapFoo {
			value_ARM, err := value.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			result.MapFoo[key] = *value_ARM.(*Foo_ARM)
		}
	}

	// Set property "MapOfArrays":
	if resource.MapOfArrays != nil {
		result.MapOfArrays = make(map[string][]Foo_ARM, len(resource.MapOfArrays))
		for key, value := range resource.MapOfArrays {
			var valueTemp []Foo_ARM
			for _, item := range value {
				item_ARM, err := item.ConvertToARM(resolved)
				if err != nil {
					return nil, err
				}
				valueTemp = append(valueTemp, *item_ARM.(*Foo_ARM))
			}
			result.MapOfArrays[key] = valueTemp
		}
	}

	// Set property "MapOfEnums":
	if resource.MapOfEnums != nil {
		result.MapOfEnums = make(map[string]Color, len(resource.MapOfEnums))
		for key, value := range resource.MapOfEnums {
			result.MapOfEnums[key] = value
		}
	}

	// Set property "MapOfMaps":
	if resource.MapOfMaps != nil {
		result.MapOfMaps = make(map[string]map[string]Foo_ARM, len(resource.MapOfMaps))
		for key, value := range resource.MapOfMaps {
			if value != nil {
				valueTemp := make(map[string]Foo_ARM, len(value))
				for valueKey, value1 := range value {
					value1_ARM, err := value1.ConvertToARM(resolved)
					if err != nil {
						return nil, err
					}
					valueTemp[valueKey] = *value1_ARM.(*Foo_ARM)
				}
				result.MapOfMaps[key] = valueTemp
			}
		}
	}

	// Set property "MapOfMapsOfMaps":
	if resource.MapOfMapsOfMaps != nil {
		result.MapOfMapsOfMaps = make(map[string]map[string]map[string]Foo_ARM, len(resource.MapOfMapsOfMaps))
		for key, value := range resource.MapOfMapsOfMaps {
			if value != nil {
				valueTemp := make(map[string]map[string]Foo_ARM, len(value))
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]Foo_ARM, len(value1))
						for valueKey1, value2 := range value1 {
							value2_ARM, err := value2.ConvertToARM(resolved)
							if err != nil {
								return nil, err
							}
							value1Temp[valueKey1] = *value2_ARM.(*Foo_ARM)
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				result.MapOfMapsOfMaps[key] = valueTemp
			}
		}
	}

	// Set property "MapOfMapsOfMapsOfStrings":
	if resource.MapOfMapsOfMapsOfStrings != nil {
		result.MapOfMapsOfMapsOfStrings = make(map[string]map[string]map[string]string, len(resource.MapOfMapsOfMapsOfStrings))
		for key, value := range resource.MapOfMapsOfMapsOfStrings {
			if value != nil {
				valueTemp := make(map[string]map[string]string, len(value))
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]string, len(value1))
						for valueKey1, value2 := range value1 {
							value1Temp[valueKey1] = value2
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				result.MapOfMapsOfMapsOfStrings[key] = valueTemp
			}
		}
	}

	// Set property "MapOfStrings":
	if resource.MapOfStrings != nil {
		result.MapOfStrings = make(map[string]string, len(resource.MapOfStrings))
		for key, value := range resource.MapOfStrings {
			result.MapOfStrings[key] = value
		}
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Type":
	result.Type = resource.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *FakeResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_Spec_ARM, got %T", armInput)
	}

	// Set property "APIVersion":
	resource.APIVersion = typedInput.APIVersion

	// Set property "AzureName":
	resource.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "MapFoo":
	if typedInput.MapFoo != nil {
		resource.MapFoo = make(map[string]Foo, len(typedInput.MapFoo))
		for key, value := range typedInput.MapFoo {
			var value1 Foo
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			resource.MapFoo[key] = value1
		}
	}

	// Set property "MapOfArrays":
	if typedInput.MapOfArrays != nil {
		resource.MapOfArrays = make(map[string][]Foo, len(typedInput.MapOfArrays))
		for key, value := range typedInput.MapOfArrays {
			var valueTemp []Foo
			for _, item := range value {
				var item1 Foo
				err := item1.PopulateFromARM(owner, item)
				if err != nil {
					return err
				}
				valueTemp = append(valueTemp, item1)
			}
			resource.MapOfArrays[key] = valueTemp
		}
	}

	// Set property "MapOfEnums":
	if typedInput.MapOfEnums != nil {
		resource.MapOfEnums = make(map[string]Color, len(typedInput.MapOfEnums))
		for key, value := range typedInput.MapOfEnums {
			resource.MapOfEnums[key] = value
		}
	}

	// Set property "MapOfMaps":
	if typedInput.MapOfMaps != nil {
		resource.MapOfMaps = make(map[string]map[string]Foo, len(typedInput.MapOfMaps))
		for key, value := range typedInput.MapOfMaps {
			if value != nil {
				valueTemp := make(map[string]Foo, len(value))
				for valueKey, value1 := range value {
					var value2 Foo
					err := value2.PopulateFromARM(owner, value1)
					if err != nil {
						return err
					}
					valueTemp[valueKey] = value2
				}
				resource.MapOfMaps[key] = valueTemp
			}
		}
	}

	// Set property "MapOfMapsOfMaps":
	if typedInput.MapOfMapsOfMaps != nil {
		resource.MapOfMapsOfMaps = make(map[string]map[string]map[string]Foo, len(typedInput.MapOfMapsOfMaps))
		for key, value := range typedInput.MapOfMapsOfMaps {
			if value != nil {
				valueTemp := make(map[string]map[string]Foo, len(value))
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]Foo, len(value1))
						for valueKey1, value2 := range value1 {
							var value3 Foo
							err := value3.PopulateFromARM(owner, value2)
							if err != nil {
								return err
							}
							value1Temp[valueKey1] = value3
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				resource.MapOfMapsOfMaps[key] = valueTemp
			}
		}
	}

	// Set property "MapOfMapsOfMapsOfStrings":
	if typedInput.MapOfMapsOfMapsOfStrings != nil {
		resource.MapOfMapsOfMapsOfStrings = make(map[string]map[string]map[string]string, len(typedInput.MapOfMapsOfMapsOfStrings))
		for key, value := range typedInput.MapOfMapsOfMapsOfStrings {
			if value != nil {
				valueTemp := make(map[string]map[string]string, len(value))
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]string, len(value1))
						for valueKey1, value2 := range value1 {
							value1Temp[valueKey1] = value2
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				resource.MapOfMapsOfMapsOfStrings[key] = valueTemp
			}
		}
	}

	// Set property "MapOfStrings":
	if typedInput.MapOfStrings != nil {
		resource.MapOfStrings = make(map[string]string, len(typedInput.MapOfStrings))
		for key, value := range typedInput.MapOfStrings {
			resource.MapOfStrings[key] = value
		}
	}

	// Set property "Owner":
	resource.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property "Type":
	resource.Type = typedInput.Type

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_Spec{}

// ConvertSpecFrom populates our FakeResource_Spec from the provided source
func (resource *FakeResource_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1api20200101s.FakeResource_Spec)
	if ok {
		// Populate our instance from source
		return resource.AssignProperties_From_FakeResource_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1api20200101s.FakeResource_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = resource.AssignProperties_From_FakeResource_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FakeResource_Spec
func (resource *FakeResource_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1api20200101s.FakeResource_Spec)
	if ok {
		// Populate destination from our instance
		return resource.AssignProperties_To_FakeResource_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20200101s.FakeResource_Spec{}
	err := resource.AssignProperties_To_FakeResource_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_FakeResource_Spec populates our FakeResource_Spec from the provided source FakeResource_Spec
func (resource *FakeResource_Spec) AssignProperties_From_FakeResource_Spec(source *v1api20200101s.FakeResource_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		resource.APIVersion = FakeResource_APIVersion_Spec(*source.APIVersion)
	} else {
		resource.APIVersion = ""
	}

	// AzureName
	resource.AzureName = source.AzureName

	// MapFoo
	if source.MapFoo != nil {
		mapFooMap := make(map[string]Foo, len(source.MapFoo))
		for mapFooKey, mapFooValue := range source.MapFoo {
			// Shadow the loop variable to avoid aliasing
			mapFooValue := mapFooValue
			var mapFoo Foo
			err := mapFoo.AssignProperties_From_Foo(&mapFooValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field MapFoo")
			}
			mapFooMap[mapFooKey] = mapFoo
		}
		resource.MapFoo = mapFooMap
	} else {
		resource.MapFoo = nil
	}

	// MapOfArrays
	if source.MapOfArrays != nil {
		mapOfArrayMap := make(map[string][]Foo, len(source.MapOfArrays))
		for mapOfArrayKey, mapOfArrayValue := range source.MapOfArrays {
			// Shadow the loop variable to avoid aliasing
			mapOfArrayValue := mapOfArrayValue
			if mapOfArrayValue != nil {
				mapOfArrayList := make([]Foo, len(mapOfArrayValue))
				for mapOfArrayIndex, mapOfArrayItem := range mapOfArrayValue {
					// Shadow the loop variable to avoid aliasing
					mapOfArrayItem := mapOfArrayItem
					var mapOfArray Foo
					err := mapOfArray.AssignProperties_From_Foo(&mapOfArrayItem)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field MapOfArrays")
					}
					mapOfArrayList[mapOfArrayIndex] = mapOfArray
				}
				mapOfArrayMap[mapOfArrayKey] = mapOfArrayList
			} else {
				mapOfArrayMap[mapOfArrayKey] = nil
			}
		}
		resource.MapOfArrays = mapOfArrayMap
	} else {
		resource.MapOfArrays = nil
	}

	// MapOfEnums
	if source.MapOfEnums != nil {
		mapOfEnumMap := make(map[string]Color, len(source.MapOfEnums))
		for mapOfEnumKey, mapOfEnumValue := range source.MapOfEnums {
			// Shadow the loop variable to avoid aliasing
			mapOfEnumValue := mapOfEnumValue
			mapOfEnumMap[mapOfEnumKey] = Color(mapOfEnumValue)
		}
		resource.MapOfEnums = mapOfEnumMap
	} else {
		resource.MapOfEnums = nil
	}

	// MapOfMaps
	if source.MapOfMaps != nil {
		mapOfMap := make(map[string]map[string]Foo, len(source.MapOfMaps))
		for mapOfMapKey, mapOfMapValue := range source.MapOfMaps {
			// Shadow the loop variable to avoid aliasing
			mapOfMapValue := mapOfMapValue
			if mapOfMapValue != nil {
				mapOfMap1 := make(map[string]Foo, len(mapOfMapValue))
				for mapOfMapKey1, mapOfMapValue1 := range mapOfMapValue {
					// Shadow the loop variable to avoid aliasing
					mapOfMapValue1 := mapOfMapValue1
					var mapOfMapLocal Foo
					err := mapOfMapLocal.AssignProperties_From_Foo(&mapOfMapValue1)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field MapOfMaps")
					}
					mapOfMap1[mapOfMapKey1] = mapOfMapLocal
				}
				mapOfMap[mapOfMapKey] = mapOfMap1
			} else {
				mapOfMap[mapOfMapKey] = nil
			}
		}
		resource.MapOfMaps = mapOfMap
	} else {
		resource.MapOfMaps = nil
	}

	// MapOfMapsOfMaps
	if source.MapOfMapsOfMaps != nil {
		mapOfMapsOfMap := make(map[string]map[string]map[string]Foo, len(source.MapOfMapsOfMaps))
		for mapOfMapsOfMapKey, mapOfMapsOfMapValue := range source.MapOfMapsOfMaps {
			// Shadow the loop variable to avoid aliasing
			mapOfMapsOfMapValue := mapOfMapsOfMapValue
			if mapOfMapsOfMapValue != nil {
				mapOfMapsOfMap1 := make(map[string]map[string]Foo, len(mapOfMapsOfMapValue))
				for mapOfMapsOfMapKey1, mapOfMapsOfMapValue1 := range mapOfMapsOfMapValue {
					// Shadow the loop variable to avoid aliasing
					mapOfMapsOfMapValue1 := mapOfMapsOfMapValue1
					if mapOfMapsOfMapValue1 != nil {
						mapOfMapsOfMap2 := make(map[string]Foo, len(mapOfMapsOfMapValue1))
						for mapOfMapsOfMapKey2, mapOfMapsOfMapValue2 := range mapOfMapsOfMapValue1 {
							// Shadow the loop variable to avoid aliasing
							mapOfMapsOfMapValue2 := mapOfMapsOfMapValue2
							var mapOfMapsOfMapLocal Foo
							err := mapOfMapsOfMapLocal.AssignProperties_From_Foo(&mapOfMapsOfMapValue2)
							if err != nil {
								return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field MapOfMapsOfMaps")
							}
							mapOfMapsOfMap2[mapOfMapsOfMapKey2] = mapOfMapsOfMapLocal
						}
						mapOfMapsOfMap1[mapOfMapsOfMapKey1] = mapOfMapsOfMap2
					} else {
						mapOfMapsOfMap1[mapOfMapsOfMapKey1] = nil
					}
				}
				mapOfMapsOfMap[mapOfMapsOfMapKey] = mapOfMapsOfMap1
			} else {
				mapOfMapsOfMap[mapOfMapsOfMapKey] = nil
			}
		}
		resource.MapOfMapsOfMaps = mapOfMapsOfMap
	} else {
		resource.MapOfMapsOfMaps = nil
	}

	// MapOfMapsOfMapsOfStrings
	if source.MapOfMapsOfMapsOfStrings != nil {
		mapOfMapsOfMapsOfStringMap := make(map[string]map[string]map[string]string, len(source.MapOfMapsOfMapsOfStrings))
		for mapOfMapsOfMapsOfStringKey, mapOfMapsOfMapsOfStringValue := range source.MapOfMapsOfMapsOfStrings {
			// Shadow the loop variable to avoid aliasing
			mapOfMapsOfMapsOfStringValue := mapOfMapsOfMapsOfStringValue
			if mapOfMapsOfMapsOfStringValue != nil {
				mapOfMapsOfMapsOfStringMap1 := make(map[string]map[string]string, len(mapOfMapsOfMapsOfStringValue))
				for mapOfMapsOfMapsOfStringKey1, mapOfMapsOfMapsOfStringValue1 := range mapOfMapsOfMapsOfStringValue {
					// Shadow the loop variable to avoid aliasing
					mapOfMapsOfMapsOfStringValue1 := mapOfMapsOfMapsOfStringValue1
					mapOfMapsOfMapsOfStringMap1[mapOfMapsOfMapsOfStringKey1] = genruntime.CloneMapOfStringToString(mapOfMapsOfMapsOfStringValue1)
				}
				mapOfMapsOfMapsOfStringMap[mapOfMapsOfMapsOfStringKey] = mapOfMapsOfMapsOfStringMap1
			} else {
				mapOfMapsOfMapsOfStringMap[mapOfMapsOfMapsOfStringKey] = nil
			}
		}
		resource.MapOfMapsOfMapsOfStrings = mapOfMapsOfMapsOfStringMap
	} else {
		resource.MapOfMapsOfMapsOfStrings = nil
	}

	// MapOfStrings
	resource.MapOfStrings = genruntime.CloneMapOfStringToString(source.MapOfStrings)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		resource.Owner = &owner
	} else {
		resource.Owner = nil
	}

	// Type
	if source.Type != nil {
		resource.Type = FakeResource_Type_Spec(*source.Type)
	} else {
		resource.Type = ""
	}

	// No error
	return nil
}

// AssignProperties_To_FakeResource_Spec populates the provided destination FakeResource_Spec from our FakeResource_Spec
func (resource *FakeResource_Spec) AssignProperties_To_FakeResource_Spec(destination *v1api20200101s.FakeResource_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	apiVersion := string(resource.APIVersion)
	destination.APIVersion = &apiVersion

	// AzureName
	destination.AzureName = resource.AzureName

	// MapFoo
	if resource.MapFoo != nil {
		mapFooMap := make(map[string]v1api20200101s.Foo, len(resource.MapFoo))
		for mapFooKey, mapFooValue := range resource.MapFoo {
			// Shadow the loop variable to avoid aliasing
			mapFooValue := mapFooValue
			var mapFoo v1api20200101s.Foo
			err := mapFooValue.AssignProperties_To_Foo(&mapFoo)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field MapFoo")
			}
			mapFooMap[mapFooKey] = mapFoo
		}
		destination.MapFoo = mapFooMap
	} else {
		destination.MapFoo = nil
	}

	// MapOfArrays
	if resource.MapOfArrays != nil {
		mapOfArrayMap := make(map[string][]v1api20200101s.Foo, len(resource.MapOfArrays))
		for mapOfArrayKey, mapOfArrayValue := range resource.MapOfArrays {
			// Shadow the loop variable to avoid aliasing
			mapOfArrayValue := mapOfArrayValue
			if mapOfArrayValue != nil {
				mapOfArrayList := make([]v1api20200101s.Foo, len(mapOfArrayValue))
				for mapOfArrayIndex, mapOfArrayItem := range mapOfArrayValue {
					// Shadow the loop variable to avoid aliasing
					mapOfArrayItem := mapOfArrayItem
					var mapOfArray v1api20200101s.Foo
					err := mapOfArrayItem.AssignProperties_To_Foo(&mapOfArray)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field MapOfArrays")
					}
					mapOfArrayList[mapOfArrayIndex] = mapOfArray
				}
				mapOfArrayMap[mapOfArrayKey] = mapOfArrayList
			} else {
				mapOfArrayMap[mapOfArrayKey] = nil
			}
		}
		destination.MapOfArrays = mapOfArrayMap
	} else {
		destination.MapOfArrays = nil
	}

	// MapOfEnums
	if resource.MapOfEnums != nil {
		mapOfEnumMap := make(map[string]string, len(resource.MapOfEnums))
		for mapOfEnumKey, mapOfEnumValue := range resource.MapOfEnums {
			// Shadow the loop variable to avoid aliasing
			mapOfEnumValue := mapOfEnumValue
			mapOfEnumMap[mapOfEnumKey] = string(mapOfEnumValue)
		}
		destination.MapOfEnums = mapOfEnumMap
	} else {
		destination.MapOfEnums = nil
	}

	// MapOfMaps
	if resource.MapOfMaps != nil {
		mapOfMap := make(map[string]map[string]v1api20200101s.Foo, len(resource.MapOfMaps))
		for mapOfMapKey, mapOfMapValue := range resource.MapOfMaps {
			// Shadow the loop variable to avoid aliasing
			mapOfMapValue := mapOfMapValue
			if mapOfMapValue != nil {
				mapOfMap1 := make(map[string]v1api20200101s.Foo, len(mapOfMapValue))
				for mapOfMapKey1, mapOfMapValue1 := range mapOfMapValue {
					// Shadow the loop variable to avoid aliasing
					mapOfMapValue1 := mapOfMapValue1
					var mapOfMapLocal v1api20200101s.Foo
					err := mapOfMapValue1.AssignProperties_To_Foo(&mapOfMapLocal)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field MapOfMaps")
					}
					mapOfMap1[mapOfMapKey1] = mapOfMapLocal
				}
				mapOfMap[mapOfMapKey] = mapOfMap1
			} else {
				mapOfMap[mapOfMapKey] = nil
			}
		}
		destination.MapOfMaps = mapOfMap
	} else {
		destination.MapOfMaps = nil
	}

	// MapOfMapsOfMaps
	if resource.MapOfMapsOfMaps != nil {
		mapOfMapsOfMap := make(map[string]map[string]map[string]v1api20200101s.Foo, len(resource.MapOfMapsOfMaps))
		for mapOfMapsOfMapKey, mapOfMapsOfMapValue := range resource.MapOfMapsOfMaps {
			// Shadow the loop variable to avoid aliasing
			mapOfMapsOfMapValue := mapOfMapsOfMapValue
			if mapOfMapsOfMapValue != nil {
				mapOfMapsOfMap1 := make(map[string]map[string]v1api20200101s.Foo, len(mapOfMapsOfMapValue))
				for mapOfMapsOfMapKey1, mapOfMapsOfMapValue1 := range mapOfMapsOfMapValue {
					// Shadow the loop variable to avoid aliasing
					mapOfMapsOfMapValue1 := mapOfMapsOfMapValue1
					if mapOfMapsOfMapValue1 != nil {
						mapOfMapsOfMap2 := make(map[string]v1api20200101s.Foo, len(mapOfMapsOfMapValue1))
						for mapOfMapsOfMapKey2, mapOfMapsOfMapValue2 := range mapOfMapsOfMapValue1 {
							// Shadow the loop variable to avoid aliasing
							mapOfMapsOfMapValue2 := mapOfMapsOfMapValue2
							var mapOfMapsOfMapLocal v1api20200101s.Foo
							err := mapOfMapsOfMapValue2.AssignProperties_To_Foo(&mapOfMapsOfMapLocal)
							if err != nil {
								return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field MapOfMapsOfMaps")
							}
							mapOfMapsOfMap2[mapOfMapsOfMapKey2] = mapOfMapsOfMapLocal
						}
						mapOfMapsOfMap1[mapOfMapsOfMapKey1] = mapOfMapsOfMap2
					} else {
						mapOfMapsOfMap1[mapOfMapsOfMapKey1] = nil
					}
				}
				mapOfMapsOfMap[mapOfMapsOfMapKey] = mapOfMapsOfMap1
			} else {
				mapOfMapsOfMap[mapOfMapsOfMapKey] = nil
			}
		}
		destination.MapOfMapsOfMaps = mapOfMapsOfMap
	} else {
		destination.MapOfMapsOfMaps = nil
	}

	// MapOfMapsOfMapsOfStrings
	if resource.MapOfMapsOfMapsOfStrings != nil {
		mapOfMapsOfMapsOfStringMap := make(map[string]map[string]map[string]string, len(resource.MapOfMapsOfMapsOfStrings))
		for mapOfMapsOfMapsOfStringKey, mapOfMapsOfMapsOfStringValue := range resource.MapOfMapsOfMapsOfStrings {
			// Shadow the loop variable to avoid aliasing
			mapOfMapsOfMapsOfStringValue := mapOfMapsOfMapsOfStringValue
			if mapOfMapsOfMapsOfStringValue != nil {
				mapOfMapsOfMapsOfStringMap1 := make(map[string]map[string]string, len(mapOfMapsOfMapsOfStringValue))
				for mapOfMapsOfMapsOfStringKey1, mapOfMapsOfMapsOfStringValue1 := range mapOfMapsOfMapsOfStringValue {
					// Shadow the loop variable to avoid aliasing
					mapOfMapsOfMapsOfStringValue1 := mapOfMapsOfMapsOfStringValue1
					mapOfMapsOfMapsOfStringMap1[mapOfMapsOfMapsOfStringKey1] = genruntime.CloneMapOfStringToString(mapOfMapsOfMapsOfStringValue1)
				}
				mapOfMapsOfMapsOfStringMap[mapOfMapsOfMapsOfStringKey] = mapOfMapsOfMapsOfStringMap1
			} else {
				mapOfMapsOfMapsOfStringMap[mapOfMapsOfMapsOfStringKey] = nil
			}
		}
		destination.MapOfMapsOfMapsOfStrings = mapOfMapsOfMapsOfStringMap
	} else {
		destination.MapOfMapsOfMapsOfStrings = nil
	}

	// MapOfStrings
	destination.MapOfStrings = genruntime.CloneMapOfStringToString(resource.MapOfStrings)

	// OriginalVersion
	destination.OriginalVersion = resource.OriginalVersion()

	// Owner
	if resource.Owner != nil {
		owner := resource.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Type
	typeVar := string(resource.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (resource *FakeResource_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (resource *FakeResource_Spec) SetAzureName(azureName string) { resource.AzureName = azureName }

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResource_Type_Spec string

const FakeResource_Type_Spec_MicrosoftAzureFakeResource = FakeResource_Type_Spec("Microsoft.Azure/FakeResource")

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo_ARM struct {
	FooName *string `json:"fooName,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	FooName *string `json:"fooName,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	result := &Foo_ARM{}

	// Set property "FooName":
	if foo.FooName != nil {
		fooName := *foo.FooName
		result.FooName = &fooName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Foo_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Foo_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Foo_ARM, got %T", armInput)
	}

	// Set property "FooName":
	if typedInput.FooName != nil {
		fooName := *typedInput.FooName
		foo.FooName = &fooName
	}

	// No error
	return nil
}

// AssignProperties_From_Foo populates our Foo from the provided source Foo
func (foo *Foo) AssignProperties_From_Foo(source *v1api20200101s.Foo) error {

	// FooName
	foo.FooName = genruntime.ClonePointerToString(source.FooName)

	// No error
	return nil
}

// AssignProperties_To_Foo populates the provided destination Foo from our Foo
func (foo *Foo) AssignProperties_To_Foo(destination *v1api20200101s.Foo) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FooName
	destination.FooName = genruntime.ClonePointerToString(foo.FooName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
