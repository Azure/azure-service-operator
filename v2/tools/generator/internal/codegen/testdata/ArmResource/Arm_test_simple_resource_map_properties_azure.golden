// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (fakeResource *FakeResource) GetConditions() conditions.Conditions {
	return fakeResource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (fakeResource *FakeResource) SetConditions(conditions conditions.Conditions) {
	fakeResource.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (fakeResource *FakeResource) Default() {
	fakeResource.defaultImpl()
	var temp interface{} = fakeResource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) defaultAzureName() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (fakeResource *FakeResource) defaultImpl() { fakeResource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (fakeResource FakeResource) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (fakeResource *FakeResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (fakeResource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &fakeResource.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (fakeResource *FakeResource) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  fakeResource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (fakeResource *FakeResource) ValidateCreate() error {
	validations := fakeResource.createValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (fakeResource *FakeResource) ValidateDelete() error {
	validations := fakeResource.deleteValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (fakeResource *FakeResource) ValidateUpdate(old runtime.Object) error {
	validations := fakeResource.updateValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (fakeResource *FakeResource) createValidations() []func() error {
	return []func() error{fakeResource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (fakeResource *FakeResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (fakeResource *FakeResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return fakeResource.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (fakeResource *FakeResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&fakeResource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// Hub marks that this FakeResource is the hub type for conversion
func (fakeResource *FakeResource) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (fakeResource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: fakeResource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	MapFoo                   map[string]FooARM                       `json:"mapFoo"`
	MapOfArrays              map[string][]FooARM                     `json:"mapOfArrays,omitempty"`
	MapOfEnums               map[string]Color                        `json:"mapOfEnums,omitempty"`
	MapOfMaps                map[string]map[string]FooARM            `json:"mapOfMaps,omitempty"`
	MapOfMapsOfMaps          map[string]map[string]map[string]FooARM `json:"mapOfMapsOfMaps,omitempty"`
	MapOfMapsOfMapsOfStrings map[string]map[string]map[string]string `json:"mapOfMapsOfMapsOfStrings,omitempty"`
	MapOfStrings             map[string]string                       `json:"mapOfStrings,omitempty"`
	Name                     string                                  `json:"name"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (fakeResourceSpecARM FakeResource_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetName() string {
	return fakeResourceSpecARM.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (fakeResourceSpecARM FakeResource_SpecARM) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Color
// +kubebuilder:validation:Enum={"blue","green","red"}
type Color string

const (
	ColorBlue  = Color("blue")
	ColorGreen = Color("green")
	ColorRed   = Color("red")
)

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecAPIVersion string

const FakeResourceSpecAPIVersion20200601 = FakeResourceSpecAPIVersion("2020-06-01")

type FakeResource_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	MapFoo                   map[string]Foo                          `json:"mapFoo"`
	MapOfArrays              map[string][]Foo                        `json:"mapOfArrays,omitempty"`
	MapOfEnums               map[string]Color                        `json:"mapOfEnums,omitempty"`
	MapOfMaps                map[string]map[string]Foo               `json:"mapOfMaps,omitempty"`
	MapOfMapsOfMaps          map[string]map[string]map[string]Foo    `json:"mapOfMapsOfMaps,omitempty"`
	MapOfMapsOfMapsOfStrings map[string]map[string]map[string]string `json:"mapOfMapsOfMapsOfStrings,omitempty"`
	MapOfStrings             map[string]string                       `json:"mapOfStrings,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecARM

	// Set property ‘MapFoo’:
	if fakeResourceSpec.MapFoo != nil {
		result.MapFoo = make(map[string]FooARM)
		for key, value := range fakeResourceSpec.MapFoo {
			valueARM, err := value.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			result.MapFoo[key] = valueARM.(FooARM)
		}
	}

	// Set property ‘MapOfArrays’:
	if fakeResourceSpec.MapOfArrays != nil {
		result.MapOfArrays = make(map[string][]FooARM)
		for key, value := range fakeResourceSpec.MapOfArrays {
			var valueTemp []FooARM
			for _, item := range value {
				itemARM, err := item.ConvertToARM(resolved)
				if err != nil {
					return nil, err
				}
				valueTemp = append(valueTemp, itemARM.(FooARM))
			}
			result.MapOfArrays[key] = valueTemp
		}
	}

	// Set property ‘MapOfEnums’:
	if fakeResourceSpec.MapOfEnums != nil {
		result.MapOfEnums = make(map[string]Color)
		for key, value := range fakeResourceSpec.MapOfEnums {
			result.MapOfEnums[key] = value
		}
	}

	// Set property ‘MapOfMaps’:
	if fakeResourceSpec.MapOfMaps != nil {
		result.MapOfMaps = make(map[string]map[string]FooARM)
		for key, value := range fakeResourceSpec.MapOfMaps {
			if value != nil {
				valueTemp := make(map[string]FooARM)
				for valueKey, value1 := range value {
					value1ARM, err := value1.ConvertToARM(resolved)
					if err != nil {
						return nil, err
					}
					valueTemp[valueKey] = value1ARM.(FooARM)
				}
				result.MapOfMaps[key] = valueTemp
			}
		}
	}

	// Set property ‘MapOfMapsOfMaps’:
	if fakeResourceSpec.MapOfMapsOfMaps != nil {
		result.MapOfMapsOfMaps = make(map[string]map[string]map[string]FooARM)
		for key, value := range fakeResourceSpec.MapOfMapsOfMaps {
			if value != nil {
				valueTemp := make(map[string]map[string]FooARM)
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]FooARM)
						for valueKey1, value2 := range value1 {
							value2ARM, err := value2.ConvertToARM(resolved)
							if err != nil {
								return nil, err
							}
							value1Temp[valueKey1] = value2ARM.(FooARM)
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				result.MapOfMapsOfMaps[key] = valueTemp
			}
		}
	}

	// Set property ‘MapOfMapsOfMapsOfStrings’:
	if fakeResourceSpec.MapOfMapsOfMapsOfStrings != nil {
		result.MapOfMapsOfMapsOfStrings = make(map[string]map[string]map[string]string)
		for key, value := range fakeResourceSpec.MapOfMapsOfMapsOfStrings {
			if value != nil {
				valueTemp := make(map[string]map[string]string)
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]string)
						for valueKey1, value2 := range value1 {
							value1Temp[valueKey1] = value2
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				result.MapOfMapsOfMapsOfStrings[key] = valueTemp
			}
		}
	}

	// Set property ‘MapOfStrings’:
	if fakeResourceSpec.MapOfStrings != nil {
		result.MapOfStrings = make(map[string]string)
		for key, value := range fakeResourceSpec.MapOfStrings {
			result.MapOfStrings[key] = value
		}
	}

	// Set property ‘Name’:
	result.Name = resolved.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘MapFoo’:
	if typedInput.MapFoo != nil {
		fakeResourceSpec.MapFoo = make(map[string]Foo)
		for key, value := range typedInput.MapFoo {
			var value1 Foo
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			fakeResourceSpec.MapFoo[key] = value1
		}
	}

	// Set property ‘MapOfArrays’:
	if typedInput.MapOfArrays != nil {
		fakeResourceSpec.MapOfArrays = make(map[string][]Foo)
		for key, value := range typedInput.MapOfArrays {
			var valueTemp []Foo
			for _, item := range value {
				var item1 Foo
				err := item1.PopulateFromARM(owner, item)
				if err != nil {
					return err
				}
				valueTemp = append(valueTemp, item1)
			}
			fakeResourceSpec.MapOfArrays[key] = valueTemp
		}
	}

	// Set property ‘MapOfEnums’:
	if typedInput.MapOfEnums != nil {
		fakeResourceSpec.MapOfEnums = make(map[string]Color)
		for key, value := range typedInput.MapOfEnums {
			fakeResourceSpec.MapOfEnums[key] = value
		}
	}

	// Set property ‘MapOfMaps’:
	if typedInput.MapOfMaps != nil {
		fakeResourceSpec.MapOfMaps = make(map[string]map[string]Foo)
		for key, value := range typedInput.MapOfMaps {
			if value != nil {
				valueTemp := make(map[string]Foo)
				for valueKey, value1 := range value {
					var value2 Foo
					err := value2.PopulateFromARM(owner, value1)
					if err != nil {
						return err
					}
					valueTemp[valueKey] = value2
				}
				fakeResourceSpec.MapOfMaps[key] = valueTemp
			}
		}
	}

	// Set property ‘MapOfMapsOfMaps’:
	if typedInput.MapOfMapsOfMaps != nil {
		fakeResourceSpec.MapOfMapsOfMaps = make(map[string]map[string]map[string]Foo)
		for key, value := range typedInput.MapOfMapsOfMaps {
			if value != nil {
				valueTemp := make(map[string]map[string]Foo)
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]Foo)
						for valueKey1, value2 := range value1 {
							var value3 Foo
							err := value3.PopulateFromARM(owner, value2)
							if err != nil {
								return err
							}
							value1Temp[valueKey1] = value3
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				fakeResourceSpec.MapOfMapsOfMaps[key] = valueTemp
			}
		}
	}

	// Set property ‘MapOfMapsOfMapsOfStrings’:
	if typedInput.MapOfMapsOfMapsOfStrings != nil {
		fakeResourceSpec.MapOfMapsOfMapsOfStrings = make(map[string]map[string]map[string]string)
		for key, value := range typedInput.MapOfMapsOfMapsOfStrings {
			if value != nil {
				valueTemp := make(map[string]map[string]string)
				for valueKey, value1 := range value {
					if value1 != nil {
						value1Temp := make(map[string]string)
						for valueKey1, value2 := range value1 {
							value1Temp[valueKey1] = value2
						}
						valueTemp[valueKey] = value1Temp
					}
				}
				fakeResourceSpec.MapOfMapsOfMapsOfStrings[key] = valueTemp
			}
		}
	}

	// Set property ‘MapOfStrings’:
	if typedInput.MapOfStrings != nil {
		fakeResourceSpec.MapOfStrings = make(map[string]string)
		for key, value := range typedInput.MapOfStrings {
			fakeResourceSpec.MapOfStrings[key] = value
		}
	}

	// Set property ‘Owner’:
	fakeResourceSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_Spec{}

// ConvertSpecFrom populates our FakeResource_Spec from the provided source
func (fakeResourceSpec *FakeResource_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == fakeResourceSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(fakeResourceSpec)
}

// ConvertSpecTo populates the provided destination from our FakeResource_Spec
func (fakeResourceSpec *FakeResource_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == fakeResourceSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(fakeResourceSpec)
}

// OriginalVersion returns the original API version used to create the resource.
func (fakeResourceSpec *FakeResource_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	FooName *string `json:"fooName,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	FooName *string `json:"fooName,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooARM

	// Set property ‘FooName’:
	if foo.FooName != nil {
		fooName := *foo.FooName
		result.FooName = &fooName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}

	// Set property ‘FooName’:
	if typedInput.FooName != nil {
		fooName := *typedInput.FooName
		foo.FooName = &fooName
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
