// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package webhook

import (
	"context"
	"fmt"
	v20200101 "github.com/Azure/azure-service-operator/testing/test/v1api20200101"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

type A struct {
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.as.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomDefaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default(ctx context.Context, obj runtime.Object) error {
	resource, ok := obj.(*v20200101.A)
	if !ok {
		return fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/A, but got %T", obj)
	}
	err := a.defaultImpl(ctx, resource)
	if err != nil {
		return err
	}
	var temp any = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		err = runtimeDefaulter.CustomDefault(ctx, resource)
		if err != nil {
			return err
		}
	}
	return nil
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName(ctx context.Context, obj *v20200101.A) error {
	if obj.Spec.AzureName == "" {
		obj.Spec.AzureName = obj.Name
	}
	return nil
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl(ctx context.Context, obj *v20200101.A) error {
	err := a.defaultAzureName(ctx, obj)
	if err != nil {
		return err
	}
	return nil
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.as.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomValidator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.A)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/A, but got %T", resource)
	}
	validations := a.createValidations()
	var temp any = a
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.A]); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(ctx, obj, validations)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.A)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/A, but got %T", resource)
	}
	validations := a.deleteValidations()
	var temp any = a
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.A]); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(ctx, obj, validations)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(ctx context.Context, oldResource runtime.Object, newResource runtime.Object) (admission.Warnings, error) {
	newObj, ok := newResource.(*v20200101.A)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/A, but got %T", newResource)
	}
	oldObj, ok := oldResource.(*v20200101.A)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/A, but got %T", oldResource)
	}
	validations := a.updateValidations()
	var temp any = a
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.A]); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(
		ctx,
		oldObj,
		newObj,
		validations)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func(ctx context.Context, obj *v20200101.A) (admission.Warnings, error) {
	return []func(ctx context.Context, obj *v20200101.A) (admission.Warnings, error){
		a.validateResourceReferences,
		a.validateOwnerReference,
		a.validateSecretDestinations,
		a.validateConfigMapDestinations,
	}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func(ctx context.Context, obj *v20200101.A) (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error) {
	return []func(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error){
		func(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error) {
			return a.validateResourceReferences(ctx, newObj)
		},
		a.validateWriteOnceProperties,
		func(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error) {
			return a.validateOwnerReference(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error) {
			return a.validateSecretDestinations(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error) {
			return a.validateConfigMapDestinations(ctx, newObj)
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (a *A) validateConfigMapDestinations(ctx context.Context, obj *v20200101.A) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (a *A) validateOwnerReference(ctx context.Context, obj *v20200101.A) (admission.Warnings, error) {
	return genruntime.ValidateOwner(obj)
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences(ctx context.Context, obj *v20200101.A) (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&obj.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (a *A) validateSecretDestinations(ctx context.Context, obj *v20200101.A) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (a *A) validateWriteOnceProperties(ctx context.Context, oldObj *v20200101.A, newObj *v20200101.A) (admission.Warnings, error) {
	return genruntime.ValidateWriteOnceProperties(oldObj, newObj)
}

type B struct {
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.bs.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomDefaulter = &B{}

// Default applies defaults to the B resource
func (b *B) Default(ctx context.Context, obj runtime.Object) error {
	resource, ok := obj.(*v20200101.B)
	if !ok {
		return fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/B, but got %T", obj)
	}
	err := b.defaultImpl(ctx, resource)
	if err != nil {
		return err
	}
	var temp any = b
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		err = runtimeDefaulter.CustomDefault(ctx, resource)
		if err != nil {
			return err
		}
	}
	return nil
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (b *B) defaultAzureName(ctx context.Context, obj *v20200101.B) error {
	if obj.Spec.AzureName == "" {
		obj.Spec.AzureName = obj.Name
	}
	return nil
}

// defaultImpl applies the code generated defaults to the B resource
func (b *B) defaultImpl(ctx context.Context, obj *v20200101.B) error {
	err := b.defaultAzureName(ctx, obj)
	if err != nil {
		return err
	}
	return nil
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-b,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.bs.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomValidator = &B{}

// ValidateCreate validates the creation of the resource
func (b *B) ValidateCreate(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.B)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/B, but got %T", resource)
	}
	validations := b.createValidations()
	var temp any = b
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.B]); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(ctx, obj, validations)
}

// ValidateDelete validates the deletion of the resource
func (b *B) ValidateDelete(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.B)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/B, but got %T", resource)
	}
	validations := b.deleteValidations()
	var temp any = b
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.B]); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(ctx, obj, validations)
}

// ValidateUpdate validates an update of the resource
func (b *B) ValidateUpdate(ctx context.Context, oldResource runtime.Object, newResource runtime.Object) (admission.Warnings, error) {
	newObj, ok := newResource.(*v20200101.B)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/B, but got %T", newResource)
	}
	oldObj, ok := oldResource.(*v20200101.B)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/B, but got %T", oldResource)
	}
	validations := b.updateValidations()
	var temp any = b
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.B]); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(
		ctx,
		oldObj,
		newObj,
		validations)
}

// createValidations validates the creation of the resource
func (b *B) createValidations() []func(ctx context.Context, obj *v20200101.B) (admission.Warnings, error) {
	return []func(ctx context.Context, obj *v20200101.B) (admission.Warnings, error){
		b.validateResourceReferences,
		b.validateOwnerReference,
		b.validateSecretDestinations,
		b.validateConfigMapDestinations,
	}
}

// deleteValidations validates the deletion of the resource
func (b *B) deleteValidations() []func(ctx context.Context, obj *v20200101.B) (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (b *B) updateValidations() []func(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error) {
	return []func(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error){
		func(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error) {
			return b.validateResourceReferences(ctx, newObj)
		},
		b.validateWriteOnceProperties,
		func(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error) {
			return b.validateOwnerReference(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error) {
			return b.validateSecretDestinations(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error) {
			return b.validateConfigMapDestinations(ctx, newObj)
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (b *B) validateConfigMapDestinations(ctx context.Context, obj *v20200101.B) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (b *B) validateOwnerReference(ctx context.Context, obj *v20200101.B) (admission.Warnings, error) {
	return genruntime.ValidateOwner(obj)
}

// validateResourceReferences validates all resource references
func (b *B) validateResourceReferences(ctx context.Context, obj *v20200101.B) (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&obj.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (b *B) validateSecretDestinations(ctx context.Context, obj *v20200101.B) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (b *B) validateWriteOnceProperties(ctx context.Context, oldObj *v20200101.B, newObj *v20200101.B) (admission.Warnings, error) {
	return genruntime.ValidateWriteOnceProperties(oldObj, newObj)
}

type C struct {
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-c,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.cs.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomDefaulter = &C{}

// Default applies defaults to the C resource
func (c *C) Default(ctx context.Context, obj runtime.Object) error {
	resource, ok := obj.(*v20200101.C)
	if !ok {
		return fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/C, but got %T", obj)
	}
	err := c.defaultImpl(ctx, resource)
	if err != nil {
		return err
	}
	var temp any = c
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		err = runtimeDefaulter.CustomDefault(ctx, resource)
		if err != nil {
			return err
		}
	}
	return nil
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (c *C) defaultAzureName(ctx context.Context, obj *v20200101.C) error {
	if obj.Spec.AzureName == "" {
		obj.Spec.AzureName = obj.Name
	}
	return nil
}

// defaultImpl applies the code generated defaults to the C resource
func (c *C) defaultImpl(ctx context.Context, obj *v20200101.C) error {
	err := c.defaultAzureName(ctx, obj)
	if err != nil {
		return err
	}
	return nil
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-c,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=cs,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.cs.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomValidator = &C{}

// ValidateCreate validates the creation of the resource
func (c *C) ValidateCreate(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.C)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/C, but got %T", resource)
	}
	validations := c.createValidations()
	var temp any = c
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.C]); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(ctx, obj, validations)
}

// ValidateDelete validates the deletion of the resource
func (c *C) ValidateDelete(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.C)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/C, but got %T", resource)
	}
	validations := c.deleteValidations()
	var temp any = c
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.C]); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(ctx, obj, validations)
}

// ValidateUpdate validates an update of the resource
func (c *C) ValidateUpdate(ctx context.Context, oldResource runtime.Object, newResource runtime.Object) (admission.Warnings, error) {
	newObj, ok := newResource.(*v20200101.C)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/C, but got %T", newResource)
	}
	oldObj, ok := oldResource.(*v20200101.C)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/C, but got %T", oldResource)
	}
	validations := c.updateValidations()
	var temp any = c
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.C]); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(
		ctx,
		oldObj,
		newObj,
		validations)
}

// createValidations validates the creation of the resource
func (c *C) createValidations() []func(ctx context.Context, obj *v20200101.C) (admission.Warnings, error) {
	return []func(ctx context.Context, obj *v20200101.C) (admission.Warnings, error){
		c.validateResourceReferences,
		c.validateOwnerReference,
		c.validateSecretDestinations,
		c.validateConfigMapDestinations,
	}
}

// deleteValidations validates the deletion of the resource
func (c *C) deleteValidations() []func(ctx context.Context, obj *v20200101.C) (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (c *C) updateValidations() []func(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error) {
	return []func(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error){
		func(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error) {
			return c.validateResourceReferences(ctx, newObj)
		},
		c.validateWriteOnceProperties,
		func(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error) {
			return c.validateOwnerReference(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error) {
			return c.validateSecretDestinations(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error) {
			return c.validateConfigMapDestinations(ctx, newObj)
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (c *C) validateConfigMapDestinations(ctx context.Context, obj *v20200101.C) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (c *C) validateOwnerReference(ctx context.Context, obj *v20200101.C) (admission.Warnings, error) {
	return genruntime.ValidateOwner(obj)
}

// validateResourceReferences validates all resource references
func (c *C) validateResourceReferences(ctx context.Context, obj *v20200101.C) (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&obj.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (c *C) validateSecretDestinations(ctx context.Context, obj *v20200101.C) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (c *C) validateWriteOnceProperties(ctx context.Context, oldObj *v20200101.C, newObj *v20200101.C) (admission.Warnings, error) {
	return genruntime.ValidateWriteOnceProperties(oldObj, newObj)
}

type D struct {
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1api20200101-d,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1api20200101,name=default.v1api20200101.ds.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomDefaulter = &D{}

// Default applies defaults to the D resource
func (d *D) Default(ctx context.Context, obj runtime.Object) error {
	resource, ok := obj.(*v20200101.D)
	if !ok {
		return fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/D, but got %T", obj)
	}
	err := d.defaultImpl(ctx, resource)
	if err != nil {
		return err
	}
	var temp any = d
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		err = runtimeDefaulter.CustomDefault(ctx, resource)
		if err != nil {
			return err
		}
	}
	return nil
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (d *D) defaultAzureName(ctx context.Context, obj *v20200101.D) error {
	if obj.Spec.AzureName == "" {
		obj.Spec.AzureName = obj.Name
	}
	return nil
}

// defaultImpl applies the code generated defaults to the D resource
func (d *D) defaultImpl(ctx context.Context, obj *v20200101.D) error {
	err := d.defaultAzureName(ctx, obj)
	if err != nil {
		return err
	}
	return nil
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1api20200101-d,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=ds,verbs=create;update,versions=v1api20200101,name=validate.v1api20200101.ds.test.azure.com,admissionReviewVersions=v1

var _ webhook.CustomValidator = &D{}

// ValidateCreate validates the creation of the resource
func (d *D) ValidateCreate(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.D)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/D, but got %T", resource)
	}
	validations := d.createValidations()
	var temp any = d
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.D]); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(ctx, obj, validations)
}

// ValidateDelete validates the deletion of the resource
func (d *D) ValidateDelete(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20200101.D)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/D, but got %T", resource)
	}
	validations := d.deleteValidations()
	var temp any = d
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.D]); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(ctx, obj, validations)
}

// ValidateUpdate validates an update of the resource
func (d *D) ValidateUpdate(ctx context.Context, oldResource runtime.Object, newResource runtime.Object) (admission.Warnings, error) {
	newObj, ok := newResource.(*v20200101.D)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/D, but got %T", newResource)
	}
	oldObj, ok := oldResource.(*v20200101.D)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/testing/test/v1api20200101/D, but got %T", oldResource)
	}
	validations := d.updateValidations()
	var temp any = d
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20200101.D]); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(
		ctx,
		oldObj,
		newObj,
		validations)
}

// createValidations validates the creation of the resource
func (d *D) createValidations() []func(ctx context.Context, obj *v20200101.D) (admission.Warnings, error) {
	return []func(ctx context.Context, obj *v20200101.D) (admission.Warnings, error){
		d.validateResourceReferences,
		d.validateOwnerReference,
		d.validateSecretDestinations,
		d.validateConfigMapDestinations,
	}
}

// deleteValidations validates the deletion of the resource
func (d *D) deleteValidations() []func(ctx context.Context, obj *v20200101.D) (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (d *D) updateValidations() []func(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error) {
	return []func(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error){
		func(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error) {
			return d.validateResourceReferences(ctx, newObj)
		},
		d.validateWriteOnceProperties,
		func(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error) {
			return d.validateOwnerReference(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error) {
			return d.validateSecretDestinations(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error) {
			return d.validateConfigMapDestinations(ctx, newObj)
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (d *D) validateConfigMapDestinations(ctx context.Context, obj *v20200101.D) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (d *D) validateOwnerReference(ctx context.Context, obj *v20200101.D) (admission.Warnings, error) {
	return genruntime.ValidateOwner(obj)
}

// validateResourceReferences validates all resource references
func (d *D) validateResourceReferences(ctx context.Context, obj *v20200101.D) (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&obj.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (d *D) validateSecretDestinations(ctx context.Context, obj *v20200101.D) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (d *D) validateWriteOnceProperties(ctx context.Context, oldObj *v20200101.D, newObj *v20200101.D) (admission.Warnings, error) {
	return genruntime.ValidateWriteOnceProperties(oldObj, newObj)
}
