// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (resource *FakeResource) GetConditions() conditions.Conditions {
	return resource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (resource *FakeResource) SetConditions(conditions conditions.Conditions) {
	resource.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (resource *FakeResource) Default() {
	resource.defaultImpl()
	var temp interface{} = resource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (resource *FakeResource) defaultAzureName() {
	if resource.Spec.AzureName == "" {
		resource.Spec.AzureName = resource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (resource *FakeResource) defaultImpl() { resource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (resource *FakeResource) AzureName() string {
	return resource.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (resource FakeResource) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (resource *FakeResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (resource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &resource.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (resource *FakeResource) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (resource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(resource.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  resource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (resource *FakeResource) ValidateCreate() error {
	validations := resource.createValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (resource *FakeResource) ValidateDelete() error {
	validations := resource.deleteValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (resource *FakeResource) ValidateUpdate(old runtime.Object) error {
	validations := resource.updateValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (resource *FakeResource) createValidations() []func() error {
	return []func() error{resource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (resource *FakeResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (resource *FakeResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return resource.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (resource *FakeResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&resource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// Hub marks that this FakeResource is the hub type for conversion
func (resource *FakeResource) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (resource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: resource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	Name       string         `json:"name"`
	Properties *PropertiesARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (resource FakeResource_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (resource FakeResource_SpecARM) GetName() string {
	return resource.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (resource FakeResource_SpecARM) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecAPIVersion string

const FakeResourceSpecAPIVersion20200601 = FakeResourceSpecAPIVersion("2020-06-01")

type FakeResource_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner      genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`
	Properties *Properties                       `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result FakeResource_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if resource.Properties != nil {
		propertiesARM, err := (*resource.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(PropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *FakeResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	resource.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	resource.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 Properties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		resource.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_Spec{}

// ConvertSpecFrom populates our FakeResource_Spec from the provided source
func (resource *FakeResource_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == resource {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(resource)
}

// ConvertSpecTo populates the provided destination from our FakeResource_Spec
func (resource *FakeResource_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == resource {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(resource)
}

// OriginalVersion returns the original API version used to create the resource.
func (resource *FakeResource_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (resource *FakeResource_Spec) SetAzureName(azureName string) { resource.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type PropertiesARM struct {
	//Bar: Mutually exclusive with all other properties
	Bar *BarARM `json:"bar,omitempty"`

	//Baz: Mutually exclusive with all other properties
	Baz *BazARM `json:"baz,omitempty"`

	//Foo: Mutually exclusive with all other properties
	Foo *FooARM `json:"foo,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because PropertiesARM represents a discriminated union (JSON OneOf)
func (properties PropertiesARM) MarshalJSON() ([]byte, error) {
	if properties.Bar != nil {
		return json.Marshal(properties.Bar)
	}
	if properties.Baz != nil {
		return json.Marshal(properties.Baz)
	}
	if properties.Foo != nil {
		return json.Marshal(properties.Foo)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the PropertiesARM
func (properties *PropertiesARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["discrim"]
	if discriminator == "bar" {
		properties.Bar = &BarARM{}
		return json.Unmarshal(data, properties.Bar)
	}
	if discriminator == "baz" {
		properties.Baz = &BazARM{}
		return json.Unmarshal(data, properties.Baz)
	}
	if discriminator == "foo" {
		properties.Foo = &FooARM{}
		return json.Unmarshal(data, properties.Foo)
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type BarARM struct {
	Discrim BarDiscrim `json:"discrim"`
	Size    int        `json:"size"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type BazARM struct {
	Discrim BazDiscrim `json:"discrim"`
	Enabled bool       `json:"enabled"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	Discrim FooDiscrim `json:"discrim"`
	Name    *string    `json:"name,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type Properties struct {
	//Bar: Mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	//Baz: Mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	//Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

var _ genruntime.ARMTransformer = &Properties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *Properties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result PropertiesARM

	// Set property ‘Bar’:
	if properties.Bar != nil {
		barARM, err := (*properties.Bar).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bar := barARM.(BarARM)
		result.Bar = &bar
	}

	// Set property ‘Baz’:
	if properties.Baz != nil {
		bazARM, err := (*properties.Baz).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		baz := bazARM.(BazARM)
		result.Baz = &baz
	}

	// Set property ‘Foo’:
	if properties.Foo != nil {
		fooARM, err := (*properties.Foo).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		foo := fooARM.(FooARM)
		result.Foo = &foo
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *Properties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *Properties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PropertiesARM, got %T", armInput)
	}

	// Set property ‘Bar’:
	if typedInput.Bar != nil {
		var bar1 Bar
		err := bar1.PopulateFromARM(owner, *typedInput.Bar)
		if err != nil {
			return err
		}
		bar := bar1
		properties.Bar = &bar
	}

	// Set property ‘Baz’:
	if typedInput.Baz != nil {
		var baz1 Baz
		err := baz1.PopulateFromARM(owner, *typedInput.Baz)
		if err != nil {
			return err
		}
		baz := baz1
		properties.Baz = &baz
	}

	// Set property ‘Foo’:
	if typedInput.Foo != nil {
		var foo1 Foo
		err := foo1.PopulateFromARM(owner, *typedInput.Foo)
		if err != nil {
			return err
		}
		foo := foo1
		properties.Foo = &foo
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {
	// +kubebuilder:validation:Required
	Discrim BarDiscrim `json:"discrim"`

	// +kubebuilder:validation:Required
	Size int `json:"size"`
}

var _ genruntime.ARMTransformer = &Bar{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (bar *Bar) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if bar == nil {
		return nil, nil
	}
	var result BarARM

	// Set property ‘Discrim’:
	result.Discrim = bar.Discrim

	// Set property ‘Size’:
	result.Size = bar.Size
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (bar *Bar) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BarARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (bar *Bar) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BarARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BarARM, got %T", armInput)
	}

	// Set property ‘Discrim’:
	bar.Discrim = typedInput.Discrim

	// Set property ‘Size’:
	bar.Size = typedInput.Size

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"bar"}
type BarDiscrim string

const BarDiscrimBar = BarDiscrim("bar")

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type Baz struct {
	// +kubebuilder:validation:Required
	Discrim BazDiscrim `json:"discrim"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled"`
}

var _ genruntime.ARMTransformer = &Baz{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (baz *Baz) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if baz == nil {
		return nil, nil
	}
	var result BazARM

	// Set property ‘Discrim’:
	result.Discrim = baz.Discrim

	// Set property ‘Enabled’:
	result.Enabled = baz.Enabled
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (baz *Baz) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BazARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (baz *Baz) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BazARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BazARM, got %T", armInput)
	}

	// Set property ‘Discrim’:
	baz.Discrim = typedInput.Discrim

	// Set property ‘Enabled’:
	baz.Enabled = typedInput.Enabled

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"baz"}
type BazDiscrim string

const BazDiscrimBaz = BazDiscrim("baz")

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	// +kubebuilder:validation:Required
	Discrim FooDiscrim `json:"discrim"`
	Name    *string    `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooARM

	// Set property ‘Discrim’:
	result.Discrim = foo.Discrim

	// Set property ‘Name’:
	if foo.Name != nil {
		name := *foo.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}

	// Set property ‘Discrim’:
	foo.Discrim = typedInput.Discrim

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		foo.Name = &name
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"foo"}
type FooDiscrim string

const FooDiscrimFoo = FooDiscrim("foo")

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
