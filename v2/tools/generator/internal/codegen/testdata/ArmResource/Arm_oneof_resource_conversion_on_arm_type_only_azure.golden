// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	"encoding/json"
	"fmt"
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &FakeResource{}

// GetConditions returns the conditions of the resource
func (resource *FakeResource) GetConditions() conditions.Conditions {
	return resource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (resource *FakeResource) SetConditions(conditions conditions.Conditions) {
	resource.Status.Conditions = conditions
}

var _ conversion.Convertible = &FakeResource{}

// ConvertFrom populates our FakeResource from the provided hub FakeResource
func (resource *FakeResource) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200101s.FakeResource)
	if !ok {
		return fmt.Errorf("expected test/v1beta20200101storage/FakeResource but received %T instead", hub)
	}

	return resource.AssignPropertiesFromFakeResource(source)
}

// ConvertTo populates the provided hub FakeResource from our FakeResource
func (resource *FakeResource) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200101s.FakeResource)
	if !ok {
		return fmt.Errorf("expected test/v1beta20200101storage/FakeResource but received %T instead", hub)
	}

	return resource.AssignPropertiesToFakeResource(destination)
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1beta20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1beta20200101,name=default.v1beta20200101.fakeresources.test.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (resource *FakeResource) Default() {
	resource.defaultImpl()
	var temp interface{} = resource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (resource *FakeResource) defaultAzureName() {
	if resource.Spec.AzureName == "" {
		resource.Spec.AzureName = resource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (resource *FakeResource) defaultImpl() { resource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (resource *FakeResource) AzureName() string {
	return resource.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (resource FakeResource) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (resource *FakeResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (resource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &resource.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (resource *FakeResource) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (resource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(resource.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  resource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1beta20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1beta20200101,name=validate.v1beta20200101.fakeresources.test.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (resource *FakeResource) ValidateCreate() error {
	validations := resource.createValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (resource *FakeResource) ValidateDelete() error {
	validations := resource.deleteValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (resource *FakeResource) ValidateUpdate(old runtime.Object) error {
	validations := resource.updateValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (resource *FakeResource) createValidations() []func() error {
	return []func() error{resource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (resource *FakeResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (resource *FakeResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return resource.validateResourceReferences()
		},
		resource.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (resource *FakeResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&resource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (resource *FakeResource) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*FakeResource)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, resource)
}

// AssignPropertiesFromFakeResource populates our FakeResource from the provided source FakeResource
func (resource *FakeResource) AssignPropertiesFromFakeResource(source *v20200101s.FakeResource) error {

	// ObjectMeta
	resource.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FakeResource_Spec
	err := spec.AssignPropertiesFromFakeResourceSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromFakeResourceSpec() to populate field Spec")
	}
	resource.Spec = spec

	// No error
	return nil
}

// AssignPropertiesToFakeResource populates the provided destination FakeResource from our FakeResource
func (resource *FakeResource) AssignPropertiesToFakeResource(destination *v20200101s.FakeResource) error {

	// ObjectMeta
	destination.ObjectMeta = *resource.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200101s.FakeResource_Spec
	err := resource.Spec.AssignPropertiesToFakeResourceSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToFakeResourceSpec() to populate field Spec")
	}
	destination.Spec = spec

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (resource *FakeResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: resource.Spec.OriginalVersion(),
		Kind:    "FakeResource",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	Name       string         `json:"name,omitempty"`
	Properties *PropertiesARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (resource FakeResource_SpecARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (resource *FakeResource_SpecARM) GetName() string {
	return resource.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (resource *FakeResource_SpecARM) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type APIVersion string

const APIVersionValue = APIVersion("2020-06-01")

type FakeResource_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner      *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Properties *Properties                        `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &FakeResource_SpecARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if resource.Properties != nil {
		propertiesARM, err := (*resource.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := *propertiesARM.(*PropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *FakeResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	resource.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	resource.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 Properties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		resource.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FakeResource_Spec{}

// ConvertSpecFrom populates our FakeResource_Spec from the provided source
func (resource *FakeResource_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200101s.FakeResource_Spec)
	if ok {
		// Populate our instance from source
		return resource.AssignPropertiesFromFakeResourceSpec(src)
	}

	// Convert to an intermediate form
	src = &v20200101s.FakeResource_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = resource.AssignPropertiesFromFakeResourceSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FakeResource_Spec
func (resource *FakeResource_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200101s.FakeResource_Spec)
	if ok {
		// Populate destination from our instance
		return resource.AssignPropertiesToFakeResourceSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200101s.FakeResource_Spec{}
	err := resource.AssignPropertiesToFakeResourceSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromFakeResourceSpec populates our FakeResource_Spec from the provided source FakeResource_Spec
func (resource *FakeResource_Spec) AssignPropertiesFromFakeResourceSpec(source *v20200101s.FakeResource_Spec) error {

	// AzureName
	resource.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		resource.Owner = &owner
	} else {
		resource.Owner = nil
	}

	// Properties
	if source.Properties != nil {
		var property Properties
		err := property.AssignPropertiesFromProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromProperties() to populate field Properties")
		}
		resource.Properties = &property
	} else {
		resource.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFakeResourceSpec populates the provided destination FakeResource_Spec from our FakeResource_Spec
func (resource *FakeResource_Spec) AssignPropertiesToFakeResourceSpec(destination *v20200101s.FakeResource_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = resource.AzureName

	// OriginalVersion
	destination.OriginalVersion = resource.OriginalVersion()

	// Owner
	if resource.Owner != nil {
		owner := resource.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Properties
	if resource.Properties != nil {
		var property v20200101s.Properties
		err := resource.Properties.AssignPropertiesToProperties(&property)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToProperties() to populate field Properties")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (resource *FakeResource_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (resource *FakeResource_Spec) SetAzureName(azureName string) { resource.AzureName = azureName }

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type PropertiesARM struct {
	// Bar: Mutually exclusive with all other properties
	Bar *BarARM `json:"bar,omitempty"`

	// Baz: Mutually exclusive with all other properties
	Baz *BazARM `json:"baz,omitempty"`

	// Foo: Mutually exclusive with all other properties
	Foo *FooARM `json:"foo,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because PropertiesARM represents a discriminated union (JSON OneOf)
func (properties PropertiesARM) MarshalJSON() ([]byte, error) {
	if properties.Bar != nil {
		return json.Marshal(properties.Bar)
	}
	if properties.Baz != nil {
		return json.Marshal(properties.Baz)
	}
	if properties.Foo != nil {
		return json.Marshal(properties.Foo)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the PropertiesARM
func (properties *PropertiesARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["discrim"]
	if discriminator == "bar" {
		properties.Bar = &BarARM{}
		return json.Unmarshal(data, properties.Bar)
	}
	if discriminator == "baz" {
		properties.Baz = &BazARM{}
		return json.Unmarshal(data, properties.Baz)
	}
	if discriminator == "foo" {
		properties.Foo = &FooARM{}
		return json.Unmarshal(data, properties.Foo)
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type BarARM struct {
	Discrim BarDiscrim `json:"discrim,omitempty"`
	Size    *int       `json:"size,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type BazARM struct {
	Discrim BazDiscrim `json:"discrim,omitempty"`
	Enabled *bool      `json:"enabled,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	Discrim FooDiscrim `json:"discrim,omitempty"`
	Name    *string    `json:"name,omitempty"`
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Properties
type Properties struct {
	// Bar: Mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	// Baz: Mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	// Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

var _ genruntime.ARMTransformer = &Properties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *Properties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &PropertiesARM{}

	// Set property ‘Bar’:
	if properties.Bar != nil {
		barARM, err := (*properties.Bar).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bar := *barARM.(*BarARM)
		result.Bar = &bar
	}

	// Set property ‘Baz’:
	if properties.Baz != nil {
		bazARM, err := (*properties.Baz).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		baz := *bazARM.(*BazARM)
		result.Baz = &baz
	}

	// Set property ‘Foo’:
	if properties.Foo != nil {
		fooARM, err := (*properties.Foo).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		foo := *fooARM.(*FooARM)
		result.Foo = &foo
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *Properties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *Properties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PropertiesARM, got %T", armInput)
	}

	// Set property ‘Bar’:
	if typedInput.Bar != nil {
		var bar1 Bar
		err := bar1.PopulateFromARM(owner, *typedInput.Bar)
		if err != nil {
			return err
		}
		bar := bar1
		properties.Bar = &bar
	}

	// Set property ‘Baz’:
	if typedInput.Baz != nil {
		var baz1 Baz
		err := baz1.PopulateFromARM(owner, *typedInput.Baz)
		if err != nil {
			return err
		}
		baz := baz1
		properties.Baz = &baz
	}

	// Set property ‘Foo’:
	if typedInput.Foo != nil {
		var foo1 Foo
		err := foo1.PopulateFromARM(owner, *typedInput.Foo)
		if err != nil {
			return err
		}
		foo := foo1
		properties.Foo = &foo
	}

	// No error
	return nil
}

// AssignPropertiesFromProperties populates our Properties from the provided source Properties
func (properties *Properties) AssignPropertiesFromProperties(source *v20200101s.Properties) error {

	// Bar
	if source.Bar != nil {
		var bar Bar
		err := bar.AssignPropertiesFromBar(source.Bar)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBar() to populate field Bar")
		}
		properties.Bar = &bar
	} else {
		properties.Bar = nil
	}

	// Baz
	if source.Baz != nil {
		var baz Baz
		err := baz.AssignPropertiesFromBaz(source.Baz)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBaz() to populate field Baz")
		}
		properties.Baz = &baz
	} else {
		properties.Baz = nil
	}

	// Foo
	if source.Foo != nil {
		var foo Foo
		err := foo.AssignPropertiesFromFoo(source.Foo)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFoo() to populate field Foo")
		}
		properties.Foo = &foo
	} else {
		properties.Foo = nil
	}

	// No error
	return nil
}

// AssignPropertiesToProperties populates the provided destination Properties from our Properties
func (properties *Properties) AssignPropertiesToProperties(destination *v20200101s.Properties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bar
	if properties.Bar != nil {
		var bar v20200101s.Bar
		err := properties.Bar.AssignPropertiesToBar(&bar)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBar() to populate field Bar")
		}
		destination.Bar = &bar
	} else {
		destination.Bar = nil
	}

	// Baz
	if properties.Baz != nil {
		var baz v20200101s.Baz
		err := properties.Baz.AssignPropertiesToBaz(&baz)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBaz() to populate field Baz")
		}
		destination.Baz = &baz
	} else {
		destination.Baz = nil
	}

	// Foo
	if properties.Foo != nil {
		var foo v20200101s.Foo
		err := properties.Foo.AssignPropertiesToFoo(&foo)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFoo() to populate field Foo")
		}
		destination.Foo = &foo
	} else {
		destination.Foo = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {
	// +kubebuilder:validation:Required
	Discrim *BarDiscrim `json:"discrim,omitempty"`

	// +kubebuilder:validation:Required
	Size *int `json:"size,omitempty"`
}

var _ genruntime.ARMTransformer = &Bar{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (bar *Bar) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if bar == nil {
		return nil, nil
	}
	result := &BarARM{}

	// Set property ‘Discrim’:
	if bar.Discrim != nil {
		result.Discrim = *bar.Discrim
	}

	// Set property ‘Size’:
	if bar.Size != nil {
		size := *bar.Size
		result.Size = &size
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (bar *Bar) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BarARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (bar *Bar) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BarARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BarARM, got %T", armInput)
	}

	// Set property ‘Discrim’:
	bar.Discrim = &typedInput.Discrim

	// Set property ‘Size’:
	if typedInput.Size != nil {
		size := *typedInput.Size
		bar.Size = &size
	}

	// No error
	return nil
}

// AssignPropertiesFromBar populates our Bar from the provided source Bar
func (bar *Bar) AssignPropertiesFromBar(source *v20200101s.Bar) error {

	// Discrim
	if source.Discrim != nil {
		discrim := BarDiscrim(*source.Discrim)
		bar.Discrim = &discrim
	} else {
		bar.Discrim = nil
	}

	// Size
	bar.Size = genruntime.ClonePointerToInt(source.Size)

	// No error
	return nil
}

// AssignPropertiesToBar populates the provided destination Bar from our Bar
func (bar *Bar) AssignPropertiesToBar(destination *v20200101s.Bar) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Discrim
	if bar.Discrim != nil {
		discrim := string(*bar.Discrim)
		destination.Discrim = &discrim
	} else {
		destination.Discrim = nil
	}

	// Size
	destination.Size = genruntime.ClonePointerToInt(bar.Size)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"bar"}
type BarDiscrim string

const BarDiscrimBar = BarDiscrim("bar")

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type Baz struct {
	// +kubebuilder:validation:Required
	Discrim *BazDiscrim `json:"discrim,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled,omitempty"`
}

var _ genruntime.ARMTransformer = &Baz{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (baz *Baz) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if baz == nil {
		return nil, nil
	}
	result := &BazARM{}

	// Set property ‘Discrim’:
	if baz.Discrim != nil {
		result.Discrim = *baz.Discrim
	}

	// Set property ‘Enabled’:
	if baz.Enabled != nil {
		enabled := *baz.Enabled
		result.Enabled = &enabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (baz *Baz) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BazARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (baz *Baz) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BazARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BazARM, got %T", armInput)
	}

	// Set property ‘Discrim’:
	baz.Discrim = &typedInput.Discrim

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		baz.Enabled = &enabled
	}

	// No error
	return nil
}

// AssignPropertiesFromBaz populates our Baz from the provided source Baz
func (baz *Baz) AssignPropertiesFromBaz(source *v20200101s.Baz) error {

	// Discrim
	if source.Discrim != nil {
		discrim := BazDiscrim(*source.Discrim)
		baz.Discrim = &discrim
	} else {
		baz.Discrim = nil
	}

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		baz.Enabled = &enabled
	} else {
		baz.Enabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBaz populates the provided destination Baz from our Baz
func (baz *Baz) AssignPropertiesToBaz(destination *v20200101s.Baz) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Discrim
	if baz.Discrim != nil {
		discrim := string(*baz.Discrim)
		destination.Discrim = &discrim
	} else {
		destination.Discrim = nil
	}

	// Enabled
	if baz.Enabled != nil {
		enabled := *baz.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"baz"}
type BazDiscrim string

const BazDiscrimBaz = BazDiscrim("baz")

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	// +kubebuilder:validation:Required
	Discrim *FooDiscrim `json:"discrim,omitempty"`
	Name    *string     `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	result := &FooARM{}

	// Set property ‘Discrim’:
	if foo.Discrim != nil {
		result.Discrim = *foo.Discrim
	}

	// Set property ‘Name’:
	if foo.Name != nil {
		name := *foo.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}

	// Set property ‘Discrim’:
	foo.Discrim = &typedInput.Discrim

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		foo.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromFoo populates our Foo from the provided source Foo
func (foo *Foo) AssignPropertiesFromFoo(source *v20200101s.Foo) error {

	// Discrim
	if source.Discrim != nil {
		discrim := FooDiscrim(*source.Discrim)
		foo.Discrim = &discrim
	} else {
		foo.Discrim = nil
	}

	// Name
	foo.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToFoo populates the provided destination Foo from our Foo
func (foo *Foo) AssignPropertiesToFoo(destination *v20200101s.Foo) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Discrim
	if foo.Discrim != nil {
		discrim := string(*foo.Discrim)
		destination.Discrim = &discrim
	} else {
		destination.Discrim = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(foo.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"foo"}
type FooDiscrim string

const FooDiscrimFoo = FooDiscrim("foo")

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
