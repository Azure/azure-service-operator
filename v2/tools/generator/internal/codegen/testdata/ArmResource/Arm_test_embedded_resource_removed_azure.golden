// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=as,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={as/status,as/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type A struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              A_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &A{}

// GetConditions returns the conditions of the resource
func (a *A) GetConditions() conditions.Conditions {
	return a.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (a *A) SetConditions(conditions conditions.Conditions) { a.Status.Conditions = conditions }

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-a,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &A{}

// Default applies defaults to the A resource
func (a *A) Default() {
	a.defaultImpl()
	var temp interface{} = a
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (a *A) defaultAzureName() {
	if a.Spec.AzureName == "" {
		a.Spec.AzureName = a.Name
	}
}

// defaultImpl applies the code generated defaults to the A resource
func (a *A) defaultImpl() { a.defaultAzureName() }

var _ genruntime.KubernetesResource = &A{}

// AzureName returns the Azure name of the resource
func (a *A) AzureName() string {
	return a.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (a A) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (a *A) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (a *A) GetSpec() genruntime.ConvertibleSpec {
	return &a.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a *A) GetType() string {
	return "Microsoft.Azure/A"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (a *A) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(a.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  a.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-a,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=as,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.as.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &A{}

// ValidateCreate validates the creation of the resource
func (a *A) ValidateCreate() error {
	validations := a.createValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (a *A) ValidateDelete() error {
	validations := a.deleteValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (a *A) ValidateUpdate(old runtime.Object) error {
	validations := a.updateValidations()
	var temp interface{} = a
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (a *A) createValidations() []func() error {
	return []func() error{a.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (a *A) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (a *A) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return a.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (a *A) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&a.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// Hub marks that this A is the hub type for conversion
func (a *A) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (a *A) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: a.Spec.OriginalVersion(),
		Kind:    "A",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/A
type AList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []A `json:"items"`
}

type A_SpecARM struct {
	Name       string          `json:"name,omitempty"`
	Properties *APropertiesARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &A_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (a A_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (a A_SpecARM) GetName() string {
	return a.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/A"
func (a A_SpecARM) GetType() string {
	return "Microsoft.Azure/A"
}

// +kubebuilder:rbac:groups=test.azure.com,resources=bs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={bs/status,bs/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type B struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              B_Spec `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &B{}

// GetConditions returns the conditions of the resource
func (b *B) GetConditions() conditions.Conditions {
	return b.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (b *B) SetConditions(conditions conditions.Conditions) { b.Status.Conditions = conditions }

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-b,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.bs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &B{}

// Default applies defaults to the B resource
func (b *B) Default() {
	b.defaultImpl()
	var temp interface{} = b
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (b *B) defaultAzureName() {
	if b.Spec.AzureName == "" {
		b.Spec.AzureName = b.Name
	}
}

// defaultImpl applies the code generated defaults to the B resource
func (b *B) defaultImpl() { b.defaultAzureName() }

var _ genruntime.KubernetesResource = &B{}

// AzureName returns the Azure name of the resource
func (b *B) AzureName() string {
	return b.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (b B) GetAPIVersion() string {
	return "2020-06-01"
}

// GetResourceKind returns the kind of the resource
func (b *B) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (b *B) GetSpec() genruntime.ConvertibleSpec {
	return &b.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/B"
func (b *B) GetType() string {
	return "Microsoft.Azure/B"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (b *B) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(b.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  b.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-b,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=bs,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.bs.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &B{}

// ValidateCreate validates the creation of the resource
func (b *B) ValidateCreate() error {
	validations := b.createValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (b *B) ValidateDelete() error {
	validations := b.deleteValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (b *B) ValidateUpdate(old runtime.Object) error {
	validations := b.updateValidations()
	var temp interface{} = b
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (b *B) createValidations() []func() error {
	return []func() error{b.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (b *B) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (b *B) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return b.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (b *B) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&b.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// Hub marks that this B is the hub type for conversion
func (b *B) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (b *B) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: b.Spec.OriginalVersion(),
		Kind:    "B",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/B
type BList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []B `json:"items"`
}

type B_SpecARM struct {
	Name       string          `json:"name,omitempty"`
	Properties *BPropertiesARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &B_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (b B_SpecARM) GetAPIVersion() string {
	return "2020-06-01"
}

// GetName returns the Name of the resource
func (b B_SpecARM) GetName() string {
	return b.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/B"
func (b B_SpecARM) GetType() string {
	return "Microsoft.Azure/B"
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type APropertiesARM struct {
	IntField    *int          `json:"intField,omitempty"`
	RefField    *BResourceARM `json:"refField,omitempty"`
	StringField *string       `json:"stringField,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type ASpecAPIVersion string

const ASpecAPIVersion20200601 = ASpecAPIVersion("2020-06-01")

type A_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a resources.azure.com/ResourceGroup resource
	Owner      *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Properties *AProperties                       `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &A_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (a *A_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if a == nil {
		return nil, nil
	}
	var result A_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if a.Properties != nil {
		propertiesARM, err := (*a.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(APropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (a *A_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &A_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (a *A_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(A_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected A_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	a.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	a.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 AProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		a.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &A_Spec{}

// ConvertSpecFrom populates our A_Spec from the provided source
func (a *A_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == a {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(a)
}

// ConvertSpecTo populates the provided destination from our A_Spec
func (a *A_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == a {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(a)
}

// OriginalVersion returns the original API version used to create the resource.
func (a *A_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (a *A_Spec) SetAzureName(azureName string) { a.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BProperties
type BPropertiesARM struct {
	EnumField *BPropertiesEnumField `json:"enumField,omitempty"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type BSpecAPIVersion string

const BSpecAPIVersion20200601 = BSpecAPIVersion("2020-06-01")

type B_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	//Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	//controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	//reference to a resources.azure.com/ResourceGroup resource
	Owner      *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Properties *BProperties                       `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &B_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (b *B_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if b == nil {
		return nil, nil
	}
	var result B_SpecARM

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if b.Properties != nil {
		propertiesARM, err := (*b.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(BPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (b *B_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &B_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (b *B_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(B_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected B_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	b.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	b.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 BProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		b.Properties = &properties
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &B_Spec{}

// ConvertSpecFrom populates our B_Spec from the provided source
func (b *B_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == b {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(b)
}

// ConvertSpecTo populates the provided destination from our B_Spec
func (b *B_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == b {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(b)
}

// OriginalVersion returns the original API version used to create the resource.
func (b *B_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (b *B_Spec) SetAzureName(azureName string) { b.AzureName = azureName }

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/AProperties
type AProperties struct {
	IntField    *int       `json:"intField,omitempty"`
	RefField    *BResource `json:"refField,omitempty"`
	StringField *string    `json:"stringField,omitempty"`
}

var _ genruntime.ARMTransformer = &AProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *AProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result APropertiesARM

	// Set property ‘IntField’:
	if properties.IntField != nil {
		intField := *properties.IntField
		result.IntField = &intField
	}

	// Set property ‘RefField’:
	if properties.RefField != nil {
		refFieldARM, err := (*properties.RefField).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		refField := refFieldARM.(BResourceARM)
		result.RefField = &refField
	}

	// Set property ‘StringField’:
	if properties.StringField != nil {
		stringField := *properties.StringField
		result.StringField = &stringField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &APropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(APropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected APropertiesARM, got %T", armInput)
	}

	// Set property ‘IntField’:
	if typedInput.IntField != nil {
		intField := *typedInput.IntField
		properties.IntField = &intField
	}

	// Set property ‘RefField’:
	if typedInput.RefField != nil {
		var refField1 BResource
		err := refField1.PopulateFromARM(owner, *typedInput.RefField)
		if err != nil {
			return err
		}
		refField := refField1
		properties.RefField = &refField
	}

	// Set property ‘StringField’:
	if typedInput.StringField != nil {
		stringField := *typedInput.StringField
		properties.StringField = &stringField
	}

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BProperties
type BProperties struct {
	EnumField *BPropertiesEnumField `json:"enumField,omitempty"`
}

var _ genruntime.ARMTransformer = &BProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *BProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result BPropertiesARM

	// Set property ‘EnumField’:
	if properties.EnumField != nil {
		enumField := *properties.EnumField
		result.EnumField = &enumField
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *BProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *BProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BPropertiesARM, got %T", armInput)
	}

	// Set property ‘EnumField’:
	if typedInput.EnumField != nil {
		enumField := *typedInput.EnumField
		properties.EnumField = &enumField
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Qux"}
type BPropertiesEnumField string

const BPropertiesEnumFieldQux = BPropertiesEnumField("Qux")

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BResource
type BResourceARM struct {
	Id *string `json:"id,omitempty"`
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/BResource
type BResource struct {
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &BResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *BResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result BResourceARM

	// Set property ‘Id’:
	if resource.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*resource.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *BResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *BResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(BResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BResourceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&A{}, &AList{}, &B{}, &BList{})
}
