// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1api20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	Tags *Test_Tags `json:"tags,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Tags
	if source.Tags != nil {
		var tag Test_Tags
		err := tag.AssignProperties_From_Test_Tags(source.Tags)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Test_Tags() to populate field Tags")
		}
		test.Tags = &tag
	} else {
		test.Tags = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Tags
	if test.Tags != nil {
		var tag v20200101s.Test_Tags
		err := test.Tags.AssignProperties_To_Test_Tags(&tag)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Test_Tags() to populate field Tags")
		}
		destination.Tags = &tag
	} else {
		destination.Tags = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Test_Tags struct {
	AdditionalProperties map[string]float64 `json:"additionalProperties,omitempty"`
	OtherField           *string            `json:"otherField,omitempty"`
}

// AssignProperties_From_Test_Tags populates our Test_Tags from the provided source Test_Tags
func (tags *Test_Tags) AssignProperties_From_Test_Tags(source *v20200101s.Test_Tags) error {

	// AdditionalProperties
	if source.AdditionalProperties != nil {
		additionalPropertyMap := make(map[string]float64, len(source.AdditionalProperties))
		for additionalPropertyKey, additionalPropertyValue := range source.AdditionalProperties {
			// Shadow the loop variable to avoid aliasing
			additionalPropertyValue := additionalPropertyValue
			additionalPropertyMap[additionalPropertyKey] = additionalPropertyValue
		}
		tags.AdditionalProperties = additionalPropertyMap
	} else {
		tags.AdditionalProperties = nil
	}

	// OtherField
	tags.OtherField = genruntime.ClonePointerToString(source.OtherField)

	// No error
	return nil
}

// AssignProperties_To_Test_Tags populates the provided destination Test_Tags from our Test_Tags
func (tags *Test_Tags) AssignProperties_To_Test_Tags(destination *v20200101s.Test_Tags) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalProperties
	if tags.AdditionalProperties != nil {
		additionalPropertyMap := make(map[string]float64, len(tags.AdditionalProperties))
		for additionalPropertyKey, additionalPropertyValue := range tags.AdditionalProperties {
			// Shadow the loop variable to avoid aliasing
			additionalPropertyValue := additionalPropertyValue
			additionalPropertyMap[additionalPropertyKey] = additionalPropertyValue
		}
		destination.AdditionalProperties = additionalPropertyMap
	} else {
		destination.AdditionalProperties = nil
	}

	// OtherField
	destination.OtherField = genruntime.ClonePointerToString(tags.OtherField)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
