// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200101

import (
	storage "github.com/Azure/azure-service-operator/testing/test/v1api20200101/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxItems=2
	// +kubebuilder:validation:MinItems=1
	Apple []float64 `json:"apple,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=20
	// +kubebuilder:validation:MinLength=10
	// +kubebuilder:validation:Pattern="^[a-z]+$"
	Duck *string `json:"duck,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Maximum=2000
	// +kubebuilder:validation:Minimum=1000
	// +kubebuilder:validation:ExclusiveMinimum=true
	// +kubebuilder:validation:MultipleOf=3
	Moon *float64 `json:"moon,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Maximum=200
	// +kubebuilder:validation:ExclusiveMaximum=true
	// +kubebuilder:validation:Minimum=100
	// +kubebuilder:validation:MultipleOf=4
	Sun *int `json:"sun,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *storage.Test) error {

	// Apple
	if source.Apple != nil {
		appleList := make([]float64, len(source.Apple))
		for appleIndex, appleItem := range source.Apple {
			// Shadow the loop variable to avoid aliasing
			appleItem := appleItem
			appleList[appleIndex] = appleItem
		}
		test.Apple = appleList
	} else {
		test.Apple = nil
	}

	// Duck
	if source.Duck != nil {
		duck := *source.Duck
		test.Duck = &duck
	} else {
		test.Duck = nil
	}

	// Moon
	if source.Moon != nil {
		moon := *source.Moon
		test.Moon = &moon
	} else {
		test.Moon = nil
	}

	// Sun
	if source.Sun != nil {
		sun := *source.Sun
		test.Sun = &sun
	} else {
		test.Sun = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *storage.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Apple
	if test.Apple != nil {
		appleList := make([]float64, len(test.Apple))
		for appleIndex, appleItem := range test.Apple {
			// Shadow the loop variable to avoid aliasing
			appleItem := appleItem
			appleList[appleIndex] = appleItem
		}
		destination.Apple = appleList
	} else {
		destination.Apple = nil
	}

	// Duck
	if test.Duck != nil {
		duck := *test.Duck
		destination.Duck = &duck
	} else {
		destination.Duck = nil
	}

	// Moon
	if test.Moon != nil {
		moon := *test.Moon
		destination.Moon = &moon
	} else {
		destination.Moon = nil
	}

	// Sun
	if test.Sun != nil {
		sun := *test.Sun
		destination.Sun = &sun
	} else {
		destination.Sun = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
