// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=fakeresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={fakeresources/status,fakeresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FakeResource_Spec `json:"spec,omitempty"`
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FakeResource{}

// Default applies defaults to the FakeResource resource
func (fakeResource *FakeResource) Default() {
	fakeResource.defaultImpl()
	var temp interface{} = fakeResource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (fakeResource *FakeResource) defaultAzureName() {
	if fakeResource.Spec.AzureName == "" {
		fakeResource.Spec.AzureName = fakeResource.Name
	}
}

// defaultImpl applies the code generated defaults to the FakeResource resource
func (fakeResource *FakeResource) defaultImpl() { fakeResource.defaultAzureName() }

var _ genruntime.KubernetesResource = &FakeResource{}

// AzureName returns the Azure name of the resource
func (fakeResource *FakeResource) AzureName() string {
	return fakeResource.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (fakeResource *FakeResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (fakeResource *FakeResource) GetSpec() genruntime.ConvertibleSpec {
	return &fakeResource.Spec
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Azure/FakeResource"
func (fakeResource *FakeResource) GetType() string {
	return "Microsoft.Azure/FakeResource"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (fakeResource *FakeResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(fakeResource.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: fakeResource.Namespace,
		Name:      fakeResource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-fakeresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=fakeresources,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.fakeresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FakeResource{}

// ValidateCreate validates the creation of the resource
func (fakeResource *FakeResource) ValidateCreate() error {
	validations := fakeResource.createValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (fakeResource *FakeResource) ValidateDelete() error {
	validations := fakeResource.deleteValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (fakeResource *FakeResource) ValidateUpdate(old runtime.Object) error {
	validations := fakeResource.updateValidations()
	var temp interface{} = fakeResource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (fakeResource *FakeResource) createValidations() []func() error {
	return []func() error{fakeResource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (fakeResource *FakeResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (fakeResource *FakeResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return fakeResource.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (fakeResource *FakeResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&fakeResource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/FakeResource
type FakeResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FakeResource `json:"items"`
}

type FakeResource_SpecARM struct {
	EmbeddedTestTypeARM `json:",inline"`
	APIVersion          FakeResourceSpecAPIVersion `json:"apiVersion"`
	Color               *FakeResourceSpecColor     `json:"color,omitempty"`
	Foo                 FooARM                     `json:"foo"`
	Name                string                     `json:"name"`
	OptionalFoo         *FooARM                    `json:"optionalFoo,omitempty"`
	Type                FakeResourceSpecType       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &FakeResource_SpecARM{}

// GetAPIVersion returns the APIVersion of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetAPIVersion() string {
	return string(fakeResourceSpecARM.APIVersion)
}

// GetName returns the Name of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetName() string {
	return fakeResourceSpecARM.Name
}

// GetType returns the Type of the resource
func (fakeResourceSpecARM FakeResource_SpecARM) GetType() string {
	return string(fakeResourceSpecARM.Type)
}

type EmbeddedTestTypeARM struct {
	FancyProp int `json:"fancyProp"`
}

// +kubebuilder:validation:Enum={"2020-06-01"}
type FakeResourceSpecAPIVersion string

const FakeResourceSpecAPIVersion20200601 = FakeResourceSpecAPIVersion("2020-06-01")

// +kubebuilder:validation:Enum={"blue","green","red"}
type FakeResourceSpecColor string

const (
	FakeResourceSpecColorBlue  = FakeResourceSpecColor("blue")
	FakeResourceSpecColorGreen = FakeResourceSpecColor("green")
	FakeResourceSpecColorRed   = FakeResourceSpecColor("red")
)

// +kubebuilder:validation:Enum={"Microsoft.Azure/FakeResource"}
type FakeResourceSpecType string

const FakeResourceSpecTypeMicrosoftAzureFakeResource = FakeResourceSpecType("Microsoft.Azure/FakeResource")

type FakeResource_Spec struct {
	EmbeddedTestType `json:",inline"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string                 `json:"azureName"`
	Color     *FakeResourceSpecColor `json:"color,omitempty"`

	// +kubebuilder:validation:Required
	Foo         Foo  `json:"foo"`
	OptionalFoo *Foo `json:"optionalFoo,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`
}

var _ genruntime.ARMTransformer = &FakeResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (fakeResourceSpec *FakeResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if fakeResourceSpec == nil {
		return nil, nil
	}
	var result FakeResource_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = FakeResourceSpecAPIVersion20200601

	// Set property ‘Color’:
	if fakeResourceSpec.Color != nil {
		color := *fakeResourceSpec.Color
		result.Color = &color
	}

	// Set property ‘Foo’:
	fooARM, err := fakeResourceSpec.Foo.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Foo = fooARM.(FooARM)

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘OptionalFoo’:
	if fakeResourceSpec.OptionalFoo != nil {
		optionalFooARM, err := (*fakeResourceSpec.OptionalFoo).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		optionalFoo := optionalFooARM.(FooARM)
		result.OptionalFoo = &optionalFoo
	}

	// Set property ‘Type’:
	result.Type = FakeResourceSpecTypeMicrosoftAzureFakeResource
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (fakeResourceSpec *FakeResource_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &FakeResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (fakeResourceSpec *FakeResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FakeResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FakeResource_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	fakeResourceSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Color’:
	if typedInput.Color != nil {
		color := *typedInput.Color
		fakeResourceSpec.Color = &color
	}

	// Set property ‘Foo’:
	var foo Foo
	err := foo.PopulateFromARM(owner, typedInput.Foo)
	if err != nil {
		return err
	}
	fakeResourceSpec.Foo = foo

	// Set property ‘OptionalFoo’:
	if typedInput.OptionalFoo != nil {
		var optionalFoo1 Foo
		err = optionalFoo1.PopulateFromARM(owner, *typedInput.OptionalFoo)
		if err != nil {
			return err
		}
		optionalFoo := optionalFoo1
		fakeResourceSpec.OptionalFoo = &optionalFoo
	}

	// Set property ‘Owner’:
	fakeResourceSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// No error
	return nil
}

// SetAzureName sets the Azure name of the resource
func (fakeResourceSpec *FakeResource_Spec) SetAzureName(azureName string) {
	fakeResourceSpec.AzureName = azureName
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type FooARM struct {
	EmbeddedTestTypeARM `json:",inline"`
	Name                *string `json:"name,omitempty"`
}

type EmbeddedTestType struct {
	FancyProp int `json:"fancyProp"`
}

var _ genruntime.ARMTransformer = &EmbeddedTestType{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embeddedTestType *EmbeddedTestType) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embeddedTestType == nil {
		return nil, nil
	}
	var result EmbeddedTestTypeARM

	// Set property ‘FancyProp’:
	result.FancyProp = embeddedTestType.FancyProp
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embeddedTestType *EmbeddedTestType) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EmbeddedTestTypeARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embeddedTestType *EmbeddedTestType) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EmbeddedTestTypeARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EmbeddedTestTypeARM, got %T", armInput)
	}

	// Set property ‘FancyProp’:
	embeddedTestType.FancyProp = typedInput.FancyProp

	// No error
	return nil
}

//Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	EmbeddedTestType `json:",inline"`
	Name             *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Foo{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (foo *Foo) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if foo == nil {
		return nil, nil
	}
	var result FooARM

	// Set property ‘Name’:
	if foo.Name != nil {
		name := *foo.Name
		result.Name = &name
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (foo *Foo) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &FooARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (foo *Foo) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FooARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FooARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		foo.Name = &name
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&FakeResource{}, &FakeResourceList{})
}
