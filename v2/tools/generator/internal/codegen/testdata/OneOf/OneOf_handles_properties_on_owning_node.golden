// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// Either: Mutually exclusive with all other properties
	Either *Test_Either `json:"either,omitempty"`

	// Or: Mutually exclusive with all other properties
	Or *Test_Or `json:"or,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Either
	if source.Either != nil {
		var either Test_Either
		err := either.AssignProperties_From_Test_Either(source.Either)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Test_Either() to populate field Either")
		}
		test.Either = &either
	} else {
		test.Either = nil
	}

	// Or
	if source.Or != nil {
		var or Test_Or
		err := or.AssignProperties_From_Test_Or(source.Or)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Test_Or() to populate field Or")
		}
		test.Or = &or
	} else {
		test.Or = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Either
	if test.Either != nil {
		var either v20200101s.Test_Either
		err := test.Either.AssignProperties_To_Test_Either(&either)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Test_Either() to populate field Either")
		}
		destination.Either = &either
	} else {
		destination.Either = nil
	}

	// Or
	if test.Or != nil {
		var or v20200101s.Test_Or
		err := test.Or.AssignProperties_To_Test_Or(&or)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Test_Or() to populate field Or")
		}
		destination.Or = &or
	} else {
		destination.Or = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Test_Either struct {
	Height *int `json:"height,omitempty"`
	Width  *int `json:"width,omitempty"`
}

// AssignProperties_From_Test_Either populates our Test_Either from the provided source Test_Either
func (either *Test_Either) AssignProperties_From_Test_Either(source *v20200101s.Test_Either) error {

	// Height
	either.Height = genruntime.ClonePointerToInt(source.Height)

	// Width
	either.Width = genruntime.ClonePointerToInt(source.Width)

	// No error
	return nil
}

// AssignProperties_To_Test_Either populates the provided destination Test_Either from our Test_Either
func (either *Test_Either) AssignProperties_To_Test_Either(destination *v20200101s.Test_Either) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Height
	destination.Height = genruntime.ClonePointerToInt(either.Height)

	// Width
	destination.Width = genruntime.ClonePointerToInt(either.Width)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Test_Or struct {
	Length *int `json:"length,omitempty"`
	Width  *int `json:"width,omitempty"`
}

// AssignProperties_From_Test_Or populates our Test_Or from the provided source Test_Or
func (testOr *Test_Or) AssignProperties_From_Test_Or(source *v20200101s.Test_Or) error {

	// Length
	testOr.Length = genruntime.ClonePointerToInt(source.Length)

	// Width
	testOr.Width = genruntime.ClonePointerToInt(source.Width)

	// No error
	return nil
}

// AssignProperties_To_Test_Or populates the provided destination Test_Or from our Test_Or
func (testOr *Test_Or) AssignProperties_To_Test_Or(destination *v20200101s.Test_Or) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Length
	destination.Length = genruntime.ClonePointerToInt(testOr.Length)

	// Width
	destination.Width = genruntime.ClonePointerToInt(testOr.Width)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
