// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// Bar: Mutually exclusive with all other properties
	Bar *Bar `json:"bar,omitempty"`

	// Baz: Mutually exclusive with all other properties
	Baz *Baz `json:"baz,omitempty"`

	// Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Bar
	if source.Bar != nil {
		var bar Bar
		err := bar.AssignProperties_From_Bar(source.Bar)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Bar() to populate field Bar")
		}
		test.Bar = &bar
	} else {
		test.Bar = nil
	}

	// Baz
	if source.Baz != nil {
		var baz Baz
		err := baz.AssignProperties_From_Baz(source.Baz)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Baz() to populate field Baz")
		}
		test.Baz = &baz
	} else {
		test.Baz = nil
	}

	// Foo
	if source.Foo != nil {
		var foo Foo
		err := foo.AssignProperties_From_Foo(source.Foo)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Foo() to populate field Foo")
		}
		test.Foo = &foo
	} else {
		test.Foo = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bar
	if test.Bar != nil {
		var bar v20200101s.Bar
		err := test.Bar.AssignProperties_To_Bar(&bar)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Bar() to populate field Bar")
		}
		destination.Bar = &bar
	} else {
		destination.Bar = nil
	}

	// Baz
	if test.Baz != nil {
		var baz v20200101s.Baz
		err := test.Baz.AssignProperties_To_Baz(&baz)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Baz() to populate field Baz")
		}
		destination.Baz = &baz
	} else {
		destination.Baz = nil
	}

	// Foo
	if test.Foo != nil {
		var foo v20200101s.Foo
		err := test.Foo.AssignProperties_To_Foo(&foo)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Foo() to populate field Foo")
		}
		destination.Foo = &foo
	} else {
		destination.Foo = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Bar
type Bar struct {
	// +kubebuilder:validation:Required
	Size *int `json:"size,omitempty"`
}

// AssignProperties_From_Bar populates our Bar from the provided source Bar
func (bar *Bar) AssignProperties_From_Bar(source *v20200101s.Bar) error {

	// Size
	bar.Size = genruntime.ClonePointerToInt(source.Size)

	// No error
	return nil
}

// AssignProperties_To_Bar populates the provided destination Bar from our Bar
func (bar *Bar) AssignProperties_To_Bar(destination *v20200101s.Bar) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Size
	destination.Size = genruntime.ClonePointerToInt(bar.Size)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Baz
type Baz struct {
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled,omitempty"`
}

// AssignProperties_From_Baz populates our Baz from the provided source Baz
func (baz *Baz) AssignProperties_From_Baz(source *v20200101s.Baz) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		baz.Enabled = &enabled
	} else {
		baz.Enabled = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Baz populates the provided destination Baz from our Baz
func (baz *Baz) AssignProperties_To_Baz(destination *v20200101s.Baz) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if baz.Enabled != nil {
		enabled := *baz.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

// AssignProperties_From_Foo populates our Foo from the provided source Foo
func (foo *Foo) AssignProperties_From_Foo(source *v20200101s.Foo) error {

	// Name
	foo.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Foo populates the provided destination Foo from our Foo
func (foo *Foo) AssignProperties_To_Foo(destination *v20200101s.Foo) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(foo.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
