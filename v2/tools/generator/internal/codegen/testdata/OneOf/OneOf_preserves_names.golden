// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// Base: Mutually exclusive with all other properties
	Base *Test_Base `json:"base,omitempty"`

	// Inherited: Mutually exclusive with all other properties
	Inherited *Test_Inherited `json:"inherited,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Base
	if source.Base != nil {
		var base Test_Base
		err := base.AssignProperties_From_Test_Base(source.Base)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Test_Base() to populate field Base")
		}
		test.Base = &base
	} else {
		test.Base = nil
	}

	// Inherited
	if source.Inherited != nil {
		var inherited Test_Inherited
		err := inherited.AssignProperties_From_Test_Inherited(source.Inherited)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Test_Inherited() to populate field Inherited")
		}
		test.Inherited = &inherited
	} else {
		test.Inherited = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Base
	if test.Base != nil {
		var base v20200101s.Test_Base
		err := test.Base.AssignProperties_To_Test_Base(&base)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Test_Base() to populate field Base")
		}
		destination.Base = &base
	} else {
		destination.Base = nil
	}

	// Inherited
	if test.Inherited != nil {
		var inherited v20200101s.Test_Inherited
		err := test.Inherited.AssignProperties_To_Test_Inherited(&inherited)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Test_Inherited() to populate field Inherited")
		}
		destination.Inherited = &inherited
	} else {
		destination.Inherited = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Test_Base struct {
	Width *int `json:"width,omitempty"`
}

// AssignProperties_From_Test_Base populates our Test_Base from the provided source Test_Base
func (base *Test_Base) AssignProperties_From_Test_Base(source *v20200101s.Test_Base) error {

	// Width
	base.Width = genruntime.ClonePointerToInt(source.Width)

	// No error
	return nil
}

// AssignProperties_To_Test_Base populates the provided destination Test_Base from our Test_Base
func (base *Test_Base) AssignProperties_To_Test_Base(destination *v20200101s.Test_Base) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Width
	destination.Width = genruntime.ClonePointerToInt(base.Width)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Test_Inherited struct {
	Height *int `json:"height,omitempty"`
	Width  *int `json:"width,omitempty"`
}

// AssignProperties_From_Test_Inherited populates our Test_Inherited from the provided source Test_Inherited
func (inherited *Test_Inherited) AssignProperties_From_Test_Inherited(source *v20200101s.Test_Inherited) error {

	// Height
	inherited.Height = genruntime.ClonePointerToInt(source.Height)

	// Width
	inherited.Width = genruntime.ClonePointerToInt(source.Width)

	// No error
	return nil
}

// AssignProperties_To_Test_Inherited populates the provided destination Test_Inherited from our Test_Inherited
func (inherited *Test_Inherited) AssignProperties_To_Test_Inherited(destination *v20200101s.Test_Inherited) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Height
	destination.Height = genruntime.ClonePointerToInt(inherited.Height)

	// Width
	destination.Width = genruntime.ClonePointerToInt(inherited.Width)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
