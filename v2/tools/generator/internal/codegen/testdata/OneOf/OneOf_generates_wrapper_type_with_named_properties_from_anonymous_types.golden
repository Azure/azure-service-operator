// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// Bool1: Mutually exclusive with all other properties
	Bool1 *bool `json:"bool1,omitempty"`

	// Foo: Mutually exclusive with all other properties
	Foo *Foo `json:"foo,omitempty"`

	// Object2: Mutually exclusive with all other properties
	Object2 *Test_Object2 `json:"object2,omitempty"`
}

// AssignPropertiesFromTest populates our Test from the provided source Test
func (test *Test) AssignPropertiesFromTest(source *v20200101s.Test) error {

	// Bool1
	if source.Bool1 != nil {
		bool1 := *source.Bool1
		test.Bool1 = &bool1
	} else {
		test.Bool1 = nil
	}

	// Foo
	if source.Foo != nil {
		var foo Foo
		err := foo.AssignPropertiesFromFoo(source.Foo)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFoo() to populate field Foo")
		}
		test.Foo = &foo
	} else {
		test.Foo = nil
	}

	// Object2
	if source.Object2 != nil {
		var object2 Test_Object2
		err := object2.AssignPropertiesFromTestObject2(source.Object2)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromTestObject2() to populate field Object2")
		}
		test.Object2 = &object2
	} else {
		test.Object2 = nil
	}

	// No error
	return nil
}

// AssignPropertiesToTest populates the provided destination Test from our Test
func (test *Test) AssignPropertiesToTest(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bool1
	if test.Bool1 != nil {
		bool1 := *test.Bool1
		destination.Bool1 = &bool1
	} else {
		destination.Bool1 = nil
	}

	// Foo
	if test.Foo != nil {
		var foo v20200101s.Foo
		err := test.Foo.AssignPropertiesToFoo(&foo)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFoo() to populate field Foo")
		}
		destination.Foo = &foo
	} else {
		destination.Foo = nil
	}

	// Object2
	if test.Object2 != nil {
		var object2 v20200101s.Test_Object2
		err := test.Object2.AssignPropertiesToTestObject2(&object2)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToTestObject2() to populate field Object2")
		}
		destination.Object2 = &object2
	} else {
		destination.Object2 = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Foo
type Foo struct {
	Name *string `json:"name,omitempty"`
}

// AssignPropertiesFromFoo populates our Foo from the provided source Foo
func (foo *Foo) AssignPropertiesFromFoo(source *v20200101s.Foo) error {

	// Name
	foo.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToFoo populates the provided destination Foo from our Foo
func (foo *Foo) AssignPropertiesToFoo(destination *v20200101s.Foo) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(foo.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Test_Object2 struct {
	Foo *string `json:"foo,omitempty"`
}

// AssignPropertiesFromTestObject2 populates our Test_Object2 from the provided source Test_Object2
func (object2 *Test_Object2) AssignPropertiesFromTestObject2(source *v20200101s.Test_Object2) error {

	// Foo
	object2.Foo = genruntime.ClonePointerToString(source.Foo)

	// No error
	return nil
}

// AssignPropertiesToTestObject2 populates the provided destination Test_Object2 from our Test_Object2
func (object2 *Test_Object2) AssignPropertiesToTestObject2(destination *v20200101s.Test_Object2) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Foo
	destination.Foo = genruntime.ClonePointerToString(object2.Foo)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
