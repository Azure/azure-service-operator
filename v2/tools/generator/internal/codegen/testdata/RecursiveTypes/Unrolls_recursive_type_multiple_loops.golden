// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	Error *Error `json:"error,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Error
	if source.Error != nil {
		var error Error
		err := error.AssignProperties_From_Error(source.Error)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Error() to populate field Error")
		}
		test.Error = &error
	} else {
		test.Error = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Error
	if test.Error != nil {
		var error v20200101s.Error
		err := test.Error.AssignProperties_To_Error(&error)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Error() to populate field Error")
		}
		destination.Error = &error
	} else {
		destination.Error = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Error
type Error struct {
	Error1 *Error_Unrolled `json:"error1,omitempty"`
	Error2 *Error_Unrolled `json:"error2,omitempty"`
	Name   *string         `json:"name,omitempty"`
}

// AssignProperties_From_Error populates our Error from the provided source Error
func (error *Error) AssignProperties_From_Error(source *v20200101s.Error) error {

	// Error1
	if source.Error1 != nil {
		var error1 Error_Unrolled
		err := error1.AssignProperties_From_Error_Unrolled(source.Error1)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Error_Unrolled() to populate field Error1")
		}
		error.Error1 = &error1
	} else {
		error.Error1 = nil
	}

	// Error2
	if source.Error2 != nil {
		var error2 Error_Unrolled
		err := error2.AssignProperties_From_Error_Unrolled(source.Error2)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Error_Unrolled() to populate field Error2")
		}
		error.Error2 = &error2
	} else {
		error.Error2 = nil
	}

	// Name
	error.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Error populates the provided destination Error from our Error
func (error *Error) AssignProperties_To_Error(destination *v20200101s.Error) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Error1
	if error.Error1 != nil {
		var error1 v20200101s.Error_Unrolled
		err := error.Error1.AssignProperties_To_Error_Unrolled(&error1)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Error_Unrolled() to populate field Error1")
		}
		destination.Error1 = &error1
	} else {
		destination.Error1 = nil
	}

	// Error2
	if error.Error2 != nil {
		var error2 v20200101s.Error_Unrolled
		err := error.Error2.AssignProperties_To_Error_Unrolled(&error2)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Error_Unrolled() to populate field Error2")
		}
		destination.Error2 = &error2
	} else {
		destination.Error2 = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(error.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Error_Unrolled struct {
	Name *string `json:"name,omitempty"`
}

// AssignProperties_From_Error_Unrolled populates our Error_Unrolled from the provided source Error_Unrolled
func (unrolled *Error_Unrolled) AssignProperties_From_Error_Unrolled(source *v20200101s.Error_Unrolled) error {

	// Name
	unrolled.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Error_Unrolled populates the provided destination Error_Unrolled from our Error_Unrolled
func (unrolled *Error_Unrolled) AssignProperties_To_Error_Unrolled(destination *v20200101s.Error_Unrolled) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(unrolled.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
