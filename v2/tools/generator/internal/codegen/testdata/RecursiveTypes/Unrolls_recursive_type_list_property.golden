// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1api20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// Error: Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Error
	Error *Error `json:"error,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Error
	if source.Error != nil {
		var error Error
		err := error.AssignProperties_From_Error(source.Error)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Error() to populate field Error")
		}
		test.Error = &error
	} else {
		test.Error = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Error
	if test.Error != nil {
		var error v20200101s.Error
		err := test.Error.AssignProperties_To_Error(&error)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Error() to populate field Error")
		}
		destination.Error = &error
	} else {
		destination.Error = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Error
type Error struct {
	Errors []Error_Unrolled `json:"errors,omitempty"`
	Name   *string          `json:"name,omitempty"`
}

// AssignProperties_From_Error populates our Error from the provided source Error
func (error *Error) AssignProperties_From_Error(source *v20200101s.Error) error {

	// Errors
	if source.Errors != nil {
		errorList := make([]Error_Unrolled, len(source.Errors))
		for errorIndex, errorItem := range source.Errors {
			// Shadow the loop variable to avoid aliasing
			errorItem := errorItem
			var errorLocal Error_Unrolled
			err := errorLocal.AssignProperties_From_Error_Unrolled(&errorItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Error_Unrolled() to populate field Errors")
			}
			errorList[errorIndex] = errorLocal
		}
		error.Errors = errorList
	} else {
		error.Errors = nil
	}

	// Name
	error.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Error populates the provided destination Error from our Error
func (error *Error) AssignProperties_To_Error(destination *v20200101s.Error) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Errors
	if error.Errors != nil {
		errorList := make([]v20200101s.Error_Unrolled, len(error.Errors))
		for errorIndex, errorItem := range error.Errors {
			// Shadow the loop variable to avoid aliasing
			errorItem := errorItem
			var errorLocal v20200101s.Error_Unrolled
			err := errorItem.AssignProperties_To_Error_Unrolled(&errorLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Error_Unrolled() to populate field Errors")
			}
			errorList[errorIndex] = errorLocal
		}
		destination.Errors = errorList
	} else {
		destination.Errors = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(error.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Error_Unrolled struct {
	Name *string `json:"name,omitempty"`
}

// AssignProperties_From_Error_Unrolled populates our Error_Unrolled from the provided source Error_Unrolled
func (unrolled *Error_Unrolled) AssignProperties_From_Error_Unrolled(source *v20200101s.Error_Unrolled) error {

	// Name
	unrolled.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Error_Unrolled populates the provided destination Error_Unrolled from our Error_Unrolled
func (unrolled *Error_Unrolled) AssignProperties_To_Error_Unrolled(destination *v20200101s.Error_Unrolled) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(unrolled.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
