// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
)

//Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// +kubebuilder:validation:Required
	Size                 *int            `json:"size,omitempty"`
	additionalProperties map[string]bool `json:"additionalProperties,omitempty"`
}

// AssignPropertiesFromTest populates our Test from the provided source Test
func (test *Test) AssignPropertiesFromTest(source *v20200101s.Test) error {

	// Size
	test.Size = genruntime.ClonePointerToInt(source.Size)

	// additionalProperties
	if source.additionalProperties != nil {
		additionalPropertyMap := make(map[string]bool, len(source.additionalProperties))
		for additionalPropertyKey, additionalPropertyValue := range source.additionalProperties {
			// Shadow the loop variable to avoid aliasing
			additionalPropertyValue := additionalPropertyValue
			additionalPropertyMap[additionalPropertyKey] = additionalPropertyValue
		}
		test.additionalProperties = additionalPropertyMap
	} else {
		test.additionalProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToTest populates the provided destination Test from our Test
func (test *Test) AssignPropertiesToTest(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Size
	destination.Size = genruntime.ClonePointerToInt(test.Size)

	// additionalProperties
	if test.additionalProperties != nil {
		additionalPropertyMap := make(map[string]bool, len(test.additionalProperties))
		for additionalPropertyKey, additionalPropertyValue := range test.additionalProperties {
			// Shadow the loop variable to avoid aliasing
			additionalPropertyValue := additionalPropertyValue
			additionalPropertyMap[additionalPropertyKey] = additionalPropertyValue
		}
		destination.additionalProperties = additionalPropertyMap
	} else {
		destination.additionalProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
