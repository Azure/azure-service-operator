// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200101

import (
	v20200101s "github.com/Azure/azure-service-operator/testing/test/v1beta20200101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/pkg/errors"
)

// Generated from: https://test.test/schemas/2020-01-01/test.json
type Test struct {
	// Inner_Flat: Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Inner
	Inner_Flat *Inner `json:"inner_flat,omitempty"`

	// Inner_Not_Flat: Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Inner
	Inner_Not_Flat *Inner `json:"inner_not_flat,omitempty"`
}

// AssignProperties_From_Test populates our Test from the provided source Test
func (test *Test) AssignProperties_From_Test(source *v20200101s.Test) error {

	// Inner_Flat
	if source.Inner_Flat != nil {
		var innerFlat Inner
		err := innerFlat.AssignProperties_From_Inner(source.Inner_Flat)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Inner() to populate field Inner_Flat")
		}
		test.Inner_Flat = &innerFlat
	} else {
		test.Inner_Flat = nil
	}

	// Inner_Not_Flat
	if source.Inner_Not_Flat != nil {
		var innerNotFlat Inner
		err := innerNotFlat.AssignProperties_From_Inner(source.Inner_Not_Flat)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Inner() to populate field Inner_Not_Flat")
		}
		test.Inner_Not_Flat = &innerNotFlat
	} else {
		test.Inner_Not_Flat = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Test populates the provided destination Test from our Test
func (test *Test) AssignProperties_To_Test(destination *v20200101s.Test) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Inner_Flat
	if test.Inner_Flat != nil {
		var innerFlat v20200101s.Inner
		err := test.Inner_Flat.AssignProperties_To_Inner(&innerFlat)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Inner() to populate field Inner_Flat")
		}
		destination.Inner_Flat = &innerFlat
	} else {
		destination.Inner_Flat = nil
	}

	// Inner_Not_Flat
	if test.Inner_Not_Flat != nil {
		var innerNotFlat v20200101s.Inner
		err := test.Inner_Not_Flat.AssignProperties_To_Inner(&innerNotFlat)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Inner() to populate field Inner_Not_Flat")
		}
		destination.Inner_Not_Flat = &innerNotFlat
	} else {
		destination.Inner_Not_Flat = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://test.test/schemas/2020-01-01/test.json#/definitions/Inner
type Inner struct {
	Color *string `json:"color,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// AssignProperties_From_Inner populates our Inner from the provided source Inner
func (inner *Inner) AssignProperties_From_Inner(source *v20200101s.Inner) error {

	// Color
	inner.Color = genruntime.ClonePointerToString(source.Color)

	// Name
	inner.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Inner populates the provided destination Inner from our Inner
func (inner *Inner) AssignProperties_To_Inner(destination *v20200101s.Inner) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Color
	destination.Color = genruntime.ClonePointerToString(inner.Color)

	// Name
	destination.Name = genruntime.ClonePointerToString(inner.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}
