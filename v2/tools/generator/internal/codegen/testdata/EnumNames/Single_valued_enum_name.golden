// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=test.azure.com,resources=aresources,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=test.azure.com,resources={aresources/status,aresources/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/AResource
type AResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AResource_SPEC `json:"spec,omitempty"`
}

var _ conditions.Conditioner = &AResource{}

// GetConditions returns the conditions of the resource
func (resource *AResource) GetConditions() conditions.Conditions {
	return resource.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (resource *AResource) SetConditions(conditions conditions.Conditions) {
	resource.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-test-azure-com-v1alpha1api20200101-aresource,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=aresources,verbs=create;update,versions=v1alpha1api20200101,name=default.v1alpha1api20200101.aresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &AResource{}

// Default applies defaults to the AResource resource
func (resource *AResource) Default() {
	resource.defaultImpl()
	var temp interface{} = resource
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the AResource resource
func (resource *AResource) defaultImpl() {}

var _ genruntime.KubernetesResource = &AResource{}

// AzureName returns the Azure name of the resource (always "onlyonevalue")
func (resource *AResource) AzureName() string {
	return "onlyonevalue"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "placeholder for golden tests"
func (resource AResource) GetAPIVersion() string {
	return string(APIVersionAPIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (resource *AResource) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (resource *AResource) GetSpec() genruntime.ConvertibleSpec {
	return &resource.Spec
}

// GetType returns the ARM Type of the resource. This is always ""
func (resource *AResource) GetType() string {
	return ""
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (resource *AResource) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(resource.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  resource.Spec.Owner.Name,
	}
}

// +kubebuilder:webhook:path=/validate-test-azure-com-v1alpha1api20200101-aresource,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=test.azure.com,resources=aresources,verbs=create;update,versions=v1alpha1api20200101,name=validate.v1alpha1api20200101.aresources.test.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &AResource{}

// ValidateCreate validates the creation of the resource
func (resource *AResource) ValidateCreate() error {
	validations := resource.createValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (resource *AResource) ValidateDelete() error {
	validations := resource.deleteValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (resource *AResource) ValidateUpdate(old runtime.Object) error {
	validations := resource.updateValidations()
	var temp interface{} = resource
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (resource *AResource) createValidations() []func() error {
	return []func() error{resource.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (resource *AResource) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (resource *AResource) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return resource.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (resource *AResource) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&resource.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// Hub marks that this AResource is the hub type for conversion
func (resource *AResource) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (resource *AResource) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: resource.Spec.OriginalVersion(),
		Kind:    "AResource",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://test.test/schemas/2020-01-01/test.json#/resourceDefinitions/AResource
type AResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AResource `json:"items"`
}

type AResource_SPECARM struct {
	APIVersion AResource_APIVersion_SPEC `json:"apiVersion"`
	Name       string                    `json:"name"`
	Type       AResource_Type_SPEC       `json:"type"`
}

var _ genruntime.ARMResourceSpec = &AResource_SPECARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "placeholder for golden tests"
func (specarm AResource_SPECARM) GetAPIVersion() string {
	return string(APIVersionAPIVersionValue)
}

// GetName returns the Name of the resource
func (specarm AResource_SPECARM) GetName() string {
	return specarm.Name
}

// GetType returns the ARM Type of the resource. This is always ""
func (specarm AResource_SPECARM) GetType() string {
	return ""
}

// +kubebuilder:validation:Enum={placeholder for golden tests}
type APIVersion string

const APIVersionAPIVersionValue = APIVersion(placeholder for golden tests)

// +kubebuilder:validation:Enum={"2020-06-01"}
type AResource_APIVersion_SPEC string

const AResource_APIVersion_SPEC20200601 = AResource_APIVersion_SPEC("2020-06-01")

type AResource_SPEC struct {
	// +kubebuilder:validation:Required
	APIVersion AResource_APIVersion_SPEC `json:"apiVersion"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	Type AResource_Type_SPEC `json:"type"`
}

var _ genruntime.ARMTransformer = &AResource_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *AResource_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result AResource_SPECARM

	// Set property ‘APIVersion’:
	result.APIVersion = spec.APIVersion

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Type’:
	result.Type = spec.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *AResource_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AResource_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *AResource_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AResource_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AResource_SPECARM, got %T", armInput)
	}

	// Set property ‘APIVersion’:
	spec.APIVersion = typedInput.APIVersion

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Type’:
	spec.Type = typedInput.Type

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &AResource_SPEC{}

// ConvertSpecFrom populates our AResource_SPEC from the provided source
func (spec *AResource_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == spec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(spec)
}

// ConvertSpecTo populates the provided destination from our AResource_SPEC
func (spec *AResource_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == spec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(spec)
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *AResource_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// +kubebuilder:validation:Enum={"Microsoft.Azure/AResource"}
type AResource_Type_SPEC string

const AResource_Type_SPECMicrosoftAzureAResource = AResource_Type_SPEC("Microsoft.Azure/AResource")

func init() {
	SchemeBuilder.Register(&AResource{}, &AResourceList{})
}
