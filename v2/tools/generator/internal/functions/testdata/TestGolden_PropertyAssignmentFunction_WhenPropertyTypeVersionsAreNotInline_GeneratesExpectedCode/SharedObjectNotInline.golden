// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200601preview

import (
	v20200101 "github.com/Azure/azure-service-operator/testing/person/v20200101"
	v20210101 "github.com/Azure/azure-service-operator/testing/person/v20210101"
	v20210601p "github.com/Azure/azure-service-operator/testing/person/v20210601preview"
	"github.com/rotisserie/eris"
)

type Person struct {
	Residence Location `json:"residence,omitempty"`
}

// AssignProperties_From_Person populates our Person from the provided source Person
func (person *Person) AssignProperties_From_Person(source *v20210601p.Person) error {

	// Residence
	var locationPivot v20210101.Location
	err := source.Residence.AssignProperties_To_Location(&locationPivot)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Location() to populate field LocationPivot from Residence")
	}
	var locationStash v20200101.Location
	err = locationStash.AssignProperties_From_Location(&locationPivot)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Location() to populate field LocationStash from LocationPivot")
	}
	var residence Location
	err = residence.AssignProperties_From_Location(&locationStash)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Location() to populate field Residence from LocationStash")
	}
	person.Residence = residence

	// No error
	return nil
}

// AssignProperties_To_Person populates the provided destination Person from our Person
func (person *Person) AssignProperties_To_Person(destination *v20210601p.Person) error {

	// Residence
	var locationStash v20200101.Location
	err := person.Residence.AssignProperties_To_Location(&locationStash)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Location() to populate field LocationStash from Residence")
	}
	var locationPivot v20210101.Location
	err = locationStash.AssignProperties_To_Location(&locationPivot)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_Location() to populate field LocationPivot from LocationStash")
	}
	var residence v20210601p.Location
	err = residence.AssignProperties_From_Location(&locationPivot)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_Location() to populate field Residence from LocationPivot")
	}
	destination.Residence = residence

	// No error
	return nil
}
