 // Code generated by azure-service-operator-codegen. DO NOT EDIT.
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT license.
 package v20200101
 
-import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+import (
+	v20211231 "github.com/Azure/azure-service-operator/testing/person/v20211231"
+	"github.com/rotisserie/eris"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"sigs.k8s.io/controller-runtime/pkg/conversion"
+)
 
 // +kubebuilder:object:root=true
 // +kubebuilder:subresource:status
 type Person struct {
 	metav1.TypeMeta   `json:",inline"`
 	metav1.ObjectMeta `json:"metadata,omitempty"`
 	Spec              Person_Spec   `json:"spec,omitempty"`
 	Status            Person_STATUS `json:"status,omitempty"`
 }
 
+// ConvertFrom populates our Person from the provided hub Person
+func (person *Person) ConvertFrom(hub conversion.Hub) error {
+	// intermediate variable for conversion
+	var source v20211231.Person
+
+	err := source.ConvertFrom(hub)
+	if err != nil {
+		return eris.Wrap(err, "converting from hub to source")
+	}
+
+	err = person.AssignProperties_From_Person(&source)
+	if err != nil {
+		return eris.Wrap(err, "converting from source to person")
+	}
+
+	return nil
+}
+
+// ConvertTo populates the provided hub Person from our Person
+func (person *Person) ConvertTo(hub conversion.Hub) error {
+	// intermediate variable for conversion
+	var destination v20211231.Person
+	err := person.AssignProperties_To_Person(&destination)
+	if err != nil {
+		return eris.Wrap(err, "converting to destination from person")
+	}
+	err = destination.ConvertTo(hub)
+	if err != nil {
+		return eris.Wrap(err, "converting from destination to hub")
+	}
+
+	return nil
+}
+
 // +kubebuilder:object:root=true
 type PersonList struct {
 	metav1.TypeMeta `json:",inline"`
 	metav1.ListMeta `json:"metadata,omitempty"`
 	Items           []Person `json:"items"`
 }
 
 func init() {
 	SchemeBuilder.Register(&Person{}, &PersonList{})
 }
 
