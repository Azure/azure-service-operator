// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package vCurrent

import "github.com/Azure/azure-service-operator/testing/Verification/vNext"

type Person struct {
	Items map[string]map[string]int `json:"items"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *Person) AssignPropertiesFromPerson(source *vNext.Person) error {

	// Items
	if source.Items != nil {
		itemMap := make(map[string]map[string]int, len(source.Items))
		for itemKey, itemValue := range source.Items {
			// Shadow the loop variable to avoid aliasing
			itemValue := itemValue
			if itemValue != nil {
				itemMap1 := make(map[string]int, len(itemValue))
				for itemKey1, itemValue1 := range itemValue {
					// Shadow the loop variable to avoid aliasing
					itemValue1 := itemValue1
					itemMap1[itemKey1] = itemValue1
				}
				itemMap[itemKey] = itemMap1
			} else {
				itemMap[itemKey] = nil
			}
		}
		person.Items = itemMap
	} else {
		person.Items = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *Person) AssignPropertiesToPerson(destination *vNext.Person) error {

	// Items
	if person.Items != nil {
		itemMap := make(map[string]map[string]int, len(person.Items))
		for itemKey, itemValue := range person.Items {
			// Shadow the loop variable to avoid aliasing
			itemValue := itemValue
			if itemValue != nil {
				itemMap1 := make(map[string]int, len(itemValue))
				for itemKey1, itemValue1 := range itemValue {
					// Shadow the loop variable to avoid aliasing
					itemValue1 := itemValue1
					itemMap1[itemKey1] = itemValue1
				}
				itemMap[itemKey] = itemMap1
			} else {
				itemMap[itemKey] = nil
			}
		}
		destination.Items = itemMap
	} else {
		destination.Items = nil
	}

	// No error
	return nil
}
