// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package vCurrent

import verification "github.com/Azure/azure-service-operator/testing/verification/vNext"

type Person struct {
	nasty map[string][]map[string]bool `json:"nasty,omitempty"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *Person) AssignPropertiesFromPerson(source *verification.Person) error {

	// nasty
	if source.nasty != nil {
		nastyMap := make(map[string][]map[string]bool, len(source.nasty))
		for nastyKey, nastyValue := range source.nasty {
			// Shadow the loop variable to avoid aliasing
			nastyValue := nastyValue
			if nastyValue != nil {
				nastyList := make([]map[string]bool, len(nastyValue))
				for nastyIndex, nastyItem := range nastyValue {
					// Shadow the loop variable to avoid aliasing
					nastyItem := nastyItem
					if nastyItem != nil {
						nastyMap1 := make(map[string]bool, len(nastyItem))
						for nastyKey1, nastyValue1 := range nastyItem {
							// Shadow the loop variable to avoid aliasing
							nastyValue1 := nastyValue1
							nastyMap1[nastyKey1] = nastyValue1
						}
						nastyList[nastyIndex] = nastyMap1
					} else {
						nastyList[nastyIndex] = nil
					}
				}
				nastyMap[nastyKey] = nastyList
			} else {
				nastyMap[nastyKey] = nil
			}
		}
		person.nasty = nastyMap
	} else {
		person.nasty = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *Person) AssignPropertiesToPerson(destination *verification.Person) error {

	// nasty
	if person.nasty != nil {
		nastyMap := make(map[string][]map[string]bool, len(person.nasty))
		for nastyKey, nastyValue := range person.nasty {
			// Shadow the loop variable to avoid aliasing
			nastyValue := nastyValue
			if nastyValue != nil {
				nastyList := make([]map[string]bool, len(nastyValue))
				for nastyIndex, nastyItem := range nastyValue {
					// Shadow the loop variable to avoid aliasing
					nastyItem := nastyItem
					if nastyItem != nil {
						nastyMap1 := make(map[string]bool, len(nastyItem))
						for nastyKey1, nastyValue1 := range nastyItem {
							// Shadow the loop variable to avoid aliasing
							nastyValue1 := nastyValue1
							nastyMap1[nastyKey1] = nastyValue1
						}
						nastyList[nastyIndex] = nastyMap1
					} else {
						nastyList[nastyIndex] = nil
					}
				}
				nastyMap[nastyKey] = nastyList
			} else {
				nastyMap[nastyKey] = nil
			}
		}
		destination.nasty = nastyMap
	} else {
		destination.nasty = nil
	}

	// No error
	return nil
}
