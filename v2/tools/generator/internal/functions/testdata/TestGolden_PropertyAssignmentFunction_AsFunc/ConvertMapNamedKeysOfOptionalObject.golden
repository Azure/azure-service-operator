// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package vcurrent

import (
	verification "github.com/Azure/azure-service-operator/testing/verification/vnext"
	"github.com/pkg/errors"
)

type Person struct {
	Keys map[string]*Release `json:"keys,omitempty"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *Person) AssignPropertiesFromPerson(source *verification.Person) error {

	// Keys
	if source.Keys != nil {
		keyMap := make(map[string]*Release, len(source.Keys))
		for key, keyValue := range source.Keys {
			// Shadow the loop variable to avoid aliasing
			keyValue := keyValue
			if keyValue != nil {
				var keyLocal Release
				err := keyLocal.AssignPropertiesFromRelease(keyValue)
				if err != nil {
					return errors.Wrap(err, "calling AssignPropertiesFromRelease() to populate field Keys")
				}
				keyMap[key] = &keyLocal
			} else {
				keyMap[key] = nil
			}
		}
		person.Keys = keyMap
	} else {
		person.Keys = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *Person) AssignPropertiesToPerson(destination *verification.Person) error {

	// Keys
	if person.Keys != nil {
		keyMap := make(map[string]*Release, len(person.Keys))
		for key, keyValue := range person.Keys {
			// Shadow the loop variable to avoid aliasing
			keyValue := keyValue
			if keyValue != nil {
				var keyLocal Release
				err := keyValue.AssignPropertiesToRelease(&keyLocal)
				if err != nil {
					return errors.Wrap(err, "calling AssignPropertiesToRelease() to populate field Keys")
				}
				keyMap[key] = &keyLocal
			} else {
				keyMap[key] = nil
			}
		}
		destination.Keys = keyMap
	} else {
		destination.Keys = nil
	}

	// No error
	return nil
}
