/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT license.
 */

package astbuilder

import (
	"bytes"
	"testing"

	. "github.com/onsi/gomega"

	"github.com/dave/dst"
	"github.com/dave/dst/decorator"
	"github.com/sebdah/goldie/v2"
)

// assertExprExpected asserts the given expression generates the expected code, comparing it to a golden file
func assertExprExpected(t *testing.T, expr dst.Expr) {
	t.Helper()

	stmt := &dst.ExprStmt{
		X: expr,
	}

	assertStmtExpected(t, stmt)
}

// assertDeclExpected asserts the given declaration generates the expected code, comparing it to a golden file
func assertDeclExpected(t *testing.T, decl dst.Decl) {
	t.Helper()

	stmt := &dst.DeclStmt{
		Decl: decl,
	}

	assertStmtExpected(t, stmt)
}

// assertStmtExpected asserts the given statement generates the expected code, comparing it to a golden file
func assertStmtExpected(t *testing.T, stmt dst.Stmt) {
	t.Helper()
	g := NewGomegaWithT(t)
	gold := goldie.New(t)

	stmt.Decorations().Before = dst.EmptyLine
	stmt.Decorations().After = dst.EmptyLine
	stmt.Decorations().Start = []string{"// Generated by " + t.Name()}

	block := &dst.BlockStmt{
		List: Statements(stmt),
	}

	fn := &dst.FuncDecl{
		Name: dst.NewIdent("TestCase"),
		Type: &dst.FuncType{},
		Body: block,
		Decs: dst.FuncDeclDecorations{
			NodeDecs: dst.NodeDecs{
				Before: dst.EmptyLine,
			},
		},
	}

	file := &dst.File{
		Decs: dst.FileDecorations{
			NodeDecs: dst.NodeDecs{
				After: dst.EmptyLine,
			},
		},
		Name:  dst.NewIdent("TestCase"),
		Decls: []dst.Decl{fn},
	}

	var buffer bytes.Buffer
	err := decorator.Fprint(&buffer, file)
	g.Expect(err).To(Succeed())

	gold.Assert(t, t.Name(), buffer.Bytes())
}
