// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v20200101

import (
	personv20211231 "github.com/Azure/azure-service-operator/testing/microsoft.person/v20211231"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Person struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Person_Spec   `json:"spec,omitempty"`
	Status            Person_Status `json:"status,omitempty"`
}

// AssignPropertiesFromPerson populates our Person from the provided source Person
func (person *Person) AssignPropertiesFromPerson(source *personv20211231.Person) error {

	// Spec
	var spec Person_Spec
	err := spec.AssignPropertiesFromPersonSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromPersonSpec()")
	}
	person.Spec = spec

	// Status
	var status Person_Status
	err = status.AssignPropertiesFromPersonStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromPersonStatus()")
	}
	person.Status = status

	// No error
	return nil
}

// AssignPropertiesToPerson populates the provided destination Person from our Person
func (person *Person) AssignPropertiesToPerson(destination *personv20211231.Person) error {

	// Spec
	var spec personv20211231.Person_Spec
	err := person.Spec.AssignPropertiesToPersonSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToPersonSpec()")
	}
	destination.Spec = spec

	// Status
	var status personv20211231.Person_Status
	err = person.Status.AssignPropertiesToPersonStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToPersonStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// ConvertFrom populates our Person from the provided hub Person
func (person *Person) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source personv20211231.Person

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = person.AssignPropertiesFromPerson(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to person")
	}

	return nil
}

// ConvertTo populates the provided hub Person from our Person
func (person *Person) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination personv20211231.Person
	err := person.AssignPropertiesToPerson(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from person")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:object:root=true
type PersonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Person `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Person{}, &PersonList{})
}
