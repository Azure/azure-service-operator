// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package controllers_test

import (
	"testing"

	. "github.com/onsi/gomega"

	compute "github.com/Azure/azure-service-operator/v2/api/compute/v1api20250401"
	"github.com/Azure/azure-service-operator/v2/internal/testcommon"
)

func Test_Compute_CapacityReservationGroup_CRUD(t *testing.T) {
	t.Parallel()

	tc := globalTestContext.ForTest(t)

	rg := tc.CreateTestResourceGroupAndWait()

	// Create CapacityReservationGroup
	capacityReservationGroup := &compute.CapacityReservationGroup{
		ObjectMeta: tc.MakeObjectMeta("crg"),
		Spec: compute.CapacityReservationGroup_Spec{
			Location: tc.AzureRegion,
			Owner:    testcommon.AsOwner(rg),
			Tags: map[string]string{
				"purpose": "testing",
			},
		},
	}

	tc.CreateResourceAndWait(capacityReservationGroup)

	// Ensure that the status is populated
	tc.Expect(capacityReservationGroup.Status.Id).ToNot(BeNil())
	tc.Expect(capacityReservationGroup.Status.Name).ToNot(BeNil())
	tc.Expect(capacityReservationGroup.Status.Type).ToNot(BeNil())
	tc.Expect(capacityReservationGroup.Status.Location).To(Equal(tc.AzureRegion))
	tc.Expect(capacityReservationGroup.Status.Tags).To(HaveKey("purpose"))
	tc.Expect(capacityReservationGroup.Status.Tags["purpose"]).To(Equal("testing"))

	// Perform a simple patch to add a new tag
	old := capacityReservationGroup.DeepCopy()
	capacityReservationGroup.Spec.Tags["environment"] = "test"
	tc.PatchResourceAndWait(old, capacityReservationGroup)

	// Ensure the new tag is reflected in the status
	tc.Expect(capacityReservationGroup.Status.Tags).To(HaveKey("environment"))
	tc.Expect(capacityReservationGroup.Status.Tags["environment"]).To(Equal("test"))

	tc.DeleteResourceAndWait(capacityReservationGroup)

	// Ensure delete
	exists, retryAfter, err := tc.AzureClient.CheckExistenceWithGetByID(tc.Ctx, *capacityReservationGroup.Status.Id, string(compute.APIVersion_Value))
	tc.Expect(err).ToNot(HaveOccurred())
	tc.Expect(retryAfter).To(BeZero())
	tc.Expect(exists).To(BeFalse())
}