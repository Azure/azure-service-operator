// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package controllers

import (
	authorizationcustomizations "github.com/Azure/azure-service-operator/v2/api/authorization/customizations"
	authorizationv1alpha1api20200801preview "github.com/Azure/azure-service-operator/v2/api/authorization/v1alpha1api20200801preview"
	authorizationv1alpha1api20200801previewstorage "github.com/Azure/azure-service-operator/v2/api/authorization/v1alpha1api20200801previewstorage"
	batchcustomizations "github.com/Azure/azure-service-operator/v2/api/batch/customizations"
	batchv1alpha1api20210101 "github.com/Azure/azure-service-operator/v2/api/batch/v1alpha1api20210101"
	batchv1alpha1api20210101storage "github.com/Azure/azure-service-operator/v2/api/batch/v1alpha1api20210101storage"
	cachecustomizations "github.com/Azure/azure-service-operator/v2/api/cache/customizations"
	cachev1alpha1api20201201 "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201"
	cachev1alpha1api20201201storage "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	cachev1alpha1api20210301 "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301"
	cachev1alpha1api20210301storage "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	computecustomizations "github.com/Azure/azure-service-operator/v2/api/compute/customizations"
	computev1alpha1api20200930 "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930"
	computev1alpha1api20200930storage "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930storage"
	computev1alpha1api20201201 "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20201201"
	computev1alpha1api20201201storage "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20201201storage"
	containerregistrycustomizations "github.com/Azure/azure-service-operator/v2/api/containerregistry/customizations"
	containerregistryv1alpha1api20210901 "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1alpha1api20210901"
	containerregistryv1alpha1api20210901storage "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1alpha1api20210901storage"
	containerservicecustomizations "github.com/Azure/azure-service-operator/v2/api/containerservice/customizations"
	containerservicev1alpha1api20210501 "github.com/Azure/azure-service-operator/v2/api/containerservice/v1alpha1api20210501"
	containerservicev1alpha1api20210501storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1alpha1api20210501storage"
	dbformysqlcustomizations "github.com/Azure/azure-service-operator/v2/api/dbformysql/customizations"
	dbformysqlv1alpha1api20210501 "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1alpha1api20210501"
	dbformysqlv1alpha1api20210501storage "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1alpha1api20210501storage"
	dbforpostgresqlcustomizations "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/customizations"
	dbforpostgresqlv1alpha1api20210601 "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1alpha1api20210601"
	dbforpostgresqlv1alpha1api20210601storage "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1alpha1api20210601storage"
	documentdbcustomizations "github.com/Azure/azure-service-operator/v2/api/documentdb/customizations"
	documentdbv1alpha1api20210515 "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515"
	documentdbv1alpha1api20210515storage "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	eventgridcustomizations "github.com/Azure/azure-service-operator/v2/api/eventgrid/customizations"
	eventgridv1alpha1api20200601 "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601"
	eventgridv1alpha1api20200601storage "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	eventhubcustomizations "github.com/Azure/azure-service-operator/v2/api/eventhub/customizations"
	eventhubv1alpha1api20211101 "github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101"
	eventhubv1alpha1api20211101storage "github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101storage"
	insightscustomizations "github.com/Azure/azure-service-operator/v2/api/insights/customizations"
	insightsv1alpha1api20180501preview "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501preview"
	insightsv1alpha1api20180501previewstorage "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501previewstorage"
	insightsv1alpha1api20200202 "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20200202"
	insightsv1alpha1api20200202storage "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20200202storage"
	managedidentitycustomizations "github.com/Azure/azure-service-operator/v2/api/managedidentity/customizations"
	managedidentityv1alpha1api20181130 "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1alpha1api20181130"
	managedidentityv1alpha1api20181130storage "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1alpha1api20181130storage"
	networkcustomizations "github.com/Azure/azure-service-operator/v2/api/network/customizations"
	networkv1alpha1api20201101 "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101"
	networkv1alpha1api20201101storage "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	operationalinsightscustomizations "github.com/Azure/azure-service-operator/v2/api/operationalinsights/customizations"
	operationalinsightsv1alpha1api20210601 "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1alpha1api20210601"
	operationalinsightsv1alpha1api20210601storage "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1alpha1api20210601storage"
	servicebuscustomizations "github.com/Azure/azure-service-operator/v2/api/servicebus/customizations"
	servicebusv1alpha1api20210101preview "github.com/Azure/azure-service-operator/v2/api/servicebus/v1alpha1api20210101preview"
	servicebusv1alpha1api20210101previewstorage "github.com/Azure/azure-service-operator/v2/api/servicebus/v1alpha1api20210101previewstorage"
	signalrservicecustomizations "github.com/Azure/azure-service-operator/v2/api/signalrservice/customizations"
	signalrservicev1alpha1api20211001 "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1alpha1api20211001"
	signalrservicev1alpha1api20211001storage "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1alpha1api20211001storage"
	storagecustomizations "github.com/Azure/azure-service-operator/v2/api/storage/customizations"
	storagev1alpha1api20210401 "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401"
	storagev1alpha1api20210401storage "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/registration"
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/source"
)

// getKnownStorageTypes returns the list of storage types which can be reconciled.
func getKnownStorageTypes() []registration.StorageType {
	var result []registration.StorageType
	result = append(result, registration.StorageType{
		Obj:     new(authorizationv1alpha1api20200801previewstorage.RoleAssignment),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(batchv1alpha1api20210101storage.BatchAccount),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(cachev1alpha1api20201201storage.Redis),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(cachev1alpha1api20201201storage.RedisFirewallRule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(cachev1alpha1api20201201storage.RedisLinkedServer),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(cachev1alpha1api20201201storage.RedisPatchSchedule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(cachev1alpha1api20210301storage.RedisEnterprise),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(cachev1alpha1api20210301storage.RedisEnterpriseDatabase),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(computev1alpha1api20200930storage.Disk),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj: new(computev1alpha1api20201201storage.VirtualMachine),
		Indexes: []registration.Index{
			{
				Key:  ".spec.osProfile.adminPassword",
				Func: indexComputeVirtualMachineAdminPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Src:              &source.Kind{Type: &v1.Secret{}},
				MakeEventHandler: watchSecretsFactory([]string{".spec.osProfile.adminPassword"}, &computev1alpha1api20201201storage.VirtualMachineList{}),
			},
		},
	})
	result = append(result, registration.StorageType{
		Obj: new(computev1alpha1api20201201storage.VirtualMachineScaleSet),
		Indexes: []registration.Index{
			{
				Key:  ".spec.virtualMachineProfile.osProfile.adminPassword",
				Func: indexComputeVirtualMachineScaleSetAdminPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Src:              &source.Kind{Type: &v1.Secret{}},
				MakeEventHandler: watchSecretsFactory([]string{".spec.virtualMachineProfile.osProfile.adminPassword"}, &computev1alpha1api20201201storage.VirtualMachineScaleSetList{}),
			},
		},
	})
	result = append(result, registration.StorageType{
		Obj:     new(containerregistryv1alpha1api20210901storage.Registry),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(containerservicev1alpha1api20210501storage.ManagedCluster),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(containerservicev1alpha1api20210501storage.ManagedClustersAgentPool),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj: new(dbformysqlv1alpha1api20210501storage.FlexibleServer),
		Indexes: []registration.Index{
			{
				Key:  ".spec.administratorLoginPassword",
				Func: indexDbformysqlFlexibleServerAdministratorLoginPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Src:              &source.Kind{Type: &v1.Secret{}},
				MakeEventHandler: watchSecretsFactory([]string{".spec.administratorLoginPassword"}, &dbformysqlv1alpha1api20210501storage.FlexibleServerList{}),
			},
		},
	})
	result = append(result, registration.StorageType{
		Obj:     new(dbformysqlv1alpha1api20210501storage.FlexibleServersDatabase),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(dbformysqlv1alpha1api20210501storage.FlexibleServersFirewallRule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj: new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServer),
		Indexes: []registration.Index{
			{
				Key:  ".spec.administratorLoginPassword",
				Func: indexDbforpostgresqlFlexibleServerAdministratorLoginPassword,
			},
		},
		Watches: []registration.Watch{
			{
				Src:              &source.Kind{Type: &v1.Secret{}},
				MakeEventHandler: watchSecretsFactory([]string{".spec.administratorLoginPassword"}, &dbforpostgresqlv1alpha1api20210601storage.FlexibleServerList{}),
			},
		},
	})
	result = append(result, registration.StorageType{
		Obj:     new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersConfiguration),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersDatabase),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersFirewallRule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.DatabaseAccount),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.MongodbDatabase),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollection),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.MongodbDatabaseThroughputSetting),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabase),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabaseContainer),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerStoredProcedure),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerThroughputSetting),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerTrigger),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerUserDefinedFunction),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(documentdbv1alpha1api20210515storage.SqlDatabaseThroughputSetting),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventgridv1alpha1api20200601storage.Domain),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventgridv1alpha1api20200601storage.DomainsTopic),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventgridv1alpha1api20200601storage.EventSubscription),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventgridv1alpha1api20200601storage.Topic),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventhubv1alpha1api20211101storage.Namespace),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventhubv1alpha1api20211101storage.NamespacesAuthorizationRule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventhubv1alpha1api20211101storage.NamespacesEventhub),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventhubv1alpha1api20211101storage.NamespacesEventhubsAuthorizationRule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(eventhubv1alpha1api20211101storage.NamespacesEventhubsConsumerGroup),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(insightsv1alpha1api20180501previewstorage.Webtest),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(insightsv1alpha1api20200202storage.Component),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(managedidentityv1alpha1api20181130storage.UserAssignedIdentity),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.LoadBalancer),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.NetworkInterface),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.NetworkSecurityGroup),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.NetworkSecurityGroupsSecurityRule),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.PublicIPAddress),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.VirtualNetwork),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.VirtualNetworkGateway),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.VirtualNetworksSubnet),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(networkv1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(operationalinsightsv1alpha1api20210601storage.Workspace),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(servicebusv1alpha1api20210101previewstorage.Namespace),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(servicebusv1alpha1api20210101previewstorage.NamespacesQueue),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(servicebusv1alpha1api20210101previewstorage.NamespacesTopic),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(signalrservicev1alpha1api20211001storage.SignalR),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(storagev1alpha1api20210401storage.StorageAccount),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(storagev1alpha1api20210401storage.StorageAccountsBlobService),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(storagev1alpha1api20210401storage.StorageAccountsBlobServicesContainer),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(storagev1alpha1api20210401storage.StorageAccountsQueueService),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	result = append(result, registration.StorageType{
		Obj:     new(storagev1alpha1api20210401storage.StorageAccountsQueueServicesQueue),
		Indexes: []registration.Index{},
		Watches: []registration.Watch{},
	})
	return result
}

// getKnownTypes returns the list of all types.
func getKnownTypes() []client.Object {
	var result []client.Object
	result = append(result, new(authorizationv1alpha1api20200801preview.RoleAssignment))
	result = append(result, new(authorizationv1alpha1api20200801previewstorage.RoleAssignment))
	result = append(result, new(batchv1alpha1api20210101.BatchAccount))
	result = append(result, new(batchv1alpha1api20210101storage.BatchAccount))
	result = append(result, new(cachev1alpha1api20201201.Redis))
	result = append(result, new(cachev1alpha1api20201201.RedisFirewallRule))
	result = append(result, new(cachev1alpha1api20201201.RedisLinkedServer))
	result = append(result, new(cachev1alpha1api20201201.RedisPatchSchedule))
	result = append(result, new(cachev1alpha1api20201201storage.Redis))
	result = append(result, new(cachev1alpha1api20201201storage.RedisFirewallRule))
	result = append(result, new(cachev1alpha1api20201201storage.RedisLinkedServer))
	result = append(result, new(cachev1alpha1api20201201storage.RedisPatchSchedule))
	result = append(result, new(cachev1alpha1api20210301.RedisEnterprise))
	result = append(result, new(cachev1alpha1api20210301.RedisEnterpriseDatabase))
	result = append(result, new(cachev1alpha1api20210301storage.RedisEnterprise))
	result = append(result, new(cachev1alpha1api20210301storage.RedisEnterpriseDatabase))
	result = append(result, new(computev1alpha1api20200930.Disk))
	result = append(result, new(computev1alpha1api20200930storage.Disk))
	result = append(result, new(computev1alpha1api20201201.VirtualMachine))
	result = append(result, new(computev1alpha1api20201201.VirtualMachineScaleSet))
	result = append(result, new(computev1alpha1api20201201storage.VirtualMachine))
	result = append(result, new(computev1alpha1api20201201storage.VirtualMachineScaleSet))
	result = append(result, new(containerregistryv1alpha1api20210901.Registry))
	result = append(result, new(containerregistryv1alpha1api20210901storage.Registry))
	result = append(result, new(containerservicev1alpha1api20210501.ManagedCluster))
	result = append(result, new(containerservicev1alpha1api20210501.ManagedClustersAgentPool))
	result = append(result, new(containerservicev1alpha1api20210501storage.ManagedCluster))
	result = append(result, new(containerservicev1alpha1api20210501storage.ManagedClustersAgentPool))
	result = append(result, new(dbformysqlv1alpha1api20210501.FlexibleServer))
	result = append(result, new(dbformysqlv1alpha1api20210501.FlexibleServersDatabase))
	result = append(result, new(dbformysqlv1alpha1api20210501.FlexibleServersFirewallRule))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServer))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServersDatabase))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServersFirewallRule))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServer))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServersConfiguration))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServersDatabase))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServersFirewallRule))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServer))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersConfiguration))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersDatabase))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersFirewallRule))
	result = append(result, new(documentdbv1alpha1api20210515.DatabaseAccount))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabase))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabaseCollection))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabaseCollectionThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabase))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainer))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerStoredProcedure))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerTrigger))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerUserDefinedFunction))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.DatabaseAccount))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabase))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollection))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabase))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainer))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerStoredProcedure))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerTrigger))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerUserDefinedFunction))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseThroughputSetting))
	result = append(result, new(eventgridv1alpha1api20200601.Domain))
	result = append(result, new(eventgridv1alpha1api20200601.DomainsTopic))
	result = append(result, new(eventgridv1alpha1api20200601.EventSubscription))
	result = append(result, new(eventgridv1alpha1api20200601.Topic))
	result = append(result, new(eventgridv1alpha1api20200601storage.Domain))
	result = append(result, new(eventgridv1alpha1api20200601storage.DomainsTopic))
	result = append(result, new(eventgridv1alpha1api20200601storage.EventSubscription))
	result = append(result, new(eventgridv1alpha1api20200601storage.Topic))
	result = append(result, new(eventhubv1alpha1api20211101.Namespace))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesEventhub))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesEventhubsAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesEventhubsConsumerGroup))
	result = append(result, new(eventhubv1alpha1api20211101storage.Namespace))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhub))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhubsAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhubsConsumerGroup))
	result = append(result, new(insightsv1alpha1api20180501preview.Webtest))
	result = append(result, new(insightsv1alpha1api20180501previewstorage.Webtest))
	result = append(result, new(insightsv1alpha1api20200202.Component))
	result = append(result, new(insightsv1alpha1api20200202storage.Component))
	result = append(result, new(managedidentityv1alpha1api20181130.UserAssignedIdentity))
	result = append(result, new(managedidentityv1alpha1api20181130storage.UserAssignedIdentity))
	result = append(result, new(networkv1alpha1api20201101.LoadBalancer))
	result = append(result, new(networkv1alpha1api20201101.NetworkInterface))
	result = append(result, new(networkv1alpha1api20201101.NetworkSecurityGroup))
	result = append(result, new(networkv1alpha1api20201101.NetworkSecurityGroupsSecurityRule))
	result = append(result, new(networkv1alpha1api20201101.PublicIPAddress))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetwork))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetworkGateway))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetworksSubnet))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetworksVirtualNetworkPeering))
	result = append(result, new(networkv1alpha1api20201101storage.LoadBalancer))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkInterface))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkSecurityGroup))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkSecurityGroupsSecurityRule))
	result = append(result, new(networkv1alpha1api20201101storage.PublicIPAddress))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetwork))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworkGateway))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworksSubnet))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering))
	result = append(result, new(operationalinsightsv1alpha1api20210601.Workspace))
	result = append(result, new(operationalinsightsv1alpha1api20210601storage.Workspace))
	result = append(result, new(servicebusv1alpha1api20210101preview.Namespace))
	result = append(result, new(servicebusv1alpha1api20210101preview.NamespacesQueue))
	result = append(result, new(servicebusv1alpha1api20210101preview.NamespacesTopic))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.Namespace))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.NamespacesQueue))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.NamespacesTopic))
	result = append(result, new(signalrservicev1alpha1api20211001.SignalR))
	result = append(result, new(signalrservicev1alpha1api20211001storage.SignalR))
	result = append(result, new(storagev1alpha1api20210401.StorageAccount))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsBlobService))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsBlobServicesContainer))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsQueueService))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsQueueServicesQueue))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccount))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsBlobService))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsBlobServicesContainer))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsQueueService))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsQueueServicesQueue))
	return result
}

// createScheme creates a Scheme containing the clientgo types and all of the custom types returned by getKnownTypes
func createScheme() *runtime.Scheme {
	scheme := runtime.NewScheme()
	_ = clientgoscheme.AddToScheme(scheme)
	_ = authorizationv1alpha1api20200801preview.AddToScheme(scheme)
	_ = authorizationv1alpha1api20200801previewstorage.AddToScheme(scheme)
	_ = batchv1alpha1api20210101.AddToScheme(scheme)
	_ = batchv1alpha1api20210101storage.AddToScheme(scheme)
	_ = cachev1alpha1api20201201.AddToScheme(scheme)
	_ = cachev1alpha1api20201201storage.AddToScheme(scheme)
	_ = cachev1alpha1api20210301.AddToScheme(scheme)
	_ = cachev1alpha1api20210301storage.AddToScheme(scheme)
	_ = computev1alpha1api20200930.AddToScheme(scheme)
	_ = computev1alpha1api20200930storage.AddToScheme(scheme)
	_ = computev1alpha1api20201201.AddToScheme(scheme)
	_ = computev1alpha1api20201201storage.AddToScheme(scheme)
	_ = containerregistryv1alpha1api20210901.AddToScheme(scheme)
	_ = containerregistryv1alpha1api20210901storage.AddToScheme(scheme)
	_ = containerservicev1alpha1api20210501.AddToScheme(scheme)
	_ = containerservicev1alpha1api20210501storage.AddToScheme(scheme)
	_ = dbformysqlv1alpha1api20210501.AddToScheme(scheme)
	_ = dbformysqlv1alpha1api20210501storage.AddToScheme(scheme)
	_ = dbforpostgresqlv1alpha1api20210601.AddToScheme(scheme)
	_ = dbforpostgresqlv1alpha1api20210601storage.AddToScheme(scheme)
	_ = documentdbv1alpha1api20210515.AddToScheme(scheme)
	_ = documentdbv1alpha1api20210515storage.AddToScheme(scheme)
	_ = eventgridv1alpha1api20200601.AddToScheme(scheme)
	_ = eventgridv1alpha1api20200601storage.AddToScheme(scheme)
	_ = eventhubv1alpha1api20211101.AddToScheme(scheme)
	_ = eventhubv1alpha1api20211101storage.AddToScheme(scheme)
	_ = insightsv1alpha1api20180501preview.AddToScheme(scheme)
	_ = insightsv1alpha1api20180501previewstorage.AddToScheme(scheme)
	_ = insightsv1alpha1api20200202.AddToScheme(scheme)
	_ = insightsv1alpha1api20200202storage.AddToScheme(scheme)
	_ = managedidentityv1alpha1api20181130.AddToScheme(scheme)
	_ = managedidentityv1alpha1api20181130storage.AddToScheme(scheme)
	_ = networkv1alpha1api20201101.AddToScheme(scheme)
	_ = networkv1alpha1api20201101storage.AddToScheme(scheme)
	_ = operationalinsightsv1alpha1api20210601.AddToScheme(scheme)
	_ = operationalinsightsv1alpha1api20210601storage.AddToScheme(scheme)
	_ = servicebusv1alpha1api20210101preview.AddToScheme(scheme)
	_ = servicebusv1alpha1api20210101previewstorage.AddToScheme(scheme)
	_ = signalrservicev1alpha1api20211001.AddToScheme(scheme)
	_ = signalrservicev1alpha1api20211001storage.AddToScheme(scheme)
	_ = storagev1alpha1api20210401.AddToScheme(scheme)
	_ = storagev1alpha1api20210401storage.AddToScheme(scheme)
	return scheme
}

// getResourceExtensions returns a list of resource extensions
func getResourceExtensions() []genruntime.ResourceExtension {
	var result []genruntime.ResourceExtension
	result = append(result, &authorizationcustomizations.RoleAssignmentExtension{})
	result = append(result, &batchcustomizations.BatchAccountExtension{})
	result = append(result, &cachecustomizations.RedisEnterpriseDatabaseExtension{})
	result = append(result, &cachecustomizations.RedisEnterpriseExtension{})
	result = append(result, &cachecustomizations.RedisExtension{})
	result = append(result, &cachecustomizations.RedisFirewallRuleExtension{})
	result = append(result, &cachecustomizations.RedisLinkedServerExtension{})
	result = append(result, &cachecustomizations.RedisPatchScheduleExtension{})
	result = append(result, &computecustomizations.DiskExtension{})
	result = append(result, &computecustomizations.VirtualMachineExtension{})
	result = append(result, &computecustomizations.VirtualMachineScaleSetExtension{})
	result = append(result, &containerregistrycustomizations.RegistryExtension{})
	result = append(result, &containerservicecustomizations.ManagedClusterExtension{})
	result = append(result, &containerservicecustomizations.ManagedClustersAgentPoolExtension{})
	result = append(result, &dbformysqlcustomizations.FlexibleServerExtension{})
	result = append(result, &dbformysqlcustomizations.FlexibleServersDatabaseExtension{})
	result = append(result, &dbformysqlcustomizations.FlexibleServersFirewallRuleExtension{})
	result = append(result, &dbforpostgresqlcustomizations.FlexibleServerExtension{})
	result = append(result, &dbforpostgresqlcustomizations.FlexibleServersConfigurationExtension{})
	result = append(result, &dbforpostgresqlcustomizations.FlexibleServersDatabaseExtension{})
	result = append(result, &dbforpostgresqlcustomizations.FlexibleServersFirewallRuleExtension{})
	result = append(result, &documentdbcustomizations.DatabaseAccountExtension{})
	result = append(result, &documentdbcustomizations.MongodbDatabaseCollectionExtension{})
	result = append(result, &documentdbcustomizations.MongodbDatabaseCollectionThroughputSettingExtension{})
	result = append(result, &documentdbcustomizations.MongodbDatabaseExtension{})
	result = append(result, &documentdbcustomizations.MongodbDatabaseThroughputSettingExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseContainerExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseContainerStoredProcedureExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseContainerThroughputSettingExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseContainerTriggerExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseContainerUserDefinedFunctionExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseExtension{})
	result = append(result, &documentdbcustomizations.SqlDatabaseThroughputSettingExtension{})
	result = append(result, &eventgridcustomizations.DomainExtension{})
	result = append(result, &eventgridcustomizations.DomainsTopicExtension{})
	result = append(result, &eventgridcustomizations.EventSubscriptionExtension{})
	result = append(result, &eventgridcustomizations.TopicExtension{})
	result = append(result, &eventhubcustomizations.NamespaceExtension{})
	result = append(result, &eventhubcustomizations.NamespacesAuthorizationRuleExtension{})
	result = append(result, &eventhubcustomizations.NamespacesEventhubExtension{})
	result = append(result, &eventhubcustomizations.NamespacesEventhubsAuthorizationRuleExtension{})
	result = append(result, &eventhubcustomizations.NamespacesEventhubsConsumerGroupExtension{})
	result = append(result, &insightscustomizations.ComponentExtension{})
	result = append(result, &insightscustomizations.WebtestExtension{})
	result = append(result, &managedidentitycustomizations.UserAssignedIdentityExtension{})
	result = append(result, &networkcustomizations.LoadBalancerExtension{})
	result = append(result, &networkcustomizations.NetworkInterfaceExtension{})
	result = append(result, &networkcustomizations.NetworkSecurityGroupExtension{})
	result = append(result, &networkcustomizations.NetworkSecurityGroupsSecurityRuleExtension{})
	result = append(result, &networkcustomizations.PublicIPAddressExtension{})
	result = append(result, &networkcustomizations.VirtualNetworkExtension{})
	result = append(result, &networkcustomizations.VirtualNetworkGatewayExtension{})
	result = append(result, &networkcustomizations.VirtualNetworksSubnetExtension{})
	result = append(result, &networkcustomizations.VirtualNetworksVirtualNetworkPeeringExtension{})
	result = append(result, &operationalinsightscustomizations.WorkspaceExtension{})
	result = append(result, &servicebuscustomizations.NamespaceExtension{})
	result = append(result, &servicebuscustomizations.NamespacesQueueExtension{})
	result = append(result, &servicebuscustomizations.NamespacesTopicExtension{})
	result = append(result, &signalrservicecustomizations.SignalRExtension{})
	result = append(result, &storagecustomizations.StorageAccountExtension{})
	result = append(result, &storagecustomizations.StorageAccountsBlobServiceExtension{})
	result = append(result, &storagecustomizations.StorageAccountsBlobServicesContainerExtension{})
	result = append(result, &storagecustomizations.StorageAccountsQueueServiceExtension{})
	result = append(result, &storagecustomizations.StorageAccountsQueueServicesQueueExtension{})
	return result
}

// indexComputeVirtualMachineAdminPassword an index function for computev1alpha1api20201201storage.VirtualMachine .spec.osProfile.adminPassword
func indexComputeVirtualMachineAdminPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*computev1alpha1api20201201storage.VirtualMachine)
	if !ok {
		return nil
	}
	if obj.Spec.OsProfile == nil {
		return nil
	}
	if obj.Spec.OsProfile.AdminPassword == nil {
		return nil
	}
	return []string{obj.Spec.OsProfile.AdminPassword.Name}
}

// indexComputeVirtualMachineScaleSetAdminPassword an index function for computev1alpha1api20201201storage.VirtualMachineScaleSet .spec.virtualMachineProfile.osProfile.adminPassword
func indexComputeVirtualMachineScaleSetAdminPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*computev1alpha1api20201201storage.VirtualMachineScaleSet)
	if !ok {
		return nil
	}
	if obj.Spec.VirtualMachineProfile == nil {
		return nil
	}
	if obj.Spec.VirtualMachineProfile.OsProfile == nil {
		return nil
	}
	if obj.Spec.VirtualMachineProfile.OsProfile.AdminPassword == nil {
		return nil
	}
	return []string{obj.Spec.VirtualMachineProfile.OsProfile.AdminPassword.Name}
}

// indexDbformysqlFlexibleServerAdministratorLoginPassword an index function for dbformysqlv1alpha1api20210501storage.FlexibleServer .spec.administratorLoginPassword
func indexDbformysqlFlexibleServerAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbformysqlv1alpha1api20210501storage.FlexibleServer)
	if !ok {
		return nil
	}
	if obj.Spec.AdministratorLoginPassword == nil {
		return nil
	}
	return []string{obj.Spec.AdministratorLoginPassword.Name}
}

// indexDbforpostgresqlFlexibleServerAdministratorLoginPassword an index function for dbforpostgresqlv1alpha1api20210601storage.FlexibleServer .spec.administratorLoginPassword
func indexDbforpostgresqlFlexibleServerAdministratorLoginPassword(rawObj client.Object) []string {
	obj, ok := rawObj.(*dbforpostgresqlv1alpha1api20210601storage.FlexibleServer)
	if !ok {
		return nil
	}
	if obj.Spec.AdministratorLoginPassword == nil {
		return nil
	}
	return []string{obj.Spec.AdministratorLoginPassword.Name}
}
