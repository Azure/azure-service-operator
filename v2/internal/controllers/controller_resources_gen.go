// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package controllers

import (
	authorizationv1alpha1api20200801preview "github.com/Azure/azure-service-operator/v2/api/authorization/v1alpha1api20200801preview"
	authorizationv1alpha1api20200801previewstorage "github.com/Azure/azure-service-operator/v2/api/authorization/v1alpha1api20200801previewstorage"
	batchv1alpha1api20210101 "github.com/Azure/azure-service-operator/v2/api/batch/v1alpha1api20210101"
	batchv1alpha1api20210101storage "github.com/Azure/azure-service-operator/v2/api/batch/v1alpha1api20210101storage"
	cachev1alpha1api20201201 "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201"
	cachev1alpha1api20201201storage "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	cachev1alpha1api20210301 "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301"
	cachev1alpha1api20210301storage "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	computev1alpha1api20200930 "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930"
	computev1alpha1api20200930storage "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20200930storage"
	computev1alpha1api20201201 "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20201201"
	computev1alpha1api20201201storage "github.com/Azure/azure-service-operator/v2/api/compute/v1alpha1api20201201storage"
	containerservicev1alpha1api20210501 "github.com/Azure/azure-service-operator/v2/api/containerservice/v1alpha1api20210501"
	containerservicev1alpha1api20210501storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1alpha1api20210501storage"
	dbformysqlv1alpha1api20210501 "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1alpha1api20210501"
	dbformysqlv1alpha1api20210501storage "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1alpha1api20210501storage"
	dbforpostgresqlv1alpha1api20210601 "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1alpha1api20210601"
	dbforpostgresqlv1alpha1api20210601storage "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1alpha1api20210601storage"
	documentdbv1alpha1api20210515 "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515"
	documentdbv1alpha1api20210515storage "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	eventgridv1alpha1api20200601 "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601"
	eventgridv1alpha1api20200601storage "github.com/Azure/azure-service-operator/v2/api/eventgrid/v1alpha1api20200601storage"
	eventhubv1alpha1api20211101 "github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101"
	eventhubv1alpha1api20211101storage "github.com/Azure/azure-service-operator/v2/api/eventhub/v1alpha1api20211101storage"
	insightsv1alpha1api20180501preview "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501preview"
	insightsv1alpha1api20180501previewstorage "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20180501previewstorage"
	insightsv1alpha1api20200202 "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20200202"
	insightsv1alpha1api20200202storage "github.com/Azure/azure-service-operator/v2/api/insights/v1alpha1api20200202storage"
	managedidentityv1alpha1api20181130 "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1alpha1api20181130"
	managedidentityv1alpha1api20181130storage "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1alpha1api20181130storage"
	networkv1alpha1api20201101 "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101"
	networkv1alpha1api20201101storage "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	operationalinsightsv1alpha1api20210601 "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1alpha1api20210601"
	operationalinsightsv1alpha1api20210601storage "github.com/Azure/azure-service-operator/v2/api/operationalinsights/v1alpha1api20210601storage"
	servicebusv1alpha1api20210101preview "github.com/Azure/azure-service-operator/v2/api/servicebus/v1alpha1api20210101preview"
	servicebusv1alpha1api20210101previewstorage "github.com/Azure/azure-service-operator/v2/api/servicebus/v1alpha1api20210101previewstorage"
	signalrservicev1alpha1api20211001 "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1alpha1api20211001"
	signalrservicev1alpha1api20211001storage "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1alpha1api20211001storage"
	storagev1alpha1api20210401 "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401"
	storagev1alpha1api20210401storage "github.com/Azure/azure-service-operator/v2/api/storage/v1alpha1api20210401storage"
	"k8s.io/apimachinery/pkg/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// getKnownStorageTypes returns the list of storage types which can be reconciled.
func getKnownStorageTypes() []client.Object {
	var result []client.Object
	result = append(result, new(authorizationv1alpha1api20200801previewstorage.RoleAssignment))
	result = append(result, new(batchv1alpha1api20210101storage.BatchAccount))
	result = append(result, new(cachev1alpha1api20201201storage.Redis))
	result = append(result, new(cachev1alpha1api20201201storage.RedisFirewallRule))
	result = append(result, new(cachev1alpha1api20201201storage.RedisLinkedServer))
	result = append(result, new(cachev1alpha1api20201201storage.RedisPatchSchedule))
	result = append(result, new(cachev1alpha1api20210301storage.RedisEnterprise))
	result = append(result, new(cachev1alpha1api20210301storage.RedisEnterpriseDatabase))
	result = append(result, new(computev1alpha1api20200930storage.Disk))
	result = append(result, new(computev1alpha1api20201201storage.VirtualMachine))
	result = append(result, new(computev1alpha1api20201201storage.VirtualMachineScaleSet))
	result = append(result, new(containerservicev1alpha1api20210501storage.ManagedCluster))
	result = append(result, new(containerservicev1alpha1api20210501storage.ManagedClustersAgentPool))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServer))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServersDatabase))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServersFirewallRule))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServer))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersConfiguration))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersDatabase))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersFirewallRule))
	result = append(result, new(documentdbv1alpha1api20210515storage.DatabaseAccount))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabase))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollection))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabase))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainer))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerStoredProcedure))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerTrigger))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerUserDefinedFunction))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseThroughputSetting))
	result = append(result, new(eventgridv1alpha1api20200601storage.Domain))
	result = append(result, new(eventgridv1alpha1api20200601storage.DomainsTopic))
	result = append(result, new(eventgridv1alpha1api20200601storage.EventSubscription))
	result = append(result, new(eventgridv1alpha1api20200601storage.Topic))
	result = append(result, new(eventhubv1alpha1api20211101storage.Namespace))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhub))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhubsAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhubsConsumerGroup))
	result = append(result, new(insightsv1alpha1api20180501previewstorage.Webtest))
	result = append(result, new(insightsv1alpha1api20200202storage.Component))
	result = append(result, new(managedidentityv1alpha1api20181130storage.UserAssignedIdentity))
	result = append(result, new(networkv1alpha1api20201101storage.LoadBalancer))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkInterface))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkSecurityGroup))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkSecurityGroupsSecurityRule))
	result = append(result, new(networkv1alpha1api20201101storage.PublicIPAddress))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetwork))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworkGateway))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworksSubnet))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering))
	result = append(result, new(operationalinsightsv1alpha1api20210601storage.Workspace))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.Namespace))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.NamespacesQueue))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.NamespacesTopic))
	result = append(result, new(signalrservicev1alpha1api20211001storage.SignalR))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccount))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsBlobService))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsBlobServicesContainer))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsQueueService))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsQueueServicesQueue))
	return result
}

// getKnownTypes returns the list of all types.
func getKnownTypes() []client.Object {
	var result []client.Object
	result = append(result, new(authorizationv1alpha1api20200801preview.RoleAssignment))
	result = append(result, new(authorizationv1alpha1api20200801previewstorage.RoleAssignment))
	result = append(result, new(batchv1alpha1api20210101.BatchAccount))
	result = append(result, new(batchv1alpha1api20210101storage.BatchAccount))
	result = append(result, new(cachev1alpha1api20201201.Redis))
	result = append(result, new(cachev1alpha1api20201201.RedisFirewallRule))
	result = append(result, new(cachev1alpha1api20201201.RedisLinkedServer))
	result = append(result, new(cachev1alpha1api20201201.RedisPatchSchedule))
	result = append(result, new(cachev1alpha1api20201201storage.Redis))
	result = append(result, new(cachev1alpha1api20201201storage.RedisFirewallRule))
	result = append(result, new(cachev1alpha1api20201201storage.RedisLinkedServer))
	result = append(result, new(cachev1alpha1api20201201storage.RedisPatchSchedule))
	result = append(result, new(cachev1alpha1api20210301.RedisEnterprise))
	result = append(result, new(cachev1alpha1api20210301.RedisEnterpriseDatabase))
	result = append(result, new(cachev1alpha1api20210301storage.RedisEnterprise))
	result = append(result, new(cachev1alpha1api20210301storage.RedisEnterpriseDatabase))
	result = append(result, new(computev1alpha1api20200930.Disk))
	result = append(result, new(computev1alpha1api20200930storage.Disk))
	result = append(result, new(computev1alpha1api20201201.VirtualMachine))
	result = append(result, new(computev1alpha1api20201201.VirtualMachineScaleSet))
	result = append(result, new(computev1alpha1api20201201storage.VirtualMachine))
	result = append(result, new(computev1alpha1api20201201storage.VirtualMachineScaleSet))
	result = append(result, new(containerservicev1alpha1api20210501.ManagedCluster))
	result = append(result, new(containerservicev1alpha1api20210501.ManagedClustersAgentPool))
	result = append(result, new(containerservicev1alpha1api20210501storage.ManagedCluster))
	result = append(result, new(containerservicev1alpha1api20210501storage.ManagedClustersAgentPool))
	result = append(result, new(dbformysqlv1alpha1api20210501.FlexibleServer))
	result = append(result, new(dbformysqlv1alpha1api20210501.FlexibleServersDatabase))
	result = append(result, new(dbformysqlv1alpha1api20210501.FlexibleServersFirewallRule))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServer))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServersDatabase))
	result = append(result, new(dbformysqlv1alpha1api20210501storage.FlexibleServersFirewallRule))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServer))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServersConfiguration))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServersDatabase))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601.FlexibleServersFirewallRule))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServer))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersConfiguration))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersDatabase))
	result = append(result, new(dbforpostgresqlv1alpha1api20210601storage.FlexibleServersFirewallRule))
	result = append(result, new(documentdbv1alpha1api20210515.DatabaseAccount))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabase))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabaseCollection))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabaseCollectionThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515.MongodbDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabase))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainer))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerStoredProcedure))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerTrigger))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseContainerUserDefinedFunction))
	result = append(result, new(documentdbv1alpha1api20210515.SqlDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.DatabaseAccount))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabase))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollection))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.MongodbDatabaseThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabase))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainer))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerStoredProcedure))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerThroughputSetting))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerTrigger))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseContainerUserDefinedFunction))
	result = append(result, new(documentdbv1alpha1api20210515storage.SqlDatabaseThroughputSetting))
	result = append(result, new(eventgridv1alpha1api20200601.Domain))
	result = append(result, new(eventgridv1alpha1api20200601.DomainsTopic))
	result = append(result, new(eventgridv1alpha1api20200601.EventSubscription))
	result = append(result, new(eventgridv1alpha1api20200601.Topic))
	result = append(result, new(eventgridv1alpha1api20200601storage.Domain))
	result = append(result, new(eventgridv1alpha1api20200601storage.DomainsTopic))
	result = append(result, new(eventgridv1alpha1api20200601storage.EventSubscription))
	result = append(result, new(eventgridv1alpha1api20200601storage.Topic))
	result = append(result, new(eventhubv1alpha1api20211101.Namespace))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesEventhub))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesEventhubsAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101.NamespacesEventhubsConsumerGroup))
	result = append(result, new(eventhubv1alpha1api20211101storage.Namespace))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhub))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhubsAuthorizationRule))
	result = append(result, new(eventhubv1alpha1api20211101storage.NamespacesEventhubsConsumerGroup))
	result = append(result, new(insightsv1alpha1api20180501preview.Webtest))
	result = append(result, new(insightsv1alpha1api20180501previewstorage.Webtest))
	result = append(result, new(insightsv1alpha1api20200202.Component))
	result = append(result, new(insightsv1alpha1api20200202storage.Component))
	result = append(result, new(managedidentityv1alpha1api20181130.UserAssignedIdentity))
	result = append(result, new(managedidentityv1alpha1api20181130storage.UserAssignedIdentity))
	result = append(result, new(networkv1alpha1api20201101.LoadBalancer))
	result = append(result, new(networkv1alpha1api20201101.NetworkInterface))
	result = append(result, new(networkv1alpha1api20201101.NetworkSecurityGroup))
	result = append(result, new(networkv1alpha1api20201101.NetworkSecurityGroupsSecurityRule))
	result = append(result, new(networkv1alpha1api20201101.PublicIPAddress))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetwork))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetworkGateway))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetworksSubnet))
	result = append(result, new(networkv1alpha1api20201101.VirtualNetworksVirtualNetworkPeering))
	result = append(result, new(networkv1alpha1api20201101storage.LoadBalancer))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkInterface))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkSecurityGroup))
	result = append(result, new(networkv1alpha1api20201101storage.NetworkSecurityGroupsSecurityRule))
	result = append(result, new(networkv1alpha1api20201101storage.PublicIPAddress))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetwork))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworkGateway))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworksSubnet))
	result = append(result, new(networkv1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering))
	result = append(result, new(operationalinsightsv1alpha1api20210601.Workspace))
	result = append(result, new(operationalinsightsv1alpha1api20210601storage.Workspace))
	result = append(result, new(servicebusv1alpha1api20210101preview.Namespace))
	result = append(result, new(servicebusv1alpha1api20210101preview.NamespacesQueue))
	result = append(result, new(servicebusv1alpha1api20210101preview.NamespacesTopic))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.Namespace))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.NamespacesQueue))
	result = append(result, new(servicebusv1alpha1api20210101previewstorage.NamespacesTopic))
	result = append(result, new(signalrservicev1alpha1api20211001.SignalR))
	result = append(result, new(signalrservicev1alpha1api20211001storage.SignalR))
	result = append(result, new(storagev1alpha1api20210401.StorageAccount))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsBlobService))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsBlobServicesContainer))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsQueueService))
	result = append(result, new(storagev1alpha1api20210401.StorageAccountsQueueServicesQueue))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccount))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsBlobService))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsBlobServicesContainer))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsQueueService))
	result = append(result, new(storagev1alpha1api20210401storage.StorageAccountsQueueServicesQueue))
	return result
}

// createScheme creates a Scheme containing the clientgo types and all of the custom types returned by getKnownTypes
func createScheme() *runtime.Scheme {
	scheme := runtime.NewScheme()
	_ = clientgoscheme.AddToScheme(scheme)
	_ = authorizationv1alpha1api20200801preview.AddToScheme(scheme)
	_ = authorizationv1alpha1api20200801previewstorage.AddToScheme(scheme)
	_ = batchv1alpha1api20210101.AddToScheme(scheme)
	_ = batchv1alpha1api20210101storage.AddToScheme(scheme)
	_ = cachev1alpha1api20201201.AddToScheme(scheme)
	_ = cachev1alpha1api20201201storage.AddToScheme(scheme)
	_ = cachev1alpha1api20210301.AddToScheme(scheme)
	_ = cachev1alpha1api20210301storage.AddToScheme(scheme)
	_ = computev1alpha1api20200930.AddToScheme(scheme)
	_ = computev1alpha1api20200930storage.AddToScheme(scheme)
	_ = computev1alpha1api20201201.AddToScheme(scheme)
	_ = computev1alpha1api20201201storage.AddToScheme(scheme)
	_ = containerservicev1alpha1api20210501.AddToScheme(scheme)
	_ = containerservicev1alpha1api20210501storage.AddToScheme(scheme)
	_ = dbformysqlv1alpha1api20210501.AddToScheme(scheme)
	_ = dbformysqlv1alpha1api20210501storage.AddToScheme(scheme)
	_ = dbforpostgresqlv1alpha1api20210601.AddToScheme(scheme)
	_ = dbforpostgresqlv1alpha1api20210601storage.AddToScheme(scheme)
	_ = documentdbv1alpha1api20210515.AddToScheme(scheme)
	_ = documentdbv1alpha1api20210515storage.AddToScheme(scheme)
	_ = eventgridv1alpha1api20200601.AddToScheme(scheme)
	_ = eventgridv1alpha1api20200601storage.AddToScheme(scheme)
	_ = eventhubv1alpha1api20211101.AddToScheme(scheme)
	_ = eventhubv1alpha1api20211101storage.AddToScheme(scheme)
	_ = insightsv1alpha1api20180501preview.AddToScheme(scheme)
	_ = insightsv1alpha1api20180501previewstorage.AddToScheme(scheme)
	_ = insightsv1alpha1api20200202.AddToScheme(scheme)
	_ = insightsv1alpha1api20200202storage.AddToScheme(scheme)
	_ = managedidentityv1alpha1api20181130.AddToScheme(scheme)
	_ = managedidentityv1alpha1api20181130storage.AddToScheme(scheme)
	_ = networkv1alpha1api20201101.AddToScheme(scheme)
	_ = networkv1alpha1api20201101storage.AddToScheme(scheme)
	_ = operationalinsightsv1alpha1api20210601.AddToScheme(scheme)
	_ = operationalinsightsv1alpha1api20210601storage.AddToScheme(scheme)
	_ = servicebusv1alpha1api20210101preview.AddToScheme(scheme)
	_ = servicebusv1alpha1api20210101previewstorage.AddToScheme(scheme)
	_ = signalrservicev1alpha1api20211001.AddToScheme(scheme)
	_ = signalrservicev1alpha1api20211001storage.AddToScheme(scheme)
	_ = storagev1alpha1api20210401.AddToScheme(scheme)
	_ = storagev1alpha1api20210401storage.AddToScheme(scheme)
	return scheme
}
