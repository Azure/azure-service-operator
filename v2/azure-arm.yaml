schemaUrl: 'https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json'
schemaUrlRewrite:
  from: 'https://schema.management.azure.com/schemas/'
  to: 'specs/azure-resource-manager-schemas/schemas/'
destinationGoModuleFile: go.mod

# typesOutputPath specifies the output folder name, relative to the directory containing the mod file above.
typesOutputPath: api

# typeRegistrationOutputFile specifies the output file name for registration code, relative to the directory 
# containing the mod file above.
typeRegistrationOutputFile: internal/controllers/controller_resources_gen.go

# samplesUrl is the base URL used for linking to samples when we generate a list of supported resources
samplesUrl: https://github.com/Azure/azure-service-operator/tree/main/v2/config/samples

# emitDocFiles bool is used as a signal to create doc.go files for packages
emitDocFiles: true

pipeline: azure

#
# These filters are used early in the processing pipeline. 
#
# We exclude types with known problems, types that we don't need, and other types that may cause issues.
# The 'because' value for each filter describes the reason why the filter is present.
#
# Filters are applied in document order, with the earliest matching filter being applied for each type.
#
typeFilters:
  - action: prune
    group: definitions
    name: Expression
    because: expression is an ARM template construct which doesn't belong in CRDs
  - action: include
    group: servicebus
    version: v*20210101preview
    because: We want to export this particular preview version
  - action: include
    group: keyvault
    version: v*20210401preview
    because: We want to support keyvault which is only available in preview version
  - action: include
    group: insights
    version: v*20180501preview
    because: We're using webTests from this. There is a "newer" version but it's not actually supported, see https://github.com/Azure/azure-rest-api-specs/issues/14827
  - action: include
    group: authorization
    version: v*20200801preview
    because: We want to export this particular preview version
  - action: prune
    version: '*preview'
    because: preview SDK versions are excluded by default (they often do very strange things)
  - action: prune
    group: compute
    name: VirtualMachineScaleSetsExtensionsChildResource;VirtualMachinesExtensionsChildResource
    because: _childResource type which "points" to a resource type that doesn't exist. Need to work with schema owners on why.
  - action: prune
    group: web
    because: Some types (SitesSlotsConfig) use OneOf in a way we don't currently handle. Exclude the whole set for now.
  - action: prune
    group: network
    version: 'v*2015*;v*2016*;v*2017*;v*2018*;v*2019*'
    because: Pruning all older networking api versions types since we don't use them anyway (and they have odd issues)
  - action: prune
    group: compute
    version: 'v*beta201*'
    because: Pruning all older compute api versions types since we don't use them anyway (and they have odd issues)
  - action: prune
    group: kusto
    because: Some types use OneOf in a way we don't currently handle correctly.
  - action: prune
    group: timeseriesinsights
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: databoxedge
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: datashare
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: apimanagement
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: automation
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: machinelearningservices
    name: WorkspacesService*
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: resources
    name: DeploymentScript*
    because: Some types use OneOf to model inheritance, which we don't currently support.
  - action: prune
    group: resources
    name: Tags
    because: This type is defined recursively.
  - action: include
    group: compute.extensions
    name: GenericExtension
    because: This is the one kind of extension we want to allow
  - action: prune
    group: compute.extensions
    because: All other extensions should be removed
  - action: prune
    group: costmanagement
    because: QueryFilter is a self-referential, infinitely recursive type. We can't easily unroll it and controller-gen doesn't support recursive types

# Exclusions for packages that currently produce types including AnyType.
# TODO: get rid of these, either by chasing the teams generating
# weird json or by handling them differently in the generator.
anyTypePackages:

typeTransformers:
  # Deal with stuff that exists on ARM resources but doesn't make sense on CRDs
  - group: definitions
    name: NumberOrExpression
    because: NumberOrExpression is an ARM template artifact that doesn't make sense in CRDs
    target:
      name: float
  - name: "*"
    property: Tags
    ifType: 
      map:
        key:
          name: string
        value:
          name: any
    target:
      map:
        key: 
          name: string
        value:
          name: string
    because: Tags is defined as map[string]interface{} when it should be map[string]string
  - group: cache
    name: RedisCreateProperties
    property: RedisConfiguration
    target:
      map:
        key:
          name: string
        value:
          name: string
    because: the definition in resource manager schemas uses additionalProperties + defined fields which we don't support
  - group: cache
    name: RedisProperties_Status
    property: RedisConfiguration
    target:
      map:
        key:
          name: string
        value:
          name: string
    because: the definition in rest api specs uses additionalProperties + defined fields which we don't support
  - group: cache
    name: RedisProperties_Status
    property: AccessKeys
    remove: true
    because: AccessKeys is only set on response to PUT/CREATE, but we fill out Status via GET so this field is always empty. It also contains secrets we wouldn't want to expose in status anyway.
  - group: deploymenttemplate
    name: ResourceLocations
    target:
      name: string
    because: Modeling this as an enum doesn't work well in the context of CRDs because new regions are regularly added
  - group: definitions
    name: ResourceLocations
    target:
      name: string
    because: Modeling this as an enum doesn't work well in the context of CRDs because new regions are regularly added
  - name: "*"
    property: Condition
    ifType:
      name: bool
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Copy
    ifType:
      group: deploymenttemplate
      version: "2019-04-01"
      name: ResourceCopy
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Copy
    ifType:
      group: definitions
      version: "*"
      name: ResourceCopy
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD. Doesn't match the above because of a quirk in how autogenerated resources include resourceBase.
  - name: "*"
    property: DependsOn
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD
  - name: "*"
    property: Comments
    ifType:
      name: string
      optional: true
    remove: true
    because: It exists on ARMResource but doesn't make sense in the context of a CRD

  # Deal with readonly properties that were not properly pruned in the JSON schema
  - name: BatchAccountIdentity
    group: batch
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: Identity
    group: servicebus
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: Identity
    group: storage
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: StorageAccountsManagementPolicies_Spec
    group: storage
    property: Location
    remove: true
    because: This property should be marked readonly
  - name: ManagedServiceIdentity
    group: documentdb
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: PrivateEndpointConnectionProperties
    group: storage
    property: PrivateEndpoint
    remove: true
    because: The PrivateEndpoint property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: VirtualMachineScaleSetIdentity
    group: compute
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: Identity
    group: eventhub
    property: UserAssignedIdentities
    remove: true
    because: The UserAssignedIdentities property is entirely readOnly but is modelled poorly in the JSON schemas. See discussion on https://github.com/Azure/azure-resource-manager-schemas/issues/835
  - name: PrivateEndpointConnectionProperties
    group: eventhub
    property: PrivateLinkServiceConnectionState
    remove: true
    because: This property should be marked readonly
  - name: PrivateEndpointConnectionProperties
    group: eventhub
    property: ProvisioningState
    remove: true
    because: This property should be marked readonly
  - name: NamespacesEventhubs_Spec_Properties
    group: eventhub
    property: Status
    remove: true
    because: This property should be marked readonly
  - group: eventgrid
    version: v*20190601
    name: Domains_Spec
    property: Properties
    remove: true
    because: it has no writable properties in swagger
  - group: eventgrid
    version: "*"
    name: Topics_Spec
    property: Properties
    remove: true
    because: it has no writable properties in swagger

  # Deal with properties that should have been marked readOnly but weren't
  - group: servicebus
    name: Namespaces_Spec_Properties  # This type is subsequently flattened into Namespaces_Spec. I don't know why it's called this either (I think it should be SBNamespaceProperties?)
    property: PrivateEndpointConnections
    remove: true
    because: This property should have been marked readonly but wasn't.
  - group: servicebus
    name: SBQueueProperties  # This type is subsequently flattened into NamespacesQueues_Spec
    property: Status
    remove: true
    because: This property should have been marked readonly but wasn't.
  - group: servicebus
    name: SBTopicProperties  # This type is subsequently flattened into NamespacesTopics_Spec
    property: Status
    remove: true
    because: This property should have been marked readonly but wasn't.
  - group: documentdb
    name: Location  # This type is subsequently flattened into NamespacesTopics_Spec
    property: ProvisioningState
    remove: true
    because: This property should have been marked readonly but wasn't.
  - group: compute
    name: DiskProperties  # This type is subsequently flattened into Disks_Spec
    property: DiskState
    remove: true
    because: This property should have been marked readonly but wasn't.

  # Remove embedded resource properties
  - group: network
    name: VirtualNetworkPropertiesFormat_Status  # This type is subsequently flattened into VirtualNetwork_Status
    property: Subnets
    remove: true
    because: This is an embedded resource
  - group: network
    name: VirtualNetworkPropertiesFormat_Status  # This type is subsequently flattened into VirtualNetwork_Status
    property: VirtualNetworkPeerings
    remove: true
    because: This is an embedded resource
  - group: network
    name: RouteTablePropertiesFormat_Status  # This type is subsequently flattened into RouteTable_Status
    property: Routes
    remove: true
    because: This is an embedded resource
  - group: network
    name: RouteTablePropertiesFormat_Status  # This type is subsequently flattened into RouteTable_Status
    property: Subnets
    remove: true
    because: This is an embedded resource

  # Deal with resources that have tags or location included but shouldn't have (proxy resources, etc).
  # See https://github.com/Azure/azure-resource-manager-schemas/issues/1850
  - group: containerservice
    name: ManagedClustersAgentPools_Spec
    property: Tags
    remove: true
    because: Tags shouldn't be here (see https://github.com/Azure/azure-resource-manager-schemas/issues/1850)
  - group: network
    name: VirtualNetworksSubnets_Spec
    property: Location
    remove: true
    because: Child resource cannot choose location
  - group: network
    name: VirtualNetworksSubnets_Spec
    property: Tags
    remove: true
    because: Child resource cannot set tags
  - group: network
    name: RouteTablesRoutes_Spec
    property: Location
    remove: true
    because: Child resource cannot choose location
  - group: network
    name: RouteTablesRoutes_Spec
    property: Tags
    remove: true
    because: Child resource cannot set tags

  # Deal with service Swaggers that are just wrong
  - group: insights
    name: WebTests_Spec
    property: Kind
    remove: true
    because: This shouldn't be here, it's supposed to be on the Properties type (and is already). They somehow accidentally duplicated it.
  - group: insights
    name: WebTest_Status
    property: Kind
    remove: true
    because: This shouldn't be here, it's supposed to be on the Properties type (and is already). They somehow accidentally duplicated it.

status:
  schemaRoot: "./specs/azure-rest-api-specs/specification"

  overrides: [
    {
      # give the common types their own namespace
      basePath: 'common-types/resource-management',
      namespace: 'Microsoft.Common'
    },
    {
      # force the namespace here or it can fall foul of the sibling-name-collision test
      basePath: 'sql/resource-manager/common',
      namespace: 'Microsoft.Sql'
    },
    {
      # force the namespace here or it can fall foul of the sibling-name-collision test
      basePath: 'security/resource-manager/common',
      namespace: 'Microsoft.Security'
    },
    {
      # force the namespace here or it can fall foul of the sibling-name-collision test
      basePath: 'eventhub/resource-manager/common',
      namespace: 'Microsoft.EventHub'
    },
    {
      # force the namespace here or it can fall foul of the sibling-name-collision test
      basePath: 'securityinsights/resource-manager/common',
      namespace: 'Microsoft.SecurityInsights'
    },
  # the rest of the configuration below is copied from the ARM schema repo:
  # https://github.com/Azure/azure-resource-manager-schemas/blob/master/generator/autogenlist.ts
    {
        basePath: 'blueprint/resource-manager',
        namespace: 'Microsoft.Blueprint',
        resourceConfig: [
            {
                type: 'blueprintAssignments',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
            {
                type: 'blueprints',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
            {
                type: 'blueprints/artifacts',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
            {
                type: 'blueprints/versions',
                scopes: ScopeType.Subcription | ScopeType.ManagementGroup,
            },
        ]
    },
    {
        basePath: 'customproviders/resource-manager',
        namespace: 'Microsoft.CustomProviders',
        resourceConfig: [
            {
                type: 'associations',
                scopes: ScopeType.Extension,
            },
        ],
    },
    {
        basePath: 'consumption/resource-manager',
        namespace: 'Microsoft.Consumption',
        resourceConfig: [
            {
                type: 'budgets',
                scopes: ScopeType.Subcription | ScopeType.ResourceGroup | ScopeType.Extension,
            },
        ],
    },
    {
      basePath: 'digitaltwins/resource-manager',
      resourceConfig: [
          {
              type: 'integrationResources',
              scopes: ScopeType.Extension,
          }
      ]
    },
    {
        basePath: 'deviceprovisioningservices/resource-manager',
        suffix: 'Provisioning',
    },
    {
        basePath: 'frontdoor/resource-manager',
        suffix: 'FrontDoor',
    },
    { 
        basePath: 'eventgrid/resource-manager',
        resourceConfig: [
            {
                type: 'eventSubscriptions',
                scopes: ScopeType.Extension | ScopeType.Subcription | ScopeType.ResourceGroup,
            },
        ],
    },
    {
        basePath: 'machinelearning/resource-manager',
        postProcessor: machineLearningPostProcessor,
    },
    {
        basePath: 'managednetwork/resource-manager',
        resourceConfig: [
            {
                type: 'scopeAssignments',
                scopes: ScopeType.Subcription,
            },
        ],
    },
    {
        basePath: 'policyinsights/resource-manager',
        resourceConfig: [
            {
                type: 'remediations',
                scopes: ScopeType.Subcription | ScopeType.ResourceGroup | ScopeType.ManagementGroup,
            }
        ]
    },
    {
        basePath: 'resources/resource-manager',
        resourceConfig: [
            {
                type: 'deployments',
                scopes: ScopeType.Tenant | ScopeType.ManagementGroup | ScopeType.Subcription | ScopeType.ResourceGroup,
            },
            {
                type: 'tags',
                scopes: ScopeType.ManagementGroup | ScopeType.Subcription | ScopeType.ResourceGroup | ScopeType.Extension,
            },
        ],
        postProcessor: resourcesPostProcessor,
    },
    {
        basePath: 'storSimple1200Series/resource-manager',
        suffix: '1200'
    },
    { 
        basePath: 'storsimple8000series/resource-manager',
        suffix: '8000',
    },
    {
        basePath: 'softwareplan/resource-manager',
        resourceConfig: [
            {
                type: 'hybridUseBenefits',
                scopes: ScopeType.Extension,
            },
        ]
    },
  ]
# 
# This section of the configuration file mirrors the hierarchy of generated types, providing 
# additional information about how to handle each one.
#
# Each level of the configuration works as follows:
#
# group:              // The service - e.g. batch, redis or storage
#   version:          // ARM API version - e.g. 2020-12-01
#     type:           // A resource or subtype (similar to kubernetes 'kind')
#       property:     // An attribute found on an object type
#
# Please add new elements to this configuration in ALPHABETICAL order to make 
# it easier for future maintainers to scan for the item they want.
# 
# At specific levels, optional modifiers may be injected.
# All modifiers start with `$` in order to avoid clashes with ARM object and 
# property names
#
# Available 'type' modifiers:
#
# $azureGeneratedSecrets: <array of strings>
#     An array of names identifying the secrets generated by Azure which can be automatically
#     downloaded by the operator. Each element in the collection becomes
#     a property on operatorSpec.Secrets. Actual retrieval of the secrets must be manually
#     implemented as an extension on the resource type in question.
#     Only valid for resource types.
#
# $export: <bool>
#     Requests that support for this resource type be generated.
#     Automatically includes all other types required for this resource
#     If not specified, the default value is false.
#     Only valid for resource types.
#
# $exportAs: <string>
#     Requests that this resource type be exported with the specified
#     identifier, allowing poorly named types to be renamed.
#     Implies $export: true
#     Only valid for resource types.
#
# $nameInNextVersion: <string>
#     Gives the name this type has in the next version of the resource.
#     Establishes a connection between the two types allowing for proper
#     forward and backward conversion.
#
# $supportedFrom: <version>
#     Gives the version number of the first release of ASO that provides 
#     support for this resource.
#     Note: If the resource is renamed via $exportAs, $supportedFrom won't 
#     work if you put it in the same section as $exportAs; you instead need 
#     to place $supportedFrom in a section using the name specified by $exportAs
#
# Available 'property' modifiers:
#
# $armReference: <bool>
#     Indicates whether this property is an ARM reference to another resource. 
#     Set to 'true' to confirm the property is an ARM reference.
#     Set to 'false' to disable our heuristics if a property is incorrectly 
#     identified as an ARM reference.
#
# $isSecret: <bool>
#     Specifies that the property references a secret.
#     Set to `true` to flag this property as a secret. Secrets are string values 
#     read from a secure storage by ASO when needed.
#
# $nameInNextVersion: <string>
#     Gives the name this property has in the next version of the resource
#     Establishes a connection between the two properties allowing for proper
#     forward and backward conversion.
#
# $isResourceLifecycleOwnedByParent: <bool>
#     Specifies that the property references a misbehaving embedded resource, one whose parent
#     resource owns the lifecycle of the child resource.
#     These resources are embedded resources which are overwritten when their parent resource
#     is changed. For example see https://github.com/Azure/azure-service-operator/issues/1944.
#
objectModelConfiguration: 
  authorization:
    2020-08-01-preview:
      RoleAssignment:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
      RoleAssignmentProperties:
        RoleDefinitionId:
          $armReference: true
  batch:
    2021-01-01:
      AutoStorageBaseProperties:
        StorageAccountId:
          $armReference: true
      BatchAccount:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      KeyVaultReference:
        Id:
          $armReference: true
  cache:
    2020-12-01:
      Redis:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
        $azureGeneratedSecrets:
          - PrimaryKey
          - SecondaryKey
          - HostName
          - Port
          - SSLPort
      RedisCreateProperties:
        SubnetId:
          $armReference: true
      RedisFirewallRule:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      RedisLinkedServer:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      RedisLinkedServerCreateProperties:
        LinkedRedisCacheId:
          $armReference: true
      RedisPatchSchedule: 
        $export: true
        $supportedFrom: v2.0.0-alpha.4
    2021-03-01:
      RedisEnterprise:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      RedisEnterpriseDatabase:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
  cdn:
    2021-06-01:
      DeepCreatedOriginProperties:
        PrivateLinkLocation:
          $armReference: true
        PrivateLinkResourceId:
          $armReference: true
      EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink:
        Id:
          $armReference: true
      Profile:
        $export: true
        $supportedFrom: v2.0.0-beta.1
      ProfilesEndpoint:
        $export: true
        $supportedFrom: v2.0.0-beta.1
      ResourceReference:
        Id:
          $armReference: true
  compute:
    2020-09-30:
      CreationData:
        SourceResourceId:
          $armReference: true
      Disk:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      DiskProperties:
        DiskAccessId:
          $armReference: true
      Encryption:
        DiskEncryptionSetId:
          $armReference: true
      ImageDiskReference:
        Id:
          $armReference: true
      Snapshot:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      SnapshotProperties:
        DiskAccessId: 
          $armReference: true
      SourceVault:
        Id:
          $armReference: true
    2020-12-01:
      ApiEntityReference:
        Id:
          $armReference: true
      DiskEncryptionSetParameters:
        Id:
          $armReference: true
      ImageReference:
        Id:
          $armReference: true
      VirtualMachine:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      VirtualMachineScaleSet:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations:
        # This is an Id that I believe refers to itself.
        # It's never supplied in a PUT I don't think, and is only returned in a GET because the
        # IPConfiguration is actually an ARM resource that can only be created by issuing a PUT VMSS.
        Id:
          $armReference: false
      VirtualMachineScaleSets_Spec_Properties_VirtualMachineProfile_NetworkProfile_NetworkInterfaceConfigurations_Properties_IpConfigurations:
        # This is an Id that I believe refers to itself.
        # It's never supplied in a PUT I don't think, and is only returned in a GET because the
        # IPConfiguration is actually an ARM resource that can only be created by issuing a PUT VMSS.
        Id:
          $armReference: false
      SubResource:
        # When SubResource is used directly in a property, it's meant as a reference. When it's inherited from, the Id is for self
        Id:
          $armReference: true
      VirtualMachines_Spec_Properties_NetworkProfile_NetworkInterfaces:
        Id:
          $armReference: true
      ManagedDiskParameters:
        Id:
          $armReference: true
    2021-07-01:
      DiskEncryptionSetParameters:
        Id: 
          $armReference: true
      Image:
        $export: true
        $supportedFrom: v2.0.0-alpha.6
      SubResource:
        Id:
          $armReference: true
  containerinstance:
    2021-10-01:
      ContainerGroup:
        $export: true
        $supportedFrom: v2.0.0-beta.1
      LogAnalytics:
        WorkspaceResourceId:
          $armReference: true
      ContainerGroupSubnetId:
        Id:
          $armReference: true
      ImageRegistryCredential:
        Password:
          $isSecret: true
  containerregistry:
    2021-09-01:
      Registry:
        $export: true
        $supportedFrom: v2.0.0-alpha.6
      IdentityProperties:
        PrincipalId:
          $armReference: false
  containerservice:
    2021-05-01:
      Componentsqit0Etschemasmanagedclusterpropertiespropertiesidentityprofileadditionalproperties:
        ResourceId: # TODO: Is this right?
          $armReference: true
      ManagedCluster:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      ManagedClusterAgentPoolProfile:
        VnetSubnetID:
          $armReference: true
        PodSubnetID:
          $armReference: true
        NodePublicIPPrefixID:
          $armReference: true
      ManagedClustersAgentPool:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      ManagedClusterAgentPoolProfileProperties:
        NodePublicIPPrefixID:
          $armReference: true
        PodSubnetID:
          $armReference: true
        VnetSubnetID:
          $armReference: true
      ManagedClusterProperties:
        DiskEncryptionSetID:
          $armReference: true
      PrivateLinkResource:
        Id:
          $armReference: true
      ResourceReference:
        Id:
          $armReference: true
      UserAssignedIdentity:
        ResourceId:
          $armReference: true
  dbformariadb:
    2018-06-01:
      Server:
        $export: true
        $supportedFrom: v2.0.0-beta.1
        $azureGeneratedSecrets:
          - FullyQualifiedDomainName
      ServersConfiguration:
        $exportAs: Configuration
        $supportedFrom: v2.0.0-beta.1
      ServersDatabase:
        $exportAs: Database
        $supportedFrom: v2.0.0-beta.1
      ServerPropertiesForCreate_ServerPropertiesForDefaultCreate:
        $exportAs: ServerPropertiesForDefaultCreate
      ServerPropertiesForCreate_ServerPropertiesForGeoRestore:
        $exportAs: ServerPropertiesForGeoRestore
      ServerPropertiesForCreate_ServerPropertiesForReplica:
        $exportAs: ServerPropertiesForReplica
      ServerPropertiesForCreate_ServerPropertiesForRestore:
        $exportAs: ServerPropertiesForRestore
  dbformysql:
    2021-05-01:
      FlexibleServer: 
        $export: true
        $supportedFrom: v2.0.0-alpha.2
        $azureGeneratedSecrets:
          - FullyQualifiedDomainName
      FlexibleServersDatabase:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
      FlexibleServersFirewallRule:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
      Network:
        PrivateDnsZoneResourceId:
          $armReference: true
        DelegatedSubnetResourceId:
          $armReference: true
  dbforpostgresql:
    2021-06-01:
      FlexibleServer:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
        $azureGeneratedSecrets:
          - FullyQualifiedDomainName
      FlexibleServersConfiguration:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      FlexibleServersDatabase:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
      FlexibleServersFirewallRule:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
      Network:
        PrivateDnsZoneArmResourceId:
          $armReference: true
        DelegatedSubnetResourceId:
          $armReference: true
      ServerProperties:
        SourceServerResourceId:
          $armReference: true
  documentdb:
    2021-05-15:
      DatabaseAccount:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
        $azureGeneratedSecrets:
          - PrimaryMasterKey
          - SecondaryMasterKey
          - PrimaryReadonlyMasterKey
          - SecondaryReadonlyMasterKey
          - DocumentEndpoint
      DatabaseAccountsMongodbDatabase:
        $exportAs: MongodbDatabase
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsMongodbDatabasesCollection:
        $exportAs: MongodbDatabaseCollection
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting:
        $exportAs: MongodbDatabaseCollectionThroughputSetting
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsMongodbDatabasesThroughputSetting:
        $exportAs: MongodbDatabaseThroughputSetting
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabase:
        $exportAs: SqlDatabase
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabasesContainer:
        $exportAs: SqlDatabaseContainer
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabasesContainersStoredProcedure:
        $exportAs: SqlDatabaseContainerStoredProcedure
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabasesContainersThroughputSetting:
        $exportAs: SqlDatabaseContainerThroughputSetting
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabasesContainersTrigger:
        $exportAs: SqlDatabaseContainerTrigger
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabasesContainersUserDefinedFunction:
        $exportAs: SqlDatabaseContainerUserDefinedFunction
        $supportedFrom: v2.0.0-alpha.2
      DatabaseAccountsSqlDatabasesThroughputSetting:
        $exportAs: SqlDatabaseThroughputSetting
        $supportedFrom: v2.0.0-alpha.2
      MongoDBCollectionResource:
        Id:
          $armReference: false
      MongoDBDatabaseResource:
        Id:
          $armReference: false
      SqlDatabaseResource:
        Id:
          $armReference: false
      SqlContainerResource:
        Id:
          $armReference: false
      SqlTriggerResource:
        Id:
          $armReference: false
      SqlStoredProcedureResource:
        Id:
          $armReference: false
      SqlUserDefinedFunctionResource:
        Id:
          $armReference: false
      VirtualNetworkRule:
        Id:
          $armReference: true
  eventgrid:
    2020-06-01:
      Domain:
        $export: true
        $supportedFrom: v2.0.0-alpha.5
      DomainsTopic:
        $export: true
        $supportedFrom: v2.0.0-alpha.5
      EventSubscription:
        $export: true
        $supportedFrom: v2.0.0-alpha.5
      Topic:
        $export: true
        $supportedFrom: v2.0.0-alpha.3
      AzureFunctionEventSubscriptionDestinationProperties:
        ResourceId:
          $armReference: true
      EventHubEventSubscriptionDestinationProperties:
        ResourceId:
          $armReference: true
      HybridConnectionEventSubscriptionDestinationProperties:
        ResourceId:
          $armReference: true
      ServiceBusQueueEventSubscriptionDestinationProperties:
        ResourceId:
          $armReference: true
      ServiceBusTopicEventSubscriptionDestinationProperties:
        ResourceId:
          $armReference: true
      StorageQueueEventSubscriptionDestinationProperties:
        ResourceId:
          $armReference: true
      StorageBlobDeadLetterDestinationProperties:
        ResourceId:
          $armReference: true
  eventhub:
    2021-11-01:
      DestinationProperties:
        StorageAccountResourceId:
          $armReference: true
      Namespace:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      NamespacesAuthorizationRule:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
      NamespacesEventhub:
        $export: true
        $supportedFrom: v2.0.0-alpha.3
      NamespacesEventhubsAuthorizationRule:
        $export: true
        $supportedFrom: v2.0.0-alpha.3
      NamespacesEventhubsConsumergroup:
        $exportAs: NamespacesEventhubsConsumerGroup
        $supportedFrom: v2.0.0-alpha.1
      Namespaces_Spec_Properties:
        ClusterArmId:
          $armReference: true
      PrivateEndpoint:
        Id:
          $armReference: true
      UserAssignedIdentityProperties:
        UserAssignedIdentity:
          $armReference: true
  insights:
    2018-05-01-preview:
      Webtest:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      WebTestGeolocation:
        Id:
          $armReference: false
    2020-02-02:
      ApplicationInsightsComponentProperties:
        WorkspaceResourceId:
          $armReference: true
      Component:
        $export: true
        $supportedFrom: v2.0.0-alpha.2
  keyvault:
    2021-04-01-preview:
      Vault:
        $export: true
        $supportedFrom: v2.0.0-beta.1
      VirtualNetworkRule:
        Id:
          $armReference: true
  managedidentity:
    2018-11-30:
      UserAssignedIdentity:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
  network:
    2020-11-01:
      LoadBalancer:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      NetworkInterface:
        $export: true
        $supportedFrom: v2.0.0-alpha.3
      NetworkSecurityGroup:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      NetworkSecurityGroupsSecurityRule:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      PublicIPAddress:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      RouteTable:
        $export: true
        $supportedFrom: v2.0.0-beta.1
      RouteTables_Spec_Properties:
        Routes:
          $isResourceLifecycleOwnedByParent: true
      RouteTablesRoute:
        $export: true
        $supportedFrom: v2.0.0-beta.1
      SubResource:
        Id:
          $armReference: true
      VirtualNetwork:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      VirtualNetworkGateway:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      VirtualNetworks_Spec_Properties:
        Subnets:
          $isResourceLifecycleOwnedByParent: true
        VirtualNetworkPeerings:
          # Technically this resource behaves fine (updating the vnet doesn't delete these if they
          # aren't included in the payload). Marking it here so that the pruning takes effect.
          $isResourceLifecycleOwnedByParent: true
      VirtualNetworksSubnet:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      VirtualNetworksVirtualNetworkPeering:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      VirtualNetworkGateways_Spec_Properties:
        VNetExtendedLocationResourceId:
          $armReference: true
  operationalinsights:
    2021-06-01:
      Workspace:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
      WorkspaceFeatures:
        ClusterResourceId:
          $armReference: true
  servicebus:
    2021-01-01-preview:
      Namespace:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      NamespacesQueue:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      NamespacesTopic:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      UserAssignedIdentityProperties:
        UserAssignedIdentity:
          $armReference: true
  signalrservice:
    2021-10-01:
      SignalR:
        $export: true
        $supportedFrom: v2.0.0-alpha.4
  storage:
    2021-04-01:
      EncryptionIdentity:
        UserAssignedIdentity:
          $armReference: true
      ResourceAccessRule:
        ResourceId:
          $armReference: true
      StorageAccount:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
        $azureGeneratedSecrets:
          - Key1
          - Key2
          - WebEndpoint
          - BlobEndpoint
          - FileEndpoint
          - QueueEndpoint
          - TableEndpoint
          - DfsEndpoint
      StorageAccountsBlobService:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      StorageAccountsBlobServicesContainer:
        $export: true
        $supportedFrom: v2.0.0-alpha.1
      StorageAccountsQueueService:
        $export: true
        $supportedFrom: v2.0.0-alpha.5
      StorageAccountsQueueServicesQueue:
        $export: true
        $supportedFrom: v2.0.0-alpha.5
      StorageAccountsManagementPolicy:
        $export: true
        $supportedFrom: v2.0.0-beta.0
      VirtualNetworkRule:
        Id:
          $armReference: true
