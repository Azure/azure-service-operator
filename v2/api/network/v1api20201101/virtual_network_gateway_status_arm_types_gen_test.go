// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AddressSpace_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_STATUS_ARM, AddressSpace_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_STATUS_ARM runs a test to see if a specific instance of AddressSpace_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_STATUS_ARM(subject AddressSpace_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_STATUS_ARM instances for property testing - lazily instantiated by
// AddressSpace_STATUS_ARMGenerator()
var addressSpace_STATUS_ARMGenerator gopter.Gen

// AddressSpace_STATUS_ARMGenerator returns a generator of AddressSpace_STATUS_ARM instances for property testing.
func AddressSpace_STATUS_ARMGenerator() gopter.Gen {
	if addressSpace_STATUS_ARMGenerator != nil {
		return addressSpace_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_STATUS_ARM(generators)
	addressSpace_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_STATUS_ARM{}), generators)

	return addressSpace_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_STATUS_ARM, BgpSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_STATUS_ARM runs a test to see if a specific instance of BgpSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_STATUS_ARM(subject BgpSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_STATUS_ARM instances for property testing - lazily instantiated by
// BgpSettings_STATUS_ARMGenerator()
var bgpSettings_STATUS_ARMGenerator gopter.Gen

// BgpSettings_STATUS_ARMGenerator returns a generator of BgpSettings_STATUS_ARM instances for property testing.
// We first initialize bgpSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_STATUS_ARMGenerator() gopter.Gen {
	if bgpSettings_STATUS_ARMGenerator != nil {
		return bgpSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_STATUS_ARM(generators)
	bgpSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_STATUS_ARM(generators)
	bgpSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_STATUS_ARM{}), generators)

	return bgpSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_STATUS_ARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_STATUS_ARM, IPConfigurationBgpPeeringAddress_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_STATUS_ARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_STATUS_ARM(subject IPConfigurationBgpPeeringAddress_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_STATUS_ARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddress_STATUS_ARMGenerator()
var ipConfigurationBgpPeeringAddress_STATUS_ARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_STATUS_ARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_STATUS_ARM instances for property testing.
func IPConfigurationBgpPeeringAddress_STATUS_ARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_STATUS_ARMGenerator != nil {
		return ipConfigurationBgpPeeringAddress_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_STATUS_ARM(generators)
	ipConfigurationBgpPeeringAddress_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_STATUS_ARM{}), generators)

	return ipConfigurationBgpPeeringAddress_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_STATUS_ARM, IpsecPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_STATUS_ARM runs a test to see if a specific instance of IpsecPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_STATUS_ARM(subject IpsecPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// IpsecPolicy_STATUS_ARMGenerator()
var ipsecPolicy_STATUS_ARMGenerator gopter.Gen

// IpsecPolicy_STATUS_ARMGenerator returns a generator of IpsecPolicy_STATUS_ARM instances for property testing.
func IpsecPolicy_STATUS_ARMGenerator() gopter.Gen {
	if ipsecPolicy_STATUS_ARMGenerator != nil {
		return ipsecPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_STATUS_ARM(generators)
	ipsecPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_STATUS_ARM{}), generators)

	return ipsecPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		DhGroup_STATUS_DHGroup1,
		DhGroup_STATUS_DHGroup14,
		DhGroup_STATUS_DHGroup2,
		DhGroup_STATUS_DHGroup2048,
		DhGroup_STATUS_DHGroup24,
		DhGroup_STATUS_ECP256,
		DhGroup_STATUS_ECP384,
		DhGroup_STATUS_None))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IkeEncryption_STATUS_AES128,
		IkeEncryption_STATUS_AES192,
		IkeEncryption_STATUS_AES256,
		IkeEncryption_STATUS_DES,
		IkeEncryption_STATUS_DES3,
		IkeEncryption_STATUS_GCMAES128,
		IkeEncryption_STATUS_GCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IkeIntegrity_STATUS_GCMAES128,
		IkeIntegrity_STATUS_GCMAES256,
		IkeIntegrity_STATUS_MD5,
		IkeIntegrity_STATUS_SHA1,
		IkeIntegrity_STATUS_SHA256,
		IkeIntegrity_STATUS_SHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecEncryption_STATUS_AES128,
		IpsecEncryption_STATUS_AES192,
		IpsecEncryption_STATUS_AES256,
		IpsecEncryption_STATUS_DES,
		IpsecEncryption_STATUS_DES3,
		IpsecEncryption_STATUS_GCMAES128,
		IpsecEncryption_STATUS_GCMAES192,
		IpsecEncryption_STATUS_GCMAES256,
		IpsecEncryption_STATUS_None))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecIntegrity_STATUS_GCMAES128,
		IpsecIntegrity_STATUS_GCMAES192,
		IpsecIntegrity_STATUS_GCMAES256,
		IpsecIntegrity_STATUS_MD5,
		IpsecIntegrity_STATUS_SHA1,
		IpsecIntegrity_STATUS_SHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		PfsGroup_STATUS_ECP256,
		PfsGroup_STATUS_ECP384,
		PfsGroup_STATUS_None,
		PfsGroup_STATUS_PFS1,
		PfsGroup_STATUS_PFS14,
		PfsGroup_STATUS_PFS2,
		PfsGroup_STATUS_PFS2048,
		PfsGroup_STATUS_PFS24,
		PfsGroup_STATUS_PFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServer_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_STATUS_ARM, RadiusServer_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_STATUS_ARM runs a test to see if a specific instance of RadiusServer_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_STATUS_ARM(subject RadiusServer_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_STATUS_ARM instances for property testing - lazily instantiated by
// RadiusServer_STATUS_ARMGenerator()
var radiusServer_STATUS_ARMGenerator gopter.Gen

// RadiusServer_STATUS_ARMGenerator returns a generator of RadiusServer_STATUS_ARM instances for property testing.
func RadiusServer_STATUS_ARMGenerator() gopter.Gen {
	if radiusServer_STATUS_ARMGenerator != nil {
		return radiusServer_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_STATUS_ARM(generators)
	radiusServer_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_STATUS_ARM{}), generators)

	return radiusServer_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM, VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_STATUS_ARM, VirtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_STATUS_ARM(subject VirtualNetworkGatewayIPConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator()
var virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM(generators)
	virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM(generators)
	virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_STATUS_ARM{}), generators)

	return virtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUS_ARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM, VirtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM(subject VirtualNetworkGatewayPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator()
var virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM(generators)
	virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM(generators)
	virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_STATUS_ARM{}), generators)

	return virtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayType_STATUS_ExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayType_STATUS_LocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayType_STATUS_Vpn))
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_STATUS_Generation1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_STATUS_Generation2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_STATUS_None))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnType_STATUS_PolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnType_STATUS_RouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_STATUS_ARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_STATUS_ARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_STATUS_ARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_STATUS_ARMGenerator())
}

func Test_VirtualNetworkGatewaySku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_STATUS_ARM, VirtualNetworkGatewaySku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_STATUS_ARM(subject VirtualNetworkGatewaySku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySku_STATUS_ARMGenerator()
var virtualNetworkGatewaySku_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkGatewaySku_STATUS_ARMGenerator returns a generator of VirtualNetworkGatewaySku_STATUS_ARM instances for property testing.
func VirtualNetworkGatewaySku_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_STATUS_ARMGenerator != nil {
		return virtualNetworkGatewaySku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_STATUS_ARM(generators)
	virtualNetworkGatewaySku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_STATUS_ARM{}), generators)

	return virtualNetworkGatewaySku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_STATUS_Basic,
		VirtualNetworkGatewaySku_Name_STATUS_ErGw1AZ,
		VirtualNetworkGatewaySku_Name_STATUS_ErGw2AZ,
		VirtualNetworkGatewaySku_Name_STATUS_ErGw3AZ,
		VirtualNetworkGatewaySku_Name_STATUS_HighPerformance,
		VirtualNetworkGatewaySku_Name_STATUS_Standard,
		VirtualNetworkGatewaySku_Name_STATUS_UltraPerformance,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw1,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw1AZ,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw2,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw2AZ,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw3,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw3AZ,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw4,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw4AZ,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw5,
		VirtualNetworkGatewaySku_Name_STATUS_VpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_STATUS_Basic,
		VirtualNetworkGatewaySku_Tier_STATUS_ErGw1AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_ErGw2AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_ErGw3AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_HighPerformance,
		VirtualNetworkGatewaySku_Tier_STATUS_Standard,
		VirtualNetworkGatewaySku_Tier_STATUS_UltraPerformance,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw1,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw2,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw3,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw4,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw5,
		VirtualNetworkGatewaySku_Tier_STATUS_VpnGw5AZ))
}

func Test_VirtualNetworkGateway_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_STATUS_ARM, VirtualNetworkGateway_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkGateway_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_STATUS_ARM(subject VirtualNetworkGateway_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_STATUS_ARMGenerator()
var virtualNetworkGateway_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkGateway_STATUS_ARMGenerator returns a generator of VirtualNetworkGateway_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkGateway_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_STATUS_ARMGenerator != nil {
		return virtualNetworkGateway_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM(generators)
	virtualNetworkGateway_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM(generators)
	virtualNetworkGateway_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_STATUS_ARM{}), generators)

	return virtualNetworkGateway_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormat_STATUS_ARMGenerator())
}

func Test_VpnClientConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_STATUS_ARM, VpnClientConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_STATUS_ARM runs a test to see if a specific instance of VpnClientConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_STATUS_ARM(subject VpnClientConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// VpnClientConfiguration_STATUS_ARMGenerator()
var vpnClientConfiguration_STATUS_ARMGenerator gopter.Gen

// VpnClientConfiguration_STATUS_ARMGenerator returns a generator of VpnClientConfiguration_STATUS_ARM instances for property testing.
// We first initialize vpnClientConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if vpnClientConfiguration_STATUS_ARMGenerator != nil {
		return vpnClientConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM(generators)
	vpnClientConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM(generators)
	vpnClientConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_STATUS_ARM{}), generators)

	return vpnClientConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypes_STATUS_AAD, VpnClientConfiguration_VpnAuthenticationTypes_STATUS_Certificate, VpnClientConfiguration_VpnAuthenticationTypes_STATUS_Radius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocols_STATUS_IkeV2, VpnClientConfiguration_VpnClientProtocols_STATUS_OpenVPN, VpnClientConfiguration_VpnClientProtocols_STATUS_SSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_STATUS_ARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_STATUS_ARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_STATUS_ARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_STATUS_ARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_STATUS_ARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_STATUS_ARM, VpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_STATUS_ARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_STATUS_ARM(subject VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM instances for property testing - lazily
// instantiated by VpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator()
var vpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_STATUS_ARM(generators)
	vpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_STATUS_ARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRevokedCertificate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_STATUS_ARM, VpnClientRevokedCertificate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_STATUS_ARM runs a test to see if a specific instance of VpnClientRevokedCertificate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_STATUS_ARM(subject VpnClientRevokedCertificate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_STATUS_ARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificate_STATUS_ARMGenerator()
var vpnClientRevokedCertificate_STATUS_ARMGenerator gopter.Gen

// VpnClientRevokedCertificate_STATUS_ARMGenerator returns a generator of VpnClientRevokedCertificate_STATUS_ARM instances for property testing.
// We first initialize vpnClientRevokedCertificate_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificate_STATUS_ARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_STATUS_ARMGenerator != nil {
		return vpnClientRevokedCertificate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM(generators)
	vpnClientRevokedCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM(generators)
	vpnClientRevokedCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_STATUS_ARM{}), generators)

	return vpnClientRevokedCertificate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormat_STATUS_ARMGenerator())
}

func Test_VpnClientRootCertificatePropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_STATUS_ARM, VpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_STATUS_ARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_STATUS_ARM(subject VpnClientRootCertificatePropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated
// by VpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator()
var vpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_STATUS_ARM instances for property testing.
func VpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_STATUS_ARM(generators)
	vpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_STATUS_ARM{}), generators)

	return vpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_STATUS_ARM, VpnClientRootCertificate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_STATUS_ARM runs a test to see if a specific instance of VpnClientRootCertificate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_STATUS_ARM(subject VpnClientRootCertificate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_STATUS_ARM instances for property testing - lazily instantiated by
// VpnClientRootCertificate_STATUS_ARMGenerator()
var vpnClientRootCertificate_STATUS_ARMGenerator gopter.Gen

// VpnClientRootCertificate_STATUS_ARMGenerator returns a generator of VpnClientRootCertificate_STATUS_ARM instances for property testing.
// We first initialize vpnClientRootCertificate_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificate_STATUS_ARMGenerator() gopter.Gen {
	if vpnClientRootCertificate_STATUS_ARMGenerator != nil {
		return vpnClientRootCertificate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM(generators)
	vpnClientRootCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM(generators)
	vpnClientRootCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_STATUS_ARM{}), generators)

	return vpnClientRootCertificate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormat_STATUS_ARMGenerator())
}
