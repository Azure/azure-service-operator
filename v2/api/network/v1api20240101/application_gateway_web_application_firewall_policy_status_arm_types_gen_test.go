// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM, ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM(subject ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator()
var applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator returns a generator of ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM instances for property testing.
// We first initialize applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator != nil {
		return applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM(generators)
	applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM(generators)
	applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM{}), generators)

	return applicationGatewayWebApplicationFirewallPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator())
}

func Test_ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM, ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM runs a test to see if a specific instance of ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM(subject ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM
// instances for property testing - lazily instantiated by
// ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator()
var applicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator gopter.Gen

// ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator returns a generator of ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM instances for property testing.
func ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if applicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator != nil {
		return applicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM(generators)
	applicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM{}), generators)

	return applicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExclusionManagedRuleGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExclusionManagedRuleGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExclusionManagedRuleGroup_STATUS_ARM, ExclusionManagedRuleGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExclusionManagedRuleGroup_STATUS_ARM runs a test to see if a specific instance of ExclusionManagedRuleGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExclusionManagedRuleGroup_STATUS_ARM(subject ExclusionManagedRuleGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExclusionManagedRuleGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExclusionManagedRuleGroup_STATUS_ARM instances for property testing - lazily instantiated by
// ExclusionManagedRuleGroup_STATUS_ARMGenerator()
var exclusionManagedRuleGroup_STATUS_ARMGenerator gopter.Gen

// ExclusionManagedRuleGroup_STATUS_ARMGenerator returns a generator of ExclusionManagedRuleGroup_STATUS_ARM instances for property testing.
// We first initialize exclusionManagedRuleGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ExclusionManagedRuleGroup_STATUS_ARMGenerator() gopter.Gen {
	if exclusionManagedRuleGroup_STATUS_ARMGenerator != nil {
		return exclusionManagedRuleGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM(generators)
	exclusionManagedRuleGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExclusionManagedRuleGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM(generators)
	exclusionManagedRuleGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExclusionManagedRuleGroup_STATUS_ARM{}), generators)

	return exclusionManagedRuleGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleGroupName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExclusionManagedRuleGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(ExclusionManagedRule_STATUS_ARMGenerator())
}

func Test_ExclusionManagedRuleSet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExclusionManagedRuleSet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExclusionManagedRuleSet_STATUS_ARM, ExclusionManagedRuleSet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExclusionManagedRuleSet_STATUS_ARM runs a test to see if a specific instance of ExclusionManagedRuleSet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExclusionManagedRuleSet_STATUS_ARM(subject ExclusionManagedRuleSet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExclusionManagedRuleSet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExclusionManagedRuleSet_STATUS_ARM instances for property testing - lazily instantiated by
// ExclusionManagedRuleSet_STATUS_ARMGenerator()
var exclusionManagedRuleSet_STATUS_ARMGenerator gopter.Gen

// ExclusionManagedRuleSet_STATUS_ARMGenerator returns a generator of ExclusionManagedRuleSet_STATUS_ARM instances for property testing.
// We first initialize exclusionManagedRuleSet_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ExclusionManagedRuleSet_STATUS_ARMGenerator() gopter.Gen {
	if exclusionManagedRuleSet_STATUS_ARMGenerator != nil {
		return exclusionManagedRuleSet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM(generators)
	exclusionManagedRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExclusionManagedRuleSet_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM(generators)
	exclusionManagedRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExclusionManagedRuleSet_STATUS_ARM{}), generators)

	return exclusionManagedRuleSet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleSetType"] = gen.PtrOf(gen.AlphaString())
	gens["RuleSetVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExclusionManagedRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleGroups"] = gen.SliceOf(ExclusionManagedRuleGroup_STATUS_ARMGenerator())
}

func Test_ExclusionManagedRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExclusionManagedRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExclusionManagedRule_STATUS_ARM, ExclusionManagedRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExclusionManagedRule_STATUS_ARM runs a test to see if a specific instance of ExclusionManagedRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExclusionManagedRule_STATUS_ARM(subject ExclusionManagedRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExclusionManagedRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExclusionManagedRule_STATUS_ARM instances for property testing - lazily instantiated by
// ExclusionManagedRule_STATUS_ARMGenerator()
var exclusionManagedRule_STATUS_ARMGenerator gopter.Gen

// ExclusionManagedRule_STATUS_ARMGenerator returns a generator of ExclusionManagedRule_STATUS_ARM instances for property testing.
func ExclusionManagedRule_STATUS_ARMGenerator() gopter.Gen {
	if exclusionManagedRule_STATUS_ARMGenerator != nil {
		return exclusionManagedRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExclusionManagedRule_STATUS_ARM(generators)
	exclusionManagedRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExclusionManagedRule_STATUS_ARM{}), generators)

	return exclusionManagedRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExclusionManagedRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExclusionManagedRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleId"] = gen.PtrOf(gen.AlphaString())
}

func Test_GroupByUserSession_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupByUserSession_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupByUserSession_STATUS_ARM, GroupByUserSession_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupByUserSession_STATUS_ARM runs a test to see if a specific instance of GroupByUserSession_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupByUserSession_STATUS_ARM(subject GroupByUserSession_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupByUserSession_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupByUserSession_STATUS_ARM instances for property testing - lazily instantiated by
// GroupByUserSession_STATUS_ARMGenerator()
var groupByUserSession_STATUS_ARMGenerator gopter.Gen

// GroupByUserSession_STATUS_ARMGenerator returns a generator of GroupByUserSession_STATUS_ARM instances for property testing.
func GroupByUserSession_STATUS_ARMGenerator() gopter.Gen {
	if groupByUserSession_STATUS_ARMGenerator != nil {
		return groupByUserSession_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForGroupByUserSession_STATUS_ARM(generators)
	groupByUserSession_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GroupByUserSession_STATUS_ARM{}), generators)

	return groupByUserSession_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForGroupByUserSession_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGroupByUserSession_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupByVariables"] = gen.SliceOf(GroupByVariable_STATUS_ARMGenerator())
}

func Test_GroupByVariable_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupByVariable_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupByVariable_STATUS_ARM, GroupByVariable_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupByVariable_STATUS_ARM runs a test to see if a specific instance of GroupByVariable_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupByVariable_STATUS_ARM(subject GroupByVariable_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupByVariable_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupByVariable_STATUS_ARM instances for property testing - lazily instantiated by
// GroupByVariable_STATUS_ARMGenerator()
var groupByVariable_STATUS_ARMGenerator gopter.Gen

// GroupByVariable_STATUS_ARMGenerator returns a generator of GroupByVariable_STATUS_ARM instances for property testing.
func GroupByVariable_STATUS_ARMGenerator() gopter.Gen {
	if groupByVariable_STATUS_ARMGenerator != nil {
		return groupByVariable_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupByVariable_STATUS_ARM(generators)
	groupByVariable_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GroupByVariable_STATUS_ARM{}), generators)

	return groupByVariable_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGroupByVariable_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGroupByVariable_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["VariableName"] = gen.PtrOf(gen.OneConstOf(GroupByVariable_VariableName_STATUS_ARM_ClientAddr, GroupByVariable_VariableName_STATUS_ARM_GeoLocation, GroupByVariable_VariableName_STATUS_ARM_None))
}

func Test_ManagedRuleGroupOverride_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedRuleGroupOverride_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedRuleGroupOverride_STATUS_ARM, ManagedRuleGroupOverride_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedRuleGroupOverride_STATUS_ARM runs a test to see if a specific instance of ManagedRuleGroupOverride_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedRuleGroupOverride_STATUS_ARM(subject ManagedRuleGroupOverride_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedRuleGroupOverride_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedRuleGroupOverride_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedRuleGroupOverride_STATUS_ARMGenerator()
var managedRuleGroupOverride_STATUS_ARMGenerator gopter.Gen

// ManagedRuleGroupOverride_STATUS_ARMGenerator returns a generator of ManagedRuleGroupOverride_STATUS_ARM instances for property testing.
// We first initialize managedRuleGroupOverride_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedRuleGroupOverride_STATUS_ARMGenerator() gopter.Gen {
	if managedRuleGroupOverride_STATUS_ARMGenerator != nil {
		return managedRuleGroupOverride_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM(generators)
	managedRuleGroupOverride_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedRuleGroupOverride_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM(generators)
	managedRuleGroupOverride_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedRuleGroupOverride_STATUS_ARM{}), generators)

	return managedRuleGroupOverride_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleGroupName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedRuleGroupOverride_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(ManagedRuleOverride_STATUS_ARMGenerator())
}

func Test_ManagedRuleOverride_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedRuleOverride_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedRuleOverride_STATUS_ARM, ManagedRuleOverride_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedRuleOverride_STATUS_ARM runs a test to see if a specific instance of ManagedRuleOverride_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedRuleOverride_STATUS_ARM(subject ManagedRuleOverride_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedRuleOverride_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedRuleOverride_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedRuleOverride_STATUS_ARMGenerator()
var managedRuleOverride_STATUS_ARMGenerator gopter.Gen

// ManagedRuleOverride_STATUS_ARMGenerator returns a generator of ManagedRuleOverride_STATUS_ARM instances for property testing.
func ManagedRuleOverride_STATUS_ARMGenerator() gopter.Gen {
	if managedRuleOverride_STATUS_ARMGenerator != nil {
		return managedRuleOverride_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedRuleOverride_STATUS_ARM(generators)
	managedRuleOverride_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedRuleOverride_STATUS_ARM{}), generators)

	return managedRuleOverride_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedRuleOverride_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedRuleOverride_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(
		ActionType_STATUS_ARM_Allow,
		ActionType_STATUS_ARM_AnomalyScoring,
		ActionType_STATUS_ARM_Block,
		ActionType_STATUS_ARM_JSChallenge,
		ActionType_STATUS_ARM_Log))
	gens["RuleId"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(ManagedRuleOverride_State_STATUS_ARM_Disabled, ManagedRuleOverride_State_STATUS_ARM_Enabled))
}

func Test_ManagedRuleSet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedRuleSet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedRuleSet_STATUS_ARM, ManagedRuleSet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedRuleSet_STATUS_ARM runs a test to see if a specific instance of ManagedRuleSet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedRuleSet_STATUS_ARM(subject ManagedRuleSet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedRuleSet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedRuleSet_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedRuleSet_STATUS_ARMGenerator()
var managedRuleSet_STATUS_ARMGenerator gopter.Gen

// ManagedRuleSet_STATUS_ARMGenerator returns a generator of ManagedRuleSet_STATUS_ARM instances for property testing.
// We first initialize managedRuleSet_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedRuleSet_STATUS_ARMGenerator() gopter.Gen {
	if managedRuleSet_STATUS_ARMGenerator != nil {
		return managedRuleSet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedRuleSet_STATUS_ARM(generators)
	managedRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedRuleSet_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedRuleSet_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedRuleSet_STATUS_ARM(generators)
	managedRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedRuleSet_STATUS_ARM{}), generators)

	return managedRuleSet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleSetType"] = gen.PtrOf(gen.AlphaString())
	gens["RuleSetVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleGroupOverrides"] = gen.SliceOf(ManagedRuleGroupOverride_STATUS_ARMGenerator())
}

func Test_ManagedRulesDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedRulesDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedRulesDefinition_STATUS_ARM, ManagedRulesDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedRulesDefinition_STATUS_ARM runs a test to see if a specific instance of ManagedRulesDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedRulesDefinition_STATUS_ARM(subject ManagedRulesDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedRulesDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedRulesDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedRulesDefinition_STATUS_ARMGenerator()
var managedRulesDefinition_STATUS_ARMGenerator gopter.Gen

// ManagedRulesDefinition_STATUS_ARMGenerator returns a generator of ManagedRulesDefinition_STATUS_ARM instances for property testing.
func ManagedRulesDefinition_STATUS_ARMGenerator() gopter.Gen {
	if managedRulesDefinition_STATUS_ARMGenerator != nil {
		return managedRulesDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedRulesDefinition_STATUS_ARM(generators)
	managedRulesDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedRulesDefinition_STATUS_ARM{}), generators)

	return managedRulesDefinition_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedRulesDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedRulesDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Exclusions"] = gen.SliceOf(OwaspCrsExclusionEntry_STATUS_ARMGenerator())
	gens["ManagedRuleSets"] = gen.SliceOf(ManagedRuleSet_STATUS_ARMGenerator())
}

func Test_MatchCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MatchCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMatchCondition_STATUS_ARM, MatchCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMatchCondition_STATUS_ARM runs a test to see if a specific instance of MatchCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMatchCondition_STATUS_ARM(subject MatchCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MatchCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MatchCondition_STATUS_ARM instances for property testing - lazily instantiated by
// MatchCondition_STATUS_ARMGenerator()
var matchCondition_STATUS_ARMGenerator gopter.Gen

// MatchCondition_STATUS_ARMGenerator returns a generator of MatchCondition_STATUS_ARM instances for property testing.
// We first initialize matchCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MatchCondition_STATUS_ARMGenerator() gopter.Gen {
	if matchCondition_STATUS_ARMGenerator != nil {
		return matchCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMatchCondition_STATUS_ARM(generators)
	matchCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MatchCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMatchCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMatchCondition_STATUS_ARM(generators)
	matchCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MatchCondition_STATUS_ARM{}), generators)

	return matchCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMatchCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMatchCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegationConditon"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		MatchCondition_Operator_STATUS_ARM_Any,
		MatchCondition_Operator_STATUS_ARM_BeginsWith,
		MatchCondition_Operator_STATUS_ARM_Contains,
		MatchCondition_Operator_STATUS_ARM_EndsWith,
		MatchCondition_Operator_STATUS_ARM_Equal,
		MatchCondition_Operator_STATUS_ARM_GeoMatch,
		MatchCondition_Operator_STATUS_ARM_GreaterThan,
		MatchCondition_Operator_STATUS_ARM_GreaterThanOrEqual,
		MatchCondition_Operator_STATUS_ARM_IPMatch,
		MatchCondition_Operator_STATUS_ARM_LessThan,
		MatchCondition_Operator_STATUS_ARM_LessThanOrEqual,
		MatchCondition_Operator_STATUS_ARM_Regex))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_HtmlEntityDecode,
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
}

// AddRelatedPropertyGeneratorsForMatchCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMatchCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchVariables"] = gen.SliceOf(MatchVariable_STATUS_ARMGenerator())
}

func Test_MatchVariable_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MatchVariable_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMatchVariable_STATUS_ARM, MatchVariable_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMatchVariable_STATUS_ARM runs a test to see if a specific instance of MatchVariable_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMatchVariable_STATUS_ARM(subject MatchVariable_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MatchVariable_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MatchVariable_STATUS_ARM instances for property testing - lazily instantiated by
// MatchVariable_STATUS_ARMGenerator()
var matchVariable_STATUS_ARMGenerator gopter.Gen

// MatchVariable_STATUS_ARMGenerator returns a generator of MatchVariable_STATUS_ARM instances for property testing.
func MatchVariable_STATUS_ARMGenerator() gopter.Gen {
	if matchVariable_STATUS_ARMGenerator != nil {
		return matchVariable_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMatchVariable_STATUS_ARM(generators)
	matchVariable_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MatchVariable_STATUS_ARM{}), generators)

	return matchVariable_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMatchVariable_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMatchVariable_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["VariableName"] = gen.PtrOf(gen.OneConstOf(
		MatchVariable_VariableName_STATUS_ARM_PostArgs,
		MatchVariable_VariableName_STATUS_ARM_QueryString,
		MatchVariable_VariableName_STATUS_ARM_RemoteAddr,
		MatchVariable_VariableName_STATUS_ARM_RequestBody,
		MatchVariable_VariableName_STATUS_ARM_RequestCookies,
		MatchVariable_VariableName_STATUS_ARM_RequestHeaders,
		MatchVariable_VariableName_STATUS_ARM_RequestMethod,
		MatchVariable_VariableName_STATUS_ARM_RequestUri))
}

func Test_OwaspCrsExclusionEntry_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OwaspCrsExclusionEntry_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOwaspCrsExclusionEntry_STATUS_ARM, OwaspCrsExclusionEntry_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOwaspCrsExclusionEntry_STATUS_ARM runs a test to see if a specific instance of OwaspCrsExclusionEntry_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOwaspCrsExclusionEntry_STATUS_ARM(subject OwaspCrsExclusionEntry_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OwaspCrsExclusionEntry_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OwaspCrsExclusionEntry_STATUS_ARM instances for property testing - lazily instantiated by
// OwaspCrsExclusionEntry_STATUS_ARMGenerator()
var owaspCrsExclusionEntry_STATUS_ARMGenerator gopter.Gen

// OwaspCrsExclusionEntry_STATUS_ARMGenerator returns a generator of OwaspCrsExclusionEntry_STATUS_ARM instances for property testing.
// We first initialize owaspCrsExclusionEntry_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OwaspCrsExclusionEntry_STATUS_ARMGenerator() gopter.Gen {
	if owaspCrsExclusionEntry_STATUS_ARMGenerator != nil {
		return owaspCrsExclusionEntry_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM(generators)
	owaspCrsExclusionEntry_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OwaspCrsExclusionEntry_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM(generators)
	owaspCrsExclusionEntry_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OwaspCrsExclusionEntry_STATUS_ARM{}), generators)

	return owaspCrsExclusionEntry_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchVariable"] = gen.PtrOf(gen.OneConstOf(
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestArgKeys,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestArgNames,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestArgValues,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestCookieKeys,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestCookieNames,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestCookieValues,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestHeaderKeys,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestHeaderNames,
		OwaspCrsExclusionEntry_MatchVariable_STATUS_ARM_RequestHeaderValues))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["SelectorMatchOperator"] = gen.PtrOf(gen.OneConstOf(
		OwaspCrsExclusionEntry_SelectorMatchOperator_STATUS_ARM_Contains,
		OwaspCrsExclusionEntry_SelectorMatchOperator_STATUS_ARM_EndsWith,
		OwaspCrsExclusionEntry_SelectorMatchOperator_STATUS_ARM_Equals,
		OwaspCrsExclusionEntry_SelectorMatchOperator_STATUS_ARM_EqualsAny,
		OwaspCrsExclusionEntry_SelectorMatchOperator_STATUS_ARM_StartsWith))
}

// AddRelatedPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOwaspCrsExclusionEntry_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExclusionManagedRuleSets"] = gen.SliceOf(ExclusionManagedRuleSet_STATUS_ARMGenerator())
}

func Test_PolicySettings_LogScrubbing_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicySettings_LogScrubbing_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicySettings_LogScrubbing_STATUS_ARM, PolicySettings_LogScrubbing_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicySettings_LogScrubbing_STATUS_ARM runs a test to see if a specific instance of PolicySettings_LogScrubbing_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicySettings_LogScrubbing_STATUS_ARM(subject PolicySettings_LogScrubbing_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicySettings_LogScrubbing_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicySettings_LogScrubbing_STATUS_ARM instances for property testing - lazily instantiated by
// PolicySettings_LogScrubbing_STATUS_ARMGenerator()
var policySettings_LogScrubbing_STATUS_ARMGenerator gopter.Gen

// PolicySettings_LogScrubbing_STATUS_ARMGenerator returns a generator of PolicySettings_LogScrubbing_STATUS_ARM instances for property testing.
// We first initialize policySettings_LogScrubbing_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PolicySettings_LogScrubbing_STATUS_ARMGenerator() gopter.Gen {
	if policySettings_LogScrubbing_STATUS_ARMGenerator != nil {
		return policySettings_LogScrubbing_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM(generators)
	policySettings_LogScrubbing_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicySettings_LogScrubbing_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM(generators)
	policySettings_LogScrubbing_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicySettings_LogScrubbing_STATUS_ARM{}), generators)

	return policySettings_LogScrubbing_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.OneConstOf(PolicySettings_LogScrubbing_State_STATUS_ARM_Disabled, PolicySettings_LogScrubbing_State_STATUS_ARM_Enabled))
}

// AddRelatedPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPolicySettings_LogScrubbing_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ScrubbingRules"] = gen.SliceOf(WebApplicationFirewallScrubbingRules_STATUS_ARMGenerator())
}

func Test_PolicySettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicySettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicySettings_STATUS_ARM, PolicySettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicySettings_STATUS_ARM runs a test to see if a specific instance of PolicySettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicySettings_STATUS_ARM(subject PolicySettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicySettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicySettings_STATUS_ARM instances for property testing - lazily instantiated by
// PolicySettings_STATUS_ARMGenerator()
var policySettings_STATUS_ARMGenerator gopter.Gen

// PolicySettings_STATUS_ARMGenerator returns a generator of PolicySettings_STATUS_ARM instances for property testing.
// We first initialize policySettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PolicySettings_STATUS_ARMGenerator() gopter.Gen {
	if policySettings_STATUS_ARMGenerator != nil {
		return policySettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicySettings_STATUS_ARM(generators)
	policySettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicySettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicySettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPolicySettings_STATUS_ARM(generators)
	policySettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicySettings_STATUS_ARM{}), generators)

	return policySettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPolicySettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPolicySettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomBlockResponseBody"] = gen.PtrOf(gen.AlphaString())
	gens["CustomBlockResponseStatusCode"] = gen.PtrOf(gen.Int())
	gens["FileUploadEnforcement"] = gen.PtrOf(gen.Bool())
	gens["FileUploadLimitInMb"] = gen.PtrOf(gen.Int())
	gens["JsChallengeCookieExpirationInMins"] = gen.PtrOf(gen.Int())
	gens["MaxRequestBodySizeInKb"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(PolicySettings_Mode_STATUS_ARM_Detection, PolicySettings_Mode_STATUS_ARM_Prevention))
	gens["RequestBodyCheck"] = gen.PtrOf(gen.Bool())
	gens["RequestBodyEnforcement"] = gen.PtrOf(gen.Bool())
	gens["RequestBodyInspectLimitInKB"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(PolicySettings_State_STATUS_ARM_Disabled, PolicySettings_State_STATUS_ARM_Enabled))
}

// AddRelatedPropertyGeneratorsForPolicySettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPolicySettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LogScrubbing"] = gen.PtrOf(PolicySettings_LogScrubbing_STATUS_ARMGenerator())
}

func Test_SubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_STATUS_ARM, SubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_STATUS_ARM runs a test to see if a specific instance of SubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_STATUS_ARM(subject SubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUS_ARM instances for property testing - lazily instantiated by
// SubResource_STATUS_ARMGenerator()
var subResource_STATUS_ARMGenerator gopter.Gen

// SubResource_STATUS_ARMGenerator returns a generator of SubResource_STATUS_ARM instances for property testing.
func SubResource_STATUS_ARMGenerator() gopter.Gen {
	if subResource_STATUS_ARMGenerator != nil {
		return subResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM(generators)
	subResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUS_ARM{}), generators)

	return subResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebApplicationFirewallCustomRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebApplicationFirewallCustomRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebApplicationFirewallCustomRule_STATUS_ARM, WebApplicationFirewallCustomRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebApplicationFirewallCustomRule_STATUS_ARM runs a test to see if a specific instance of WebApplicationFirewallCustomRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebApplicationFirewallCustomRule_STATUS_ARM(subject WebApplicationFirewallCustomRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebApplicationFirewallCustomRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebApplicationFirewallCustomRule_STATUS_ARM instances for property testing - lazily instantiated by
// WebApplicationFirewallCustomRule_STATUS_ARMGenerator()
var webApplicationFirewallCustomRule_STATUS_ARMGenerator gopter.Gen

// WebApplicationFirewallCustomRule_STATUS_ARMGenerator returns a generator of WebApplicationFirewallCustomRule_STATUS_ARM instances for property testing.
// We first initialize webApplicationFirewallCustomRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebApplicationFirewallCustomRule_STATUS_ARMGenerator() gopter.Gen {
	if webApplicationFirewallCustomRule_STATUS_ARMGenerator != nil {
		return webApplicationFirewallCustomRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM(generators)
	webApplicationFirewallCustomRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WebApplicationFirewallCustomRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM(generators)
	webApplicationFirewallCustomRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WebApplicationFirewallCustomRule_STATUS_ARM{}), generators)

	return webApplicationFirewallCustomRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(
		WebApplicationFirewallCustomRule_Action_STATUS_ARM_Allow,
		WebApplicationFirewallCustomRule_Action_STATUS_ARM_Block,
		WebApplicationFirewallCustomRule_Action_STATUS_ARM_JSChallenge,
		WebApplicationFirewallCustomRule_Action_STATUS_ARM_Log))
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["RateLimitDuration"] = gen.PtrOf(gen.OneConstOf(WebApplicationFirewallCustomRule_RateLimitDuration_STATUS_ARM_FiveMins, WebApplicationFirewallCustomRule_RateLimitDuration_STATUS_ARM_OneMin))
	gens["RateLimitThreshold"] = gen.PtrOf(gen.Int())
	gens["RuleType"] = gen.PtrOf(gen.OneConstOf(WebApplicationFirewallCustomRule_RuleType_STATUS_ARM_Invalid, WebApplicationFirewallCustomRule_RuleType_STATUS_ARM_MatchRule, WebApplicationFirewallCustomRule_RuleType_STATUS_ARM_RateLimitRule))
	gens["State"] = gen.PtrOf(gen.OneConstOf(WebApplicationFirewallCustomRule_State_STATUS_ARM_Disabled, WebApplicationFirewallCustomRule_State_STATUS_ARM_Enabled))
}

// AddRelatedPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebApplicationFirewallCustomRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupByUserSession"] = gen.SliceOf(GroupByUserSession_STATUS_ARMGenerator())
	gens["MatchConditions"] = gen.SliceOf(MatchCondition_STATUS_ARMGenerator())
}

func Test_WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM, WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM(subject WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM instances for property testing - lazily
// instantiated by WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator()
var webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator returns a generator of WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator != nil {
		return webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM(generators)
	webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM(generators)
	webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM{}), generators)

	return webApplicationFirewallPolicyPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_ARM_Deleting,
		ProvisioningState_STATUS_ARM_Failed,
		ProvisioningState_STATUS_ARM_Succeeded,
		ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		WebApplicationFirewallPolicyPropertiesFormat_ResourceState_STATUS_ARM_Creating,
		WebApplicationFirewallPolicyPropertiesFormat_ResourceState_STATUS_ARM_Deleting,
		WebApplicationFirewallPolicyPropertiesFormat_ResourceState_STATUS_ARM_Disabled,
		WebApplicationFirewallPolicyPropertiesFormat_ResourceState_STATUS_ARM_Disabling,
		WebApplicationFirewallPolicyPropertiesFormat_ResourceState_STATUS_ARM_Enabled,
		WebApplicationFirewallPolicyPropertiesFormat_ResourceState_STATUS_ARM_Enabling))
}

// AddRelatedPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebApplicationFirewallPolicyPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationGateways"] = gen.SliceOf(ApplicationGateway_STATUS_ApplicationGatewayWebApplicationFirewallPolicy_SubResourceEmbedded_ARMGenerator())
	gens["CustomRules"] = gen.SliceOf(WebApplicationFirewallCustomRule_STATUS_ARMGenerator())
	gens["HttpListeners"] = gen.SliceOf(SubResource_STATUS_ARMGenerator())
	gens["ManagedRules"] = gen.PtrOf(ManagedRulesDefinition_STATUS_ARMGenerator())
	gens["PathBasedRules"] = gen.SliceOf(SubResource_STATUS_ARMGenerator())
	gens["PolicySettings"] = gen.PtrOf(PolicySettings_STATUS_ARMGenerator())
}

func Test_WebApplicationFirewallScrubbingRules_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebApplicationFirewallScrubbingRules_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebApplicationFirewallScrubbingRules_STATUS_ARM, WebApplicationFirewallScrubbingRules_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebApplicationFirewallScrubbingRules_STATUS_ARM runs a test to see if a specific instance of WebApplicationFirewallScrubbingRules_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebApplicationFirewallScrubbingRules_STATUS_ARM(subject WebApplicationFirewallScrubbingRules_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebApplicationFirewallScrubbingRules_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebApplicationFirewallScrubbingRules_STATUS_ARM instances for property testing - lazily instantiated by
// WebApplicationFirewallScrubbingRules_STATUS_ARMGenerator()
var webApplicationFirewallScrubbingRules_STATUS_ARMGenerator gopter.Gen

// WebApplicationFirewallScrubbingRules_STATUS_ARMGenerator returns a generator of WebApplicationFirewallScrubbingRules_STATUS_ARM instances for property testing.
func WebApplicationFirewallScrubbingRules_STATUS_ARMGenerator() gopter.Gen {
	if webApplicationFirewallScrubbingRules_STATUS_ARMGenerator != nil {
		return webApplicationFirewallScrubbingRules_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebApplicationFirewallScrubbingRules_STATUS_ARM(generators)
	webApplicationFirewallScrubbingRules_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WebApplicationFirewallScrubbingRules_STATUS_ARM{}), generators)

	return webApplicationFirewallScrubbingRules_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWebApplicationFirewallScrubbingRules_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebApplicationFirewallScrubbingRules_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchVariable"] = gen.PtrOf(gen.OneConstOf(
		WebApplicationFirewallScrubbingRules_MatchVariable_STATUS_ARM_RequestArgNames,
		WebApplicationFirewallScrubbingRules_MatchVariable_STATUS_ARM_RequestCookieNames,
		WebApplicationFirewallScrubbingRules_MatchVariable_STATUS_ARM_RequestHeaderNames,
		WebApplicationFirewallScrubbingRules_MatchVariable_STATUS_ARM_RequestIPAddress,
		WebApplicationFirewallScrubbingRules_MatchVariable_STATUS_ARM_RequestJSONArgNames,
		WebApplicationFirewallScrubbingRules_MatchVariable_STATUS_ARM_RequestPostArgNames))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["SelectorMatchOperator"] = gen.PtrOf(gen.OneConstOf(WebApplicationFirewallScrubbingRules_SelectorMatchOperator_STATUS_ARM_Equals, WebApplicationFirewallScrubbingRules_SelectorMatchOperator_STATUS_ARM_EqualsAny))
	gens["State"] = gen.PtrOf(gen.OneConstOf(WebApplicationFirewallScrubbingRules_State_STATUS_ARM_Disabled, WebApplicationFirewallScrubbingRules_State_STATUS_ARM_Enabled))
}
