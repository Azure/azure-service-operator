// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTablesRoute_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablesRoute_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablesRoute_STATUSARM, RouteTablesRoute_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablesRoute_STATUSARM runs a test to see if a specific instance of RouteTablesRoute_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablesRoute_STATUSARM(subject RouteTablesRoute_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablesRoute_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablesRoute_STATUSARM instances for property testing - lazily instantiated by
// RouteTablesRoute_STATUSARMGenerator()
var routeTablesRoute_STATUSARMGenerator gopter.Gen

// RouteTablesRoute_STATUSARMGenerator returns a generator of RouteTablesRoute_STATUSARM instances for property testing.
// We first initialize routeTablesRoute_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablesRoute_STATUSARMGenerator() gopter.Gen {
	if routeTablesRoute_STATUSARMGenerator != nil {
		return routeTablesRoute_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesRoute_STATUSARM(generators)
	routeTablesRoute_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTablesRoute_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesRoute_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablesRoute_STATUSARM(generators)
	routeTablesRoute_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTablesRoute_STATUSARM{}), generators)

	return routeTablesRoute_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablesRoute_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablesRoute_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTablesRoute_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablesRoute_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoutePropertiesFormat_STATUSARMGenerator())
}

func Test_RoutePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutePropertiesFormat_STATUSARM, RoutePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutePropertiesFormat_STATUSARM runs a test to see if a specific instance of RoutePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutePropertiesFormat_STATUSARM(subject RoutePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// RoutePropertiesFormat_STATUSARMGenerator()
var routePropertiesFormat_STATUSARMGenerator gopter.Gen

// RoutePropertiesFormat_STATUSARMGenerator returns a generator of RoutePropertiesFormat_STATUSARM instances for property testing.
func RoutePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if routePropertiesFormat_STATUSARMGenerator != nil {
		return routePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutePropertiesFormat_STATUSARM(generators)
	routePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RoutePropertiesFormat_STATUSARM{}), generators)

	return routePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["HasBgpOverride"] = gen.PtrOf(gen.Bool())
	gens["NextHopIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["NextHopType"] = gen.PtrOf(gen.OneConstOf(
		RouteNextHopType_Internet_STATUS,
		RouteNextHopType_None_STATUS,
		RouteNextHopType_VirtualAppliance_STATUS,
		RouteNextHopType_VirtualNetworkGateway_STATUS,
		RouteNextHopType_VnetLocal_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}
