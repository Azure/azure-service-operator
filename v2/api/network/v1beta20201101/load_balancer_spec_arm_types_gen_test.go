// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_LoadBalancer_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancer_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_SpecARM, LoadBalancer_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_SpecARM runs a test to see if a specific instance of LoadBalancer_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_SpecARM(subject LoadBalancer_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancer_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancer_SpecARM instances for property testing - lazily instantiated by
// LoadBalancer_SpecARMGenerator()
var loadBalancer_SpecARMGenerator gopter.Gen

// LoadBalancer_SpecARMGenerator returns a generator of LoadBalancer_SpecARM instances for property testing.
// We first initialize loadBalancer_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_SpecARMGenerator() gopter.Gen {
	if loadBalancer_SpecARMGenerator != nil {
		return loadBalancer_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_SpecARM(generators)
	loadBalancer_SpecARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_SpecARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_SpecARM(generators)
	loadBalancer_SpecARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_SpecARM{}), generators)

	return loadBalancer_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_SpecARM(gens map[string]gopter.Gen) {
<<<<<<< HEAD
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
=======
>>>>>>> main
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
<<<<<<< HEAD
	gens["Properties"] = gen.PtrOf(LoadBalancerPropertiesFormatARMGenerator())
=======
	gens["Properties"] = gen.PtrOf(LoadBalancer_Spec_PropertiesARMGenerator())
>>>>>>> main
	gens["Sku"] = gen.PtrOf(LoadBalancerSkuARMGenerator())
}

func Test_ExtendedLocationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationARM, ExtendedLocationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationARM runs a test to see if a specific instance of ExtendedLocationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationARM(subject ExtendedLocationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocationARM instances for property testing - lazily instantiated by
// ExtendedLocationARMGenerator()
var extendedLocationARMGenerator gopter.Gen

// ExtendedLocationARMGenerator returns a generator of ExtendedLocationARM instances for property testing.
func ExtendedLocationARMGenerator() gopter.Gen {
	if extendedLocationARMGenerator != nil {
		return extendedLocationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationARM(generators)
	extendedLocationARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocationARM{}), generators)

	return extendedLocationARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_EdgeZone))
}

<<<<<<< HEAD
func Test_LoadBalancerPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
func Test_LoadBalancer_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of LoadBalancerPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerPropertiesFormatARM, LoadBalancerPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerPropertiesFormatARM runs a test to see if a specific instance of LoadBalancerPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerPropertiesFormatARM(subject LoadBalancerPropertiesFormatARM) string {
=======
		"Round trip of LoadBalancer_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_PropertiesARM, LoadBalancer_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_PropertiesARM runs a test to see if a specific instance of LoadBalancer_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_PropertiesARM(subject LoadBalancer_Spec_PropertiesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual LoadBalancerPropertiesFormatARM
=======
	var actual LoadBalancer_Spec_PropertiesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of LoadBalancerPropertiesFormatARM instances for property testing - lazily instantiated by
// LoadBalancerPropertiesFormatARMGenerator()
var loadBalancerPropertiesFormatARMGenerator gopter.Gen

// LoadBalancerPropertiesFormatARMGenerator returns a generator of LoadBalancerPropertiesFormatARM instances for property testing.
func LoadBalancerPropertiesFormatARMGenerator() gopter.Gen {
	if loadBalancerPropertiesFormatARMGenerator != nil {
		return loadBalancerPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLoadBalancerPropertiesFormatARM(generators)
	loadBalancerPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerPropertiesFormatARM{}), generators)

	return loadBalancerPropertiesFormatARMGenerator
}

// AddRelatedPropertyGeneratorsForLoadBalancerPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancerPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPools"] = gen.SliceOf(BackendAddressPoolARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(FrontendIPConfigurationARMGenerator())
	gens["InboundNatPools"] = gen.SliceOf(InboundNatPoolARMGenerator())
	gens["InboundNatRules"] = gen.SliceOf(InboundNatRuleARMGenerator())
	gens["LoadBalancingRules"] = gen.SliceOf(LoadBalancingRuleARMGenerator())
	gens["OutboundRules"] = gen.SliceOf(OutboundRuleARMGenerator())
	gens["Probes"] = gen.SliceOf(ProbeARMGenerator())
=======
// Generator of LoadBalancer_Spec_PropertiesARM instances for property testing - lazily instantiated by
// LoadBalancer_Spec_PropertiesARMGenerator()
var loadBalancer_Spec_PropertiesARMGenerator gopter.Gen

// LoadBalancer_Spec_PropertiesARMGenerator returns a generator of LoadBalancer_Spec_PropertiesARM instances for property testing.
func LoadBalancer_Spec_PropertiesARMGenerator() gopter.Gen {
	if loadBalancer_Spec_PropertiesARMGenerator != nil {
		return loadBalancer_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_PropertiesARM(generators)
	loadBalancer_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_PropertiesARM{}), generators)

	return loadBalancer_Spec_PropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPools"] = gen.SliceOf(LoadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(LoadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator())
	gens["InboundNatPools"] = gen.SliceOf(LoadBalancer_Spec_Properties_InboundNatPoolsARMGenerator())
	gens["LoadBalancingRules"] = gen.SliceOf(LoadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator())
	gens["OutboundRules"] = gen.SliceOf(LoadBalancer_Spec_Properties_OutboundRulesARMGenerator())
	gens["Probes"] = gen.SliceOf(LoadBalancer_Spec_Properties_ProbesARMGenerator())
>>>>>>> main
}

func Test_LoadBalancerSkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancerSkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerSkuARM, LoadBalancerSkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerSkuARM runs a test to see if a specific instance of LoadBalancerSkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerSkuARM(subject LoadBalancerSkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancerSkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancerSkuARM instances for property testing - lazily instantiated by LoadBalancerSkuARMGenerator()
var loadBalancerSkuARMGenerator gopter.Gen

// LoadBalancerSkuARMGenerator returns a generator of LoadBalancerSkuARM instances for property testing.
func LoadBalancerSkuARMGenerator() gopter.Gen {
	if loadBalancerSkuARMGenerator != nil {
		return loadBalancerSkuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerSkuARM(generators)
	loadBalancerSkuARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerSkuARM{}), generators)

	return loadBalancerSkuARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancerSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancerSkuARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LoadBalancerSku_Name_Basic, LoadBalancerSku_Name_Standard))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(LoadBalancerSku_Tier_Global, LoadBalancerSku_Tier_Regional))
}

<<<<<<< HEAD
func Test_BackendAddressPoolARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
func Test_LoadBalancer_Spec_Properties_BackendAddressPoolsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of BackendAddressPoolARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolARM, BackendAddressPoolARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolARM runs a test to see if a specific instance of BackendAddressPoolARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolARM(subject BackendAddressPoolARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_BackendAddressPoolsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPoolsARM, LoadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPoolsARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_BackendAddressPoolsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPoolsARM(subject LoadBalancer_Spec_Properties_BackendAddressPoolsARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual BackendAddressPoolARM
=======
	var actual LoadBalancer_Spec_Properties_BackendAddressPoolsARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of BackendAddressPoolARM instances for property testing - lazily instantiated by
// BackendAddressPoolARMGenerator()
var backendAddressPoolARMGenerator gopter.Gen

// BackendAddressPoolARMGenerator returns a generator of BackendAddressPoolARM instances for property testing.
// We first initialize backendAddressPoolARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendAddressPoolARMGenerator() gopter.Gen {
	if backendAddressPoolARMGenerator != nil {
		return backendAddressPoolARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolARM(generators)
	backendAddressPoolARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPoolARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolARM(generators)
	AddRelatedPropertyGeneratorsForBackendAddressPoolARM(generators)
	backendAddressPoolARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPoolARM{}), generators)

	return backendAddressPoolARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackendAddressPoolARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendAddressPoolARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BackendAddressPoolPropertiesFormatARMGenerator())
}

func Test_FrontendIPConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
// Generator of LoadBalancer_Spec_Properties_BackendAddressPoolsARM instances for property testing - lazily instantiated
// by LoadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator()
var loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator returns a generator of LoadBalancer_Spec_Properties_BackendAddressPoolsARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator != nil {
		return loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM(generators)
	loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_BackendAddressPoolsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM(generators)
	loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_BackendAddressPoolsARM{}), generators)

	return loadBalancer_Spec_Properties_BackendAddressPoolsARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPoolsARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator())
}

func Test_LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of FrontendIPConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationARM, FrontendIPConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationARM runs a test to see if a specific instance of FrontendIPConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationARM(subject FrontendIPConfigurationARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM, LoadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM(subject LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual FrontendIPConfigurationARM
=======
	var actual LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of FrontendIPConfigurationARM instances for property testing - lazily instantiated by
// FrontendIPConfigurationARMGenerator()
var frontendIPConfigurationARMGenerator gopter.Gen

// FrontendIPConfigurationARMGenerator returns a generator of FrontendIPConfigurationARM instances for property testing.
// We first initialize frontendIPConfigurationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationARMGenerator() gopter.Gen {
	if frontendIPConfigurationARMGenerator != nil {
		return frontendIPConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationARM(generators)
	frontendIPConfigurationARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationARM(generators)
	frontendIPConfigurationARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationARM{}), generators)

	return frontendIPConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
=======
// Generator of LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM instances for property testing - lazily
// instantiated by LoadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator()
var loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator returns a generator of LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator != nil {
		return loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM(generators)
	loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM(generators)
	loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_FrontendIPConfigurationsARM{}), generators)

	return loadBalancer_Spec_Properties_FrontendIPConfigurationsARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

<<<<<<< HEAD
// AddRelatedPropertyGeneratorsForFrontendIPConfigurationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontendIPConfigurationPropertiesFormatARMGenerator())
}

func Test_InboundNatPoolARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_FrontendIPConfigurationsARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontendIPConfigurationPropertiesFormatARMGenerator())
}

func Test_LoadBalancer_Spec_Properties_InboundNatPoolsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of InboundNatPoolARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatPoolARM, InboundNatPoolARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatPoolARM runs a test to see if a specific instance of InboundNatPoolARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatPoolARM(subject InboundNatPoolARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_InboundNatPoolsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_InboundNatPoolsARM, LoadBalancer_Spec_Properties_InboundNatPoolsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_InboundNatPoolsARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_InboundNatPoolsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_InboundNatPoolsARM(subject LoadBalancer_Spec_Properties_InboundNatPoolsARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual InboundNatPoolARM
=======
	var actual LoadBalancer_Spec_Properties_InboundNatPoolsARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of InboundNatPoolARM instances for property testing - lazily instantiated by InboundNatPoolARMGenerator()
var inboundNatPoolARMGenerator gopter.Gen

// InboundNatPoolARMGenerator returns a generator of InboundNatPoolARM instances for property testing.
// We first initialize inboundNatPoolARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InboundNatPoolARMGenerator() gopter.Gen {
	if inboundNatPoolARMGenerator != nil {
		return inboundNatPoolARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolARM(generators)
	inboundNatPoolARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPoolARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolARM(generators)
	AddRelatedPropertyGeneratorsForInboundNatPoolARM(generators)
	inboundNatPoolARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPoolARM{}), generators)

	return inboundNatPoolARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatPoolARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatPoolARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInboundNatPoolARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInboundNatPoolARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InboundNatPoolPropertiesFormatARMGenerator())
}

func Test_InboundNatRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
// Generator of LoadBalancer_Spec_Properties_InboundNatPoolsARM instances for property testing - lazily instantiated by
// LoadBalancer_Spec_Properties_InboundNatPoolsARMGenerator()
var loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_InboundNatPoolsARMGenerator returns a generator of LoadBalancer_Spec_Properties_InboundNatPoolsARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_InboundNatPoolsARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator != nil {
		return loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM(generators)
	loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_InboundNatPoolsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM(generators)
	loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_InboundNatPoolsARM{}), generators)

	return loadBalancer_Spec_Properties_InboundNatPoolsARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_InboundNatPoolsARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InboundNatPoolPropertiesFormatARMGenerator())
}

func Test_LoadBalancer_Spec_Properties_LoadBalancingRulesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of InboundNatRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleARM, InboundNatRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleARM runs a test to see if a specific instance of InboundNatRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleARM(subject InboundNatRuleARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_LoadBalancingRulesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_LoadBalancingRulesARM, LoadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_LoadBalancingRulesARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_LoadBalancingRulesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_LoadBalancingRulesARM(subject LoadBalancer_Spec_Properties_LoadBalancingRulesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual InboundNatRuleARM
=======
	var actual LoadBalancer_Spec_Properties_LoadBalancingRulesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of InboundNatRuleARM instances for property testing - lazily instantiated by InboundNatRuleARMGenerator()
var inboundNatRuleARMGenerator gopter.Gen

// InboundNatRuleARMGenerator returns a generator of InboundNatRuleARM instances for property testing.
// We first initialize inboundNatRuleARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InboundNatRuleARMGenerator() gopter.Gen {
	if inboundNatRuleARMGenerator != nil {
		return inboundNatRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleARM(generators)
	inboundNatRuleARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRuleARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleARM(generators)
	AddRelatedPropertyGeneratorsForInboundNatRuleARM(generators)
	inboundNatRuleARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRuleARM{}), generators)

	return inboundNatRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInboundNatRuleARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInboundNatRuleARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InboundNatRulePropertiesFormatARMGenerator())
}

func Test_LoadBalancingRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancingRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancingRuleARM, LoadBalancingRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancingRuleARM runs a test to see if a specific instance of LoadBalancingRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancingRuleARM(subject LoadBalancingRuleARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancingRuleARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancingRuleARM instances for property testing - lazily instantiated by
// LoadBalancingRuleARMGenerator()
var loadBalancingRuleARMGenerator gopter.Gen

// LoadBalancingRuleARMGenerator returns a generator of LoadBalancingRuleARM instances for property testing.
// We first initialize loadBalancingRuleARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancingRuleARMGenerator() gopter.Gen {
	if loadBalancingRuleARMGenerator != nil {
		return loadBalancingRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRuleARM(generators)
	loadBalancingRuleARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRuleARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRuleARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancingRuleARM(generators)
	loadBalancingRuleARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRuleARM{}), generators)

	return loadBalancingRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancingRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancingRuleARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancingRuleARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancingRuleARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(LoadBalancingRulePropertiesFormatARMGenerator())
}

func Test_OutboundRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
// Generator of LoadBalancer_Spec_Properties_LoadBalancingRulesARM instances for property testing - lazily instantiated
// by LoadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator()
var loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator returns a generator of LoadBalancer_Spec_Properties_LoadBalancingRulesARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator != nil {
		return loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM(generators)
	loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_LoadBalancingRulesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM(generators)
	loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_LoadBalancingRulesARM{}), generators)

	return loadBalancer_Spec_Properties_LoadBalancingRulesARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_LoadBalancingRulesARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(LoadBalancingRulePropertiesFormatARMGenerator())
}

func Test_LoadBalancer_Spec_Properties_OutboundRulesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of OutboundRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOutboundRuleARM, OutboundRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOutboundRuleARM runs a test to see if a specific instance of OutboundRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOutboundRuleARM(subject OutboundRuleARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_OutboundRulesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_OutboundRulesARM, LoadBalancer_Spec_Properties_OutboundRulesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_OutboundRulesARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_OutboundRulesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_OutboundRulesARM(subject LoadBalancer_Spec_Properties_OutboundRulesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual OutboundRuleARM
=======
	var actual LoadBalancer_Spec_Properties_OutboundRulesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of OutboundRuleARM instances for property testing - lazily instantiated by OutboundRuleARMGenerator()
var outboundRuleARMGenerator gopter.Gen

// OutboundRuleARMGenerator returns a generator of OutboundRuleARM instances for property testing.
// We first initialize outboundRuleARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OutboundRuleARMGenerator() gopter.Gen {
	if outboundRuleARMGenerator != nil {
		return outboundRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRuleARM(generators)
	outboundRuleARMGenerator = gen.Struct(reflect.TypeOf(OutboundRuleARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRuleARM(generators)
	AddRelatedPropertyGeneratorsForOutboundRuleARM(generators)
	outboundRuleARMGenerator = gen.Struct(reflect.TypeOf(OutboundRuleARM{}), generators)

	return outboundRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForOutboundRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOutboundRuleARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForOutboundRuleARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOutboundRuleARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(OutboundRulePropertiesFormatARMGenerator())
}

func Test_ProbeARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
// Generator of LoadBalancer_Spec_Properties_OutboundRulesARM instances for property testing - lazily instantiated by
// LoadBalancer_Spec_Properties_OutboundRulesARMGenerator()
var loadBalancer_Spec_Properties_OutboundRulesARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_OutboundRulesARMGenerator returns a generator of LoadBalancer_Spec_Properties_OutboundRulesARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_OutboundRulesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_OutboundRulesARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_OutboundRulesARMGenerator != nil {
		return loadBalancer_Spec_Properties_OutboundRulesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM(generators)
	loadBalancer_Spec_Properties_OutboundRulesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_OutboundRulesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM(generators)
	loadBalancer_Spec_Properties_OutboundRulesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_OutboundRulesARM{}), generators)

	return loadBalancer_Spec_Properties_OutboundRulesARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_OutboundRulesARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(OutboundRulePropertiesFormatARMGenerator())
}

func Test_LoadBalancer_Spec_Properties_ProbesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of ProbeARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProbeARM, ProbeARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProbeARM runs a test to see if a specific instance of ProbeARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProbeARM(subject ProbeARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_ProbesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_ProbesARM, LoadBalancer_Spec_Properties_ProbesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_ProbesARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_ProbesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_ProbesARM(subject LoadBalancer_Spec_Properties_ProbesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual ProbeARM
=======
	var actual LoadBalancer_Spec_Properties_ProbesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of ProbeARM instances for property testing - lazily instantiated by ProbeARMGenerator()
var probeARMGenerator gopter.Gen

// ProbeARMGenerator returns a generator of ProbeARM instances for property testing.
// We first initialize probeARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProbeARMGenerator() gopter.Gen {
	if probeARMGenerator != nil {
		return probeARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbeARM(generators)
	probeARMGenerator = gen.Struct(reflect.TypeOf(ProbeARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbeARM(generators)
	AddRelatedPropertyGeneratorsForProbeARM(generators)
	probeARMGenerator = gen.Struct(reflect.TypeOf(ProbeARM{}), generators)

	return probeARMGenerator
}

// AddIndependentPropertyGeneratorsForProbeARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProbeARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProbeARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProbeARM(gens map[string]gopter.Gen) {
=======
// Generator of LoadBalancer_Spec_Properties_ProbesARM instances for property testing - lazily instantiated by
// LoadBalancer_Spec_Properties_ProbesARMGenerator()
var loadBalancer_Spec_Properties_ProbesARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_ProbesARMGenerator returns a generator of LoadBalancer_Spec_Properties_ProbesARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_ProbesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_ProbesARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_ProbesARMGenerator != nil {
		return loadBalancer_Spec_Properties_ProbesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM(generators)
	loadBalancer_Spec_Properties_ProbesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_ProbesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM(generators)
	loadBalancer_Spec_Properties_ProbesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_ProbesARM{}), generators)

	return loadBalancer_Spec_Properties_ProbesARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_ProbesARM(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["Properties"] = gen.PtrOf(ProbePropertiesFormatARMGenerator())
}

func Test_BackendAddressPoolPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPoolPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolPropertiesFormatARM, BackendAddressPoolPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolPropertiesFormatARM runs a test to see if a specific instance of BackendAddressPoolPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolPropertiesFormatARM(subject BackendAddressPoolPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPoolPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPoolPropertiesFormatARM instances for property testing - lazily instantiated by
// BackendAddressPoolPropertiesFormatARMGenerator()
var backendAddressPoolPropertiesFormatARMGenerator gopter.Gen

// BackendAddressPoolPropertiesFormatARMGenerator returns a generator of BackendAddressPoolPropertiesFormatARM instances for property testing.
func BackendAddressPoolPropertiesFormatARMGenerator() gopter.Gen {
	if backendAddressPoolPropertiesFormatARMGenerator != nil {
		return backendAddressPoolPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBackendAddressPoolPropertiesFormatARM(generators)
	backendAddressPoolPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPoolPropertiesFormatARM{}), generators)

	return backendAddressPoolPropertiesFormatARMGenerator
}

// AddRelatedPropertyGeneratorsForBackendAddressPoolPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendAddressPoolPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerBackendAddresses"] = gen.SliceOf(LoadBalancerBackendAddressARMGenerator())
}

func Test_FrontendIPConfigurationPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfigurationPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatARM, FrontendIPConfigurationPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatARM runs a test to see if a specific instance of FrontendIPConfigurationPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatARM(subject FrontendIPConfigurationPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfigurationPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfigurationPropertiesFormatARM instances for property testing - lazily instantiated by
// FrontendIPConfigurationPropertiesFormatARMGenerator()
var frontendIPConfigurationPropertiesFormatARMGenerator gopter.Gen

// FrontendIPConfigurationPropertiesFormatARMGenerator returns a generator of FrontendIPConfigurationPropertiesFormatARM instances for property testing.
// We first initialize frontendIPConfigurationPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationPropertiesFormatARMGenerator() gopter.Gen {
	if frontendIPConfigurationPropertiesFormatARMGenerator != nil {
		return frontendIPConfigurationPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM(generators)
	frontendIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM(generators)
	frontendIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormatARM{}), generators)

	return frontendIPConfigurationPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_IPv4, IPVersion_IPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_Dynamic, IPAllocationMethod_Static))
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressSpecARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetARMGenerator())
}

func Test_InboundNatPoolPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatPoolPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatPoolPropertiesFormatARM, InboundNatPoolPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatPoolPropertiesFormatARM runs a test to see if a specific instance of InboundNatPoolPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatPoolPropertiesFormatARM(subject InboundNatPoolPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatPoolPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatPoolPropertiesFormatARM instances for property testing - lazily instantiated by
// InboundNatPoolPropertiesFormatARMGenerator()
var inboundNatPoolPropertiesFormatARMGenerator gopter.Gen

// InboundNatPoolPropertiesFormatARMGenerator returns a generator of InboundNatPoolPropertiesFormatARM instances for property testing.
// We first initialize inboundNatPoolPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InboundNatPoolPropertiesFormatARMGenerator() gopter.Gen {
	if inboundNatPoolPropertiesFormatARMGenerator != nil {
		return inboundNatPoolPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatARM(generators)
	inboundNatPoolPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPoolPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForInboundNatPoolPropertiesFormatARM(generators)
	inboundNatPoolPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPoolPropertiesFormatARM{}), generators)

	return inboundNatPoolPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BackendPort"] = gen.PtrOf(gen.Int())
	gens["EnableFloatingIP"] = gen.PtrOf(gen.Bool())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["FrontendPortRangeEnd"] = gen.PtrOf(gen.Int())
	gens["FrontendPortRangeStart"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(TransportProtocol_All, TransportProtocol_Tcp, TransportProtocol_Udp))
}

// AddRelatedPropertyGeneratorsForInboundNatPoolPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInboundNatPoolPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["FrontendIPConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
}

<<<<<<< HEAD
func Test_InboundNatRulePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
func Test_LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of InboundNatRulePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRulePropertiesFormatARM, InboundNatRulePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRulePropertiesFormatARM runs a test to see if a specific instance of InboundNatRulePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRulePropertiesFormatARM(subject InboundNatRulePropertiesFormatARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM, LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM(subject LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual InboundNatRulePropertiesFormatARM
=======
	var actual LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of InboundNatRulePropertiesFormatARM instances for property testing - lazily instantiated by
// InboundNatRulePropertiesFormatARMGenerator()
var inboundNatRulePropertiesFormatARMGenerator gopter.Gen

// InboundNatRulePropertiesFormatARMGenerator returns a generator of InboundNatRulePropertiesFormatARM instances for property testing.
// We first initialize inboundNatRulePropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InboundNatRulePropertiesFormatARMGenerator() gopter.Gen {
	if inboundNatRulePropertiesFormatARMGenerator != nil {
		return inboundNatRulePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRulePropertiesFormatARM(generators)
	inboundNatRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRulePropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRulePropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForInboundNatRulePropertiesFormatARM(generators)
	inboundNatRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRulePropertiesFormatARM{}), generators)

	return inboundNatRulePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRulePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BackendPort"] = gen.PtrOf(gen.Int())
	gens["EnableFloatingIP"] = gen.PtrOf(gen.Bool())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["FrontendPort"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(TransportProtocol_All, TransportProtocol_Tcp, TransportProtocol_Udp))
}

// AddRelatedPropertyGeneratorsForInboundNatRulePropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInboundNatRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["FrontendIPConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
=======
// Generator of LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM instances for property testing - lazily
// instantiated by LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator()
var loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator returns a generator of LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator != nil {
		return loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM(generators)
	loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM(generators)
	loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM{}), generators)

	return loadBalancer_Spec_Properties_BackendAddressPools_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_PropertiesARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerBackendAddresses"] = gen.SliceOf(LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator())
>>>>>>> main
}

func Test_LoadBalancingRulePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancingRulePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancingRulePropertiesFormatARM, LoadBalancingRulePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancingRulePropertiesFormatARM runs a test to see if a specific instance of LoadBalancingRulePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancingRulePropertiesFormatARM(subject LoadBalancingRulePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancingRulePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancingRulePropertiesFormatARM instances for property testing - lazily instantiated by
// LoadBalancingRulePropertiesFormatARMGenerator()
var loadBalancingRulePropertiesFormatARMGenerator gopter.Gen

// LoadBalancingRulePropertiesFormatARMGenerator returns a generator of LoadBalancingRulePropertiesFormatARM instances for property testing.
// We first initialize loadBalancingRulePropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancingRulePropertiesFormatARMGenerator() gopter.Gen {
	if loadBalancingRulePropertiesFormatARMGenerator != nil {
		return loadBalancingRulePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM(generators)
	loadBalancingRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRulePropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM(generators)
	loadBalancingRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRulePropertiesFormatARM{}), generators)

	return loadBalancingRulePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BackendPort"] = gen.PtrOf(gen.Int())
	gens["DisableOutboundSnat"] = gen.PtrOf(gen.Bool())
	gens["EnableFloatingIP"] = gen.PtrOf(gen.Bool())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["FrontendPort"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["LoadDistribution"] = gen.PtrOf(gen.OneConstOf(LoadBalancingRulePropertiesFormat_LoadDistribution_Default, LoadBalancingRulePropertiesFormat_LoadDistribution_SourceIP, LoadBalancingRulePropertiesFormat_LoadDistribution_SourceIPProtocol))
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(TransportProtocol_All, TransportProtocol_Tcp, TransportProtocol_Udp))
}

// AddRelatedPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancingRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPool"] = gen.PtrOf(SubResourceARMGenerator())
	gens["FrontendIPConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
	gens["Probe"] = gen.PtrOf(SubResourceARMGenerator())
}

func Test_OutboundRulePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OutboundRulePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOutboundRulePropertiesFormatARM, OutboundRulePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOutboundRulePropertiesFormatARM runs a test to see if a specific instance of OutboundRulePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOutboundRulePropertiesFormatARM(subject OutboundRulePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OutboundRulePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OutboundRulePropertiesFormatARM instances for property testing - lazily instantiated by
// OutboundRulePropertiesFormatARMGenerator()
var outboundRulePropertiesFormatARMGenerator gopter.Gen

// OutboundRulePropertiesFormatARMGenerator returns a generator of OutboundRulePropertiesFormatARM instances for property testing.
// We first initialize outboundRulePropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OutboundRulePropertiesFormatARMGenerator() gopter.Gen {
	if outboundRulePropertiesFormatARMGenerator != nil {
		return outboundRulePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatARM(generators)
	outboundRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(OutboundRulePropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForOutboundRulePropertiesFormatARM(generators)
	outboundRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(OutboundRulePropertiesFormatARM{}), generators)

	return outboundRulePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(OutboundRulePropertiesFormat_Protocol_All, OutboundRulePropertiesFormat_Protocol_Tcp, OutboundRulePropertiesFormat_Protocol_Udp))
}

// AddRelatedPropertyGeneratorsForOutboundRulePropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOutboundRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPool"] = gen.PtrOf(SubResourceARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(SubResourceARMGenerator())
}

func Test_ProbePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProbePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProbePropertiesFormatARM, ProbePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProbePropertiesFormatARM runs a test to see if a specific instance of ProbePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProbePropertiesFormatARM(subject ProbePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProbePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProbePropertiesFormatARM instances for property testing - lazily instantiated by
// ProbePropertiesFormatARMGenerator()
var probePropertiesFormatARMGenerator gopter.Gen

// ProbePropertiesFormatARMGenerator returns a generator of ProbePropertiesFormatARM instances for property testing.
func ProbePropertiesFormatARMGenerator() gopter.Gen {
	if probePropertiesFormatARMGenerator != nil {
		return probePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbePropertiesFormatARM(generators)
	probePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ProbePropertiesFormatARM{}), generators)

	return probePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForProbePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProbePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["NumberOfProbes"] = gen.PtrOf(gen.Int())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(ProbePropertiesFormat_Protocol_Http, ProbePropertiesFormat_Protocol_Https, ProbePropertiesFormat_Protocol_Tcp))
	gens["RequestPath"] = gen.PtrOf(gen.AlphaString())
}

<<<<<<< HEAD
func Test_LoadBalancerBackendAddressARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
func Test_LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of LoadBalancerBackendAddressARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerBackendAddressARM, LoadBalancerBackendAddressARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerBackendAddressARM runs a test to see if a specific instance of LoadBalancerBackendAddressARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerBackendAddressARM(subject LoadBalancerBackendAddressARM) string {
=======
		"Round trip of LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM, LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM runs a test to see if a specific instance of LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM(subject LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual LoadBalancerBackendAddressARM
=======
	var actual LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of LoadBalancerBackendAddressARM instances for property testing - lazily instantiated by
// LoadBalancerBackendAddressARMGenerator()
var loadBalancerBackendAddressARMGenerator gopter.Gen

// LoadBalancerBackendAddressARMGenerator returns a generator of LoadBalancerBackendAddressARM instances for property testing.
// We first initialize loadBalancerBackendAddressARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancerBackendAddressARMGenerator() gopter.Gen {
	if loadBalancerBackendAddressARMGenerator != nil {
		return loadBalancerBackendAddressARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressARM(generators)
	loadBalancerBackendAddressARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerBackendAddressARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancerBackendAddressARM(generators)
	loadBalancerBackendAddressARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerBackendAddressARM{}), generators)

	return loadBalancerBackendAddressARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancerBackendAddressARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancerBackendAddressARM(gens map[string]gopter.Gen) {
=======
// Generator of LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM instances
// for property testing - lazily instantiated by
// LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator()
var loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator gopter.Gen

// LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator returns a generator of LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM instances for property testing.
// We first initialize loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator() gopter.Gen {
	if loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator != nil {
		return loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM(generators)
	loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM(generators)
	loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM{}), generators)

	return loadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancer_Spec_Properties_BackendAddressPools_Properties_LoadBalancerBackendAddressesARM(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["Properties"] = gen.PtrOf(LoadBalancerBackendAddressPropertiesFormatARMGenerator())
}

func Test_PublicIPAddressSpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressSpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSpecARM, PublicIPAddressSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSpecARM runs a test to see if a specific instance of PublicIPAddressSpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSpecARM(subject PublicIPAddressSpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressSpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressSpecARM instances for property testing - lazily instantiated by
// PublicIPAddressSpecARMGenerator()
var publicIPAddressSpecARMGenerator gopter.Gen

// PublicIPAddressSpecARMGenerator returns a generator of PublicIPAddressSpecARM instances for property testing.
// We first initialize publicIPAddressSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressSpecARMGenerator() gopter.Gen {
	if publicIPAddressSpecARMGenerator != nil {
		return publicIPAddressSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSpecARM(generators)
	publicIPAddressSpecARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSpecARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressSpecARM(generators)
	publicIPAddressSpecARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSpecARM{}), generators)

	return publicIPAddressSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressSpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Properties"] = gen.PtrOf(PublicIPAddressPropertiesFormatARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuARMGenerator())
}

func Test_LoadBalancerBackendAddressPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancerBackendAddressPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerBackendAddressPropertiesFormatARM, LoadBalancerBackendAddressPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerBackendAddressPropertiesFormatARM runs a test to see if a specific instance of LoadBalancerBackendAddressPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerBackendAddressPropertiesFormatARM(subject LoadBalancerBackendAddressPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancerBackendAddressPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancerBackendAddressPropertiesFormatARM instances for property testing - lazily instantiated by
// LoadBalancerBackendAddressPropertiesFormatARMGenerator()
var loadBalancerBackendAddressPropertiesFormatARMGenerator gopter.Gen

// LoadBalancerBackendAddressPropertiesFormatARMGenerator returns a generator of LoadBalancerBackendAddressPropertiesFormatARM instances for property testing.
// We first initialize loadBalancerBackendAddressPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancerBackendAddressPropertiesFormatARMGenerator() gopter.Gen {
	if loadBalancerBackendAddressPropertiesFormatARMGenerator != nil {
		return loadBalancerBackendAddressPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM(generators)
	loadBalancerBackendAddressPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerBackendAddressPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM(generators)
	loadBalancerBackendAddressPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerBackendAddressPropertiesFormatARM{}), generators)

	return loadBalancerBackendAddressPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancerBackendAddressPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerFrontendIPConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResourceARMGenerator())
	gens["VirtualNetwork"] = gen.PtrOf(SubResourceARMGenerator())
}

func Test_PublicIPAddressPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressPropertiesFormatARM, PublicIPAddressPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressPropertiesFormatARM runs a test to see if a specific instance of PublicIPAddressPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressPropertiesFormatARM(subject PublicIPAddressPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressPropertiesFormatARM instances for property testing - lazily instantiated by
// PublicIPAddressPropertiesFormatARMGenerator()
var publicIPAddressPropertiesFormatARMGenerator gopter.Gen

// PublicIPAddressPropertiesFormatARMGenerator returns a generator of PublicIPAddressPropertiesFormatARM instances for property testing.
// We first initialize publicIPAddressPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressPropertiesFormatARMGenerator() gopter.Gen {
	if publicIPAddressPropertiesFormatARMGenerator != nil {
		return publicIPAddressPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormatARM(generators)
	publicIPAddressPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormatARM(generators)
	publicIPAddressPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressPropertiesFormatARM{}), generators)

	return publicIPAddressPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		PublicIPAddressPropertiesFormat_MigrationPhase_Abort,
		PublicIPAddressPropertiesFormat_MigrationPhase_Commit,
		PublicIPAddressPropertiesFormat_MigrationPhase_Committed,
		PublicIPAddressPropertiesFormat_MigrationPhase_None,
		PublicIPAddressPropertiesFormat_MigrationPhase_Prepare))
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_IPv4, IPVersion_IPv6))
	gens["PublicIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_Dynamic, IPAllocationMethod_Static))
}

// AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["DdosSettings"] = gen.PtrOf(DdosSettingsARMGenerator())
	gens["DnsSettings"] = gen.PtrOf(PublicIPAddressDnsSettingsARMGenerator())
	gens["IpTags"] = gen.SliceOf(IpTagARMGenerator())
	gens["LinkedPublicIPAddress"] = gen.PtrOf(PublicIPAddressSpecARMGenerator())
	gens["NatGateway"] = gen.PtrOf(NatGatewaySpecARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceARMGenerator())
	gens["ServicePublicIPAddress"] = gen.PtrOf(PublicIPAddressSpecARMGenerator())
}
