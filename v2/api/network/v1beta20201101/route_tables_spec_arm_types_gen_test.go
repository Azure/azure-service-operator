// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTables_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTables_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTables_SpecARM, RouteTables_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTables_SpecARM runs a test to see if a specific instance of RouteTables_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTables_SpecARM(subject RouteTables_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTables_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTables_SpecARM instances for property testing - lazily instantiated by
// RouteTables_SpecARMGenerator()
var routeTables_SpecARMGenerator gopter.Gen

// RouteTables_SpecARMGenerator returns a generator of RouteTables_SpecARM instances for property testing.
// We first initialize routeTables_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTables_SpecARMGenerator() gopter.Gen {
	if routeTables_SpecARMGenerator != nil {
		return routeTables_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_SpecARM(generators)
	routeTables_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTables_SpecARM(generators)
	routeTables_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_SpecARM{}), generators)

	return routeTables_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTables_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTables_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTables_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTables_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTables_Spec_PropertiesARMGenerator())
}

func Test_RouteTables_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTables_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTables_Spec_PropertiesARM, RouteTables_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTables_Spec_PropertiesARM runs a test to see if a specific instance of RouteTables_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTables_Spec_PropertiesARM(subject RouteTables_Spec_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTables_Spec_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTables_Spec_PropertiesARM instances for property testing - lazily instantiated by
// RouteTables_Spec_PropertiesARMGenerator()
var routeTables_Spec_PropertiesARMGenerator gopter.Gen

// RouteTables_Spec_PropertiesARMGenerator returns a generator of RouteTables_Spec_PropertiesARM instances for property testing.
// We first initialize routeTables_Spec_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTables_Spec_PropertiesARMGenerator() gopter.Gen {
	if routeTables_Spec_PropertiesARMGenerator != nil {
		return routeTables_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_Spec_PropertiesARM(generators)
	routeTables_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_Spec_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_Spec_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForRouteTables_Spec_PropertiesARM(generators)
	routeTables_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_Spec_PropertiesARM{}), generators)

	return routeTables_Spec_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTables_Spec_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTables_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForRouteTables_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTables_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["Routes"] = gen.SliceOf(RouteTables_Spec_Properties_RoutesARMGenerator())
}

func Test_RouteTables_Spec_Properties_RoutesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTables_Spec_Properties_RoutesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTables_Spec_Properties_RoutesARM, RouteTables_Spec_Properties_RoutesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTables_Spec_Properties_RoutesARM runs a test to see if a specific instance of RouteTables_Spec_Properties_RoutesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTables_Spec_Properties_RoutesARM(subject RouteTables_Spec_Properties_RoutesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTables_Spec_Properties_RoutesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTables_Spec_Properties_RoutesARM instances for property testing - lazily instantiated by
// RouteTables_Spec_Properties_RoutesARMGenerator()
var routeTables_Spec_Properties_RoutesARMGenerator gopter.Gen

// RouteTables_Spec_Properties_RoutesARMGenerator returns a generator of RouteTables_Spec_Properties_RoutesARM instances for property testing.
// We first initialize routeTables_Spec_Properties_RoutesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTables_Spec_Properties_RoutesARMGenerator() gopter.Gen {
	if routeTables_Spec_Properties_RoutesARMGenerator != nil {
		return routeTables_Spec_Properties_RoutesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM(generators)
	routeTables_Spec_Properties_RoutesARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_Spec_Properties_RoutesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM(generators)
	AddRelatedPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM(generators)
	routeTables_Spec_Properties_RoutesARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_Spec_Properties_RoutesARM{}), generators)

	return routeTables_Spec_Properties_RoutesARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTables_Spec_Properties_RoutesARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoutePropertiesFormatARMGenerator())
}
