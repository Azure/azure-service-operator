// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"fmt"
	v20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1beta20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworks_subnets
type VirtualNetworksSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworksSubnets_Spec                             `json:"spec,omitempty"`
	Status            Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworksSubnet{}

// GetConditions returns the conditions of the resource
func (subnet *VirtualNetworksSubnet) GetConditions() conditions.Conditions {
	return subnet.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subnet *VirtualNetworksSubnet) SetConditions(conditions conditions.Conditions) {
	subnet.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworksSubnet{}

// ConvertFrom populates our VirtualNetworksSubnet from the provided hub VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20201101s.VirtualNetworksSubnet)
	if !ok {
		return fmt.Errorf("expected network/v1beta20201101storage/VirtualNetworksSubnet but received %T instead", hub)
	}

	return subnet.AssignPropertiesFromVirtualNetworksSubnet(source)
}

// ConvertTo populates the provided hub VirtualNetworksSubnet from our VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20201101s.VirtualNetworksSubnet)
	if !ok {
		return fmt.Errorf("expected network/v1beta20201101storage/VirtualNetworksSubnet but received %T instead", hub)
	}

	return subnet.AssignPropertiesToVirtualNetworksSubnet(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1beta20201101-virtualnetworkssubnet,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkssubnets,verbs=create;update,versions=v1beta20201101,name=default.v1beta20201101.virtualnetworkssubnets.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &VirtualNetworksSubnet{}

// Default applies defaults to the VirtualNetworksSubnet resource
func (subnet *VirtualNetworksSubnet) Default() {
	subnet.defaultImpl()
	var temp interface{} = subnet
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (subnet *VirtualNetworksSubnet) defaultAzureName() {
	if subnet.Spec.AzureName == "" {
		subnet.Spec.AzureName = subnet.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworksSubnet resource
func (subnet *VirtualNetworksSubnet) defaultImpl() { subnet.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetworksSubnet{}

// AzureName returns the Azure name of the resource
func (subnet *VirtualNetworksSubnet) AzureName() string {
	return subnet.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (subnet VirtualNetworksSubnet) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (subnet *VirtualNetworksSubnet) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (subnet *VirtualNetworksSubnet) GetSpec() genruntime.ConvertibleSpec {
	return &subnet.Spec
}

// GetStatus returns the status of this resource
func (subnet *VirtualNetworksSubnet) GetStatus() genruntime.ConvertibleStatus {
	return &subnet.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworks/subnets"
func (subnet *VirtualNetworksSubnet) GetType() string {
	return "Microsoft.Network/virtualNetworks/subnets"
}

// NewEmptyStatus returns a new empty (blank) status
func (subnet *VirtualNetworksSubnet) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subnet *VirtualNetworksSubnet) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(subnet.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  subnet.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subnet *VirtualNetworksSubnet) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded); ok {
		subnet.Status = *st
		return nil
	}

	// Convert status to required version
	var st Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subnet.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1beta20201101-virtualnetworkssubnet,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkssubnets,verbs=create;update,versions=v1beta20201101,name=validate.v1beta20201101.virtualnetworkssubnets.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &VirtualNetworksSubnet{}

// ValidateCreate validates the creation of the resource
func (subnet *VirtualNetworksSubnet) ValidateCreate() error {
	validations := subnet.createValidations()
	var temp interface{} = subnet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (subnet *VirtualNetworksSubnet) ValidateDelete() error {
	validations := subnet.deleteValidations()
	var temp interface{} = subnet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (subnet *VirtualNetworksSubnet) ValidateUpdate(old runtime.Object) error {
	validations := subnet.updateValidations()
	var temp interface{} = subnet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (subnet *VirtualNetworksSubnet) createValidations() []func() error {
	return []func() error{subnet.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (subnet *VirtualNetworksSubnet) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (subnet *VirtualNetworksSubnet) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return subnet.validateResourceReferences()
		},
		subnet.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (subnet *VirtualNetworksSubnet) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&subnet.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (subnet *VirtualNetworksSubnet) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*VirtualNetworksSubnet)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, subnet)
}

// AssignPropertiesFromVirtualNetworksSubnet populates our VirtualNetworksSubnet from the provided source VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) AssignPropertiesFromVirtualNetworksSubnet(source *v20201101s.VirtualNetworksSubnet) error {

	// ObjectMeta
	subnet.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworksSubnets_Spec
	err := spec.AssignPropertiesFromVirtualNetworksSubnetsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworksSubnetsSpec() to populate field Spec")
	}
	subnet.Spec = spec

	// Status
	var status Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
	err = status.AssignPropertiesFromSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field Status")
	}
	subnet.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSubnet populates the provided destination VirtualNetworksSubnet from our VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) AssignPropertiesToVirtualNetworksSubnet(destination *v20201101s.VirtualNetworksSubnet) error {

	// ObjectMeta
	destination.ObjectMeta = *subnet.ObjectMeta.DeepCopy()

	// Spec
	var spec v20201101s.VirtualNetworksSubnets_Spec
	err := subnet.Spec.AssignPropertiesToVirtualNetworksSubnetsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworksSubnetsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
	err = subnet.Status.AssignPropertiesToSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subnet *VirtualNetworksSubnet) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subnet.Spec.OriginalVersion(),
		Kind:    "VirtualNetworksSubnet",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworks_subnets
type VirtualNetworksSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworksSubnet `json:"items"`
}

type Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// AddressPrefix: The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// AddressPrefixes: List of address prefixes for the subnet.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	// ApplicationGatewayIpConfigurations: Application gateway IP configurations of virtual network resource.
	ApplicationGatewayIpConfigurations []ApplicationGatewayIPConfiguration_STATUS `json:"applicationGatewayIpConfigurations,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Delegations: An array of references to the delegations on the subnet.
	Delegations []Delegation_STATUS `json:"delegations,omitempty"`

	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// IpAllocations: Array of IpAllocation which reference this subnet.
	IpAllocations []SubResource_STATUS `json:"ipAllocations,omitempty"`

	// IpConfigurationProfiles: Array of IP configuration profiles which reference this subnet.
	IpConfigurationProfiles []IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"ipConfigurationProfiles,omitempty"`

	// IpConfigurations: An array of references to the network interface IP configurations using subnet.
	IpConfigurations []IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"ipConfigurations,omitempty"`

	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// NatGateway: Nat gateway associated with this subnet.
	NatGateway *SubResource_STATUS `json:"natGateway,omitempty"`

	// NetworkSecurityGroup: The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"networkSecurityGroup,omitempty"`

	// PrivateEndpointNetworkPolicies: Enable or Disable apply network policies on private end point in the subnet.
	PrivateEndpointNetworkPolicies *SubnetPropertiesFormatSTATUSPrivateEndpointNetworkPolicies `json:"privateEndpointNetworkPolicies,omitempty"`

	// PrivateEndpoints: An array of references to private endpoints.
	PrivateEndpoints []PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"privateEndpoints,omitempty"`

	// PrivateLinkServiceNetworkPolicies: Enable or Disable apply network policies on private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *SubnetPropertiesFormatSTATUSPrivateLinkServiceNetworkPolicies `json:"privateLinkServiceNetworkPolicies,omitempty"`

	// ProvisioningState: The provisioning state of the subnet resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Purpose: A read-only string identifying the intention of use for this subnet based on delegations and other user-defined
	// properties.
	Purpose *string `json:"purpose,omitempty"`

	// ResourceNavigationLinks: An array of references to the external resources using subnet.
	ResourceNavigationLinks []ResourceNavigationLink_STATUS `json:"resourceNavigationLinks,omitempty"`

	// RouteTable: The reference to the RouteTable resource.
	RouteTable *RouteTable_STATUS_SubResourceEmbedded `json:"routeTable,omitempty"`

	// ServiceAssociationLinks: An array of references to services injecting into this subnet.
	ServiceAssociationLinks []ServiceAssociationLink_STATUS `json:"serviceAssociationLinks,omitempty"`

	// ServiceEndpointPolicies: An array of service endpoint policies.
	ServiceEndpointPolicies []ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"serviceEndpointPolicies,omitempty"`

	// ServiceEndpoints: An array of service endpoints.
	ServiceEndpoints []ServiceEndpointPropertiesFormat_STATUS `json:"serviceEndpoints,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// ConvertStatusFrom populates our Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return embedded.AssignPropertiesFromSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = embedded.AssignPropertiesFromSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return embedded.AssignPropertiesToSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}
	err := embedded.AssignPropertiesToSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘AddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressPrefix != nil {
			addressPrefix := *typedInput.Properties.AddressPrefix
			embedded.AddressPrefix = &addressPrefix
		}
	}

	// Set property ‘AddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AddressPrefixes {
			embedded.AddressPrefixes = append(embedded.AddressPrefixes, item)
		}
	}

	// Set property ‘ApplicationGatewayIpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ApplicationGatewayIpConfigurations {
			var item1 ApplicationGatewayIPConfiguration_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ApplicationGatewayIpConfigurations = append(embedded.ApplicationGatewayIpConfigurations, item1)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Delegations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Delegations {
			var item1 Delegation_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.Delegations = append(embedded.Delegations, item1)
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpAllocations = append(embedded.IpAllocations, item1)
		}
	}

	// Set property ‘IpConfigurationProfiles’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurationProfiles {
			var item1 IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpConfigurationProfiles = append(embedded.IpConfigurationProfiles, item1)
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpConfigurations = append(embedded.IpConfigurations, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 SubResource_STATUS
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			embedded.NatGateway = &natGateway
		}
	}

	// Set property ‘NetworkSecurityGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkSecurityGroup != nil {
			var networkSecurityGroup1 NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := networkSecurityGroup1.PopulateFromARM(owner, *typedInput.Properties.NetworkSecurityGroup)
			if err != nil {
				return err
			}
			networkSecurityGroup := networkSecurityGroup1
			embedded.NetworkSecurityGroup = &networkSecurityGroup
		}
	}

	// Set property ‘PrivateEndpointNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointNetworkPolicies != nil {
			privateEndpointNetworkPolicies := *typedInput.Properties.PrivateEndpointNetworkPolicies
			embedded.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
		}
	}

	// Set property ‘PrivateEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpoints {
			var item1 PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.PrivateEndpoints = append(embedded.PrivateEndpoints, item1)
		}
	}

	// Set property ‘PrivateLinkServiceNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceNetworkPolicies != nil {
			privateLinkServiceNetworkPolicies := *typedInput.Properties.PrivateLinkServiceNetworkPolicies
			embedded.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Purpose’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Purpose != nil {
			purpose := *typedInput.Properties.Purpose
			embedded.Purpose = &purpose
		}
	}

	// Set property ‘ResourceNavigationLinks’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ResourceNavigationLinks {
			var item1 ResourceNavigationLink_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ResourceNavigationLinks = append(embedded.ResourceNavigationLinks, item1)
		}
	}

	// Set property ‘RouteTable’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RouteTable != nil {
			var routeTable1 RouteTable_STATUS_SubResourceEmbedded
			err := routeTable1.PopulateFromARM(owner, *typedInput.Properties.RouteTable)
			if err != nil {
				return err
			}
			routeTable := routeTable1
			embedded.RouteTable = &routeTable
		}
	}

	// Set property ‘ServiceAssociationLinks’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceAssociationLinks {
			var item1 ServiceAssociationLink_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ServiceAssociationLinks = append(embedded.ServiceAssociationLinks, item1)
		}
	}

	// Set property ‘ServiceEndpointPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpointPolicies {
			var item1 ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ServiceEndpointPolicies = append(embedded.ServiceEndpointPolicies, item1)
		}
	}

	// Set property ‘ServiceEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpoints {
			var item1 ServiceEndpointPropertiesFormat_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ServiceEndpoints = append(embedded.ServiceEndpoints, item1)
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded populates our Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// AddressPrefix
	embedded.AddressPrefix = genruntime.ClonePointerToString(source.AddressPrefix)

	// AddressPrefixes
	embedded.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if source.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]ApplicationGatewayIPConfiguration_STATUS, len(source.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range source.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration ApplicationGatewayIPConfiguration_STATUS
			err := applicationGatewayIpConfiguration.AssignPropertiesFromApplicationGatewayIPConfigurationSTATUS(&applicationGatewayIpConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationGatewayIPConfigurationSTATUS() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		embedded.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		embedded.ApplicationGatewayIpConfigurations = nil
	}

	// Conditions
	embedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]Delegation_STATUS, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation Delegation_STATUS
			err := delegation.AssignPropertiesFromDelegationSTATUS(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDelegationSTATUS() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		embedded.Delegations = delegationList
	} else {
		embedded.Delegations = nil
	}

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource_STATUS, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource_STATUS
			err := ipAllocation.AssignPropertiesFromSubResourceSTATUS(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSTATUS() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		embedded.IpAllocations = ipAllocationList
	} else {
		embedded.IpAllocations = nil
	}

	// IpConfigurationProfiles
	if source.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(source.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range source.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
			var ipConfigurationProfile IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationProfile.AssignPropertiesFromIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded(&ipConfigurationProfileItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field IpConfigurationProfiles")
			}
			ipConfigurationProfileList[ipConfigurationProfileIndex] = ipConfigurationProfile
		}
		embedded.IpConfigurationProfiles = ipConfigurationProfileList
	} else {
		embedded.IpConfigurationProfiles = nil
	}

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfiguration.AssignPropertiesFromIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		embedded.IpConfigurations = ipConfigurationList
	} else {
		embedded.IpConfigurations = nil
	}

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource_STATUS
		err := natGateway.AssignPropertiesFromSubResourceSTATUS(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSTATUS() to populate field NatGateway")
		}
		embedded.NatGateway = &natGateway
	} else {
		embedded.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := networkSecurityGroup.AssignPropertiesFromNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field NetworkSecurityGroup")
		}
		embedded.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		embedded.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	if source.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicy := SubnetPropertiesFormatSTATUSPrivateEndpointNetworkPolicies(*source.PrivateEndpointNetworkPolicies)
		embedded.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicy
	} else {
		embedded.PrivateEndpointNetworkPolicies = nil
	}

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := privateEndpoint.AssignPropertiesFromPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		embedded.PrivateEndpoints = privateEndpointList
	} else {
		embedded.PrivateEndpoints = nil
	}

	// PrivateLinkServiceNetworkPolicies
	if source.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicy := SubnetPropertiesFormatSTATUSPrivateLinkServiceNetworkPolicies(*source.PrivateLinkServiceNetworkPolicies)
		embedded.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicy
	} else {
		embedded.PrivateLinkServiceNetworkPolicies = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		embedded.ProvisioningState = &provisioningState
	} else {
		embedded.ProvisioningState = nil
	}

	// Purpose
	embedded.Purpose = genruntime.ClonePointerToString(source.Purpose)

	// ResourceNavigationLinks
	if source.ResourceNavigationLinks != nil {
		resourceNavigationLinkList := make([]ResourceNavigationLink_STATUS, len(source.ResourceNavigationLinks))
		for resourceNavigationLinkIndex, resourceNavigationLinkItem := range source.ResourceNavigationLinks {
			// Shadow the loop variable to avoid aliasing
			resourceNavigationLinkItem := resourceNavigationLinkItem
			var resourceNavigationLink ResourceNavigationLink_STATUS
			err := resourceNavigationLink.AssignPropertiesFromResourceNavigationLinkSTATUS(&resourceNavigationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceNavigationLinkSTATUS() to populate field ResourceNavigationLinks")
			}
			resourceNavigationLinkList[resourceNavigationLinkIndex] = resourceNavigationLink
		}
		embedded.ResourceNavigationLinks = resourceNavigationLinkList
	} else {
		embedded.ResourceNavigationLinks = nil
	}

	// RouteTable
	if source.RouteTable != nil {
		var routeTable RouteTable_STATUS_SubResourceEmbedded
		err := routeTable.AssignPropertiesFromRouteTableSTATUSSubResourceEmbedded(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRouteTableSTATUSSubResourceEmbedded() to populate field RouteTable")
		}
		embedded.RouteTable = &routeTable
	} else {
		embedded.RouteTable = nil
	}

	// ServiceAssociationLinks
	if source.ServiceAssociationLinks != nil {
		serviceAssociationLinkList := make([]ServiceAssociationLink_STATUS, len(source.ServiceAssociationLinks))
		for serviceAssociationLinkIndex, serviceAssociationLinkItem := range source.ServiceAssociationLinks {
			// Shadow the loop variable to avoid aliasing
			serviceAssociationLinkItem := serviceAssociationLinkItem
			var serviceAssociationLink ServiceAssociationLink_STATUS
			err := serviceAssociationLink.AssignPropertiesFromServiceAssociationLinkSTATUS(&serviceAssociationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceAssociationLinkSTATUS() to populate field ServiceAssociationLinks")
			}
			serviceAssociationLinkList[serviceAssociationLinkIndex] = serviceAssociationLink
		}
		embedded.ServiceAssociationLinks = serviceAssociationLinkList
	} else {
		embedded.ServiceAssociationLinks = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicy.AssignPropertiesFromServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		embedded.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		embedded.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat_STATUS, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat_STATUS
			err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormatSTATUS(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPropertiesFormatSTATUS() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		embedded.ServiceEndpoints = serviceEndpointList
	} else {
		embedded.ServiceEndpoints = nil
	}

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToSubnetSTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefix
	destination.AddressPrefix = genruntime.ClonePointerToString(embedded.AddressPrefix)

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(embedded.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if embedded.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]v20201101s.ApplicationGatewayIPConfiguration_STATUS, len(embedded.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range embedded.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration v20201101s.ApplicationGatewayIPConfiguration_STATUS
			err := applicationGatewayIpConfigurationItem.AssignPropertiesToApplicationGatewayIPConfigurationSTATUS(&applicationGatewayIpConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationGatewayIPConfigurationSTATUS() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		destination.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		destination.ApplicationGatewayIpConfigurations = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(embedded.Conditions)

	// Delegations
	if embedded.Delegations != nil {
		delegationList := make([]v20201101s.Delegation_STATUS, len(embedded.Delegations))
		for delegationIndex, delegationItem := range embedded.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation v20201101s.Delegation_STATUS
			err := delegationItem.AssignPropertiesToDelegationSTATUS(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDelegationSTATUS() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		destination.Delegations = delegationList
	} else {
		destination.Delegations = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// IpAllocations
	if embedded.IpAllocations != nil {
		ipAllocationList := make([]v20201101s.SubResource_STATUS, len(embedded.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range embedded.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v20201101s.SubResource_STATUS
			err := ipAllocationItem.AssignPropertiesToSubResourceSTATUS(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResourceSTATUS() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// IpConfigurationProfiles
	if embedded.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range embedded.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
			var ipConfigurationProfile v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationProfileItem.AssignPropertiesToIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded(&ipConfigurationProfile)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field IpConfigurationProfiles")
			}
			ipConfigurationProfileList[ipConfigurationProfileIndex] = ipConfigurationProfile
		}
		destination.IpConfigurationProfiles = ipConfigurationProfileList
	} else {
		destination.IpConfigurationProfiles = nil
	}

	// IpConfigurations
	if embedded.IpConfigurations != nil {
		ipConfigurationList := make([]v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range embedded.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationItem.AssignPropertiesToIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// NatGateway
	if embedded.NatGateway != nil {
		var natGateway v20201101s.SubResource_STATUS
		err := embedded.NatGateway.AssignPropertiesToSubResourceSTATUS(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSTATUS() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if embedded.NetworkSecurityGroup != nil {
		var networkSecurityGroup v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.NetworkSecurityGroup.AssignPropertiesToNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field NetworkSecurityGroup")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	if embedded.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicy := string(*embedded.PrivateEndpointNetworkPolicies)
		destination.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicy
	} else {
		destination.PrivateEndpointNetworkPolicies = nil
	}

	// PrivateEndpoints
	if embedded.PrivateEndpoints != nil {
		privateEndpointList := make([]v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range embedded.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := privateEndpointItem.AssignPropertiesToPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PrivateLinkServiceNetworkPolicies
	if embedded.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicy := string(*embedded.PrivateLinkServiceNetworkPolicies)
		destination.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicy
	} else {
		destination.PrivateLinkServiceNetworkPolicies = nil
	}

	// ProvisioningState
	if embedded.ProvisioningState != nil {
		provisioningState := string(*embedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Purpose
	destination.Purpose = genruntime.ClonePointerToString(embedded.Purpose)

	// ResourceNavigationLinks
	if embedded.ResourceNavigationLinks != nil {
		resourceNavigationLinkList := make([]v20201101s.ResourceNavigationLink_STATUS, len(embedded.ResourceNavigationLinks))
		for resourceNavigationLinkIndex, resourceNavigationLinkItem := range embedded.ResourceNavigationLinks {
			// Shadow the loop variable to avoid aliasing
			resourceNavigationLinkItem := resourceNavigationLinkItem
			var resourceNavigationLink v20201101s.ResourceNavigationLink_STATUS
			err := resourceNavigationLinkItem.AssignPropertiesToResourceNavigationLinkSTATUS(&resourceNavigationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceNavigationLinkSTATUS() to populate field ResourceNavigationLinks")
			}
			resourceNavigationLinkList[resourceNavigationLinkIndex] = resourceNavigationLink
		}
		destination.ResourceNavigationLinks = resourceNavigationLinkList
	} else {
		destination.ResourceNavigationLinks = nil
	}

	// RouteTable
	if embedded.RouteTable != nil {
		var routeTable v20201101s.RouteTable_STATUS_SubResourceEmbedded
		err := embedded.RouteTable.AssignPropertiesToRouteTableSTATUSSubResourceEmbedded(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRouteTableSTATUSSubResourceEmbedded() to populate field RouteTable")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceAssociationLinks
	if embedded.ServiceAssociationLinks != nil {
		serviceAssociationLinkList := make([]v20201101s.ServiceAssociationLink_STATUS, len(embedded.ServiceAssociationLinks))
		for serviceAssociationLinkIndex, serviceAssociationLinkItem := range embedded.ServiceAssociationLinks {
			// Shadow the loop variable to avoid aliasing
			serviceAssociationLinkItem := serviceAssociationLinkItem
			var serviceAssociationLink v20201101s.ServiceAssociationLink_STATUS
			err := serviceAssociationLinkItem.AssignPropertiesToServiceAssociationLinkSTATUS(&serviceAssociationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceAssociationLinkSTATUS() to populate field ServiceAssociationLinks")
			}
			serviceAssociationLinkList[serviceAssociationLinkIndex] = serviceAssociationLink
		}
		destination.ServiceAssociationLinks = serviceAssociationLinkList
	} else {
		destination.ServiceAssociationLinks = nil
	}

	// ServiceEndpointPolicies
	if embedded.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range embedded.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyItem.AssignPropertiesToServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if embedded.ServiceEndpoints != nil {
		serviceEndpointList := make([]v20201101s.ServiceEndpointPropertiesFormat_STATUS, len(embedded.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range embedded.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v20201101s.ServiceEndpointPropertiesFormat_STATUS
			err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormatSTATUS(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPropertiesFormatSTATUS() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworksSubnets_Spec struct {
	// +kubebuilder:validation:Required
	// AddressPrefix: The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// AddressPrefixes: List of address prefixes for the subnet.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Delegations: An array of references to the delegations on the subnet.
	Delegations []VirtualNetworksSubnets_Spec_Properties_Delegations `json:"delegations,omitempty"`

	// IpAllocations: Array of IpAllocation which reference this subnet.
	IpAllocations []SubResource `json:"ipAllocations,omitempty"`

	// NatGateway: Nat gateway associated with this subnet.
	NatGateway *SubResource `json:"natGateway,omitempty"`

	// NetworkSecurityGroup: The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *SubResource `json:"networkSecurityGroup,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/VirtualNetwork resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"VirtualNetwork"`

	// PrivateEndpointNetworkPolicies: Enable or Disable apply network policies on private end point in the subnet.
	PrivateEndpointNetworkPolicies *string `json:"privateEndpointNetworkPolicies,omitempty"`

	// PrivateLinkServiceNetworkPolicies: Enable or Disable apply network policies on private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *string `json:"privateLinkServiceNetworkPolicies,omitempty"`

	// RouteTable: The reference to the RouteTable resource.
	RouteTable *SubResource `json:"routeTable,omitempty"`

	// ServiceEndpointPolicies: An array of service endpoint policies.
	ServiceEndpointPolicies []SubResource `json:"serviceEndpointPolicies,omitempty"`

	// ServiceEndpoints: An array of service endpoints.
	ServiceEndpoints []ServiceEndpointPropertiesFormat `json:"serviceEndpoints,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworksSubnets_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (subnets *VirtualNetworksSubnets_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if subnets == nil {
		return nil, nil
	}
	result := &VirtualNetworksSubnets_SpecARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if subnets.AddressPrefix != nil ||
		subnets.AddressPrefixes != nil ||
		subnets.Delegations != nil ||
		subnets.IpAllocations != nil ||
		subnets.NatGateway != nil ||
		subnets.NetworkSecurityGroup != nil ||
		subnets.PrivateEndpointNetworkPolicies != nil ||
		subnets.PrivateLinkServiceNetworkPolicies != nil ||
		subnets.RouteTable != nil ||
		subnets.ServiceEndpointPolicies != nil ||
		subnets.ServiceEndpoints != nil {
		result.Properties = &VirtualNetworksSubnets_Spec_PropertiesARM{}
	}
	if subnets.AddressPrefix != nil {
		addressPrefix := *subnets.AddressPrefix
		result.Properties.AddressPrefix = &addressPrefix
	}
	for _, item := range subnets.AddressPrefixes {
		result.Properties.AddressPrefixes = append(result.Properties.AddressPrefixes, item)
	}
	for _, item := range subnets.Delegations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Delegations = append(result.Properties.Delegations, *itemARM.(*VirtualNetworksSubnets_Spec_Properties_DelegationsARM))
	}
	for _, item := range subnets.IpAllocations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpAllocations = append(result.Properties.IpAllocations, *itemARM.(*SubResourceARM))
	}
	if subnets.NatGateway != nil {
		natGatewayARM, err := (*subnets.NatGateway).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		natGateway := *natGatewayARM.(*SubResourceARM)
		result.Properties.NatGateway = &natGateway
	}
	if subnets.NetworkSecurityGroup != nil {
		networkSecurityGroupARM, err := (*subnets.NetworkSecurityGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkSecurityGroup := *networkSecurityGroupARM.(*SubResourceARM)
		result.Properties.NetworkSecurityGroup = &networkSecurityGroup
	}
	if subnets.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicies := *subnets.PrivateEndpointNetworkPolicies
		result.Properties.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
	}
	if subnets.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicies := *subnets.PrivateLinkServiceNetworkPolicies
		result.Properties.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
	}
	if subnets.RouteTable != nil {
		routeTableARM, err := (*subnets.RouteTable).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		routeTable := *routeTableARM.(*SubResourceARM)
		result.Properties.RouteTable = &routeTable
	}
	for _, item := range subnets.ServiceEndpointPolicies {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpointPolicies = append(result.Properties.ServiceEndpointPolicies, *itemARM.(*SubResourceARM))
	}
	for _, item := range subnets.ServiceEndpoints {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpoints = append(result.Properties.ServiceEndpoints, *itemARM.(*ServiceEndpointPropertiesFormatARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subnets *VirtualNetworksSubnets_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworksSubnets_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subnets *VirtualNetworksSubnets_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworksSubnets_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworksSubnets_SpecARM, got %T", armInput)
	}

	// Set property ‘AddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressPrefix != nil {
			addressPrefix := *typedInput.Properties.AddressPrefix
			subnets.AddressPrefix = &addressPrefix
		}
	}

	// Set property ‘AddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AddressPrefixes {
			subnets.AddressPrefixes = append(subnets.AddressPrefixes, item)
		}
	}

	// Set property ‘AzureName’:
	subnets.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Delegations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Delegations {
			var item1 VirtualNetworksSubnets_Spec_Properties_Delegations
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnets.Delegations = append(subnets.Delegations, item1)
		}
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnets.IpAllocations = append(subnets.IpAllocations, item1)
		}
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 SubResource
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			subnets.NatGateway = &natGateway
		}
	}

	// Set property ‘NetworkSecurityGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkSecurityGroup != nil {
			var networkSecurityGroup1 SubResource
			err := networkSecurityGroup1.PopulateFromARM(owner, *typedInput.Properties.NetworkSecurityGroup)
			if err != nil {
				return err
			}
			networkSecurityGroup := networkSecurityGroup1
			subnets.NetworkSecurityGroup = &networkSecurityGroup
		}
	}

	// Set property ‘Owner’:
	subnets.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PrivateEndpointNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointNetworkPolicies != nil {
			privateEndpointNetworkPolicies := *typedInput.Properties.PrivateEndpointNetworkPolicies
			subnets.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
		}
	}

	// Set property ‘PrivateLinkServiceNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceNetworkPolicies != nil {
			privateLinkServiceNetworkPolicies := *typedInput.Properties.PrivateLinkServiceNetworkPolicies
			subnets.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
		}
	}

	// Set property ‘RouteTable’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RouteTable != nil {
			var routeTable1 SubResource
			err := routeTable1.PopulateFromARM(owner, *typedInput.Properties.RouteTable)
			if err != nil {
				return err
			}
			routeTable := routeTable1
			subnets.RouteTable = &routeTable
		}
	}

	// Set property ‘ServiceEndpointPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpointPolicies {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnets.ServiceEndpointPolicies = append(subnets.ServiceEndpointPolicies, item1)
		}
	}

	// Set property ‘ServiceEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpoints {
			var item1 ServiceEndpointPropertiesFormat
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnets.ServiceEndpoints = append(subnets.ServiceEndpoints, item1)
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworksSubnets_Spec{}

// ConvertSpecFrom populates our VirtualNetworksSubnets_Spec from the provided source
func (subnets *VirtualNetworksSubnets_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20201101s.VirtualNetworksSubnets_Spec)
	if ok {
		// Populate our instance from source
		return subnets.AssignPropertiesFromVirtualNetworksSubnetsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.VirtualNetworksSubnets_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subnets.AssignPropertiesFromVirtualNetworksSubnetsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworksSubnets_Spec
func (subnets *VirtualNetworksSubnets_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20201101s.VirtualNetworksSubnets_Spec)
	if ok {
		// Populate destination from our instance
		return subnets.AssignPropertiesToVirtualNetworksSubnetsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.VirtualNetworksSubnets_Spec{}
	err := subnets.AssignPropertiesToVirtualNetworksSubnetsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworksSubnetsSpec populates our VirtualNetworksSubnets_Spec from the provided source VirtualNetworksSubnets_Spec
func (subnets *VirtualNetworksSubnets_Spec) AssignPropertiesFromVirtualNetworksSubnetsSpec(source *v20201101s.VirtualNetworksSubnets_Spec) error {

	// AddressPrefix
	subnets.AddressPrefix = genruntime.ClonePointerToString(source.AddressPrefix)

	// AddressPrefixes
	subnets.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// AzureName
	subnets.AzureName = source.AzureName

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]VirtualNetworksSubnets_Spec_Properties_Delegations, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation VirtualNetworksSubnets_Spec_Properties_Delegations
			err := delegation.AssignPropertiesFromVirtualNetworksSubnetsSpecPropertiesDelegations(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworksSubnetsSpecPropertiesDelegations() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		subnets.Delegations = delegationList
	} else {
		subnets.Delegations = nil
	}

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource
			err := ipAllocation.AssignPropertiesFromSubResource(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		subnets.IpAllocations = ipAllocationList
	} else {
		subnets.IpAllocations = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource
		err := natGateway.AssignPropertiesFromSubResource(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field NatGateway")
		}
		subnets.NatGateway = &natGateway
	} else {
		subnets.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup SubResource
		err := networkSecurityGroup.AssignPropertiesFromSubResource(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field NetworkSecurityGroup")
		}
		subnets.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		subnets.NetworkSecurityGroup = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		subnets.Owner = &owner
	} else {
		subnets.Owner = nil
	}

	// PrivateEndpointNetworkPolicies
	subnets.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(source.PrivateEndpointNetworkPolicies)

	// PrivateLinkServiceNetworkPolicies
	subnets.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(source.PrivateLinkServiceNetworkPolicies)

	// RouteTable
	if source.RouteTable != nil {
		var routeTable SubResource
		err := routeTable.AssignPropertiesFromSubResource(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field RouteTable")
		}
		subnets.RouteTable = &routeTable
	} else {
		subnets.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]SubResource, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy SubResource
			err := serviceEndpointPolicy.AssignPropertiesFromSubResource(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		subnets.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		subnets.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat
			err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormat(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		subnets.ServiceEndpoints = serviceEndpointList
	} else {
		subnets.ServiceEndpoints = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSubnetsSpec populates the provided destination VirtualNetworksSubnets_Spec from our VirtualNetworksSubnets_Spec
func (subnets *VirtualNetworksSubnets_Spec) AssignPropertiesToVirtualNetworksSubnetsSpec(destination *v20201101s.VirtualNetworksSubnets_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefix
	destination.AddressPrefix = genruntime.ClonePointerToString(subnets.AddressPrefix)

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(subnets.AddressPrefixes)

	// AzureName
	destination.AzureName = subnets.AzureName

	// Delegations
	if subnets.Delegations != nil {
		delegationList := make([]v20201101s.VirtualNetworksSubnets_Spec_Properties_Delegations, len(subnets.Delegations))
		for delegationIndex, delegationItem := range subnets.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation v20201101s.VirtualNetworksSubnets_Spec_Properties_Delegations
			err := delegationItem.AssignPropertiesToVirtualNetworksSubnetsSpecPropertiesDelegations(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworksSubnetsSpecPropertiesDelegations() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		destination.Delegations = delegationList
	} else {
		destination.Delegations = nil
	}

	// IpAllocations
	if subnets.IpAllocations != nil {
		ipAllocationList := make([]v20201101s.SubResource, len(subnets.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range subnets.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v20201101s.SubResource
			err := ipAllocationItem.AssignPropertiesToSubResource(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// NatGateway
	if subnets.NatGateway != nil {
		var natGateway v20201101s.SubResource
		err := subnets.NatGateway.AssignPropertiesToSubResource(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if subnets.NetworkSecurityGroup != nil {
		var networkSecurityGroup v20201101s.SubResource
		err := subnets.NetworkSecurityGroup.AssignPropertiesToSubResource(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field NetworkSecurityGroup")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// OriginalVersion
	destination.OriginalVersion = subnets.OriginalVersion()

	// Owner
	if subnets.Owner != nil {
		owner := subnets.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrivateEndpointNetworkPolicies
	destination.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(subnets.PrivateEndpointNetworkPolicies)

	// PrivateLinkServiceNetworkPolicies
	destination.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(subnets.PrivateLinkServiceNetworkPolicies)

	// RouteTable
	if subnets.RouteTable != nil {
		var routeTable v20201101s.SubResource
		err := subnets.RouteTable.AssignPropertiesToSubResource(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field RouteTable")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if subnets.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v20201101s.SubResource, len(subnets.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range subnets.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v20201101s.SubResource
			err := serviceEndpointPolicyItem.AssignPropertiesToSubResource(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if subnets.ServiceEndpoints != nil {
		serviceEndpointList := make([]v20201101s.ServiceEndpointPropertiesFormat, len(subnets.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range subnets.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v20201101s.ServiceEndpointPropertiesFormat
			err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormat(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (subnets *VirtualNetworksSubnets_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (subnets *VirtualNetworksSubnets_Spec) SetAzureName(azureName string) {
	subnets.AzureName = azureName
}

type ApplicationGatewayIPConfiguration_STATUS struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: Name of the IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the application gateway IP configuration resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Subnet: Reference to the subnet resource. A subnet from where application gateway gets its private address.
	Subnet *SubResource_STATUS `json:"subnet,omitempty"`

	// Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ApplicationGatewayIPConfiguration_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *ApplicationGatewayIPConfiguration_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApplicationGatewayIPConfiguration_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *ApplicationGatewayIPConfiguration_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApplicationGatewayIPConfiguration_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApplicationGatewayIPConfiguration_STATUSARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		configuration.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		configuration.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			configuration.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_STATUS
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		configuration.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromApplicationGatewayIPConfigurationSTATUS populates our ApplicationGatewayIPConfiguration_STATUS from the provided source ApplicationGatewayIPConfiguration_STATUS
func (configuration *ApplicationGatewayIPConfiguration_STATUS) AssignPropertiesFromApplicationGatewayIPConfigurationSTATUS(source *v20201101s.ApplicationGatewayIPConfiguration_STATUS) error {

	// Etag
	configuration.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		configuration.ProvisioningState = &provisioningState
	} else {
		configuration.ProvisioningState = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_STATUS
		err := subnet.AssignPropertiesFromSubResourceSTATUS(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSTATUS() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// Type
	configuration.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToApplicationGatewayIPConfigurationSTATUS populates the provided destination ApplicationGatewayIPConfiguration_STATUS from our ApplicationGatewayIPConfiguration_STATUS
func (configuration *ApplicationGatewayIPConfiguration_STATUS) AssignPropertiesToApplicationGatewayIPConfigurationSTATUS(destination *v20201101s.ApplicationGatewayIPConfiguration_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(configuration.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// ProvisioningState
	if configuration.ProvisioningState != nil {
		provisioningState := string(*configuration.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Subnet
	if configuration.Subnet != nil {
		var subnet v20201101s.SubResource_STATUS
		err := configuration.Subnet.AssignPropertiesToSubResourceSTATUS(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSTATUS() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(configuration.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Delegation_STATUS struct {
	// Actions: The actions permitted to the service upon delegation.
	Actions []string `json:"actions,omitempty"`

	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource that is unique within a subnet. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the service delegation resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// ServiceName: The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
	ServiceName *string `json:"serviceName,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &Delegation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (delegation *Delegation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Delegation_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (delegation *Delegation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Delegation_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Delegation_STATUSARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Actions {
			delegation.Actions = append(delegation.Actions, item)
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		delegation.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		delegation.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		delegation.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			delegation.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ServiceName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceName != nil {
			serviceName := *typedInput.Properties.ServiceName
			delegation.ServiceName = &serviceName
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		delegation.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromDelegationSTATUS populates our Delegation_STATUS from the provided source Delegation_STATUS
func (delegation *Delegation_STATUS) AssignPropertiesFromDelegationSTATUS(source *v20201101s.Delegation_STATUS) error {

	// Actions
	delegation.Actions = genruntime.CloneSliceOfString(source.Actions)

	// Etag
	delegation.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	delegation.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	delegation.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		delegation.ProvisioningState = &provisioningState
	} else {
		delegation.ProvisioningState = nil
	}

	// ServiceName
	delegation.ServiceName = genruntime.ClonePointerToString(source.ServiceName)

	// Type
	delegation.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToDelegationSTATUS populates the provided destination Delegation_STATUS from our Delegation_STATUS
func (delegation *Delegation_STATUS) AssignPropertiesToDelegationSTATUS(destination *v20201101s.Delegation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	destination.Actions = genruntime.CloneSliceOfString(delegation.Actions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(delegation.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(delegation.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(delegation.Name)

	// ProvisioningState
	if delegation.ProvisioningState != nil {
		provisioningState := string(*delegation.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ServiceName
	destination.ServiceName = genruntime.ClonePointerToString(delegation.ServiceName)

	// Type
	destination.Type = genruntime.ClonePointerToString(delegation.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// PrivateIPAddress: The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_STATUS `json:"privateIPAllocationMethod,omitempty"`

	// ProvisioningState: The provisioning state of the IP configuration resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"publicIPAddress,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			embedded.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			embedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			embedded.PublicIPAddress = &publicIPAddress
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded populates our IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	embedded.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_STATUS(*source.PrivateIPAllocationMethod)
		embedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		embedded.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		embedded.ProvisioningState = &provisioningState
	} else {
		embedded.ProvisioningState = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := publicIPAddress.AssignPropertiesFromPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field PublicIPAddress")
		}
		embedded.PublicIPAddress = &publicIPAddress
	} else {
		embedded.PublicIPAddress = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(embedded.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if embedded.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*embedded.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if embedded.ProvisioningState != nil {
		provisioningState := string(*embedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddress
	if embedded.PublicIPAddress != nil {
		var publicIPAddress v20201101s.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.PublicIPAddress.AssignPropertiesToPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the IP configuration profile resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Type: Sub Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded populates our IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		embedded.ProvisioningState = &provisioningState
	} else {
		embedded.ProvisioningState = nil
	}

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// ProvisioningState
	if embedded.ProvisioningState != nil {
		provisioningState := string(*embedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded populates our NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// ExtendedLocation: The extended location of the load balancer.
	ExtendedLocation *ExtendedLocation_STATUS `json:"extendedLocation,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded populates our PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocationSTATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v20201101s.ExtendedLocation_STATUS
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocationSTATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceNavigationLink_STATUS struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource navigation link identifier.
	Id *string `json:"id,omitempty"`

	// Link: Link to the external resource.
	Link *string `json:"link,omitempty"`

	// LinkedResourceType: Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`

	// Name: Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the resource navigation link resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceNavigationLink_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *ResourceNavigationLink_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceNavigationLink_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *ResourceNavigationLink_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceNavigationLink_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceNavigationLink_STATUSARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		link.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		link.Id = &id
	}

	// Set property ‘Link’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Link != nil {
			link1 := *typedInput.Properties.Link
			link.Link = &link1
		}
	}

	// Set property ‘LinkedResourceType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkedResourceType != nil {
			linkedResourceType := *typedInput.Properties.LinkedResourceType
			link.LinkedResourceType = &linkedResourceType
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		link.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			link.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		link.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceNavigationLinkSTATUS populates our ResourceNavigationLink_STATUS from the provided source ResourceNavigationLink_STATUS
func (link *ResourceNavigationLink_STATUS) AssignPropertiesFromResourceNavigationLinkSTATUS(source *v20201101s.ResourceNavigationLink_STATUS) error {

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Link
	link.Link = genruntime.ClonePointerToString(source.Link)

	// LinkedResourceType
	link.LinkedResourceType = genruntime.ClonePointerToString(source.LinkedResourceType)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		link.ProvisioningState = &provisioningState
	} else {
		link.ProvisioningState = nil
	}

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToResourceNavigationLinkSTATUS populates the provided destination ResourceNavigationLink_STATUS from our ResourceNavigationLink_STATUS
func (link *ResourceNavigationLink_STATUS) AssignPropertiesToResourceNavigationLinkSTATUS(destination *v20201101s.ResourceNavigationLink_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Link
	destination.Link = genruntime.ClonePointerToString(link.Link)

	// LinkedResourceType
	destination.LinkedResourceType = genruntime.ClonePointerToString(link.LinkedResourceType)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	if link.ProvisioningState != nil {
		provisioningState := string(*link.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RouteTable_STATUS_SubResourceEmbedded struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &RouteTable_STATUS_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *RouteTable_STATUS_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RouteTable_STATUS_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *RouteTable_STATUS_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RouteTable_STATUS_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RouteTable_STATUS_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromRouteTableSTATUSSubResourceEmbedded populates our RouteTable_STATUS_SubResourceEmbedded from the provided source RouteTable_STATUS_SubResourceEmbedded
func (embedded *RouteTable_STATUS_SubResourceEmbedded) AssignPropertiesFromRouteTableSTATUSSubResourceEmbedded(source *v20201101s.RouteTable_STATUS_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToRouteTableSTATUSSubResourceEmbedded populates the provided destination RouteTable_STATUS_SubResourceEmbedded from our RouteTable_STATUS_SubResourceEmbedded
func (embedded *RouteTable_STATUS_SubResourceEmbedded) AssignPropertiesToRouteTableSTATUSSubResourceEmbedded(destination *v20201101s.RouteTable_STATUS_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceAssociationLink_STATUS struct {
	// AllowDelete: If true, the resource can be deleted.
	AllowDelete *bool `json:"allowDelete,omitempty"`

	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Link: Link to the external resource.
	Link *string `json:"link,omitempty"`

	// LinkedResourceType: Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`

	// Locations: A list of locations.
	Locations []string `json:"locations,omitempty"`

	// Name: Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the service association link resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ServiceAssociationLink_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *ServiceAssociationLink_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceAssociationLink_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *ServiceAssociationLink_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceAssociationLink_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceAssociationLink_STATUSARM, got %T", armInput)
	}

	// Set property ‘AllowDelete’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowDelete != nil {
			allowDelete := *typedInput.Properties.AllowDelete
			link.AllowDelete = &allowDelete
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		link.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		link.Id = &id
	}

	// Set property ‘Link’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Link != nil {
			link1 := *typedInput.Properties.Link
			link.Link = &link1
		}
	}

	// Set property ‘LinkedResourceType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkedResourceType != nil {
			linkedResourceType := *typedInput.Properties.LinkedResourceType
			link.LinkedResourceType = &linkedResourceType
		}
	}

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			link.Locations = append(link.Locations, item)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		link.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			link.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		link.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceAssociationLinkSTATUS populates our ServiceAssociationLink_STATUS from the provided source ServiceAssociationLink_STATUS
func (link *ServiceAssociationLink_STATUS) AssignPropertiesFromServiceAssociationLinkSTATUS(source *v20201101s.ServiceAssociationLink_STATUS) error {

	// AllowDelete
	if source.AllowDelete != nil {
		allowDelete := *source.AllowDelete
		link.AllowDelete = &allowDelete
	} else {
		link.AllowDelete = nil
	}

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Link
	link.Link = genruntime.ClonePointerToString(source.Link)

	// LinkedResourceType
	link.LinkedResourceType = genruntime.ClonePointerToString(source.LinkedResourceType)

	// Locations
	link.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		link.ProvisioningState = &provisioningState
	} else {
		link.ProvisioningState = nil
	}

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToServiceAssociationLinkSTATUS populates the provided destination ServiceAssociationLink_STATUS from our ServiceAssociationLink_STATUS
func (link *ServiceAssociationLink_STATUS) AssignPropertiesToServiceAssociationLinkSTATUS(destination *v20201101s.ServiceAssociationLink_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowDelete
	if link.AllowDelete != nil {
		allowDelete := *link.AllowDelete
		destination.AllowDelete = &allowDelete
	} else {
		destination.AllowDelete = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Link
	destination.Link = genruntime.ClonePointerToString(link.Link)

	// LinkedResourceType
	destination.LinkedResourceType = genruntime.ClonePointerToString(link.LinkedResourceType)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(link.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	if link.ProvisioningState != nil {
		provisioningState := string(*link.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Kind: Kind of service endpoint policy. This is metadata used for the Azure portal experience.
	Kind *string `json:"kind,omitempty"`
}

var _ genruntime.FromARMConverter = &ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		embedded.Kind = &kind
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded populates our ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	embedded.Kind = genruntime.ClonePointerToString(source.Kind)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(embedded.Kind)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/ServiceEndpointPropertiesFormat
type ServiceEndpointPropertiesFormat struct {
	// Locations: A list of locations.
	Locations []string `json:"locations,omitempty"`

	// Service: The type of the endpoint service.
	Service *string `json:"service,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceEndpointPropertiesFormat{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (format *ServiceEndpointPropertiesFormat) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if format == nil {
		return nil, nil
	}
	result := &ServiceEndpointPropertiesFormatARM{}

	// Set property ‘Locations’:
	for _, item := range format.Locations {
		result.Locations = append(result.Locations, item)
	}

	// Set property ‘Service’:
	if format.Service != nil {
		service := *format.Service
		result.Service = &service
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (format *ServiceEndpointPropertiesFormat) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPropertiesFormatARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (format *ServiceEndpointPropertiesFormat) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPropertiesFormatARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPropertiesFormatARM, got %T", armInput)
	}

	// Set property ‘Locations’:
	for _, item := range typedInput.Locations {
		format.Locations = append(format.Locations, item)
	}

	// Set property ‘Service’:
	if typedInput.Service != nil {
		service := *typedInput.Service
		format.Service = &service
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPropertiesFormat populates our ServiceEndpointPropertiesFormat from the provided source ServiceEndpointPropertiesFormat
func (format *ServiceEndpointPropertiesFormat) AssignPropertiesFromServiceEndpointPropertiesFormat(source *v20201101s.ServiceEndpointPropertiesFormat) error {

	// Locations
	format.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Service
	format.Service = genruntime.ClonePointerToString(source.Service)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPropertiesFormat populates the provided destination ServiceEndpointPropertiesFormat from our ServiceEndpointPropertiesFormat
func (format *ServiceEndpointPropertiesFormat) AssignPropertiesToServiceEndpointPropertiesFormat(destination *v20201101s.ServiceEndpointPropertiesFormat) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(format.Locations)

	// Service
	destination.Service = genruntime.ClonePointerToString(format.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPropertiesFormat_STATUS struct {
	// Locations: A list of locations.
	Locations []string `json:"locations,omitempty"`

	// ProvisioningState: The provisioning state of the service endpoint resource.
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Service: The type of the endpoint service.
	Service *string `json:"service,omitempty"`
}

var _ genruntime.FromARMConverter = &ServiceEndpointPropertiesFormat_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (format *ServiceEndpointPropertiesFormat_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPropertiesFormat_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (format *ServiceEndpointPropertiesFormat_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPropertiesFormat_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPropertiesFormat_STATUSARM, got %T", armInput)
	}

	// Set property ‘Locations’:
	for _, item := range typedInput.Locations {
		format.Locations = append(format.Locations, item)
	}

	// Set property ‘ProvisioningState’:
	if typedInput.ProvisioningState != nil {
		provisioningState := *typedInput.ProvisioningState
		format.ProvisioningState = &provisioningState
	}

	// Set property ‘Service’:
	if typedInput.Service != nil {
		service := *typedInput.Service
		format.Service = &service
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPropertiesFormatSTATUS populates our ServiceEndpointPropertiesFormat_STATUS from the provided source ServiceEndpointPropertiesFormat_STATUS
func (format *ServiceEndpointPropertiesFormat_STATUS) AssignPropertiesFromServiceEndpointPropertiesFormatSTATUS(source *v20201101s.ServiceEndpointPropertiesFormat_STATUS) error {

	// Locations
	format.Locations = genruntime.CloneSliceOfString(source.Locations)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		format.ProvisioningState = &provisioningState
	} else {
		format.ProvisioningState = nil
	}

	// Service
	format.Service = genruntime.ClonePointerToString(source.Service)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPropertiesFormatSTATUS populates the provided destination ServiceEndpointPropertiesFormat_STATUS from our ServiceEndpointPropertiesFormat_STATUS
func (format *ServiceEndpointPropertiesFormat_STATUS) AssignPropertiesToServiceEndpointPropertiesFormatSTATUS(destination *v20201101s.ServiceEndpointPropertiesFormat_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(format.Locations)

	// ProvisioningState
	if format.ProvisioningState != nil {
		provisioningState := string(*format.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Service
	destination.Service = genruntime.ClonePointerToString(format.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworksSubnets_Spec_Properties_Delegations struct {
	// +kubebuilder:validation:Required
	// Name: The name of the resource that is unique within a subnet. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ServiceName: The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
	ServiceName *string `json:"serviceName,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworksSubnets_Spec_Properties_Delegations{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (delegations *VirtualNetworksSubnets_Spec_Properties_Delegations) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if delegations == nil {
		return nil, nil
	}
	result := &VirtualNetworksSubnets_Spec_Properties_DelegationsARM{}

	// Set property ‘Name’:
	if delegations.Name != nil {
		name := *delegations.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if delegations.ServiceName != nil {
		result.Properties = &ServiceDelegationPropertiesFormatARM{}
	}
	if delegations.ServiceName != nil {
		serviceName := *delegations.ServiceName
		result.Properties.ServiceName = &serviceName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (delegations *VirtualNetworksSubnets_Spec_Properties_Delegations) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworksSubnets_Spec_Properties_DelegationsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (delegations *VirtualNetworksSubnets_Spec_Properties_Delegations) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworksSubnets_Spec_Properties_DelegationsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworksSubnets_Spec_Properties_DelegationsARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		delegations.Name = &name
	}

	// Set property ‘ServiceName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceName != nil {
			serviceName := *typedInput.Properties.ServiceName
			delegations.ServiceName = &serviceName
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworksSubnetsSpecPropertiesDelegations populates our VirtualNetworksSubnets_Spec_Properties_Delegations from the provided source VirtualNetworksSubnets_Spec_Properties_Delegations
func (delegations *VirtualNetworksSubnets_Spec_Properties_Delegations) AssignPropertiesFromVirtualNetworksSubnetsSpecPropertiesDelegations(source *v20201101s.VirtualNetworksSubnets_Spec_Properties_Delegations) error {

	// Name
	delegations.Name = genruntime.ClonePointerToString(source.Name)

	// ServiceName
	delegations.ServiceName = genruntime.ClonePointerToString(source.ServiceName)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSubnetsSpecPropertiesDelegations populates the provided destination VirtualNetworksSubnets_Spec_Properties_Delegations from our VirtualNetworksSubnets_Spec_Properties_Delegations
func (delegations *VirtualNetworksSubnets_Spec_Properties_Delegations) AssignPropertiesToVirtualNetworksSubnetsSpecPropertiesDelegations(destination *v20201101s.VirtualNetworksSubnets_Spec_Properties_Delegations) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(delegations.Name)

	// ServiceName
	destination.ServiceName = genruntime.ClonePointerToString(delegations.ServiceName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	// ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation_STATUS `json:"extendedLocation,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Sku: The public IP address SKU.
	Sku *PublicIPAddressSku_STATUS `json:"sku,omitempty"`

	// Zones: A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded populates our PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded(source *v20201101s.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocationSTATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku_STATUS
		err := sku.AssignPropertiesFromPublicIPAddressSkuSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSkuSTATUS() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded populates the provided destination PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbedded(destination *v20201101s.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v20201101s.ExtendedLocation_STATUS
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocationSTATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Sku
	if embedded.Sku != nil {
		var sku v20201101s.PublicIPAddressSku_STATUS
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSkuSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSkuSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&VirtualNetworksSubnet{}, &VirtualNetworksSubnetList{})
}
