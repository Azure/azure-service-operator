// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTable_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTable_SpecARM, RouteTable_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTable_SpecARM runs a test to see if a specific instance of RouteTable_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTable_SpecARM(subject RouteTable_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_SpecARM instances for property testing - lazily instantiated by RouteTable_SpecARMGenerator()
var routeTable_SpecARMGenerator gopter.Gen

// RouteTable_SpecARMGenerator returns a generator of RouteTable_SpecARM instances for property testing.
// We first initialize routeTable_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTable_SpecARMGenerator() gopter.Gen {
	if routeTable_SpecARMGenerator != nil {
		return routeTable_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_SpecARM(generators)
	routeTable_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTable_SpecARM(generators)
	routeTable_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_SpecARM{}), generators)

	return routeTable_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTable_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTable_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTable_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTable_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator())
}

func Test_RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM, RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM runs a test to see if a specific instance of RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM(subject RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator()
var routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator gopter.Gen

// RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator returns a generator of RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM instances for property testing.
// We first initialize routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator != nil {
		return routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM(generators)
	routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM(generators)
	routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM{}), generators)

	return routeTablePropertiesFormat_RouteTable_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablePropertiesFormat_RouteTable_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Routes"] = gen.SliceOf(Route_RouteTable_SubResourceEmbeddedARMGenerator())
}

func Test_Route_RouteTable_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Route_RouteTable_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoute_RouteTable_SubResourceEmbeddedARM, Route_RouteTable_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoute_RouteTable_SubResourceEmbeddedARM runs a test to see if a specific instance of Route_RouteTable_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoute_RouteTable_SubResourceEmbeddedARM(subject Route_RouteTable_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Route_RouteTable_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Route_RouteTable_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// Route_RouteTable_SubResourceEmbeddedARMGenerator()
var route_RouteTable_SubResourceEmbeddedARMGenerator gopter.Gen

// Route_RouteTable_SubResourceEmbeddedARMGenerator returns a generator of Route_RouteTable_SubResourceEmbeddedARM instances for property testing.
func Route_RouteTable_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if route_RouteTable_SubResourceEmbeddedARMGenerator != nil {
		return route_RouteTable_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoute_RouteTable_SubResourceEmbeddedARM(generators)
	route_RouteTable_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Route_RouteTable_SubResourceEmbeddedARM{}), generators)

	return route_RouteTable_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRoute_RouteTable_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoute_RouteTable_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
