// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_Subnet_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_SpecARM, VirtualNetworks_Subnet_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_SpecARM runs a test to see if a specific instance of VirtualNetworks_Subnet_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_SpecARM(subject VirtualNetworks_Subnet_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnet_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnet_SpecARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnet_SpecARMGenerator()
var virtualNetworks_Subnet_SpecARMGenerator gopter.Gen

// VirtualNetworks_Subnet_SpecARMGenerator returns a generator of VirtualNetworks_Subnet_SpecARM instances for property testing.
// We first initialize virtualNetworks_Subnet_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_SpecARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_SpecARMGenerator != nil {
		return virtualNetworks_Subnet_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM(generators)
	virtualNetworks_Subnet_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM(generators)
	virtualNetworks_Subnet_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_SpecARM{}), generators)

	return virtualNetworks_Subnet_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM(gens map[string]gopter.Gen) {
<<<<<<< HEAD
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
=======
	gens["Name"] = gen.AlphaString()
>>>>>>> main
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_SpecARM(gens map[string]gopter.Gen) {
<<<<<<< HEAD
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormatARMGenerator())
}

func Test_SubnetPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormatARM, SubnetPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormatARM runs a test to see if a specific instance of SubnetPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormatARM(subject SubnetPropertiesFormatARM) string {
=======
	gens["Properties"] = gen.PtrOf(VirtualNetworks_Subnet_Spec_PropertiesARMGenerator())
}

func Test_VirtualNetworks_Subnet_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_PropertiesARM, VirtualNetworks_Subnet_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_PropertiesARM runs a test to see if a specific instance of VirtualNetworks_Subnet_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_PropertiesARM(subject VirtualNetworks_Subnet_Spec_PropertiesARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual SubnetPropertiesFormatARM
=======
	var actual VirtualNetworks_Subnet_Spec_PropertiesARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of SubnetPropertiesFormatARM instances for property testing - lazily instantiated by
// SubnetPropertiesFormatARMGenerator()
var subnetPropertiesFormatARMGenerator gopter.Gen

// SubnetPropertiesFormatARMGenerator returns a generator of SubnetPropertiesFormatARM instances for property testing.
// We first initialize subnetPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormatARMGenerator() gopter.Gen {
	if subnetPropertiesFormatARMGenerator != nil {
		return subnetPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatARM(generators)
	subnetPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormatARM(generators)
	subnetPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormatARM{}), generators)

	return subnetPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormat_PrivateEndpointNetworkPolicies_Disabled, SubnetPropertiesFormat_PrivateEndpointNetworkPolicies_Enabled))
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormat_PrivateLinkServiceNetworkPolicies_Disabled, SubnetPropertiesFormat_PrivateLinkServiceNetworkPolicies_Enabled))
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfigurationARMGenerator())
	gens["Delegations"] = gen.SliceOf(DelegationARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSpecARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTableSpecARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicySpecARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatARMGenerator())
}

func Test_ApplicationGatewayIPConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationARM, ApplicationGatewayIPConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationARM(subject ApplicationGatewayIPConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationARM instances for property testing - lazily instantiated by
// ApplicationGatewayIPConfigurationARMGenerator()
var applicationGatewayIPConfigurationARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationARMGenerator returns a generator of ApplicationGatewayIPConfigurationARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationARMGenerator != nil {
		return applicationGatewayIPConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationARM(generators)
	applicationGatewayIPConfigurationARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationARM(generators)
	applicationGatewayIPConfigurationARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationARM{}), generators)

	return applicationGatewayIPConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormatARMGenerator())
}

func Test_DelegationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DelegationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegationARM, DelegationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegationARM runs a test to see if a specific instance of DelegationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegationARM(subject DelegationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DelegationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DelegationARM instances for property testing - lazily instantiated by DelegationARMGenerator()
var delegationARMGenerator gopter.Gen

// DelegationARMGenerator returns a generator of DelegationARM instances for property testing.
// We first initialize delegationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DelegationARMGenerator() gopter.Gen {
	if delegationARMGenerator != nil {
		return delegationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationARM(generators)
	delegationARMGenerator = gen.Struct(reflect.TypeOf(DelegationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationARM(generators)
	AddRelatedPropertyGeneratorsForDelegationARM(generators)
	delegationARMGenerator = gen.Struct(reflect.TypeOf(DelegationARM{}), generators)

	return delegationARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegationARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormatARMGenerator())
}

func Test_RouteTableSpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTableSpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableSpecARM, RouteTableSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableSpecARM runs a test to see if a specific instance of RouteTableSpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableSpecARM(subject RouteTableSpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTableSpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTableSpecARM instances for property testing - lazily instantiated by RouteTableSpecARMGenerator()
var routeTableSpecARMGenerator gopter.Gen

// RouteTableSpecARMGenerator returns a generator of RouteTableSpecARM instances for property testing.
// We first initialize routeTableSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTableSpecARMGenerator() gopter.Gen {
	if routeTableSpecARMGenerator != nil {
		return routeTableSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSpecARM(generators)
	routeTableSpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTableSpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTableSpecARM(generators)
	routeTableSpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTableSpecARM{}), generators)

	return routeTableSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTableSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTableSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormatARMGenerator())
}

func Test_ServiceEndpointPolicySpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicySpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicySpecARM, ServiceEndpointPolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicySpecARM runs a test to see if a specific instance of ServiceEndpointPolicySpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicySpecARM(subject ServiceEndpointPolicySpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicySpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicySpecARM instances for property testing - lazily instantiated by
// ServiceEndpointPolicySpecARMGenerator()
var serviceEndpointPolicySpecARMGenerator gopter.Gen

// ServiceEndpointPolicySpecARMGenerator returns a generator of ServiceEndpointPolicySpecARM instances for property testing.
// We first initialize serviceEndpointPolicySpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicySpecARMGenerator() gopter.Gen {
	if serviceEndpointPolicySpecARMGenerator != nil {
		return serviceEndpointPolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM(generators)
	serviceEndpointPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicySpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicySpecARM(generators)
	serviceEndpointPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicySpecARM{}), generators)

	return serviceEndpointPolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicySpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicySpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceEndpointPolicyPropertiesFormatARMGenerator())
}

=======
// Generator of VirtualNetworks_Subnet_Spec_PropertiesARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnet_Spec_PropertiesARMGenerator()
var virtualNetworks_Subnet_Spec_PropertiesARMGenerator gopter.Gen

// VirtualNetworks_Subnet_Spec_PropertiesARMGenerator returns a generator of VirtualNetworks_Subnet_Spec_PropertiesARM instances for property testing.
// We first initialize virtualNetworks_Subnet_Spec_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_Spec_PropertiesARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_Spec_PropertiesARMGenerator != nil {
		return virtualNetworks_Subnet_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM(generators)
	virtualNetworks_Subnet_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Spec_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM(generators)
	virtualNetworks_Subnet_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Spec_PropertiesARM{}), generators)

	return virtualNetworks_Subnet_Spec_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["Delegations"] = gen.SliceOf(VirtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResourceARMGenerator())
	gens["RouteTable"] = gen.PtrOf(SubResourceARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(SubResourceARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatARMGenerator())
}

>>>>>>> main
func Test_ServiceEndpointPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormatARM, ServiceEndpointPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormatARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormatARM(subject ServiceEndpointPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormatARM instances for property testing - lazily instantiated by
// ServiceEndpointPropertiesFormatARMGenerator()
var serviceEndpointPropertiesFormatARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormatARMGenerator returns a generator of ServiceEndpointPropertiesFormatARM instances for property testing.
func ServiceEndpointPropertiesFormatARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormatARMGenerator != nil {
		return serviceEndpointPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatARM(generators)
	serviceEndpointPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormatARM{}), generators)

	return serviceEndpointPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

<<<<<<< HEAD
func Test_ApplicationGatewayIPConfigurationPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatARM, ApplicationGatewayIPConfigurationPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatARM(subject ApplicationGatewayIPConfigurationPropertiesFormatARM) string {
=======
func Test_VirtualNetworks_Subnet_Spec_Properties_DelegationsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_Spec_Properties_DelegationsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM, VirtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM runs a test to see if a specific instance of VirtualNetworks_Subnet_Spec_Properties_DelegationsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM(subject VirtualNetworks_Subnet_Spec_Properties_DelegationsARM) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual ApplicationGatewayIPConfigurationPropertiesFormatARM
=======
	var actual VirtualNetworks_Subnet_Spec_Properties_DelegationsARM
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of ApplicationGatewayIPConfigurationPropertiesFormatARM instances for property testing - lazily
// instantiated by ApplicationGatewayIPConfigurationPropertiesFormatARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormatARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormatARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormatARM instances for property testing.
func ApplicationGatewayIPConfigurationPropertiesFormatARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormatARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatARM(generators)
	applicationGatewayIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormatARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormatARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResourceARMGenerator())
=======
// Generator of VirtualNetworks_Subnet_Spec_Properties_DelegationsARM instances for property testing - lazily
// instantiated by VirtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator()
var virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator gopter.Gen

// VirtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator returns a generator of VirtualNetworks_Subnet_Spec_Properties_DelegationsARM instances for property testing.
// We first initialize virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator != nil {
		return virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM(generators)
	virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Spec_Properties_DelegationsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM(generators)
	virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Spec_Properties_DelegationsARM{}), generators)

	return virtualNetworks_Subnet_Spec_Properties_DelegationsARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_Properties_DelegationsARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormatARMGenerator())
>>>>>>> main
}

func Test_ServiceDelegationPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormatARM, ServiceDelegationPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormatARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormatARM(subject ServiceDelegationPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormatARM instances for property testing - lazily instantiated by
// ServiceDelegationPropertiesFormatARMGenerator()
var serviceDelegationPropertiesFormatARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormatARMGenerator returns a generator of ServiceDelegationPropertiesFormatARM instances for property testing.
func ServiceDelegationPropertiesFormatARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormatARMGenerator != nil {
		return serviceDelegationPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatARM(generators)
	serviceDelegationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormatARM{}), generators)

	return serviceDelegationPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}
<<<<<<< HEAD

func Test_ServiceEndpointPolicyPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormatARM, ServiceEndpointPolicyPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormatARM runs a test to see if a specific instance of ServiceEndpointPolicyPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormatARM(subject ServiceEndpointPolicyPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyPropertiesFormatARM instances for property testing - lazily instantiated by
// ServiceEndpointPolicyPropertiesFormatARMGenerator()
var serviceEndpointPolicyPropertiesFormatARMGenerator gopter.Gen

// ServiceEndpointPolicyPropertiesFormatARMGenerator returns a generator of ServiceEndpointPolicyPropertiesFormatARM instances for property testing.
func ServiceEndpointPolicyPropertiesFormatARMGenerator() gopter.Gen {
	if serviceEndpointPolicyPropertiesFormatARMGenerator != nil {
		return serviceEndpointPolicyPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormatARM(generators)
	serviceEndpointPolicyPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyPropertiesFormatARM{}), generators)

	return serviceEndpointPolicyPropertiesFormatARMGenerator
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ServiceEndpointPolicyDefinitions"] = gen.SliceOf(ServiceEndpointPolicyDefinitionARMGenerator())
}

func Test_ServiceEndpointPolicyDefinitionARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinitionARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinitionARM, ServiceEndpointPolicyDefinitionARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinitionARM runs a test to see if a specific instance of ServiceEndpointPolicyDefinitionARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinitionARM(subject ServiceEndpointPolicyDefinitionARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinitionARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinitionARM instances for property testing - lazily instantiated by
// ServiceEndpointPolicyDefinitionARMGenerator()
var serviceEndpointPolicyDefinitionARMGenerator gopter.Gen

// ServiceEndpointPolicyDefinitionARMGenerator returns a generator of ServiceEndpointPolicyDefinitionARM instances for property testing.
// We first initialize serviceEndpointPolicyDefinitionARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicyDefinitionARMGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinitionARMGenerator != nil {
		return serviceEndpointPolicyDefinitionARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionARM(generators)
	serviceEndpointPolicyDefinitionARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinitionARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicyDefinitionARM(generators)
	serviceEndpointPolicyDefinitionARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinitionARM{}), generators)

	return serviceEndpointPolicyDefinitionARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicyDefinitionARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicyDefinitionARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceEndpointPolicyDefinitionPropertiesFormatARMGenerator())
}

func Test_ServiceEndpointPolicyDefinitionPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinitionPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinitionPropertiesFormatARM, ServiceEndpointPolicyDefinitionPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinitionPropertiesFormatARM runs a test to see if a specific instance of ServiceEndpointPolicyDefinitionPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinitionPropertiesFormatARM(subject ServiceEndpointPolicyDefinitionPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinitionPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinitionPropertiesFormatARM instances for property testing - lazily instantiated
// by ServiceEndpointPolicyDefinitionPropertiesFormatARMGenerator()
var serviceEndpointPolicyDefinitionPropertiesFormatARMGenerator gopter.Gen

// ServiceEndpointPolicyDefinitionPropertiesFormatARMGenerator returns a generator of ServiceEndpointPolicyDefinitionPropertiesFormatARM instances for property testing.
func ServiceEndpointPolicyDefinitionPropertiesFormatARMGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinitionPropertiesFormatARMGenerator != nil {
		return serviceEndpointPolicyDefinitionPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionPropertiesFormatARM(generators)
	serviceEndpointPolicyDefinitionPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinitionPropertiesFormatARM{}), generators)

	return serviceEndpointPolicyDefinitionPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceResources"] = gen.SliceOf(gen.AlphaString())
}
=======
>>>>>>> main
