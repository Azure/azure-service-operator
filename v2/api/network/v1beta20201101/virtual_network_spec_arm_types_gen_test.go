// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetwork_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork_Spec_ARM, VirtualNetwork_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork_Spec_ARM runs a test to see if a specific instance of VirtualNetwork_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork_Spec_ARM(subject VirtualNetwork_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork_Spec_ARM instances for property testing - lazily instantiated by
// VirtualNetwork_Spec_ARMGenerator()
var virtualNetwork_Spec_ARMGenerator gopter.Gen

// VirtualNetwork_Spec_ARMGenerator returns a generator of VirtualNetwork_Spec_ARM instances for property testing.
// We first initialize virtualNetwork_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetwork_Spec_ARMGenerator() gopter.Gen {
	if virtualNetwork_Spec_ARMGenerator != nil {
		return virtualNetwork_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_Spec_ARM(generators)
	virtualNetwork_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetwork_Spec_ARM(generators)
	virtualNetwork_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Spec_ARM{}), generators)

	return virtualNetwork_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetwork_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetwork_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetwork_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_ARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkPropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPropertiesFormat_ARM, VirtualNetworkPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPropertiesFormat_ARM runs a test to see if a specific instance of VirtualNetworkPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPropertiesFormat_ARM(subject VirtualNetworkPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPropertiesFormat_ARM instances for property testing - lazily instantiated by
// VirtualNetworkPropertiesFormat_ARMGenerator()
var virtualNetworkPropertiesFormat_ARMGenerator gopter.Gen

// VirtualNetworkPropertiesFormat_ARMGenerator returns a generator of VirtualNetworkPropertiesFormat_ARM instances for property testing.
// We first initialize virtualNetworkPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPropertiesFormat_ARMGenerator() gopter.Gen {
	if virtualNetworkPropertiesFormat_ARMGenerator != nil {
		return virtualNetworkPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM(generators)
	virtualNetworkPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM(generators)
	virtualNetworkPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_ARM{}), generators)

	return virtualNetworkPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpace_ARMGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunities_ARMGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptions_ARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_ARMGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeering_ARMGenerator())
}

func Test_DhcpOptions_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptions_ARM, DhcpOptions_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptions_ARM runs a test to see if a specific instance of DhcpOptions_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptions_ARM(subject DhcpOptions_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_ARM instances for property testing - lazily instantiated by DhcpOptions_ARMGenerator()
var dhcpOptions_ARMGenerator gopter.Gen

// DhcpOptions_ARMGenerator returns a generator of DhcpOptions_ARM instances for property testing.
func DhcpOptions_ARMGenerator() gopter.Gen {
	if dhcpOptions_ARMGenerator != nil {
		return dhcpOptions_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptions_ARM(generators)
	dhcpOptions_ARMGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_ARM{}), generators)

	return dhcpOptions_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptions_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptions_ARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_ARM, Subnet_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_ARM runs a test to see if a specific instance of Subnet_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_ARM(subject Subnet_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_ARM instances for property testing - lazily instantiated by Subnet_ARMGenerator()
var subnet_ARMGenerator gopter.Gen

// Subnet_ARMGenerator returns a generator of Subnet_ARM instances for property testing.
// We first initialize subnet_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Subnet_ARMGenerator() gopter.Gen {
	if subnet_ARMGenerator != nil {
		return subnet_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_ARM(generators)
	subnet_ARMGenerator = gen.Struct(reflect.TypeOf(Subnet_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_ARM(generators)
	AddRelatedPropertyGeneratorsForSubnet_ARM(generators)
	subnet_ARMGenerator = gen.Struct(reflect.TypeOf(Subnet_ARM{}), generators)

	return subnet_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnet_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnet_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkBgpCommunities_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkBgpCommunities_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkBgpCommunities_ARM, VirtualNetworkBgpCommunities_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkBgpCommunities_ARM runs a test to see if a specific instance of VirtualNetworkBgpCommunities_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkBgpCommunities_ARM(subject VirtualNetworkBgpCommunities_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkBgpCommunities_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkBgpCommunities_ARM instances for property testing - lazily instantiated by
// VirtualNetworkBgpCommunities_ARMGenerator()
var virtualNetworkBgpCommunities_ARMGenerator gopter.Gen

// VirtualNetworkBgpCommunities_ARMGenerator returns a generator of VirtualNetworkBgpCommunities_ARM instances for property testing.
func VirtualNetworkBgpCommunities_ARMGenerator() gopter.Gen {
	if virtualNetworkBgpCommunities_ARMGenerator != nil {
		return virtualNetworkBgpCommunities_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities_ARM(generators)
	virtualNetworkBgpCommunities_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkBgpCommunities_ARM{}), generators)

	return virtualNetworkBgpCommunities_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities_ARM(gens map[string]gopter.Gen) {
	gens["VirtualNetworkCommunity"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkPeering_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeering_ARM, VirtualNetworkPeering_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeering_ARM runs a test to see if a specific instance of VirtualNetworkPeering_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeering_ARM(subject VirtualNetworkPeering_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_ARM instances for property testing - lazily instantiated by
// VirtualNetworkPeering_ARMGenerator()
var virtualNetworkPeering_ARMGenerator gopter.Gen

// VirtualNetworkPeering_ARMGenerator returns a generator of VirtualNetworkPeering_ARM instances for property testing.
// We first initialize virtualNetworkPeering_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPeering_ARMGenerator() gopter.Gen {
	if virtualNetworkPeering_ARMGenerator != nil {
		return virtualNetworkPeering_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeering_ARM(generators)
	virtualNetworkPeering_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeering_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPeering_ARM(generators)
	virtualNetworkPeering_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_ARM{}), generators)

	return virtualNetworkPeering_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeering_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeering_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPeering_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPeering_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkPeeringPropertiesFormat_ARMGenerator())
}
