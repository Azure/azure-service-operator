// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

<<<<<<<< HEAD:v2/api/network/v1beta20201101/route_tables_route__spec_arm_types_gen_test.go
func Test_RouteTablesRoute_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
========
func Test_RouteTables_Routes_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>>> main:v2/api/network/v1beta20201101/route_tables_routes_spec_arm_types_gen_test.go
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<<< HEAD:v2/api/network/v1beta20201101/route_tables_route__spec_arm_types_gen_test.go
		"Round trip of RouteTablesRoute_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablesRoute_SpecARM, RouteTablesRoute_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablesRoute_SpecARM runs a test to see if a specific instance of RouteTablesRoute_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablesRoute_SpecARM(subject RouteTablesRoute_SpecARM) string {
========
		"Round trip of RouteTables_Routes_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTables_Routes_SpecARM, RouteTables_Routes_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTables_Routes_SpecARM runs a test to see if a specific instance of RouteTables_Routes_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTables_Routes_SpecARM(subject RouteTables_Routes_SpecARM) string {
>>>>>>>> main:v2/api/network/v1beta20201101/route_tables_routes_spec_arm_types_gen_test.go
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<<< HEAD:v2/api/network/v1beta20201101/route_tables_route__spec_arm_types_gen_test.go
	var actual RouteTablesRoute_SpecARM
========
	var actual RouteTables_Routes_SpecARM
>>>>>>>> main:v2/api/network/v1beta20201101/route_tables_routes_spec_arm_types_gen_test.go
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<<< HEAD:v2/api/network/v1beta20201101/route_tables_route__spec_arm_types_gen_test.go
// Generator of RouteTablesRoute_SpecARM instances for property testing - lazily instantiated by
// RouteTablesRoute_SpecARMGenerator()
var routeTablesRoute_SpecARMGenerator gopter.Gen

// RouteTablesRoute_SpecARMGenerator returns a generator of RouteTablesRoute_SpecARM instances for property testing.
// We first initialize routeTablesRoute_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablesRoute_SpecARMGenerator() gopter.Gen {
	if routeTablesRoute_SpecARMGenerator != nil {
		return routeTablesRoute_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesRoute_SpecARM(generators)
	routeTablesRoute_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTablesRoute_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesRoute_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablesRoute_SpecARM(generators)
	routeTablesRoute_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTablesRoute_SpecARM{}), generators)

	return routeTablesRoute_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablesRoute_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablesRoute_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
========
// Generator of RouteTables_Routes_SpecARM instances for property testing - lazily instantiated by
// RouteTables_Routes_SpecARMGenerator()
var routeTables_Routes_SpecARMGenerator gopter.Gen

// RouteTables_Routes_SpecARMGenerator returns a generator of RouteTables_Routes_SpecARM instances for property testing.
// We first initialize routeTables_Routes_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTables_Routes_SpecARMGenerator() gopter.Gen {
	if routeTables_Routes_SpecARMGenerator != nil {
		return routeTables_Routes_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_Routes_SpecARM(generators)
	routeTables_Routes_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_Routes_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTables_Routes_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTables_Routes_SpecARM(generators)
	routeTables_Routes_SpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTables_Routes_SpecARM{}), generators)

	return routeTables_Routes_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTables_Routes_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTables_Routes_SpecARM(gens map[string]gopter.Gen) {
>>>>>>>> main:v2/api/network/v1beta20201101/route_tables_routes_spec_arm_types_gen_test.go
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

<<<<<<<< HEAD:v2/api/network/v1beta20201101/route_tables_route__spec_arm_types_gen_test.go
// AddRelatedPropertyGeneratorsForRouteTablesRoute_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablesRoute_SpecARM(gens map[string]gopter.Gen) {
========
// AddRelatedPropertyGeneratorsForRouteTables_Routes_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTables_Routes_SpecARM(gens map[string]gopter.Gen) {
>>>>>>>> main:v2/api/network/v1beta20201101/route_tables_routes_spec_arm_types_gen_test.go
	gens["Properties"] = gen.PtrOf(RoutePropertiesFormatARMGenerator())
}

func Test_RoutePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutePropertiesFormatARM, RoutePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutePropertiesFormatARM runs a test to see if a specific instance of RoutePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutePropertiesFormatARM(subject RoutePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutePropertiesFormatARM instances for property testing - lazily instantiated by
// RoutePropertiesFormatARMGenerator()
var routePropertiesFormatARMGenerator gopter.Gen

// RoutePropertiesFormatARMGenerator returns a generator of RoutePropertiesFormatARM instances for property testing.
func RoutePropertiesFormatARMGenerator() gopter.Gen {
	if routePropertiesFormatARMGenerator != nil {
		return routePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutePropertiesFormatARM(generators)
	routePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(RoutePropertiesFormatARM{}), generators)

	return routePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["HasBgpOverride"] = gen.PtrOf(gen.Bool())
	gens["NextHopIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["NextHopType"] = gen.PtrOf(gen.OneConstOf(
<<<<<<<< HEAD:v2/api/network/v1beta20201101/route_tables_route__spec_arm_types_gen_test.go
		RouteNextHopType_Internet,
		RouteNextHopType_None,
		RouteNextHopType_VirtualAppliance,
		RouteNextHopType_VirtualNetworkGateway,
		RouteNextHopType_VnetLocal))
========
		RoutePropertiesFormat_NextHopType_Internet,
		RoutePropertiesFormat_NextHopType_None,
		RoutePropertiesFormat_NextHopType_VirtualAppliance,
		RoutePropertiesFormat_NextHopType_VirtualNetworkGateway,
		RoutePropertiesFormat_NextHopType_VnetLocal))
>>>>>>>> main:v2/api/network/v1beta20201101/route_tables_routes_spec_arm_types_gen_test.go
}
