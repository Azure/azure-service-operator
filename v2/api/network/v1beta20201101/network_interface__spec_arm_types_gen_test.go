// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkInterface_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterface_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterface_SpecARM, NetworkInterface_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterface_SpecARM runs a test to see if a specific instance of NetworkInterface_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterface_SpecARM(subject NetworkInterface_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterface_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterface_SpecARM instances for property testing - lazily instantiated by
// NetworkInterface_SpecARMGenerator()
var networkInterface_SpecARMGenerator gopter.Gen

// NetworkInterface_SpecARMGenerator returns a generator of NetworkInterface_SpecARM instances for property testing.
// We first initialize networkInterface_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterface_SpecARMGenerator() gopter.Gen {
	if networkInterface_SpecARMGenerator != nil {
		return networkInterface_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_SpecARM(generators)
	networkInterface_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterface_SpecARM(generators)
	networkInterface_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_SpecARM{}), generators)

	return networkInterface_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterface_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterface_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterface_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterface_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormatARMGenerator())
}

func Test_NetworkInterfacePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormatARM, NetworkInterfacePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormatARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormatARM(subject NetworkInterfacePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormatARM instances for property testing - lazily instantiated by
// NetworkInterfacePropertiesFormatARMGenerator()
var networkInterfacePropertiesFormatARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormatARMGenerator returns a generator of NetworkInterfacePropertiesFormatARM instances for property testing.
// We first initialize networkInterfacePropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormatARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormatARMGenerator != nil {
		return networkInterfacePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatARM(generators)
	networkInterfacePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatARM(generators)
	networkInterfacePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormatARM{}), generators)

	return networkInterfacePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["HostedWorkloads"] = gen.SliceOf(gen.AlphaString())
	gens["MacAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormat_MigrationPhaseAbort,
		NetworkInterfacePropertiesFormat_MigrationPhaseCommit,
		NetworkInterfacePropertiesFormat_MigrationPhaseCommitted,
		NetworkInterfacePropertiesFormat_MigrationPhaseNone,
		NetworkInterfacePropertiesFormat_MigrationPhasePrepare))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormat_NicTypeElastic, NetworkInterfacePropertiesFormat_NicTypeStandard))
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettingsARMGenerator())
	gens["DscpConfiguration"] = gen.PtrOf(SubResourceARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkServiceSpecARMGenerator())
	gens["TapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["VirtualMachine"] = gen.PtrOf(SubResourceARMGenerator())
}

func Test_NetworkInterfaceDnsSettingsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettingsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettingsARM, NetworkInterfaceDnsSettingsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettingsARM runs a test to see if a specific instance of NetworkInterfaceDnsSettingsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettingsARM(subject NetworkInterfaceDnsSettingsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettingsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettingsARM instances for property testing - lazily instantiated by
// NetworkInterfaceDnsSettingsARMGenerator()
var networkInterfaceDnsSettingsARMGenerator gopter.Gen

// NetworkInterfaceDnsSettingsARMGenerator returns a generator of NetworkInterfaceDnsSettingsARM instances for property testing.
func NetworkInterfaceDnsSettingsARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettingsARMGenerator != nil {
		return networkInterfaceDnsSettingsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsARM(generators)
	networkInterfaceDnsSettingsARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettingsARM{}), generators)

	return networkInterfaceDnsSettingsARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsARM(gens map[string]gopter.Gen) {
	gens["AppliedDnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["InternalDomainNameSuffix"] = gen.PtrOf(gen.AlphaString())
	gens["InternalFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM, NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM(subject NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM, NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM(subject NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM instances for property testing
// - lazily instantiated by NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM, NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM(subject NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM, PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM(subject PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateEndpointSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
}

func Test_PrivateLinkServiceSpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceSpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceSpecARM, PrivateLinkServiceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceSpecARM runs a test to see if a specific instance of PrivateLinkServiceSpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceSpecARM(subject PrivateLinkServiceSpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceSpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceSpecARM instances for property testing - lazily instantiated by
// PrivateLinkServiceSpecARMGenerator()
var privateLinkServiceSpecARMGenerator gopter.Gen

// PrivateLinkServiceSpecARMGenerator returns a generator of PrivateLinkServiceSpecARM instances for property testing.
// We first initialize privateLinkServiceSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceSpecARMGenerator() gopter.Gen {
	if privateLinkServiceSpecARMGenerator != nil {
		return privateLinkServiceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM(generators)
	privateLinkServiceSpecARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceSpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceSpecARM(generators)
	privateLinkServiceSpecARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceSpecARM{}), generators)

	return privateLinkServiceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceSpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
}

func Test_SubResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceARM, SubResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceARM runs a test to see if a specific instance of SubResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceARM(subject SubResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResourceARM instances for property testing - lazily instantiated by SubResourceARMGenerator()
var subResourceARMGenerator gopter.Gen

// SubResourceARMGenerator returns a generator of SubResourceARM instances for property testing.
func SubResourceARMGenerator() gopter.Gen {
	if subResourceARMGenerator != nil {
		return subResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceARM(generators)
	subResourceARMGenerator = gen.Struct(reflect.TypeOf(SubResourceARM{}), generators)

	return subResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM, NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM instances for
// property testing - lazily instantiated by
// NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersionIPv4, IPVersionIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethodDynamic, IPAllocationMethodStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM, ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM, ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM(subject ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var applicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return applicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	applicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM, BackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(subject BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by BackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator()
var backendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return backendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(generators)
	backendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return backendAddressPool_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPool_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_InboundNatRule_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRule_NetworkInterface_SubResourceEmbeddedARM, InboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRule_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRule_NetworkInterface_SubResourceEmbeddedARM(subject InboundNatRule_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by InboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator()
var inboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func InboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return inboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRule_NetworkInterface_SubResourceEmbeddedARM(generators)
	inboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return inboundNatRule_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRule_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRule_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM, NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM instances for property testing -
// lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesARM(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM, PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM(subject PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuARMGenerator())
}

func Test_Subnet_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_NetworkInterface_SubResourceEmbeddedARM, Subnet_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_NetworkInterface_SubResourceEmbeddedARM(subject Subnet_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// Subnet_NetworkInterface_SubResourceEmbeddedARMGenerator()
var subnet_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// Subnet_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of Subnet_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func Subnet_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return subnet_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_NetworkInterface_SubResourceEmbeddedARM(generators)
	subnet_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return subnet_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM, VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM(subject VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var virtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM(generators)
	virtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapSpec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM instances
// for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddressARMGenerator())
}

func Test_ApplicationGatewayBackendAddressARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressARM, ApplicationGatewayBackendAddressARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressARM(subject ApplicationGatewayBackendAddressARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressARMGenerator()
var applicationGatewayBackendAddressARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressARMGenerator returns a generator of ApplicationGatewayBackendAddressARM instances for property testing.
func ApplicationGatewayBackendAddressARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressARMGenerator != nil {
		return applicationGatewayBackendAddressARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressARM(generators)
	applicationGatewayBackendAddressARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressARM{}), generators)

	return applicationGatewayBackendAddressARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
