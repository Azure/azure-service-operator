// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM, SubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return subnetStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormatStatusARMGenerator())
}

func Test_SubnetPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormatStatusARM, SubnetPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormatStatusARM runs a test to see if a specific instance of SubnetPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormatStatusARM(subject SubnetPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubnetPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubnetPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//SubnetPropertiesFormatStatusARMGenerator()
var subnetPropertiesFormatStatusARMGenerator gopter.Gen

// SubnetPropertiesFormatStatusARMGenerator returns a generator of SubnetPropertiesFormat_StatusARM instances for property testing.
// We first initialize subnetPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormatStatusARMGenerator() gopter.Gen {
	if subnetPropertiesFormatStatusARMGenerator != nil {
		return subnetPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatStatusARM(generators)
	subnetPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormatStatusARM(generators)
	subnetPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_StatusARM{}), generators)

	return subnetPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormatStatusPrivateEndpointNetworkPoliciesDisabled, SubnetPropertiesFormatStatusPrivateEndpointNetworkPoliciesEnabled))
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormatStatusPrivateLinkServiceNetworkPoliciesDisabled, SubnetPropertiesFormatStatusPrivateLinkServiceNetworkPoliciesEnabled))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["Purpose"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfigurationStatusARMGenerator())
	gens["Delegations"] = gen.SliceOf(DelegationStatusARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["IpConfigurationProfiles"] = gen.SliceOf(IPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(IPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["ResourceNavigationLinks"] = gen.SliceOf(ResourceNavigationLinkStatusARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["ServiceAssociationLinks"] = gen.SliceOf(ServiceAssociationLinkStatusARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatStatusARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationStatusARM, ApplicationGatewayIPConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationStatusARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationStatusARM(subject ApplicationGatewayIPConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_StatusARM instances for property testing - lazily instantiated by
//ApplicationGatewayIPConfigurationStatusARMGenerator()
var applicationGatewayIPConfigurationStatusARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationStatusARMGenerator returns a generator of ApplicationGatewayIPConfiguration_StatusARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationStatusARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationStatusARMGenerator != nil {
		return applicationGatewayIPConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM(generators)
	applicationGatewayIPConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM(generators)
	applicationGatewayIPConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_StatusARM{}), generators)

	return applicationGatewayIPConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator())
}

func Test_Delegation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegationStatusARM, DelegationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegationStatusARM runs a test to see if a specific instance of Delegation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegationStatusARM(subject Delegation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_StatusARM instances for property testing - lazily instantiated by
//DelegationStatusARMGenerator()
var delegationStatusARMGenerator gopter.Gen

// DelegationStatusARMGenerator returns a generator of Delegation_StatusARM instances for property testing.
// We first initialize delegationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DelegationStatusARMGenerator() gopter.Gen {
	if delegationStatusARMGenerator != nil {
		return delegationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationStatusARM(generators)
	delegationStatusARMGenerator = gen.Struct(reflect.TypeOf(Delegation_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationStatusARM(generators)
	AddRelatedPropertyGeneratorsForDelegationStatusARM(generators)
	delegationStatusARMGenerator = gen.Struct(reflect.TypeOf(Delegation_StatusARM{}), generators)

	return delegationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegationStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegationStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormatStatusARMGenerator())
}

func Test_IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by IPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationProfileStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by IPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARM, NetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by NetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var networkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	networkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM, PrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by PrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return privateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
}

func Test_ResourceNavigationLink_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLink_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLinkStatusARM, ResourceNavigationLinkStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLinkStatusARM runs a test to see if a specific instance of ResourceNavigationLink_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLinkStatusARM(subject ResourceNavigationLink_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLink_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLink_StatusARM instances for property testing - lazily instantiated by
//ResourceNavigationLinkStatusARMGenerator()
var resourceNavigationLinkStatusARMGenerator gopter.Gen

// ResourceNavigationLinkStatusARMGenerator returns a generator of ResourceNavigationLink_StatusARM instances for property testing.
// We first initialize resourceNavigationLinkStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceNavigationLinkStatusARMGenerator() gopter.Gen {
	if resourceNavigationLinkStatusARMGenerator != nil {
		return resourceNavigationLinkStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkStatusARM(generators)
	resourceNavigationLinkStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkStatusARM(generators)
	AddRelatedPropertyGeneratorsForResourceNavigationLinkStatusARM(generators)
	resourceNavigationLinkStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_StatusARM{}), generators)

	return resourceNavigationLinkStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLinkStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLinkStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForResourceNavigationLinkStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceNavigationLinkStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ResourceNavigationLinkFormatStatusARMGenerator())
}

func Test_RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARM, RouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by RouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var routeTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// RouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func RouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return routeTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	routeTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return routeTableStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceAssociationLink_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLink_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLinkStatusARM, ServiceAssociationLinkStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLinkStatusARM runs a test to see if a specific instance of ServiceAssociationLink_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLinkStatusARM(subject ServiceAssociationLink_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLink_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLink_StatusARM instances for property testing - lazily instantiated by
//ServiceAssociationLinkStatusARMGenerator()
var serviceAssociationLinkStatusARMGenerator gopter.Gen

// ServiceAssociationLinkStatusARMGenerator returns a generator of ServiceAssociationLink_StatusARM instances for property testing.
// We first initialize serviceAssociationLinkStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceAssociationLinkStatusARMGenerator() gopter.Gen {
	if serviceAssociationLinkStatusARMGenerator != nil {
		return serviceAssociationLinkStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkStatusARM(generators)
	serviceAssociationLinkStatusARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkStatusARM(generators)
	AddRelatedPropertyGeneratorsForServiceAssociationLinkStatusARM(generators)
	serviceAssociationLinkStatusARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_StatusARM{}), generators)

	return serviceAssociationLinkStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLinkStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLinkStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceAssociationLinkStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceAssociationLinkStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceAssociationLinkPropertiesFormatStatusARMGenerator())
}

func Test_ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARM, ServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by ServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var serviceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	serviceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormatStatusARM, ServiceEndpointPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormatStatusARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormatStatusARM(subject ServiceEndpointPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//ServiceEndpointPropertiesFormatStatusARMGenerator()
var serviceEndpointPropertiesFormatStatusARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormatStatusARMGenerator returns a generator of ServiceEndpointPropertiesFormat_StatusARM instances for property testing.
func ServiceEndpointPropertiesFormatStatusARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormatStatusARMGenerator != nil {
		return serviceEndpointPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatStatusARM(generators)
	serviceEndpointPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_StatusARM{}), generators)

	return serviceEndpointPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatStatusARM, ApplicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatStatusARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatStatusARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing - lazily
//instantiated by ApplicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM(generators)
	applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM(generators)
	applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//IPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func IPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

func Test_IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//IPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormatStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_ResourceNavigationLinkFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLinkFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLinkFormatStatusARM, ResourceNavigationLinkFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLinkFormatStatusARM runs a test to see if a specific instance of ResourceNavigationLinkFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLinkFormatStatusARM(subject ResourceNavigationLinkFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLinkFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLinkFormat_StatusARM instances for property testing - lazily instantiated by
//ResourceNavigationLinkFormatStatusARMGenerator()
var resourceNavigationLinkFormatStatusARMGenerator gopter.Gen

// ResourceNavigationLinkFormatStatusARMGenerator returns a generator of ResourceNavigationLinkFormat_StatusARM instances for property testing.
func ResourceNavigationLinkFormatStatusARMGenerator() gopter.Gen {
	if resourceNavigationLinkFormatStatusARMGenerator != nil {
		return resourceNavigationLinkFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkFormatStatusARM(generators)
	resourceNavigationLinkFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLinkFormat_StatusARM{}), generators)

	return resourceNavigationLinkFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLinkFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLinkFormatStatusARM(gens map[string]gopter.Gen) {
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

func Test_ServiceAssociationLinkPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLinkPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLinkPropertiesFormatStatusARM, ServiceAssociationLinkPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLinkPropertiesFormatStatusARM runs a test to see if a specific instance of ServiceAssociationLinkPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLinkPropertiesFormatStatusARM(subject ServiceAssociationLinkPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLinkPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLinkPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//ServiceAssociationLinkPropertiesFormatStatusARMGenerator()
var serviceAssociationLinkPropertiesFormatStatusARMGenerator gopter.Gen

// ServiceAssociationLinkPropertiesFormatStatusARMGenerator returns a generator of ServiceAssociationLinkPropertiesFormat_StatusARM instances for property testing.
func ServiceAssociationLinkPropertiesFormatStatusARMGenerator() gopter.Gen {
	if serviceAssociationLinkPropertiesFormatStatusARMGenerator != nil {
		return serviceAssociationLinkPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormatStatusARM(generators)
	serviceAssociationLinkPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLinkPropertiesFormat_StatusARM{}), generators)

	return serviceAssociationLinkPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["AllowDelete"] = gen.PtrOf(gen.Bool())
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

func Test_ServiceDelegationPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormatStatusARM, ServiceDelegationPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormatStatusARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormatStatusARM(subject ServiceDelegationPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//ServiceDelegationPropertiesFormatStatusARMGenerator()
var serviceDelegationPropertiesFormatStatusARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormatStatusARMGenerator returns a generator of ServiceDelegationPropertiesFormat_StatusARM instances for property testing.
func ServiceDelegationPropertiesFormatStatusARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormatStatusARMGenerator != nil {
		return serviceDelegationPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatStatusARM(generators)
	serviceDelegationPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_StatusARM{}), generators)

	return serviceDelegationPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM, PublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM(subject PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by PublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressStatusVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuStatusARMGenerator())
}
