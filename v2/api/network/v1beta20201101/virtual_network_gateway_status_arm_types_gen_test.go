// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySTATUSARM, VirtualNetworkGatewaySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySTATUSARM runs a test to see if a specific instance of VirtualNetworkGateway_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySTATUSARM(subject VirtualNetworkGateway_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySTATUSARMGenerator()
var virtualNetworkGatewaySTATUSARMGenerator gopter.Gen

// VirtualNetworkGatewaySTATUSARMGenerator returns a generator of VirtualNetworkGateway_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewaySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewaySTATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySTATUSARMGenerator != nil {
		return virtualNetworkGatewaySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM(generators)
	virtualNetworkGatewaySTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM(generators)
	virtualNetworkGatewaySTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_STATUSARM{}), generators)

	return virtualNetworkGatewaySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewaySTATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormatSTATUSARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatSTATUSARM, VirtualNetworkGatewayPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatSTATUSARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatSTATUSARM(subject VirtualNetworkGatewayPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayPropertiesFormatSTATUSARMGenerator()
var virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormatSTATUSARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM(generators)
	virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM(generators)
	virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_STATUSARM{}), generators)

	return virtualNetworkGatewayPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType_ExpressRoute, VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType_LocalGateway, VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType_Vpn))
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration_Generation1, VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration_Generation2, VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration_None))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatSTATUSVpnType_PolicyBased, VirtualNetworkGatewayPropertiesFormatSTATUSVpnType_RouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettingsSTATUSARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpaceSTATUSARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfigurationSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySkuSTATUSARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfigurationSTATUSARMGenerator())
}

func Test_AddressSpace_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceSTATUSARM, AddressSpaceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceSTATUSARM runs a test to see if a specific instance of AddressSpace_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceSTATUSARM(subject AddressSpace_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_STATUSARM instances for property testing - lazily instantiated by
// AddressSpaceSTATUSARMGenerator()
var addressSpaceSTATUSARMGenerator gopter.Gen

// AddressSpaceSTATUSARMGenerator returns a generator of AddressSpace_STATUSARM instances for property testing.
func AddressSpaceSTATUSARMGenerator() gopter.Gen {
	if addressSpaceSTATUSARMGenerator != nil {
		return addressSpaceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceSTATUSARM(generators)
	addressSpaceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_STATUSARM{}), generators)

	return addressSpaceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceSTATUSARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettingsSTATUSARM, BgpSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettingsSTATUSARM runs a test to see if a specific instance of BgpSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettingsSTATUSARM(subject BgpSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_STATUSARM instances for property testing - lazily instantiated by
// BgpSettingsSTATUSARMGenerator()
var bgpSettingsSTATUSARMGenerator gopter.Gen

// BgpSettingsSTATUSARMGenerator returns a generator of BgpSettings_STATUSARM instances for property testing.
// We first initialize bgpSettingsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettingsSTATUSARMGenerator() gopter.Gen {
	if bgpSettingsSTATUSARMGenerator != nil {
		return bgpSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsSTATUSARM(generators)
	bgpSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettingsSTATUSARM(generators)
	bgpSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_STATUSARM{}), generators)

	return bgpSettingsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettingsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettingsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddressSTATUSARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationSTATUSARM, VirtualNetworkGatewayIPConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationSTATUSARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationSTATUSARM(subject VirtualNetworkGatewayIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayIPConfigurationSTATUSARMGenerator()
var virtualNetworkGatewayIPConfigurationSTATUSARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationSTATUSARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationSTATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationSTATUSARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM(generators)
	virtualNetworkGatewayIPConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM(generators)
	virtualNetworkGatewayIPConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_STATUSARM{}), generators)

	return virtualNetworkGatewayIPConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator())
}

func Test_VirtualNetworkGatewaySku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySkuSTATUSARM, VirtualNetworkGatewaySkuSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySkuSTATUSARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySkuSTATUSARM(subject VirtualNetworkGatewaySku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySkuSTATUSARMGenerator()
var virtualNetworkGatewaySkuSTATUSARMGenerator gopter.Gen

// VirtualNetworkGatewaySkuSTATUSARMGenerator returns a generator of VirtualNetworkGatewaySku_STATUSARM instances for property testing.
func VirtualNetworkGatewaySkuSTATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySkuSTATUSARMGenerator != nil {
		return virtualNetworkGatewaySkuSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuSTATUSARM(generators)
	virtualNetworkGatewaySkuSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_STATUSARM{}), generators)

	return virtualNetworkGatewaySkuSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuSTATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySkuSTATUSName_Basic,
		VirtualNetworkGatewaySkuSTATUSName_ErGw1AZ,
		VirtualNetworkGatewaySkuSTATUSName_ErGw2AZ,
		VirtualNetworkGatewaySkuSTATUSName_ErGw3AZ,
		VirtualNetworkGatewaySkuSTATUSName_HighPerformance,
		VirtualNetworkGatewaySkuSTATUSName_Standard,
		VirtualNetworkGatewaySkuSTATUSName_UltraPerformance,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw1,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw1AZ,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw2,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw2AZ,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw3,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw3AZ,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw4,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw4AZ,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw5,
		VirtualNetworkGatewaySkuSTATUSName_VpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySkuSTATUSTier_Basic,
		VirtualNetworkGatewaySkuSTATUSTier_ErGw1AZ,
		VirtualNetworkGatewaySkuSTATUSTier_ErGw2AZ,
		VirtualNetworkGatewaySkuSTATUSTier_ErGw3AZ,
		VirtualNetworkGatewaySkuSTATUSTier_HighPerformance,
		VirtualNetworkGatewaySkuSTATUSTier_Standard,
		VirtualNetworkGatewaySkuSTATUSTier_UltraPerformance,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw1,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw1AZ,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw2,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw2AZ,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw3,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw3AZ,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw4,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw4AZ,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw5,
		VirtualNetworkGatewaySkuSTATUSTier_VpnGw5AZ))
}

func Test_VpnClientConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfigurationSTATUSARM, VpnClientConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfigurationSTATUSARM runs a test to see if a specific instance of VpnClientConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfigurationSTATUSARM(subject VpnClientConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_STATUSARM instances for property testing - lazily instantiated by
// VpnClientConfigurationSTATUSARMGenerator()
var vpnClientConfigurationSTATUSARMGenerator gopter.Gen

// VpnClientConfigurationSTATUSARMGenerator returns a generator of VpnClientConfiguration_STATUSARM instances for property testing.
// We first initialize vpnClientConfigurationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfigurationSTATUSARMGenerator() gopter.Gen {
	if vpnClientConfigurationSTATUSARMGenerator != nil {
		return vpnClientConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationSTATUSARM(generators)
	vpnClientConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfigurationSTATUSARM(generators)
	vpnClientConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_STATUSARM{}), generators)

	return vpnClientConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfigurationSTATUSVpnAuthenticationTypes_AAD, VpnClientConfigurationSTATUSVpnAuthenticationTypes_Certificate, VpnClientConfigurationSTATUSVpnAuthenticationTypes_Radius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfigurationSTATUSVpnClientProtocols_IkeV2, VpnClientConfigurationSTATUSVpnClientProtocols_OpenVPN, VpnClientConfigurationSTATUSVpnClientProtocols_SSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServerSTATUSARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpaceSTATUSARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicySTATUSARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificateSTATUSARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificateSTATUSARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddressSTATUSARM, IPConfigurationBgpPeeringAddressSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddressSTATUSARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddressSTATUSARM(subject IPConfigurationBgpPeeringAddress_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_STATUSARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddressSTATUSARMGenerator()
var ipConfigurationBgpPeeringAddressSTATUSARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddressSTATUSARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_STATUSARM instances for property testing.
func IPConfigurationBgpPeeringAddressSTATUSARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddressSTATUSARMGenerator != nil {
		return ipConfigurationBgpPeeringAddressSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressSTATUSARM(generators)
	ipConfigurationBgpPeeringAddressSTATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_STATUSARM{}), generators)

	return ipConfigurationBgpPeeringAddressSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressSTATUSARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicySTATUSARM, IpsecPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicySTATUSARM runs a test to see if a specific instance of IpsecPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicySTATUSARM(subject IpsecPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_STATUSARM instances for property testing - lazily instantiated by
// IpsecPolicySTATUSARMGenerator()
var ipsecPolicySTATUSARMGenerator gopter.Gen

// IpsecPolicySTATUSARMGenerator returns a generator of IpsecPolicy_STATUSARM instances for property testing.
func IpsecPolicySTATUSARMGenerator() gopter.Gen {
	if ipsecPolicySTATUSARMGenerator != nil {
		return ipsecPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicySTATUSARM(generators)
	ipsecPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_STATUSARM{}), generators)

	return ipsecPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		DhGroup_STATUS_DHGroup1,
		DhGroup_STATUS_DHGroup14,
		DhGroup_STATUS_DHGroup2,
		DhGroup_STATUS_DHGroup2048,
		DhGroup_STATUS_DHGroup24,
		DhGroup_STATUS_ECP256,
		DhGroup_STATUS_ECP384,
		DhGroup_STATUS_None))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IkeEncryption_STATUS_AES128,
		IkeEncryption_STATUS_AES192,
		IkeEncryption_STATUS_AES256,
		IkeEncryption_STATUS_DES,
		IkeEncryption_STATUS_DES3,
		IkeEncryption_STATUS_GCMAES128,
		IkeEncryption_STATUS_GCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IkeIntegrity_STATUS_GCMAES128,
		IkeIntegrity_STATUS_GCMAES256,
		IkeIntegrity_STATUS_MD5,
		IkeIntegrity_STATUS_SHA1,
		IkeIntegrity_STATUS_SHA256,
		IkeIntegrity_STATUS_SHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecEncryption_STATUS_AES128,
		IpsecEncryption_STATUS_AES192,
		IpsecEncryption_STATUS_AES256,
		IpsecEncryption_STATUS_DES,
		IpsecEncryption_STATUS_DES3,
		IpsecEncryption_STATUS_GCMAES128,
		IpsecEncryption_STATUS_GCMAES192,
		IpsecEncryption_STATUS_GCMAES256,
		IpsecEncryption_STATUS_None))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecIntegrity_STATUS_GCMAES128,
		IpsecIntegrity_STATUS_GCMAES192,
		IpsecIntegrity_STATUS_GCMAES256,
		IpsecIntegrity_STATUS_MD5,
		IpsecIntegrity_STATUS_SHA1,
		IpsecIntegrity_STATUS_SHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		PfsGroup_STATUS_ECP256,
		PfsGroup_STATUS_ECP384,
		PfsGroup_STATUS_None,
		PfsGroup_STATUS_PFS1,
		PfsGroup_STATUS_PFS14,
		PfsGroup_STATUS_PFS2,
		PfsGroup_STATUS_PFS2048,
		PfsGroup_STATUS_PFS24,
		PfsGroup_STATUS_PFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServer_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServerSTATUSARM, RadiusServerSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServerSTATUSARM runs a test to see if a specific instance of RadiusServer_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServerSTATUSARM(subject RadiusServer_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_STATUSARM instances for property testing - lazily instantiated by
// RadiusServerSTATUSARMGenerator()
var radiusServerSTATUSARMGenerator gopter.Gen

// RadiusServerSTATUSARMGenerator returns a generator of RadiusServer_STATUSARM instances for property testing.
func RadiusServerSTATUSARMGenerator() gopter.Gen {
	if radiusServerSTATUSARMGenerator != nil {
		return radiusServerSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServerSTATUSARM(generators)
	radiusServerSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_STATUSARM{}), generators)

	return radiusServerSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServerSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServerSTATUSARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM, VirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
}

func Test_VpnClientRevokedCertificate_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificateSTATUSARM, VpnClientRevokedCertificateSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificateSTATUSARM runs a test to see if a specific instance of VpnClientRevokedCertificate_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificateSTATUSARM(subject VpnClientRevokedCertificate_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_STATUSARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificateSTATUSARMGenerator()
var vpnClientRevokedCertificateSTATUSARMGenerator gopter.Gen

// VpnClientRevokedCertificateSTATUSARMGenerator returns a generator of VpnClientRevokedCertificate_STATUSARM instances for property testing.
// We first initialize vpnClientRevokedCertificateSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificateSTATUSARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificateSTATUSARMGenerator != nil {
		return vpnClientRevokedCertificateSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM(generators)
	vpnClientRevokedCertificateSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM(generators)
	vpnClientRevokedCertificateSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_STATUSARM{}), generators)

	return vpnClientRevokedCertificateSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator())
}

func Test_VpnClientRootCertificate_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificateSTATUSARM, VpnClientRootCertificateSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificateSTATUSARM runs a test to see if a specific instance of VpnClientRootCertificate_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificateSTATUSARM(subject VpnClientRootCertificate_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_STATUSARM instances for property testing - lazily instantiated by
// VpnClientRootCertificateSTATUSARMGenerator()
var vpnClientRootCertificateSTATUSARMGenerator gopter.Gen

// VpnClientRootCertificateSTATUSARMGenerator returns a generator of VpnClientRootCertificate_STATUSARM instances for property testing.
// We first initialize vpnClientRootCertificateSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificateSTATUSARMGenerator() gopter.Gen {
	if vpnClientRootCertificateSTATUSARMGenerator != nil {
		return vpnClientRootCertificateSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateSTATUSARM(generators)
	vpnClientRootCertificateSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificateSTATUSARM(generators)
	vpnClientRootCertificateSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_STATUSARM{}), generators)

	return vpnClientRootCertificateSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificateSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificateSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificateSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificateSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormatSTATUSARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatSTATUSARM, VpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatSTATUSARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatSTATUSARM(subject VpnClientRevokedCertificatePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by VpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator()
var vpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_STATUSARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatSTATUSARM(generators)
	vpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_STATUSARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatSTATUSARM, VpnClientRootCertificatePropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatSTATUSARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatSTATUSARM(subject VpnClientRootCertificatePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_STATUSARM instances for property testing - lazily instantiated
// by VpnClientRootCertificatePropertiesFormatSTATUSARMGenerator()
var vpnClientRootCertificatePropertiesFormatSTATUSARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormatSTATUSARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_STATUSARM instances for property testing.
func VpnClientRootCertificatePropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormatSTATUSARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatSTATUSARM(generators)
	vpnClientRootCertificatePropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_STATUSARM{}), generators)

	return vpnClientRootCertificatePropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
