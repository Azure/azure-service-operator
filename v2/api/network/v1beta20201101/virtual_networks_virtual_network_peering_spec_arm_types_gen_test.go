// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_VirtualNetworkPeering_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_VirtualNetworkPeering_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_VirtualNetworkPeering_SpecARM, VirtualNetworks_VirtualNetworkPeering_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_VirtualNetworkPeering_SpecARM runs a test to see if a specific instance of VirtualNetworks_VirtualNetworkPeering_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_VirtualNetworkPeering_SpecARM(subject VirtualNetworks_VirtualNetworkPeering_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_VirtualNetworkPeering_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_VirtualNetworkPeering_SpecARM instances for property testing - lazily instantiated by
// VirtualNetworks_VirtualNetworkPeering_SpecARMGenerator()
var virtualNetworks_VirtualNetworkPeering_SpecARMGenerator gopter.Gen

// VirtualNetworks_VirtualNetworkPeering_SpecARMGenerator returns a generator of VirtualNetworks_VirtualNetworkPeering_SpecARM instances for property testing.
// We first initialize virtualNetworks_VirtualNetworkPeering_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_VirtualNetworkPeering_SpecARMGenerator() gopter.Gen {
	if virtualNetworks_VirtualNetworkPeering_SpecARMGenerator != nil {
		return virtualNetworks_VirtualNetworkPeering_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM(generators)
	virtualNetworks_VirtualNetworkPeering_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_VirtualNetworkPeering_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM(generators)
	virtualNetworks_VirtualNetworkPeering_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_VirtualNetworkPeering_SpecARM{}), generators)

	return virtualNetworks_VirtualNetworkPeering_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_VirtualNetworkPeering_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkPeeringPropertiesFormatARMGenerator())
}

func Test_VirtualNetworkPeeringPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeeringPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeeringPropertiesFormatARM, VirtualNetworkPeeringPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeeringPropertiesFormatARM runs a test to see if a specific instance of VirtualNetworkPeeringPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeeringPropertiesFormatARM(subject VirtualNetworkPeeringPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeeringPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeeringPropertiesFormatARM instances for property testing - lazily instantiated by
// VirtualNetworkPeeringPropertiesFormatARMGenerator()
var virtualNetworkPeeringPropertiesFormatARMGenerator gopter.Gen

// VirtualNetworkPeeringPropertiesFormatARMGenerator returns a generator of VirtualNetworkPeeringPropertiesFormatARM instances for property testing.
// We first initialize virtualNetworkPeeringPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPeeringPropertiesFormatARMGenerator() gopter.Gen {
	if virtualNetworkPeeringPropertiesFormatARMGenerator != nil {
		return virtualNetworkPeeringPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM(generators)
	virtualNetworkPeeringPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeeringPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM(generators)
	virtualNetworkPeeringPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeeringPropertiesFormatARM{}), generators)

	return virtualNetworkPeeringPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["AllowForwardedTraffic"] = gen.PtrOf(gen.Bool())
	gens["AllowGatewayTransit"] = gen.PtrOf(gen.Bool())
	gens["AllowVirtualNetworkAccess"] = gen.PtrOf(gen.Bool())
	gens["PeeringState"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkPeeringPropertiesFormat_PeeringState_Connected, VirtualNetworkPeeringPropertiesFormat_PeeringState_Disconnected, VirtualNetworkPeeringPropertiesFormat_PeeringState_Initiated))
	gens["UseRemoteGateways"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPeeringPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["RemoteAddressSpace"] = gen.PtrOf(AddressSpaceARMGenerator())
	gens["RemoteBgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunitiesARMGenerator())
	gens["RemoteVirtualNetwork"] = gen.PtrOf(SubResourceARMGenerator())
}
