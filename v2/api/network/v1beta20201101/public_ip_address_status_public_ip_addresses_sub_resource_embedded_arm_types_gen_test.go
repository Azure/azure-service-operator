// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM, PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(subject PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()
var publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator != nil {
		return publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	return publicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(PublicIPAddressPropertiesFormat_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_STATUSARMGenerator())
}

func Test_PublicIPAddressPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressPropertiesFormat_STATUSARM, PublicIPAddressPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressPropertiesFormat_STATUSARM runs a test to see if a specific instance of PublicIPAddressPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressPropertiesFormat_STATUSARM(subject PublicIPAddressPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// PublicIPAddressPropertiesFormat_STATUSARMGenerator()
var publicIPAddressPropertiesFormat_STATUSARMGenerator gopter.Gen

// PublicIPAddressPropertiesFormat_STATUSARMGenerator returns a generator of PublicIPAddressPropertiesFormat_STATUSARM instances for property testing.
// We first initialize publicIPAddressPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if publicIPAddressPropertiesFormat_STATUSARMGenerator != nil {
		return publicIPAddressPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM(generators)
	publicIPAddressPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM(generators)
	publicIPAddressPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressPropertiesFormat_STATUSARM{}), generators)

	return publicIPAddressPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		PublicIPAddressPropertiesFormat_STATUS_MigrationPhase_Abort,
		PublicIPAddressPropertiesFormat_STATUS_MigrationPhase_Commit,
		PublicIPAddressPropertiesFormat_STATUS_MigrationPhase_Committed,
		PublicIPAddressPropertiesFormat_STATUS_MigrationPhase_None,
		PublicIPAddressPropertiesFormat_STATUS_MigrationPhase_Prepare))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_STATUS_IPv4, IPVersion_STATUS_IPv6))
	gens["PublicIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DdosSettings"] = gen.PtrOf(DdosSettings_STATUSARMGenerator())
	gens["DnsSettings"] = gen.PtrOf(PublicIPAddressDnsSettings_STATUSARMGenerator())
	gens["IpConfiguration"] = gen.PtrOf(IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator())
	gens["IpTags"] = gen.SliceOf(IpTag_STATUSARMGenerator())
	gens["NatGateway"] = gen.PtrOf(NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_PublicIPAddressSku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressSku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSku_STATUSARM, PublicIPAddressSku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSku_STATUSARM runs a test to see if a specific instance of PublicIPAddressSku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSku_STATUSARM(subject PublicIPAddressSku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressSku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressSku_STATUSARM instances for property testing - lazily instantiated by
// PublicIPAddressSku_STATUSARMGenerator()
var publicIPAddressSku_STATUSARMGenerator gopter.Gen

// PublicIPAddressSku_STATUSARMGenerator returns a generator of PublicIPAddressSku_STATUSARM instances for property testing.
func PublicIPAddressSku_STATUSARMGenerator() gopter.Gen {
	if publicIPAddressSku_STATUSARMGenerator != nil {
		return publicIPAddressSku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSku_STATUSARM(generators)
	publicIPAddressSku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSku_STATUSARM{}), generators)

	return publicIPAddressSku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(PublicIPAddressSku_STATUS_Name_Basic, PublicIPAddressSku_STATUS_Name_Standard))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(PublicIPAddressSku_STATUS_Tier_Global, PublicIPAddressSku_STATUS_Tier_Regional))
}

func Test_DdosSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DdosSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDdosSettings_STATUSARM, DdosSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDdosSettings_STATUSARM runs a test to see if a specific instance of DdosSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDdosSettings_STATUSARM(subject DdosSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DdosSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DdosSettings_STATUSARM instances for property testing - lazily instantiated by
// DdosSettings_STATUSARMGenerator()
var ddosSettings_STATUSARMGenerator gopter.Gen

// DdosSettings_STATUSARMGenerator returns a generator of DdosSettings_STATUSARM instances for property testing.
// We first initialize ddosSettings_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DdosSettings_STATUSARMGenerator() gopter.Gen {
	if ddosSettings_STATUSARMGenerator != nil {
		return ddosSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_STATUSARM(generators)
	ddosSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DdosSettings_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDdosSettings_STATUSARM(generators)
	ddosSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DdosSettings_STATUSARM{}), generators)

	return ddosSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDdosSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDdosSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProtectedIP"] = gen.PtrOf(gen.Bool())
	gens["ProtectionCoverage"] = gen.PtrOf(gen.OneConstOf(DdosSettings_STATUS_ProtectionCoverage_Basic, DdosSettings_STATUS_ProtectionCoverage_Standard))
}

// AddRelatedPropertyGeneratorsForDdosSettings_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDdosSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["DdosCustomPolicy"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM, IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(subject IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()
var ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator gopter.Gen

// IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator returns a generator of IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator != nil {
		return ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	return ipConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfiguration_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator())
}

func Test_IpTag_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpTag_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpTag_STATUSARM, IpTag_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpTag_STATUSARM runs a test to see if a specific instance of IpTag_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpTag_STATUSARM(subject IpTag_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpTag_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpTag_STATUSARM instances for property testing - lazily instantiated by IpTag_STATUSARMGenerator()
var ipTag_STATUSARMGenerator gopter.Gen

// IpTag_STATUSARMGenerator returns a generator of IpTag_STATUSARM instances for property testing.
func IpTag_STATUSARMGenerator() gopter.Gen {
	if ipTag_STATUSARMGenerator != nil {
		return ipTag_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpTag_STATUSARM(generators)
	ipTag_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IpTag_STATUSARM{}), generators)

	return ipTag_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpTag_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpTag_STATUSARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM, NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM runs a test to see if a specific instance of NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(subject NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()
var natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator gopter.Gen

// NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator returns a generator of NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing.
// We first initialize natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator != nil {
		return natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	return natGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNatGateway_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Sku"] = gen.PtrOf(NatGatewaySku_STATUSARMGenerator())
}

func Test_PublicIPAddressDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressDnsSettings_STATUSARM, PublicIPAddressDnsSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressDnsSettings_STATUSARM runs a test to see if a specific instance of PublicIPAddressDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressDnsSettings_STATUSARM(subject PublicIPAddressDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressDnsSettings_STATUSARM instances for property testing - lazily instantiated by
// PublicIPAddressDnsSettings_STATUSARMGenerator()
var publicIPAddressDnsSettings_STATUSARMGenerator gopter.Gen

// PublicIPAddressDnsSettings_STATUSARMGenerator returns a generator of PublicIPAddressDnsSettings_STATUSARM instances for property testing.
func PublicIPAddressDnsSettings_STATUSARMGenerator() gopter.Gen {
	if publicIPAddressDnsSettings_STATUSARMGenerator != nil {
		return publicIPAddressDnsSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_STATUSARM(generators)
	publicIPAddressDnsSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressDnsSettings_STATUSARM{}), generators)

	return publicIPAddressDnsSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ReverseFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM, IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(subject IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by
// IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()
var ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator returns a generator of IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator())
}

func Test_NatGatewaySku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGatewaySku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGatewaySku_STATUSARM, NatGatewaySku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGatewaySku_STATUSARM runs a test to see if a specific instance of NatGatewaySku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGatewaySku_STATUSARM(subject NatGatewaySku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGatewaySku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGatewaySku_STATUSARM instances for property testing - lazily instantiated by
// NatGatewaySku_STATUSARMGenerator()
var natGatewaySku_STATUSARMGenerator gopter.Gen

// NatGatewaySku_STATUSARMGenerator returns a generator of NatGatewaySku_STATUSARM instances for property testing.
func NatGatewaySku_STATUSARMGenerator() gopter.Gen {
	if natGatewaySku_STATUSARMGenerator != nil {
		return natGatewaySku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGatewaySku_STATUSARM(generators)
	natGatewaySku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NatGatewaySku_STATUSARM{}), generators)

	return natGatewaySku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNatGatewaySku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGatewaySku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(NatGatewaySku_STATUS_Name_Standard))
}

func Test_Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM, Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(subject Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator()
var subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator gopter.Gen

// Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator returns a generator of Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM instances for property testing.
func Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator != nil {
		return subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(generators)
	subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM{}), generators)

	return subnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_STATUS_PublicIPAddresses_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
