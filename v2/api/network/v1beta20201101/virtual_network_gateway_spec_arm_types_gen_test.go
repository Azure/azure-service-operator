// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_ARM, VirtualNetworkGateway_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_ARM(subject VirtualNetworkGateway_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_Spec_ARMGenerator()
var virtualNetworkGateway_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(generators)
	virtualNetworkGateway_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(generators)
	virtualNetworkGateway_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_ARM{}), generators)

	return virtualNetworkGateway_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_ARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_ARM, VirtualNetworkGatewayPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_ARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_ARM(subject VirtualNetworkGatewayPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayPropertiesFormat_ARMGenerator()
var virtualNetworkGatewayPropertiesFormat_ARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormat_ARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_ARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormat_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormat_ARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM(generators)
	virtualNetworkGatewayPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM(generators)
	virtualNetworkGatewayPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_ARM{}), generators)

	return virtualNetworkGatewayPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayType_ExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayType_LocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayType_Vpn))
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Generation1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Generation2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_None))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnType_PolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnType_RouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_ARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_ARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_ARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_ARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_ARMGenerator())
}

func Test_AddressSpace_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_ARM, AddressSpace_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_ARM runs a test to see if a specific instance of AddressSpace_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_ARM(subject AddressSpace_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_ARM instances for property testing - lazily instantiated by AddressSpace_ARMGenerator()
var addressSpace_ARMGenerator gopter.Gen

// AddressSpace_ARMGenerator returns a generator of AddressSpace_ARM instances for property testing.
func AddressSpace_ARMGenerator() gopter.Gen {
	if addressSpace_ARMGenerator != nil {
		return addressSpace_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_ARM(generators)
	addressSpace_ARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_ARM{}), generators)

	return addressSpace_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_ARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_ARM, BgpSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_ARM runs a test to see if a specific instance of BgpSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_ARM(subject BgpSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_ARM instances for property testing - lazily instantiated by BgpSettings_ARMGenerator()
var bgpSettings_ARMGenerator gopter.Gen

// BgpSettings_ARMGenerator returns a generator of BgpSettings_ARM instances for property testing.
// We first initialize bgpSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_ARMGenerator() gopter.Gen {
	if bgpSettings_ARMGenerator != nil {
		return bgpSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_ARM(generators)
	bgpSettings_ARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_ARM(generators)
	bgpSettings_ARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_ARM{}), generators)

	return bgpSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_ARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_ARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_ARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_ARM, VirtualNetworkGatewayIPConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_ARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_ARM(subject VirtualNetworkGatewayIPConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayIPConfiguration_ARMGenerator()
var virtualNetworkGatewayIPConfiguration_ARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_ARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_ARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_ARMGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM(generators)
	virtualNetworkGatewayIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM(generators)
	virtualNetworkGatewayIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_ARM{}), generators)

	return virtualNetworkGatewayIPConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkGatewaySku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_ARM, VirtualNetworkGatewaySku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_ARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_ARM(subject VirtualNetworkGatewaySku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySku_ARMGenerator()
var virtualNetworkGatewaySku_ARMGenerator gopter.Gen

// VirtualNetworkGatewaySku_ARMGenerator returns a generator of VirtualNetworkGatewaySku_ARM instances for property testing.
func VirtualNetworkGatewaySku_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_ARMGenerator != nil {
		return virtualNetworkGatewaySku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_ARM(generators)
	virtualNetworkGatewaySku_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_ARM{}), generators)

	return virtualNetworkGatewaySku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_Basic,
		VirtualNetworkGatewaySku_Name_ErGw1AZ,
		VirtualNetworkGatewaySku_Name_ErGw2AZ,
		VirtualNetworkGatewaySku_Name_ErGw3AZ,
		VirtualNetworkGatewaySku_Name_HighPerformance,
		VirtualNetworkGatewaySku_Name_Standard,
		VirtualNetworkGatewaySku_Name_UltraPerformance,
		VirtualNetworkGatewaySku_Name_VpnGw1,
		VirtualNetworkGatewaySku_Name_VpnGw1AZ,
		VirtualNetworkGatewaySku_Name_VpnGw2,
		VirtualNetworkGatewaySku_Name_VpnGw2AZ,
		VirtualNetworkGatewaySku_Name_VpnGw3,
		VirtualNetworkGatewaySku_Name_VpnGw3AZ,
		VirtualNetworkGatewaySku_Name_VpnGw4,
		VirtualNetworkGatewaySku_Name_VpnGw4AZ,
		VirtualNetworkGatewaySku_Name_VpnGw5,
		VirtualNetworkGatewaySku_Name_VpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_Basic,
		VirtualNetworkGatewaySku_Tier_ErGw1AZ,
		VirtualNetworkGatewaySku_Tier_ErGw2AZ,
		VirtualNetworkGatewaySku_Tier_ErGw3AZ,
		VirtualNetworkGatewaySku_Tier_HighPerformance,
		VirtualNetworkGatewaySku_Tier_Standard,
		VirtualNetworkGatewaySku_Tier_UltraPerformance,
		VirtualNetworkGatewaySku_Tier_VpnGw1,
		VirtualNetworkGatewaySku_Tier_VpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw2,
		VirtualNetworkGatewaySku_Tier_VpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw3,
		VirtualNetworkGatewaySku_Tier_VpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw4,
		VirtualNetworkGatewaySku_Tier_VpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw5,
		VirtualNetworkGatewaySku_Tier_VpnGw5AZ))
}

func Test_VpnClientConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_ARM, VpnClientConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_ARM runs a test to see if a specific instance of VpnClientConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_ARM(subject VpnClientConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_ARM instances for property testing - lazily instantiated by
// VpnClientConfiguration_ARMGenerator()
var vpnClientConfiguration_ARMGenerator gopter.Gen

// VpnClientConfiguration_ARMGenerator returns a generator of VpnClientConfiguration_ARM instances for property testing.
// We first initialize vpnClientConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_ARMGenerator() gopter.Gen {
	if vpnClientConfiguration_ARMGenerator != nil {
		return vpnClientConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_ARM(generators)
	vpnClientConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_ARM(generators)
	vpnClientConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_ARM{}), generators)

	return vpnClientConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypes_AAD, VpnClientConfiguration_VpnAuthenticationTypes_Certificate, VpnClientConfiguration_VpnAuthenticationTypes_Radius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocols_IkeV2, VpnClientConfiguration_VpnClientProtocols_OpenVPN, VpnClientConfiguration_VpnClientProtocols_SSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_ARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_ARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_ARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_ARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_ARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_ARM, IPConfigurationBgpPeeringAddress_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_ARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_ARM(subject IPConfigurationBgpPeeringAddress_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_ARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddress_ARMGenerator()
var ipConfigurationBgpPeeringAddress_ARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_ARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_ARM instances for property testing.
func IPConfigurationBgpPeeringAddress_ARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_ARMGenerator != nil {
		return ipConfigurationBgpPeeringAddress_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_ARM(generators)
	ipConfigurationBgpPeeringAddress_ARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_ARM{}), generators)

	return ipConfigurationBgpPeeringAddress_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_ARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpsecPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_ARM, IpsecPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_ARM runs a test to see if a specific instance of IpsecPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_ARM(subject IpsecPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_ARM instances for property testing - lazily instantiated by IpsecPolicy_ARMGenerator()
var ipsecPolicy_ARMGenerator gopter.Gen

// IpsecPolicy_ARMGenerator returns a generator of IpsecPolicy_ARM instances for property testing.
func IpsecPolicy_ARMGenerator() gopter.Gen {
	if ipsecPolicy_ARMGenerator != nil {
		return ipsecPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_ARM(generators)
	ipsecPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_ARM{}), generators)

	return ipsecPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_ARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		DhGroup_DHGroup1,
		DhGroup_DHGroup14,
		DhGroup_DHGroup2,
		DhGroup_DHGroup2048,
		DhGroup_DHGroup24,
		DhGroup_ECP256,
		DhGroup_ECP384,
		DhGroup_None))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IkeEncryption_AES128,
		IkeEncryption_AES192,
		IkeEncryption_AES256,
		IkeEncryption_DES,
		IkeEncryption_DES3,
		IkeEncryption_GCMAES128,
		IkeEncryption_GCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IkeIntegrity_GCMAES128,
		IkeIntegrity_GCMAES256,
		IkeIntegrity_MD5,
		IkeIntegrity_SHA1,
		IkeIntegrity_SHA256,
		IkeIntegrity_SHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecEncryption_AES128,
		IpsecEncryption_AES192,
		IpsecEncryption_AES256,
		IpsecEncryption_DES,
		IpsecEncryption_DES3,
		IpsecEncryption_GCMAES128,
		IpsecEncryption_GCMAES192,
		IpsecEncryption_GCMAES256,
		IpsecEncryption_None))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecIntegrity_GCMAES128,
		IpsecIntegrity_GCMAES192,
		IpsecIntegrity_GCMAES256,
		IpsecIntegrity_MD5,
		IpsecIntegrity_SHA1,
		IpsecIntegrity_SHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		PfsGroup_ECP256,
		PfsGroup_ECP384,
		PfsGroup_None,
		PfsGroup_PFS1,
		PfsGroup_PFS14,
		PfsGroup_PFS2,
		PfsGroup_PFS2048,
		PfsGroup_PFS24,
		PfsGroup_PFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServer_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_ARM, RadiusServer_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_ARM runs a test to see if a specific instance of RadiusServer_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_ARM(subject RadiusServer_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_ARM instances for property testing - lazily instantiated by RadiusServer_ARMGenerator()
var radiusServer_ARMGenerator gopter.Gen

// RadiusServer_ARMGenerator returns a generator of RadiusServer_ARM instances for property testing.
func RadiusServer_ARMGenerator() gopter.Gen {
	if radiusServer_ARMGenerator != nil {
		return radiusServer_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_ARM(generators)
	radiusServer_ARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_ARM{}), generators)

	return radiusServer_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_ARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM, VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_Dynamic, IPAllocationMethod_Static))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_ARMGenerator())
}

func Test_VpnClientRevokedCertificate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_ARM, VpnClientRevokedCertificate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_ARM runs a test to see if a specific instance of VpnClientRevokedCertificate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_ARM(subject VpnClientRevokedCertificate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_ARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificate_ARMGenerator()
var vpnClientRevokedCertificate_ARMGenerator gopter.Gen

// VpnClientRevokedCertificate_ARMGenerator returns a generator of VpnClientRevokedCertificate_ARM instances for property testing.
// We first initialize vpnClientRevokedCertificate_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificate_ARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_ARMGenerator != nil {
		return vpnClientRevokedCertificate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_ARM(generators)
	vpnClientRevokedCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_ARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_ARM(generators)
	vpnClientRevokedCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_ARM{}), generators)

	return vpnClientRevokedCertificate_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormat_ARMGenerator())
}

func Test_VpnClientRootCertificate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_ARM, VpnClientRootCertificate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_ARM runs a test to see if a specific instance of VpnClientRootCertificate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_ARM(subject VpnClientRootCertificate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_ARM instances for property testing - lazily instantiated by
// VpnClientRootCertificate_ARMGenerator()
var vpnClientRootCertificate_ARMGenerator gopter.Gen

// VpnClientRootCertificate_ARMGenerator returns a generator of VpnClientRootCertificate_ARM instances for property testing.
// We first initialize vpnClientRootCertificate_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificate_ARMGenerator() gopter.Gen {
	if vpnClientRootCertificate_ARMGenerator != nil {
		return vpnClientRootCertificate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_ARM(generators)
	vpnClientRootCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_ARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificate_ARM(generators)
	vpnClientRootCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_ARM{}), generators)

	return vpnClientRootCertificate_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormat_ARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_ARM, VpnClientRevokedCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_ARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_ARM(subject VpnClientRevokedCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_ARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificatePropertiesFormat_ARMGenerator()
var vpnClientRevokedCertificatePropertiesFormat_ARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormat_ARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_ARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormat_ARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_ARM(generators)
	vpnClientRevokedCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_ARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_ARM, VpnClientRootCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_ARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_ARM(subject VpnClientRootCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_ARM instances for property testing - lazily instantiated by
// VpnClientRootCertificatePropertiesFormat_ARMGenerator()
var vpnClientRootCertificatePropertiesFormat_ARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormat_ARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_ARM instances for property testing.
func VpnClientRootCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormat_ARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_ARM(generators)
	vpnClientRootCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_ARM{}), generators)

	return vpnClientRootCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
