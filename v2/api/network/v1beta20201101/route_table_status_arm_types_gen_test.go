// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTable_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableSTATUSARM, RouteTableSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableSTATUSARM runs a test to see if a specific instance of RouteTable_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableSTATUSARM(subject RouteTable_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_STATUSARM instances for property testing - lazily instantiated by
// RouteTableSTATUSARMGenerator()
var routeTableSTATUSARMGenerator gopter.Gen

// RouteTableSTATUSARMGenerator returns a generator of RouteTable_STATUSARM instances for property testing.
// We first initialize routeTableSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTableSTATUSARMGenerator() gopter.Gen {
	if routeTableSTATUSARMGenerator != nil {
		return routeTableSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSTATUSARM(generators)
	routeTableSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForRouteTableSTATUSARM(generators)
	routeTableSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_STATUSARM{}), generators)

	return routeTableSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTableSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTableSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormatSTATUSARMGenerator())
}

func Test_RouteTablePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablePropertiesFormatSTATUSARM, RouteTablePropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablePropertiesFormatSTATUSARM runs a test to see if a specific instance of RouteTablePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablePropertiesFormatSTATUSARM(subject RouteTablePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// RouteTablePropertiesFormatSTATUSARMGenerator()
var routeTablePropertiesFormatSTATUSARMGenerator gopter.Gen

// RouteTablePropertiesFormatSTATUSARMGenerator returns a generator of RouteTablePropertiesFormat_STATUSARM instances for property testing.
func RouteTablePropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if routeTablePropertiesFormatSTATUSARMGenerator != nil {
		return routeTablePropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSTATUSARM(generators)
	routeTablePropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_STATUSARM{}), generators)

	return routeTablePropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}
