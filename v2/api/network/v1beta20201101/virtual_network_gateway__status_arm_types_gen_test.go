// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayStatusARM, VirtualNetworkGatewayStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayStatusARM runs a test to see if a specific instance of VirtualNetworkGateway_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayStatusARM(subject VirtualNetworkGateway_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_StatusARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayStatusARMGenerator()
var virtualNetworkGatewayStatusARMGenerator gopter.Gen

// VirtualNetworkGatewayStatusARMGenerator returns a generator of VirtualNetworkGateway_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayStatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayStatusARMGenerator != nil {
		return virtualNetworkGatewayStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayStatusARM(generators)
	virtualNetworkGatewayStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayStatusARM(generators)
	virtualNetworkGatewayStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_StatusARM{}), generators)

	return virtualNetworkGatewayStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayStatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormatStatusARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatStatusARM, VirtualNetworkGatewayPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatStatusARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatStatusARM(subject VirtualNetworkGatewayPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayPropertiesFormatStatusARMGenerator()
var virtualNetworkGatewayPropertiesFormatStatusARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormatStatusARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormatStatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormatStatusARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM(generators)
	virtualNetworkGatewayPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM(generators)
	virtualNetworkGatewayPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_StatusARM{}), generators)

	return virtualNetworkGatewayPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeExpressRoute, VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeLocalGateway, VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeVpn))
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationGeneration1, VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationGeneration2, VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatStatusVpnTypePolicyBased, VirtualNetworkGatewayPropertiesFormatStatusVpnTypeRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettingsStatusARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpaceStatusARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfigurationStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySkuStatusARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfigurationStatusARMGenerator())
}

func Test_AddressSpace_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceStatusARM, AddressSpaceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceStatusARM runs a test to see if a specific instance of AddressSpace_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceStatusARM(subject AddressSpace_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_StatusARM instances for property testing - lazily instantiated by
// AddressSpaceStatusARMGenerator()
var addressSpaceStatusARMGenerator gopter.Gen

// AddressSpaceStatusARMGenerator returns a generator of AddressSpace_StatusARM instances for property testing.
func AddressSpaceStatusARMGenerator() gopter.Gen {
	if addressSpaceStatusARMGenerator != nil {
		return addressSpaceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceStatusARM(generators)
	addressSpaceStatusARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_StatusARM{}), generators)

	return addressSpaceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceStatusARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettingsStatusARM, BgpSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettingsStatusARM runs a test to see if a specific instance of BgpSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettingsStatusARM(subject BgpSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_StatusARM instances for property testing - lazily instantiated by
// BgpSettingsStatusARMGenerator()
var bgpSettingsStatusARMGenerator gopter.Gen

// BgpSettingsStatusARMGenerator returns a generator of BgpSettings_StatusARM instances for property testing.
// We first initialize bgpSettingsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettingsStatusARMGenerator() gopter.Gen {
	if bgpSettingsStatusARMGenerator != nil {
		return bgpSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsStatusARM(generators)
	bgpSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsStatusARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettingsStatusARM(generators)
	bgpSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_StatusARM{}), generators)

	return bgpSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettingsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddressStatusARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationStatusARM, VirtualNetworkGatewayIPConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationStatusARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationStatusARM(subject VirtualNetworkGatewayIPConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_StatusARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayIPConfigurationStatusARMGenerator()
var virtualNetworkGatewayIPConfigurationStatusARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationStatusARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationStatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationStatusARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM(generators)
	virtualNetworkGatewayIPConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM(generators)
	virtualNetworkGatewayIPConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_StatusARM{}), generators)

	return virtualNetworkGatewayIPConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator())
}

func Test_VirtualNetworkGatewaySku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySkuStatusARM, VirtualNetworkGatewaySkuStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySkuStatusARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySkuStatusARM(subject VirtualNetworkGatewaySku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_StatusARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySkuStatusARMGenerator()
var virtualNetworkGatewaySkuStatusARMGenerator gopter.Gen

// VirtualNetworkGatewaySkuStatusARMGenerator returns a generator of VirtualNetworkGatewaySku_StatusARM instances for property testing.
func VirtualNetworkGatewaySkuStatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySkuStatusARMGenerator != nil {
		return virtualNetworkGatewaySkuStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuStatusARM(generators)
	virtualNetworkGatewaySkuStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_StatusARM{}), generators)

	return virtualNetworkGatewaySkuStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuStatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySkuStatusNameBasic,
		VirtualNetworkGatewaySkuStatusNameErGw1AZ,
		VirtualNetworkGatewaySkuStatusNameErGw2AZ,
		VirtualNetworkGatewaySkuStatusNameErGw3AZ,
		VirtualNetworkGatewaySkuStatusNameHighPerformance,
		VirtualNetworkGatewaySkuStatusNameStandard,
		VirtualNetworkGatewaySkuStatusNameUltraPerformance,
		VirtualNetworkGatewaySkuStatusNameVpnGw1,
		VirtualNetworkGatewaySkuStatusNameVpnGw1AZ,
		VirtualNetworkGatewaySkuStatusNameVpnGw2,
		VirtualNetworkGatewaySkuStatusNameVpnGw2AZ,
		VirtualNetworkGatewaySkuStatusNameVpnGw3,
		VirtualNetworkGatewaySkuStatusNameVpnGw3AZ,
		VirtualNetworkGatewaySkuStatusNameVpnGw4,
		VirtualNetworkGatewaySkuStatusNameVpnGw4AZ,
		VirtualNetworkGatewaySkuStatusNameVpnGw5,
		VirtualNetworkGatewaySkuStatusNameVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySkuStatusTierBasic,
		VirtualNetworkGatewaySkuStatusTierErGw1AZ,
		VirtualNetworkGatewaySkuStatusTierErGw2AZ,
		VirtualNetworkGatewaySkuStatusTierErGw3AZ,
		VirtualNetworkGatewaySkuStatusTierHighPerformance,
		VirtualNetworkGatewaySkuStatusTierStandard,
		VirtualNetworkGatewaySkuStatusTierUltraPerformance,
		VirtualNetworkGatewaySkuStatusTierVpnGw1,
		VirtualNetworkGatewaySkuStatusTierVpnGw1AZ,
		VirtualNetworkGatewaySkuStatusTierVpnGw2,
		VirtualNetworkGatewaySkuStatusTierVpnGw2AZ,
		VirtualNetworkGatewaySkuStatusTierVpnGw3,
		VirtualNetworkGatewaySkuStatusTierVpnGw3AZ,
		VirtualNetworkGatewaySkuStatusTierVpnGw4,
		VirtualNetworkGatewaySkuStatusTierVpnGw4AZ,
		VirtualNetworkGatewaySkuStatusTierVpnGw5,
		VirtualNetworkGatewaySkuStatusTierVpnGw5AZ))
}

func Test_VpnClientConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfigurationStatusARM, VpnClientConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfigurationStatusARM runs a test to see if a specific instance of VpnClientConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfigurationStatusARM(subject VpnClientConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_StatusARM instances for property testing - lazily instantiated by
// VpnClientConfigurationStatusARMGenerator()
var vpnClientConfigurationStatusARMGenerator gopter.Gen

// VpnClientConfigurationStatusARMGenerator returns a generator of VpnClientConfiguration_StatusARM instances for property testing.
// We first initialize vpnClientConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfigurationStatusARMGenerator() gopter.Gen {
	if vpnClientConfigurationStatusARMGenerator != nil {
		return vpnClientConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationStatusARM(generators)
	vpnClientConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfigurationStatusARM(generators)
	vpnClientConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_StatusARM{}), generators)

	return vpnClientConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfigurationStatusVpnAuthenticationTypesAAD, VpnClientConfigurationStatusVpnAuthenticationTypesCertificate, VpnClientConfigurationStatusVpnAuthenticationTypesRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfigurationStatusVpnClientProtocolsIkeV2, VpnClientConfigurationStatusVpnClientProtocolsOpenVPN, VpnClientConfigurationStatusVpnClientProtocolsSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServerStatusARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpaceStatusARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicyStatusARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificateStatusARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificateStatusARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddressStatusARM, IPConfigurationBgpPeeringAddressStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddressStatusARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddressStatusARM(subject IPConfigurationBgpPeeringAddress_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_StatusARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddressStatusARMGenerator()
var ipConfigurationBgpPeeringAddressStatusARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddressStatusARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_StatusARM instances for property testing.
func IPConfigurationBgpPeeringAddressStatusARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddressStatusARMGenerator != nil {
		return ipConfigurationBgpPeeringAddressStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressStatusARM(generators)
	ipConfigurationBgpPeeringAddressStatusARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_StatusARM{}), generators)

	return ipConfigurationBgpPeeringAddressStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressStatusARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicyStatusARM, IpsecPolicyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicyStatusARM runs a test to see if a specific instance of IpsecPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicyStatusARM(subject IpsecPolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_StatusARM instances for property testing - lazily instantiated by
// IpsecPolicyStatusARMGenerator()
var ipsecPolicyStatusARMGenerator gopter.Gen

// IpsecPolicyStatusARMGenerator returns a generator of IpsecPolicy_StatusARM instances for property testing.
func IpsecPolicyStatusARMGenerator() gopter.Gen {
	if ipsecPolicyStatusARMGenerator != nil {
		return ipsecPolicyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicyStatusARM(generators)
	ipsecPolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_StatusARM{}), generators)

	return ipsecPolicyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicyStatusARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		DhGroup_StatusDHGroup1,
		DhGroup_StatusDHGroup14,
		DhGroup_StatusDHGroup2,
		DhGroup_StatusDHGroup2048,
		DhGroup_StatusDHGroup24,
		DhGroup_StatusECP256,
		DhGroup_StatusECP384,
		DhGroup_StatusNone))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IkeEncryption_StatusAES128,
		IkeEncryption_StatusAES192,
		IkeEncryption_StatusAES256,
		IkeEncryption_StatusDES,
		IkeEncryption_StatusDES3,
		IkeEncryption_StatusGCMAES128,
		IkeEncryption_StatusGCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IkeIntegrity_StatusGCMAES128,
		IkeIntegrity_StatusGCMAES256,
		IkeIntegrity_StatusMD5,
		IkeIntegrity_StatusSHA1,
		IkeIntegrity_StatusSHA256,
		IkeIntegrity_StatusSHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecEncryption_StatusAES128,
		IpsecEncryption_StatusAES192,
		IpsecEncryption_StatusAES256,
		IpsecEncryption_StatusDES,
		IpsecEncryption_StatusDES3,
		IpsecEncryption_StatusGCMAES128,
		IpsecEncryption_StatusGCMAES192,
		IpsecEncryption_StatusGCMAES256,
		IpsecEncryption_StatusNone))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecIntegrity_StatusGCMAES128,
		IpsecIntegrity_StatusGCMAES192,
		IpsecIntegrity_StatusGCMAES256,
		IpsecIntegrity_StatusMD5,
		IpsecIntegrity_StatusSHA1,
		IpsecIntegrity_StatusSHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		PfsGroup_StatusECP256,
		PfsGroup_StatusECP384,
		PfsGroup_StatusNone,
		PfsGroup_StatusPFS1,
		PfsGroup_StatusPFS14,
		PfsGroup_StatusPFS2,
		PfsGroup_StatusPFS2048,
		PfsGroup_StatusPFS24,
		PfsGroup_StatusPFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServer_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServerStatusARM, RadiusServerStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServerStatusARM runs a test to see if a specific instance of RadiusServer_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServerStatusARM(subject RadiusServer_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_StatusARM instances for property testing - lazily instantiated by
// RadiusServerStatusARMGenerator()
var radiusServerStatusARMGenerator gopter.Gen

// RadiusServerStatusARMGenerator returns a generator of RadiusServer_StatusARM instances for property testing.
func RadiusServerStatusARMGenerator() gopter.Gen {
	if radiusServerStatusARMGenerator != nil {
		return radiusServerStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServerStatusARM(generators)
	radiusServerStatusARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_StatusARM{}), generators)

	return radiusServerStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServerStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServerStatusARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM, VirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_VpnClientRevokedCertificate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificateStatusARM, VpnClientRevokedCertificateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificateStatusARM runs a test to see if a specific instance of VpnClientRevokedCertificate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificateStatusARM(subject VpnClientRevokedCertificate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_StatusARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificateStatusARMGenerator()
var vpnClientRevokedCertificateStatusARMGenerator gopter.Gen

// VpnClientRevokedCertificateStatusARMGenerator returns a generator of VpnClientRevokedCertificate_StatusARM instances for property testing.
// We first initialize vpnClientRevokedCertificateStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificateStatusARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificateStatusARMGenerator != nil {
		return vpnClientRevokedCertificateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateStatusARM(generators)
	vpnClientRevokedCertificateStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateStatusARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateStatusARM(generators)
	vpnClientRevokedCertificateStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_StatusARM{}), generators)

	return vpnClientRevokedCertificateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormatStatusARMGenerator())
}

func Test_VpnClientRootCertificate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificateStatusARM, VpnClientRootCertificateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificateStatusARM runs a test to see if a specific instance of VpnClientRootCertificate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificateStatusARM(subject VpnClientRootCertificate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_StatusARM instances for property testing - lazily instantiated by
// VpnClientRootCertificateStatusARMGenerator()
var vpnClientRootCertificateStatusARMGenerator gopter.Gen

// VpnClientRootCertificateStatusARMGenerator returns a generator of VpnClientRootCertificate_StatusARM instances for property testing.
// We first initialize vpnClientRootCertificateStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificateStatusARMGenerator() gopter.Gen {
	if vpnClientRootCertificateStatusARMGenerator != nil {
		return vpnClientRootCertificateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateStatusARM(generators)
	vpnClientRootCertificateStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateStatusARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificateStatusARM(generators)
	vpnClientRootCertificateStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_StatusARM{}), generators)

	return vpnClientRootCertificateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificateStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificateStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificateStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormatStatusARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatStatusARM, VpnClientRevokedCertificatePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatStatusARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatStatusARM(subject VpnClientRevokedCertificatePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_StatusARM instances for property testing - lazily
// instantiated by VpnClientRevokedCertificatePropertiesFormatStatusARMGenerator()
var vpnClientRevokedCertificatePropertiesFormatStatusARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormatStatusARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_StatusARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormatStatusARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormatStatusARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatStatusARM(generators)
	vpnClientRevokedCertificatePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_StatusARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatStatusARM, VpnClientRootCertificatePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatStatusARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatStatusARM(subject VpnClientRootCertificatePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_StatusARM instances for property testing - lazily instantiated
// by VpnClientRootCertificatePropertiesFormatStatusARMGenerator()
var vpnClientRootCertificatePropertiesFormatStatusARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormatStatusARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_StatusARM instances for property testing.
func VpnClientRootCertificatePropertiesFormatStatusARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormatStatusARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatStatusARM(generators)
	vpnClientRootCertificatePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_StatusARM{}), generators)

	return vpnClientRootCertificatePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
