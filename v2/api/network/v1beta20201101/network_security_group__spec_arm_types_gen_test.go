// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkSecurityGroup_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_SpecARM, NetworkSecurityGroup_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_SpecARM runs a test to see if a specific instance of NetworkSecurityGroup_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_SpecARM(subject NetworkSecurityGroup_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_SpecARM instances for property testing - lazily instantiated by
// NetworkSecurityGroup_SpecARMGenerator()
var networkSecurityGroup_SpecARMGenerator gopter.Gen

// NetworkSecurityGroup_SpecARMGenerator returns a generator of NetworkSecurityGroup_SpecARM instances for property testing.
// We first initialize networkSecurityGroup_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroup_SpecARMGenerator() gopter.Gen {
	if networkSecurityGroup_SpecARMGenerator != nil {
		return networkSecurityGroup_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_SpecARM(generators)
	networkSecurityGroup_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroup_SpecARM(generators)
	networkSecurityGroup_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_SpecARM{}), generators)

	return networkSecurityGroup_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroup_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroup_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormatARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatARM, NetworkSecurityGroupPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatARM(subject NetworkSecurityGroupPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormatARM instances for property testing - lazily instantiated by
// NetworkSecurityGroupPropertiesFormatARMGenerator()
var networkSecurityGroupPropertiesFormatARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormatARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormatARM instances for property testing.
// We first initialize networkSecurityGroupPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupPropertiesFormatARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormatARMGenerator != nil {
		return networkSecurityGroupPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM(generators)
	networkSecurityGroupPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM(generators)
	networkSecurityGroupPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormatARM{}), generators)

	return networkSecurityGroupPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["DefaultSecurityRules"] = gen.SliceOf(SecurityRuleARMGenerator())
	gens["FlowLogs"] = gen.SliceOf(FlowLogARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator())
	gens["SecurityRules"] = gen.SliceOf(SecurityRuleARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator())
}

func Test_FlowLogARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogARM, FlowLogARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogARM runs a test to see if a specific instance of FlowLogARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogARM(subject FlowLogARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogARM instances for property testing - lazily instantiated by FlowLogARMGenerator()
var flowLogARMGenerator gopter.Gen

// FlowLogARMGenerator returns a generator of FlowLogARM instances for property testing.
func FlowLogARMGenerator() gopter.Gen {
	if flowLogARMGenerator != nil {
		return flowLogARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogARM(generators)
	flowLogARMGenerator = gen.Struct(reflect.TypeOf(FlowLogARM{}), generators)

	return flowLogARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM, NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM(subject NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()
var networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceSpec_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
}

func Test_SecurityRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRuleARM, SecurityRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRuleARM runs a test to see if a specific instance of SecurityRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRuleARM(subject SecurityRuleARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRuleARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRuleARM instances for property testing - lazily instantiated by SecurityRuleARMGenerator()
var securityRuleARMGenerator gopter.Gen

// SecurityRuleARMGenerator returns a generator of SecurityRuleARM instances for property testing.
func SecurityRuleARMGenerator() gopter.Gen {
	if securityRuleARMGenerator != nil {
		return securityRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRuleARM(generators)
	securityRuleARMGenerator = gen.Struct(reflect.TypeOf(SecurityRuleARM{}), generators)

	return securityRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRuleARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_NetworkSecurityGroup_SubResourceEmbeddedARM, Subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_NetworkSecurityGroup_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_NetworkSecurityGroup_SubResourceEmbeddedARM(subject Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing - lazily instantiated
// by Subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()
var subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator gopter.Gen

// Subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator returns a generator of Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing.
func Subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator != nil {
		return subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	return subnet_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
