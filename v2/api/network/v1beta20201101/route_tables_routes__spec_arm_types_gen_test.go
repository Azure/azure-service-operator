// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTablesRoutes_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablesRoutes_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablesRoutesSpecARM, RouteTablesRoutesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablesRoutesSpecARM runs a test to see if a specific instance of RouteTablesRoutes_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablesRoutesSpecARM(subject RouteTablesRoutes_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablesRoutes_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablesRoutes_SpecARM instances for property testing - lazily instantiated by
// RouteTablesRoutesSpecARMGenerator()
var routeTablesRoutesSpecARMGenerator gopter.Gen

// RouteTablesRoutesSpecARMGenerator returns a generator of RouteTablesRoutes_SpecARM instances for property testing.
// We first initialize routeTablesRoutesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablesRoutesSpecARMGenerator() gopter.Gen {
	if routeTablesRoutesSpecARMGenerator != nil {
		return routeTablesRoutesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesRoutesSpecARM(generators)
	routeTablesRoutesSpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTablesRoutes_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesRoutesSpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablesRoutesSpecARM(generators)
	routeTablesRoutesSpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTablesRoutes_SpecARM{}), generators)

	return routeTablesRoutesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablesRoutesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablesRoutesSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRouteTablesRoutesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablesRoutesSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RoutePropertiesFormatARMGenerator())
}

func Test_RoutePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutePropertiesFormatARM, RoutePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutePropertiesFormatARM runs a test to see if a specific instance of RoutePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutePropertiesFormatARM(subject RoutePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutePropertiesFormatARM instances for property testing - lazily instantiated by
// RoutePropertiesFormatARMGenerator()
var routePropertiesFormatARMGenerator gopter.Gen

// RoutePropertiesFormatARMGenerator returns a generator of RoutePropertiesFormatARM instances for property testing.
func RoutePropertiesFormatARMGenerator() gopter.Gen {
	if routePropertiesFormatARMGenerator != nil {
		return routePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutePropertiesFormatARM(generators)
	routePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(RoutePropertiesFormatARM{}), generators)

	return routePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["HasBgpOverride"] = gen.PtrOf(gen.Bool())
	gens["NextHopIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["NextHopType"] = gen.PtrOf(gen.OneConstOf(
		RoutePropertiesFormatNextHopType_Internet,
		RoutePropertiesFormatNextHopType_None,
		RoutePropertiesFormatNextHopType_VirtualAppliance,
		RoutePropertiesFormatNextHopType_VirtualNetworkGateway,
		RoutePropertiesFormatNextHopType_VnetLocal))
}
