// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201101

import (
	"fmt"
	v20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1beta20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworkGateways
type VirtualNetworkGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworkGateways_Spec  `json:"spec,omitempty"`
	Status            VirtualNetworkGateway_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworkGateway{}

// GetConditions returns the conditions of the resource
func (gateway *VirtualNetworkGateway) GetConditions() conditions.Conditions {
	return gateway.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (gateway *VirtualNetworkGateway) SetConditions(conditions conditions.Conditions) {
	gateway.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworkGateway{}

// ConvertFrom populates our VirtualNetworkGateway from the provided hub VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20201101s.VirtualNetworkGateway)
	if !ok {
		return fmt.Errorf("expected network/v1beta20201101storage/VirtualNetworkGateway but received %T instead", hub)
	}

	return gateway.AssignPropertiesFromVirtualNetworkGateway(source)
}

// ConvertTo populates the provided hub VirtualNetworkGateway from our VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20201101s.VirtualNetworkGateway)
	if !ok {
		return fmt.Errorf("expected network/v1beta20201101storage/VirtualNetworkGateway but received %T instead", hub)
	}

	return gateway.AssignPropertiesToVirtualNetworkGateway(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1beta20201101-virtualnetworkgateway,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1beta20201101,name=default.v1beta20201101.virtualnetworkgateways.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetworkGateway{}

// Default applies defaults to the VirtualNetworkGateway resource
func (gateway *VirtualNetworkGateway) Default() {
	gateway.defaultImpl()
	var temp interface{} = gateway
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (gateway *VirtualNetworkGateway) defaultAzureName() {
	if gateway.Spec.AzureName == "" {
		gateway.Spec.AzureName = gateway.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworkGateway resource
func (gateway *VirtualNetworkGateway) defaultImpl() { gateway.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetworkGateway{}

// AzureName returns the Azure name of the resource
func (gateway *VirtualNetworkGateway) AzureName() string {
	return gateway.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (gateway VirtualNetworkGateway) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (gateway *VirtualNetworkGateway) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (gateway *VirtualNetworkGateway) GetSpec() genruntime.ConvertibleSpec {
	return &gateway.Spec
}

// GetStatus returns the status of this resource
func (gateway *VirtualNetworkGateway) GetStatus() genruntime.ConvertibleStatus {
	return &gateway.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworkGateways"
func (gateway *VirtualNetworkGateway) GetType() string {
	return "Microsoft.Network/virtualNetworkGateways"
}

// NewEmptyStatus returns a new empty (blank) status
func (gateway *VirtualNetworkGateway) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &VirtualNetworkGateway_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (gateway *VirtualNetworkGateway) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(gateway.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  gateway.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (gateway *VirtualNetworkGateway) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualNetworkGateway_Status); ok {
		gateway.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualNetworkGateway_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	gateway.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1beta20201101-virtualnetworkgateway,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1beta20201101,name=validate.v1beta20201101.virtualnetworkgateways.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetworkGateway{}

// ValidateCreate validates the creation of the resource
func (gateway *VirtualNetworkGateway) ValidateCreate() error {
	validations := gateway.createValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (gateway *VirtualNetworkGateway) ValidateDelete() error {
	validations := gateway.deleteValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (gateway *VirtualNetworkGateway) ValidateUpdate(old runtime.Object) error {
	validations := gateway.updateValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (gateway *VirtualNetworkGateway) createValidations() []func() error {
	return []func() error{gateway.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (gateway *VirtualNetworkGateway) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (gateway *VirtualNetworkGateway) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return gateway.validateResourceReferences()
		},
		gateway.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (gateway *VirtualNetworkGateway) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&gateway.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (gateway *VirtualNetworkGateway) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*VirtualNetworkGateway)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, gateway)
}

// AssignPropertiesFromVirtualNetworkGateway populates our VirtualNetworkGateway from the provided source VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) AssignPropertiesFromVirtualNetworkGateway(source *v20201101s.VirtualNetworkGateway) error {

	// ObjectMeta
	gateway.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworkGateways_Spec
	err := spec.AssignPropertiesFromVirtualNetworkGatewaysSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpec() to populate field Spec")
	}
	gateway.Spec = spec

	// Status
	var status VirtualNetworkGateway_Status
	err = status.AssignPropertiesFromVirtualNetworkGatewayStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewayStatus() to populate field Status")
	}
	gateway.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGateway populates the provided destination VirtualNetworkGateway from our VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) AssignPropertiesToVirtualNetworkGateway(destination *v20201101s.VirtualNetworkGateway) error {

	// ObjectMeta
	destination.ObjectMeta = *gateway.ObjectMeta.DeepCopy()

	// Spec
	var spec v20201101s.VirtualNetworkGateways_Spec
	err := gateway.Spec.AssignPropertiesToVirtualNetworkGatewaysSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20201101s.VirtualNetworkGateway_Status
	err = gateway.Status.AssignPropertiesToVirtualNetworkGatewayStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewayStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (gateway *VirtualNetworkGateway) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: gateway.Spec.OriginalVersion(),
		Kind:    "VirtualNetworkGateway",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworkGateways
type VirtualNetworkGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworkGateway `json:"items"`
}

type VirtualNetworkGateway_Status struct {
	// ActiveActive: ActiveActive flag.
	ActiveActive *bool `json:"activeActive,omitempty"`

	// BgpSettings: Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings_Status `json:"bgpSettings,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CustomRoutes: The reference to the address space resource which represents the custom routes address space specified by
	// the customer for virtual network gateway and VpnClient.
	CustomRoutes *AddressSpace_Status `json:"customRoutes,omitempty"`

	// EnableBgp: Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// EnableDnsForwarding: Whether dns forwarding is enabled or not.
	EnableDnsForwarding *bool `json:"enableDnsForwarding,omitempty"`

	// EnablePrivateIpAddress: Whether private IP needs to be enabled on this gateway for connections or not.
	EnablePrivateIpAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// ExtendedLocation: The extended location of type local virtual network gateway.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	// GatewayDefaultSite: The reference to the LocalNetworkGateway resource which represents local network site having default
	// routes. Assign Null value in case of removing existing default site setting.
	GatewayDefaultSite *SubResource_Status `json:"gatewayDefaultSite,omitempty"`

	// GatewayType: The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewayPropertiesFormatStatusGatewayType `json:"gatewayType,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// InboundDnsForwardingEndpoint: The IP address allocated by the gateway to which dns requests can be sent.
	InboundDnsForwardingEndpoint *string `json:"inboundDnsForwardingEndpoint,omitempty"`

	// IpConfigurations: IP configurations for virtual network gateway.
	IpConfigurations []VirtualNetworkGatewayIPConfiguration_Status `json:"ipConfigurations,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the virtual network gateway resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// ResourceGuid: The resource GUID property of the virtual network gateway resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	// Sku: The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network
	// gateway.
	Sku *VirtualNetworkGatewaySku_Status `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// VNetExtendedLocationResourceId: Customer vnet resource id. VirtualNetworkGateway of type local gateway is associated
	// with the customer vnet.
	VNetExtendedLocationResourceId *string `json:"vNetExtendedLocationResourceId,omitempty"`

	// VpnClientConfiguration: The reference to the VpnClientConfiguration resource which represents the P2S VpnClient
	// configurations.
	VpnClientConfiguration *VpnClientConfiguration_Status `json:"vpnClientConfiguration,omitempty"`

	// VpnGatewayGeneration: The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
	VpnGatewayGeneration *VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration `json:"vpnGatewayGeneration,omitempty"`

	// VpnType: The type of this virtual network gateway.
	VpnType *VirtualNetworkGatewayPropertiesFormatStatusVpnType `json:"vpnType,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetworkGateway_Status{}

// ConvertStatusFrom populates our VirtualNetworkGateway_Status from the provided source
func (gateway *VirtualNetworkGateway_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20201101s.VirtualNetworkGateway_Status)
	if ok {
		// Populate our instance from source
		return gateway.AssignPropertiesFromVirtualNetworkGatewayStatus(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.VirtualNetworkGateway_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = gateway.AssignPropertiesFromVirtualNetworkGatewayStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetworkGateway_Status
func (gateway *VirtualNetworkGateway_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20201101s.VirtualNetworkGateway_Status)
	if ok {
		// Populate destination from our instance
		return gateway.AssignPropertiesToVirtualNetworkGatewayStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.VirtualNetworkGateway_Status{}
	err := gateway.AssignPropertiesToVirtualNetworkGatewayStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetworkGateway_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateway *VirtualNetworkGateway_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateway_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateway *VirtualNetworkGateway_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateway_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateway_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveActive != nil {
			activeActive := *typedInput.Properties.ActiveActive
			gateway.ActiveActive = &activeActive
		}
	}

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpSettings != nil {
			var bgpSettings1 BgpSettings_Status
			err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
			if err != nil {
				return err
			}
			bgpSettings := bgpSettings1
			gateway.BgpSettings = &bgpSettings
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomRoutes != nil {
			var customRoutes1 AddressSpace_Status
			err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
			if err != nil {
				return err
			}
			customRoutes := customRoutes1
			gateway.CustomRoutes = &customRoutes
		}
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBgp != nil {
			enableBgp := *typedInput.Properties.EnableBgp
			gateway.EnableBgp = &enableBgp
		}
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDnsForwarding != nil {
			enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
			gateway.EnableDnsForwarding = &enableDnsForwarding
		}
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePrivateIpAddress != nil {
			enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
			gateway.EnablePrivateIpAddress = &enablePrivateIpAddress
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		gateway.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		gateway.ExtendedLocation = &extendedLocation
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayDefaultSite != nil {
			var gatewayDefaultSite1 SubResource_Status
			err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
			if err != nil {
				return err
			}
			gatewayDefaultSite := gatewayDefaultSite1
			gateway.GatewayDefaultSite = &gatewayDefaultSite
		}
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayType != nil {
			gatewayType := *typedInput.Properties.GatewayType
			gateway.GatewayType = &gatewayType
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		gateway.Id = &id
	}

	// Set property ‘InboundDnsForwardingEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InboundDnsForwardingEndpoint != nil {
			inboundDnsForwardingEndpoint := *typedInput.Properties.InboundDnsForwardingEndpoint
			gateway.InboundDnsForwardingEndpoint = &inboundDnsForwardingEndpoint
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 VirtualNetworkGatewayIPConfiguration_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.IpConfigurations = append(gateway.IpConfigurations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateway.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gateway.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			gateway.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			gateway.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 VirtualNetworkGatewaySku_Status
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			gateway.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateway.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			gateway.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		gateway.Type = &typeVar
	}

	// Set property ‘VNetExtendedLocationResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VNetExtendedLocationResourceId != nil {
			vNetExtendedLocationResourceId := *typedInput.Properties.VNetExtendedLocationResourceId
			gateway.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
		}
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnClientConfiguration != nil {
			var vpnClientConfiguration1 VpnClientConfiguration_Status
			err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
			if err != nil {
				return err
			}
			vpnClientConfiguration := vpnClientConfiguration1
			gateway.VpnClientConfiguration = &vpnClientConfiguration
		}
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnGatewayGeneration != nil {
			vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
			gateway.VpnGatewayGeneration = &vpnGatewayGeneration
		}
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnType != nil {
			vpnType := *typedInput.Properties.VpnType
			gateway.VpnType = &vpnType
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayStatus populates our VirtualNetworkGateway_Status from the provided source VirtualNetworkGateway_Status
func (gateway *VirtualNetworkGateway_Status) AssignPropertiesFromVirtualNetworkGatewayStatus(source *v20201101s.VirtualNetworkGateway_Status) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		gateway.ActiveActive = &activeActive
	} else {
		gateway.ActiveActive = nil
	}

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings_Status
		err := bgpSetting.AssignPropertiesFromBgpSettingsStatus(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBgpSettingsStatus() to populate field BgpSettings")
		}
		gateway.BgpSettings = &bgpSetting
	} else {
		gateway.BgpSettings = nil
	}

	// Conditions
	gateway.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace_Status
		err := customRoute.AssignPropertiesFromAddressSpaceStatus(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpaceStatus() to populate field CustomRoutes")
		}
		gateway.CustomRoutes = &customRoute
	} else {
		gateway.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		gateway.EnableBgp = &enableBgp
	} else {
		gateway.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		gateway.EnableDnsForwarding = &enableDnsForwarding
	} else {
		gateway.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		gateway.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		gateway.EnablePrivateIpAddress = nil
	}

	// Etag
	gateway.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationStatus() to populate field ExtendedLocation")
		}
		gateway.ExtendedLocation = &extendedLocation
	} else {
		gateway.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource_Status
		err := gatewayDefaultSite.AssignPropertiesFromSubResourceStatus(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field GatewayDefaultSite")
		}
		gateway.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		gateway.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewayPropertiesFormatStatusGatewayType(*source.GatewayType)
		gateway.GatewayType = &gatewayType
	} else {
		gateway.GatewayType = nil
	}

	// Id
	gateway.Id = genruntime.ClonePointerToString(source.Id)

	// InboundDnsForwardingEndpoint
	gateway.InboundDnsForwardingEndpoint = genruntime.ClonePointerToString(source.InboundDnsForwardingEndpoint)

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]VirtualNetworkGatewayIPConfiguration_Status, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration VirtualNetworkGatewayIPConfiguration_Status
			err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		gateway.IpConfigurations = ipConfigurationList
	} else {
		gateway.IpConfigurations = nil
	}

	// Location
	gateway.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	gateway.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		gateway.ProvisioningState = &provisioningState
	} else {
		gateway.ProvisioningState = nil
	}

	// ResourceGuid
	gateway.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku_Status
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySkuStatus() to populate field Sku")
		}
		gateway.Sku = &sku
	} else {
		gateway.Sku = nil
	}

	// Tags
	gateway.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	gateway.Type = genruntime.ClonePointerToString(source.Type)

	// VNetExtendedLocationResourceId
	gateway.VNetExtendedLocationResourceId = genruntime.ClonePointerToString(source.VNetExtendedLocationResourceId)

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VpnClientConfiguration_Status
		err := vpnClientConfiguration.AssignPropertiesFromVpnClientConfigurationStatus(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVpnClientConfigurationStatus() to populate field VpnClientConfiguration")
		}
		gateway.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		gateway.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration(*source.VpnGatewayGeneration)
		gateway.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		gateway.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewayPropertiesFormatStatusVpnType(*source.VpnType)
		gateway.VpnType = &vpnType
	} else {
		gateway.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayStatus populates the provided destination VirtualNetworkGateway_Status from our VirtualNetworkGateway_Status
func (gateway *VirtualNetworkGateway_Status) AssignPropertiesToVirtualNetworkGatewayStatus(destination *v20201101s.VirtualNetworkGateway_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if gateway.ActiveActive != nil {
		activeActive := *gateway.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// BgpSettings
	if gateway.BgpSettings != nil {
		var bgpSetting v20201101s.BgpSettings_Status
		err := gateway.BgpSettings.AssignPropertiesToBgpSettingsStatus(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBgpSettingsStatus() to populate field BgpSettings")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(gateway.Conditions)

	// CustomRoutes
	if gateway.CustomRoutes != nil {
		var customRoute v20201101s.AddressSpace_Status
		err := gateway.CustomRoutes.AssignPropertiesToAddressSpaceStatus(&customRoute)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpaceStatus() to populate field CustomRoutes")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if gateway.EnableBgp != nil {
		enableBgp := *gateway.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if gateway.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateway.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if gateway.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateway.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(gateway.Etag)

	// ExtendedLocation
	if gateway.ExtendedLocation != nil {
		var extendedLocation v20201101s.ExtendedLocation_Status
		err := gateway.ExtendedLocation.AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationStatus() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if gateway.GatewayDefaultSite != nil {
		var gatewayDefaultSite v20201101s.SubResource_Status
		err := gateway.GatewayDefaultSite.AssignPropertiesToSubResourceStatus(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field GatewayDefaultSite")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if gateway.GatewayType != nil {
		gatewayType := string(*gateway.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(gateway.Id)

	// InboundDnsForwardingEndpoint
	destination.InboundDnsForwardingEndpoint = genruntime.ClonePointerToString(gateway.InboundDnsForwardingEndpoint)

	// IpConfigurations
	if gateway.IpConfigurations != nil {
		ipConfigurationList := make([]v20201101s.VirtualNetworkGatewayIPConfiguration_Status, len(gateway.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range gateway.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v20201101s.VirtualNetworkGatewayIPConfiguration_Status
			err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(gateway.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(gateway.Name)

	// ProvisioningState
	if gateway.ProvisioningState != nil {
		provisioningState := string(*gateway.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(gateway.ResourceGuid)

	// Sku
	if gateway.Sku != nil {
		var sku v20201101s.VirtualNetworkGatewaySku_Status
		err := gateway.Sku.AssignPropertiesToVirtualNetworkGatewaySkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateway.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(gateway.Type)

	// VNetExtendedLocationResourceId
	destination.VNetExtendedLocationResourceId = genruntime.ClonePointerToString(gateway.VNetExtendedLocationResourceId)

	// VpnClientConfiguration
	if gateway.VpnClientConfiguration != nil {
		var vpnClientConfiguration v20201101s.VpnClientConfiguration_Status
		err := gateway.VpnClientConfiguration.AssignPropertiesToVpnClientConfigurationStatus(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVpnClientConfigurationStatus() to populate field VpnClientConfiguration")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if gateway.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*gateway.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if gateway.VpnType != nil {
		vpnType := string(*gateway.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGateways_Spec struct {
	// ActiveActive: ActiveActive flag.
	ActiveActive *bool `json:"activeActive,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// BgpSettings: Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	// CustomRoutes: The reference to the address space resource which represents the custom routes address space specified by
	// the customer for virtual network gateway and VpnClient.
	CustomRoutes *AddressSpace `json:"customRoutes,omitempty"`

	// EnableBgp: Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// EnableDnsForwarding: Whether dns forwarding is enabled or not.
	EnableDnsForwarding *bool `json:"enableDnsForwarding,omitempty"`

	// EnablePrivateIpAddress: Whether private IP needs to be enabled on this gateway for connections or not.
	EnablePrivateIpAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	// GatewayDefaultSite: The reference to the LocalNetworkGateway resource which represents local network site having default
	// routes. Assign Null value in case of removing existing default site setting.
	GatewayDefaultSite *SubResource `json:"gatewayDefaultSite,omitempty"`

	// GatewayType: The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewaysSpecPropertiesGatewayType `json:"gatewayType,omitempty"`

	// IpConfigurations: IP configurations for virtual network gateway.
	IpConfigurations []VirtualNetworkGateways_Spec_Properties_IpConfigurations `json:"ipConfigurations,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// Sku: The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network
	// gateway.
	Sku *VirtualNetworkGatewaySku `json:"sku,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// VNetExtendedLocationResourceReference: MAS FIJI customer vnet resource id. VirtualNetworkGateway of type local gateway
	// is associated with the customer vnet.
	VNetExtendedLocationResourceReference *genruntime.ResourceReference `armReference:"VNetExtendedLocationResourceId" json:"vNetExtendedLocationResourceReference,omitempty"`

	// VirtualNetworkExtendedLocation: The extended location of type local virtual network gateway.
	VirtualNetworkExtendedLocation *ExtendedLocation `json:"virtualNetworkExtendedLocation,omitempty"`

	// VpnClientConfiguration: The reference to the VpnClientConfiguration resource which represents the P2S VpnClient
	// configurations.
	VpnClientConfiguration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`

	// VpnGatewayGeneration: The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
	VpnGatewayGeneration *VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration `json:"vpnGatewayGeneration,omitempty"`

	// VpnType: The type of this virtual network gateway.
	VpnType *VirtualNetworkGatewaysSpecPropertiesVpnType `json:"vpnType,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gateways *VirtualNetworkGateways_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gateways == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_SpecARM{}

	// Set property ‘Location’:
	if gateways.Location != nil {
		location := *gateways.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if gateways.ActiveActive != nil ||
		gateways.BgpSettings != nil ||
		gateways.CustomRoutes != nil ||
		gateways.EnableBgp != nil ||
		gateways.EnableDnsForwarding != nil ||
		gateways.EnablePrivateIpAddress != nil ||
		gateways.GatewayDefaultSite != nil ||
		gateways.GatewayType != nil ||
		gateways.IpConfigurations != nil ||
		gateways.Sku != nil ||
		gateways.VNetExtendedLocationResourceReference != nil ||
		gateways.VirtualNetworkExtendedLocation != nil ||
		gateways.VpnClientConfiguration != nil ||
		gateways.VpnGatewayGeneration != nil ||
		gateways.VpnType != nil {
		result.Properties = &VirtualNetworkGateways_Spec_PropertiesARM{}
	}
	if gateways.ActiveActive != nil {
		activeActive := *gateways.ActiveActive
		result.Properties.ActiveActive = &activeActive
	}
	if gateways.BgpSettings != nil {
		bgpSettingsARM, err := (*gateways.BgpSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bgpSettings := *bgpSettingsARM.(*BgpSettingsARM)
		result.Properties.BgpSettings = &bgpSettings
	}
	if gateways.CustomRoutes != nil {
		customRoutesARM, err := (*gateways.CustomRoutes).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customRoutes := *customRoutesARM.(*AddressSpaceARM)
		result.Properties.CustomRoutes = &customRoutes
	}
	if gateways.EnableBgp != nil {
		enableBgp := *gateways.EnableBgp
		result.Properties.EnableBgp = &enableBgp
	}
	if gateways.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateways.EnableDnsForwarding
		result.Properties.EnableDnsForwarding = &enableDnsForwarding
	}
	if gateways.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateways.EnablePrivateIpAddress
		result.Properties.EnablePrivateIpAddress = &enablePrivateIpAddress
	}
	if gateways.GatewayDefaultSite != nil {
		gatewayDefaultSiteARM, err := (*gateways.GatewayDefaultSite).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		gatewayDefaultSite := *gatewayDefaultSiteARM.(*SubResourceARM)
		result.Properties.GatewayDefaultSite = &gatewayDefaultSite
	}
	if gateways.GatewayType != nil {
		gatewayType := *gateways.GatewayType
		result.Properties.GatewayType = &gatewayType
	}
	for _, item := range gateways.IpConfigurations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpConfigurations = append(result.Properties.IpConfigurations, *itemARM.(*VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM))
	}
	if gateways.Sku != nil {
		skuARM, err := (*gateways.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*VirtualNetworkGatewaySkuARM)
		result.Properties.Sku = &sku
	}
	if gateways.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*gateways.VNetExtendedLocationResourceReference)
		if err != nil {
			return nil, err
		}
		vNetExtendedLocationResourceId := vNetExtendedLocationResourceIdARMID
		result.Properties.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
	}
	if gateways.VirtualNetworkExtendedLocation != nil {
		virtualNetworkExtendedLocationARM, err := (*gateways.VirtualNetworkExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		virtualNetworkExtendedLocation := *virtualNetworkExtendedLocationARM.(*ExtendedLocationARM)
		result.Properties.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	}
	if gateways.VpnClientConfiguration != nil {
		vpnClientConfigurationARM, err := (*gateways.VpnClientConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vpnClientConfiguration := *vpnClientConfigurationARM.(*VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM)
		result.Properties.VpnClientConfiguration = &vpnClientConfiguration
	}
	if gateways.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := *gateways.VpnGatewayGeneration
		result.Properties.VpnGatewayGeneration = &vpnGatewayGeneration
	}
	if gateways.VpnType != nil {
		vpnType := *gateways.VpnType
		result.Properties.VpnType = &vpnType
	}

	// Set property ‘Tags’:
	if gateways.Tags != nil {
		result.Tags = make(map[string]string, len(gateways.Tags))
		for key, value := range gateways.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateways *VirtualNetworkGateways_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateways *VirtualNetworkGateways_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_SpecARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveActive != nil {
			activeActive := *typedInput.Properties.ActiveActive
			gateways.ActiveActive = &activeActive
		}
	}

	// Set property ‘AzureName’:
	gateways.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpSettings != nil {
			var bgpSettings1 BgpSettings
			err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
			if err != nil {
				return err
			}
			bgpSettings := bgpSettings1
			gateways.BgpSettings = &bgpSettings
		}
	}

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomRoutes != nil {
			var customRoutes1 AddressSpace
			err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
			if err != nil {
				return err
			}
			customRoutes := customRoutes1
			gateways.CustomRoutes = &customRoutes
		}
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBgp != nil {
			enableBgp := *typedInput.Properties.EnableBgp
			gateways.EnableBgp = &enableBgp
		}
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDnsForwarding != nil {
			enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
			gateways.EnableDnsForwarding = &enableDnsForwarding
		}
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePrivateIpAddress != nil {
			enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
			gateways.EnablePrivateIpAddress = &enablePrivateIpAddress
		}
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayDefaultSite != nil {
			var gatewayDefaultSite1 SubResource
			err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
			if err != nil {
				return err
			}
			gatewayDefaultSite := gatewayDefaultSite1
			gateways.GatewayDefaultSite = &gatewayDefaultSite
		}
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayType != nil {
			gatewayType := *typedInput.Properties.GatewayType
			gateways.GatewayType = &gatewayType
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 VirtualNetworkGateways_Spec_Properties_IpConfigurations
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateways.IpConfigurations = append(gateways.IpConfigurations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateways.Location = &location
	}

	// Set property ‘Owner’:
	gateways.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 VirtualNetworkGatewaySku
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			gateways.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateways.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			gateways.Tags[key] = value
		}
	}

	// no assignment for property ‘VNetExtendedLocationResourceReference’

	// Set property ‘VirtualNetworkExtendedLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VirtualNetworkExtendedLocation != nil {
			var virtualNetworkExtendedLocation1 ExtendedLocation
			err := virtualNetworkExtendedLocation1.PopulateFromARM(owner, *typedInput.Properties.VirtualNetworkExtendedLocation)
			if err != nil {
				return err
			}
			virtualNetworkExtendedLocation := virtualNetworkExtendedLocation1
			gateways.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
		}
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnClientConfiguration != nil {
			var vpnClientConfiguration1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
			err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
			if err != nil {
				return err
			}
			vpnClientConfiguration := vpnClientConfiguration1
			gateways.VpnClientConfiguration = &vpnClientConfiguration
		}
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnGatewayGeneration != nil {
			vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
			gateways.VpnGatewayGeneration = &vpnGatewayGeneration
		}
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnType != nil {
			vpnType := *typedInput.Properties.VpnType
			gateways.VpnType = &vpnType
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworkGateways_Spec{}

// ConvertSpecFrom populates our VirtualNetworkGateways_Spec from the provided source
func (gateways *VirtualNetworkGateways_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20201101s.VirtualNetworkGateways_Spec)
	if ok {
		// Populate our instance from source
		return gateways.AssignPropertiesFromVirtualNetworkGatewaysSpec(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.VirtualNetworkGateways_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = gateways.AssignPropertiesFromVirtualNetworkGatewaysSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworkGateways_Spec
func (gateways *VirtualNetworkGateways_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20201101s.VirtualNetworkGateways_Spec)
	if ok {
		// Populate destination from our instance
		return gateways.AssignPropertiesToVirtualNetworkGatewaysSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.VirtualNetworkGateways_Spec{}
	err := gateways.AssignPropertiesToVirtualNetworkGatewaysSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpec populates our VirtualNetworkGateways_Spec from the provided source VirtualNetworkGateways_Spec
func (gateways *VirtualNetworkGateways_Spec) AssignPropertiesFromVirtualNetworkGatewaysSpec(source *v20201101s.VirtualNetworkGateways_Spec) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		gateways.ActiveActive = &activeActive
	} else {
		gateways.ActiveActive = nil
	}

	// AzureName
	gateways.AzureName = source.AzureName

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings
		err := bgpSetting.AssignPropertiesFromBgpSettings(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBgpSettings() to populate field BgpSettings")
		}
		gateways.BgpSettings = &bgpSetting
	} else {
		gateways.BgpSettings = nil
	}

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace
		err := customRoute.AssignPropertiesFromAddressSpace(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace() to populate field CustomRoutes")
		}
		gateways.CustomRoutes = &customRoute
	} else {
		gateways.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		gateways.EnableBgp = &enableBgp
	} else {
		gateways.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		gateways.EnableDnsForwarding = &enableDnsForwarding
	} else {
		gateways.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		gateways.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		gateways.EnablePrivateIpAddress = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource
		err := gatewayDefaultSite.AssignPropertiesFromSubResource(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field GatewayDefaultSite")
		}
		gateways.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		gateways.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewaysSpecPropertiesGatewayType(*source.GatewayType)
		gateways.GatewayType = &gatewayType
	} else {
		gateways.GatewayType = nil
	}

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]VirtualNetworkGateways_Spec_Properties_IpConfigurations, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration VirtualNetworkGateways_Spec_Properties_IpConfigurations
			err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		gateways.IpConfigurations = ipConfigurationList
	} else {
		gateways.IpConfigurations = nil
	}

	// Location
	gateways.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		gateways.Owner = &owner
	} else {
		gateways.Owner = nil
	}

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySku() to populate field Sku")
		}
		gateways.Sku = &sku
	} else {
		gateways.Sku = nil
	}

	// Tags
	gateways.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VNetExtendedLocationResourceReference
	if source.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := source.VNetExtendedLocationResourceReference.Copy()
		gateways.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		gateways.VNetExtendedLocationResourceReference = nil
	}

	// VirtualNetworkExtendedLocation
	if source.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation ExtendedLocation
		err := virtualNetworkExtendedLocation.AssignPropertiesFromExtendedLocation(source.VirtualNetworkExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field VirtualNetworkExtendedLocation")
		}
		gateways.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	} else {
		gateways.VirtualNetworkExtendedLocation = nil
	}

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := vpnClientConfiguration.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration() to populate field VpnClientConfiguration")
		}
		gateways.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		gateways.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration(*source.VpnGatewayGeneration)
		gateways.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		gateways.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewaysSpecPropertiesVpnType(*source.VpnType)
		gateways.VpnType = &vpnType
	} else {
		gateways.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpec populates the provided destination VirtualNetworkGateways_Spec from our VirtualNetworkGateways_Spec
func (gateways *VirtualNetworkGateways_Spec) AssignPropertiesToVirtualNetworkGatewaysSpec(destination *v20201101s.VirtualNetworkGateways_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if gateways.ActiveActive != nil {
		activeActive := *gateways.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// AzureName
	destination.AzureName = gateways.AzureName

	// BgpSettings
	if gateways.BgpSettings != nil {
		var bgpSetting v20201101s.BgpSettings
		err := gateways.BgpSettings.AssignPropertiesToBgpSettings(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBgpSettings() to populate field BgpSettings")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// CustomRoutes
	if gateways.CustomRoutes != nil {
		var customRoute v20201101s.AddressSpace
		err := gateways.CustomRoutes.AssignPropertiesToAddressSpace(&customRoute)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace() to populate field CustomRoutes")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if gateways.EnableBgp != nil {
		enableBgp := *gateways.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if gateways.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateways.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if gateways.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateways.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// GatewayDefaultSite
	if gateways.GatewayDefaultSite != nil {
		var gatewayDefaultSite v20201101s.SubResource
		err := gateways.GatewayDefaultSite.AssignPropertiesToSubResource(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field GatewayDefaultSite")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if gateways.GatewayType != nil {
		gatewayType := string(*gateways.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// IpConfigurations
	if gateways.IpConfigurations != nil {
		ipConfigurationList := make([]v20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations, len(gateways.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range gateways.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations
			err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(gateways.Location)

	// OriginalVersion
	destination.OriginalVersion = gateways.OriginalVersion()

	// Owner
	if gateways.Owner != nil {
		owner := gateways.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Sku
	if gateways.Sku != nil {
		var sku v20201101s.VirtualNetworkGatewaySku
		err := gateways.Sku.AssignPropertiesToVirtualNetworkGatewaySku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateways.Tags)

	// VNetExtendedLocationResourceReference
	if gateways.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := gateways.VNetExtendedLocationResourceReference.Copy()
		destination.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		destination.VNetExtendedLocationResourceReference = nil
	}

	// VirtualNetworkExtendedLocation
	if gateways.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation v20201101s.ExtendedLocation
		err := gateways.VirtualNetworkExtendedLocation.AssignPropertiesToExtendedLocation(&virtualNetworkExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field VirtualNetworkExtendedLocation")
		}
		destination.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	} else {
		destination.VirtualNetworkExtendedLocation = nil
	}

	// VpnClientConfiguration
	if gateways.VpnClientConfiguration != nil {
		var vpnClientConfiguration v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := gateways.VpnClientConfiguration.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration() to populate field VpnClientConfiguration")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if gateways.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*gateways.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if gateways.VpnType != nil {
		vpnType := string(*gateways.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (gateways *VirtualNetworkGateways_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (gateways *VirtualNetworkGateways_Spec) SetAzureName(azureName string) {
	gateways.AzureName = azureName
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/BgpSettings
type BgpSettings struct {
	// Asn: The BGP speaker's ASN.
	Asn *uint32 `json:"asn,omitempty"`

	// BgpPeeringAddress: The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	// BgpPeeringAddresses: BGP peering address with IP configuration ID for virtual network gateway.
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress `json:"bgpPeeringAddresses,omitempty"`

	// PeerWeight: The weight added to routes learned from this BGP speaker.
	PeerWeight *int `json:"peerWeight,omitempty"`
}

var _ genruntime.ARMTransformer = &BgpSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *BgpSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &BgpSettingsARM{}

	// Set property ‘Asn’:
	if settings.Asn != nil {
		asn := *settings.Asn
		result.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if settings.BgpPeeringAddress != nil {
		bgpPeeringAddress := *settings.BgpPeeringAddress
		result.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range settings.BgpPeeringAddresses {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.BgpPeeringAddresses = append(result.BgpPeeringAddresses, *itemARM.(*IPConfigurationBgpPeeringAddressARM))
	}

	// Set property ‘PeerWeight’:
	if settings.PeerWeight != nil {
		peerWeight := *settings.PeerWeight
		result.PeerWeight = &peerWeight
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *BgpSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BgpSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *BgpSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettingsARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		settings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		settings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.BgpPeeringAddresses = append(settings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		settings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettings populates our BgpSettings from the provided source BgpSettings
func (settings *BgpSettings) AssignPropertiesFromBgpSettings(source *v20201101s.BgpSettings) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		settings.Asn = &asn
	} else {
		settings.Asn = nil
	}

	// BgpPeeringAddress
	settings.BgpPeeringAddress = genruntime.ClonePointerToString(source.BgpPeeringAddress)

	// BgpPeeringAddresses
	if source.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress, len(source.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress IPConfigurationBgpPeeringAddress
			err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddress(&bgpPeeringAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationBgpPeeringAddress() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		settings.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		settings.BgpPeeringAddresses = nil
	}

	// PeerWeight
	settings.PeerWeight = genruntime.ClonePointerToInt(source.PeerWeight)

	// No error
	return nil
}

// AssignPropertiesToBgpSettings populates the provided destination BgpSettings from our BgpSettings
func (settings *BgpSettings) AssignPropertiesToBgpSettings(destination *v20201101s.BgpSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if settings.Asn != nil {
		asn := *settings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	destination.BgpPeeringAddress = genruntime.ClonePointerToString(settings.BgpPeeringAddress)

	// BgpPeeringAddresses
	if settings.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]v20201101s.IPConfigurationBgpPeeringAddress, len(settings.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range settings.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress v20201101s.IPConfigurationBgpPeeringAddress
			err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddress(&bgpPeeringAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationBgpPeeringAddress() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		destination.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		destination.BgpPeeringAddresses = nil
	}

	// PeerWeight
	destination.PeerWeight = genruntime.ClonePointerToInt(settings.PeerWeight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BgpSettings_Status struct {
	// Asn: The BGP speaker's ASN.
	Asn *uint32 `json:"asn,omitempty"`

	// BgpPeeringAddress: The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	// BgpPeeringAddresses: BGP peering address with IP configuration ID for virtual network gateway.
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress_Status `json:"bgpPeeringAddresses,omitempty"`

	// PeerWeight: The weight added to routes learned from this BGP speaker.
	PeerWeight *int `json:"peerWeight,omitempty"`
}

var _ genruntime.FromARMConverter = &BgpSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *BgpSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BgpSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *BgpSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		settings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		settings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.BgpPeeringAddresses = append(settings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		settings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettingsStatus populates our BgpSettings_Status from the provided source BgpSettings_Status
func (settings *BgpSettings_Status) AssignPropertiesFromBgpSettingsStatus(source *v20201101s.BgpSettings_Status) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		settings.Asn = &asn
	} else {
		settings.Asn = nil
	}

	// BgpPeeringAddress
	settings.BgpPeeringAddress = genruntime.ClonePointerToString(source.BgpPeeringAddress)

	// BgpPeeringAddresses
	if source.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress_Status, len(source.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress IPConfigurationBgpPeeringAddress_Status
			err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus(&bgpPeeringAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		settings.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		settings.BgpPeeringAddresses = nil
	}

	// PeerWeight
	settings.PeerWeight = genruntime.ClonePointerToInt(source.PeerWeight)

	// No error
	return nil
}

// AssignPropertiesToBgpSettingsStatus populates the provided destination BgpSettings_Status from our BgpSettings_Status
func (settings *BgpSettings_Status) AssignPropertiesToBgpSettingsStatus(destination *v20201101s.BgpSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if settings.Asn != nil {
		asn := *settings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	destination.BgpPeeringAddress = genruntime.ClonePointerToString(settings.BgpPeeringAddress)

	// BgpPeeringAddresses
	if settings.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]v20201101s.IPConfigurationBgpPeeringAddress_Status, len(settings.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range settings.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress v20201101s.IPConfigurationBgpPeeringAddress_Status
			err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddressStatus(&bgpPeeringAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationBgpPeeringAddressStatus() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		destination.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		destination.BgpPeeringAddresses = nil
	}

	// PeerWeight
	destination.PeerWeight = genruntime.ClonePointerToInt(settings.PeerWeight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGatewayIPConfiguration_Status struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// PrivateIPAddress: Private IP Address for this gateway.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_Status `json:"privateIPAllocationMethod,omitempty"`

	// ProvisioningState: The provisioning state of the virtual network gateway IP configuration resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *SubResource_Status `json:"publicIPAddress,omitempty"`

	// Subnet: The reference to the subnet resource.
	Subnet *SubResource_Status `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewayIPConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewayIPConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewayIPConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewayIPConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		configuration.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		configuration.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			configuration.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			configuration.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource_Status
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			configuration.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_Status
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus populates our VirtualNetworkGatewayIPConfiguration_Status from the provided source VirtualNetworkGatewayIPConfiguration_Status
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) AssignPropertiesFromVirtualNetworkGatewayIPConfigurationStatus(source *v20201101s.VirtualNetworkGatewayIPConfiguration_Status) error {

	// Etag
	configuration.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	configuration.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_Status(*source.PrivateIPAllocationMethod)
		configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		configuration.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		configuration.ProvisioningState = &provisioningState
	} else {
		configuration.ProvisioningState = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource_Status
		err := publicIPAddress.AssignPropertiesFromSubResourceStatus(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field PublicIPAddress")
		}
		configuration.PublicIPAddress = &publicIPAddress
	} else {
		configuration.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_Status
		err := subnet.AssignPropertiesFromSubResourceStatus(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus populates the provided destination VirtualNetworkGatewayIPConfiguration_Status from our VirtualNetworkGatewayIPConfiguration_Status
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) AssignPropertiesToVirtualNetworkGatewayIPConfigurationStatus(destination *v20201101s.VirtualNetworkGatewayIPConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(configuration.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(configuration.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if configuration.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*configuration.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if configuration.ProvisioningState != nil {
		provisioningState := string(*configuration.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddress
	if configuration.PublicIPAddress != nil {
		var publicIPAddress v20201101s.SubResource_Status
		err := configuration.PublicIPAddress.AssignPropertiesToSubResourceStatus(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if configuration.Subnet != nil {
		var subnet v20201101s.SubResource_Status
		err := configuration.Subnet.AssignPropertiesToSubResourceStatus(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGatewayPropertiesFormatStatusGatewayType string

const (
	VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeExpressRoute = VirtualNetworkGatewayPropertiesFormatStatusGatewayType("ExpressRoute")
	VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeLocalGateway = VirtualNetworkGatewayPropertiesFormatStatusGatewayType("LocalGateway")
	VirtualNetworkGatewayPropertiesFormatStatusGatewayTypeVpn          = VirtualNetworkGatewayPropertiesFormatStatusGatewayType("Vpn")
)

type VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration string

const (
	VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationGeneration1 = VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration("Generation1")
	VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationGeneration2 = VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration("Generation2")
	VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGenerationNone        = VirtualNetworkGatewayPropertiesFormatStatusVpnGatewayGeneration("None")
)

type VirtualNetworkGatewayPropertiesFormatStatusVpnType string

const (
	VirtualNetworkGatewayPropertiesFormatStatusVpnTypePolicyBased = VirtualNetworkGatewayPropertiesFormatStatusVpnType("PolicyBased")
	VirtualNetworkGatewayPropertiesFormatStatusVpnTypeRouteBased  = VirtualNetworkGatewayPropertiesFormatStatusVpnType("RouteBased")
)

// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/VirtualNetworkGatewaySku
type VirtualNetworkGatewaySku struct {
	// Name: Gateway SKU name.
	Name *VirtualNetworkGatewaySkuName `json:"name,omitempty"`

	// Tier: Gateway SKU tier.
	Tier *VirtualNetworkGatewaySkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGatewaySku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gatewaySku *VirtualNetworkGatewaySku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gatewaySku == nil {
		return nil, nil
	}
	result := &VirtualNetworkGatewaySkuARM{}

	// Set property ‘Name’:
	if gatewaySku.Name != nil {
		name := *gatewaySku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if gatewaySku.Tier != nil {
		tier := *gatewaySku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *VirtualNetworkGatewaySku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewaySkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *VirtualNetworkGatewaySku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		gatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySku populates our VirtualNetworkGatewaySku from the provided source VirtualNetworkGatewaySku
func (gatewaySku *VirtualNetworkGatewaySku) AssignPropertiesFromVirtualNetworkGatewaySku(source *v20201101s.VirtualNetworkGatewaySku) error {

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySkuName(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySkuTier(*source.Tier)
		gatewaySku.Tier = &tier
	} else {
		gatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySku populates the provided destination VirtualNetworkGatewaySku from our VirtualNetworkGatewaySku
func (gatewaySku *VirtualNetworkGatewaySku) AssignPropertiesToVirtualNetworkGatewaySku(destination *v20201101s.VirtualNetworkGatewaySku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if gatewaySku.Tier != nil {
		tier := string(*gatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGatewaySku_Status struct {
	// Capacity: The capacity.
	Capacity *int `json:"capacity,omitempty"`

	// Name: Gateway SKU name.
	Name *VirtualNetworkGatewaySkuStatusName `json:"name,omitempty"`

	// Tier: Gateway SKU tier.
	Tier *VirtualNetworkGatewaySkuStatusTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewaySku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *VirtualNetworkGatewaySku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewaySku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *VirtualNetworkGatewaySku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		gatewaySku.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		gatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySkuStatus populates our VirtualNetworkGatewaySku_Status from the provided source VirtualNetworkGatewaySku_Status
func (gatewaySku *VirtualNetworkGatewaySku_Status) AssignPropertiesFromVirtualNetworkGatewaySkuStatus(source *v20201101s.VirtualNetworkGatewaySku_Status) error {

	// Capacity
	gatewaySku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySkuStatusName(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySkuStatusTier(*source.Tier)
		gatewaySku.Tier = &tier
	} else {
		gatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySkuStatus populates the provided destination VirtualNetworkGatewaySku_Status from our VirtualNetworkGatewaySku_Status
func (gatewaySku *VirtualNetworkGatewaySku_Status) AssignPropertiesToVirtualNetworkGatewaySkuStatus(destination *v20201101s.VirtualNetworkGatewaySku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(gatewaySku.Capacity)

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if gatewaySku.Tier != nil {
		tier := string(*gatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ExpressRoute","HyperNet","LocalGateway","Vpn"}
type VirtualNetworkGatewaysSpecPropertiesGatewayType string

const (
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeExpressRoute = VirtualNetworkGatewaysSpecPropertiesGatewayType("ExpressRoute")
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeHyperNet     = VirtualNetworkGatewaysSpecPropertiesGatewayType("HyperNet")
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeLocalGateway = VirtualNetworkGatewaysSpecPropertiesGatewayType("LocalGateway")
	VirtualNetworkGatewaysSpecPropertiesGatewayTypeVpn          = VirtualNetworkGatewaysSpecPropertiesGatewayType("Vpn")
)

// +kubebuilder:validation:Enum={"Generation1","Generation2","None"}
type VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGenerationGeneration1 = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("Generation1")
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGenerationGeneration2 = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("Generation2")
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGenerationNone        = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("None")
)

// +kubebuilder:validation:Enum={"PolicyBased","RouteBased"}
type VirtualNetworkGatewaysSpecPropertiesVpnType string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnTypePolicyBased = VirtualNetworkGatewaysSpecPropertiesVpnType("PolicyBased")
	VirtualNetworkGatewaysSpecPropertiesVpnTypeRouteBased  = VirtualNetworkGatewaysSpecPropertiesVpnType("RouteBased")
)

type VirtualNetworkGateways_Spec_Properties_IpConfigurations struct {
	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	// Subnet: The reference to the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_IpConfigurations{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configurations == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM{}

	// Set property ‘Name’:
	if configurations.Name != nil {
		name := *configurations.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if configurations.PrivateIPAllocationMethod != nil ||
		configurations.PublicIPAddress != nil ||
		configurations.Subnet != nil {
		result.Properties = &VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}
	}
	if configurations.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := *configurations.PrivateIPAllocationMethod
		result.Properties.PrivateIPAllocationMethod = &privateIPAllocationMethod
	}
	if configurations.PublicIPAddress != nil {
		publicIPAddressARM, err := (*configurations.PublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicIPAddress := *publicIPAddressARM.(*SubResourceARM)
		result.Properties.PublicIPAddress = &publicIPAddress
	}
	if configurations.Subnet != nil {
		subnetARM, err := (*configurations.Subnet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		subnet := *subnetARM.(*SubResourceARM)
		result.Properties.Subnet = &subnet
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configurations.Name = &name
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			configurations.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			configurations.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configurations.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations populates our VirtualNetworkGateways_Spec_Properties_IpConfigurations from the provided source VirtualNetworkGateways_Spec_Properties_IpConfigurations
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations(source *v20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations) error {

	// Name
	configurations.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod(*source.PrivateIPAllocationMethod)
		configurations.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		configurations.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource
		err := publicIPAddress.AssignPropertiesFromSubResource(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIPAddress")
		}
		configurations.PublicIPAddress = &publicIPAddress
	} else {
		configurations.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource
		err := subnet.AssignPropertiesFromSubResource(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field Subnet")
		}
		configurations.Subnet = &subnet
	} else {
		configurations.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations populates the provided destination VirtualNetworkGateways_Spec_Properties_IpConfigurations from our VirtualNetworkGateways_Spec_Properties_IpConfigurations
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations(destination *v20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(configurations.Name)

	// PrivateIPAllocationMethod
	if configurations.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*configurations.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if configurations.PublicIPAddress != nil {
		var publicIPAddress v20201101s.SubResource
		err := configurations.PublicIPAddress.AssignPropertiesToSubResource(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if configurations.Subnet != nil {
		var subnet v20201101s.SubResource
		err := configurations.Subnet.AssignPropertiesToSubResource(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration struct {
	// AadAudience: The AADAudience property of the VirtualNetworkGateway resource for vpn client connection used for AAD
	// authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	// AadIssuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn client connection used for AAD
	// authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	// AadTenant: The AADTenant property of the VirtualNetworkGateway resource for vpn client connection used for AAD
	// authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	// RadiusServerAddress: The radius server address property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// RadiusServerSecret: The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	// RadiusServers: The radiusServers property for multiple radius server configuration.
	RadiusServers []RadiusServer `json:"radiusServers,omitempty"`

	// VpnAuthenticationTypes: VPN authentication types for the virtual network gateway..
	VpnAuthenticationTypes []VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes `json:"vpnAuthenticationTypes,omitempty"`

	// VpnClientAddressPool: The reference to the address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`

	// VpnClientIpsecPolicies: VpnClientIpsecPolicies for virtual network gateway P2S client.
	VpnClientIpsecPolicies []IpsecPolicy `json:"vpnClientIpsecPolicies,omitempty"`

	// VpnClientProtocols: VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols []VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols `json:"vpnClientProtocols,omitempty"`

	// VpnClientRevokedCertificates: VpnClientRevokedCertificate for Virtual network gateway.
	VpnClientRevokedCertificates []VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates `json:"vpnClientRevokedCertificates,omitempty"`

	// VpnClientRootCertificates: VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM{}

	// Set property ‘AadAudience’:
	if configuration.AadAudience != nil {
		aadAudience := *configuration.AadAudience
		result.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if configuration.AadIssuer != nil {
		aadIssuer := *configuration.AadIssuer
		result.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if configuration.AadTenant != nil {
		aadTenant := *configuration.AadTenant
		result.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if configuration.RadiusServerAddress != nil {
		radiusServerAddress := *configuration.RadiusServerAddress
		result.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if configuration.RadiusServerSecret != nil {
		radiusServerSecret := *configuration.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range configuration.RadiusServers {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.RadiusServers = append(result.RadiusServers, *itemARM.(*RadiusServerARM))
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range configuration.VpnAuthenticationTypes {
		result.VpnAuthenticationTypes = append(result.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if configuration.VpnClientAddressPool != nil {
		vpnClientAddressPoolARM, err := (*configuration.VpnClientAddressPool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vpnClientAddressPool := *vpnClientAddressPoolARM.(*AddressSpaceARM)
		result.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range configuration.VpnClientIpsecPolicies {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientIpsecPolicies = append(result.VpnClientIpsecPolicies, *itemARM.(*IpsecPolicyARM))
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range configuration.VpnClientProtocols {
		result.VpnClientProtocols = append(result.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range configuration.VpnClientRevokedCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientRevokedCertificates = append(result.VpnClientRevokedCertificates, *itemARM.(*VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM))
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range configuration.VpnClientRootCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientRootCertificates = append(result.VpnClientRootCertificates, *itemARM.(*VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		configuration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		configuration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		configuration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		configuration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		configuration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.RadiusServers = append(configuration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		configuration.VpnAuthenticationTypes = append(configuration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientIpsecPolicies = append(configuration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		configuration.VpnClientProtocols = append(configuration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRevokedCertificates = append(configuration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRootCertificates = append(configuration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(source *v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) error {

	// AadAudience
	configuration.AadAudience = genruntime.ClonePointerToString(source.AadAudience)

	// AadIssuer
	configuration.AadIssuer = genruntime.ClonePointerToString(source.AadIssuer)

	// AadTenant
	configuration.AadTenant = genruntime.ClonePointerToString(source.AadTenant)

	// RadiusServerAddress
	configuration.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerSecret
	configuration.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// RadiusServers
	if source.RadiusServers != nil {
		radiusServerList := make([]RadiusServer, len(source.RadiusServers))
		for radiusServerIndex, radiusServerItem := range source.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer RadiusServer
			err := radiusServer.AssignPropertiesFromRadiusServer(&radiusServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRadiusServer() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		configuration.RadiusServers = radiusServerList
	} else {
		configuration.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if source.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes, len(source.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes(vpnAuthenticationTypeItem)
		}
		configuration.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		configuration.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpace(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace() to populate field VpnClientAddressPool")
		}
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		configuration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if source.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]IpsecPolicy, len(source.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy IpsecPolicy
			err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicy(&vpnClientIpsecPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpsecPolicy() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		configuration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		configuration.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if source.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols, len(source.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols(vpnClientProtocolItem)
		}
		configuration.VpnClientProtocols = vpnClientProtocolList
	} else {
		configuration.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if source.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates, len(source.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
			err := vpnClientRevokedCertificate.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(&vpnClientRevokedCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		configuration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		configuration.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if source.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates, len(source.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
			err := vpnClientRootCertificate.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(&vpnClientRootCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		configuration.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		configuration.VpnClientRootCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(destination *v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	destination.AadAudience = genruntime.ClonePointerToString(configuration.AadAudience)

	// AadIssuer
	destination.AadIssuer = genruntime.ClonePointerToString(configuration.AadIssuer)

	// AadTenant
	destination.AadTenant = genruntime.ClonePointerToString(configuration.AadTenant)

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(configuration.RadiusServerAddress)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(configuration.RadiusServerSecret)

	// RadiusServers
	if configuration.RadiusServers != nil {
		radiusServerList := make([]v20201101s.RadiusServer, len(configuration.RadiusServers))
		for radiusServerIndex, radiusServerItem := range configuration.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer v20201101s.RadiusServer
			err := radiusServerItem.AssignPropertiesToRadiusServer(&radiusServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRadiusServer() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		destination.RadiusServers = radiusServerList
	} else {
		destination.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if configuration.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]string, len(configuration.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range configuration.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
		}
		destination.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		destination.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if configuration.VpnClientAddressPool != nil {
		var vpnClientAddressPool v20201101s.AddressSpace
		err := configuration.VpnClientAddressPool.AssignPropertiesToAddressSpace(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace() to populate field VpnClientAddressPool")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if configuration.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]v20201101s.IpsecPolicy, len(configuration.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range configuration.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy v20201101s.IpsecPolicy
			err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicy(&vpnClientIpsecPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpsecPolicy() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		destination.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if configuration.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]string, len(configuration.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range configuration.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
		}
		destination.VpnClientProtocols = vpnClientProtocolList
	} else {
		destination.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if configuration.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates, len(configuration.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range configuration.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
			err := vpnClientRevokedCertificateItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(&vpnClientRevokedCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		destination.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if configuration.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates, len(configuration.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range configuration.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
			err := vpnClientRootCertificateItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(&vpnClientRootCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		destination.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		destination.VpnClientRootCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientConfiguration_Status struct {
	// AadAudience: The AADAudience property of the VirtualNetworkGateway resource for vpn client connection used for AAD
	// authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	// AadIssuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn client connection used for AAD
	// authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	// AadTenant: The AADTenant property of the VirtualNetworkGateway resource for vpn client connection used for AAD
	// authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	// RadiusServerAddress: The radius server address property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// RadiusServerSecret: The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	// RadiusServers: The radiusServers property for multiple radius server configuration.
	RadiusServers []RadiusServer_Status `json:"radiusServers,omitempty"`

	// VpnAuthenticationTypes: VPN authentication types for the virtual network gateway..
	VpnAuthenticationTypes []VpnClientConfigurationStatusVpnAuthenticationTypes `json:"vpnAuthenticationTypes,omitempty"`

	// VpnClientAddressPool: The reference to the address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace_Status `json:"vpnClientAddressPool,omitempty"`

	// VpnClientIpsecPolicies: VpnClientIpsecPolicies for virtual network gateway P2S client.
	VpnClientIpsecPolicies []IpsecPolicy_Status `json:"vpnClientIpsecPolicies,omitempty"`

	// VpnClientProtocols: VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols []VpnClientConfigurationStatusVpnClientProtocols `json:"vpnClientProtocols,omitempty"`

	// VpnClientRevokedCertificates: VpnClientRevokedCertificate for Virtual network gateway.
	VpnClientRevokedCertificates []VpnClientRevokedCertificate_Status `json:"vpnClientRevokedCertificates,omitempty"`

	// VpnClientRootCertificates: VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VpnClientRootCertificate_Status `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VpnClientConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VpnClientConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		configuration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		configuration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		configuration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		configuration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		configuration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.RadiusServers = append(configuration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		configuration.VpnAuthenticationTypes = append(configuration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace_Status
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientIpsecPolicies = append(configuration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		configuration.VpnClientProtocols = append(configuration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VpnClientRevokedCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRevokedCertificates = append(configuration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VpnClientRootCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRootCertificates = append(configuration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientConfigurationStatus populates our VpnClientConfiguration_Status from the provided source VpnClientConfiguration_Status
func (configuration *VpnClientConfiguration_Status) AssignPropertiesFromVpnClientConfigurationStatus(source *v20201101s.VpnClientConfiguration_Status) error {

	// AadAudience
	configuration.AadAudience = genruntime.ClonePointerToString(source.AadAudience)

	// AadIssuer
	configuration.AadIssuer = genruntime.ClonePointerToString(source.AadIssuer)

	// AadTenant
	configuration.AadTenant = genruntime.ClonePointerToString(source.AadTenant)

	// RadiusServerAddress
	configuration.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerSecret
	configuration.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// RadiusServers
	if source.RadiusServers != nil {
		radiusServerList := make([]RadiusServer_Status, len(source.RadiusServers))
		for radiusServerIndex, radiusServerItem := range source.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer RadiusServer_Status
			err := radiusServer.AssignPropertiesFromRadiusServerStatus(&radiusServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRadiusServerStatus() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		configuration.RadiusServers = radiusServerList
	} else {
		configuration.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if source.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]VpnClientConfigurationStatusVpnAuthenticationTypes, len(source.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VpnClientConfigurationStatusVpnAuthenticationTypes(vpnAuthenticationTypeItem)
		}
		configuration.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		configuration.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace_Status
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpaceStatus(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpaceStatus() to populate field VpnClientAddressPool")
		}
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		configuration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if source.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]IpsecPolicy_Status, len(source.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy IpsecPolicy_Status
			err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicyStatus(&vpnClientIpsecPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpsecPolicyStatus() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		configuration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		configuration.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if source.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]VpnClientConfigurationStatusVpnClientProtocols, len(source.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = VpnClientConfigurationStatusVpnClientProtocols(vpnClientProtocolItem)
		}
		configuration.VpnClientProtocols = vpnClientProtocolList
	} else {
		configuration.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if source.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]VpnClientRevokedCertificate_Status, len(source.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate VpnClientRevokedCertificate_Status
			err := vpnClientRevokedCertificate.AssignPropertiesFromVpnClientRevokedCertificateStatus(&vpnClientRevokedCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRevokedCertificateStatus() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		configuration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		configuration.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if source.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]VpnClientRootCertificate_Status, len(source.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate VpnClientRootCertificate_Status
			err := vpnClientRootCertificate.AssignPropertiesFromVpnClientRootCertificateStatus(&vpnClientRootCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRootCertificateStatus() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		configuration.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		configuration.VpnClientRootCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientConfigurationStatus populates the provided destination VpnClientConfiguration_Status from our VpnClientConfiguration_Status
func (configuration *VpnClientConfiguration_Status) AssignPropertiesToVpnClientConfigurationStatus(destination *v20201101s.VpnClientConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	destination.AadAudience = genruntime.ClonePointerToString(configuration.AadAudience)

	// AadIssuer
	destination.AadIssuer = genruntime.ClonePointerToString(configuration.AadIssuer)

	// AadTenant
	destination.AadTenant = genruntime.ClonePointerToString(configuration.AadTenant)

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(configuration.RadiusServerAddress)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(configuration.RadiusServerSecret)

	// RadiusServers
	if configuration.RadiusServers != nil {
		radiusServerList := make([]v20201101s.RadiusServer_Status, len(configuration.RadiusServers))
		for radiusServerIndex, radiusServerItem := range configuration.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer v20201101s.RadiusServer_Status
			err := radiusServerItem.AssignPropertiesToRadiusServerStatus(&radiusServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRadiusServerStatus() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		destination.RadiusServers = radiusServerList
	} else {
		destination.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if configuration.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]string, len(configuration.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range configuration.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
		}
		destination.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		destination.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if configuration.VpnClientAddressPool != nil {
		var vpnClientAddressPool v20201101s.AddressSpace_Status
		err := configuration.VpnClientAddressPool.AssignPropertiesToAddressSpaceStatus(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpaceStatus() to populate field VpnClientAddressPool")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if configuration.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]v20201101s.IpsecPolicy_Status, len(configuration.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range configuration.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy v20201101s.IpsecPolicy_Status
			err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicyStatus(&vpnClientIpsecPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpsecPolicyStatus() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		destination.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if configuration.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]string, len(configuration.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range configuration.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
		}
		destination.VpnClientProtocols = vpnClientProtocolList
	} else {
		destination.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if configuration.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]v20201101s.VpnClientRevokedCertificate_Status, len(configuration.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range configuration.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate v20201101s.VpnClientRevokedCertificate_Status
			err := vpnClientRevokedCertificateItem.AssignPropertiesToVpnClientRevokedCertificateStatus(&vpnClientRevokedCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRevokedCertificateStatus() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		destination.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if configuration.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]v20201101s.VpnClientRootCertificate_Status, len(configuration.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range configuration.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate v20201101s.VpnClientRootCertificate_Status
			err := vpnClientRootCertificateItem.AssignPropertiesToVpnClientRootCertificateStatus(&vpnClientRootCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRootCertificateStatus() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		destination.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		destination.VpnClientRootCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/IPConfigurationBgpPeeringAddress
type IPConfigurationBgpPeeringAddress struct {
	// CustomBgpIpAddresses: The list of custom BGP peering addresses which belong to IP configuration.
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`

	// IpconfigurationId: The ID of IP configuration which belongs to gateway.
	IpconfigurationId *string `json:"ipconfigurationId,omitempty"`
}

var _ genruntime.ARMTransformer = &IPConfigurationBgpPeeringAddress{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (address *IPConfigurationBgpPeeringAddress) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if address == nil {
		return nil, nil
	}
	result := &IPConfigurationBgpPeeringAddressARM{}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range address.CustomBgpIpAddresses {
		result.CustomBgpIpAddresses = append(result.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if address.IpconfigurationId != nil {
		ipconfigurationId := *address.IpconfigurationId
		result.IpconfigurationId = &ipconfigurationId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *IPConfigurationBgpPeeringAddress) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationBgpPeeringAddressARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *IPConfigurationBgpPeeringAddress) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddressARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddressARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		address.CustomBgpIpAddresses = append(address.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		address.IpconfigurationId = &ipconfigurationId
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddress populates our IPConfigurationBgpPeeringAddress from the provided source IPConfigurationBgpPeeringAddress
func (address *IPConfigurationBgpPeeringAddress) AssignPropertiesFromIPConfigurationBgpPeeringAddress(source *v20201101s.IPConfigurationBgpPeeringAddress) error {

	// CustomBgpIpAddresses
	address.CustomBgpIpAddresses = genruntime.CloneSliceOfString(source.CustomBgpIpAddresses)

	// IpconfigurationId
	address.IpconfigurationId = genruntime.ClonePointerToString(source.IpconfigurationId)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddress populates the provided destination IPConfigurationBgpPeeringAddress from our IPConfigurationBgpPeeringAddress
func (address *IPConfigurationBgpPeeringAddress) AssignPropertiesToIPConfigurationBgpPeeringAddress(destination *v20201101s.IPConfigurationBgpPeeringAddress) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	destination.CustomBgpIpAddresses = genruntime.CloneSliceOfString(address.CustomBgpIpAddresses)

	// IpconfigurationId
	destination.IpconfigurationId = genruntime.ClonePointerToString(address.IpconfigurationId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfigurationBgpPeeringAddress_Status struct {
	// CustomBgpIpAddresses: The list of custom BGP peering addresses which belong to IP configuration.
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`

	// DefaultBgpIpAddresses: The list of default BGP peering addresses which belong to IP configuration.
	DefaultBgpIpAddresses []string `json:"defaultBgpIpAddresses,omitempty"`

	// IpconfigurationId: The ID of IP configuration which belongs to gateway.
	IpconfigurationId *string `json:"ipconfigurationId,omitempty"`

	// TunnelIpAddresses: The list of tunnel public IP addresses which belong to IP configuration.
	TunnelIpAddresses []string `json:"tunnelIpAddresses,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfigurationBgpPeeringAddress_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *IPConfigurationBgpPeeringAddress_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationBgpPeeringAddress_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *IPConfigurationBgpPeeringAddress_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddress_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddress_StatusARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		address.CustomBgpIpAddresses = append(address.CustomBgpIpAddresses, item)
	}

	// Set property ‘DefaultBgpIpAddresses’:
	for _, item := range typedInput.DefaultBgpIpAddresses {
		address.DefaultBgpIpAddresses = append(address.DefaultBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		address.IpconfigurationId = &ipconfigurationId
	}

	// Set property ‘TunnelIpAddresses’:
	for _, item := range typedInput.TunnelIpAddresses {
		address.TunnelIpAddresses = append(address.TunnelIpAddresses, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus populates our IPConfigurationBgpPeeringAddress_Status from the provided source IPConfigurationBgpPeeringAddress_Status
func (address *IPConfigurationBgpPeeringAddress_Status) AssignPropertiesFromIPConfigurationBgpPeeringAddressStatus(source *v20201101s.IPConfigurationBgpPeeringAddress_Status) error {

	// CustomBgpIpAddresses
	address.CustomBgpIpAddresses = genruntime.CloneSliceOfString(source.CustomBgpIpAddresses)

	// DefaultBgpIpAddresses
	address.DefaultBgpIpAddresses = genruntime.CloneSliceOfString(source.DefaultBgpIpAddresses)

	// IpconfigurationId
	address.IpconfigurationId = genruntime.ClonePointerToString(source.IpconfigurationId)

	// TunnelIpAddresses
	address.TunnelIpAddresses = genruntime.CloneSliceOfString(source.TunnelIpAddresses)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddressStatus populates the provided destination IPConfigurationBgpPeeringAddress_Status from our IPConfigurationBgpPeeringAddress_Status
func (address *IPConfigurationBgpPeeringAddress_Status) AssignPropertiesToIPConfigurationBgpPeeringAddressStatus(destination *v20201101s.IPConfigurationBgpPeeringAddress_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	destination.CustomBgpIpAddresses = genruntime.CloneSliceOfString(address.CustomBgpIpAddresses)

	// DefaultBgpIpAddresses
	destination.DefaultBgpIpAddresses = genruntime.CloneSliceOfString(address.DefaultBgpIpAddresses)

	// IpconfigurationId
	destination.IpconfigurationId = genruntime.ClonePointerToString(address.IpconfigurationId)

	// TunnelIpAddresses
	destination.TunnelIpAddresses = genruntime.CloneSliceOfString(address.TunnelIpAddresses)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/IpsecPolicy
type IpsecPolicy struct {
	// +kubebuilder:validation:Required
	// DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup *IpsecPolicyDhGroup `json:"dhGroup,omitempty"`

	// +kubebuilder:validation:Required
	// IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption *IpsecPolicyIkeEncryption `json:"ikeEncryption,omitempty"`

	// +kubebuilder:validation:Required
	// IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity *IpsecPolicyIkeIntegrity `json:"ikeIntegrity,omitempty"`

	// +kubebuilder:validation:Required
	// IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption *IpsecPolicyIpsecEncryption `json:"ipsecEncryption,omitempty"`

	// +kubebuilder:validation:Required
	// IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity *IpsecPolicyIpsecIntegrity `json:"ipsecIntegrity,omitempty"`

	// +kubebuilder:validation:Required
	// PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup *IpsecPolicyPfsGroup `json:"pfsGroup,omitempty"`

	// +kubebuilder:validation:Required
	// SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site
	// to site VPN tunnel.
	SaDataSizeKilobytes *int `json:"saDataSizeKilobytes,omitempty"`

	// +kubebuilder:validation:Required
	// SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site
	// to site VPN tunnel.
	SaLifeTimeSeconds *int `json:"saLifeTimeSeconds,omitempty"`
}

var _ genruntime.ARMTransformer = &IpsecPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *IpsecPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &IpsecPolicyARM{}

	// Set property ‘DhGroup’:
	if policy.DhGroup != nil {
		dhGroup := *policy.DhGroup
		result.DhGroup = &dhGroup
	}

	// Set property ‘IkeEncryption’:
	if policy.IkeEncryption != nil {
		ikeEncryption := *policy.IkeEncryption
		result.IkeEncryption = &ikeEncryption
	}

	// Set property ‘IkeIntegrity’:
	if policy.IkeIntegrity != nil {
		ikeIntegrity := *policy.IkeIntegrity
		result.IkeIntegrity = &ikeIntegrity
	}

	// Set property ‘IpsecEncryption’:
	if policy.IpsecEncryption != nil {
		ipsecEncryption := *policy.IpsecEncryption
		result.IpsecEncryption = &ipsecEncryption
	}

	// Set property ‘IpsecIntegrity’:
	if policy.IpsecIntegrity != nil {
		ipsecIntegrity := *policy.IpsecIntegrity
		result.IpsecIntegrity = &ipsecIntegrity
	}

	// Set property ‘PfsGroup’:
	if policy.PfsGroup != nil {
		pfsGroup := *policy.PfsGroup
		result.PfsGroup = &pfsGroup
	}

	// Set property ‘SaDataSizeKilobytes’:
	if policy.SaDataSizeKilobytes != nil {
		saDataSizeKilobytes := *policy.SaDataSizeKilobytes
		result.SaDataSizeKilobytes = &saDataSizeKilobytes
	}

	// Set property ‘SaLifeTimeSeconds’:
	if policy.SaLifeTimeSeconds != nil {
		saLifeTimeSeconds := *policy.SaLifeTimeSeconds
		result.SaLifeTimeSeconds = &saLifeTimeSeconds
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IpsecPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpsecPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IpsecPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicyARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	if typedInput.DhGroup != nil {
		dhGroup := *typedInput.DhGroup
		policy.DhGroup = &dhGroup
	}

	// Set property ‘IkeEncryption’:
	if typedInput.IkeEncryption != nil {
		ikeEncryption := *typedInput.IkeEncryption
		policy.IkeEncryption = &ikeEncryption
	}

	// Set property ‘IkeIntegrity’:
	if typedInput.IkeIntegrity != nil {
		ikeIntegrity := *typedInput.IkeIntegrity
		policy.IkeIntegrity = &ikeIntegrity
	}

	// Set property ‘IpsecEncryption’:
	if typedInput.IpsecEncryption != nil {
		ipsecEncryption := *typedInput.IpsecEncryption
		policy.IpsecEncryption = &ipsecEncryption
	}

	// Set property ‘IpsecIntegrity’:
	if typedInput.IpsecIntegrity != nil {
		ipsecIntegrity := *typedInput.IpsecIntegrity
		policy.IpsecIntegrity = &ipsecIntegrity
	}

	// Set property ‘PfsGroup’:
	if typedInput.PfsGroup != nil {
		pfsGroup := *typedInput.PfsGroup
		policy.PfsGroup = &pfsGroup
	}

	// Set property ‘SaDataSizeKilobytes’:
	if typedInput.SaDataSizeKilobytes != nil {
		saDataSizeKilobytes := *typedInput.SaDataSizeKilobytes
		policy.SaDataSizeKilobytes = &saDataSizeKilobytes
	}

	// Set property ‘SaLifeTimeSeconds’:
	if typedInput.SaLifeTimeSeconds != nil {
		saLifeTimeSeconds := *typedInput.SaLifeTimeSeconds
		policy.SaLifeTimeSeconds = &saLifeTimeSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicy populates our IpsecPolicy from the provided source IpsecPolicy
func (policy *IpsecPolicy) AssignPropertiesFromIpsecPolicy(source *v20201101s.IpsecPolicy) error {

	// DhGroup
	if source.DhGroup != nil {
		dhGroup := IpsecPolicyDhGroup(*source.DhGroup)
		policy.DhGroup = &dhGroup
	} else {
		policy.DhGroup = nil
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		ikeEncryption := IpsecPolicyIkeEncryption(*source.IkeEncryption)
		policy.IkeEncryption = &ikeEncryption
	} else {
		policy.IkeEncryption = nil
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		ikeIntegrity := IpsecPolicyIkeIntegrity(*source.IkeIntegrity)
		policy.IkeIntegrity = &ikeIntegrity
	} else {
		policy.IkeIntegrity = nil
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		ipsecEncryption := IpsecPolicyIpsecEncryption(*source.IpsecEncryption)
		policy.IpsecEncryption = &ipsecEncryption
	} else {
		policy.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		ipsecIntegrity := IpsecPolicyIpsecIntegrity(*source.IpsecIntegrity)
		policy.IpsecIntegrity = &ipsecIntegrity
	} else {
		policy.IpsecIntegrity = nil
	}

	// PfsGroup
	if source.PfsGroup != nil {
		pfsGroup := IpsecPolicyPfsGroup(*source.PfsGroup)
		policy.PfsGroup = &pfsGroup
	} else {
		policy.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	policy.SaDataSizeKilobytes = genruntime.ClonePointerToInt(source.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	policy.SaLifeTimeSeconds = genruntime.ClonePointerToInt(source.SaLifeTimeSeconds)

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicy populates the provided destination IpsecPolicy from our IpsecPolicy
func (policy *IpsecPolicy) AssignPropertiesToIpsecPolicy(destination *v20201101s.IpsecPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	if policy.DhGroup != nil {
		dhGroup := string(*policy.DhGroup)
		destination.DhGroup = &dhGroup
	} else {
		destination.DhGroup = nil
	}

	// IkeEncryption
	if policy.IkeEncryption != nil {
		ikeEncryption := string(*policy.IkeEncryption)
		destination.IkeEncryption = &ikeEncryption
	} else {
		destination.IkeEncryption = nil
	}

	// IkeIntegrity
	if policy.IkeIntegrity != nil {
		ikeIntegrity := string(*policy.IkeIntegrity)
		destination.IkeIntegrity = &ikeIntegrity
	} else {
		destination.IkeIntegrity = nil
	}

	// IpsecEncryption
	if policy.IpsecEncryption != nil {
		ipsecEncryption := string(*policy.IpsecEncryption)
		destination.IpsecEncryption = &ipsecEncryption
	} else {
		destination.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if policy.IpsecIntegrity != nil {
		ipsecIntegrity := string(*policy.IpsecIntegrity)
		destination.IpsecIntegrity = &ipsecIntegrity
	} else {
		destination.IpsecIntegrity = nil
	}

	// PfsGroup
	if policy.PfsGroup != nil {
		pfsGroup := string(*policy.PfsGroup)
		destination.PfsGroup = &pfsGroup
	} else {
		destination.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = genruntime.ClonePointerToInt(policy.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = genruntime.ClonePointerToInt(policy.SaLifeTimeSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IpsecPolicy_Status struct {
	// DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup *DhGroup_Status `json:"dhGroup,omitempty"`

	// IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption *IkeEncryption_Status `json:"ikeEncryption,omitempty"`

	// IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity *IkeIntegrity_Status `json:"ikeIntegrity,omitempty"`

	// IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption *IpsecEncryption_Status `json:"ipsecEncryption,omitempty"`

	// IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity *IpsecIntegrity_Status `json:"ipsecIntegrity,omitempty"`

	// PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup *PfsGroup_Status `json:"pfsGroup,omitempty"`

	// SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site
	// to site VPN tunnel.
	SaDataSizeKilobytes *int `json:"saDataSizeKilobytes,omitempty"`

	// SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site
	// to site VPN tunnel.
	SaLifeTimeSeconds *int `json:"saLifeTimeSeconds,omitempty"`
}

var _ genruntime.FromARMConverter = &IpsecPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IpsecPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpsecPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IpsecPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	if typedInput.DhGroup != nil {
		dhGroup := *typedInput.DhGroup
		policy.DhGroup = &dhGroup
	}

	// Set property ‘IkeEncryption’:
	if typedInput.IkeEncryption != nil {
		ikeEncryption := *typedInput.IkeEncryption
		policy.IkeEncryption = &ikeEncryption
	}

	// Set property ‘IkeIntegrity’:
	if typedInput.IkeIntegrity != nil {
		ikeIntegrity := *typedInput.IkeIntegrity
		policy.IkeIntegrity = &ikeIntegrity
	}

	// Set property ‘IpsecEncryption’:
	if typedInput.IpsecEncryption != nil {
		ipsecEncryption := *typedInput.IpsecEncryption
		policy.IpsecEncryption = &ipsecEncryption
	}

	// Set property ‘IpsecIntegrity’:
	if typedInput.IpsecIntegrity != nil {
		ipsecIntegrity := *typedInput.IpsecIntegrity
		policy.IpsecIntegrity = &ipsecIntegrity
	}

	// Set property ‘PfsGroup’:
	if typedInput.PfsGroup != nil {
		pfsGroup := *typedInput.PfsGroup
		policy.PfsGroup = &pfsGroup
	}

	// Set property ‘SaDataSizeKilobytes’:
	if typedInput.SaDataSizeKilobytes != nil {
		saDataSizeKilobytes := *typedInput.SaDataSizeKilobytes
		policy.SaDataSizeKilobytes = &saDataSizeKilobytes
	}

	// Set property ‘SaLifeTimeSeconds’:
	if typedInput.SaLifeTimeSeconds != nil {
		saLifeTimeSeconds := *typedInput.SaLifeTimeSeconds
		policy.SaLifeTimeSeconds = &saLifeTimeSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicyStatus populates our IpsecPolicy_Status from the provided source IpsecPolicy_Status
func (policy *IpsecPolicy_Status) AssignPropertiesFromIpsecPolicyStatus(source *v20201101s.IpsecPolicy_Status) error {

	// DhGroup
	if source.DhGroup != nil {
		dhGroup := DhGroup_Status(*source.DhGroup)
		policy.DhGroup = &dhGroup
	} else {
		policy.DhGroup = nil
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		ikeEncryption := IkeEncryption_Status(*source.IkeEncryption)
		policy.IkeEncryption = &ikeEncryption
	} else {
		policy.IkeEncryption = nil
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		ikeIntegrity := IkeIntegrity_Status(*source.IkeIntegrity)
		policy.IkeIntegrity = &ikeIntegrity
	} else {
		policy.IkeIntegrity = nil
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		ipsecEncryption := IpsecEncryption_Status(*source.IpsecEncryption)
		policy.IpsecEncryption = &ipsecEncryption
	} else {
		policy.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		ipsecIntegrity := IpsecIntegrity_Status(*source.IpsecIntegrity)
		policy.IpsecIntegrity = &ipsecIntegrity
	} else {
		policy.IpsecIntegrity = nil
	}

	// PfsGroup
	if source.PfsGroup != nil {
		pfsGroup := PfsGroup_Status(*source.PfsGroup)
		policy.PfsGroup = &pfsGroup
	} else {
		policy.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	policy.SaDataSizeKilobytes = genruntime.ClonePointerToInt(source.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	policy.SaLifeTimeSeconds = genruntime.ClonePointerToInt(source.SaLifeTimeSeconds)

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicyStatus populates the provided destination IpsecPolicy_Status from our IpsecPolicy_Status
func (policy *IpsecPolicy_Status) AssignPropertiesToIpsecPolicyStatus(destination *v20201101s.IpsecPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	if policy.DhGroup != nil {
		dhGroup := string(*policy.DhGroup)
		destination.DhGroup = &dhGroup
	} else {
		destination.DhGroup = nil
	}

	// IkeEncryption
	if policy.IkeEncryption != nil {
		ikeEncryption := string(*policy.IkeEncryption)
		destination.IkeEncryption = &ikeEncryption
	} else {
		destination.IkeEncryption = nil
	}

	// IkeIntegrity
	if policy.IkeIntegrity != nil {
		ikeIntegrity := string(*policy.IkeIntegrity)
		destination.IkeIntegrity = &ikeIntegrity
	} else {
		destination.IkeIntegrity = nil
	}

	// IpsecEncryption
	if policy.IpsecEncryption != nil {
		ipsecEncryption := string(*policy.IpsecEncryption)
		destination.IpsecEncryption = &ipsecEncryption
	} else {
		destination.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if policy.IpsecIntegrity != nil {
		ipsecIntegrity := string(*policy.IpsecIntegrity)
		destination.IpsecIntegrity = &ipsecIntegrity
	} else {
		destination.IpsecIntegrity = nil
	}

	// PfsGroup
	if policy.PfsGroup != nil {
		pfsGroup := string(*policy.PfsGroup)
		destination.PfsGroup = &pfsGroup
	} else {
		destination.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = genruntime.ClonePointerToInt(policy.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = genruntime.ClonePointerToInt(policy.SaLifeTimeSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/RadiusServer
type RadiusServer struct {
	// +kubebuilder:validation:Required
	// RadiusServerAddress: The address of this radius server.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// RadiusServerScore: The initial score assigned to this radius server.
	RadiusServerScore *int `json:"radiusServerScore,omitempty"`

	// RadiusServerSecret: The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.ARMTransformer = &RadiusServer{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (server *RadiusServer) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if server == nil {
		return nil, nil
	}
	result := &RadiusServerARM{}

	// Set property ‘RadiusServerAddress’:
	if server.RadiusServerAddress != nil {
		radiusServerAddress := *server.RadiusServerAddress
		result.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerScore’:
	if server.RadiusServerScore != nil {
		radiusServerScore := *server.RadiusServerScore
		result.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if server.RadiusServerSecret != nil {
		radiusServerSecret := *server.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RadiusServer) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RadiusServerARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RadiusServer) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServerARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServerARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		server.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		server.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		server.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServer populates our RadiusServer from the provided source RadiusServer
func (server *RadiusServer) AssignPropertiesFromRadiusServer(source *v20201101s.RadiusServer) error {

	// RadiusServerAddress
	server.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerScore
	server.RadiusServerScore = genruntime.ClonePointerToInt(source.RadiusServerScore)

	// RadiusServerSecret
	server.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// No error
	return nil
}

// AssignPropertiesToRadiusServer populates the provided destination RadiusServer from our RadiusServer
func (server *RadiusServer) AssignPropertiesToRadiusServer(destination *v20201101s.RadiusServer) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(server.RadiusServerAddress)

	// RadiusServerScore
	destination.RadiusServerScore = genruntime.ClonePointerToInt(server.RadiusServerScore)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(server.RadiusServerSecret)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RadiusServer_Status struct {
	// RadiusServerAddress: The address of this radius server.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// RadiusServerScore: The initial score assigned to this radius server.
	RadiusServerScore *int `json:"radiusServerScore,omitempty"`

	// RadiusServerSecret: The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.FromARMConverter = &RadiusServer_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RadiusServer_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RadiusServer_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RadiusServer_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServer_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServer_StatusARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		server.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		server.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		server.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServerStatus populates our RadiusServer_Status from the provided source RadiusServer_Status
func (server *RadiusServer_Status) AssignPropertiesFromRadiusServerStatus(source *v20201101s.RadiusServer_Status) error {

	// RadiusServerAddress
	server.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerScore
	server.RadiusServerScore = genruntime.ClonePointerToInt(source.RadiusServerScore)

	// RadiusServerSecret
	server.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// No error
	return nil
}

// AssignPropertiesToRadiusServerStatus populates the provided destination RadiusServer_Status from our RadiusServer_Status
func (server *RadiusServer_Status) AssignPropertiesToRadiusServerStatus(destination *v20201101s.RadiusServer_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(server.RadiusServerAddress)

	// RadiusServerScore
	destination.RadiusServerScore = genruntime.ClonePointerToInt(server.RadiusServerScore)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(server.RadiusServerSecret)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Dynamic","Static"}
type VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod string

const (
	VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethodDynamic = VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod("Dynamic")
	VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethodStatic  = VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod("Static")
)

// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySkuName string

const (
	VirtualNetworkGatewaySkuNameBasic            = VirtualNetworkGatewaySkuName("Basic")
	VirtualNetworkGatewaySkuNameErGw1AZ          = VirtualNetworkGatewaySkuName("ErGw1AZ")
	VirtualNetworkGatewaySkuNameErGw2AZ          = VirtualNetworkGatewaySkuName("ErGw2AZ")
	VirtualNetworkGatewaySkuNameErGw3AZ          = VirtualNetworkGatewaySkuName("ErGw3AZ")
	VirtualNetworkGatewaySkuNameHighPerformance  = VirtualNetworkGatewaySkuName("HighPerformance")
	VirtualNetworkGatewaySkuNameStandard         = VirtualNetworkGatewaySkuName("Standard")
	VirtualNetworkGatewaySkuNameUltraPerformance = VirtualNetworkGatewaySkuName("UltraPerformance")
	VirtualNetworkGatewaySkuNameVpnGw1           = VirtualNetworkGatewaySkuName("VpnGw1")
	VirtualNetworkGatewaySkuNameVpnGw1AZ         = VirtualNetworkGatewaySkuName("VpnGw1AZ")
	VirtualNetworkGatewaySkuNameVpnGw2           = VirtualNetworkGatewaySkuName("VpnGw2")
	VirtualNetworkGatewaySkuNameVpnGw2AZ         = VirtualNetworkGatewaySkuName("VpnGw2AZ")
	VirtualNetworkGatewaySkuNameVpnGw3           = VirtualNetworkGatewaySkuName("VpnGw3")
	VirtualNetworkGatewaySkuNameVpnGw3AZ         = VirtualNetworkGatewaySkuName("VpnGw3AZ")
	VirtualNetworkGatewaySkuNameVpnGw4           = VirtualNetworkGatewaySkuName("VpnGw4")
	VirtualNetworkGatewaySkuNameVpnGw4AZ         = VirtualNetworkGatewaySkuName("VpnGw4AZ")
	VirtualNetworkGatewaySkuNameVpnGw5           = VirtualNetworkGatewaySkuName("VpnGw5")
	VirtualNetworkGatewaySkuNameVpnGw5AZ         = VirtualNetworkGatewaySkuName("VpnGw5AZ")
)

type VirtualNetworkGatewaySkuStatusName string

const (
	VirtualNetworkGatewaySkuStatusNameBasic            = VirtualNetworkGatewaySkuStatusName("Basic")
	VirtualNetworkGatewaySkuStatusNameErGw1AZ          = VirtualNetworkGatewaySkuStatusName("ErGw1AZ")
	VirtualNetworkGatewaySkuStatusNameErGw2AZ          = VirtualNetworkGatewaySkuStatusName("ErGw2AZ")
	VirtualNetworkGatewaySkuStatusNameErGw3AZ          = VirtualNetworkGatewaySkuStatusName("ErGw3AZ")
	VirtualNetworkGatewaySkuStatusNameHighPerformance  = VirtualNetworkGatewaySkuStatusName("HighPerformance")
	VirtualNetworkGatewaySkuStatusNameStandard         = VirtualNetworkGatewaySkuStatusName("Standard")
	VirtualNetworkGatewaySkuStatusNameUltraPerformance = VirtualNetworkGatewaySkuStatusName("UltraPerformance")
	VirtualNetworkGatewaySkuStatusNameVpnGw1           = VirtualNetworkGatewaySkuStatusName("VpnGw1")
	VirtualNetworkGatewaySkuStatusNameVpnGw1AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw1AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw2           = VirtualNetworkGatewaySkuStatusName("VpnGw2")
	VirtualNetworkGatewaySkuStatusNameVpnGw2AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw2AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw3           = VirtualNetworkGatewaySkuStatusName("VpnGw3")
	VirtualNetworkGatewaySkuStatusNameVpnGw3AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw3AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw4           = VirtualNetworkGatewaySkuStatusName("VpnGw4")
	VirtualNetworkGatewaySkuStatusNameVpnGw4AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw4AZ")
	VirtualNetworkGatewaySkuStatusNameVpnGw5           = VirtualNetworkGatewaySkuStatusName("VpnGw5")
	VirtualNetworkGatewaySkuStatusNameVpnGw5AZ         = VirtualNetworkGatewaySkuStatusName("VpnGw5AZ")
)

type VirtualNetworkGatewaySkuStatusTier string

const (
	VirtualNetworkGatewaySkuStatusTierBasic            = VirtualNetworkGatewaySkuStatusTier("Basic")
	VirtualNetworkGatewaySkuStatusTierErGw1AZ          = VirtualNetworkGatewaySkuStatusTier("ErGw1AZ")
	VirtualNetworkGatewaySkuStatusTierErGw2AZ          = VirtualNetworkGatewaySkuStatusTier("ErGw2AZ")
	VirtualNetworkGatewaySkuStatusTierErGw3AZ          = VirtualNetworkGatewaySkuStatusTier("ErGw3AZ")
	VirtualNetworkGatewaySkuStatusTierHighPerformance  = VirtualNetworkGatewaySkuStatusTier("HighPerformance")
	VirtualNetworkGatewaySkuStatusTierStandard         = VirtualNetworkGatewaySkuStatusTier("Standard")
	VirtualNetworkGatewaySkuStatusTierUltraPerformance = VirtualNetworkGatewaySkuStatusTier("UltraPerformance")
	VirtualNetworkGatewaySkuStatusTierVpnGw1           = VirtualNetworkGatewaySkuStatusTier("VpnGw1")
	VirtualNetworkGatewaySkuStatusTierVpnGw1AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw1AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw2           = VirtualNetworkGatewaySkuStatusTier("VpnGw2")
	VirtualNetworkGatewaySkuStatusTierVpnGw2AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw2AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw3           = VirtualNetworkGatewaySkuStatusTier("VpnGw3")
	VirtualNetworkGatewaySkuStatusTierVpnGw3AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw3AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw4           = VirtualNetworkGatewaySkuStatusTier("VpnGw4")
	VirtualNetworkGatewaySkuStatusTierVpnGw4AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw4AZ")
	VirtualNetworkGatewaySkuStatusTierVpnGw5           = VirtualNetworkGatewaySkuStatusTier("VpnGw5")
	VirtualNetworkGatewaySkuStatusTierVpnGw5AZ         = VirtualNetworkGatewaySkuStatusTier("VpnGw5AZ")
)

// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySkuTier string

const (
	VirtualNetworkGatewaySkuTierBasic            = VirtualNetworkGatewaySkuTier("Basic")
	VirtualNetworkGatewaySkuTierErGw1AZ          = VirtualNetworkGatewaySkuTier("ErGw1AZ")
	VirtualNetworkGatewaySkuTierErGw2AZ          = VirtualNetworkGatewaySkuTier("ErGw2AZ")
	VirtualNetworkGatewaySkuTierErGw3AZ          = VirtualNetworkGatewaySkuTier("ErGw3AZ")
	VirtualNetworkGatewaySkuTierHighPerformance  = VirtualNetworkGatewaySkuTier("HighPerformance")
	VirtualNetworkGatewaySkuTierStandard         = VirtualNetworkGatewaySkuTier("Standard")
	VirtualNetworkGatewaySkuTierUltraPerformance = VirtualNetworkGatewaySkuTier("UltraPerformance")
	VirtualNetworkGatewaySkuTierVpnGw1           = VirtualNetworkGatewaySkuTier("VpnGw1")
	VirtualNetworkGatewaySkuTierVpnGw1AZ         = VirtualNetworkGatewaySkuTier("VpnGw1AZ")
	VirtualNetworkGatewaySkuTierVpnGw2           = VirtualNetworkGatewaySkuTier("VpnGw2")
	VirtualNetworkGatewaySkuTierVpnGw2AZ         = VirtualNetworkGatewaySkuTier("VpnGw2AZ")
	VirtualNetworkGatewaySkuTierVpnGw3           = VirtualNetworkGatewaySkuTier("VpnGw3")
	VirtualNetworkGatewaySkuTierVpnGw3AZ         = VirtualNetworkGatewaySkuTier("VpnGw3AZ")
	VirtualNetworkGatewaySkuTierVpnGw4           = VirtualNetworkGatewaySkuTier("VpnGw4")
	VirtualNetworkGatewaySkuTierVpnGw4AZ         = VirtualNetworkGatewaySkuTier("VpnGw4AZ")
	VirtualNetworkGatewaySkuTierVpnGw5           = VirtualNetworkGatewaySkuTier("VpnGw5")
	VirtualNetworkGatewaySkuTierVpnGw5AZ         = VirtualNetworkGatewaySkuTier("VpnGw5AZ")
)

// +kubebuilder:validation:Enum={"AAD","Certificate","Radius"}
type VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypesAAD         = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("AAD")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypesCertificate = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("Certificate")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypesRadius      = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("Radius")
)

// +kubebuilder:validation:Enum={"IkeV2","OpenVPN","SSTP"}
type VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocolsIkeV2   = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("IkeV2")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocolsOpenVPN = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("OpenVPN")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocolsSSTP    = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("SSTP")
)

type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates struct {
	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Thumbprint: The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificates == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}

	// Set property ‘Name’:
	if certificates.Name != nil {
		name := *certificates.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if certificates.Thumbprint != nil {
		result.Properties = &VpnClientRevokedCertificatePropertiesFormatARM{}
	}
	if certificates.Thumbprint != nil {
		thumbprint := *certificates.Thumbprint
		result.Properties.Thumbprint = &thumbprint
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificates.Name = &name
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			certificates.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(source *v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) error {

	// Name
	certificates.Name = genruntime.ClonePointerToString(source.Name)

	// Thumbprint
	certificates.Thumbprint = genruntime.ClonePointerToString(source.Thumbprint)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(destination *v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(certificates.Name)

	// Thumbprint
	destination.Thumbprint = genruntime.ClonePointerToString(certificates.Thumbprint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates struct {
	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// PublicCertData: The certificate public data.
	PublicCertData *string `json:"publicCertData,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificates == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}

	// Set property ‘Name’:
	if certificates.Name != nil {
		name := *certificates.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if certificates.PublicCertData != nil {
		result.Properties = &VpnClientRootCertificatePropertiesFormatARM{}
	}
	if certificates.PublicCertData != nil {
		publicCertData := *certificates.PublicCertData
		result.Properties.PublicCertData = &publicCertData
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificates.Name = &name
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicCertData != nil {
			publicCertData := *typedInput.Properties.PublicCertData
			certificates.PublicCertData = &publicCertData
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(source *v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) error {

	// Name
	certificates.Name = genruntime.ClonePointerToString(source.Name)

	// PublicCertData
	certificates.PublicCertData = genruntime.ClonePointerToString(source.PublicCertData)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(destination *v20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(certificates.Name)

	// PublicCertData
	destination.PublicCertData = genruntime.ClonePointerToString(certificates.PublicCertData)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientConfigurationStatusVpnAuthenticationTypes string

const (
	VpnClientConfigurationStatusVpnAuthenticationTypesAAD         = VpnClientConfigurationStatusVpnAuthenticationTypes("AAD")
	VpnClientConfigurationStatusVpnAuthenticationTypesCertificate = VpnClientConfigurationStatusVpnAuthenticationTypes("Certificate")
	VpnClientConfigurationStatusVpnAuthenticationTypesRadius      = VpnClientConfigurationStatusVpnAuthenticationTypes("Radius")
)

type VpnClientConfigurationStatusVpnClientProtocols string

const (
	VpnClientConfigurationStatusVpnClientProtocolsIkeV2   = VpnClientConfigurationStatusVpnClientProtocols("IkeV2")
	VpnClientConfigurationStatusVpnClientProtocolsOpenVPN = VpnClientConfigurationStatusVpnClientProtocols("OpenVPN")
	VpnClientConfigurationStatusVpnClientProtocolsSSTP    = VpnClientConfigurationStatusVpnClientProtocols("SSTP")
)

type VpnClientRevokedCertificate_Status struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the VPN client revoked certificate resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// Thumbprint: The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientRevokedCertificate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRevokedCertificate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRevokedCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRevokedCertificate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRevokedCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRevokedCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		certificate.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		certificate.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			certificate.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			certificate.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRevokedCertificateStatus populates our VpnClientRevokedCertificate_Status from the provided source VpnClientRevokedCertificate_Status
func (certificate *VpnClientRevokedCertificate_Status) AssignPropertiesFromVpnClientRevokedCertificateStatus(source *v20201101s.VpnClientRevokedCertificate_Status) error {

	// Etag
	certificate.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	certificate.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		certificate.ProvisioningState = &provisioningState
	} else {
		certificate.ProvisioningState = nil
	}

	// Thumbprint
	certificate.Thumbprint = genruntime.ClonePointerToString(source.Thumbprint)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRevokedCertificateStatus populates the provided destination VpnClientRevokedCertificate_Status from our VpnClientRevokedCertificate_Status
func (certificate *VpnClientRevokedCertificate_Status) AssignPropertiesToVpnClientRevokedCertificateStatus(destination *v20201101s.VpnClientRevokedCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(certificate.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(certificate.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// ProvisioningState
	if certificate.ProvisioningState != nil {
		provisioningState := string(*certificate.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Thumbprint
	destination.Thumbprint = genruntime.ClonePointerToString(certificate.Thumbprint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientRootCertificate_Status struct {
	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the VPN client root certificate resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// PublicCertData: The certificate public data.
	PublicCertData *string `json:"publicCertData,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientRootCertificate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRootCertificate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRootCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRootCertificate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRootCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRootCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		certificate.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		certificate.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			certificate.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicCertData != nil {
			publicCertData := *typedInput.Properties.PublicCertData
			certificate.PublicCertData = &publicCertData
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRootCertificateStatus populates our VpnClientRootCertificate_Status from the provided source VpnClientRootCertificate_Status
func (certificate *VpnClientRootCertificate_Status) AssignPropertiesFromVpnClientRootCertificateStatus(source *v20201101s.VpnClientRootCertificate_Status) error {

	// Etag
	certificate.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	certificate.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		certificate.ProvisioningState = &provisioningState
	} else {
		certificate.ProvisioningState = nil
	}

	// PublicCertData
	certificate.PublicCertData = genruntime.ClonePointerToString(source.PublicCertData)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRootCertificateStatus populates the provided destination VpnClientRootCertificate_Status from our VpnClientRootCertificate_Status
func (certificate *VpnClientRootCertificate_Status) AssignPropertiesToVpnClientRootCertificateStatus(destination *v20201101s.VpnClientRootCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(certificate.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(certificate.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// ProvisioningState
	if certificate.ProvisioningState != nil {
		provisioningState := string(*certificate.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicCertData
	destination.PublicCertData = genruntime.ClonePointerToString(certificate.PublicCertData)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DhGroup_Status string

const (
	DhGroup_StatusDHGroup1    = DhGroup_Status("DHGroup1")
	DhGroup_StatusDHGroup14   = DhGroup_Status("DHGroup14")
	DhGroup_StatusDHGroup2    = DhGroup_Status("DHGroup2")
	DhGroup_StatusDHGroup2048 = DhGroup_Status("DHGroup2048")
	DhGroup_StatusDHGroup24   = DhGroup_Status("DHGroup24")
	DhGroup_StatusECP256      = DhGroup_Status("ECP256")
	DhGroup_StatusECP384      = DhGroup_Status("ECP384")
	DhGroup_StatusNone        = DhGroup_Status("None")
)

type IkeEncryption_Status string

const (
	IkeEncryption_StatusAES128    = IkeEncryption_Status("AES128")
	IkeEncryption_StatusAES192    = IkeEncryption_Status("AES192")
	IkeEncryption_StatusAES256    = IkeEncryption_Status("AES256")
	IkeEncryption_StatusDES       = IkeEncryption_Status("DES")
	IkeEncryption_StatusDES3      = IkeEncryption_Status("DES3")
	IkeEncryption_StatusGCMAES128 = IkeEncryption_Status("GCMAES128")
	IkeEncryption_StatusGCMAES256 = IkeEncryption_Status("GCMAES256")
)

type IkeIntegrity_Status string

const (
	IkeIntegrity_StatusGCMAES128 = IkeIntegrity_Status("GCMAES128")
	IkeIntegrity_StatusGCMAES256 = IkeIntegrity_Status("GCMAES256")
	IkeIntegrity_StatusMD5       = IkeIntegrity_Status("MD5")
	IkeIntegrity_StatusSHA1      = IkeIntegrity_Status("SHA1")
	IkeIntegrity_StatusSHA256    = IkeIntegrity_Status("SHA256")
	IkeIntegrity_StatusSHA384    = IkeIntegrity_Status("SHA384")
)

type IpsecEncryption_Status string

const (
	IpsecEncryption_StatusAES128    = IpsecEncryption_Status("AES128")
	IpsecEncryption_StatusAES192    = IpsecEncryption_Status("AES192")
	IpsecEncryption_StatusAES256    = IpsecEncryption_Status("AES256")
	IpsecEncryption_StatusDES       = IpsecEncryption_Status("DES")
	IpsecEncryption_StatusDES3      = IpsecEncryption_Status("DES3")
	IpsecEncryption_StatusGCMAES128 = IpsecEncryption_Status("GCMAES128")
	IpsecEncryption_StatusGCMAES192 = IpsecEncryption_Status("GCMAES192")
	IpsecEncryption_StatusGCMAES256 = IpsecEncryption_Status("GCMAES256")
	IpsecEncryption_StatusNone      = IpsecEncryption_Status("None")
)

type IpsecIntegrity_Status string

const (
	IpsecIntegrity_StatusGCMAES128 = IpsecIntegrity_Status("GCMAES128")
	IpsecIntegrity_StatusGCMAES192 = IpsecIntegrity_Status("GCMAES192")
	IpsecIntegrity_StatusGCMAES256 = IpsecIntegrity_Status("GCMAES256")
	IpsecIntegrity_StatusMD5       = IpsecIntegrity_Status("MD5")
	IpsecIntegrity_StatusSHA1      = IpsecIntegrity_Status("SHA1")
	IpsecIntegrity_StatusSHA256    = IpsecIntegrity_Status("SHA256")
)

// +kubebuilder:validation:Enum={"DHGroup1","DHGroup14","DHGroup2","DHGroup2048","DHGroup24","ECP256","ECP384","None"}
type IpsecPolicyDhGroup string

const (
	IpsecPolicyDhGroupDHGroup1    = IpsecPolicyDhGroup("DHGroup1")
	IpsecPolicyDhGroupDHGroup14   = IpsecPolicyDhGroup("DHGroup14")
	IpsecPolicyDhGroupDHGroup2    = IpsecPolicyDhGroup("DHGroup2")
	IpsecPolicyDhGroupDHGroup2048 = IpsecPolicyDhGroup("DHGroup2048")
	IpsecPolicyDhGroupDHGroup24   = IpsecPolicyDhGroup("DHGroup24")
	IpsecPolicyDhGroupECP256      = IpsecPolicyDhGroup("ECP256")
	IpsecPolicyDhGroupECP384      = IpsecPolicyDhGroup("ECP384")
	IpsecPolicyDhGroupNone        = IpsecPolicyDhGroup("None")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES256"}
type IpsecPolicyIkeEncryption string

const (
	IpsecPolicyIkeEncryptionAES128    = IpsecPolicyIkeEncryption("AES128")
	IpsecPolicyIkeEncryptionAES192    = IpsecPolicyIkeEncryption("AES192")
	IpsecPolicyIkeEncryptionAES256    = IpsecPolicyIkeEncryption("AES256")
	IpsecPolicyIkeEncryptionDES       = IpsecPolicyIkeEncryption("DES")
	IpsecPolicyIkeEncryptionDES3      = IpsecPolicyIkeEncryption("DES3")
	IpsecPolicyIkeEncryptionGCMAES128 = IpsecPolicyIkeEncryption("GCMAES128")
	IpsecPolicyIkeEncryptionGCMAES256 = IpsecPolicyIkeEncryption("GCMAES256")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES256","MD5","SHA1","SHA256","SHA384"}
type IpsecPolicyIkeIntegrity string

const (
	IpsecPolicyIkeIntegrityGCMAES128 = IpsecPolicyIkeIntegrity("GCMAES128")
	IpsecPolicyIkeIntegrityGCMAES256 = IpsecPolicyIkeIntegrity("GCMAES256")
	IpsecPolicyIkeIntegrityMD5       = IpsecPolicyIkeIntegrity("MD5")
	IpsecPolicyIkeIntegritySHA1      = IpsecPolicyIkeIntegrity("SHA1")
	IpsecPolicyIkeIntegritySHA256    = IpsecPolicyIkeIntegrity("SHA256")
	IpsecPolicyIkeIntegritySHA384    = IpsecPolicyIkeIntegrity("SHA384")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES192","GCMAES256","None"}
type IpsecPolicyIpsecEncryption string

const (
	IpsecPolicyIpsecEncryptionAES128    = IpsecPolicyIpsecEncryption("AES128")
	IpsecPolicyIpsecEncryptionAES192    = IpsecPolicyIpsecEncryption("AES192")
	IpsecPolicyIpsecEncryptionAES256    = IpsecPolicyIpsecEncryption("AES256")
	IpsecPolicyIpsecEncryptionDES       = IpsecPolicyIpsecEncryption("DES")
	IpsecPolicyIpsecEncryptionDES3      = IpsecPolicyIpsecEncryption("DES3")
	IpsecPolicyIpsecEncryptionGCMAES128 = IpsecPolicyIpsecEncryption("GCMAES128")
	IpsecPolicyIpsecEncryptionGCMAES192 = IpsecPolicyIpsecEncryption("GCMAES192")
	IpsecPolicyIpsecEncryptionGCMAES256 = IpsecPolicyIpsecEncryption("GCMAES256")
	IpsecPolicyIpsecEncryptionNone      = IpsecPolicyIpsecEncryption("None")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES192","GCMAES256","MD5","SHA1","SHA256"}
type IpsecPolicyIpsecIntegrity string

const (
	IpsecPolicyIpsecIntegrityGCMAES128 = IpsecPolicyIpsecIntegrity("GCMAES128")
	IpsecPolicyIpsecIntegrityGCMAES192 = IpsecPolicyIpsecIntegrity("GCMAES192")
	IpsecPolicyIpsecIntegrityGCMAES256 = IpsecPolicyIpsecIntegrity("GCMAES256")
	IpsecPolicyIpsecIntegrityMD5       = IpsecPolicyIpsecIntegrity("MD5")
	IpsecPolicyIpsecIntegritySHA1      = IpsecPolicyIpsecIntegrity("SHA1")
	IpsecPolicyIpsecIntegritySHA256    = IpsecPolicyIpsecIntegrity("SHA256")
)

// +kubebuilder:validation:Enum={"ECP256","ECP384","None","PFS1","PFS14","PFS2","PFS2048","PFS24","PFSMM"}
type IpsecPolicyPfsGroup string

const (
	IpsecPolicyPfsGroupECP256  = IpsecPolicyPfsGroup("ECP256")
	IpsecPolicyPfsGroupECP384  = IpsecPolicyPfsGroup("ECP384")
	IpsecPolicyPfsGroupNone    = IpsecPolicyPfsGroup("None")
	IpsecPolicyPfsGroupPFS1    = IpsecPolicyPfsGroup("PFS1")
	IpsecPolicyPfsGroupPFS14   = IpsecPolicyPfsGroup("PFS14")
	IpsecPolicyPfsGroupPFS2    = IpsecPolicyPfsGroup("PFS2")
	IpsecPolicyPfsGroupPFS2048 = IpsecPolicyPfsGroup("PFS2048")
	IpsecPolicyPfsGroupPFS24   = IpsecPolicyPfsGroup("PFS24")
	IpsecPolicyPfsGroupPFSMM   = IpsecPolicyPfsGroup("PFSMM")
)

type PfsGroup_Status string

const (
	PfsGroup_StatusECP256  = PfsGroup_Status("ECP256")
	PfsGroup_StatusECP384  = PfsGroup_Status("ECP384")
	PfsGroup_StatusNone    = PfsGroup_Status("None")
	PfsGroup_StatusPFS1    = PfsGroup_Status("PFS1")
	PfsGroup_StatusPFS14   = PfsGroup_Status("PFS14")
	PfsGroup_StatusPFS2    = PfsGroup_Status("PFS2")
	PfsGroup_StatusPFS2048 = PfsGroup_Status("PFS2048")
	PfsGroup_StatusPFS24   = PfsGroup_Status("PFS24")
	PfsGroup_StatusPFSMM   = PfsGroup_Status("PFSMM")
)

func init() {
	SchemeBuilder.Register(&VirtualNetworkGateway{}, &VirtualNetworkGatewayList{})
}
