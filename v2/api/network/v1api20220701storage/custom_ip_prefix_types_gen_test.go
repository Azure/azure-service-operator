// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CustomIpPrefix_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefix via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefix, CustomIpPrefixGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefix runs a test to see if a specific instance of CustomIpPrefix round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefix(subject CustomIpPrefix) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefix
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefix instances for property testing - lazily instantiated by CustomIpPrefixGenerator()
var customIpPrefixGenerator gopter.Gen

// CustomIpPrefixGenerator returns a generator of CustomIpPrefix instances for property testing.
func CustomIpPrefixGenerator() gopter.Gen {
	if customIpPrefixGenerator != nil {
		return customIpPrefixGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCustomIpPrefix(generators)
	customIpPrefixGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix{}), generators)

	return customIpPrefixGenerator
}

// AddRelatedPropertyGeneratorsForCustomIpPrefix is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomIpPrefix(gens map[string]gopter.Gen) {
	gens["Spec"] = CustomIpPrefix_SpecGenerator()
	gens["Status"] = CustomIpPrefix_STATUSGenerator()
}

func Test_CustomIpPrefix_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefix_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefix_Spec, CustomIpPrefix_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefix_Spec runs a test to see if a specific instance of CustomIpPrefix_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefix_Spec(subject CustomIpPrefix_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefix_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefix_Spec instances for property testing - lazily instantiated by
// CustomIpPrefix_SpecGenerator()
var customIpPrefix_SpecGenerator gopter.Gen

// CustomIpPrefix_SpecGenerator returns a generator of CustomIpPrefix_Spec instances for property testing.
// We first initialize customIpPrefix_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomIpPrefix_SpecGenerator() gopter.Gen {
	if customIpPrefix_SpecGenerator != nil {
		return customIpPrefix_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefix_Spec(generators)
	customIpPrefix_SpecGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefix_Spec(generators)
	AddRelatedPropertyGeneratorsForCustomIpPrefix_Spec(generators)
	customIpPrefix_SpecGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix_Spec{}), generators)

	return customIpPrefix_SpecGenerator
}

// AddIndependentPropertyGeneratorsForCustomIpPrefix_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomIpPrefix_Spec(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.AlphaString())
	gens["AuthorizationMessage"] = gen.PtrOf(gen.AlphaString())
	gens["AzureName"] = gen.AlphaString()
	gens["Cidr"] = gen.PtrOf(gen.AlphaString())
	gens["CommissionedState"] = gen.PtrOf(gen.AlphaString())
	gens["ExpressRouteAdvertise"] = gen.PtrOf(gen.Bool())
	gens["Geo"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["NoInternetAdvertise"] = gen.PtrOf(gen.Bool())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["PrefixType"] = gen.PtrOf(gen.AlphaString())
	gens["SignedMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomIpPrefix_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomIpPrefix_Spec(gens map[string]gopter.Gen) {
	gens["CustomIpPrefixParent"] = gen.PtrOf(CustomIpPrefixSubResourceGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationGenerator())
}

func Test_CustomIpPrefix_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefix_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefix_STATUS, CustomIpPrefix_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefix_STATUS runs a test to see if a specific instance of CustomIpPrefix_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefix_STATUS(subject CustomIpPrefix_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefix_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefix_STATUS instances for property testing - lazily instantiated by
// CustomIpPrefix_STATUSGenerator()
var customIpPrefix_STATUSGenerator gopter.Gen

// CustomIpPrefix_STATUSGenerator returns a generator of CustomIpPrefix_STATUS instances for property testing.
// We first initialize customIpPrefix_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomIpPrefix_STATUSGenerator() gopter.Gen {
	if customIpPrefix_STATUSGenerator != nil {
		return customIpPrefix_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS(generators)
	customIpPrefix_STATUSGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS(generators)
	AddRelatedPropertyGeneratorsForCustomIpPrefix_STATUS(generators)
	customIpPrefix_STATUSGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix_STATUS{}), generators)

	return customIpPrefix_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.AlphaString())
	gens["AuthorizationMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Cidr"] = gen.PtrOf(gen.AlphaString())
	gens["CommissionedState"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["ExpressRouteAdvertise"] = gen.PtrOf(gen.Bool())
	gens["FailedReason"] = gen.PtrOf(gen.AlphaString())
	gens["Geo"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NoInternetAdvertise"] = gen.PtrOf(gen.Bool())
	gens["PrefixType"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["SignedMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomIpPrefix_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomIpPrefix_STATUS(gens map[string]gopter.Gen) {
	gens["ChildCustomIpPrefixes"] = gen.SliceOf(CustomIpPrefixSubResource_STATUSGenerator())
	gens["CustomIpPrefixParent"] = gen.PtrOf(CustomIpPrefixSubResource_STATUSGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSGenerator())
	gens["PublicIpPrefixes"] = gen.SliceOf(CustomIpPrefixSubResource_STATUSGenerator())
}

func Test_CustomIpPrefixSubResource_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefixSubResource via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefixSubResource, CustomIpPrefixSubResourceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefixSubResource runs a test to see if a specific instance of CustomIpPrefixSubResource round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefixSubResource(subject CustomIpPrefixSubResource) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefixSubResource
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefixSubResource instances for property testing - lazily instantiated by
// CustomIpPrefixSubResourceGenerator()
var customIpPrefixSubResourceGenerator gopter.Gen

// CustomIpPrefixSubResourceGenerator returns a generator of CustomIpPrefixSubResource instances for property testing.
func CustomIpPrefixSubResourceGenerator() gopter.Gen {
	if customIpPrefixSubResourceGenerator != nil {
		return customIpPrefixSubResourceGenerator
	}

	generators := make(map[string]gopter.Gen)
	customIpPrefixSubResourceGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefixSubResource{}), generators)

	return customIpPrefixSubResourceGenerator
}

func Test_CustomIpPrefixSubResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefixSubResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefixSubResource_STATUS, CustomIpPrefixSubResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefixSubResource_STATUS runs a test to see if a specific instance of CustomIpPrefixSubResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefixSubResource_STATUS(subject CustomIpPrefixSubResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefixSubResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefixSubResource_STATUS instances for property testing - lazily instantiated by
// CustomIpPrefixSubResource_STATUSGenerator()
var customIpPrefixSubResource_STATUSGenerator gopter.Gen

// CustomIpPrefixSubResource_STATUSGenerator returns a generator of CustomIpPrefixSubResource_STATUS instances for property testing.
func CustomIpPrefixSubResource_STATUSGenerator() gopter.Gen {
	if customIpPrefixSubResource_STATUSGenerator != nil {
		return customIpPrefixSubResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefixSubResource_STATUS(generators)
	customIpPrefixSubResource_STATUSGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefixSubResource_STATUS{}), generators)

	return customIpPrefixSubResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForCustomIpPrefixSubResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomIpPrefixSubResource_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation, ExtendedLocationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation runs a test to see if a specific instance of ExtendedLocation round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation(subject ExtendedLocation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation instances for property testing - lazily instantiated by ExtendedLocationGenerator()
var extendedLocationGenerator gopter.Gen

// ExtendedLocationGenerator returns a generator of ExtendedLocation instances for property testing.
func ExtendedLocationGenerator() gopter.Gen {
	if extendedLocationGenerator != nil {
		return extendedLocationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation(generators)
	extendedLocationGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation{}), generators)

	return extendedLocationGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUS, ExtendedLocation_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUS runs a test to see if a specific instance of ExtendedLocation_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUS(subject ExtendedLocation_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUS instances for property testing - lazily instantiated by
// ExtendedLocation_STATUSGenerator()
var extendedLocation_STATUSGenerator gopter.Gen

// ExtendedLocation_STATUSGenerator returns a generator of ExtendedLocation_STATUS instances for property testing.
func ExtendedLocation_STATUSGenerator() gopter.Gen {
	if extendedLocation_STATUSGenerator != nil {
		return extendedLocation_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUS(generators)
	extendedLocation_STATUSGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUS{}), generators)

	return extendedLocation_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}
