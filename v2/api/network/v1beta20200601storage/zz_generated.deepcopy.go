//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright (c) Microsoft Corporation.
Licensed under the MIT license.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta20200601storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ARecord) DeepCopyInto(out *ARecord) {
	*out = *in
	if in.Ipv4Address != nil {
		in, out := &in.Ipv4Address, &out.Ipv4Address
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ARecord.
func (in *ARecord) DeepCopy() *ARecord {
	if in == nil {
		return nil
	}
	out := new(ARecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ARecord_STATUS) DeepCopyInto(out *ARecord_STATUS) {
	*out = *in
	if in.Ipv4Address != nil {
		in, out := &in.Ipv4Address, &out.Ipv4Address
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ARecord_STATUS.
func (in *ARecord_STATUS) DeepCopy() *ARecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(ARecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AaaaRecord) DeepCopyInto(out *AaaaRecord) {
	*out = *in
	if in.Ipv6Address != nil {
		in, out := &in.Ipv6Address, &out.Ipv6Address
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AaaaRecord.
func (in *AaaaRecord) DeepCopy() *AaaaRecord {
	if in == nil {
		return nil
	}
	out := new(AaaaRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AaaaRecord_STATUS) DeepCopyInto(out *AaaaRecord_STATUS) {
	*out = *in
	if in.Ipv6Address != nil {
		in, out := &in.Ipv6Address, &out.Ipv6Address
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AaaaRecord_STATUS.
func (in *AaaaRecord_STATUS) DeepCopy() *AaaaRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(AaaaRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CnameRecord) DeepCopyInto(out *CnameRecord) {
	*out = *in
	if in.Cname != nil {
		in, out := &in.Cname, &out.Cname
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CnameRecord.
func (in *CnameRecord) DeepCopy() *CnameRecord {
	if in == nil {
		return nil
	}
	out := new(CnameRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CnameRecord_STATUS) DeepCopyInto(out *CnameRecord_STATUS) {
	*out = *in
	if in.Cname != nil {
		in, out := &in.Cname, &out.Cname
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CnameRecord_STATUS.
func (in *CnameRecord_STATUS) DeepCopy() *CnameRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(CnameRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MxRecord) DeepCopyInto(out *MxRecord) {
	*out = *in
	if in.Exchange != nil {
		in, out := &in.Exchange, &out.Exchange
		*out = new(string)
		**out = **in
	}
	if in.Preference != nil {
		in, out := &in.Preference, &out.Preference
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MxRecord.
func (in *MxRecord) DeepCopy() *MxRecord {
	if in == nil {
		return nil
	}
	out := new(MxRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MxRecord_STATUS) DeepCopyInto(out *MxRecord_STATUS) {
	*out = *in
	if in.Exchange != nil {
		in, out := &in.Exchange, &out.Exchange
		*out = new(string)
		**out = **in
	}
	if in.Preference != nil {
		in, out := &in.Preference, &out.Preference
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MxRecord_STATUS.
func (in *MxRecord_STATUS) DeepCopy() *MxRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(MxRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesAAAARecord) DeepCopyInto(out *PrivateDnsZonesAAAARecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesAAAARecord.
func (in *PrivateDnsZonesAAAARecord) DeepCopy() *PrivateDnsZonesAAAARecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesAAAARecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesAAAARecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesAAAARecordList) DeepCopyInto(out *PrivateDnsZonesAAAARecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesAAAARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesAAAARecordList.
func (in *PrivateDnsZonesAAAARecordList) DeepCopy() *PrivateDnsZonesAAAARecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesAAAARecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesAAAARecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesARecord) DeepCopyInto(out *PrivateDnsZonesARecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesARecord.
func (in *PrivateDnsZonesARecord) DeepCopy() *PrivateDnsZonesARecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesARecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesARecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesARecordList) DeepCopyInto(out *PrivateDnsZonesARecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesARecordList.
func (in *PrivateDnsZonesARecordList) DeepCopy() *PrivateDnsZonesARecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesARecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesARecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesCNAMERecord) DeepCopyInto(out *PrivateDnsZonesCNAMERecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesCNAMERecord.
func (in *PrivateDnsZonesCNAMERecord) DeepCopy() *PrivateDnsZonesCNAMERecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesCNAMERecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesCNAMERecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesCNAMERecordList) DeepCopyInto(out *PrivateDnsZonesCNAMERecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesCNAMERecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesCNAMERecordList.
func (in *PrivateDnsZonesCNAMERecordList) DeepCopy() *PrivateDnsZonesCNAMERecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesCNAMERecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesCNAMERecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesMXRecord) DeepCopyInto(out *PrivateDnsZonesMXRecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesMXRecord.
func (in *PrivateDnsZonesMXRecord) DeepCopy() *PrivateDnsZonesMXRecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesMXRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesMXRecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesMXRecordList) DeepCopyInto(out *PrivateDnsZonesMXRecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesMXRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesMXRecordList.
func (in *PrivateDnsZonesMXRecordList) DeepCopy() *PrivateDnsZonesMXRecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesMXRecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesMXRecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesPTRRecord) DeepCopyInto(out *PrivateDnsZonesPTRRecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesPTRRecord.
func (in *PrivateDnsZonesPTRRecord) DeepCopy() *PrivateDnsZonesPTRRecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesPTRRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesPTRRecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesPTRRecordList) DeepCopyInto(out *PrivateDnsZonesPTRRecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesPTRRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesPTRRecordList.
func (in *PrivateDnsZonesPTRRecordList) DeepCopy() *PrivateDnsZonesPTRRecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesPTRRecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesPTRRecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesSRVRecord) DeepCopyInto(out *PrivateDnsZonesSRVRecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesSRVRecord.
func (in *PrivateDnsZonesSRVRecord) DeepCopy() *PrivateDnsZonesSRVRecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesSRVRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesSRVRecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesSRVRecordList) DeepCopyInto(out *PrivateDnsZonesSRVRecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesSRVRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesSRVRecordList.
func (in *PrivateDnsZonesSRVRecordList) DeepCopy() *PrivateDnsZonesSRVRecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesSRVRecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesSRVRecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesTXTRecord) DeepCopyInto(out *PrivateDnsZonesTXTRecord) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesTXTRecord.
func (in *PrivateDnsZonesTXTRecord) DeepCopy() *PrivateDnsZonesTXTRecord {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesTXTRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesTXTRecord) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesTXTRecordList) DeepCopyInto(out *PrivateDnsZonesTXTRecordList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesTXTRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesTXTRecordList.
func (in *PrivateDnsZonesTXTRecordList) DeepCopy() *PrivateDnsZonesTXTRecordList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesTXTRecordList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesTXTRecordList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesVirtualNetworkLink) DeepCopyInto(out *PrivateDnsZonesVirtualNetworkLink) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesVirtualNetworkLink.
func (in *PrivateDnsZonesVirtualNetworkLink) DeepCopy() *PrivateDnsZonesVirtualNetworkLink {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesVirtualNetworkLink)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesVirtualNetworkLink) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZonesVirtualNetworkLinkList) DeepCopyInto(out *PrivateDnsZonesVirtualNetworkLinkList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivateDnsZonesVirtualNetworkLink, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZonesVirtualNetworkLinkList.
func (in *PrivateDnsZonesVirtualNetworkLinkList) DeepCopy() *PrivateDnsZonesVirtualNetworkLinkList {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZonesVirtualNetworkLinkList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivateDnsZonesVirtualNetworkLinkList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_AAAA_STATUS) DeepCopyInto(out *PrivateDnsZones_AAAA_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_AAAA_STATUS.
func (in *PrivateDnsZones_AAAA_STATUS) DeepCopy() *PrivateDnsZones_AAAA_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_AAAA_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_AAAA_Spec) DeepCopyInto(out *PrivateDnsZones_AAAA_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_AAAA_Spec.
func (in *PrivateDnsZones_AAAA_Spec) DeepCopy() *PrivateDnsZones_AAAA_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_AAAA_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_A_STATUS) DeepCopyInto(out *PrivateDnsZones_A_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_A_STATUS.
func (in *PrivateDnsZones_A_STATUS) DeepCopy() *PrivateDnsZones_A_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_A_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_A_Spec) DeepCopyInto(out *PrivateDnsZones_A_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_A_Spec.
func (in *PrivateDnsZones_A_Spec) DeepCopy() *PrivateDnsZones_A_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_A_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_CNAME_STATUS) DeepCopyInto(out *PrivateDnsZones_CNAME_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_CNAME_STATUS.
func (in *PrivateDnsZones_CNAME_STATUS) DeepCopy() *PrivateDnsZones_CNAME_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_CNAME_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_CNAME_Spec) DeepCopyInto(out *PrivateDnsZones_CNAME_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_CNAME_Spec.
func (in *PrivateDnsZones_CNAME_Spec) DeepCopy() *PrivateDnsZones_CNAME_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_CNAME_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_MX_STATUS) DeepCopyInto(out *PrivateDnsZones_MX_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_MX_STATUS.
func (in *PrivateDnsZones_MX_STATUS) DeepCopy() *PrivateDnsZones_MX_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_MX_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_MX_Spec) DeepCopyInto(out *PrivateDnsZones_MX_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_MX_Spec.
func (in *PrivateDnsZones_MX_Spec) DeepCopy() *PrivateDnsZones_MX_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_MX_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_PTR_STATUS) DeepCopyInto(out *PrivateDnsZones_PTR_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_PTR_STATUS.
func (in *PrivateDnsZones_PTR_STATUS) DeepCopy() *PrivateDnsZones_PTR_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_PTR_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_PTR_Spec) DeepCopyInto(out *PrivateDnsZones_PTR_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_PTR_Spec.
func (in *PrivateDnsZones_PTR_Spec) DeepCopy() *PrivateDnsZones_PTR_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_PTR_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_SRV_STATUS) DeepCopyInto(out *PrivateDnsZones_SRV_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_SRV_STATUS.
func (in *PrivateDnsZones_SRV_STATUS) DeepCopy() *PrivateDnsZones_SRV_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_SRV_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_SRV_Spec) DeepCopyInto(out *PrivateDnsZones_SRV_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_SRV_Spec.
func (in *PrivateDnsZones_SRV_Spec) DeepCopy() *PrivateDnsZones_SRV_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_SRV_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_TXT_STATUS) DeepCopyInto(out *PrivateDnsZones_TXT_STATUS) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.IsAutoRegistered != nil {
		in, out := &in.IsAutoRegistered, &out.IsAutoRegistered
		*out = new(bool)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord_STATUS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_TXT_STATUS.
func (in *PrivateDnsZones_TXT_STATUS) DeepCopy() *PrivateDnsZones_TXT_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_TXT_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_TXT_Spec) DeepCopyInto(out *PrivateDnsZones_TXT_Spec) {
	*out = *in
	if in.ARecords != nil {
		in, out := &in.ARecords, &out.ARecords
		*out = make([]ARecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AaaaRecords != nil {
		in, out := &in.AaaaRecords, &out.AaaaRecords
		*out = make([]AaaaRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CnameRecord != nil {
		in, out := &in.CnameRecord, &out.CnameRecord
		*out = new(CnameRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MxRecords != nil {
		in, out := &in.MxRecords, &out.MxRecords
		*out = make([]MxRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.PtrRecords != nil {
		in, out := &in.PtrRecords, &out.PtrRecords
		*out = make([]PtrRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SoaRecord != nil {
		in, out := &in.SoaRecord, &out.SoaRecord
		*out = new(SoaRecord)
		(*in).DeepCopyInto(*out)
	}
	if in.SrvRecords != nil {
		in, out := &in.SrvRecords, &out.SrvRecords
		*out = make([]SrvRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int)
		**out = **in
	}
	if in.TxtRecords != nil {
		in, out := &in.TxtRecords, &out.TxtRecords
		*out = make([]TxtRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_TXT_Spec.
func (in *PrivateDnsZones_TXT_Spec) DeepCopy() *PrivateDnsZones_TXT_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_TXT_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_VirtualNetworkLink_STATUS) DeepCopyInto(out *PrivateDnsZones_VirtualNetworkLink_STATUS) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ProvisioningState != nil {
		in, out := &in.ProvisioningState, &out.ProvisioningState
		*out = new(string)
		**out = **in
	}
	if in.RegistrationEnabled != nil {
		in, out := &in.RegistrationEnabled, &out.RegistrationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VirtualNetwork != nil {
		in, out := &in.VirtualNetwork, &out.VirtualNetwork
		*out = new(SubResource_STATUS)
		(*in).DeepCopyInto(*out)
	}
	if in.VirtualNetworkLinkState != nil {
		in, out := &in.VirtualNetworkLinkState, &out.VirtualNetworkLinkState
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_VirtualNetworkLink_STATUS.
func (in *PrivateDnsZones_VirtualNetworkLink_STATUS) DeepCopy() *PrivateDnsZones_VirtualNetworkLink_STATUS {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_VirtualNetworkLink_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivateDnsZones_VirtualNetworkLink_Spec) DeepCopyInto(out *PrivateDnsZones_VirtualNetworkLink_Spec) {
	*out = *in
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(genruntime.KnownResourceReference)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RegistrationEnabled != nil {
		in, out := &in.RegistrationEnabled, &out.RegistrationEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.VirtualNetwork != nil {
		in, out := &in.VirtualNetwork, &out.VirtualNetwork
		*out = new(SubResource)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivateDnsZones_VirtualNetworkLink_Spec.
func (in *PrivateDnsZones_VirtualNetworkLink_Spec) DeepCopy() *PrivateDnsZones_VirtualNetworkLink_Spec {
	if in == nil {
		return nil
	}
	out := new(PrivateDnsZones_VirtualNetworkLink_Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PtrRecord) DeepCopyInto(out *PtrRecord) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Ptrdname != nil {
		in, out := &in.Ptrdname, &out.Ptrdname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PtrRecord.
func (in *PtrRecord) DeepCopy() *PtrRecord {
	if in == nil {
		return nil
	}
	out := new(PtrRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PtrRecord_STATUS) DeepCopyInto(out *PtrRecord_STATUS) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Ptrdname != nil {
		in, out := &in.Ptrdname, &out.Ptrdname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PtrRecord_STATUS.
func (in *PtrRecord_STATUS) DeepCopy() *PtrRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(PtrRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SoaRecord) DeepCopyInto(out *SoaRecord) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
	if in.ExpireTime != nil {
		in, out := &in.ExpireTime, &out.ExpireTime
		*out = new(int)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.MinimumTtl != nil {
		in, out := &in.MinimumTtl, &out.MinimumTtl
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RefreshTime != nil {
		in, out := &in.RefreshTime, &out.RefreshTime
		*out = new(int)
		**out = **in
	}
	if in.RetryTime != nil {
		in, out := &in.RetryTime, &out.RetryTime
		*out = new(int)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SoaRecord.
func (in *SoaRecord) DeepCopy() *SoaRecord {
	if in == nil {
		return nil
	}
	out := new(SoaRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SoaRecord_STATUS) DeepCopyInto(out *SoaRecord_STATUS) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
	if in.ExpireTime != nil {
		in, out := &in.ExpireTime, &out.ExpireTime
		*out = new(int)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.MinimumTtl != nil {
		in, out := &in.MinimumTtl, &out.MinimumTtl
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RefreshTime != nil {
		in, out := &in.RefreshTime, &out.RefreshTime
		*out = new(int)
		**out = **in
	}
	if in.RetryTime != nil {
		in, out := &in.RetryTime, &out.RetryTime
		*out = new(int)
		**out = **in
	}
	if in.SerialNumber != nil {
		in, out := &in.SerialNumber, &out.SerialNumber
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SoaRecord_STATUS.
func (in *SoaRecord_STATUS) DeepCopy() *SoaRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(SoaRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SrvRecord) DeepCopyInto(out *SrvRecord) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SrvRecord.
func (in *SrvRecord) DeepCopy() *SrvRecord {
	if in == nil {
		return nil
	}
	out := new(SrvRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SrvRecord_STATUS) DeepCopyInto(out *SrvRecord_STATUS) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(int)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SrvRecord_STATUS.
func (in *SrvRecord_STATUS) DeepCopy() *SrvRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(SrvRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SubResource) DeepCopyInto(out *SubResource) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Reference != nil {
		in, out := &in.Reference, &out.Reference
		*out = new(genruntime.ResourceReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SubResource.
func (in *SubResource) DeepCopy() *SubResource {
	if in == nil {
		return nil
	}
	out := new(SubResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SubResource_STATUS) DeepCopyInto(out *SubResource_STATUS) {
	*out = *in
	if in.Id != nil {
		in, out := &in.Id, &out.Id
		*out = new(string)
		**out = **in
	}
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SubResource_STATUS.
func (in *SubResource_STATUS) DeepCopy() *SubResource_STATUS {
	if in == nil {
		return nil
	}
	out := new(SubResource_STATUS)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TxtRecord) DeepCopyInto(out *TxtRecord) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TxtRecord.
func (in *TxtRecord) DeepCopy() *TxtRecord {
	if in == nil {
		return nil
	}
	out := new(TxtRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TxtRecord_STATUS) DeepCopyInto(out *TxtRecord_STATUS) {
	*out = *in
	if in.PropertyBag != nil {
		in, out := &in.PropertyBag, &out.PropertyBag
		*out = make(genruntime.PropertyBag, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TxtRecord_STATUS.
func (in *TxtRecord_STATUS) DeepCopy() *TxtRecord_STATUS {
	if in == nil {
		return nil
	}
	out := new(TxtRecord_STATUS)
	in.DeepCopyInto(out)
	return out
}
