// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworksSubnet_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworksSubnet via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworksSubnet, VirtualNetworksSubnetGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworksSubnet runs a test to see if a specific instance of VirtualNetworksSubnet round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworksSubnet(subject VirtualNetworksSubnet) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworksSubnet
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworksSubnet instances for property testing - lazily instantiated by
//VirtualNetworksSubnetGenerator()
var virtualNetworksSubnetGenerator gopter.Gen

// VirtualNetworksSubnetGenerator returns a generator of VirtualNetworksSubnet instances for property testing.
func VirtualNetworksSubnetGenerator() gopter.Gen {
	if virtualNetworksSubnetGenerator != nil {
		return virtualNetworksSubnetGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualNetworksSubnet(generators)
	virtualNetworksSubnetGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnet{}), generators)

	return virtualNetworksSubnetGenerator
}

// AddRelatedPropertyGeneratorsForVirtualNetworksSubnet is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworksSubnet(gens map[string]gopter.Gen) {
	gens["Spec"] = VirtualNetworksSubnet_SpecGenerator()
	gens["Status"] = Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
}

func Test_Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded, Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing - lazily
//instantiated by Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
// We first initialize subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return subnet_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Purpose"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfiguration_StatusGenerator())
	gens["Delegations"] = gen.SliceOf(Delegation_StatusGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_StatusGenerator())
	gens["IpConfigurationProfiles"] = gen.SliceOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
	gens["IpConfigurations"] = gen.SliceOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResource_StatusGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
	gens["ResourceNavigationLinks"] = gen.SliceOf(ResourceNavigationLink_StatusGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
	gens["ServiceAssociationLinks"] = gen.SliceOf(ServiceAssociationLink_StatusGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormat_StatusGenerator())
}

func Test_VirtualNetworksSubnet_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworksSubnet_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworksSubnet_Spec, VirtualNetworksSubnet_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworksSubnet_Spec runs a test to see if a specific instance of VirtualNetworksSubnet_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworksSubnet_Spec(subject VirtualNetworksSubnet_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworksSubnet_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworksSubnet_Spec instances for property testing - lazily instantiated by
//VirtualNetworksSubnet_SpecGenerator()
var virtualNetworksSubnet_specGenerator gopter.Gen

// VirtualNetworksSubnet_SpecGenerator returns a generator of VirtualNetworksSubnet_Spec instances for property testing.
// We first initialize virtualNetworksSubnet_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworksSubnet_SpecGenerator() gopter.Gen {
	if virtualNetworksSubnet_specGenerator != nil {
		return virtualNetworksSubnet_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSubnet_Spec(generators)
	virtualNetworksSubnet_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnet_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSubnet_Spec(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworksSubnet_Spec(generators)
	virtualNetworksSubnet_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnet_Spec{}), generators)

	return virtualNetworksSubnet_specGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworksSubnet_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworksSubnet_Spec(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["AzureName"] = gen.AlphaString()
	gens["OriginalVersion"] = gen.AlphaString()
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworksSubnet_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworksSubnet_Spec(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfigurationGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSpecGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTableSpecGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicySpecGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatGenerator())
}

func Test_ApplicationGatewayIPConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration, ApplicationGatewayIPConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration runs a test to see if a specific instance of ApplicationGatewayIPConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration(subject ApplicationGatewayIPConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration instances for property testing - lazily instantiated by
//ApplicationGatewayIPConfigurationGenerator()
var applicationGatewayIPConfigurationGenerator gopter.Gen

// ApplicationGatewayIPConfigurationGenerator returns a generator of ApplicationGatewayIPConfiguration instances for property testing.
// We first initialize applicationGatewayIPConfigurationGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationGenerator != nil {
		return applicationGatewayIPConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration(generators)
	applicationGatewayIPConfigurationGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration(generators)
	applicationGatewayIPConfigurationGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration{}), generators)

	return applicationGatewayIPConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResourceGenerator())
}

func Test_ApplicationGatewayIPConfiguration_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration_Status, ApplicationGatewayIPConfiguration_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration_Status runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration_Status(subject ApplicationGatewayIPConfiguration_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_Status instances for property testing - lazily instantiated by
//ApplicationGatewayIPConfiguration_StatusGenerator()
var applicationGatewayIPConfiguration_statusGenerator gopter.Gen

// ApplicationGatewayIPConfiguration_StatusGenerator returns a generator of ApplicationGatewayIPConfiguration_Status instances for property testing.
// We first initialize applicationGatewayIPConfiguration_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfiguration_StatusGenerator() gopter.Gen {
	if applicationGatewayIPConfiguration_statusGenerator != nil {
		return applicationGatewayIPConfiguration_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_Status(generators)
	applicationGatewayIPConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_Status(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_Status(generators)
	applicationGatewayIPConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_Status{}), generators)

	return applicationGatewayIPConfiguration_statusGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_Status(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_Status(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResource_StatusGenerator())
}

func Test_Delegation_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegation_Status, Delegation_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegation_Status runs a test to see if a specific instance of Delegation_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegation_Status(subject Delegation_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_Status instances for property testing - lazily instantiated by Delegation_StatusGenerator()
var delegation_statusGenerator gopter.Gen

// Delegation_StatusGenerator returns a generator of Delegation_Status instances for property testing.
func Delegation_StatusGenerator() gopter.Gen {
	if delegation_statusGenerator != nil {
		return delegation_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_Status(generators)
	delegation_statusGenerator = gen.Struct(reflect.TypeOf(Delegation_Status{}), generators)

	return delegation_statusGenerator
}

// AddIndependentPropertyGeneratorsForDelegation_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegation_Status(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded, IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing -
//lazily instantiated by IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
func IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded, IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing - lazily
//instantiated by IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
// We first initialize ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
}

func Test_NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded, NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing -
//lazily instantiated by NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
func NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded, PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing - lazily
//instantiated by PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
// We first initialize privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusGenerator())
}

func Test_ResourceNavigationLink_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLink_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLink_Status, ResourceNavigationLink_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLink_Status runs a test to see if a specific instance of ResourceNavigationLink_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLink_Status(subject ResourceNavigationLink_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLink_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLink_Status instances for property testing - lazily instantiated by
//ResourceNavigationLink_StatusGenerator()
var resourceNavigationLink_statusGenerator gopter.Gen

// ResourceNavigationLink_StatusGenerator returns a generator of ResourceNavigationLink_Status instances for property testing.
func ResourceNavigationLink_StatusGenerator() gopter.Gen {
	if resourceNavigationLink_statusGenerator != nil {
		return resourceNavigationLink_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLink_Status(generators)
	resourceNavigationLink_statusGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_Status{}), generators)

	return resourceNavigationLink_statusGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLink_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLink_Status(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_RouteTableSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTableSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableSpec, RouteTableSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableSpec runs a test to see if a specific instance of RouteTableSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableSpec(subject RouteTableSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTableSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTableSpec instances for property testing - lazily instantiated by RouteTableSpecGenerator()
var routeTableSpecGenerator gopter.Gen

// RouteTableSpecGenerator returns a generator of RouteTableSpec instances for property testing.
func RouteTableSpecGenerator() gopter.Gen {
	if routeTableSpecGenerator != nil {
		return routeTableSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSpec(generators)
	routeTableSpecGenerator = gen.Struct(reflect.TypeOf(RouteTableSpec{}), generators)

	return routeTableSpecGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableSpec(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded, RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing - lazily
//instantiated by RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var routeTable_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
func RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if routeTable_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return routeTable_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	routeTable_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return routeTable_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceAssociationLink_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLink_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLink_Status, ServiceAssociationLink_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLink_Status runs a test to see if a specific instance of ServiceAssociationLink_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLink_Status(subject ServiceAssociationLink_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLink_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLink_Status instances for property testing - lazily instantiated by
//ServiceAssociationLink_StatusGenerator()
var serviceAssociationLink_statusGenerator gopter.Gen

// ServiceAssociationLink_StatusGenerator returns a generator of ServiceAssociationLink_Status instances for property testing.
func ServiceAssociationLink_StatusGenerator() gopter.Gen {
	if serviceAssociationLink_statusGenerator != nil {
		return serviceAssociationLink_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLink_Status(generators)
	serviceAssociationLink_statusGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_Status{}), generators)

	return serviceAssociationLink_statusGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLink_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLink_Status(gens map[string]gopter.Gen) {
	gens["AllowDelete"] = gen.PtrOf(gen.Bool())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPolicySpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicySpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicySpec, ServiceEndpointPolicySpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicySpec runs a test to see if a specific instance of ServiceEndpointPolicySpec round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicySpec(subject ServiceEndpointPolicySpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicySpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicySpec instances for property testing - lazily instantiated by
//ServiceEndpointPolicySpecGenerator()
var serviceEndpointPolicySpecGenerator gopter.Gen

// ServiceEndpointPolicySpecGenerator returns a generator of ServiceEndpointPolicySpec instances for property testing.
// We first initialize serviceEndpointPolicySpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicySpecGenerator() gopter.Gen {
	if serviceEndpointPolicySpecGenerator != nil {
		return serviceEndpointPolicySpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySpec(generators)
	serviceEndpointPolicySpecGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicySpec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySpec(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicySpec(generators)
	serviceEndpointPolicySpecGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicySpec{}), generators)

	return serviceEndpointPolicySpecGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicySpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicySpec(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicySpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicySpec(gens map[string]gopter.Gen) {
	gens["ServiceEndpointPolicyDefinitions"] = gen.SliceOf(ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedGenerator())
}

func Test_ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded, ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing -
//lazily instantiated by ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
func ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPropertiesFormat_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormat, ServiceEndpointPropertiesFormatGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormat runs a test to see if a specific instance of ServiceEndpointPropertiesFormat round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormat(subject ServiceEndpointPropertiesFormat) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat instances for property testing - lazily instantiated by
//ServiceEndpointPropertiesFormatGenerator()
var serviceEndpointPropertiesFormatGenerator gopter.Gen

// ServiceEndpointPropertiesFormatGenerator returns a generator of ServiceEndpointPropertiesFormat instances for property testing.
func ServiceEndpointPropertiesFormatGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormatGenerator != nil {
		return serviceEndpointPropertiesFormatGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat(generators)
	serviceEndpointPropertiesFormatGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat{}), generators)

	return serviceEndpointPropertiesFormatGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPropertiesFormat_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormat_Status, ServiceEndpointPropertiesFormat_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormat_Status runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormat_Status(subject ServiceEndpointPropertiesFormat_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_Status instances for property testing - lazily instantiated by
//ServiceEndpointPropertiesFormat_StatusGenerator()
var serviceEndpointPropertiesFormat_statusGenerator gopter.Gen

// ServiceEndpointPropertiesFormat_StatusGenerator returns a generator of ServiceEndpointPropertiesFormat_Status instances for property testing.
func ServiceEndpointPropertiesFormat_StatusGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormat_statusGenerator != nil {
		return serviceEndpointPropertiesFormat_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_Status(generators)
	serviceEndpointPropertiesFormat_statusGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_Status{}), generators)

	return serviceEndpointPropertiesFormat_statusGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_Status(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded, PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(subject PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing - lazily
//instantiated by PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
// We first initialize publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(generators)
	publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_StatusGenerator())
}

func Test_ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded, ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded runs a test to see if a specific instance of ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(subject ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing
//- lazily instantiated by ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedGenerator()
var serviceEndpointPolicyDefinition_virtualNetworksSubnet_subResourceEmbeddedGenerator gopter.Gen

// ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedGenerator returns a generator of ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded instances for property testing.
func ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinition_virtualNetworksSubnet_subResourceEmbeddedGenerator != nil {
		return serviceEndpointPolicyDefinition_virtualNetworksSubnet_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	serviceEndpointPolicyDefinition_virtualNetworksSubnet_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded{}), generators)

	return serviceEndpointPolicyDefinition_virtualNetworksSubnet_subResourceEmbeddedGenerator
}
