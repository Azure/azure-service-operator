// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetwork_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork, VirtualNetworkGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork runs a test to see if a specific instance of VirtualNetwork round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork(subject VirtualNetwork) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork instances for property testing - lazily instantiated by VirtualNetworkGenerator()
var virtualNetworkGenerator gopter.Gen

// VirtualNetworkGenerator returns a generator of VirtualNetwork instances for property testing.
func VirtualNetworkGenerator() gopter.Gen {
	if virtualNetworkGenerator != nil {
		return virtualNetworkGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualNetwork(generators)
	virtualNetworkGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork{}), generators)

	return virtualNetworkGenerator
}

// AddRelatedPropertyGeneratorsForVirtualNetwork is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork(gens map[string]gopter.Gen) {
	gens["Spec"] = VirtualNetworksSPECGenerator()
	gens["Status"] = VirtualNetworkStatusGenerator()
}

func Test_VirtualNetwork_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkStatus, VirtualNetworkStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkStatus runs a test to see if a specific instance of VirtualNetwork_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkStatus(subject VirtualNetwork_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork_Status instances for property testing - lazily instantiated by
//VirtualNetworkStatusGenerator()
var virtualNetworkStatusGenerator gopter.Gen

// VirtualNetworkStatusGenerator returns a generator of VirtualNetwork_Status instances for property testing.
// We first initialize virtualNetworkStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkStatusGenerator() gopter.Gen {
	if virtualNetworkStatusGenerator != nil {
		return virtualNetworkStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkStatus(generators)
	virtualNetworkStatusGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkStatus(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkStatus(generators)
	virtualNetworkStatusGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Status{}), generators)

	return virtualNetworkStatusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkStatus(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkStatus(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpaceStatusGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunitiesStatusGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResourceStatusGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptionsStatusGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceStatusGenerator())
	gens["Subnets"] = gen.SliceOf(SubnetStatusVirtualNetworkSubResourceEmbeddedGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeeringStatusSubResourceEmbeddedGenerator())
}

func Test_VirtualNetworks_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworksSPEC, VirtualNetworksSPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworksSPEC runs a test to see if a specific instance of VirtualNetworks_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworksSPEC(subject VirtualNetworks_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_SPEC instances for property testing - lazily instantiated by
//VirtualNetworksSPECGenerator()
var virtualNetworksSPECGenerator gopter.Gen

// VirtualNetworksSPECGenerator returns a generator of VirtualNetworks_SPEC instances for property testing.
// We first initialize virtualNetworksSPECGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworksSPECGenerator() gopter.Gen {
	if virtualNetworksSPECGenerator != nil {
		return virtualNetworksSPECGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSPEC(generators)
	virtualNetworksSPECGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSPEC(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworksSPEC(generators)
	virtualNetworksSPECGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_SPEC{}), generators)

	return virtualNetworksSPECGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworksSPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworksSPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworksSPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworksSPEC(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpaceSpecGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunitiesSpecGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResourceSpecGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptionsSpecGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceSpecGenerator())
	gens["Subnets"] = gen.SliceOf(SubnetSpecVirtualNetworkSubResourceEmbeddedGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeeringSpecGenerator())
}

func Test_AddressSpace_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceSpec, AddressSpaceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceSpec runs a test to see if a specific instance of AddressSpace_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceSpec(subject AddressSpace_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_Spec instances for property testing - lazily instantiated by AddressSpaceSpecGenerator()
var addressSpaceSpecGenerator gopter.Gen

// AddressSpaceSpecGenerator returns a generator of AddressSpace_Spec instances for property testing.
func AddressSpaceSpecGenerator() gopter.Gen {
	if addressSpaceSpecGenerator != nil {
		return addressSpaceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceSpec(generators)
	addressSpaceSpecGenerator = gen.Struct(reflect.TypeOf(AddressSpace_Spec{}), generators)

	return addressSpaceSpecGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceSpec(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_AddressSpace_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceStatus, AddressSpaceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceStatus runs a test to see if a specific instance of AddressSpace_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceStatus(subject AddressSpace_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_Status instances for property testing - lazily instantiated by AddressSpaceStatusGenerator()
var addressSpaceStatusGenerator gopter.Gen

// AddressSpaceStatusGenerator returns a generator of AddressSpace_Status instances for property testing.
func AddressSpaceStatusGenerator() gopter.Gen {
	if addressSpaceStatusGenerator != nil {
		return addressSpaceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceStatus(generators)
	addressSpaceStatusGenerator = gen.Struct(reflect.TypeOf(AddressSpace_Status{}), generators)

	return addressSpaceStatusGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceStatus(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_DhcpOptions_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptionsSpec, DhcpOptionsSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptionsSpec runs a test to see if a specific instance of DhcpOptions_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptionsSpec(subject DhcpOptions_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_Spec instances for property testing - lazily instantiated by DhcpOptionsSpecGenerator()
var dhcpOptionsSpecGenerator gopter.Gen

// DhcpOptionsSpecGenerator returns a generator of DhcpOptions_Spec instances for property testing.
func DhcpOptionsSpecGenerator() gopter.Gen {
	if dhcpOptionsSpecGenerator != nil {
		return dhcpOptionsSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptionsSpec(generators)
	dhcpOptionsSpecGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_Spec{}), generators)

	return dhcpOptionsSpecGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptionsSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptionsSpec(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_DhcpOptions_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptionsStatus, DhcpOptionsStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptionsStatus runs a test to see if a specific instance of DhcpOptions_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptionsStatus(subject DhcpOptions_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_Status instances for property testing - lazily instantiated by DhcpOptionsStatusGenerator()
var dhcpOptionsStatusGenerator gopter.Gen

// DhcpOptionsStatusGenerator returns a generator of DhcpOptions_Status instances for property testing.
func DhcpOptionsStatusGenerator() gopter.Gen {
	if dhcpOptionsStatusGenerator != nil {
		return dhcpOptionsStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptionsStatus(generators)
	dhcpOptionsStatusGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_Status{}), generators)

	return dhcpOptionsStatusGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptionsStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptionsStatus(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_Spec_VirtualNetwork_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Spec_VirtualNetwork_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetSpecVirtualNetworkSubResourceEmbedded, SubnetSpecVirtualNetworkSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetSpecVirtualNetworkSubResourceEmbedded runs a test to see if a specific instance of Subnet_Spec_VirtualNetwork_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetSpecVirtualNetworkSubResourceEmbedded(subject Subnet_Spec_VirtualNetwork_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Spec_VirtualNetwork_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Spec_VirtualNetwork_SubResourceEmbedded instances for property testing - lazily instantiated by
//SubnetSpecVirtualNetworkSubResourceEmbeddedGenerator()
var subnetSpecVirtualNetworkSubResourceEmbeddedGenerator gopter.Gen

// SubnetSpecVirtualNetworkSubResourceEmbeddedGenerator returns a generator of Subnet_Spec_VirtualNetwork_SubResourceEmbedded instances for property testing.
func SubnetSpecVirtualNetworkSubResourceEmbeddedGenerator() gopter.Gen {
	if subnetSpecVirtualNetworkSubResourceEmbeddedGenerator != nil {
		return subnetSpecVirtualNetworkSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	subnetSpecVirtualNetworkSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Spec_VirtualNetwork_SubResourceEmbedded{}), generators)

	return subnetSpecVirtualNetworkSubResourceEmbeddedGenerator
}

func Test_Subnet_Status_VirtualNetwork_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetwork_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusVirtualNetworkSubResourceEmbedded, SubnetStatusVirtualNetworkSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusVirtualNetworkSubResourceEmbedded runs a test to see if a specific instance of Subnet_Status_VirtualNetwork_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusVirtualNetworkSubResourceEmbedded(subject Subnet_Status_VirtualNetwork_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetwork_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetwork_SubResourceEmbedded instances for property testing - lazily instantiated by
//SubnetStatusVirtualNetworkSubResourceEmbeddedGenerator()
var subnetStatusVirtualNetworkSubResourceEmbeddedGenerator gopter.Gen

// SubnetStatusVirtualNetworkSubResourceEmbeddedGenerator returns a generator of Subnet_Status_VirtualNetwork_SubResourceEmbedded instances for property testing.
func SubnetStatusVirtualNetworkSubResourceEmbeddedGenerator() gopter.Gen {
	if subnetStatusVirtualNetworkSubResourceEmbeddedGenerator != nil {
		return subnetStatusVirtualNetworkSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkSubResourceEmbedded(generators)
	subnetStatusVirtualNetworkSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetwork_SubResourceEmbedded{}), generators)

	return subnetStatusVirtualNetworkSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusVirtualNetworkSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkBgpCommunities_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkBgpCommunities_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkBgpCommunitiesSpec, VirtualNetworkBgpCommunitiesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkBgpCommunitiesSpec runs a test to see if a specific instance of VirtualNetworkBgpCommunities_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkBgpCommunitiesSpec(subject VirtualNetworkBgpCommunities_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkBgpCommunities_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkBgpCommunities_Spec instances for property testing - lazily instantiated by
//VirtualNetworkBgpCommunitiesSpecGenerator()
var virtualNetworkBgpCommunitiesSpecGenerator gopter.Gen

// VirtualNetworkBgpCommunitiesSpecGenerator returns a generator of VirtualNetworkBgpCommunities_Spec instances for property testing.
func VirtualNetworkBgpCommunitiesSpecGenerator() gopter.Gen {
	if virtualNetworkBgpCommunitiesSpecGenerator != nil {
		return virtualNetworkBgpCommunitiesSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesSpec(generators)
	virtualNetworkBgpCommunitiesSpecGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkBgpCommunities_Spec{}), generators)

	return virtualNetworkBgpCommunitiesSpecGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesSpec(gens map[string]gopter.Gen) {
	gens["VirtualNetworkCommunity"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkBgpCommunities_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkBgpCommunities_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkBgpCommunitiesStatus, VirtualNetworkBgpCommunitiesStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkBgpCommunitiesStatus runs a test to see if a specific instance of VirtualNetworkBgpCommunities_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkBgpCommunitiesStatus(subject VirtualNetworkBgpCommunities_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkBgpCommunities_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkBgpCommunities_Status instances for property testing - lazily instantiated by
//VirtualNetworkBgpCommunitiesStatusGenerator()
var virtualNetworkBgpCommunitiesStatusGenerator gopter.Gen

// VirtualNetworkBgpCommunitiesStatusGenerator returns a generator of VirtualNetworkBgpCommunities_Status instances for property testing.
func VirtualNetworkBgpCommunitiesStatusGenerator() gopter.Gen {
	if virtualNetworkBgpCommunitiesStatusGenerator != nil {
		return virtualNetworkBgpCommunitiesStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesStatus(generators)
	virtualNetworkBgpCommunitiesStatusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkBgpCommunities_Status{}), generators)

	return virtualNetworkBgpCommunitiesStatusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesStatus(gens map[string]gopter.Gen) {
	gens["RegionalCommunity"] = gen.PtrOf(gen.AlphaString())
	gens["VirtualNetworkCommunity"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkPeering_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeeringSpec, VirtualNetworkPeeringSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeeringSpec runs a test to see if a specific instance of VirtualNetworkPeering_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeeringSpec(subject VirtualNetworkPeering_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_Spec instances for property testing - lazily instantiated by
//VirtualNetworkPeeringSpecGenerator()
var virtualNetworkPeeringSpecGenerator gopter.Gen

// VirtualNetworkPeeringSpecGenerator returns a generator of VirtualNetworkPeering_Spec instances for property testing.
func VirtualNetworkPeeringSpecGenerator() gopter.Gen {
	if virtualNetworkPeeringSpecGenerator != nil {
		return virtualNetworkPeeringSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	virtualNetworkPeeringSpecGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_Spec{}), generators)

	return virtualNetworkPeeringSpecGenerator
}

func Test_VirtualNetworkPeering_Status_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_Status_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeeringStatusSubResourceEmbedded, VirtualNetworkPeeringStatusSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeeringStatusSubResourceEmbedded runs a test to see if a specific instance of VirtualNetworkPeering_Status_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeeringStatusSubResourceEmbedded(subject VirtualNetworkPeering_Status_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_Status_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_Status_SubResourceEmbedded instances for property testing - lazily instantiated by
//VirtualNetworkPeeringStatusSubResourceEmbeddedGenerator()
var virtualNetworkPeeringStatusSubResourceEmbeddedGenerator gopter.Gen

// VirtualNetworkPeeringStatusSubResourceEmbeddedGenerator returns a generator of VirtualNetworkPeering_Status_SubResourceEmbedded instances for property testing.
func VirtualNetworkPeeringStatusSubResourceEmbeddedGenerator() gopter.Gen {
	if virtualNetworkPeeringStatusSubResourceEmbeddedGenerator != nil {
		return virtualNetworkPeeringStatusSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeeringStatusSubResourceEmbedded(generators)
	virtualNetworkPeeringStatusSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_Status_SubResourceEmbedded{}), generators)

	return virtualNetworkPeeringStatusSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeeringStatusSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeeringStatusSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
