// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101storage

import (
	"fmt"
	v20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1beta20201101storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20201101.VirtualNetworksSubnet
// Deprecated version of VirtualNetworksSubnet. Use v1beta20201101.VirtualNetworksSubnet instead
type VirtualNetworksSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
<<<<<<< HEAD
	Spec              VirtualNetworksSubnet_Spec   `json:"spec,omitempty"`
	Status            VirtualNetworksSubnet_STATUS `json:"status,omitempty"`
=======
	Spec              VirtualNetworks_Subnets_Spec                             `json:"spec,omitempty"`
	Status            Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded `json:"status,omitempty"`
>>>>>>> main
}

var _ conditions.Conditioner = &VirtualNetworksSubnet{}

// GetConditions returns the conditions of the resource
func (subnet *VirtualNetworksSubnet) GetConditions() conditions.Conditions {
	return subnet.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subnet *VirtualNetworksSubnet) SetConditions(conditions conditions.Conditions) {
	subnet.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworksSubnet{}

// ConvertFrom populates our VirtualNetworksSubnet from the provided hub VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20201101s.VirtualNetworksSubnet)
	if !ok {
		return fmt.Errorf("expected network/v1beta20201101storage/VirtualNetworksSubnet but received %T instead", hub)
	}

	return subnet.AssignProperties_From_VirtualNetworksSubnet(source)
}

// ConvertTo populates the provided hub VirtualNetworksSubnet from our VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20201101s.VirtualNetworksSubnet)
	if !ok {
		return fmt.Errorf("expected network/v1beta20201101storage/VirtualNetworksSubnet but received %T instead", hub)
	}

	return subnet.AssignProperties_To_VirtualNetworksSubnet(destination)
}

var _ genruntime.KubernetesResource = &VirtualNetworksSubnet{}

// AzureName returns the Azure name of the resource
func (subnet *VirtualNetworksSubnet) AzureName() string {
	return subnet.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (subnet VirtualNetworksSubnet) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (subnet *VirtualNetworksSubnet) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (subnet *VirtualNetworksSubnet) GetSpec() genruntime.ConvertibleSpec {
	return &subnet.Spec
}

// GetStatus returns the status of this resource
func (subnet *VirtualNetworksSubnet) GetStatus() genruntime.ConvertibleStatus {
	return &subnet.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworks/subnets"
func (subnet *VirtualNetworksSubnet) GetType() string {
	return "Microsoft.Network/virtualNetworks/subnets"
}

// NewEmptyStatus returns a new empty (blank) status
func (subnet *VirtualNetworksSubnet) NewEmptyStatus() genruntime.ConvertibleStatus {
<<<<<<< HEAD
	return &VirtualNetworksSubnet_STATUS{}
=======
	return &Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded{}
>>>>>>> main
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subnet *VirtualNetworksSubnet) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(subnet.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  subnet.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subnet *VirtualNetworksSubnet) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
<<<<<<< HEAD
	if st, ok := status.(*VirtualNetworksSubnet_STATUS); ok {
=======
	if st, ok := status.(*Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded); ok {
>>>>>>> main
		subnet.Status = *st
		return nil
	}

	// Convert status to required version
<<<<<<< HEAD
	var st VirtualNetworksSubnet_STATUS
=======
	var st Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
>>>>>>> main
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subnet.Status = st
	return nil
}

// AssignProperties_From_VirtualNetworksSubnet populates our VirtualNetworksSubnet from the provided source VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) AssignProperties_From_VirtualNetworksSubnet(source *v20201101s.VirtualNetworksSubnet) error {

	// ObjectMeta
	subnet.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
<<<<<<< HEAD
	var spec VirtualNetworksSubnet_Spec
	err := spec.AssignPropertiesFromVirtualNetworksSubnet_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworksSubnet_Spec() to populate field Spec")
=======
	var spec VirtualNetworks_Subnets_Spec
	err := spec.AssignProperties_From_VirtualNetworks_Subnets_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_VirtualNetworks_Subnets_Spec() to populate field Spec")
>>>>>>> main
	}
	subnet.Spec = spec

	// Status
<<<<<<< HEAD
	var status VirtualNetworksSubnet_STATUS
	err = status.AssignPropertiesFromVirtualNetworksSubnet_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworksSubnet_STATUS() to populate field Status")
=======
	var status Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
	err = status.AssignProperties_From_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field Status")
>>>>>>> main
	}
	subnet.Status = status

	// No error
	return nil
}

// AssignProperties_To_VirtualNetworksSubnet populates the provided destination VirtualNetworksSubnet from our VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) AssignProperties_To_VirtualNetworksSubnet(destination *v20201101s.VirtualNetworksSubnet) error {

	// ObjectMeta
	destination.ObjectMeta = *subnet.ObjectMeta.DeepCopy()

	// Spec
<<<<<<< HEAD
	var spec v20201101s.VirtualNetworksSubnet_Spec
	err := subnet.Spec.AssignPropertiesToVirtualNetworksSubnet_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworksSubnet_Spec() to populate field Spec")
=======
	var spec v20201101s.VirtualNetworks_Subnets_Spec
	err := subnet.Spec.AssignProperties_To_VirtualNetworks_Subnets_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_VirtualNetworks_Subnets_Spec() to populate field Spec")
>>>>>>> main
	}
	destination.Spec = spec

	// Status
<<<<<<< HEAD
	var status v20201101s.VirtualNetworksSubnet_STATUS
	err = subnet.Status.AssignPropertiesToVirtualNetworksSubnet_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworksSubnet_STATUS() to populate field Status")
=======
	var status v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
	err = subnet.Status.AssignProperties_To_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field Status")
>>>>>>> main
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subnet *VirtualNetworksSubnet) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subnet.Spec.OriginalVersion,
		Kind:    "VirtualNetworksSubnet",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20201101.VirtualNetworksSubnet
// Deprecated version of VirtualNetworksSubnet. Use v1beta20201101.VirtualNetworksSubnet instead
type VirtualNetworksSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworksSubnet `json:"items"`
}

<<<<<<< HEAD
// Storage version of v1alpha1api20201101.VirtualNetworksSubnet_Spec
type VirtualNetworksSubnet_Spec struct {
	AddressPrefix                      *string                             `json:"addressPrefix,omitempty"`
	AddressPrefixes                    []string                            `json:"addressPrefixes,omitempty"`
	ApplicationGatewayIpConfigurations []ApplicationGatewayIPConfiguration `json:"applicationGatewayIpConfigurations,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName            string                                                              `json:"azureName,omitempty"`
	Delegations          []Delegation                                                        `json:"delegations,omitempty"`
	IpAllocations        []SubResource                                                       `json:"ipAllocations,omitempty"`
	NatGateway           *SubResource                                                        `json:"natGateway,omitempty"`
	NetworkSecurityGroup *NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded `json:"networkSecurityGroup,omitempty"`
	OriginalVersion      string                                                              `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/VirtualNetwork resource
	Owner                             *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"VirtualNetwork"`
	PrivateEndpointNetworkPolicies    *string                            `json:"privateEndpointNetworkPolicies,omitempty"`
	PrivateLinkServiceNetworkPolicies *string                            `json:"privateLinkServiceNetworkPolicies,omitempty"`
	PropertyBag                       genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Reference                         *genruntime.ResourceReference      `armReference:"Id" json:"reference,omitempty"`
	RouteTable                        *RouteTableSpec                    `json:"routeTable,omitempty"`
	ServiceEndpointPolicies           []ServiceEndpointPolicySpec        `json:"serviceEndpointPolicies,omitempty"`
	ServiceEndpoints                  []ServiceEndpointPropertiesFormat  `json:"serviceEndpoints,omitempty"`
	Type                              *string                            `json:"type,omitempty"`
}

var _ genruntime.ConvertibleSpec = &VirtualNetworksSubnet_Spec{}

// ConvertSpecFrom populates our VirtualNetworksSubnet_Spec from the provided source
func (subnet *VirtualNetworksSubnet_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20201101s.VirtualNetworksSubnet_Spec)
	if ok {
		// Populate our instance from source
		return subnet.AssignPropertiesFromVirtualNetworksSubnet_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.VirtualNetworksSubnet_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subnet.AssignPropertiesFromVirtualNetworksSubnet_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworksSubnet_Spec
func (subnet *VirtualNetworksSubnet_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20201101s.VirtualNetworksSubnet_Spec)
	if ok {
		// Populate destination from our instance
		return subnet.AssignPropertiesToVirtualNetworksSubnet_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.VirtualNetworksSubnet_Spec{}
	err := subnet.AssignPropertiesToVirtualNetworksSubnet_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworksSubnet_Spec populates our VirtualNetworksSubnet_Spec from the provided source VirtualNetworksSubnet_Spec
func (subnet *VirtualNetworksSubnet_Spec) AssignPropertiesFromVirtualNetworksSubnet_Spec(source *v20201101s.VirtualNetworksSubnet_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AddressPrefix
	subnet.AddressPrefix = genruntime.ClonePointerToString(source.AddressPrefix)

	// AddressPrefixes
	subnet.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if source.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]ApplicationGatewayIPConfiguration, len(source.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range source.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration ApplicationGatewayIPConfiguration
			err := applicationGatewayIpConfiguration.AssignPropertiesFromApplicationGatewayIPConfiguration(&applicationGatewayIpConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationGatewayIPConfiguration() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		subnet.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		subnet.ApplicationGatewayIpConfigurations = nil
	}

	// AzureName
	subnet.AzureName = source.AzureName

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]Delegation, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation Delegation
			err := delegation.AssignPropertiesFromDelegation(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDelegation() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		subnet.Delegations = delegationList
	} else {
		subnet.Delegations = nil
	}

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource
			err := ipAllocation.AssignPropertiesFromSubResource(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		subnet.IpAllocations = ipAllocationList
	} else {
		subnet.IpAllocations = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource
		err := natGateway.AssignPropertiesFromSubResource(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field NatGateway")
		}
		subnet.NatGateway = &natGateway
	} else {
		subnet.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded
		err := networkSecurityGroup.AssignPropertiesFromNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
		}
		subnet.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		subnet.NetworkSecurityGroup = nil
	}

	// OriginalVersion
	subnet.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		subnet.Owner = &owner
	} else {
		subnet.Owner = nil
	}

	// PrivateEndpointNetworkPolicies
	subnet.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(source.PrivateEndpointNetworkPolicies)

	// PrivateLinkServiceNetworkPolicies
	subnet.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(source.PrivateLinkServiceNetworkPolicies)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		subnet.Reference = &reference
	} else {
		subnet.Reference = nil
	}

	// RouteTable
	if source.RouteTable != nil {
		var routeTable RouteTableSpec
		err := routeTable.AssignPropertiesFromRouteTableSpec(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRouteTableSpec() to populate field RouteTable")
		}
		subnet.RouteTable = &routeTable
	} else {
		subnet.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]ServiceEndpointPolicySpec, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy ServiceEndpointPolicySpec
			err := serviceEndpointPolicy.AssignPropertiesFromServiceEndpointPolicySpec(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicySpec() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		subnet.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		subnet.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat
			err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormat(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		subnet.ServiceEndpoints = serviceEndpointList
	} else {
		subnet.ServiceEndpoints = nil
	}

	// Type
	subnet.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		subnet.PropertyBag = propertyBag
	} else {
		subnet.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSubnet_Spec populates the provided destination VirtualNetworksSubnet_Spec from our VirtualNetworksSubnet_Spec
func (subnet *VirtualNetworksSubnet_Spec) AssignPropertiesToVirtualNetworksSubnet_Spec(destination *v20201101s.VirtualNetworksSubnet_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(subnet.PropertyBag)

	// AddressPrefix
	destination.AddressPrefix = genruntime.ClonePointerToString(subnet.AddressPrefix)

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(subnet.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if subnet.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]v20201101s.ApplicationGatewayIPConfiguration, len(subnet.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range subnet.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration v20201101s.ApplicationGatewayIPConfiguration
			err := applicationGatewayIpConfigurationItem.AssignPropertiesToApplicationGatewayIPConfiguration(&applicationGatewayIpConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationGatewayIPConfiguration() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		destination.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		destination.ApplicationGatewayIpConfigurations = nil
	}

	// AzureName
	destination.AzureName = subnet.AzureName

	// Delegations
	if subnet.Delegations != nil {
		delegationList := make([]v20201101s.Delegation, len(subnet.Delegations))
		for delegationIndex, delegationItem := range subnet.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation v20201101s.Delegation
			err := delegationItem.AssignPropertiesToDelegation(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDelegation() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		destination.Delegations = delegationList
	} else {
		destination.Delegations = nil
	}

	// IpAllocations
	if subnet.IpAllocations != nil {
		ipAllocationList := make([]v20201101s.SubResource, len(subnet.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range subnet.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v20201101s.SubResource
			err := ipAllocationItem.AssignPropertiesToSubResource(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// NatGateway
	if subnet.NatGateway != nil {
		var natGateway v20201101s.SubResource
		err := subnet.NatGateway.AssignPropertiesToSubResource(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if subnet.NetworkSecurityGroup != nil {
		var networkSecurityGroup v20201101s.NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded
		err := subnet.NetworkSecurityGroup.AssignPropertiesToNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// OriginalVersion
	destination.OriginalVersion = subnet.OriginalVersion

	// Owner
	if subnet.Owner != nil {
		owner := subnet.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrivateEndpointNetworkPolicies
	destination.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(subnet.PrivateEndpointNetworkPolicies)

	// PrivateLinkServiceNetworkPolicies
	destination.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(subnet.PrivateLinkServiceNetworkPolicies)

	// Reference
	if subnet.Reference != nil {
		reference := subnet.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// RouteTable
	if subnet.RouteTable != nil {
		var routeTable v20201101s.RouteTableSpec
		err := subnet.RouteTable.AssignPropertiesToRouteTableSpec(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRouteTableSpec() to populate field RouteTable")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if subnet.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v20201101s.ServiceEndpointPolicySpec, len(subnet.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range subnet.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v20201101s.ServiceEndpointPolicySpec
			err := serviceEndpointPolicyItem.AssignPropertiesToServiceEndpointPolicySpec(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicySpec() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if subnet.ServiceEndpoints != nil {
		serviceEndpointList := make([]v20201101s.ServiceEndpointPropertiesFormat, len(subnet.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range subnet.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v20201101s.ServiceEndpointPropertiesFormat
			err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormat(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(subnet.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.VirtualNetworksSubnet_STATUS
// Deprecated version of VirtualNetworksSubnet_STATUS. Use v1beta20201101.VirtualNetworksSubnet_STATUS instead
type VirtualNetworksSubnet_STATUS struct {
	AddressPrefix                      *string                                                                   `json:"addressPrefix,omitempty"`
	AddressPrefixes                    []string                                                                  `json:"addressPrefixes,omitempty"`
	ApplicationGatewayIpConfigurations []ApplicationGatewayIPConfiguration_STATUS                                `json:"applicationGatewayIpConfigurations,omitempty"`
	Conditions                         []conditions.Condition                                                    `json:"conditions,omitempty"`
	Delegations                        []Delegation_STATUS                                                       `json:"delegations,omitempty"`
	Etag                               *string                                                                   `json:"etag,omitempty"`
	Id                                 *string                                                                   `json:"id,omitempty"`
	IpAllocations                      []SubResource_STATUS                                                      `json:"ipAllocations,omitempty"`
	IpConfigurationProfiles            []IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"ipConfigurationProfiles,omitempty"`
	IpConfigurations                   []IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded        `json:"ipConfigurations,omitempty"`
	Name                               *string                                                                   `json:"name,omitempty"`
	NatGateway                         *SubResource_STATUS                                                       `json:"natGateway,omitempty"`
	NetworkSecurityGroup               *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded    `json:"networkSecurityGroup,omitempty"`
	PrivateEndpointNetworkPolicies     *string                                                                   `json:"privateEndpointNetworkPolicies,omitempty"`
	PrivateEndpoints                   []PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded        `json:"privateEndpoints,omitempty"`
	PrivateLinkServiceNetworkPolicies  *string                                                                   `json:"privateLinkServiceNetworkPolicies,omitempty"`
	PropertyBag                        genruntime.PropertyBag                                                    `json:"$propertyBag,omitempty"`
	ProvisioningState                  *string                                                                   `json:"provisioningState,omitempty"`
	Purpose                            *string                                                                   `json:"purpose,omitempty"`
	ResourceNavigationLinks            []ResourceNavigationLink_STATUS                                           `json:"resourceNavigationLinks,omitempty"`
	RouteTable                         *RouteTable_STATUS_SubResourceEmbedded                                    `json:"routeTable,omitempty"`
	ServiceAssociationLinks            []ServiceAssociationLink_STATUS                                           `json:"serviceAssociationLinks,omitempty"`
	ServiceEndpointPolicies            []ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded  `json:"serviceEndpointPolicies,omitempty"`
	ServiceEndpoints                   []ServiceEndpointPropertiesFormat_STATUS                                  `json:"serviceEndpoints,omitempty"`
	Type                               *string                                                                   `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetworksSubnet_STATUS{}

// ConvertStatusFrom populates our VirtualNetworksSubnet_STATUS from the provided source
func (subnet *VirtualNetworksSubnet_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20201101s.VirtualNetworksSubnet_STATUS)
	if ok {
		// Populate our instance from source
		return subnet.AssignPropertiesFromVirtualNetworksSubnet_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.VirtualNetworksSubnet_STATUS{}
=======
// Storage version of v1alpha1api20201101.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
	AddressPrefix                      *string                                                                    `json:"addressPrefix,omitempty"`
	AddressPrefixes                    []string                                                                   `json:"addressPrefixes,omitempty"`
	ApplicationGatewayIpConfigurations []ApplicationGatewayIPConfiguration_STATUS                                 `json:"applicationGatewayIpConfigurations,omitempty"`
	Conditions                         []conditions.Condition                                                     `json:"conditions,omitempty"`
	Delegations                        []Delegation_STATUS                                                        `json:"delegations,omitempty"`
	Etag                               *string                                                                    `json:"etag,omitempty"`
	Id                                 *string                                                                    `json:"id,omitempty"`
	IpAllocations                      []SubResource_STATUS                                                       `json:"ipAllocations,omitempty"`
	IpConfigurationProfiles            []IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded `json:"ipConfigurationProfiles,omitempty"`
	IpConfigurations                   []IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded        `json:"ipConfigurations,omitempty"`
	Name                               *string                                                                    `json:"name,omitempty"`
	NatGateway                         *SubResource_STATUS                                                        `json:"natGateway,omitempty"`
	NetworkSecurityGroup               *NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded    `json:"networkSecurityGroup,omitempty"`
	PrivateEndpointNetworkPolicies     *string                                                                    `json:"privateEndpointNetworkPolicies,omitempty"`
	PrivateEndpoints                   []PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded        `json:"privateEndpoints,omitempty"`
	PrivateLinkServiceNetworkPolicies  *string                                                                    `json:"privateLinkServiceNetworkPolicies,omitempty"`
	PropertyBag                        genruntime.PropertyBag                                                     `json:"$propertyBag,omitempty"`
	ProvisioningState                  *string                                                                    `json:"provisioningState,omitempty"`
	Purpose                            *string                                                                    `json:"purpose,omitempty"`
	ResourceNavigationLinks            []ResourceNavigationLink_STATUS                                            `json:"resourceNavigationLinks,omitempty"`
	RouteTable                         *RouteTable_STATUS_SubResourceEmbedded                                     `json:"routeTable,omitempty"`
	ServiceAssociationLinks            []ServiceAssociationLink_STATUS                                            `json:"serviceAssociationLinks,omitempty"`
	ServiceEndpointPolicies            []ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded  `json:"serviceEndpointPolicies,omitempty"`
	ServiceEndpoints                   []ServiceEndpointPropertiesFormat_STATUS                                   `json:"serviceEndpoints,omitempty"`
	Type                               *string                                                                    `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded{}

// ConvertStatusFrom populates our Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source
func (embedded *Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return embedded.AssignProperties_From_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded{}
>>>>>>> main
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
<<<<<<< HEAD
	err = subnet.AssignPropertiesFromVirtualNetworksSubnet_STATUS(src)
=======
	err = embedded.AssignProperties_From_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(src)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

<<<<<<< HEAD
// ConvertStatusTo populates the provided destination from our VirtualNetworksSubnet_STATUS
func (subnet *VirtualNetworksSubnet_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20201101s.VirtualNetworksSubnet_STATUS)
	if ok {
		// Populate destination from our instance
		return subnet.AssignPropertiesToVirtualNetworksSubnet_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.VirtualNetworksSubnet_STATUS{}
	err := subnet.AssignPropertiesToVirtualNetworksSubnet_STATUS(dst)
=======
// ConvertStatusTo populates the provided destination from our Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return embedded.AssignProperties_To_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded{}
	err := embedded.AssignProperties_To_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(dst)
>>>>>>> main
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

<<<<<<< HEAD
// AssignPropertiesFromVirtualNetworksSubnet_STATUS populates our VirtualNetworksSubnet_STATUS from the provided source VirtualNetworksSubnet_STATUS
func (subnet *VirtualNetworksSubnet_STATUS) AssignPropertiesFromVirtualNetworksSubnet_STATUS(source *v20201101s.VirtualNetworksSubnet_STATUS) error {
=======
// AssignProperties_From_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AddressPrefix
	subnet.AddressPrefix = genruntime.ClonePointerToString(source.AddressPrefix)

	// AddressPrefixes
	subnet.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if source.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]ApplicationGatewayIPConfiguration_STATUS, len(source.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range source.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration ApplicationGatewayIPConfiguration_STATUS
<<<<<<< HEAD
			err := applicationGatewayIpConfiguration.AssignPropertiesFromApplicationGatewayIPConfiguration_STATUS(&applicationGatewayIpConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationGatewayIPConfiguration_STATUS() to populate field ApplicationGatewayIpConfigurations")
=======
			err := applicationGatewayIpConfiguration.AssignProperties_From_ApplicationGatewayIPConfiguration_STATUS(&applicationGatewayIpConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ApplicationGatewayIPConfiguration_STATUS() to populate field ApplicationGatewayIpConfigurations")
>>>>>>> main
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		subnet.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		subnet.ApplicationGatewayIpConfigurations = nil
	}

	// Conditions
	subnet.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]Delegation_STATUS, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation Delegation_STATUS
<<<<<<< HEAD
			err := delegation.AssignPropertiesFromDelegation_STATUS(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDelegation_STATUS() to populate field Delegations")
=======
			err := delegation.AssignProperties_From_Delegation_STATUS(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Delegation_STATUS() to populate field Delegations")
>>>>>>> main
			}
			delegationList[delegationIndex] = delegation
		}
		subnet.Delegations = delegationList
	} else {
		subnet.Delegations = nil
	}

	// Etag
	subnet.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	subnet.Id = genruntime.ClonePointerToString(source.Id)

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource_STATUS, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource_STATUS
<<<<<<< HEAD
			err := ipAllocation.AssignPropertiesFromSubResource_STATUS(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource_STATUS() to populate field IpAllocations")
=======
			err := ipAllocation.AssignProperties_From_SubResource_STATUS(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field IpAllocations")
>>>>>>> main
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		subnet.IpAllocations = ipAllocationList
	} else {
		subnet.IpAllocations = nil
	}

	// IpConfigurationProfiles
	if source.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(source.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range source.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
<<<<<<< HEAD
			var ipConfigurationProfile IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationProfile.AssignPropertiesFromIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfigurationProfileItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurationProfiles")
=======
			var ipConfigurationProfile IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := ipConfigurationProfile.AssignProperties_From_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&ipConfigurationProfileItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field IpConfigurationProfiles")
>>>>>>> main
			}
			ipConfigurationProfileList[ipConfigurationProfileIndex] = ipConfigurationProfile
		}
		subnet.IpConfigurationProfiles = ipConfigurationProfileList
	} else {
		subnet.IpConfigurationProfiles = nil
	}

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
<<<<<<< HEAD
			var ipConfiguration IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfiguration.AssignPropertiesFromIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurations")
=======
			var ipConfiguration IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := ipConfiguration.AssignProperties_From_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field IpConfigurations")
>>>>>>> main
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		subnet.IpConfigurations = ipConfigurationList
	} else {
		subnet.IpConfigurations = nil
	}

	// Name
	subnet.Name = genruntime.ClonePointerToString(source.Name)

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource_STATUS
<<<<<<< HEAD
		err := natGateway.AssignPropertiesFromSubResource_STATUS(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_STATUS() to populate field NatGateway")
=======
		err := natGateway.AssignProperties_From_SubResource_STATUS(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field NatGateway")
>>>>>>> main
		}
		subnet.NatGateway = &natGateway
	} else {
		subnet.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
<<<<<<< HEAD
		var networkSecurityGroup NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := networkSecurityGroup.AssignPropertiesFromNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
=======
		var networkSecurityGroup NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
		err := networkSecurityGroup.AssignProperties_From_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
>>>>>>> main
		}
		subnet.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		subnet.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	subnet.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(source.PrivateEndpointNetworkPolicies)

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
<<<<<<< HEAD
			var privateEndpoint PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := privateEndpoint.AssignPropertiesFromPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PrivateEndpoints")
=======
			var privateEndpoint PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := privateEndpoint.AssignProperties_From_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field PrivateEndpoints")
>>>>>>> main
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		subnet.PrivateEndpoints = privateEndpointList
	} else {
		subnet.PrivateEndpoints = nil
	}

	// PrivateLinkServiceNetworkPolicies
	subnet.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(source.PrivateLinkServiceNetworkPolicies)

	// ProvisioningState
	subnet.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Purpose
	subnet.Purpose = genruntime.ClonePointerToString(source.Purpose)

	// ResourceNavigationLinks
	if source.ResourceNavigationLinks != nil {
		resourceNavigationLinkList := make([]ResourceNavigationLink_STATUS, len(source.ResourceNavigationLinks))
		for resourceNavigationLinkIndex, resourceNavigationLinkItem := range source.ResourceNavigationLinks {
			// Shadow the loop variable to avoid aliasing
			resourceNavigationLinkItem := resourceNavigationLinkItem
			var resourceNavigationLink ResourceNavigationLink_STATUS
<<<<<<< HEAD
			err := resourceNavigationLink.AssignPropertiesFromResourceNavigationLink_STATUS(&resourceNavigationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceNavigationLink_STATUS() to populate field ResourceNavigationLinks")
=======
			err := resourceNavigationLink.AssignProperties_From_ResourceNavigationLink_STATUS(&resourceNavigationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ResourceNavigationLink_STATUS() to populate field ResourceNavigationLinks")
>>>>>>> main
			}
			resourceNavigationLinkList[resourceNavigationLinkIndex] = resourceNavigationLink
		}
		subnet.ResourceNavigationLinks = resourceNavigationLinkList
	} else {
		subnet.ResourceNavigationLinks = nil
	}

	// RouteTable
	if source.RouteTable != nil {
		var routeTable RouteTable_STATUS_SubResourceEmbedded
<<<<<<< HEAD
		err := routeTable.AssignPropertiesFromRouteTable_STATUS_SubResourceEmbedded(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRouteTable_STATUS_SubResourceEmbedded() to populate field RouteTable")
=======
		err := routeTable.AssignProperties_From_RouteTable_STATUS_SubResourceEmbedded(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RouteTable_STATUS_SubResourceEmbedded() to populate field RouteTable")
>>>>>>> main
		}
		subnet.RouteTable = &routeTable
	} else {
		subnet.RouteTable = nil
	}

	// ServiceAssociationLinks
	if source.ServiceAssociationLinks != nil {
		serviceAssociationLinkList := make([]ServiceAssociationLink_STATUS, len(source.ServiceAssociationLinks))
		for serviceAssociationLinkIndex, serviceAssociationLinkItem := range source.ServiceAssociationLinks {
			// Shadow the loop variable to avoid aliasing
			serviceAssociationLinkItem := serviceAssociationLinkItem
			var serviceAssociationLink ServiceAssociationLink_STATUS
<<<<<<< HEAD
			err := serviceAssociationLink.AssignPropertiesFromServiceAssociationLink_STATUS(&serviceAssociationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceAssociationLink_STATUS() to populate field ServiceAssociationLinks")
=======
			err := serviceAssociationLink.AssignProperties_From_ServiceAssociationLink_STATUS(&serviceAssociationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ServiceAssociationLink_STATUS() to populate field ServiceAssociationLinks")
>>>>>>> main
			}
			serviceAssociationLinkList[serviceAssociationLinkIndex] = serviceAssociationLink
		}
		subnet.ServiceAssociationLinks = serviceAssociationLinkList
	} else {
		subnet.ServiceAssociationLinks = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
<<<<<<< HEAD
			var serviceEndpointPolicy ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicy.AssignPropertiesFromServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicies")
=======
			var serviceEndpointPolicy ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := serviceEndpointPolicy.AssignProperties_From_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field ServiceEndpointPolicies")
>>>>>>> main
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		subnet.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		subnet.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat_STATUS, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat_STATUS
<<<<<<< HEAD
			err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormat_STATUS(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPropertiesFormat_STATUS() to populate field ServiceEndpoints")
=======
			err := serviceEndpoint.AssignProperties_From_ServiceEndpointPropertiesFormat_STATUS(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ServiceEndpointPropertiesFormat_STATUS() to populate field ServiceEndpoints")
>>>>>>> main
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		subnet.ServiceEndpoints = serviceEndpointList
	} else {
		subnet.ServiceEndpoints = nil
	}

	// Type
	subnet.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		subnet.PropertyBag = propertyBag
	} else {
		subnet.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToVirtualNetworksSubnet_STATUS populates the provided destination VirtualNetworksSubnet_STATUS from our VirtualNetworksSubnet_STATUS
func (subnet *VirtualNetworksSubnet_STATUS) AssignPropertiesToVirtualNetworksSubnet_STATUS(destination *v20201101s.VirtualNetworksSubnet_STATUS) error {
=======
// AssignProperties_To_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.Subnet_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(subnet.PropertyBag)

	// AddressPrefix
	destination.AddressPrefix = genruntime.ClonePointerToString(subnet.AddressPrefix)

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(subnet.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if subnet.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]v20201101s.ApplicationGatewayIPConfiguration_STATUS, len(subnet.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range subnet.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration v20201101s.ApplicationGatewayIPConfiguration_STATUS
<<<<<<< HEAD
			err := applicationGatewayIpConfigurationItem.AssignPropertiesToApplicationGatewayIPConfiguration_STATUS(&applicationGatewayIpConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationGatewayIPConfiguration_STATUS() to populate field ApplicationGatewayIpConfigurations")
=======
			err := applicationGatewayIpConfigurationItem.AssignProperties_To_ApplicationGatewayIPConfiguration_STATUS(&applicationGatewayIpConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ApplicationGatewayIPConfiguration_STATUS() to populate field ApplicationGatewayIpConfigurations")
>>>>>>> main
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		destination.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		destination.ApplicationGatewayIpConfigurations = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(subnet.Conditions)

	// Delegations
	if subnet.Delegations != nil {
		delegationList := make([]v20201101s.Delegation_STATUS, len(subnet.Delegations))
		for delegationIndex, delegationItem := range subnet.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation v20201101s.Delegation_STATUS
<<<<<<< HEAD
			err := delegationItem.AssignPropertiesToDelegation_STATUS(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDelegation_STATUS() to populate field Delegations")
=======
			err := delegationItem.AssignProperties_To_Delegation_STATUS(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Delegation_STATUS() to populate field Delegations")
>>>>>>> main
			}
			delegationList[delegationIndex] = delegation
		}
		destination.Delegations = delegationList
	} else {
		destination.Delegations = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(subnet.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(subnet.Id)

	// IpAllocations
	if subnet.IpAllocations != nil {
		ipAllocationList := make([]v20201101s.SubResource_STATUS, len(subnet.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range subnet.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v20201101s.SubResource_STATUS
<<<<<<< HEAD
			err := ipAllocationItem.AssignPropertiesToSubResource_STATUS(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource_STATUS() to populate field IpAllocations")
=======
			err := ipAllocationItem.AssignProperties_To_SubResource_STATUS(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field IpAllocations")
>>>>>>> main
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// IpConfigurationProfiles
<<<<<<< HEAD
	if subnet.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(subnet.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range subnet.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
			var ipConfigurationProfile v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationProfileItem.AssignPropertiesToIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfigurationProfile)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurationProfiles")
=======
	if embedded.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]v20201101s.IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(embedded.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range embedded.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
			var ipConfigurationProfile v20201101s.IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := ipConfigurationProfileItem.AssignProperties_To_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&ipConfigurationProfile)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field IpConfigurationProfiles")
>>>>>>> main
			}
			ipConfigurationProfileList[ipConfigurationProfileIndex] = ipConfigurationProfile
		}
		destination.IpConfigurationProfiles = ipConfigurationProfileList
	} else {
		destination.IpConfigurationProfiles = nil
	}

	// IpConfigurations
<<<<<<< HEAD
	if subnet.IpConfigurations != nil {
		ipConfigurationList := make([]v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(subnet.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range subnet.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationItem.AssignPropertiesToIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurations")
=======
	if embedded.IpConfigurations != nil {
		ipConfigurationList := make([]v20201101s.IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(embedded.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range embedded.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v20201101s.IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := ipConfigurationItem.AssignProperties_To_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field IpConfigurations")
>>>>>>> main
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(subnet.Name)

	// NatGateway
	if subnet.NatGateway != nil {
		var natGateway v20201101s.SubResource_STATUS
<<<<<<< HEAD
		err := subnet.NatGateway.AssignPropertiesToSubResource_STATUS(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_STATUS() to populate field NatGateway")
=======
		err := embedded.NatGateway.AssignProperties_To_SubResource_STATUS(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field NatGateway")
>>>>>>> main
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
<<<<<<< HEAD
	if subnet.NetworkSecurityGroup != nil {
		var networkSecurityGroup v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := subnet.NetworkSecurityGroup.AssignPropertiesToNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
=======
	if embedded.NetworkSecurityGroup != nil {
		var networkSecurityGroup v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
		err := embedded.NetworkSecurityGroup.AssignProperties_To_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
>>>>>>> main
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	destination.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(subnet.PrivateEndpointNetworkPolicies)

	// PrivateEndpoints
<<<<<<< HEAD
	if subnet.PrivateEndpoints != nil {
		privateEndpointList := make([]v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(subnet.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range subnet.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := privateEndpointItem.AssignPropertiesToPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PrivateEndpoints")
=======
	if embedded.PrivateEndpoints != nil {
		privateEndpointList := make([]v20201101s.PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(embedded.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range embedded.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v20201101s.PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := privateEndpointItem.AssignProperties_To_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field PrivateEndpoints")
>>>>>>> main
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PrivateLinkServiceNetworkPolicies
	destination.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(subnet.PrivateLinkServiceNetworkPolicies)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(subnet.ProvisioningState)

	// Purpose
	destination.Purpose = genruntime.ClonePointerToString(subnet.Purpose)

	// ResourceNavigationLinks
	if subnet.ResourceNavigationLinks != nil {
		resourceNavigationLinkList := make([]v20201101s.ResourceNavigationLink_STATUS, len(subnet.ResourceNavigationLinks))
		for resourceNavigationLinkIndex, resourceNavigationLinkItem := range subnet.ResourceNavigationLinks {
			// Shadow the loop variable to avoid aliasing
			resourceNavigationLinkItem := resourceNavigationLinkItem
			var resourceNavigationLink v20201101s.ResourceNavigationLink_STATUS
<<<<<<< HEAD
			err := resourceNavigationLinkItem.AssignPropertiesToResourceNavigationLink_STATUS(&resourceNavigationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceNavigationLink_STATUS() to populate field ResourceNavigationLinks")
=======
			err := resourceNavigationLinkItem.AssignProperties_To_ResourceNavigationLink_STATUS(&resourceNavigationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ResourceNavigationLink_STATUS() to populate field ResourceNavigationLinks")
>>>>>>> main
			}
			resourceNavigationLinkList[resourceNavigationLinkIndex] = resourceNavigationLink
		}
		destination.ResourceNavigationLinks = resourceNavigationLinkList
	} else {
		destination.ResourceNavigationLinks = nil
	}

	// RouteTable
	if subnet.RouteTable != nil {
		var routeTable v20201101s.RouteTable_STATUS_SubResourceEmbedded
<<<<<<< HEAD
		err := subnet.RouteTable.AssignPropertiesToRouteTable_STATUS_SubResourceEmbedded(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRouteTable_STATUS_SubResourceEmbedded() to populate field RouteTable")
=======
		err := embedded.RouteTable.AssignProperties_To_RouteTable_STATUS_SubResourceEmbedded(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RouteTable_STATUS_SubResourceEmbedded() to populate field RouteTable")
>>>>>>> main
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceAssociationLinks
	if subnet.ServiceAssociationLinks != nil {
		serviceAssociationLinkList := make([]v20201101s.ServiceAssociationLink_STATUS, len(subnet.ServiceAssociationLinks))
		for serviceAssociationLinkIndex, serviceAssociationLinkItem := range subnet.ServiceAssociationLinks {
			// Shadow the loop variable to avoid aliasing
			serviceAssociationLinkItem := serviceAssociationLinkItem
			var serviceAssociationLink v20201101s.ServiceAssociationLink_STATUS
<<<<<<< HEAD
			err := serviceAssociationLinkItem.AssignPropertiesToServiceAssociationLink_STATUS(&serviceAssociationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceAssociationLink_STATUS() to populate field ServiceAssociationLinks")
=======
			err := serviceAssociationLinkItem.AssignProperties_To_ServiceAssociationLink_STATUS(&serviceAssociationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ServiceAssociationLink_STATUS() to populate field ServiceAssociationLinks")
>>>>>>> main
			}
			serviceAssociationLinkList[serviceAssociationLinkIndex] = serviceAssociationLink
		}
		destination.ServiceAssociationLinks = serviceAssociationLinkList
	} else {
		destination.ServiceAssociationLinks = nil
	}

	// ServiceEndpointPolicies
<<<<<<< HEAD
	if subnet.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded, len(subnet.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range subnet.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyItem.AssignPropertiesToServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicies")
=======
	if embedded.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded, len(embedded.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range embedded.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
			err := serviceEndpointPolicyItem.AssignProperties_To_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field ServiceEndpointPolicies")
>>>>>>> main
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if subnet.ServiceEndpoints != nil {
		serviceEndpointList := make([]v20201101s.ServiceEndpointPropertiesFormat_STATUS, len(subnet.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range subnet.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v20201101s.ServiceEndpointPropertiesFormat_STATUS
<<<<<<< HEAD
			err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormat_STATUS(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPropertiesFormat_STATUS() to populate field ServiceEndpoints")
=======
			err := serviceEndpointItem.AssignProperties_To_ServiceEndpointPropertiesFormat_STATUS(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ServiceEndpointPropertiesFormat_STATUS() to populate field ServiceEndpoints")
>>>>>>> main
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(subnet.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// Storage version of v1alpha1api20201101.ApplicationGatewayIPConfiguration
// Deprecated version of ApplicationGatewayIPConfiguration. Use v1beta20201101.ApplicationGatewayIPConfiguration instead
type ApplicationGatewayIPConfiguration struct {
	Name        *string                       `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
	Subnet      *SubResource                  `json:"subnet,omitempty"`
}

// AssignPropertiesFromApplicationGatewayIPConfiguration populates our ApplicationGatewayIPConfiguration from the provided source ApplicationGatewayIPConfiguration
func (configuration *ApplicationGatewayIPConfiguration) AssignPropertiesFromApplicationGatewayIPConfiguration(source *v20201101s.ApplicationGatewayIPConfiguration) error {
=======
// Storage version of v1alpha1api20201101.VirtualNetworks_Subnets_Spec
type VirtualNetworks_Subnets_Spec struct {
	AddressPrefix   *string  `json:"addressPrefix,omitempty"`
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName            string                                                `json:"azureName,omitempty"`
	Delegations          []VirtualNetworks_Subnets_Spec_Properties_Delegations `json:"delegations,omitempty"`
	IpAllocations        []SubResource                                         `json:"ipAllocations,omitempty"`
	NatGateway           *SubResource                                          `json:"natGateway,omitempty"`
	NetworkSecurityGroup *SubResource                                          `json:"networkSecurityGroup,omitempty"`
	OriginalVersion      string                                                `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/VirtualNetwork resource
	Owner                             *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"VirtualNetwork"`
	PrivateEndpointNetworkPolicies    *string                            `json:"privateEndpointNetworkPolicies,omitempty"`
	PrivateLinkServiceNetworkPolicies *string                            `json:"privateLinkServiceNetworkPolicies,omitempty"`
	PropertyBag                       genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	RouteTable                        *SubResource                       `json:"routeTable,omitempty"`
	ServiceEndpointPolicies           []SubResource                      `json:"serviceEndpointPolicies,omitempty"`
	ServiceEndpoints                  []ServiceEndpointPropertiesFormat  `json:"serviceEndpoints,omitempty"`
}

var _ genruntime.ConvertibleSpec = &VirtualNetworks_Subnets_Spec{}

// ConvertSpecFrom populates our VirtualNetworks_Subnets_Spec from the provided source
func (subnets *VirtualNetworks_Subnets_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20201101s.VirtualNetworks_Subnets_Spec)
	if ok {
		// Populate our instance from source
		return subnets.AssignProperties_From_VirtualNetworks_Subnets_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20201101s.VirtualNetworks_Subnets_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subnets.AssignProperties_From_VirtualNetworks_Subnets_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworks_Subnets_Spec
func (subnets *VirtualNetworks_Subnets_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20201101s.VirtualNetworks_Subnets_Spec)
	if ok {
		// Populate destination from our instance
		return subnets.AssignProperties_To_VirtualNetworks_Subnets_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20201101s.VirtualNetworks_Subnets_Spec{}
	err := subnets.AssignProperties_To_VirtualNetworks_Subnets_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_VirtualNetworks_Subnets_Spec populates our VirtualNetworks_Subnets_Spec from the provided source VirtualNetworks_Subnets_Spec
func (subnets *VirtualNetworks_Subnets_Spec) AssignProperties_From_VirtualNetworks_Subnets_Spec(source *v20201101s.VirtualNetworks_Subnets_Spec) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

<<<<<<< HEAD
	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		configuration.Reference = &reference
=======
	// AddressPrefixes
	subnets.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// AzureName
	subnets.AzureName = source.AzureName

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]VirtualNetworks_Subnets_Spec_Properties_Delegations, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation VirtualNetworks_Subnets_Spec_Properties_Delegations
			err := delegation.AssignProperties_From_VirtualNetworks_Subnets_Spec_Properties_Delegations(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_VirtualNetworks_Subnets_Spec_Properties_Delegations() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		subnets.Delegations = delegationList
>>>>>>> main
	} else {
		configuration.Reference = nil
	}

<<<<<<< HEAD
	// Subnet
	if source.Subnet != nil {
		var subnet SubResource
		err := subnet.AssignPropertiesFromSubResource(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field Subnet")
=======
	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource
			err := ipAllocation.AssignProperties_From_SubResource(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		subnets.IpAllocations = ipAllocationList
	} else {
		subnets.IpAllocations = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource
		err := natGateway.AssignProperties_From_SubResource(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field NatGateway")
>>>>>>> main
		}
		configuration.Subnet = &subnet
	} else {
<<<<<<< HEAD
		configuration.Subnet = nil
=======
		subnets.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup SubResource
		err := networkSecurityGroup.AssignProperties_From_SubResource(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field NetworkSecurityGroup")
		}
		subnets.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		subnets.NetworkSecurityGroup = nil
	}

	// OriginalVersion
	subnets.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		subnets.Owner = &owner
	} else {
		subnets.Owner = nil
	}

	// PrivateEndpointNetworkPolicies
	subnets.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(source.PrivateEndpointNetworkPolicies)

	// PrivateLinkServiceNetworkPolicies
	subnets.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(source.PrivateLinkServiceNetworkPolicies)

	// RouteTable
	if source.RouteTable != nil {
		var routeTable SubResource
		err := routeTable.AssignProperties_From_SubResource(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field RouteTable")
		}
		subnets.RouteTable = &routeTable
	} else {
		subnets.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]SubResource, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy SubResource
			err := serviceEndpointPolicy.AssignProperties_From_SubResource(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		subnets.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		subnets.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat
			err := serviceEndpoint.AssignProperties_From_ServiceEndpointPropertiesFormat(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		subnets.ServiceEndpoints = serviceEndpointList
	} else {
		subnets.ServiceEndpoints = nil
>>>>>>> main
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		configuration.PropertyBag = propertyBag
	} else {
		configuration.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToApplicationGatewayIPConfiguration populates the provided destination ApplicationGatewayIPConfiguration from our ApplicationGatewayIPConfiguration
func (configuration *ApplicationGatewayIPConfiguration) AssignPropertiesToApplicationGatewayIPConfiguration(destination *v20201101s.ApplicationGatewayIPConfiguration) error {
=======
// AssignProperties_To_VirtualNetworks_Subnets_Spec populates the provided destination VirtualNetworks_Subnets_Spec from our VirtualNetworks_Subnets_Spec
func (subnets *VirtualNetworks_Subnets_Spec) AssignProperties_To_VirtualNetworks_Subnets_Spec(destination *v20201101s.VirtualNetworks_Subnets_Spec) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(configuration.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

<<<<<<< HEAD
	// Reference
	if configuration.Reference != nil {
		reference := configuration.Reference.Copy()
		destination.Reference = &reference
=======
	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(subnets.AddressPrefixes)

	// AzureName
	destination.AzureName = subnets.AzureName

	// Delegations
	if subnets.Delegations != nil {
		delegationList := make([]v20201101s.VirtualNetworks_Subnets_Spec_Properties_Delegations, len(subnets.Delegations))
		for delegationIndex, delegationItem := range subnets.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation v20201101s.VirtualNetworks_Subnets_Spec_Properties_Delegations
			err := delegationItem.AssignProperties_To_VirtualNetworks_Subnets_Spec_Properties_Delegations(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_VirtualNetworks_Subnets_Spec_Properties_Delegations() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		destination.Delegations = delegationList
>>>>>>> main
	} else {
		destination.Reference = nil
	}

<<<<<<< HEAD
	// Subnet
	if configuration.Subnet != nil {
		var subnet v20201101s.SubResource
		err := configuration.Subnet.AssignPropertiesToSubResource(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field Subnet")
=======
	// IpAllocations
	if subnets.IpAllocations != nil {
		ipAllocationList := make([]v20201101s.SubResource, len(subnets.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range subnets.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v20201101s.SubResource
			err := ipAllocationItem.AssignProperties_To_SubResource(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// NatGateway
	if subnets.NatGateway != nil {
		var natGateway v20201101s.SubResource
		err := subnets.NatGateway.AssignProperties_To_SubResource(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field NatGateway")
>>>>>>> main
		}
		destination.Subnet = &subnet
	} else {
<<<<<<< HEAD
		destination.Subnet = nil
=======
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if subnets.NetworkSecurityGroup != nil {
		var networkSecurityGroup v20201101s.SubResource
		err := subnets.NetworkSecurityGroup.AssignProperties_To_SubResource(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field NetworkSecurityGroup")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// OriginalVersion
	destination.OriginalVersion = subnets.OriginalVersion

	// Owner
	if subnets.Owner != nil {
		owner := subnets.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrivateEndpointNetworkPolicies
	destination.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(subnets.PrivateEndpointNetworkPolicies)

	// PrivateLinkServiceNetworkPolicies
	destination.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(subnets.PrivateLinkServiceNetworkPolicies)

	// RouteTable
	if subnets.RouteTable != nil {
		var routeTable v20201101s.SubResource
		err := subnets.RouteTable.AssignProperties_To_SubResource(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field RouteTable")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if subnets.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v20201101s.SubResource, len(subnets.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range subnets.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v20201101s.SubResource
			err := serviceEndpointPolicyItem.AssignProperties_To_SubResource(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if subnets.ServiceEndpoints != nil {
		serviceEndpointList := make([]v20201101s.ServiceEndpointPropertiesFormat, len(subnets.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range subnets.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v20201101s.ServiceEndpointPropertiesFormat
			err := serviceEndpointItem.AssignProperties_To_ServiceEndpointPropertiesFormat(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
>>>>>>> main
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ApplicationGatewayIPConfiguration_STATUS
// Deprecated version of ApplicationGatewayIPConfiguration_STATUS. Use v1beta20201101.ApplicationGatewayIPConfiguration_STATUS instead
type ApplicationGatewayIPConfiguration_STATUS struct {
	Etag              *string                `json:"etag,omitempty"`
	Id                *string                `json:"id,omitempty"`
	Name              *string                `json:"name,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ProvisioningState *string                `json:"provisioningState,omitempty"`
	Subnet            *SubResource_STATUS    `json:"subnet,omitempty"`
	Type              *string                `json:"type,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromApplicationGatewayIPConfiguration_STATUS populates our ApplicationGatewayIPConfiguration_STATUS from the provided source ApplicationGatewayIPConfiguration_STATUS
func (configuration *ApplicationGatewayIPConfiguration_STATUS) AssignPropertiesFromApplicationGatewayIPConfiguration_STATUS(source *v20201101s.ApplicationGatewayIPConfiguration_STATUS) error {
=======
// AssignProperties_From_ApplicationGatewayIPConfiguration_STATUS populates our ApplicationGatewayIPConfiguration_STATUS from the provided source ApplicationGatewayIPConfiguration_STATUS
func (configuration *ApplicationGatewayIPConfiguration_STATUS) AssignProperties_From_ApplicationGatewayIPConfiguration_STATUS(source *v20201101s.ApplicationGatewayIPConfiguration_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Etag
	configuration.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	configuration.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_STATUS
<<<<<<< HEAD
		err := subnet.AssignPropertiesFromSubResource_STATUS(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_STATUS() to populate field Subnet")
=======
		err := subnet.AssignProperties_From_SubResource_STATUS(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field Subnet")
>>>>>>> main
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// Type
	configuration.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		configuration.PropertyBag = propertyBag
	} else {
		configuration.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToApplicationGatewayIPConfiguration_STATUS populates the provided destination ApplicationGatewayIPConfiguration_STATUS from our ApplicationGatewayIPConfiguration_STATUS
func (configuration *ApplicationGatewayIPConfiguration_STATUS) AssignPropertiesToApplicationGatewayIPConfiguration_STATUS(destination *v20201101s.ApplicationGatewayIPConfiguration_STATUS) error {
=======
// AssignProperties_To_ApplicationGatewayIPConfiguration_STATUS populates the provided destination ApplicationGatewayIPConfiguration_STATUS from our ApplicationGatewayIPConfiguration_STATUS
func (configuration *ApplicationGatewayIPConfiguration_STATUS) AssignProperties_To_ApplicationGatewayIPConfiguration_STATUS(destination *v20201101s.ApplicationGatewayIPConfiguration_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(configuration.PropertyBag)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(configuration.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(configuration.ProvisioningState)

	// Subnet
	if configuration.Subnet != nil {
		var subnet v20201101s.SubResource_STATUS
<<<<<<< HEAD
		err := configuration.Subnet.AssignPropertiesToSubResource_STATUS(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_STATUS() to populate field Subnet")
=======
		err := configuration.Subnet.AssignProperties_To_SubResource_STATUS(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field Subnet")
>>>>>>> main
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(configuration.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.Delegation
// Deprecated version of Delegation. Use v1beta20201101.Delegation instead
type Delegation struct {
	Name        *string                       `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
	ServiceName *string                       `json:"serviceName,omitempty"`
	Type        *string                       `json:"type,omitempty"`
}

// AssignPropertiesFromDelegation populates our Delegation from the provided source Delegation
func (delegation *Delegation) AssignPropertiesFromDelegation(source *v20201101s.Delegation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	delegation.Name = genruntime.ClonePointerToString(source.Name)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		delegation.Reference = &reference
	} else {
		delegation.Reference = nil
	}

	// ServiceName
	delegation.ServiceName = genruntime.ClonePointerToString(source.ServiceName)

	// Type
	delegation.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		delegation.PropertyBag = propertyBag
	} else {
		delegation.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDelegation populates the provided destination Delegation from our Delegation
func (delegation *Delegation) AssignPropertiesToDelegation(destination *v20201101s.Delegation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(delegation.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(delegation.Name)

	// Reference
	if delegation.Reference != nil {
		reference := delegation.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// ServiceName
	destination.ServiceName = genruntime.ClonePointerToString(delegation.ServiceName)

	// Type
	destination.Type = genruntime.ClonePointerToString(delegation.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.Delegation_STATUS
// Deprecated version of Delegation_STATUS. Use v1beta20201101.Delegation_STATUS instead
type Delegation_STATUS struct {
	Actions           []string               `json:"actions,omitempty"`
	Etag              *string                `json:"etag,omitempty"`
	Id                *string                `json:"id,omitempty"`
	Name              *string                `json:"name,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ProvisioningState *string                `json:"provisioningState,omitempty"`
	ServiceName       *string                `json:"serviceName,omitempty"`
	Type              *string                `json:"type,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromDelegation_STATUS populates our Delegation_STATUS from the provided source Delegation_STATUS
func (delegation *Delegation_STATUS) AssignPropertiesFromDelegation_STATUS(source *v20201101s.Delegation_STATUS) error {
=======
// AssignProperties_From_Delegation_STATUS populates our Delegation_STATUS from the provided source Delegation_STATUS
func (delegation *Delegation_STATUS) AssignProperties_From_Delegation_STATUS(source *v20201101s.Delegation_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Actions
	delegation.Actions = genruntime.CloneSliceOfString(source.Actions)

	// Etag
	delegation.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	delegation.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	delegation.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	delegation.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ServiceName
	delegation.ServiceName = genruntime.ClonePointerToString(source.ServiceName)

	// Type
	delegation.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		delegation.PropertyBag = propertyBag
	} else {
		delegation.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToDelegation_STATUS populates the provided destination Delegation_STATUS from our Delegation_STATUS
func (delegation *Delegation_STATUS) AssignPropertiesToDelegation_STATUS(destination *v20201101s.Delegation_STATUS) error {
=======
// AssignProperties_To_Delegation_STATUS populates the provided destination Delegation_STATUS from our Delegation_STATUS
func (delegation *Delegation_STATUS) AssignProperties_To_Delegation_STATUS(destination *v20201101s.Delegation_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(delegation.PropertyBag)

	// Actions
	destination.Actions = genruntime.CloneSliceOfString(delegation.Actions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(delegation.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(delegation.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(delegation.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(delegation.ProvisioningState)

	// ServiceName
	destination.ServiceName = genruntime.ClonePointerToString(delegation.ServiceName)

	// Type
	destination.Type = genruntime.ClonePointerToString(delegation.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// Storage version of v1alpha1api20201101.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded instead
type IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	Etag                      *string                                                           `json:"etag,omitempty"`
	Id                        *string                                                           `json:"id,omitempty"`
	Name                      *string                                                           `json:"name,omitempty"`
	PrivateIPAddress          *string                                                           `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod *string                                                           `json:"privateIPAllocationMethod,omitempty"`
	PropertyBag               genruntime.PropertyBag                                            `json:"$propertyBag,omitempty"`
	ProvisioningState         *string                                                           `json:"provisioningState,omitempty"`
	PublicIPAddress           *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"publicIPAddress,omitempty"`
	Subnet                    *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded          `json:"subnet,omitempty"`
}

// AssignPropertiesFromIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// Storage version of v1alpha1api20201101.IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
	Etag                      *string                                                            `json:"etag,omitempty"`
	Id                        *string                                                            `json:"id,omitempty"`
	Name                      *string                                                            `json:"name,omitempty"`
	PrivateIPAddress          *string                                                            `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod *string                                                            `json:"privateIPAllocationMethod,omitempty"`
	PropertyBag               genruntime.PropertyBag                                             `json:"$propertyBag,omitempty"`
	ProvisioningState         *string                                                            `json:"provisioningState,omitempty"`
	PublicIPAddress           *PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded `json:"publicIPAddress,omitempty"`
}

// AssignProperties_From_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	embedded.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	embedded.PrivateIPAllocationMethod = genruntime.ClonePointerToString(source.PrivateIPAllocationMethod)

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicIPAddress
	if source.PublicIPAddress != nil {
<<<<<<< HEAD
		var publicIPAddress PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := publicIPAddress.AssignPropertiesFromPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PublicIPAddress")
=======
		var publicIPAddress PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
		err := publicIPAddress.AssignProperties_From_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field PublicIPAddress")
>>>>>>> main
		}
		embedded.PublicIPAddress = &publicIPAddress
	} else {
		embedded.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := subnet.AssignPropertiesFromSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Subnet")
		}
		embedded.Subnet = &subnet
	} else {
		embedded.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToIPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_To_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.IPConfiguration_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(embedded.PrivateIPAddress)

	// PrivateIPAllocationMethod
	destination.PrivateIPAllocationMethod = genruntime.ClonePointerToString(embedded.PrivateIPAllocationMethod)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// PublicIPAddress
	if embedded.PublicIPAddress != nil {
<<<<<<< HEAD
		var publicIPAddress v20201101s.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.PublicIPAddress.AssignPropertiesToPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PublicIPAddress")
=======
		var publicIPAddress v20201101s.PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
		err := embedded.PublicIPAddress.AssignProperties_To_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded() to populate field PublicIPAddress")
>>>>>>> main
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if embedded.Subnet != nil {
		var subnet v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.Subnet.AssignPropertiesToSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// Storage version of v1alpha1api20201101.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded instead
type IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	Etag              *string                                                  `json:"etag,omitempty"`
	Id                *string                                                  `json:"id,omitempty"`
	Name              *string                                                  `json:"name,omitempty"`
	PropertyBag       genruntime.PropertyBag                                   `json:"$propertyBag,omitempty"`
	ProvisioningState *string                                                  `json:"provisioningState,omitempty"`
	Subnet            *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded `json:"subnet,omitempty"`
	Type              *string                                                  `json:"type,omitempty"`
}

// AssignPropertiesFromIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// Storage version of v1alpha1api20201101.IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
	Etag              *string                `json:"etag,omitempty"`
	Id                *string                `json:"id,omitempty"`
	Name              *string                `json:"name,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ProvisioningState *string                `json:"provisioningState,omitempty"`
	Type              *string                `json:"type,omitempty"`
}

// AssignProperties_From_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Subnet
	if source.Subnet != nil {
		var subnet Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := subnet.AssignPropertiesFromSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Subnet")
		}
		embedded.Subnet = &subnet
	} else {
		embedded.Subnet = nil
	}

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToIPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_To_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.IPConfigurationProfile_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// Subnet
	if embedded.Subnet != nil {
		var subnet v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.Subnet.AssignPropertiesToSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_From_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToNetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_To_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.NetworkSecurityGroup_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// Storage version of v1alpha1api20201101.NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded instead
type NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded struct {
	Location      *string                                                  `json:"location,omitempty"`
	PropertyBag   genruntime.PropertyBag                                   `json:"$propertyBag,omitempty"`
	Reference     *genruntime.ResourceReference                            `armReference:"Id" json:"reference,omitempty"`
	SecurityRules []SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded `json:"securityRules,omitempty"`
	Tags          map[string]string                                        `json:"tags,omitempty"`
}

// AssignPropertiesFromNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded populates our NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded from the provided source NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Location
	embedded.Location = genruntime.ClonePointerToString(source.Location)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// SecurityRules
	if source.SecurityRules != nil {
		securityRuleList := make([]SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded, len(source.SecurityRules))
		for securityRuleIndex, securityRuleItem := range source.SecurityRules {
			// Shadow the loop variable to avoid aliasing
			securityRuleItem := securityRuleItem
			var securityRule SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded
			err := securityRule.AssignPropertiesFromSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded(&securityRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded() to populate field SecurityRules")
			}
			securityRuleList[securityRuleIndex] = securityRule
		}
		embedded.SecurityRules = securityRuleList
	} else {
		embedded.SecurityRules = nil
	}

	// Tags
	embedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded from our NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToNetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.NetworkSecurityGroupSpec_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Location
	destination.Location = genruntime.ClonePointerToString(embedded.Location)

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// SecurityRules
	if embedded.SecurityRules != nil {
		securityRuleList := make([]v20201101s.SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.SecurityRules))
		for securityRuleIndex, securityRuleItem := range embedded.SecurityRules {
			// Shadow the loop variable to avoid aliasing
			securityRuleItem := securityRuleItem
			var securityRule v20201101s.SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded
			err := securityRuleItem.AssignPropertiesToSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded(&securityRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded() to populate field SecurityRules")
			}
			securityRuleList[securityRuleIndex] = securityRule
		}
		destination.SecurityRules = securityRuleList
	} else {
		destination.SecurityRules = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(embedded.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded instead
type PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
=======
// Storage version of v1alpha1api20201101.PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
>>>>>>> main
	ExtendedLocation *ExtendedLocation_STATUS `json:"extendedLocation,omitempty"`
	Id               *string                  `json:"id,omitempty"`
	PropertyBag      genruntime.PropertyBag   `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_From_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
<<<<<<< HEAD
		err := extendedLocation.AssignPropertiesFromExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_STATUS() to populate field ExtendedLocation")
=======
		err := extendedLocation.AssignProperties_From_ExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExtendedLocation_STATUS() to populate field ExtendedLocation")
>>>>>>> main
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToPrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_To_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.PrivateEndpoint_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v20201101s.ExtendedLocation_STATUS
<<<<<<< HEAD
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_STATUS() to populate field ExtendedLocation")
=======
		err := embedded.ExtendedLocation.AssignProperties_To_ExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExtendedLocation_STATUS() to populate field ExtendedLocation")
>>>>>>> main
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ResourceNavigationLink_STATUS
// Deprecated version of ResourceNavigationLink_STATUS. Use v1beta20201101.ResourceNavigationLink_STATUS instead
type ResourceNavigationLink_STATUS struct {
	Etag               *string                `json:"etag,omitempty"`
	Id                 *string                `json:"id,omitempty"`
	Link               *string                `json:"link,omitempty"`
	LinkedResourceType *string                `json:"linkedResourceType,omitempty"`
	Name               *string                `json:"name,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ProvisioningState  *string                `json:"provisioningState,omitempty"`
	Type               *string                `json:"type,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromResourceNavigationLink_STATUS populates our ResourceNavigationLink_STATUS from the provided source ResourceNavigationLink_STATUS
func (link *ResourceNavigationLink_STATUS) AssignPropertiesFromResourceNavigationLink_STATUS(source *v20201101s.ResourceNavigationLink_STATUS) error {
=======
// AssignProperties_From_ResourceNavigationLink_STATUS populates our ResourceNavigationLink_STATUS from the provided source ResourceNavigationLink_STATUS
func (link *ResourceNavigationLink_STATUS) AssignProperties_From_ResourceNavigationLink_STATUS(source *v20201101s.ResourceNavigationLink_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Link
	link.Link = genruntime.ClonePointerToString(source.Link)

	// LinkedResourceType
	link.LinkedResourceType = genruntime.ClonePointerToString(source.LinkedResourceType)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	link.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		link.PropertyBag = propertyBag
	} else {
		link.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToResourceNavigationLink_STATUS populates the provided destination ResourceNavigationLink_STATUS from our ResourceNavigationLink_STATUS
func (link *ResourceNavigationLink_STATUS) AssignPropertiesToResourceNavigationLink_STATUS(destination *v20201101s.ResourceNavigationLink_STATUS) error {
=======
// AssignProperties_To_ResourceNavigationLink_STATUS populates the provided destination ResourceNavigationLink_STATUS from our ResourceNavigationLink_STATUS
func (link *ResourceNavigationLink_STATUS) AssignProperties_To_ResourceNavigationLink_STATUS(destination *v20201101s.ResourceNavigationLink_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(link.PropertyBag)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Link
	destination.Link = genruntime.ClonePointerToString(link.Link)

	// LinkedResourceType
	destination.LinkedResourceType = genruntime.ClonePointerToString(link.LinkedResourceType)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(link.ProvisioningState)

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.RouteTable_STATUS_SubResourceEmbedded
// Deprecated version of RouteTable_STATUS_SubResourceEmbedded. Use v1beta20201101.RouteTable_STATUS_SubResourceEmbedded instead
type RouteTable_STATUS_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromRouteTable_STATUS_SubResourceEmbedded populates our RouteTable_STATUS_SubResourceEmbedded from the provided source RouteTable_STATUS_SubResourceEmbedded
func (embedded *RouteTable_STATUS_SubResourceEmbedded) AssignPropertiesFromRouteTable_STATUS_SubResourceEmbedded(source *v20201101s.RouteTable_STATUS_SubResourceEmbedded) error {
=======
// AssignProperties_From_RouteTable_STATUS_SubResourceEmbedded populates our RouteTable_STATUS_SubResourceEmbedded from the provided source RouteTable_STATUS_SubResourceEmbedded
func (embedded *RouteTable_STATUS_SubResourceEmbedded) AssignProperties_From_RouteTable_STATUS_SubResourceEmbedded(source *v20201101s.RouteTable_STATUS_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToRouteTable_STATUS_SubResourceEmbedded populates the provided destination RouteTable_STATUS_SubResourceEmbedded from our RouteTable_STATUS_SubResourceEmbedded
func (embedded *RouteTable_STATUS_SubResourceEmbedded) AssignPropertiesToRouteTable_STATUS_SubResourceEmbedded(destination *v20201101s.RouteTable_STATUS_SubResourceEmbedded) error {
=======
// AssignProperties_To_RouteTable_STATUS_SubResourceEmbedded populates the provided destination RouteTable_STATUS_SubResourceEmbedded from our RouteTable_STATUS_SubResourceEmbedded
func (embedded *RouteTable_STATUS_SubResourceEmbedded) AssignProperties_To_RouteTable_STATUS_SubResourceEmbedded(destination *v20201101s.RouteTable_STATUS_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.RouteTableSpec
// Deprecated version of RouteTableSpec. Use v1beta20201101.RouteTableSpec instead
type RouteTableSpec struct {
	DisableBgpRoutePropagation *bool                                             `json:"disableBgpRoutePropagation,omitempty"`
	Location                   *string                                           `json:"location,omitempty"`
	PropertyBag                genruntime.PropertyBag                            `json:"$propertyBag,omitempty"`
	Reference                  *genruntime.ResourceReference                     `armReference:"Id" json:"reference,omitempty"`
	Routes                     []Route_VirtualNetworksSubnet_SubResourceEmbedded `json:"routes,omitempty"`
	Tags                       map[string]string                                 `json:"tags,omitempty"`
}

// AssignPropertiesFromRouteTableSpec populates our RouteTableSpec from the provided source RouteTableSpec
func (table *RouteTableSpec) AssignPropertiesFromRouteTableSpec(source *v20201101s.RouteTableSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// DisableBgpRoutePropagation
	if source.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *source.DisableBgpRoutePropagation
		table.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		table.DisableBgpRoutePropagation = nil
	}

	// Location
	table.Location = genruntime.ClonePointerToString(source.Location)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		table.Reference = &reference
	} else {
		table.Reference = nil
	}

	// Routes
	if source.Routes != nil {
		routeList := make([]Route_VirtualNetworksSubnet_SubResourceEmbedded, len(source.Routes))
		for routeIndex, routeItem := range source.Routes {
			// Shadow the loop variable to avoid aliasing
			routeItem := routeItem
			var route Route_VirtualNetworksSubnet_SubResourceEmbedded
			err := route.AssignPropertiesFromRoute_VirtualNetworksSubnet_SubResourceEmbedded(&routeItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRoute_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Routes")
			}
			routeList[routeIndex] = route
		}
		table.Routes = routeList
	} else {
		table.Routes = nil
	}

	// Tags
	table.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		table.PropertyBag = propertyBag
	} else {
		table.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRouteTableSpec populates the provided destination RouteTableSpec from our RouteTableSpec
func (table *RouteTableSpec) AssignPropertiesToRouteTableSpec(destination *v20201101s.RouteTableSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(table.PropertyBag)

	// DisableBgpRoutePropagation
	if table.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *table.DisableBgpRoutePropagation
		destination.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		destination.DisableBgpRoutePropagation = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(table.Location)

	// Reference
	if table.Reference != nil {
		reference := table.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Routes
	if table.Routes != nil {
		routeList := make([]v20201101s.Route_VirtualNetworksSubnet_SubResourceEmbedded, len(table.Routes))
		for routeIndex, routeItem := range table.Routes {
			// Shadow the loop variable to avoid aliasing
			routeItem := routeItem
			var route v20201101s.Route_VirtualNetworksSubnet_SubResourceEmbedded
			err := routeItem.AssignPropertiesToRoute_VirtualNetworksSubnet_SubResourceEmbedded(&route)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRoute_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Routes")
			}
			routeList[routeIndex] = route
		}
		destination.Routes = routeList
	} else {
		destination.Routes = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(table.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ServiceAssociationLink_STATUS
// Deprecated version of ServiceAssociationLink_STATUS. Use v1beta20201101.ServiceAssociationLink_STATUS instead
type ServiceAssociationLink_STATUS struct {
	AllowDelete        *bool                  `json:"allowDelete,omitempty"`
	Etag               *string                `json:"etag,omitempty"`
	Id                 *string                `json:"id,omitempty"`
	Link               *string                `json:"link,omitempty"`
	LinkedResourceType *string                `json:"linkedResourceType,omitempty"`
	Locations          []string               `json:"locations,omitempty"`
	Name               *string                `json:"name,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ProvisioningState  *string                `json:"provisioningState,omitempty"`
	Type               *string                `json:"type,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromServiceAssociationLink_STATUS populates our ServiceAssociationLink_STATUS from the provided source ServiceAssociationLink_STATUS
func (link *ServiceAssociationLink_STATUS) AssignPropertiesFromServiceAssociationLink_STATUS(source *v20201101s.ServiceAssociationLink_STATUS) error {
=======
// AssignProperties_From_ServiceAssociationLink_STATUS populates our ServiceAssociationLink_STATUS from the provided source ServiceAssociationLink_STATUS
func (link *ServiceAssociationLink_STATUS) AssignProperties_From_ServiceAssociationLink_STATUS(source *v20201101s.ServiceAssociationLink_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AllowDelete
	if source.AllowDelete != nil {
		allowDelete := *source.AllowDelete
		link.AllowDelete = &allowDelete
	} else {
		link.AllowDelete = nil
	}

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Link
	link.Link = genruntime.ClonePointerToString(source.Link)

	// LinkedResourceType
	link.LinkedResourceType = genruntime.ClonePointerToString(source.LinkedResourceType)

	// Locations
	link.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	link.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		link.PropertyBag = propertyBag
	} else {
		link.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToServiceAssociationLink_STATUS populates the provided destination ServiceAssociationLink_STATUS from our ServiceAssociationLink_STATUS
func (link *ServiceAssociationLink_STATUS) AssignPropertiesToServiceAssociationLink_STATUS(destination *v20201101s.ServiceAssociationLink_STATUS) error {
=======
// AssignProperties_To_ServiceAssociationLink_STATUS populates the provided destination ServiceAssociationLink_STATUS from our ServiceAssociationLink_STATUS
func (link *ServiceAssociationLink_STATUS) AssignProperties_To_ServiceAssociationLink_STATUS(destination *v20201101s.ServiceAssociationLink_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(link.PropertyBag)

	// AllowDelete
	if link.AllowDelete != nil {
		allowDelete := *link.AllowDelete
		destination.AllowDelete = &allowDelete
	} else {
		destination.AllowDelete = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Link
	destination.Link = genruntime.ClonePointerToString(link.Link)

	// LinkedResourceType
	destination.LinkedResourceType = genruntime.ClonePointerToString(link.LinkedResourceType)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(link.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(link.ProvisioningState)

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	Kind        *string                `json:"kind,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_From_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	embedded.Kind = genruntime.ClonePointerToString(source.Kind)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_To_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.ServiceEndpointPolicy_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(embedded.Kind)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ServiceEndpointPolicySpec
// Deprecated version of ServiceEndpointPolicySpec. Use v1beta20201101.ServiceEndpointPolicySpec instead
type ServiceEndpointPolicySpec struct {
	Location                         *string                                                                     `json:"location,omitempty"`
	PropertyBag                      genruntime.PropertyBag                                                      `json:"$propertyBag,omitempty"`
	Reference                        *genruntime.ResourceReference                                               `armReference:"Id" json:"reference,omitempty"`
	ServiceEndpointPolicyDefinitions []ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded `json:"serviceEndpointPolicyDefinitions,omitempty"`
	Tags                             map[string]string                                                           `json:"tags,omitempty"`
}

// AssignPropertiesFromServiceEndpointPolicySpec populates our ServiceEndpointPolicySpec from the provided source ServiceEndpointPolicySpec
func (policy *ServiceEndpointPolicySpec) AssignPropertiesFromServiceEndpointPolicySpec(source *v20201101s.ServiceEndpointPolicySpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Location
	policy.Location = genruntime.ClonePointerToString(source.Location)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		policy.Reference = &reference
	} else {
		policy.Reference = nil
	}

	// ServiceEndpointPolicyDefinitions
	if source.ServiceEndpointPolicyDefinitions != nil {
		serviceEndpointPolicyDefinitionList := make([]ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded, len(source.ServiceEndpointPolicyDefinitions))
		for serviceEndpointPolicyDefinitionIndex, serviceEndpointPolicyDefinitionItem := range source.ServiceEndpointPolicyDefinitions {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyDefinitionItem := serviceEndpointPolicyDefinitionItem
			var serviceEndpointPolicyDefinition ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyDefinition.AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicyDefinitionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicyDefinitions")
			}
			serviceEndpointPolicyDefinitionList[serviceEndpointPolicyDefinitionIndex] = serviceEndpointPolicyDefinition
		}
		policy.ServiceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitionList
	} else {
		policy.ServiceEndpointPolicyDefinitions = nil
	}

	// Tags
	policy.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		policy.PropertyBag = propertyBag
	} else {
		policy.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPolicySpec populates the provided destination ServiceEndpointPolicySpec from our ServiceEndpointPolicySpec
func (policy *ServiceEndpointPolicySpec) AssignPropertiesToServiceEndpointPolicySpec(destination *v20201101s.ServiceEndpointPolicySpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(policy.PropertyBag)

	// Location
	destination.Location = genruntime.ClonePointerToString(policy.Location)

	// Reference
	if policy.Reference != nil {
		reference := policy.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// ServiceEndpointPolicyDefinitions
	if policy.ServiceEndpointPolicyDefinitions != nil {
		serviceEndpointPolicyDefinitionList := make([]v20201101s.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded, len(policy.ServiceEndpointPolicyDefinitions))
		for serviceEndpointPolicyDefinitionIndex, serviceEndpointPolicyDefinitionItem := range policy.ServiceEndpointPolicyDefinitions {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyDefinitionItem := serviceEndpointPolicyDefinitionItem
			var serviceEndpointPolicyDefinition v20201101s.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyDefinitionItem.AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicyDefinition)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicyDefinitions")
			}
			serviceEndpointPolicyDefinitionList[serviceEndpointPolicyDefinitionIndex] = serviceEndpointPolicyDefinition
		}
		destination.ServiceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitionList
	} else {
		destination.ServiceEndpointPolicyDefinitions = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(policy.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ServiceEndpointPropertiesFormat
// Deprecated version of ServiceEndpointPropertiesFormat. Use v1beta20201101.ServiceEndpointPropertiesFormat instead
type ServiceEndpointPropertiesFormat struct {
	Locations   []string               `json:"locations,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Service     *string                `json:"service,omitempty"`
}

// AssignProperties_From_ServiceEndpointPropertiesFormat populates our ServiceEndpointPropertiesFormat from the provided source ServiceEndpointPropertiesFormat
func (format *ServiceEndpointPropertiesFormat) AssignProperties_From_ServiceEndpointPropertiesFormat(source *v20201101s.ServiceEndpointPropertiesFormat) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Locations
	format.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Service
	format.Service = genruntime.ClonePointerToString(source.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		format.PropertyBag = propertyBag
	} else {
		format.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServiceEndpointPropertiesFormat populates the provided destination ServiceEndpointPropertiesFormat from our ServiceEndpointPropertiesFormat
func (format *ServiceEndpointPropertiesFormat) AssignProperties_To_ServiceEndpointPropertiesFormat(destination *v20201101s.ServiceEndpointPropertiesFormat) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(format.PropertyBag)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(format.Locations)

	// Service
	destination.Service = genruntime.ClonePointerToString(format.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ServiceEndpointPropertiesFormat_STATUS
// Deprecated version of ServiceEndpointPropertiesFormat_STATUS. Use v1beta20201101.ServiceEndpointPropertiesFormat_STATUS instead
type ServiceEndpointPropertiesFormat_STATUS struct {
	Locations         []string               `json:"locations,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ProvisioningState *string                `json:"provisioningState,omitempty"`
	Service           *string                `json:"service,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromServiceEndpointPropertiesFormat_STATUS populates our ServiceEndpointPropertiesFormat_STATUS from the provided source ServiceEndpointPropertiesFormat_STATUS
func (format *ServiceEndpointPropertiesFormat_STATUS) AssignPropertiesFromServiceEndpointPropertiesFormat_STATUS(source *v20201101s.ServiceEndpointPropertiesFormat_STATUS) error {
=======
// AssignProperties_From_ServiceEndpointPropertiesFormat_STATUS populates our ServiceEndpointPropertiesFormat_STATUS from the provided source ServiceEndpointPropertiesFormat_STATUS
func (format *ServiceEndpointPropertiesFormat_STATUS) AssignProperties_From_ServiceEndpointPropertiesFormat_STATUS(source *v20201101s.ServiceEndpointPropertiesFormat_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Locations
	format.Locations = genruntime.CloneSliceOfString(source.Locations)

	// ProvisioningState
	format.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Service
	format.Service = genruntime.ClonePointerToString(source.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		format.PropertyBag = propertyBag
	} else {
		format.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToServiceEndpointPropertiesFormat_STATUS populates the provided destination ServiceEndpointPropertiesFormat_STATUS from our ServiceEndpointPropertiesFormat_STATUS
func (format *ServiceEndpointPropertiesFormat_STATUS) AssignPropertiesToServiceEndpointPropertiesFormat_STATUS(destination *v20201101s.ServiceEndpointPropertiesFormat_STATUS) error {
=======
// AssignProperties_To_ServiceEndpointPropertiesFormat_STATUS populates the provided destination ServiceEndpointPropertiesFormat_STATUS from our ServiceEndpointPropertiesFormat_STATUS
func (format *ServiceEndpointPropertiesFormat_STATUS) AssignProperties_To_ServiceEndpointPropertiesFormat_STATUS(destination *v20201101s.ServiceEndpointPropertiesFormat_STATUS) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(format.PropertyBag)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(format.Locations)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(format.ProvisioningState)

	// Service
	destination.Service = genruntime.ClonePointerToString(format.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// Storage version of v1alpha1api20201101.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded instead
type PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
=======
// Storage version of v1alpha1api20201101.VirtualNetworks_Subnets_Spec_Properties_Delegations
// Deprecated version of VirtualNetworks_Subnets_Spec_Properties_Delegations. Use v1beta20201101.VirtualNetworks_Subnets_Spec_Properties_Delegations instead
type VirtualNetworks_Subnets_Spec_Properties_Delegations struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ServiceName *string                `json:"serviceName,omitempty"`
}

// AssignProperties_From_VirtualNetworks_Subnets_Spec_Properties_Delegations populates our VirtualNetworks_Subnets_Spec_Properties_Delegations from the provided source VirtualNetworks_Subnets_Spec_Properties_Delegations
func (delegations *VirtualNetworks_Subnets_Spec_Properties_Delegations) AssignProperties_From_VirtualNetworks_Subnets_Spec_Properties_Delegations(source *v20201101s.VirtualNetworks_Subnets_Spec_Properties_Delegations) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	delegations.Name = genruntime.ClonePointerToString(source.Name)

	// ServiceName
	delegations.ServiceName = genruntime.ClonePointerToString(source.ServiceName)

	// Update the property bag
	if len(propertyBag) > 0 {
		delegations.PropertyBag = propertyBag
	} else {
		delegations.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignProperties_To_VirtualNetworks_Subnets_Spec_Properties_Delegations populates the provided destination VirtualNetworks_Subnets_Spec_Properties_Delegations from our VirtualNetworks_Subnets_Spec_Properties_Delegations
func (delegations *VirtualNetworks_Subnets_Spec_Properties_Delegations) AssignProperties_To_VirtualNetworks_Subnets_Spec_Properties_Delegations(destination *v20201101s.VirtualNetworks_Subnets_Spec_Properties_Delegations) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(delegations.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(delegations.Name)

	// ServiceName
	destination.ServiceName = genruntime.ClonePointerToString(delegations.ServiceName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
// Deprecated version of PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded. Use v1beta20201101.PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded instead
type PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded struct {
>>>>>>> main
	ExtendedLocation *ExtendedLocation_STATUS   `json:"extendedLocation,omitempty"`
	Id               *string                    `json:"id,omitempty"`
	PropertyBag      genruntime.PropertyBag     `json:"$propertyBag,omitempty"`
	Sku              *PublicIPAddressSku_STATUS `json:"sku,omitempty"`
	Zones            []string                   `json:"zones,omitempty"`
}

<<<<<<< HEAD
// AssignPropertiesFromPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_From_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates our PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from the provided source PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_From_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(source *v20201101s.PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
<<<<<<< HEAD
		err := extendedLocation.AssignPropertiesFromExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_STATUS() to populate field ExtendedLocation")
=======
		err := extendedLocation.AssignProperties_From_ExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExtendedLocation_STATUS() to populate field ExtendedLocation")
>>>>>>> main
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku_STATUS
<<<<<<< HEAD
		err := sku.AssignPropertiesFromPublicIPAddressSku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku_STATUS() to populate field Sku")
=======
		err := sku.AssignProperties_From_PublicIPAddressSku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_PublicIPAddressSku_STATUS() to populate field Sku")
>>>>>>> main
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

<<<<<<< HEAD
// AssignPropertiesToPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToPublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
=======
// AssignProperties_To_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded populates the provided destination PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded from our PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) AssignProperties_To_PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded(destination *v20201101s.PublicIPAddress_STATUS_VirtualNetworks_Subnet_SubResourceEmbedded) error {
>>>>>>> main
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v20201101s.ExtendedLocation_STATUS
<<<<<<< HEAD
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_STATUS() to populate field ExtendedLocation")
=======
		err := embedded.ExtendedLocation.AssignProperties_To_ExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExtendedLocation_STATUS() to populate field ExtendedLocation")
>>>>>>> main
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Sku
	if embedded.Sku != nil {
		var sku v20201101s.PublicIPAddressSku_STATUS
<<<<<<< HEAD
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku_STATUS() to populate field Sku")
=======
		err := embedded.Sku.AssignProperties_To_PublicIPAddressSku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_PublicIPAddressSku_STATUS() to populate field Sku")
>>>>>>> main
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.Route_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of Route_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.Route_VirtualNetworksSubnet_SubResourceEmbedded instead
type Route_VirtualNetworksSubnet_SubResourceEmbedded struct {
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// AssignPropertiesFromRoute_VirtualNetworksSubnet_SubResourceEmbedded populates our Route_VirtualNetworksSubnet_SubResourceEmbedded from the provided source Route_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Route_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromRoute_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.Route_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoute_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination Route_VirtualNetworksSubnet_SubResourceEmbedded from our Route_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Route_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToRoute_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.Route_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded instead
type SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded struct {
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// AssignPropertiesFromSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded populates our SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded from the provided source SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded from our SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToSecurityRule_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.SecurityRule_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded instead
type ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded struct {
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded populates our ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded from the provided source ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded from our ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201101.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
// Deprecated version of Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded. Use v1beta20201101.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded instead
type Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates our Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from the provided source Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(source *v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded from our Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToSubnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded(destination *v20201101s.Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&VirtualNetworksSubnet{}, &VirtualNetworksSubnetList{})
}
