// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsResolversOutboundEndpoint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsResolversOutboundEndpoint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsResolversOutboundEndpoint, DnsResolversOutboundEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsResolversOutboundEndpoint runs a test to see if a specific instance of DnsResolversOutboundEndpoint round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsResolversOutboundEndpoint(subject DnsResolversOutboundEndpoint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsResolversOutboundEndpoint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsResolversOutboundEndpoint instances for property testing - lazily instantiated by
// DnsResolversOutboundEndpointGenerator()
var dnsResolversOutboundEndpointGenerator gopter.Gen

// DnsResolversOutboundEndpointGenerator returns a generator of DnsResolversOutboundEndpoint instances for property testing.
func DnsResolversOutboundEndpointGenerator() gopter.Gen {
	if dnsResolversOutboundEndpointGenerator != nil {
		return dnsResolversOutboundEndpointGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDnsResolversOutboundEndpoint(generators)
	dnsResolversOutboundEndpointGenerator = gen.Struct(reflect.TypeOf(DnsResolversOutboundEndpoint{}), generators)

	return dnsResolversOutboundEndpointGenerator
}

// AddRelatedPropertyGeneratorsForDnsResolversOutboundEndpoint is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsResolversOutboundEndpoint(gens map[string]gopter.Gen) {
	gens["Spec"] = DnsResolvers_OutboundEndpoint_SpecGenerator()
	gens["Status"] = DnsResolvers_OutboundEndpoint_STATUSGenerator()
}

func Test_DnsResolvers_OutboundEndpoint_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsResolvers_OutboundEndpoint_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsResolvers_OutboundEndpoint_Spec, DnsResolvers_OutboundEndpoint_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsResolvers_OutboundEndpoint_Spec runs a test to see if a specific instance of DnsResolvers_OutboundEndpoint_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsResolvers_OutboundEndpoint_Spec(subject DnsResolvers_OutboundEndpoint_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsResolvers_OutboundEndpoint_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsResolvers_OutboundEndpoint_Spec instances for property testing - lazily instantiated by
// DnsResolvers_OutboundEndpoint_SpecGenerator()
var dnsResolvers_OutboundEndpoint_SpecGenerator gopter.Gen

// DnsResolvers_OutboundEndpoint_SpecGenerator returns a generator of DnsResolvers_OutboundEndpoint_Spec instances for property testing.
// We first initialize dnsResolvers_OutboundEndpoint_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsResolvers_OutboundEndpoint_SpecGenerator() gopter.Gen {
	if dnsResolvers_OutboundEndpoint_SpecGenerator != nil {
		return dnsResolvers_OutboundEndpoint_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec(generators)
	dnsResolvers_OutboundEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(DnsResolvers_OutboundEndpoint_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec(generators)
	AddRelatedPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec(generators)
	dnsResolvers_OutboundEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(DnsResolvers_OutboundEndpoint_Spec{}), generators)

	return dnsResolvers_OutboundEndpoint_SpecGenerator
}

// AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsResolvers_OutboundEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(DnsresolverSubResourceGenerator())
}

func Test_DnsResolvers_OutboundEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsResolvers_OutboundEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsResolvers_OutboundEndpoint_STATUS, DnsResolvers_OutboundEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsResolvers_OutboundEndpoint_STATUS runs a test to see if a specific instance of DnsResolvers_OutboundEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsResolvers_OutboundEndpoint_STATUS(subject DnsResolvers_OutboundEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsResolvers_OutboundEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsResolvers_OutboundEndpoint_STATUS instances for property testing - lazily instantiated by
// DnsResolvers_OutboundEndpoint_STATUSGenerator()
var dnsResolvers_OutboundEndpoint_STATUSGenerator gopter.Gen

// DnsResolvers_OutboundEndpoint_STATUSGenerator returns a generator of DnsResolvers_OutboundEndpoint_STATUS instances for property testing.
// We first initialize dnsResolvers_OutboundEndpoint_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsResolvers_OutboundEndpoint_STATUSGenerator() gopter.Gen {
	if dnsResolvers_OutboundEndpoint_STATUSGenerator != nil {
		return dnsResolvers_OutboundEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS(generators)
	dnsResolvers_OutboundEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsResolvers_OutboundEndpoint_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS(generators)
	AddRelatedPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS(generators)
	dnsResolvers_OutboundEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsResolvers_OutboundEndpoint_STATUS{}), generators)

	return dnsResolvers_OutboundEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsResolvers_OutboundEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(DnsresolverSubResource_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}
