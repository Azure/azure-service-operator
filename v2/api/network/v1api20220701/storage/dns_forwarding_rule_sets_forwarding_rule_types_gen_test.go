// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsForwardingRuleSetsForwardingRule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRuleSetsForwardingRule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule, DnsForwardingRuleSetsForwardingRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule runs a test to see if a specific instance of DnsForwardingRuleSetsForwardingRule round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule(subject DnsForwardingRuleSetsForwardingRule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRuleSetsForwardingRule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRuleSetsForwardingRule instances for property testing - lazily instantiated by
// DnsForwardingRuleSetsForwardingRuleGenerator()
var dnsForwardingRuleSetsForwardingRuleGenerator gopter.Gen

// DnsForwardingRuleSetsForwardingRuleGenerator returns a generator of DnsForwardingRuleSetsForwardingRule instances for property testing.
func DnsForwardingRuleSetsForwardingRuleGenerator() gopter.Gen {
	if dnsForwardingRuleSetsForwardingRuleGenerator != nil {
		return dnsForwardingRuleSetsForwardingRuleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule(generators)
	dnsForwardingRuleSetsForwardingRuleGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsForwardingRule{}), generators)

	return dnsForwardingRuleSetsForwardingRuleGenerator
}

// AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule(gens map[string]gopter.Gen) {
	gens["Spec"] = DnsForwardingRuleSetsForwardingRule_SpecGenerator()
	gens["Status"] = DnsForwardingRuleSetsForwardingRule_STATUSGenerator()
}

func Test_DnsForwardingRuleSetsForwardingRuleOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRuleSetsForwardingRuleOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRuleOperatorSpec, DnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRuleOperatorSpec runs a test to see if a specific instance of DnsForwardingRuleSetsForwardingRuleOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRuleOperatorSpec(subject DnsForwardingRuleSetsForwardingRuleOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRuleSetsForwardingRuleOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRuleSetsForwardingRuleOperatorSpec instances for property testing - lazily instantiated by
// DnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator()
var dnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator gopter.Gen

// DnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator returns a generator of DnsForwardingRuleSetsForwardingRuleOperatorSpec instances for property testing.
func DnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator() gopter.Gen {
	if dnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator != nil {
		return dnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	dnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsForwardingRuleOperatorSpec{}), generators)

	return dnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator
}

func Test_DnsForwardingRuleSetsForwardingRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRuleSetsForwardingRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule_STATUS, DnsForwardingRuleSetsForwardingRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule_STATUS runs a test to see if a specific instance of DnsForwardingRuleSetsForwardingRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule_STATUS(subject DnsForwardingRuleSetsForwardingRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRuleSetsForwardingRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRuleSetsForwardingRule_STATUS instances for property testing - lazily instantiated by
// DnsForwardingRuleSetsForwardingRule_STATUSGenerator()
var dnsForwardingRuleSetsForwardingRule_STATUSGenerator gopter.Gen

// DnsForwardingRuleSetsForwardingRule_STATUSGenerator returns a generator of DnsForwardingRuleSetsForwardingRule_STATUS instances for property testing.
// We first initialize dnsForwardingRuleSetsForwardingRule_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsForwardingRuleSetsForwardingRule_STATUSGenerator() gopter.Gen {
	if dnsForwardingRuleSetsForwardingRule_STATUSGenerator != nil {
		return dnsForwardingRuleSetsForwardingRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS(generators)
	dnsForwardingRuleSetsForwardingRule_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsForwardingRule_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS(generators)
	AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS(generators)
	dnsForwardingRuleSetsForwardingRule_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsForwardingRule_STATUS{}), generators)

	return dnsForwardingRuleSetsForwardingRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS(gens map[string]gopter.Gen) {
	gens["DomainName"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardingRuleState"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
	gens["TargetDnsServers"] = gen.SliceOf(TargetDnsServer_STATUSGenerator())
}

func Test_DnsForwardingRuleSetsForwardingRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRuleSetsForwardingRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule_Spec, DnsForwardingRuleSetsForwardingRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule_Spec runs a test to see if a specific instance of DnsForwardingRuleSetsForwardingRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRuleSetsForwardingRule_Spec(subject DnsForwardingRuleSetsForwardingRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRuleSetsForwardingRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRuleSetsForwardingRule_Spec instances for property testing - lazily instantiated by
// DnsForwardingRuleSetsForwardingRule_SpecGenerator()
var dnsForwardingRuleSetsForwardingRule_SpecGenerator gopter.Gen

// DnsForwardingRuleSetsForwardingRule_SpecGenerator returns a generator of DnsForwardingRuleSetsForwardingRule_Spec instances for property testing.
// We first initialize dnsForwardingRuleSetsForwardingRule_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsForwardingRuleSetsForwardingRule_SpecGenerator() gopter.Gen {
	if dnsForwardingRuleSetsForwardingRule_SpecGenerator != nil {
		return dnsForwardingRuleSetsForwardingRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec(generators)
	dnsForwardingRuleSetsForwardingRule_SpecGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsForwardingRule_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec(generators)
	AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec(generators)
	dnsForwardingRuleSetsForwardingRule_SpecGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsForwardingRule_Spec{}), generators)

	return dnsForwardingRuleSetsForwardingRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["DomainName"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardingRuleState"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsForwardingRule_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(DnsForwardingRuleSetsForwardingRuleOperatorSpecGenerator())
	gens["TargetDnsServers"] = gen.SliceOf(TargetDnsServerGenerator())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.AlphaString())
}

func Test_TargetDnsServer_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TargetDnsServer via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTargetDnsServer, TargetDnsServerGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTargetDnsServer runs a test to see if a specific instance of TargetDnsServer round trips to JSON and back losslessly
func RunJSONSerializationTestForTargetDnsServer(subject TargetDnsServer) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TargetDnsServer
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TargetDnsServer instances for property testing - lazily instantiated by TargetDnsServerGenerator()
var targetDnsServerGenerator gopter.Gen

// TargetDnsServerGenerator returns a generator of TargetDnsServer instances for property testing.
func TargetDnsServerGenerator() gopter.Gen {
	if targetDnsServerGenerator != nil {
		return targetDnsServerGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTargetDnsServer(generators)
	targetDnsServerGenerator = gen.Struct(reflect.TypeOf(TargetDnsServer{}), generators)

	return targetDnsServerGenerator
}

// AddIndependentPropertyGeneratorsForTargetDnsServer is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTargetDnsServer(gens map[string]gopter.Gen) {
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
}

func Test_TargetDnsServer_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TargetDnsServer_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTargetDnsServer_STATUS, TargetDnsServer_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTargetDnsServer_STATUS runs a test to see if a specific instance of TargetDnsServer_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTargetDnsServer_STATUS(subject TargetDnsServer_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TargetDnsServer_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TargetDnsServer_STATUS instances for property testing - lazily instantiated by
// TargetDnsServer_STATUSGenerator()
var targetDnsServer_STATUSGenerator gopter.Gen

// TargetDnsServer_STATUSGenerator returns a generator of TargetDnsServer_STATUS instances for property testing.
func TargetDnsServer_STATUSGenerator() gopter.Gen {
	if targetDnsServer_STATUSGenerator != nil {
		return targetDnsServer_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTargetDnsServer_STATUS(generators)
	targetDnsServer_STATUSGenerator = gen.Struct(reflect.TypeOf(TargetDnsServer_STATUS{}), generators)

	return targetDnsServer_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTargetDnsServer_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTargetDnsServer_STATUS(gens map[string]gopter.Gen) {
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
}
