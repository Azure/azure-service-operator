// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsResolversInboundEndpoint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsResolversInboundEndpoint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsResolversInboundEndpoint, DnsResolversInboundEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsResolversInboundEndpoint runs a test to see if a specific instance of DnsResolversInboundEndpoint round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsResolversInboundEndpoint(subject DnsResolversInboundEndpoint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsResolversInboundEndpoint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsResolversInboundEndpoint instances for property testing - lazily instantiated by
// DnsResolversInboundEndpointGenerator()
var dnsResolversInboundEndpointGenerator gopter.Gen

// DnsResolversInboundEndpointGenerator returns a generator of DnsResolversInboundEndpoint instances for property testing.
func DnsResolversInboundEndpointGenerator() gopter.Gen {
	if dnsResolversInboundEndpointGenerator != nil {
		return dnsResolversInboundEndpointGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint(generators)
	dnsResolversInboundEndpointGenerator = gen.Struct(reflect.TypeOf(DnsResolversInboundEndpoint{}), generators)

	return dnsResolversInboundEndpointGenerator
}

// AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint(gens map[string]gopter.Gen) {
	gens["Spec"] = DnsResolversInboundEndpoint_SpecGenerator()
	gens["Status"] = DnsResolversInboundEndpoint_STATUSGenerator()
}

func Test_DnsResolversInboundEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsResolversInboundEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsResolversInboundEndpoint_STATUS, DnsResolversInboundEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsResolversInboundEndpoint_STATUS runs a test to see if a specific instance of DnsResolversInboundEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsResolversInboundEndpoint_STATUS(subject DnsResolversInboundEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsResolversInboundEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsResolversInboundEndpoint_STATUS instances for property testing - lazily instantiated by
// DnsResolversInboundEndpoint_STATUSGenerator()
var dnsResolversInboundEndpoint_STATUSGenerator gopter.Gen

// DnsResolversInboundEndpoint_STATUSGenerator returns a generator of DnsResolversInboundEndpoint_STATUS instances for property testing.
// We first initialize dnsResolversInboundEndpoint_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsResolversInboundEndpoint_STATUSGenerator() gopter.Gen {
	if dnsResolversInboundEndpoint_STATUSGenerator != nil {
		return dnsResolversInboundEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS(generators)
	dnsResolversInboundEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsResolversInboundEndpoint_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS(generators)
	AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS(generators)
	dnsResolversInboundEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsResolversInboundEndpoint_STATUS{}), generators)

	return dnsResolversInboundEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["IpConfigurations"] = gen.SliceOf(IpConfiguration_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_DnsResolversInboundEndpoint_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsResolversInboundEndpoint_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsResolversInboundEndpoint_Spec, DnsResolversInboundEndpoint_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsResolversInboundEndpoint_Spec runs a test to see if a specific instance of DnsResolversInboundEndpoint_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsResolversInboundEndpoint_Spec(subject DnsResolversInboundEndpoint_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsResolversInboundEndpoint_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsResolversInboundEndpoint_Spec instances for property testing - lazily instantiated by
// DnsResolversInboundEndpoint_SpecGenerator()
var dnsResolversInboundEndpoint_SpecGenerator gopter.Gen

// DnsResolversInboundEndpoint_SpecGenerator returns a generator of DnsResolversInboundEndpoint_Spec instances for property testing.
// We first initialize dnsResolversInboundEndpoint_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsResolversInboundEndpoint_SpecGenerator() gopter.Gen {
	if dnsResolversInboundEndpoint_SpecGenerator != nil {
		return dnsResolversInboundEndpoint_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_Spec(generators)
	dnsResolversInboundEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(DnsResolversInboundEndpoint_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_Spec(generators)
	AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint_Spec(generators)
	dnsResolversInboundEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(DnsResolversInboundEndpoint_Spec{}), generators)

	return dnsResolversInboundEndpoint_SpecGenerator
}

// AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsResolversInboundEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsResolversInboundEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["IpConfigurations"] = gen.SliceOf(IpConfigurationGenerator())
}

func Test_IpConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpConfiguration, IpConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpConfiguration runs a test to see if a specific instance of IpConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForIpConfiguration(subject IpConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpConfiguration instances for property testing - lazily instantiated by IpConfigurationGenerator()
var ipConfigurationGenerator gopter.Gen

// IpConfigurationGenerator returns a generator of IpConfiguration instances for property testing.
// We first initialize ipConfigurationGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IpConfigurationGenerator() gopter.Gen {
	if ipConfigurationGenerator != nil {
		return ipConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpConfiguration(generators)
	ipConfigurationGenerator = gen.Struct(reflect.TypeOf(IpConfiguration{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpConfiguration(generators)
	AddRelatedPropertyGeneratorsForIpConfiguration(generators)
	ipConfigurationGenerator = gen.Struct(reflect.TypeOf(IpConfiguration{}), generators)

	return ipConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForIpConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpConfiguration(gens map[string]gopter.Gen) {
	gens["PrivateIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIpAllocationMethod"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIpConfiguration is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIpConfiguration(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(DnsresolverSubResourceGenerator())
}

func Test_IpConfiguration_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpConfiguration_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpConfiguration_STATUS, IpConfiguration_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpConfiguration_STATUS runs a test to see if a specific instance of IpConfiguration_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForIpConfiguration_STATUS(subject IpConfiguration_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpConfiguration_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpConfiguration_STATUS instances for property testing - lazily instantiated by
// IpConfiguration_STATUSGenerator()
var ipConfiguration_STATUSGenerator gopter.Gen

// IpConfiguration_STATUSGenerator returns a generator of IpConfiguration_STATUS instances for property testing.
// We first initialize ipConfiguration_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IpConfiguration_STATUSGenerator() gopter.Gen {
	if ipConfiguration_STATUSGenerator != nil {
		return ipConfiguration_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpConfiguration_STATUS(generators)
	ipConfiguration_STATUSGenerator = gen.Struct(reflect.TypeOf(IpConfiguration_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpConfiguration_STATUS(generators)
	AddRelatedPropertyGeneratorsForIpConfiguration_STATUS(generators)
	ipConfiguration_STATUSGenerator = gen.Struct(reflect.TypeOf(IpConfiguration_STATUS{}), generators)

	return ipConfiguration_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForIpConfiguration_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpConfiguration_STATUS(gens map[string]gopter.Gen) {
	gens["PrivateIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIpAllocationMethod"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIpConfiguration_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIpConfiguration_STATUS(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(DnsresolverSubResource_STATUSGenerator())
}
