// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM, ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM runs a test to see if a specific instance of ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM(subject ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM instances for property testing -
// lazily instantiated by ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator()
var applicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator gopter.Gen

// ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator returns a generator of ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM instances for property testing.
func ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if applicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator != nil {
		return applicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM(generators)
	applicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM{}), generators)

	return applicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_ARM, ExtendedLocation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_ARM runs a test to see if a specific instance of ExtendedLocation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_ARM(subject ExtendedLocation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_ARM instances for property testing - lazily instantiated by
// ExtendedLocation_ARMGenerator()
var extendedLocation_ARMGenerator gopter.Gen

// ExtendedLocation_ARMGenerator returns a generator of ExtendedLocation_ARM instances for property testing.
func ExtendedLocation_ARMGenerator() gopter.Gen {
	if extendedLocation_ARMGenerator != nil {
		return extendedLocation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_ARM(generators)
	extendedLocation_ARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_ARM{}), generators)

	return extendedLocation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_ARM_EdgeZone))
}

func Test_PrivateEndpointIPConfigurationProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointIPConfigurationProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointIPConfigurationProperties_ARM, PrivateEndpointIPConfigurationProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointIPConfigurationProperties_ARM runs a test to see if a specific instance of PrivateEndpointIPConfigurationProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointIPConfigurationProperties_ARM(subject PrivateEndpointIPConfigurationProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointIPConfigurationProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointIPConfigurationProperties_ARM instances for property testing - lazily instantiated by
// PrivateEndpointIPConfigurationProperties_ARMGenerator()
var privateEndpointIPConfigurationProperties_ARMGenerator gopter.Gen

// PrivateEndpointIPConfigurationProperties_ARMGenerator returns a generator of PrivateEndpointIPConfigurationProperties_ARM instances for property testing.
func PrivateEndpointIPConfigurationProperties_ARMGenerator() gopter.Gen {
	if privateEndpointIPConfigurationProperties_ARMGenerator != nil {
		return privateEndpointIPConfigurationProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointIPConfigurationProperties_ARM(generators)
	privateEndpointIPConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointIPConfigurationProperties_ARM{}), generators)

	return privateEndpointIPConfigurationProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointIPConfigurationProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointIPConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["MemberName"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointIPConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointIPConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointIPConfiguration_ARM, PrivateEndpointIPConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointIPConfiguration_ARM runs a test to see if a specific instance of PrivateEndpointIPConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointIPConfiguration_ARM(subject PrivateEndpointIPConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointIPConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointIPConfiguration_ARM instances for property testing - lazily instantiated by
// PrivateEndpointIPConfiguration_ARMGenerator()
var privateEndpointIPConfiguration_ARMGenerator gopter.Gen

// PrivateEndpointIPConfiguration_ARMGenerator returns a generator of PrivateEndpointIPConfiguration_ARM instances for property testing.
// We first initialize privateEndpointIPConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointIPConfiguration_ARMGenerator() gopter.Gen {
	if privateEndpointIPConfiguration_ARMGenerator != nil {
		return privateEndpointIPConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM(generators)
	privateEndpointIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointIPConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM(generators)
	privateEndpointIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointIPConfiguration_ARM{}), generators)

	return privateEndpointIPConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateEndpointIPConfigurationProperties_ARMGenerator())
}

func Test_PrivateEndpointProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointProperties_ARM, PrivateEndpointProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointProperties_ARM runs a test to see if a specific instance of PrivateEndpointProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointProperties_ARM(subject PrivateEndpointProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointProperties_ARM instances for property testing - lazily instantiated by
// PrivateEndpointProperties_ARMGenerator()
var privateEndpointProperties_ARMGenerator gopter.Gen

// PrivateEndpointProperties_ARMGenerator returns a generator of PrivateEndpointProperties_ARM instances for property testing.
// We first initialize privateEndpointProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointProperties_ARMGenerator() gopter.Gen {
	if privateEndpointProperties_ARMGenerator != nil {
		return privateEndpointProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperties_ARM(generators)
	privateEndpointProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointProperties_ARM(generators)
	privateEndpointProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperties_ARM{}), generators)

	return privateEndpointProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointProperties_ARM(gens map[string]gopter.Gen) {
	gens["CustomNetworkInterfaceName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointProperties_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpec_PrivateEndpoint_SubResourceEmbedded_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(PrivateEndpointIPConfiguration_ARMGenerator())
	gens["ManualPrivateLinkServiceConnections"] = gen.SliceOf(PrivateLinkServiceConnection_ARMGenerator())
	gens["PrivateLinkServiceConnections"] = gen.SliceOf(PrivateLinkServiceConnection_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator())
}

func Test_PrivateEndpoint_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpoint_Spec_ARM, PrivateEndpoint_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpoint_Spec_ARM runs a test to see if a specific instance of PrivateEndpoint_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpoint_Spec_ARM(subject PrivateEndpoint_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_Spec_ARM instances for property testing - lazily instantiated by
// PrivateEndpoint_Spec_ARMGenerator()
var privateEndpoint_Spec_ARMGenerator gopter.Gen

// PrivateEndpoint_Spec_ARMGenerator returns a generator of PrivateEndpoint_Spec_ARM instances for property testing.
// We first initialize privateEndpoint_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpoint_Spec_ARMGenerator() gopter.Gen {
	if privateEndpoint_Spec_ARMGenerator != nil {
		return privateEndpoint_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_Spec_ARM(generators)
	privateEndpoint_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpoint_Spec_ARM(generators)
	privateEndpoint_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Spec_ARM{}), generators)

	return privateEndpoint_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpoint_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpoint_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpoint_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpoint_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_ARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateEndpointProperties_ARMGenerator())
}

func Test_PrivateLinkServiceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_ARM, PrivateLinkServiceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_ARM runs a test to see if a specific instance of PrivateLinkServiceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_ARM(subject PrivateLinkServiceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionProperties_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionProperties_ARMGenerator()
var privateLinkServiceConnectionProperties_ARMGenerator gopter.Gen

// PrivateLinkServiceConnectionProperties_ARMGenerator returns a generator of PrivateLinkServiceConnectionProperties_ARM instances for property testing.
// We first initialize privateLinkServiceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceConnectionProperties_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionProperties_ARMGenerator != nil {
		return privateLinkServiceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM(generators)
	privateLinkServiceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM(generators)
	privateLinkServiceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionProperties_ARM{}), generators)

	return privateLinkServiceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["GroupIds"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateLinkServiceId"] = gen.PtrOf(gen.AlphaString())
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_ARMGenerator())
}

func Test_PrivateLinkServiceConnectionState_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionState_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionState_ARM, PrivateLinkServiceConnectionState_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionState_ARM runs a test to see if a specific instance of PrivateLinkServiceConnectionState_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionState_ARM(subject PrivateLinkServiceConnectionState_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionState_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionState_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionState_ARMGenerator()
var privateLinkServiceConnectionState_ARMGenerator gopter.Gen

// PrivateLinkServiceConnectionState_ARMGenerator returns a generator of PrivateLinkServiceConnectionState_ARM instances for property testing.
func PrivateLinkServiceConnectionState_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionState_ARMGenerator != nil {
		return privateLinkServiceConnectionState_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_ARM(generators)
	privateLinkServiceConnectionState_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionState_ARM{}), generators)

	return privateLinkServiceConnectionState_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceConnection_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnection_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnection_ARM, PrivateLinkServiceConnection_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnection_ARM runs a test to see if a specific instance of PrivateLinkServiceConnection_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnection_ARM(subject PrivateLinkServiceConnection_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnection_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnection_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnection_ARMGenerator()
var privateLinkServiceConnection_ARMGenerator gopter.Gen

// PrivateLinkServiceConnection_ARMGenerator returns a generator of PrivateLinkServiceConnection_ARM instances for property testing.
// We first initialize privateLinkServiceConnection_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceConnection_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnection_ARMGenerator != nil {
		return privateLinkServiceConnection_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_ARM(generators)
	privateLinkServiceConnection_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnection_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_ARM(generators)
	privateLinkServiceConnection_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnection_ARM{}), generators)

	return privateLinkServiceConnection_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceConnectionProperties_ARMGenerator())
}

func Test_Subnet_PrivateEndpoint_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_PrivateEndpoint_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_PrivateEndpoint_SubResourceEmbedded_ARM, Subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_PrivateEndpoint_SubResourceEmbedded_ARM runs a test to see if a specific instance of Subnet_PrivateEndpoint_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_PrivateEndpoint_SubResourceEmbedded_ARM(subject Subnet_PrivateEndpoint_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_PrivateEndpoint_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_PrivateEndpoint_SubResourceEmbedded_ARM instances for property testing - lazily instantiated by
// Subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator()
var subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator gopter.Gen

// Subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator returns a generator of Subnet_PrivateEndpoint_SubResourceEmbedded_ARM instances for property testing.
func Subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator != nil {
		return subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_PrivateEndpoint_SubResourceEmbedded_ARM(generators)
	subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(Subnet_PrivateEndpoint_SubResourceEmbedded_ARM{}), generators)

	return subnet_PrivateEndpoint_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_PrivateEndpoint_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_PrivateEndpoint_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
