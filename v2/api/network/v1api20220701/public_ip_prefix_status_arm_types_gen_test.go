// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_IpTag_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpTag_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpTag_STATUS_ARM, IpTag_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpTag_STATUS_ARM runs a test to see if a specific instance of IpTag_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpTag_STATUS_ARM(subject IpTag_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpTag_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpTag_STATUS_ARM instances for property testing - lazily instantiated by IpTag_STATUS_ARMGenerator()
var ipTag_STATUS_ARMGenerator gopter.Gen

// IpTag_STATUS_ARMGenerator returns a generator of IpTag_STATUS_ARM instances for property testing.
func IpTag_STATUS_ARMGenerator() gopter.Gen {
	if ipTag_STATUS_ARMGenerator != nil {
		return ipTag_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpTag_STATUS_ARM(generators)
	ipTag_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpTag_STATUS_ARM{}), generators)

	return ipTag_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpTag_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpTag_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM, NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM runs a test to see if a specific instance of NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM(subject NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM instances for property testing - lazily
// instantiated by NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator()
var natGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator gopter.Gen

// NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator returns a generator of NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM instances for property testing.
func NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if natGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator != nil {
		return natGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM(generators)
	natGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM{}), generators)

	return natGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPPrefixPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPPrefixPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPPrefixPropertiesFormat_STATUS_ARM, PublicIPPrefixPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPPrefixPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of PublicIPPrefixPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPPrefixPropertiesFormat_STATUS_ARM(subject PublicIPPrefixPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPPrefixPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPPrefixPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// PublicIPPrefixPropertiesFormat_STATUS_ARMGenerator()
var publicIPPrefixPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// PublicIPPrefixPropertiesFormat_STATUS_ARMGenerator returns a generator of PublicIPPrefixPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize publicIPPrefixPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPPrefixPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if publicIPPrefixPropertiesFormat_STATUS_ARMGenerator != nil {
		return publicIPPrefixPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM(generators)
	publicIPPrefixPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PublicIPPrefixPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM(generators)
	publicIPPrefixPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PublicIPPrefixPropertiesFormat_STATUS_ARM{}), generators)

	return publicIPPrefixPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IpPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["PrefixLength"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		PublicIpPrefixProvisioningState_STATUS_ARM_Deleting,
		PublicIpPrefixProvisioningState_STATUS_ARM_Failed,
		PublicIpPrefixProvisioningState_STATUS_ARM_Succeeded,
		PublicIpPrefixProvisioningState_STATUS_ARM_Updating))
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_STATUS_ARM_IPv4, IPVersion_STATUS_ARM_IPv6))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPPrefixPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomIPPrefix"] = gen.PtrOf(PublicIpPrefixSubResource_STATUS_ARMGenerator())
	gens["IpTags"] = gen.SliceOf(IpTag_STATUS_ARMGenerator())
	gens["LoadBalancerFrontendIpConfiguration"] = gen.PtrOf(PublicIpPrefixSubResource_STATUS_ARMGenerator())
	gens["NatGateway"] = gen.PtrOf(NatGateway_STATUS_PublicIPPrefix_SubResourceEmbedded_ARMGenerator())
	gens["PublicIPAddresses"] = gen.SliceOf(ReferencedPublicIpAddress_STATUS_ARMGenerator())
}

func Test_PublicIPPrefixSku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPPrefixSku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPPrefixSku_STATUS_ARM, PublicIPPrefixSku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPPrefixSku_STATUS_ARM runs a test to see if a specific instance of PublicIPPrefixSku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPPrefixSku_STATUS_ARM(subject PublicIPPrefixSku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPPrefixSku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPPrefixSku_STATUS_ARM instances for property testing - lazily instantiated by
// PublicIPPrefixSku_STATUS_ARMGenerator()
var publicIPPrefixSku_STATUS_ARMGenerator gopter.Gen

// PublicIPPrefixSku_STATUS_ARMGenerator returns a generator of PublicIPPrefixSku_STATUS_ARM instances for property testing.
func PublicIPPrefixSku_STATUS_ARMGenerator() gopter.Gen {
	if publicIPPrefixSku_STATUS_ARMGenerator != nil {
		return publicIPPrefixSku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPPrefixSku_STATUS_ARM(generators)
	publicIPPrefixSku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PublicIPPrefixSku_STATUS_ARM{}), generators)

	return publicIPPrefixSku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPPrefixSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPPrefixSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(PublicIPPrefixSku_Name_STATUS_ARM_Standard))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(PublicIPPrefixSku_Tier_STATUS_ARM_Global, PublicIPPrefixSku_Tier_STATUS_ARM_Regional))
}

func Test_PublicIPPrefix_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPPrefix_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPPrefix_STATUS_ARM, PublicIPPrefix_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPPrefix_STATUS_ARM runs a test to see if a specific instance of PublicIPPrefix_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPPrefix_STATUS_ARM(subject PublicIPPrefix_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPPrefix_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPPrefix_STATUS_ARM instances for property testing - lazily instantiated by
// PublicIPPrefix_STATUS_ARMGenerator()
var publicIPPrefix_STATUS_ARMGenerator gopter.Gen

// PublicIPPrefix_STATUS_ARMGenerator returns a generator of PublicIPPrefix_STATUS_ARM instances for property testing.
// We first initialize publicIPPrefix_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPPrefix_STATUS_ARMGenerator() gopter.Gen {
	if publicIPPrefix_STATUS_ARMGenerator != nil {
		return publicIPPrefix_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPPrefix_STATUS_ARM(generators)
	publicIPPrefix_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PublicIPPrefix_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPPrefix_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPPrefix_STATUS_ARM(generators)
	publicIPPrefix_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PublicIPPrefix_STATUS_ARM{}), generators)

	return publicIPPrefix_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPPrefix_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPPrefix_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPPrefix_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPPrefix_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(PublicIPPrefixPropertiesFormat_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPPrefixSku_STATUS_ARMGenerator())
}

func Test_PublicIpPrefixSubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIpPrefixSubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIpPrefixSubResource_STATUS_ARM, PublicIpPrefixSubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIpPrefixSubResource_STATUS_ARM runs a test to see if a specific instance of PublicIpPrefixSubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIpPrefixSubResource_STATUS_ARM(subject PublicIpPrefixSubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIpPrefixSubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIpPrefixSubResource_STATUS_ARM instances for property testing - lazily instantiated by
// PublicIpPrefixSubResource_STATUS_ARMGenerator()
var publicIpPrefixSubResource_STATUS_ARMGenerator gopter.Gen

// PublicIpPrefixSubResource_STATUS_ARMGenerator returns a generator of PublicIpPrefixSubResource_STATUS_ARM instances for property testing.
func PublicIpPrefixSubResource_STATUS_ARMGenerator() gopter.Gen {
	if publicIpPrefixSubResource_STATUS_ARMGenerator != nil {
		return publicIpPrefixSubResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIpPrefixSubResource_STATUS_ARM(generators)
	publicIpPrefixSubResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PublicIpPrefixSubResource_STATUS_ARM{}), generators)

	return publicIpPrefixSubResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIpPrefixSubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIpPrefixSubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ReferencedPublicIpAddress_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ReferencedPublicIpAddress_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForReferencedPublicIpAddress_STATUS_ARM, ReferencedPublicIpAddress_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForReferencedPublicIpAddress_STATUS_ARM runs a test to see if a specific instance of ReferencedPublicIpAddress_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForReferencedPublicIpAddress_STATUS_ARM(subject ReferencedPublicIpAddress_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ReferencedPublicIpAddress_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ReferencedPublicIpAddress_STATUS_ARM instances for property testing - lazily instantiated by
// ReferencedPublicIpAddress_STATUS_ARMGenerator()
var referencedPublicIpAddress_STATUS_ARMGenerator gopter.Gen

// ReferencedPublicIpAddress_STATUS_ARMGenerator returns a generator of ReferencedPublicIpAddress_STATUS_ARM instances for property testing.
func ReferencedPublicIpAddress_STATUS_ARMGenerator() gopter.Gen {
	if referencedPublicIpAddress_STATUS_ARMGenerator != nil {
		return referencedPublicIpAddress_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReferencedPublicIpAddress_STATUS_ARM(generators)
	referencedPublicIpAddress_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ReferencedPublicIpAddress_STATUS_ARM{}), generators)

	return referencedPublicIpAddress_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForReferencedPublicIpAddress_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForReferencedPublicIpAddress_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
