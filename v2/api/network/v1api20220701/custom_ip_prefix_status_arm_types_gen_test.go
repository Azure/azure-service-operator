// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CustomIpPrefix_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefix_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefix_STATUS_ARM, CustomIpPrefix_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefix_STATUS_ARM runs a test to see if a specific instance of CustomIpPrefix_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefix_STATUS_ARM(subject CustomIpPrefix_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefix_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefix_STATUS_ARM instances for property testing - lazily instantiated by
// CustomIpPrefix_STATUS_ARMGenerator()
var customIpPrefix_STATUS_ARMGenerator gopter.Gen

// CustomIpPrefix_STATUS_ARMGenerator returns a generator of CustomIpPrefix_STATUS_ARM instances for property testing.
// We first initialize customIpPrefix_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomIpPrefix_STATUS_ARMGenerator() gopter.Gen {
	if customIpPrefix_STATUS_ARMGenerator != nil {
		return customIpPrefix_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS_ARM(generators)
	customIpPrefix_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForCustomIpPrefix_STATUS_ARM(generators)
	customIpPrefix_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefix_STATUS_ARM{}), generators)

	return customIpPrefix_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomIpPrefix_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomIpPrefix_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomIpPrefix_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(CustomIpPrefixPropertiesFormat_STATUS_ARMGenerator())
}

func Test_CustomIpPrefixPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefixPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefixPropertiesFormat_STATUS_ARM, CustomIpPrefixPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefixPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of CustomIpPrefixPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefixPropertiesFormat_STATUS_ARM(subject CustomIpPrefixPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefixPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefixPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// CustomIpPrefixPropertiesFormat_STATUS_ARMGenerator()
var customIpPrefixPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// CustomIpPrefixPropertiesFormat_STATUS_ARMGenerator returns a generator of CustomIpPrefixPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize customIpPrefixPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomIpPrefixPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if customIpPrefixPropertiesFormat_STATUS_ARMGenerator != nil {
		return customIpPrefixPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM(generators)
	customIpPrefixPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefixPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM(generators)
	customIpPrefixPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefixPropertiesFormat_STATUS_ARM{}), generators)

	return customIpPrefixPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.AlphaString())
	gens["AuthorizationMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Cidr"] = gen.PtrOf(gen.AlphaString())
	gens["CommissionedState"] = gen.PtrOf(gen.OneConstOf(
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Commissioned,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_CommissionedNoInternetAdvertise,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Commissioning,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Decommissioning,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Deprovisioned,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Deprovisioning,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Provisioned,
		CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Provisioning))
	gens["ExpressRouteAdvertise"] = gen.PtrOf(gen.Bool())
	gens["FailedReason"] = gen.PtrOf(gen.AlphaString())
	gens["Geo"] = gen.PtrOf(gen.OneConstOf(
		CustomIpPrefixPropertiesFormat_Geo_STATUS_AFRI,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_APAC,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_AQ,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_EURO,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_GLOBAL,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_LATAM,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_ME,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_NAM,
		CustomIpPrefixPropertiesFormat_Geo_STATUS_OCEANIA))
	gens["NoInternetAdvertise"] = gen.PtrOf(gen.Bool())
	gens["PrefixType"] = gen.PtrOf(gen.OneConstOf(CustomIpPrefixPropertiesFormat_PrefixType_STATUS_Child, CustomIpPrefixPropertiesFormat_PrefixType_STATUS_Parent, CustomIpPrefixPropertiesFormat_PrefixType_STATUS_Singular))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		CustomIpPrefixProvisioningState_STATUS_Deleting,
		CustomIpPrefixProvisioningState_STATUS_Failed,
		CustomIpPrefixProvisioningState_STATUS_Succeeded,
		CustomIpPrefixProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["SignedMessage"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomIpPrefixPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ChildCustomIpPrefixes"] = gen.SliceOf(CustomIpPrefixSubResource_STATUS_ARMGenerator())
	gens["CustomIpPrefixParent"] = gen.PtrOf(CustomIpPrefixSubResource_STATUS_ARMGenerator())
	gens["PublicIpPrefixes"] = gen.SliceOf(CustomIpPrefixSubResource_STATUS_ARMGenerator())
}

func Test_ExtendedLocation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUS_ARM, ExtendedLocation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUS_ARM runs a test to see if a specific instance of ExtendedLocation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUS_ARM(subject ExtendedLocation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUS_ARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUS_ARMGenerator()
var extendedLocation_STATUS_ARMGenerator gopter.Gen

// ExtendedLocation_STATUS_ARMGenerator returns a generator of ExtendedLocation_STATUS_ARM instances for property testing.
func ExtendedLocation_STATUS_ARMGenerator() gopter.Gen {
	if extendedLocation_STATUS_ARMGenerator != nil {
		return extendedLocation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM(generators)
	extendedLocation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUS_ARM{}), generators)

	return extendedLocation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_STATUS_EdgeZone))
}

func Test_CustomIpPrefixSubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomIpPrefixSubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomIpPrefixSubResource_STATUS_ARM, CustomIpPrefixSubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomIpPrefixSubResource_STATUS_ARM runs a test to see if a specific instance of CustomIpPrefixSubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomIpPrefixSubResource_STATUS_ARM(subject CustomIpPrefixSubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomIpPrefixSubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomIpPrefixSubResource_STATUS_ARM instances for property testing - lazily instantiated by
// CustomIpPrefixSubResource_STATUS_ARMGenerator()
var customIpPrefixSubResource_STATUS_ARMGenerator gopter.Gen

// CustomIpPrefixSubResource_STATUS_ARMGenerator returns a generator of CustomIpPrefixSubResource_STATUS_ARM instances for property testing.
func CustomIpPrefixSubResource_STATUS_ARMGenerator() gopter.Gen {
	if customIpPrefixSubResource_STATUS_ARMGenerator != nil {
		return customIpPrefixSubResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomIpPrefixSubResource_STATUS_ARM(generators)
	customIpPrefixSubResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomIpPrefixSubResource_STATUS_ARM{}), generators)

	return customIpPrefixSubResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomIpPrefixSubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomIpPrefixSubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
