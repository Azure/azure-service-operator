// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsForwardingRuleset_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRuleset_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRuleset_Spec_ARM, DnsForwardingRuleset_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRuleset_Spec_ARM runs a test to see if a specific instance of DnsForwardingRuleset_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRuleset_Spec_ARM(subject DnsForwardingRuleset_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRuleset_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRuleset_Spec_ARM instances for property testing - lazily instantiated by
// DnsForwardingRuleset_Spec_ARMGenerator()
var dnsForwardingRuleset_Spec_ARMGenerator gopter.Gen

// DnsForwardingRuleset_Spec_ARMGenerator returns a generator of DnsForwardingRuleset_Spec_ARM instances for property testing.
// We first initialize dnsForwardingRuleset_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsForwardingRuleset_Spec_ARMGenerator() gopter.Gen {
	if dnsForwardingRuleset_Spec_ARMGenerator != nil {
		return dnsForwardingRuleset_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM(generators)
	dnsForwardingRuleset_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleset_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM(generators)
	dnsForwardingRuleset_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleset_Spec_ARM{}), generators)

	return dnsForwardingRuleset_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsForwardingRuleset_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DnsForwardingRulesetProperties_ARMGenerator())
}

func Test_DnsForwardingRulesetProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRulesetProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRulesetProperties_ARM, DnsForwardingRulesetProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRulesetProperties_ARM runs a test to see if a specific instance of DnsForwardingRulesetProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRulesetProperties_ARM(subject DnsForwardingRulesetProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRulesetProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRulesetProperties_ARM instances for property testing - lazily instantiated by
// DnsForwardingRulesetProperties_ARMGenerator()
var dnsForwardingRulesetProperties_ARMGenerator gopter.Gen

// DnsForwardingRulesetProperties_ARMGenerator returns a generator of DnsForwardingRulesetProperties_ARM instances for property testing.
func DnsForwardingRulesetProperties_ARMGenerator() gopter.Gen {
	if dnsForwardingRulesetProperties_ARMGenerator != nil {
		return dnsForwardingRulesetProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDnsForwardingRulesetProperties_ARM(generators)
	dnsForwardingRulesetProperties_ARMGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRulesetProperties_ARM{}), generators)

	return dnsForwardingRulesetProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForDnsForwardingRulesetProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsForwardingRulesetProperties_ARM(gens map[string]gopter.Gen) {
	gens["DnsResolverOutboundEndpoints"] = gen.SliceOf(DnsresolverSubResource_ARMGenerator())
}

func Test_DnsresolverSubResource_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsresolverSubResource_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsresolverSubResource_ARM, DnsresolverSubResource_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsresolverSubResource_ARM runs a test to see if a specific instance of DnsresolverSubResource_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsresolverSubResource_ARM(subject DnsresolverSubResource_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsresolverSubResource_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsresolverSubResource_ARM instances for property testing - lazily instantiated by
// DnsresolverSubResource_ARMGenerator()
var dnsresolverSubResource_ARMGenerator gopter.Gen

// DnsresolverSubResource_ARMGenerator returns a generator of DnsresolverSubResource_ARM instances for property testing.
func DnsresolverSubResource_ARMGenerator() gopter.Gen {
	if dnsresolverSubResource_ARMGenerator != nil {
		return dnsresolverSubResource_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsresolverSubResource_ARM(generators)
	dnsresolverSubResource_ARMGenerator = gen.Struct(reflect.TypeOf(DnsresolverSubResource_ARM{}), generators)

	return dnsresolverSubResource_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsresolverSubResource_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsresolverSubResource_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
