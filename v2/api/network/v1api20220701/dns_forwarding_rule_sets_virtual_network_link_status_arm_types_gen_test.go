// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM, DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM runs a test to see if a specific instance of DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM(subject DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM instances for property testing - lazily instantiated
// by DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator()
var dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator gopter.Gen

// DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator returns a generator of DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM instances for property testing.
// We first initialize dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator() gopter.Gen {
	if dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator != nil {
		return dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM(generators)
	dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM(generators)
	dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM{}), generators)

	return dnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsForwardingRuleSetsVirtualNetworkLink_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkLinkProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_DnsresolverSubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsresolverSubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsresolverSubResource_STATUS_ARM, DnsresolverSubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsresolverSubResource_STATUS_ARM runs a test to see if a specific instance of DnsresolverSubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsresolverSubResource_STATUS_ARM(subject DnsresolverSubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsresolverSubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsresolverSubResource_STATUS_ARM instances for property testing - lazily instantiated by
// DnsresolverSubResource_STATUS_ARMGenerator()
var dnsresolverSubResource_STATUS_ARMGenerator gopter.Gen

// DnsresolverSubResource_STATUS_ARMGenerator returns a generator of DnsresolverSubResource_STATUS_ARM instances for property testing.
func DnsresolverSubResource_STATUS_ARMGenerator() gopter.Gen {
	if dnsresolverSubResource_STATUS_ARMGenerator != nil {
		return dnsresolverSubResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsresolverSubResource_STATUS_ARM(generators)
	dnsresolverSubResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DnsresolverSubResource_STATUS_ARM{}), generators)

	return dnsresolverSubResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsresolverSubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsresolverSubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkLinkProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkLinkProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkLinkProperties_STATUS_ARM, VirtualNetworkLinkProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkLinkProperties_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkLinkProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkLinkProperties_STATUS_ARM(subject VirtualNetworkLinkProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkLinkProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkLinkProperties_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkLinkProperties_STATUS_ARMGenerator()
var virtualNetworkLinkProperties_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkLinkProperties_STATUS_ARMGenerator returns a generator of VirtualNetworkLinkProperties_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkLinkProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkLinkProperties_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkLinkProperties_STATUS_ARMGenerator != nil {
		return virtualNetworkLinkProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM(generators)
	virtualNetworkLinkProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkLinkProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM(generators)
	virtualNetworkLinkProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkLinkProperties_STATUS_ARM{}), generators)

	return virtualNetworkLinkProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DnsresolverProvisioningState_STATUS_ARM_Canceled,
		DnsresolverProvisioningState_STATUS_ARM_Creating,
		DnsresolverProvisioningState_STATUS_ARM_Deleting,
		DnsresolverProvisioningState_STATUS_ARM_Failed,
		DnsresolverProvisioningState_STATUS_ARM_Succeeded,
		DnsresolverProvisioningState_STATUS_ARM_Updating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkLinkProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["VirtualNetwork"] = gen.PtrOf(DnsresolverSubResource_STATUS_ARMGenerator())
}
