// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM, ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM(subject ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator()
var applicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM instances for property testing.
func ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator != nil {
		return applicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM(generators)
	applicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM{}), generators)

	return applicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Data"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayAuthenticationCertificate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayAuthenticationCertificate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayAuthenticationCertificate_ARM, ApplicationGatewayAuthenticationCertificate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayAuthenticationCertificate_ARM runs a test to see if a specific instance of ApplicationGatewayAuthenticationCertificate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayAuthenticationCertificate_ARM(subject ApplicationGatewayAuthenticationCertificate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayAuthenticationCertificate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayAuthenticationCertificate_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayAuthenticationCertificate_ARMGenerator()
var applicationGatewayAuthenticationCertificate_ARMGenerator gopter.Gen

// ApplicationGatewayAuthenticationCertificate_ARMGenerator returns a generator of ApplicationGatewayAuthenticationCertificate_ARM instances for property testing.
// We first initialize applicationGatewayAuthenticationCertificate_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayAuthenticationCertificate_ARMGenerator() gopter.Gen {
	if applicationGatewayAuthenticationCertificate_ARMGenerator != nil {
		return applicationGatewayAuthenticationCertificate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM(generators)
	applicationGatewayAuthenticationCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayAuthenticationCertificate_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM(generators)
	applicationGatewayAuthenticationCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayAuthenticationCertificate_ARM{}), generators)

	return applicationGatewayAuthenticationCertificate_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayAutoscaleConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayAutoscaleConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayAutoscaleConfiguration_ARM, ApplicationGatewayAutoscaleConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayAutoscaleConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayAutoscaleConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayAutoscaleConfiguration_ARM(subject ApplicationGatewayAutoscaleConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayAutoscaleConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayAutoscaleConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayAutoscaleConfiguration_ARMGenerator()
var applicationGatewayAutoscaleConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayAutoscaleConfiguration_ARMGenerator returns a generator of ApplicationGatewayAutoscaleConfiguration_ARM instances for property testing.
func ApplicationGatewayAutoscaleConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayAutoscaleConfiguration_ARMGenerator != nil {
		return applicationGatewayAutoscaleConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayAutoscaleConfiguration_ARM(generators)
	applicationGatewayAutoscaleConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayAutoscaleConfiguration_ARM{}), generators)

	return applicationGatewayAutoscaleConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayAutoscaleConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayAutoscaleConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["MaxCapacity"] = gen.PtrOf(gen.Int())
	gens["MinCapacity"] = gen.PtrOf(gen.Int())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_ARM, ApplicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_ARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM instances for property testing.
func ApplicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_ARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddress_ARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPool_ARM, ApplicationGatewayBackendAddressPool_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPool_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPool_ARM(subject ApplicationGatewayBackendAddressPool_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPool_ARMGenerator()
var applicationGatewayBackendAddressPool_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPool_ARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_ARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPool_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPool_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPool_ARMGenerator != nil {
		return applicationGatewayBackendAddressPool_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM(generators)
	applicationGatewayBackendAddressPool_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM(generators)
	applicationGatewayBackendAddressPool_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_ARM{}), generators)

	return applicationGatewayBackendAddressPool_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayBackendAddress_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddress_ARM, ApplicationGatewayBackendAddress_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddress_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddress_ARM(subject ApplicationGatewayBackendAddress_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddress_ARMGenerator()
var applicationGatewayBackendAddress_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddress_ARMGenerator returns a generator of ApplicationGatewayBackendAddress_ARM instances for property testing.
func ApplicationGatewayBackendAddress_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddress_ARMGenerator != nil {
		return applicationGatewayBackendAddress_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_ARM(generators)
	applicationGatewayBackendAddress_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_ARM{}), generators)

	return applicationGatewayBackendAddress_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_ARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM, ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM(subject ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator()
var applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM(generators)
	applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM(generators)
	applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM{}), generators)

	return applicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["AffinityCookieName"] = gen.PtrOf(gen.AlphaString())
	gens["CookieBasedAffinity"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Disabled, ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Enabled))
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["PickHostNameFromBackendAddress"] = gen.PtrOf(gen.Bool())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["ProbeEnabled"] = gen.PtrOf(gen.Bool())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProtocol_ARM_Http,
		ApplicationGatewayProtocol_ARM_Https,
		ApplicationGatewayProtocol_ARM_Tcp,
		ApplicationGatewayProtocol_ARM_Tls))
	gens["RequestTimeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationCertificates"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["ConnectionDraining"] = gen.PtrOf(ApplicationGatewayConnectionDraining_ARMGenerator())
	gens["Probe"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["TrustedRootCertificates"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayBackendHttpSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendHttpSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendHttpSettings_ARM, ApplicationGatewayBackendHttpSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendHttpSettings_ARM runs a test to see if a specific instance of ApplicationGatewayBackendHttpSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendHttpSettings_ARM(subject ApplicationGatewayBackendHttpSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendHttpSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendHttpSettings_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendHttpSettings_ARMGenerator()
var applicationGatewayBackendHttpSettings_ARMGenerator gopter.Gen

// ApplicationGatewayBackendHttpSettings_ARMGenerator returns a generator of ApplicationGatewayBackendHttpSettings_ARM instances for property testing.
// We first initialize applicationGatewayBackendHttpSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendHttpSettings_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendHttpSettings_ARMGenerator != nil {
		return applicationGatewayBackendHttpSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM(generators)
	applicationGatewayBackendHttpSettings_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendHttpSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM(generators)
	applicationGatewayBackendHttpSettings_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendHttpSettings_ARM{}), generators)

	return applicationGatewayBackendHttpSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendHttpSettings_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayBackendSettingsPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendSettingsPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendSettingsPropertiesFormat_ARM, ApplicationGatewayBackendSettingsPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendSettingsPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayBackendSettingsPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendSettingsPropertiesFormat_ARM(subject ApplicationGatewayBackendSettingsPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendSettingsPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendSettingsPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayBackendSettingsPropertiesFormat_ARMGenerator()
var applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayBackendSettingsPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayBackendSettingsPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendSettingsPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM(generators)
	applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendSettingsPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM(generators)
	applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendSettingsPropertiesFormat_ARM{}), generators)

	return applicationGatewayBackendSettingsPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["PickHostNameFromBackendAddress"] = gen.PtrOf(gen.Bool())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProtocol_ARM_Http,
		ApplicationGatewayProtocol_ARM_Https,
		ApplicationGatewayProtocol_ARM_Tcp,
		ApplicationGatewayProtocol_ARM_Tls))
	gens["Timeout"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendSettingsPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Probe"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["TrustedRootCertificates"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayBackendSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendSettings_ARM, ApplicationGatewayBackendSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendSettings_ARM runs a test to see if a specific instance of ApplicationGatewayBackendSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendSettings_ARM(subject ApplicationGatewayBackendSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendSettings_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendSettings_ARMGenerator()
var applicationGatewayBackendSettings_ARMGenerator gopter.Gen

// ApplicationGatewayBackendSettings_ARMGenerator returns a generator of ApplicationGatewayBackendSettings_ARM instances for property testing.
// We first initialize applicationGatewayBackendSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendSettings_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendSettings_ARMGenerator != nil {
		return applicationGatewayBackendSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_ARM(generators)
	applicationGatewayBackendSettings_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendSettings_ARM(generators)
	applicationGatewayBackendSettings_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendSettings_ARM{}), generators)

	return applicationGatewayBackendSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendSettings_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendSettingsPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayClientAuthConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayClientAuthConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayClientAuthConfiguration_ARM, ApplicationGatewayClientAuthConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayClientAuthConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayClientAuthConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayClientAuthConfiguration_ARM(subject ApplicationGatewayClientAuthConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayClientAuthConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayClientAuthConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayClientAuthConfiguration_ARMGenerator()
var applicationGatewayClientAuthConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayClientAuthConfiguration_ARMGenerator returns a generator of ApplicationGatewayClientAuthConfiguration_ARM instances for property testing.
func ApplicationGatewayClientAuthConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayClientAuthConfiguration_ARMGenerator != nil {
		return applicationGatewayClientAuthConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayClientAuthConfiguration_ARM(generators)
	applicationGatewayClientAuthConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayClientAuthConfiguration_ARM{}), generators)

	return applicationGatewayClientAuthConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayClientAuthConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayClientAuthConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["VerifyClientCertIssuerDN"] = gen.PtrOf(gen.Bool())
	gens["VerifyClientRevocation"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_None, ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_OCSP))
}

func Test_ApplicationGatewayConnectionDraining_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayConnectionDraining_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayConnectionDraining_ARM, ApplicationGatewayConnectionDraining_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayConnectionDraining_ARM runs a test to see if a specific instance of ApplicationGatewayConnectionDraining_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayConnectionDraining_ARM(subject ApplicationGatewayConnectionDraining_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayConnectionDraining_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayConnectionDraining_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayConnectionDraining_ARMGenerator()
var applicationGatewayConnectionDraining_ARMGenerator gopter.Gen

// ApplicationGatewayConnectionDraining_ARMGenerator returns a generator of ApplicationGatewayConnectionDraining_ARM instances for property testing.
func ApplicationGatewayConnectionDraining_ARMGenerator() gopter.Gen {
	if applicationGatewayConnectionDraining_ARMGenerator != nil {
		return applicationGatewayConnectionDraining_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayConnectionDraining_ARM(generators)
	applicationGatewayConnectionDraining_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayConnectionDraining_ARM{}), generators)

	return applicationGatewayConnectionDraining_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayConnectionDraining_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayConnectionDraining_ARM(gens map[string]gopter.Gen) {
	gens["DrainTimeoutInSec"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ApplicationGatewayCustomError_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayCustomError_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayCustomError_ARM, ApplicationGatewayCustomError_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayCustomError_ARM runs a test to see if a specific instance of ApplicationGatewayCustomError_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayCustomError_ARM(subject ApplicationGatewayCustomError_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayCustomError_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayCustomError_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayCustomError_ARMGenerator()
var applicationGatewayCustomError_ARMGenerator gopter.Gen

// ApplicationGatewayCustomError_ARMGenerator returns a generator of ApplicationGatewayCustomError_ARM instances for property testing.
func ApplicationGatewayCustomError_ARMGenerator() gopter.Gen {
	if applicationGatewayCustomError_ARMGenerator != nil {
		return applicationGatewayCustomError_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayCustomError_ARM(generators)
	applicationGatewayCustomError_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayCustomError_ARM{}), generators)

	return applicationGatewayCustomError_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayCustomError_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayCustomError_ARM(gens map[string]gopter.Gen) {
	gens["CustomErrorPageUrl"] = gen.PtrOf(gen.AlphaString())
	gens["StatusCode"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayCustomError_StatusCode_ARM_HttpStatus403, ApplicationGatewayCustomError_StatusCode_ARM_HttpStatus502))
}

func Test_ApplicationGatewayFirewallDisabledRuleGroup_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFirewallDisabledRuleGroup_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFirewallDisabledRuleGroup_ARM, ApplicationGatewayFirewallDisabledRuleGroup_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFirewallDisabledRuleGroup_ARM runs a test to see if a specific instance of ApplicationGatewayFirewallDisabledRuleGroup_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFirewallDisabledRuleGroup_ARM(subject ApplicationGatewayFirewallDisabledRuleGroup_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFirewallDisabledRuleGroup_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFirewallDisabledRuleGroup_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayFirewallDisabledRuleGroup_ARMGenerator()
var applicationGatewayFirewallDisabledRuleGroup_ARMGenerator gopter.Gen

// ApplicationGatewayFirewallDisabledRuleGroup_ARMGenerator returns a generator of ApplicationGatewayFirewallDisabledRuleGroup_ARM instances for property testing.
func ApplicationGatewayFirewallDisabledRuleGroup_ARMGenerator() gopter.Gen {
	if applicationGatewayFirewallDisabledRuleGroup_ARMGenerator != nil {
		return applicationGatewayFirewallDisabledRuleGroup_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFirewallDisabledRuleGroup_ARM(generators)
	applicationGatewayFirewallDisabledRuleGroup_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFirewallDisabledRuleGroup_ARM{}), generators)

	return applicationGatewayFirewallDisabledRuleGroup_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFirewallDisabledRuleGroup_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFirewallDisabledRuleGroup_ARM(gens map[string]gopter.Gen) {
	gens["RuleGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["Rules"] = gen.SliceOf(gen.Int())
}

func Test_ApplicationGatewayFirewallExclusion_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFirewallExclusion_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFirewallExclusion_ARM, ApplicationGatewayFirewallExclusion_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFirewallExclusion_ARM runs a test to see if a specific instance of ApplicationGatewayFirewallExclusion_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFirewallExclusion_ARM(subject ApplicationGatewayFirewallExclusion_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFirewallExclusion_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFirewallExclusion_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayFirewallExclusion_ARMGenerator()
var applicationGatewayFirewallExclusion_ARMGenerator gopter.Gen

// ApplicationGatewayFirewallExclusion_ARMGenerator returns a generator of ApplicationGatewayFirewallExclusion_ARM instances for property testing.
func ApplicationGatewayFirewallExclusion_ARMGenerator() gopter.Gen {
	if applicationGatewayFirewallExclusion_ARMGenerator != nil {
		return applicationGatewayFirewallExclusion_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFirewallExclusion_ARM(generators)
	applicationGatewayFirewallExclusion_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFirewallExclusion_ARM{}), generators)

	return applicationGatewayFirewallExclusion_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFirewallExclusion_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFirewallExclusion_ARM(gens map[string]gopter.Gen) {
	gens["MatchVariable"] = gen.PtrOf(gen.AlphaString())
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["SelectorMatchOperator"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM, ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM(subject ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator()
var applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM(generators)
	applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM(generators)
	applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM{}), generators)

	return applicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_ARM_Dynamic, IPAllocationMethod_ARM_Static))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PrivateLinkConfiguration"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayFrontendIPConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFrontendIPConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFrontendIPConfiguration_ARM, ApplicationGatewayFrontendIPConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFrontendIPConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayFrontendIPConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFrontendIPConfiguration_ARM(subject ApplicationGatewayFrontendIPConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFrontendIPConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFrontendIPConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayFrontendIPConfiguration_ARMGenerator()
var applicationGatewayFrontendIPConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayFrontendIPConfiguration_ARMGenerator returns a generator of ApplicationGatewayFrontendIPConfiguration_ARM instances for property testing.
// We first initialize applicationGatewayFrontendIPConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayFrontendIPConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayFrontendIPConfiguration_ARMGenerator != nil {
		return applicationGatewayFrontendIPConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM(generators)
	applicationGatewayFrontendIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendIPConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM(generators)
	applicationGatewayFrontendIPConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendIPConfiguration_ARM{}), generators)

	return applicationGatewayFrontendIPConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayFrontendPortPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFrontendPortPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFrontendPortPropertiesFormat_ARM, ApplicationGatewayFrontendPortPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFrontendPortPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayFrontendPortPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFrontendPortPropertiesFormat_ARM(subject ApplicationGatewayFrontendPortPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFrontendPortPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFrontendPortPropertiesFormat_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayFrontendPortPropertiesFormat_ARMGenerator()
var applicationGatewayFrontendPortPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayFrontendPortPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayFrontendPortPropertiesFormat_ARM instances for property testing.
func ApplicationGatewayFrontendPortPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayFrontendPortPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayFrontendPortPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPortPropertiesFormat_ARM(generators)
	applicationGatewayFrontendPortPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendPortPropertiesFormat_ARM{}), generators)

	return applicationGatewayFrontendPortPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPortPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPortPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
}

func Test_ApplicationGatewayFrontendPort_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFrontendPort_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFrontendPort_ARM, ApplicationGatewayFrontendPort_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFrontendPort_ARM runs a test to see if a specific instance of ApplicationGatewayFrontendPort_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFrontendPort_ARM(subject ApplicationGatewayFrontendPort_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFrontendPort_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFrontendPort_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayFrontendPort_ARMGenerator()
var applicationGatewayFrontendPort_ARMGenerator gopter.Gen

// ApplicationGatewayFrontendPort_ARMGenerator returns a generator of ApplicationGatewayFrontendPort_ARM instances for property testing.
// We first initialize applicationGatewayFrontendPort_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayFrontendPort_ARMGenerator() gopter.Gen {
	if applicationGatewayFrontendPort_ARMGenerator != nil {
		return applicationGatewayFrontendPort_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_ARM(generators)
	applicationGatewayFrontendPort_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendPort_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayFrontendPort_ARM(generators)
	applicationGatewayFrontendPort_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendPort_ARM{}), generators)

	return applicationGatewayFrontendPort_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayFrontendPort_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayFrontendPort_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayFrontendPortPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayGlobalConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayGlobalConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayGlobalConfiguration_ARM, ApplicationGatewayGlobalConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayGlobalConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayGlobalConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayGlobalConfiguration_ARM(subject ApplicationGatewayGlobalConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayGlobalConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayGlobalConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayGlobalConfiguration_ARMGenerator()
var applicationGatewayGlobalConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayGlobalConfiguration_ARMGenerator returns a generator of ApplicationGatewayGlobalConfiguration_ARM instances for property testing.
func ApplicationGatewayGlobalConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayGlobalConfiguration_ARMGenerator != nil {
		return applicationGatewayGlobalConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayGlobalConfiguration_ARM(generators)
	applicationGatewayGlobalConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayGlobalConfiguration_ARM{}), generators)

	return applicationGatewayGlobalConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayGlobalConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayGlobalConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["EnableRequestBuffering"] = gen.PtrOf(gen.Bool())
	gens["EnableResponseBuffering"] = gen.PtrOf(gen.Bool())
}

func Test_ApplicationGatewayHeaderConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayHeaderConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayHeaderConfiguration_ARM, ApplicationGatewayHeaderConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayHeaderConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayHeaderConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayHeaderConfiguration_ARM(subject ApplicationGatewayHeaderConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayHeaderConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayHeaderConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayHeaderConfiguration_ARMGenerator()
var applicationGatewayHeaderConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayHeaderConfiguration_ARMGenerator returns a generator of ApplicationGatewayHeaderConfiguration_ARM instances for property testing.
func ApplicationGatewayHeaderConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayHeaderConfiguration_ARMGenerator != nil {
		return applicationGatewayHeaderConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayHeaderConfiguration_ARM(generators)
	applicationGatewayHeaderConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayHeaderConfiguration_ARM{}), generators)

	return applicationGatewayHeaderConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayHeaderConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayHeaderConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["HeaderName"] = gen.PtrOf(gen.AlphaString())
	gens["HeaderValue"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayHttpListenerPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayHttpListenerPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayHttpListenerPropertiesFormat_ARM, ApplicationGatewayHttpListenerPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayHttpListenerPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayHttpListenerPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayHttpListenerPropertiesFormat_ARM(subject ApplicationGatewayHttpListenerPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayHttpListenerPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayHttpListenerPropertiesFormat_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayHttpListenerPropertiesFormat_ARMGenerator()
var applicationGatewayHttpListenerPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayHttpListenerPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayHttpListenerPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayHttpListenerPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayHttpListenerPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayHttpListenerPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayHttpListenerPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM(generators)
	applicationGatewayHttpListenerPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayHttpListenerPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM(generators)
	applicationGatewayHttpListenerPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayHttpListenerPropertiesFormat_ARM{}), generators)

	return applicationGatewayHttpListenerPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HostNames"] = gen.SliceOf(gen.AlphaString())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProtocol_ARM_Http,
		ApplicationGatewayProtocol_ARM_Https,
		ApplicationGatewayProtocol_ARM_Tcp,
		ApplicationGatewayProtocol_ARM_Tls))
	gens["RequireServerNameIndication"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayHttpListenerPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["CustomErrorConfigurations"] = gen.SliceOf(ApplicationGatewayCustomError_ARMGenerator())
	gens["FirewallPolicy"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["FrontendIPConfiguration"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["FrontendPort"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["SslCertificate"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["SslProfile"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayHttpListener_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayHttpListener_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayHttpListener_ARM, ApplicationGatewayHttpListener_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayHttpListener_ARM runs a test to see if a specific instance of ApplicationGatewayHttpListener_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayHttpListener_ARM(subject ApplicationGatewayHttpListener_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayHttpListener_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayHttpListener_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayHttpListener_ARMGenerator()
var applicationGatewayHttpListener_ARMGenerator gopter.Gen

// ApplicationGatewayHttpListener_ARMGenerator returns a generator of ApplicationGatewayHttpListener_ARM instances for property testing.
// We first initialize applicationGatewayHttpListener_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayHttpListener_ARMGenerator() gopter.Gen {
	if applicationGatewayHttpListener_ARMGenerator != nil {
		return applicationGatewayHttpListener_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_ARM(generators)
	applicationGatewayHttpListener_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayHttpListener_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayHttpListener_ARM(generators)
	applicationGatewayHttpListener_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayHttpListener_ARM{}), generators)

	return applicationGatewayHttpListener_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayHttpListener_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayHttpListener_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayHttpListenerPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_ARM, ApplicationGatewayIPConfigurationPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_ARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayIPConfigurationPropertiesFormat_ARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_ARM instances for property testing.
func ApplicationGatewayIPConfigurationPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_ARM(generators)
	applicationGatewayIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_ARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormat_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM, ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM(subject ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM instances for property
// testing - lazily instantiated by ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator()
var applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator gopter.Gen

// ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator returns a generator of ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM instances for property testing.
// We first initialize applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator != nil {
		return applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM{}), generators)

	return applicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayListenerPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayListenerPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayListenerPropertiesFormat_ARM, ApplicationGatewayListenerPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayListenerPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayListenerPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayListenerPropertiesFormat_ARM(subject ApplicationGatewayListenerPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayListenerPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayListenerPropertiesFormat_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayListenerPropertiesFormat_ARMGenerator()
var applicationGatewayListenerPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayListenerPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayListenerPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayListenerPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayListenerPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayListenerPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayListenerPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM(generators)
	applicationGatewayListenerPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayListenerPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM(generators)
	applicationGatewayListenerPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayListenerPropertiesFormat_ARM{}), generators)

	return applicationGatewayListenerPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProtocol_ARM_Http,
		ApplicationGatewayProtocol_ARM_Https,
		ApplicationGatewayProtocol_ARM_Tcp,
		ApplicationGatewayProtocol_ARM_Tls))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayListenerPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["FrontendIPConfiguration"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["FrontendPort"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["SslCertificate"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["SslProfile"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayListener_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayListener_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayListener_ARM, ApplicationGatewayListener_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayListener_ARM runs a test to see if a specific instance of ApplicationGatewayListener_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayListener_ARM(subject ApplicationGatewayListener_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayListener_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayListener_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayListener_ARMGenerator()
var applicationGatewayListener_ARMGenerator gopter.Gen

// ApplicationGatewayListener_ARMGenerator returns a generator of ApplicationGatewayListener_ARM instances for property testing.
// We first initialize applicationGatewayListener_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayListener_ARMGenerator() gopter.Gen {
	if applicationGatewayListener_ARMGenerator != nil {
		return applicationGatewayListener_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayListener_ARM(generators)
	applicationGatewayListener_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayListener_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayListener_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayListener_ARM(generators)
	applicationGatewayListener_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayListener_ARM{}), generators)

	return applicationGatewayListener_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayListener_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayListener_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayListener_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayListener_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayListenerPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM, ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM(subject ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator()
var applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM(generators)
	applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM(generators)
	applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM{}), generators)

	return applicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["LoadDistributionAlgorithm"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_IpHash, ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_LeastConnections, ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_RoundRobin))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["LoadDistributionTargets"] = gen.SliceOf(ApplicationGatewayLoadDistributionTarget_ARMGenerator())
}

func Test_ApplicationGatewayLoadDistributionPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayLoadDistributionPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicy_ARM, ApplicationGatewayLoadDistributionPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicy_ARM runs a test to see if a specific instance of ApplicationGatewayLoadDistributionPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicy_ARM(subject ApplicationGatewayLoadDistributionPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayLoadDistributionPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayLoadDistributionPolicy_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayLoadDistributionPolicy_ARMGenerator()
var applicationGatewayLoadDistributionPolicy_ARMGenerator gopter.Gen

// ApplicationGatewayLoadDistributionPolicy_ARMGenerator returns a generator of ApplicationGatewayLoadDistributionPolicy_ARM instances for property testing.
// We first initialize applicationGatewayLoadDistributionPolicy_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayLoadDistributionPolicy_ARMGenerator() gopter.Gen {
	if applicationGatewayLoadDistributionPolicy_ARMGenerator != nil {
		return applicationGatewayLoadDistributionPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM(generators)
	applicationGatewayLoadDistributionPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayLoadDistributionPolicy_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM(generators)
	applicationGatewayLoadDistributionPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayLoadDistributionPolicy_ARM{}), generators)

	return applicationGatewayLoadDistributionPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayLoadDistributionTarget_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayLoadDistributionTarget_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayLoadDistributionTarget_ARM, ApplicationGatewayLoadDistributionTarget_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayLoadDistributionTarget_ARM runs a test to see if a specific instance of ApplicationGatewayLoadDistributionTarget_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayLoadDistributionTarget_ARM(subject ApplicationGatewayLoadDistributionTarget_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayLoadDistributionTarget_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayLoadDistributionTarget_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayLoadDistributionTarget_ARMGenerator()
var applicationGatewayLoadDistributionTarget_ARMGenerator gopter.Gen

// ApplicationGatewayLoadDistributionTarget_ARMGenerator returns a generator of ApplicationGatewayLoadDistributionTarget_ARM instances for property testing.
func ApplicationGatewayLoadDistributionTarget_ARMGenerator() gopter.Gen {
	if applicationGatewayLoadDistributionTarget_ARMGenerator != nil {
		return applicationGatewayLoadDistributionTarget_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionTarget_ARM(generators)
	applicationGatewayLoadDistributionTarget_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayLoadDistributionTarget_ARM{}), generators)

	return applicationGatewayLoadDistributionTarget_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionTarget_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionTarget_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayPathRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPathRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPathRule_ARM, ApplicationGatewayPathRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPathRule_ARM runs a test to see if a specific instance of ApplicationGatewayPathRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPathRule_ARM(subject ApplicationGatewayPathRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPathRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPathRule_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayPathRule_ARMGenerator()
var applicationGatewayPathRule_ARMGenerator gopter.Gen

// ApplicationGatewayPathRule_ARMGenerator returns a generator of ApplicationGatewayPathRule_ARM instances for property testing.
func ApplicationGatewayPathRule_ARMGenerator() gopter.Gen {
	if applicationGatewayPathRule_ARMGenerator != nil {
		return applicationGatewayPathRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPathRule_ARM(generators)
	applicationGatewayPathRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPathRule_ARM{}), generators)

	return applicationGatewayPathRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPathRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPathRule_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayPrivateLinkConfigurationProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPrivateLinkConfigurationProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPrivateLinkConfigurationProperties_ARM, ApplicationGatewayPrivateLinkConfigurationProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPrivateLinkConfigurationProperties_ARM runs a test to see if a specific instance of ApplicationGatewayPrivateLinkConfigurationProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPrivateLinkConfigurationProperties_ARM(subject ApplicationGatewayPrivateLinkConfigurationProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPrivateLinkConfigurationProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPrivateLinkConfigurationProperties_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayPrivateLinkConfigurationProperties_ARMGenerator()
var applicationGatewayPrivateLinkConfigurationProperties_ARMGenerator gopter.Gen

// ApplicationGatewayPrivateLinkConfigurationProperties_ARMGenerator returns a generator of ApplicationGatewayPrivateLinkConfigurationProperties_ARM instances for property testing.
func ApplicationGatewayPrivateLinkConfigurationProperties_ARMGenerator() gopter.Gen {
	if applicationGatewayPrivateLinkConfigurationProperties_ARMGenerator != nil {
		return applicationGatewayPrivateLinkConfigurationProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayPrivateLinkConfigurationProperties_ARM(generators)
	applicationGatewayPrivateLinkConfigurationProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPrivateLinkConfigurationProperties_ARM{}), generators)

	return applicationGatewayPrivateLinkConfigurationProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayPrivateLinkConfigurationProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayPrivateLinkConfigurationProperties_ARM(gens map[string]gopter.Gen) {
	gens["IpConfigurations"] = gen.SliceOf(ApplicationGatewayPrivateLinkIpConfiguration_ARMGenerator())
}

func Test_ApplicationGatewayPrivateLinkConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPrivateLinkConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPrivateLinkConfiguration_ARM, ApplicationGatewayPrivateLinkConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPrivateLinkConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayPrivateLinkConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPrivateLinkConfiguration_ARM(subject ApplicationGatewayPrivateLinkConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPrivateLinkConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPrivateLinkConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayPrivateLinkConfiguration_ARMGenerator()
var applicationGatewayPrivateLinkConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayPrivateLinkConfiguration_ARMGenerator returns a generator of ApplicationGatewayPrivateLinkConfiguration_ARM instances for property testing.
// We first initialize applicationGatewayPrivateLinkConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayPrivateLinkConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayPrivateLinkConfiguration_ARMGenerator != nil {
		return applicationGatewayPrivateLinkConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM(generators)
	applicationGatewayPrivateLinkConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPrivateLinkConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM(generators)
	applicationGatewayPrivateLinkConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPrivateLinkConfiguration_ARM{}), generators)

	return applicationGatewayPrivateLinkConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayPrivateLinkConfigurationProperties_ARMGenerator())
}

func Test_ApplicationGatewayPrivateLinkIpConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPrivateLinkIpConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPrivateLinkIpConfiguration_ARM, ApplicationGatewayPrivateLinkIpConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPrivateLinkIpConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayPrivateLinkIpConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPrivateLinkIpConfiguration_ARM(subject ApplicationGatewayPrivateLinkIpConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPrivateLinkIpConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPrivateLinkIpConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayPrivateLinkIpConfiguration_ARMGenerator()
var applicationGatewayPrivateLinkIpConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayPrivateLinkIpConfiguration_ARMGenerator returns a generator of ApplicationGatewayPrivateLinkIpConfiguration_ARM instances for property testing.
func ApplicationGatewayPrivateLinkIpConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayPrivateLinkIpConfiguration_ARMGenerator != nil {
		return applicationGatewayPrivateLinkIpConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkIpConfiguration_ARM(generators)
	applicationGatewayPrivateLinkIpConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPrivateLinkIpConfiguration_ARM{}), generators)

	return applicationGatewayPrivateLinkIpConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkIpConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkIpConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayProbeHealthResponseMatch_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayProbeHealthResponseMatch_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayProbeHealthResponseMatch_ARM, ApplicationGatewayProbeHealthResponseMatch_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayProbeHealthResponseMatch_ARM runs a test to see if a specific instance of ApplicationGatewayProbeHealthResponseMatch_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayProbeHealthResponseMatch_ARM(subject ApplicationGatewayProbeHealthResponseMatch_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayProbeHealthResponseMatch_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayProbeHealthResponseMatch_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayProbeHealthResponseMatch_ARMGenerator()
var applicationGatewayProbeHealthResponseMatch_ARMGenerator gopter.Gen

// ApplicationGatewayProbeHealthResponseMatch_ARMGenerator returns a generator of ApplicationGatewayProbeHealthResponseMatch_ARM instances for property testing.
func ApplicationGatewayProbeHealthResponseMatch_ARMGenerator() gopter.Gen {
	if applicationGatewayProbeHealthResponseMatch_ARMGenerator != nil {
		return applicationGatewayProbeHealthResponseMatch_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayProbeHealthResponseMatch_ARM(generators)
	applicationGatewayProbeHealthResponseMatch_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayProbeHealthResponseMatch_ARM{}), generators)

	return applicationGatewayProbeHealthResponseMatch_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayProbeHealthResponseMatch_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayProbeHealthResponseMatch_ARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["StatusCodes"] = gen.SliceOf(gen.AlphaString())
}

func Test_ApplicationGatewayProbePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayProbePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayProbePropertiesFormat_ARM, ApplicationGatewayProbePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayProbePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayProbePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayProbePropertiesFormat_ARM(subject ApplicationGatewayProbePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayProbePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayProbePropertiesFormat_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayProbePropertiesFormat_ARMGenerator()
var applicationGatewayProbePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayProbePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayProbePropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayProbePropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayProbePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayProbePropertiesFormat_ARMGenerator != nil {
		return applicationGatewayProbePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM(generators)
	applicationGatewayProbePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayProbePropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM(generators)
	applicationGatewayProbePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayProbePropertiesFormat_ARM{}), generators)

	return applicationGatewayProbePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Host"] = gen.PtrOf(gen.AlphaString())
	gens["Interval"] = gen.PtrOf(gen.Int())
	gens["MinServers"] = gen.PtrOf(gen.Int())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["PickHostNameFromBackendHttpSettings"] = gen.PtrOf(gen.Bool())
	gens["PickHostNameFromBackendSettings"] = gen.PtrOf(gen.Bool())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProtocol_ARM_Http,
		ApplicationGatewayProtocol_ARM_Https,
		ApplicationGatewayProtocol_ARM_Tcp,
		ApplicationGatewayProtocol_ARM_Tls))
	gens["Timeout"] = gen.PtrOf(gen.Int())
	gens["UnhealthyThreshold"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayProbePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Match"] = gen.PtrOf(ApplicationGatewayProbeHealthResponseMatch_ARMGenerator())
}

func Test_ApplicationGatewayProbe_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayProbe_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayProbe_ARM, ApplicationGatewayProbe_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayProbe_ARM runs a test to see if a specific instance of ApplicationGatewayProbe_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayProbe_ARM(subject ApplicationGatewayProbe_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayProbe_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayProbe_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayProbe_ARMGenerator()
var applicationGatewayProbe_ARMGenerator gopter.Gen

// ApplicationGatewayProbe_ARMGenerator returns a generator of ApplicationGatewayProbe_ARM instances for property testing.
// We first initialize applicationGatewayProbe_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayProbe_ARMGenerator() gopter.Gen {
	if applicationGatewayProbe_ARMGenerator != nil {
		return applicationGatewayProbe_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayProbe_ARM(generators)
	applicationGatewayProbe_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayProbe_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayProbe_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayProbe_ARM(generators)
	applicationGatewayProbe_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayProbe_ARM{}), generators)

	return applicationGatewayProbe_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayProbe_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayProbe_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayProbe_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayProbe_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayProbePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPropertiesFormat_ARM, ApplicationGatewayPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPropertiesFormat_ARM(subject ApplicationGatewayPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPropertiesFormat_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayPropertiesFormat_ARMGenerator()
var applicationGatewayPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM(generators)
	applicationGatewayPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM(generators)
	applicationGatewayPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPropertiesFormat_ARM{}), generators)

	return applicationGatewayPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["EnableFips"] = gen.PtrOf(gen.Bool())
	gens["EnableHttp2"] = gen.PtrOf(gen.Bool())
	gens["ForceFirewallPolicyAssociation"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationCertificates"] = gen.SliceOf(ApplicationGatewayAuthenticationCertificate_ARMGenerator())
	gens["AutoscaleConfiguration"] = gen.PtrOf(ApplicationGatewayAutoscaleConfiguration_ARMGenerator())
	gens["BackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPool_ARMGenerator())
	gens["BackendHttpSettingsCollection"] = gen.SliceOf(ApplicationGatewayBackendHttpSettings_ARMGenerator())
	gens["BackendSettingsCollection"] = gen.SliceOf(ApplicationGatewayBackendSettings_ARMGenerator())
	gens["CustomErrorConfigurations"] = gen.SliceOf(ApplicationGatewayCustomError_ARMGenerator())
	gens["FirewallPolicy"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(ApplicationGatewayFrontendIPConfiguration_ARMGenerator())
	gens["FrontendPorts"] = gen.SliceOf(ApplicationGatewayFrontendPort_ARMGenerator())
	gens["GatewayIPConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARMGenerator())
	gens["GlobalConfiguration"] = gen.PtrOf(ApplicationGatewayGlobalConfiguration_ARMGenerator())
	gens["HttpListeners"] = gen.SliceOf(ApplicationGatewayHttpListener_ARMGenerator())
	gens["Listeners"] = gen.SliceOf(ApplicationGatewayListener_ARMGenerator())
	gens["LoadDistributionPolicies"] = gen.SliceOf(ApplicationGatewayLoadDistributionPolicy_ARMGenerator())
	gens["PrivateLinkConfigurations"] = gen.SliceOf(ApplicationGatewayPrivateLinkConfiguration_ARMGenerator())
	gens["Probes"] = gen.SliceOf(ApplicationGatewayProbe_ARMGenerator())
	gens["RedirectConfigurations"] = gen.SliceOf(ApplicationGatewayRedirectConfiguration_ARMGenerator())
	gens["RequestRoutingRules"] = gen.SliceOf(ApplicationGatewayRequestRoutingRule_ARMGenerator())
	gens["RewriteRuleSets"] = gen.SliceOf(ApplicationGatewayRewriteRuleSet_ARMGenerator())
	gens["RoutingRules"] = gen.SliceOf(ApplicationGatewayRoutingRule_ARMGenerator())
	gens["Sku"] = gen.PtrOf(ApplicationGatewaySku_ARMGenerator())
	gens["SslCertificates"] = gen.SliceOf(ApplicationGatewaySslCertificate_ARMGenerator())
	gens["SslPolicy"] = gen.PtrOf(ApplicationGatewaySslPolicy_ARMGenerator())
	gens["SslProfiles"] = gen.SliceOf(ApplicationGatewaySslProfile_ARMGenerator())
	gens["TrustedClientCertificates"] = gen.SliceOf(ApplicationGatewayTrustedClientCertificate_ARMGenerator())
	gens["TrustedRootCertificates"] = gen.SliceOf(ApplicationGatewayTrustedRootCertificate_ARMGenerator())
	gens["UrlPathMaps"] = gen.SliceOf(ApplicationGatewayUrlPathMap_ARMGenerator())
	gens["WebApplicationFirewallConfiguration"] = gen.PtrOf(ApplicationGatewayWebApplicationFirewallConfiguration_ARMGenerator())
}

func Test_ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM, ApplicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM(subject ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator()
var applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM(generators)
	applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM(generators)
	applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM{}), generators)

	return applicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["IncludePath"] = gen.PtrOf(gen.Bool())
	gens["IncludeQueryString"] = gen.PtrOf(gen.Bool())
	gens["RedirectType"] = gen.PtrOf(gen.OneConstOf(
		RedirectTypeEnum_ARM_Found,
		RedirectTypeEnum_ARM_Permanent,
		RedirectTypeEnum_ARM_SeeOther,
		RedirectTypeEnum_ARM_Temporary))
	gens["TargetUrl"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRedirectConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PathRules"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["RequestRoutingRules"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["TargetListener"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["UrlPathMaps"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayRedirectConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRedirectConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRedirectConfiguration_ARM, ApplicationGatewayRedirectConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRedirectConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayRedirectConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRedirectConfiguration_ARM(subject ApplicationGatewayRedirectConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRedirectConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRedirectConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRedirectConfiguration_ARMGenerator()
var applicationGatewayRedirectConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayRedirectConfiguration_ARMGenerator returns a generator of ApplicationGatewayRedirectConfiguration_ARM instances for property testing.
// We first initialize applicationGatewayRedirectConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRedirectConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayRedirectConfiguration_ARMGenerator != nil {
		return applicationGatewayRedirectConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM(generators)
	applicationGatewayRedirectConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRedirectConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM(generators)
	applicationGatewayRedirectConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRedirectConfiguration_ARM{}), generators)

	return applicationGatewayRedirectConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRedirectConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayRedirectConfigurationPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM, ApplicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM(subject ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator()
var applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator != nil {
		return applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM(generators)
	applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM(generators)
	applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM{}), generators)

	return applicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["RuleType"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_Basic, ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_PathBasedRouting))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRequestRoutingRulePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPool"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["BackendHttpSettings"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["HttpListener"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["LoadDistributionPolicy"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["RedirectConfiguration"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["RewriteRuleSet"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["UrlPathMap"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayRequestRoutingRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRequestRoutingRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRequestRoutingRule_ARM, ApplicationGatewayRequestRoutingRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRequestRoutingRule_ARM runs a test to see if a specific instance of ApplicationGatewayRequestRoutingRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRequestRoutingRule_ARM(subject ApplicationGatewayRequestRoutingRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRequestRoutingRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRequestRoutingRule_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRequestRoutingRule_ARMGenerator()
var applicationGatewayRequestRoutingRule_ARMGenerator gopter.Gen

// ApplicationGatewayRequestRoutingRule_ARMGenerator returns a generator of ApplicationGatewayRequestRoutingRule_ARM instances for property testing.
// We first initialize applicationGatewayRequestRoutingRule_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRequestRoutingRule_ARMGenerator() gopter.Gen {
	if applicationGatewayRequestRoutingRule_ARMGenerator != nil {
		return applicationGatewayRequestRoutingRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM(generators)
	applicationGatewayRequestRoutingRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRequestRoutingRule_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM(generators)
	applicationGatewayRequestRoutingRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRequestRoutingRule_ARM{}), generators)

	return applicationGatewayRequestRoutingRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRequestRoutingRule_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayRequestRoutingRulePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayRewriteRuleActionSet_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRewriteRuleActionSet_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRewriteRuleActionSet_ARM, ApplicationGatewayRewriteRuleActionSet_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRewriteRuleActionSet_ARM runs a test to see if a specific instance of ApplicationGatewayRewriteRuleActionSet_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRewriteRuleActionSet_ARM(subject ApplicationGatewayRewriteRuleActionSet_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRewriteRuleActionSet_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRewriteRuleActionSet_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRewriteRuleActionSet_ARMGenerator()
var applicationGatewayRewriteRuleActionSet_ARMGenerator gopter.Gen

// ApplicationGatewayRewriteRuleActionSet_ARMGenerator returns a generator of ApplicationGatewayRewriteRuleActionSet_ARM instances for property testing.
func ApplicationGatewayRewriteRuleActionSet_ARMGenerator() gopter.Gen {
	if applicationGatewayRewriteRuleActionSet_ARMGenerator != nil {
		return applicationGatewayRewriteRuleActionSet_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleActionSet_ARM(generators)
	applicationGatewayRewriteRuleActionSet_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRuleActionSet_ARM{}), generators)

	return applicationGatewayRewriteRuleActionSet_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleActionSet_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleActionSet_ARM(gens map[string]gopter.Gen) {
	gens["RequestHeaderConfigurations"] = gen.SliceOf(ApplicationGatewayHeaderConfiguration_ARMGenerator())
	gens["ResponseHeaderConfigurations"] = gen.SliceOf(ApplicationGatewayHeaderConfiguration_ARMGenerator())
	gens["UrlConfiguration"] = gen.PtrOf(ApplicationGatewayUrlConfiguration_ARMGenerator())
}

func Test_ApplicationGatewayRewriteRuleCondition_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRewriteRuleCondition_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRewriteRuleCondition_ARM, ApplicationGatewayRewriteRuleCondition_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRewriteRuleCondition_ARM runs a test to see if a specific instance of ApplicationGatewayRewriteRuleCondition_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRewriteRuleCondition_ARM(subject ApplicationGatewayRewriteRuleCondition_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRewriteRuleCondition_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRewriteRuleCondition_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRewriteRuleCondition_ARMGenerator()
var applicationGatewayRewriteRuleCondition_ARMGenerator gopter.Gen

// ApplicationGatewayRewriteRuleCondition_ARMGenerator returns a generator of ApplicationGatewayRewriteRuleCondition_ARM instances for property testing.
func ApplicationGatewayRewriteRuleCondition_ARMGenerator() gopter.Gen {
	if applicationGatewayRewriteRuleCondition_ARMGenerator != nil {
		return applicationGatewayRewriteRuleCondition_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleCondition_ARM(generators)
	applicationGatewayRewriteRuleCondition_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRuleCondition_ARM{}), generators)

	return applicationGatewayRewriteRuleCondition_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleCondition_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleCondition_ARM(gens map[string]gopter.Gen) {
	gens["IgnoreCase"] = gen.PtrOf(gen.Bool())
	gens["Negate"] = gen.PtrOf(gen.Bool())
	gens["Pattern"] = gen.PtrOf(gen.AlphaString())
	gens["Variable"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRewriteRuleSetPropertiesFormat_ARM, ApplicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRewriteRuleSetPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRewriteRuleSetPropertiesFormat_ARM(subject ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator()
var applicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM instances for property testing.
func ApplicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleSetPropertiesFormat_ARM(generators)
	applicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM{}), generators)

	return applicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleSetPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleSetPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["RewriteRules"] = gen.SliceOf(ApplicationGatewayRewriteRule_ARMGenerator())
}

func Test_ApplicationGatewayRewriteRuleSet_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRewriteRuleSet_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRewriteRuleSet_ARM, ApplicationGatewayRewriteRuleSet_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRewriteRuleSet_ARM runs a test to see if a specific instance of ApplicationGatewayRewriteRuleSet_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRewriteRuleSet_ARM(subject ApplicationGatewayRewriteRuleSet_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRewriteRuleSet_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRewriteRuleSet_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRewriteRuleSet_ARMGenerator()
var applicationGatewayRewriteRuleSet_ARMGenerator gopter.Gen

// ApplicationGatewayRewriteRuleSet_ARMGenerator returns a generator of ApplicationGatewayRewriteRuleSet_ARM instances for property testing.
// We first initialize applicationGatewayRewriteRuleSet_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRewriteRuleSet_ARMGenerator() gopter.Gen {
	if applicationGatewayRewriteRuleSet_ARMGenerator != nil {
		return applicationGatewayRewriteRuleSet_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM(generators)
	applicationGatewayRewriteRuleSet_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRuleSet_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM(generators)
	applicationGatewayRewriteRuleSet_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRuleSet_ARM{}), generators)

	return applicationGatewayRewriteRuleSet_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRuleSet_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayRewriteRuleSetPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayRewriteRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRewriteRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRewriteRule_ARM, ApplicationGatewayRewriteRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRewriteRule_ARM runs a test to see if a specific instance of ApplicationGatewayRewriteRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRewriteRule_ARM(subject ApplicationGatewayRewriteRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRewriteRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRewriteRule_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRewriteRule_ARMGenerator()
var applicationGatewayRewriteRule_ARMGenerator gopter.Gen

// ApplicationGatewayRewriteRule_ARMGenerator returns a generator of ApplicationGatewayRewriteRule_ARM instances for property testing.
// We first initialize applicationGatewayRewriteRule_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRewriteRule_ARMGenerator() gopter.Gen {
	if applicationGatewayRewriteRule_ARMGenerator != nil {
		return applicationGatewayRewriteRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRule_ARM(generators)
	applicationGatewayRewriteRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRule_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRule_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRule_ARM(generators)
	applicationGatewayRewriteRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRule_ARM{}), generators)

	return applicationGatewayRewriteRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRule_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RuleSequence"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRule_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRewriteRule_ARM(gens map[string]gopter.Gen) {
	gens["ActionSet"] = gen.PtrOf(ApplicationGatewayRewriteRuleActionSet_ARMGenerator())
	gens["Conditions"] = gen.SliceOf(ApplicationGatewayRewriteRuleCondition_ARMGenerator())
}

func Test_ApplicationGatewayRoutingRulePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRoutingRulePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRoutingRulePropertiesFormat_ARM, ApplicationGatewayRoutingRulePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRoutingRulePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayRoutingRulePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRoutingRulePropertiesFormat_ARM(subject ApplicationGatewayRoutingRulePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRoutingRulePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRoutingRulePropertiesFormat_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayRoutingRulePropertiesFormat_ARMGenerator()
var applicationGatewayRoutingRulePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayRoutingRulePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayRoutingRulePropertiesFormat_ARM instances for property testing.
// We first initialize applicationGatewayRoutingRulePropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRoutingRulePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayRoutingRulePropertiesFormat_ARMGenerator != nil {
		return applicationGatewayRoutingRulePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM(generators)
	applicationGatewayRoutingRulePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRoutingRulePropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM(generators)
	applicationGatewayRoutingRulePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRoutingRulePropertiesFormat_ARM{}), generators)

	return applicationGatewayRoutingRulePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["RuleType"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_Basic, ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_PathBasedRouting))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRoutingRulePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPool"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["BackendSettings"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["Listener"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewayRoutingRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRoutingRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRoutingRule_ARM, ApplicationGatewayRoutingRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRoutingRule_ARM runs a test to see if a specific instance of ApplicationGatewayRoutingRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRoutingRule_ARM(subject ApplicationGatewayRoutingRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRoutingRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRoutingRule_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRoutingRule_ARMGenerator()
var applicationGatewayRoutingRule_ARMGenerator gopter.Gen

// ApplicationGatewayRoutingRule_ARMGenerator returns a generator of ApplicationGatewayRoutingRule_ARM instances for property testing.
// We first initialize applicationGatewayRoutingRule_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayRoutingRule_ARMGenerator() gopter.Gen {
	if applicationGatewayRoutingRule_ARMGenerator != nil {
		return applicationGatewayRoutingRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_ARM(generators)
	applicationGatewayRoutingRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRoutingRule_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayRoutingRule_ARM(generators)
	applicationGatewayRoutingRule_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRoutingRule_ARM{}), generators)

	return applicationGatewayRoutingRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayRoutingRule_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayRoutingRule_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayRoutingRulePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewaySku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySku_ARM, ApplicationGatewaySku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySku_ARM runs a test to see if a specific instance of ApplicationGatewaySku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySku_ARM(subject ApplicationGatewaySku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySku_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySku_ARMGenerator()
var applicationGatewaySku_ARMGenerator gopter.Gen

// ApplicationGatewaySku_ARMGenerator returns a generator of ApplicationGatewaySku_ARM instances for property testing.
func ApplicationGatewaySku_ARMGenerator() gopter.Gen {
	if applicationGatewaySku_ARMGenerator != nil {
		return applicationGatewaySku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySku_ARM(generators)
	applicationGatewaySku_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySku_ARM{}), generators)

	return applicationGatewaySku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySku_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewaySku_Name_ARM_Standard_Large,
		ApplicationGatewaySku_Name_ARM_Standard_Medium,
		ApplicationGatewaySku_Name_ARM_Standard_Small,
		ApplicationGatewaySku_Name_ARM_Standard_V2,
		ApplicationGatewaySku_Name_ARM_WAF_Large,
		ApplicationGatewaySku_Name_ARM_WAF_Medium,
		ApplicationGatewaySku_Name_ARM_WAF_V2))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewaySku_Tier_ARM_Standard,
		ApplicationGatewaySku_Tier_ARM_Standard_V2,
		ApplicationGatewaySku_Tier_ARM_WAF,
		ApplicationGatewaySku_Tier_ARM_WAF_V2))
}

func Test_ApplicationGatewaySslCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslCertificatePropertiesFormat_ARM, ApplicationGatewaySslCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslCertificatePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewaySslCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslCertificatePropertiesFormat_ARM(subject ApplicationGatewaySslCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslCertificatePropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewaySslCertificatePropertiesFormat_ARMGenerator()
var applicationGatewaySslCertificatePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewaySslCertificatePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewaySslCertificatePropertiesFormat_ARM instances for property testing.
func ApplicationGatewaySslCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewaySslCertificatePropertiesFormat_ARMGenerator != nil {
		return applicationGatewaySslCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificatePropertiesFormat_ARM(generators)
	applicationGatewaySslCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslCertificatePropertiesFormat_ARM{}), generators)

	return applicationGatewaySslCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Data"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultSecretId"] = gen.PtrOf(gen.AlphaString())
	gens["Password"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewaySslCertificate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslCertificate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslCertificate_ARM, ApplicationGatewaySslCertificate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslCertificate_ARM runs a test to see if a specific instance of ApplicationGatewaySslCertificate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslCertificate_ARM(subject ApplicationGatewaySslCertificate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslCertificate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslCertificate_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslCertificate_ARMGenerator()
var applicationGatewaySslCertificate_ARMGenerator gopter.Gen

// ApplicationGatewaySslCertificate_ARMGenerator returns a generator of ApplicationGatewaySslCertificate_ARM instances for property testing.
// We first initialize applicationGatewaySslCertificate_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewaySslCertificate_ARMGenerator() gopter.Gen {
	if applicationGatewaySslCertificate_ARMGenerator != nil {
		return applicationGatewaySslCertificate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_ARM(generators)
	applicationGatewaySslCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslCertificate_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewaySslCertificate_ARM(generators)
	applicationGatewaySslCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslCertificate_ARM{}), generators)

	return applicationGatewaySslCertificate_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewaySslCertificate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewaySslCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewaySslCertificatePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewaySslPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslPolicy_ARM, ApplicationGatewaySslPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslPolicy_ARM runs a test to see if a specific instance of ApplicationGatewaySslPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslPolicy_ARM(subject ApplicationGatewaySslPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslPolicy_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslPolicy_ARMGenerator()
var applicationGatewaySslPolicy_ARMGenerator gopter.Gen

// ApplicationGatewaySslPolicy_ARMGenerator returns a generator of ApplicationGatewaySslPolicy_ARM instances for property testing.
func ApplicationGatewaySslPolicy_ARMGenerator() gopter.Gen {
	if applicationGatewaySslPolicy_ARMGenerator != nil {
		return applicationGatewaySslPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslPolicy_ARM(generators)
	applicationGatewaySslPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslPolicy_ARM{}), generators)

	return applicationGatewaySslPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslPolicy_ARM(gens map[string]gopter.Gen) {
	gens["CipherSuites"] = gen.SliceOf(gen.OneConstOf(
		CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,
		CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
		CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
		CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
		CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_CBC_SHA256,
		CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_GCM_SHA384))
	gens["DisabledSslProtocols"] = gen.SliceOf(gen.OneConstOf(
		ProtocolsEnum_ARM_TLSv1_0,
		ProtocolsEnum_ARM_TLSv1_1,
		ProtocolsEnum_ARM_TLSv1_2,
		ProtocolsEnum_ARM_TLSv1_3))
	gens["MinProtocolVersion"] = gen.PtrOf(gen.OneConstOf(
		ProtocolsEnum_ARM_TLSv1_0,
		ProtocolsEnum_ARM_TLSv1_1,
		ProtocolsEnum_ARM_TLSv1_2,
		ProtocolsEnum_ARM_TLSv1_3))
	gens["PolicyName"] = gen.PtrOf(gen.OneConstOf(
		PolicyNameEnum_ARM_AppGwSslPolicy20150501,
		PolicyNameEnum_ARM_AppGwSslPolicy20170401,
		PolicyNameEnum_ARM_AppGwSslPolicy20170401S,
		PolicyNameEnum_ARM_AppGwSslPolicy20220101,
		PolicyNameEnum_ARM_AppGwSslPolicy20220101S))
	gens["PolicyType"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewaySslPolicy_PolicyType_ARM_Custom, ApplicationGatewaySslPolicy_PolicyType_ARM_CustomV2, ApplicationGatewaySslPolicy_PolicyType_ARM_Predefined))
}

func Test_ApplicationGatewaySslProfilePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslProfilePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslProfilePropertiesFormat_ARM, ApplicationGatewaySslProfilePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslProfilePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewaySslProfilePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslProfilePropertiesFormat_ARM(subject ApplicationGatewaySslProfilePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslProfilePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslProfilePropertiesFormat_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslProfilePropertiesFormat_ARMGenerator()
var applicationGatewaySslProfilePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewaySslProfilePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewaySslProfilePropertiesFormat_ARM instances for property testing.
func ApplicationGatewaySslProfilePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewaySslProfilePropertiesFormat_ARMGenerator != nil {
		return applicationGatewaySslProfilePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewaySslProfilePropertiesFormat_ARM(generators)
	applicationGatewaySslProfilePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslProfilePropertiesFormat_ARM{}), generators)

	return applicationGatewaySslProfilePropertiesFormat_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewaySslProfilePropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewaySslProfilePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["ClientAuthConfiguration"] = gen.PtrOf(ApplicationGatewayClientAuthConfiguration_ARMGenerator())
	gens["SslPolicy"] = gen.PtrOf(ApplicationGatewaySslPolicy_ARMGenerator())
	gens["TrustedClientCertificates"] = gen.SliceOf(ApplicationGatewaySubResource_ARMGenerator())
}

func Test_ApplicationGatewaySslProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslProfile_ARM, ApplicationGatewaySslProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslProfile_ARM runs a test to see if a specific instance of ApplicationGatewaySslProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslProfile_ARM(subject ApplicationGatewaySslProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslProfile_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslProfile_ARMGenerator()
var applicationGatewaySslProfile_ARMGenerator gopter.Gen

// ApplicationGatewaySslProfile_ARMGenerator returns a generator of ApplicationGatewaySslProfile_ARM instances for property testing.
// We first initialize applicationGatewaySslProfile_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewaySslProfile_ARMGenerator() gopter.Gen {
	if applicationGatewaySslProfile_ARMGenerator != nil {
		return applicationGatewaySslProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_ARM(generators)
	applicationGatewaySslProfile_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslProfile_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewaySslProfile_ARM(generators)
	applicationGatewaySslProfile_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslProfile_ARM{}), generators)

	return applicationGatewaySslProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewaySslProfile_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewaySslProfile_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewaySslProfilePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewaySubResource_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySubResource_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySubResource_ARM, ApplicationGatewaySubResource_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySubResource_ARM runs a test to see if a specific instance of ApplicationGatewaySubResource_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySubResource_ARM(subject ApplicationGatewaySubResource_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySubResource_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySubResource_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySubResource_ARMGenerator()
var applicationGatewaySubResource_ARMGenerator gopter.Gen

// ApplicationGatewaySubResource_ARMGenerator returns a generator of ApplicationGatewaySubResource_ARM instances for property testing.
func ApplicationGatewaySubResource_ARMGenerator() gopter.Gen {
	if applicationGatewaySubResource_ARMGenerator != nil {
		return applicationGatewaySubResource_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySubResource_ARM(generators)
	applicationGatewaySubResource_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySubResource_ARM{}), generators)

	return applicationGatewaySubResource_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySubResource_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySubResource_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM, ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM(subject ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator()
var applicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM instances for property testing.
func ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator != nil {
		return applicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM(generators)
	applicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM{}), generators)

	return applicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Data"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayTrustedClientCertificate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayTrustedClientCertificate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayTrustedClientCertificate_ARM, ApplicationGatewayTrustedClientCertificate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayTrustedClientCertificate_ARM runs a test to see if a specific instance of ApplicationGatewayTrustedClientCertificate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayTrustedClientCertificate_ARM(subject ApplicationGatewayTrustedClientCertificate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayTrustedClientCertificate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayTrustedClientCertificate_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayTrustedClientCertificate_ARMGenerator()
var applicationGatewayTrustedClientCertificate_ARMGenerator gopter.Gen

// ApplicationGatewayTrustedClientCertificate_ARMGenerator returns a generator of ApplicationGatewayTrustedClientCertificate_ARM instances for property testing.
// We first initialize applicationGatewayTrustedClientCertificate_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayTrustedClientCertificate_ARMGenerator() gopter.Gen {
	if applicationGatewayTrustedClientCertificate_ARMGenerator != nil {
		return applicationGatewayTrustedClientCertificate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM(generators)
	applicationGatewayTrustedClientCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedClientCertificate_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM(generators)
	applicationGatewayTrustedClientCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedClientCertificate_ARM{}), generators)

	return applicationGatewayTrustedClientCertificate_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM, ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM(subject ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator()
var applicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM instances for property testing.
func ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator != nil {
		return applicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM(generators)
	applicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM{}), generators)

	return applicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Data"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultSecretId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayTrustedRootCertificate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayTrustedRootCertificate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayTrustedRootCertificate_ARM, ApplicationGatewayTrustedRootCertificate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayTrustedRootCertificate_ARM runs a test to see if a specific instance of ApplicationGatewayTrustedRootCertificate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayTrustedRootCertificate_ARM(subject ApplicationGatewayTrustedRootCertificate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayTrustedRootCertificate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayTrustedRootCertificate_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayTrustedRootCertificate_ARMGenerator()
var applicationGatewayTrustedRootCertificate_ARMGenerator gopter.Gen

// ApplicationGatewayTrustedRootCertificate_ARMGenerator returns a generator of ApplicationGatewayTrustedRootCertificate_ARM instances for property testing.
// We first initialize applicationGatewayTrustedRootCertificate_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayTrustedRootCertificate_ARMGenerator() gopter.Gen {
	if applicationGatewayTrustedRootCertificate_ARMGenerator != nil {
		return applicationGatewayTrustedRootCertificate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM(generators)
	applicationGatewayTrustedRootCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedRootCertificate_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM(generators)
	applicationGatewayTrustedRootCertificate_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedRootCertificate_ARM{}), generators)

	return applicationGatewayTrustedRootCertificate_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayUrlConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayUrlConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayUrlConfiguration_ARM, ApplicationGatewayUrlConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayUrlConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayUrlConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayUrlConfiguration_ARM(subject ApplicationGatewayUrlConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayUrlConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayUrlConfiguration_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayUrlConfiguration_ARMGenerator()
var applicationGatewayUrlConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayUrlConfiguration_ARMGenerator returns a generator of ApplicationGatewayUrlConfiguration_ARM instances for property testing.
func ApplicationGatewayUrlConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayUrlConfiguration_ARMGenerator != nil {
		return applicationGatewayUrlConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayUrlConfiguration_ARM(generators)
	applicationGatewayUrlConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayUrlConfiguration_ARM{}), generators)

	return applicationGatewayUrlConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayUrlConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayUrlConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["ModifiedPath"] = gen.PtrOf(gen.AlphaString())
	gens["ModifiedQueryString"] = gen.PtrOf(gen.AlphaString())
	gens["Reroute"] = gen.PtrOf(gen.Bool())
}

func Test_ApplicationGatewayUrlPathMapPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayUrlPathMapPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayUrlPathMapPropertiesFormat_ARM, ApplicationGatewayUrlPathMapPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayUrlPathMapPropertiesFormat_ARM runs a test to see if a specific instance of ApplicationGatewayUrlPathMapPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayUrlPathMapPropertiesFormat_ARM(subject ApplicationGatewayUrlPathMapPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayUrlPathMapPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayUrlPathMapPropertiesFormat_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayUrlPathMapPropertiesFormat_ARMGenerator()
var applicationGatewayUrlPathMapPropertiesFormat_ARMGenerator gopter.Gen

// ApplicationGatewayUrlPathMapPropertiesFormat_ARMGenerator returns a generator of ApplicationGatewayUrlPathMapPropertiesFormat_ARM instances for property testing.
func ApplicationGatewayUrlPathMapPropertiesFormat_ARMGenerator() gopter.Gen {
	if applicationGatewayUrlPathMapPropertiesFormat_ARMGenerator != nil {
		return applicationGatewayUrlPathMapPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayUrlPathMapPropertiesFormat_ARM(generators)
	applicationGatewayUrlPathMapPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayUrlPathMapPropertiesFormat_ARM{}), generators)

	return applicationGatewayUrlPathMapPropertiesFormat_ARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayUrlPathMapPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayUrlPathMapPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["DefaultBackendAddressPool"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["DefaultBackendHttpSettings"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["DefaultLoadDistributionPolicy"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["DefaultRedirectConfiguration"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["DefaultRewriteRuleSet"] = gen.PtrOf(ApplicationGatewaySubResource_ARMGenerator())
	gens["PathRules"] = gen.SliceOf(ApplicationGatewayPathRule_ARMGenerator())
}

func Test_ApplicationGatewayUrlPathMap_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayUrlPathMap_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayUrlPathMap_ARM, ApplicationGatewayUrlPathMap_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayUrlPathMap_ARM runs a test to see if a specific instance of ApplicationGatewayUrlPathMap_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayUrlPathMap_ARM(subject ApplicationGatewayUrlPathMap_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayUrlPathMap_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayUrlPathMap_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayUrlPathMap_ARMGenerator()
var applicationGatewayUrlPathMap_ARMGenerator gopter.Gen

// ApplicationGatewayUrlPathMap_ARMGenerator returns a generator of ApplicationGatewayUrlPathMap_ARM instances for property testing.
// We first initialize applicationGatewayUrlPathMap_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayUrlPathMap_ARMGenerator() gopter.Gen {
	if applicationGatewayUrlPathMap_ARMGenerator != nil {
		return applicationGatewayUrlPathMap_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM(generators)
	applicationGatewayUrlPathMap_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayUrlPathMap_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM(generators)
	applicationGatewayUrlPathMap_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayUrlPathMap_ARM{}), generators)

	return applicationGatewayUrlPathMap_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayUrlPathMap_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayUrlPathMapPropertiesFormat_ARMGenerator())
}

func Test_ApplicationGatewayWebApplicationFirewallConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayWebApplicationFirewallConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallConfiguration_ARM, ApplicationGatewayWebApplicationFirewallConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallConfiguration_ARM runs a test to see if a specific instance of ApplicationGatewayWebApplicationFirewallConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallConfiguration_ARM(subject ApplicationGatewayWebApplicationFirewallConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayWebApplicationFirewallConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayWebApplicationFirewallConfiguration_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayWebApplicationFirewallConfiguration_ARMGenerator()
var applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator gopter.Gen

// ApplicationGatewayWebApplicationFirewallConfiguration_ARMGenerator returns a generator of ApplicationGatewayWebApplicationFirewallConfiguration_ARM instances for property testing.
// We first initialize applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayWebApplicationFirewallConfiguration_ARMGenerator() gopter.Gen {
	if applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator != nil {
		return applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM(generators)
	applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayWebApplicationFirewallConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM(generators)
	applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayWebApplicationFirewallConfiguration_ARM{}), generators)

	return applicationGatewayWebApplicationFirewallConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["FileUploadLimitInMb"] = gen.PtrOf(gen.Int())
	gens["FirewallMode"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Detection, ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Prevention))
	gens["MaxRequestBodySize"] = gen.PtrOf(gen.Int())
	gens["MaxRequestBodySizeInKb"] = gen.PtrOf(gen.Int())
	gens["RequestBodyCheck"] = gen.PtrOf(gen.Bool())
	gens["RuleSetType"] = gen.PtrOf(gen.AlphaString())
	gens["RuleSetVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["DisabledRuleGroups"] = gen.SliceOf(ApplicationGatewayFirewallDisabledRuleGroup_ARMGenerator())
	gens["Exclusions"] = gen.SliceOf(ApplicationGatewayFirewallExclusion_ARMGenerator())
}

func Test_ApplicationGateway_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGateway_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGateway_Spec_ARM, ApplicationGateway_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGateway_Spec_ARM runs a test to see if a specific instance of ApplicationGateway_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGateway_Spec_ARM(subject ApplicationGateway_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGateway_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGateway_Spec_ARM instances for property testing - lazily instantiated by
// ApplicationGateway_Spec_ARMGenerator()
var applicationGateway_Spec_ARMGenerator gopter.Gen

// ApplicationGateway_Spec_ARMGenerator returns a generator of ApplicationGateway_Spec_ARM instances for property testing.
// We first initialize applicationGateway_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGateway_Spec_ARMGenerator() gopter.Gen {
	if applicationGateway_Spec_ARMGenerator != nil {
		return applicationGateway_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGateway_Spec_ARM(generators)
	applicationGateway_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGateway_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGateway_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGateway_Spec_ARM(generators)
	applicationGateway_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGateway_Spec_ARM{}), generators)

	return applicationGateway_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGateway_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGateway_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGateway_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGateway_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ApplicationGatewayPropertiesFormat_ARMGenerator())
}

func Test_ManagedServiceIdentity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_ARM, ManagedServiceIdentity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_ARM runs a test to see if a specific instance of ManagedServiceIdentity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_ARM(subject ManagedServiceIdentity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_ARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_ARMGenerator()
var managedServiceIdentity_ARMGenerator gopter.Gen

// ManagedServiceIdentity_ARMGenerator returns a generator of ManagedServiceIdentity_ARM instances for property testing.
// We first initialize managedServiceIdentity_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_ARMGenerator != nil {
		return managedServiceIdentity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM(generators)
	managedServiceIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_ARM(generators)
	managedServiceIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_ARM{}), generators)

	return managedServiceIdentity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_ARM_None,
		ManagedServiceIdentity_Type_ARM_SystemAssigned,
		ManagedServiceIdentity_Type_ARM_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_ARM_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentityDetails_ARMGenerator())
}

func Test_UserAssignedIdentityDetails_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityDetails_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityDetails_ARM, UserAssignedIdentityDetails_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityDetails_ARM runs a test to see if a specific instance of UserAssignedIdentityDetails_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityDetails_ARM(subject UserAssignedIdentityDetails_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityDetails_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityDetails_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentityDetails_ARMGenerator()
var userAssignedIdentityDetails_ARMGenerator gopter.Gen

// UserAssignedIdentityDetails_ARMGenerator returns a generator of UserAssignedIdentityDetails_ARM instances for property testing.
func UserAssignedIdentityDetails_ARMGenerator() gopter.Gen {
	if userAssignedIdentityDetails_ARMGenerator != nil {
		return userAssignedIdentityDetails_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	userAssignedIdentityDetails_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityDetails_ARM{}), generators)

	return userAssignedIdentityDetails_ARMGenerator
}
