// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"fmt"
	v1api20220701s "github.com/Azure/azure-service-operator/v2/api/network/v1api20220701storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /network/resource-manager/Microsoft.Network/stable/2022-07-01/customIpPrefix.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}
type CustomIpPrefix struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomIpPrefix_Spec   `json:"spec,omitempty"`
	Status            CustomIpPrefix_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &CustomIpPrefix{}

// GetConditions returns the conditions of the resource
func (prefix *CustomIpPrefix) GetConditions() conditions.Conditions {
	return prefix.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (prefix *CustomIpPrefix) SetConditions(conditions conditions.Conditions) {
	prefix.Status.Conditions = conditions
}

var _ conversion.Convertible = &CustomIpPrefix{}

// ConvertFrom populates our CustomIpPrefix from the provided hub CustomIpPrefix
func (prefix *CustomIpPrefix) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1api20220701s.CustomIpPrefix)
	if !ok {
		return fmt.Errorf("expected network/v1api20220701storage/CustomIpPrefix but received %T instead", hub)
	}

	return prefix.AssignProperties_From_CustomIpPrefix(source)
}

// ConvertTo populates the provided hub CustomIpPrefix from our CustomIpPrefix
func (prefix *CustomIpPrefix) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1api20220701s.CustomIpPrefix)
	if !ok {
		return fmt.Errorf("expected network/v1api20220701storage/CustomIpPrefix but received %T instead", hub)
	}

	return prefix.AssignProperties_To_CustomIpPrefix(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1api20220701-customipprefix,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=customipprefixes,verbs=create;update,versions=v1api20220701,name=default.v1api20220701.customipprefixes.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &CustomIpPrefix{}

// Default applies defaults to the CustomIpPrefix resource
func (prefix *CustomIpPrefix) Default() {
	prefix.defaultImpl()
	var temp any = prefix
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (prefix *CustomIpPrefix) defaultAzureName() {
	if prefix.Spec.AzureName == "" {
		prefix.Spec.AzureName = prefix.Name
	}
}

// defaultImpl applies the code generated defaults to the CustomIpPrefix resource
func (prefix *CustomIpPrefix) defaultImpl() { prefix.defaultAzureName() }

var _ genruntime.ImportableResource = &CustomIpPrefix{}

// InitializeSpec initializes the spec for this resource from the given status
func (prefix *CustomIpPrefix) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*CustomIpPrefix_STATUS); ok {
		return prefix.Spec.Initialize_From_CustomIpPrefix_STATUS(s)
	}

	return fmt.Errorf("expected Status of type CustomIpPrefix_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &CustomIpPrefix{}

// AzureName returns the Azure name of the resource
func (prefix *CustomIpPrefix) AzureName() string {
	return prefix.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-07-01"
func (prefix CustomIpPrefix) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (prefix *CustomIpPrefix) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (prefix *CustomIpPrefix) GetSpec() genruntime.ConvertibleSpec {
	return &prefix.Spec
}

// GetStatus returns the status of this resource
func (prefix *CustomIpPrefix) GetStatus() genruntime.ConvertibleStatus {
	return &prefix.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/customIpPrefixes"
func (prefix *CustomIpPrefix) GetType() string {
	return "Microsoft.Network/customIpPrefixes"
}

// NewEmptyStatus returns a new empty (blank) status
func (prefix *CustomIpPrefix) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &CustomIpPrefix_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (prefix *CustomIpPrefix) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(prefix.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  prefix.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (prefix *CustomIpPrefix) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*CustomIpPrefix_STATUS); ok {
		prefix.Status = *st
		return nil
	}

	// Convert status to required version
	var st CustomIpPrefix_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	prefix.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1api20220701-customipprefix,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=customipprefixes,verbs=create;update,versions=v1api20220701,name=validate.v1api20220701.customipprefixes.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &CustomIpPrefix{}

// ValidateCreate validates the creation of the resource
func (prefix *CustomIpPrefix) ValidateCreate() error {
	validations := prefix.createValidations()
	var temp any = prefix
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (prefix *CustomIpPrefix) ValidateDelete() error {
	validations := prefix.deleteValidations()
	var temp any = prefix
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (prefix *CustomIpPrefix) ValidateUpdate(old runtime.Object) error {
	validations := prefix.updateValidations()
	var temp any = prefix
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (prefix *CustomIpPrefix) createValidations() []func() error {
	return []func() error{prefix.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (prefix *CustomIpPrefix) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (prefix *CustomIpPrefix) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return prefix.validateResourceReferences()
		},
		prefix.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (prefix *CustomIpPrefix) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&prefix.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (prefix *CustomIpPrefix) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*CustomIpPrefix)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, prefix)
}

// AssignProperties_From_CustomIpPrefix populates our CustomIpPrefix from the provided source CustomIpPrefix
func (prefix *CustomIpPrefix) AssignProperties_From_CustomIpPrefix(source *v1api20220701s.CustomIpPrefix) error {

	// ObjectMeta
	prefix.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec CustomIpPrefix_Spec
	err := spec.AssignProperties_From_CustomIpPrefix_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_CustomIpPrefix_Spec() to populate field Spec")
	}
	prefix.Spec = spec

	// Status
	var status CustomIpPrefix_STATUS
	err = status.AssignProperties_From_CustomIpPrefix_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_CustomIpPrefix_STATUS() to populate field Status")
	}
	prefix.Status = status

	// No error
	return nil
}

// AssignProperties_To_CustomIpPrefix populates the provided destination CustomIpPrefix from our CustomIpPrefix
func (prefix *CustomIpPrefix) AssignProperties_To_CustomIpPrefix(destination *v1api20220701s.CustomIpPrefix) error {

	// ObjectMeta
	destination.ObjectMeta = *prefix.ObjectMeta.DeepCopy()

	// Spec
	var spec v1api20220701s.CustomIpPrefix_Spec
	err := prefix.Spec.AssignProperties_To_CustomIpPrefix_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_CustomIpPrefix_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1api20220701s.CustomIpPrefix_STATUS
	err = prefix.Status.AssignProperties_To_CustomIpPrefix_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_CustomIpPrefix_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (prefix *CustomIpPrefix) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: prefix.Spec.OriginalVersion(),
		Kind:    "CustomIpPrefix",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /network/resource-manager/Microsoft.Network/stable/2022-07-01/customIpPrefix.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/customIpPrefixes/{customIpPrefixName}
type CustomIpPrefixList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomIpPrefix `json:"items"`
}

// +kubebuilder:validation:Enum={"2022-07-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2022-07-01")

type CustomIpPrefix_Spec struct {
	// Asn: The ASN for CIDR advertising. Should be an integer as string.
	Asn *string `json:"asn,omitempty"`

	// AuthorizationMessage: Authorization message for WAN validation.
	AuthorizationMessage *string `json:"authorizationMessage,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Cidr: The prefix range in CIDR notation. Should include the start address and the prefix length.
	Cidr *string `json:"cidr,omitempty"`

	// CommissionedState: The commissioned state of the Custom IP Prefix.
	CommissionedState *CustomIpPrefixPropertiesFormat_CommissionedState `json:"commissionedState,omitempty"`

	// CustomIpPrefixParent: The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
	CustomIpPrefixParent *CustomIpPrefixSubResource `json:"customIpPrefixParent,omitempty"`

	// ExpressRouteAdvertise: Whether to do express route advertise.
	ExpressRouteAdvertise *bool `json:"expressRouteAdvertise,omitempty"`

	// ExtendedLocation: The extended location of the custom IP prefix.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Geo: The Geo for CIDR advertising. Should be an Geo code.
	Geo *CustomIpPrefixPropertiesFormat_Geo `json:"geo,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// NoInternetAdvertise: Whether to Advertise the range to Internet.
	NoInternetAdvertise *bool `json:"noInternetAdvertise,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// PrefixType: Type of custom IP prefix. Should be Singular, Parent, or Child.
	PrefixType *CustomIpPrefixPropertiesFormat_PrefixType `json:"prefixType,omitempty"`

	// SignedMessage: Signed message for WAN validation.
	SignedMessage *string `json:"signedMessage,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &CustomIpPrefix_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (prefix *CustomIpPrefix_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if prefix == nil {
		return nil, nil
	}
	result := &CustomIpPrefix_Spec_ARM{}

	// Set property ‘ExtendedLocation’:
	if prefix.ExtendedLocation != nil {
		extendedLocation_ARM, err := (*prefix.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocation_ARM.(*ExtendedLocation_ARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	if prefix.Location != nil {
		location := *prefix.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if prefix.Asn != nil ||
		prefix.AuthorizationMessage != nil ||
		prefix.Cidr != nil ||
		prefix.CommissionedState != nil ||
		prefix.CustomIpPrefixParent != nil ||
		prefix.ExpressRouteAdvertise != nil ||
		prefix.Geo != nil ||
		prefix.NoInternetAdvertise != nil ||
		prefix.PrefixType != nil ||
		prefix.SignedMessage != nil {
		result.Properties = &CustomIpPrefixPropertiesFormat_ARM{}
	}
	if prefix.Asn != nil {
		asn := *prefix.Asn
		result.Properties.Asn = &asn
	}
	if prefix.AuthorizationMessage != nil {
		authorizationMessage := *prefix.AuthorizationMessage
		result.Properties.AuthorizationMessage = &authorizationMessage
	}
	if prefix.Cidr != nil {
		cidr := *prefix.Cidr
		result.Properties.Cidr = &cidr
	}
	if prefix.CommissionedState != nil {
		commissionedState := *prefix.CommissionedState
		result.Properties.CommissionedState = &commissionedState
	}
	if prefix.CustomIpPrefixParent != nil {
		customIpPrefixParent_ARM, err := (*prefix.CustomIpPrefixParent).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customIpPrefixParent := *customIpPrefixParent_ARM.(*CustomIpPrefixSubResource_ARM)
		result.Properties.CustomIpPrefixParent = &customIpPrefixParent
	}
	if prefix.ExpressRouteAdvertise != nil {
		expressRouteAdvertise := *prefix.ExpressRouteAdvertise
		result.Properties.ExpressRouteAdvertise = &expressRouteAdvertise
	}
	if prefix.Geo != nil {
		geo := *prefix.Geo
		result.Properties.Geo = &geo
	}
	if prefix.NoInternetAdvertise != nil {
		noInternetAdvertise := *prefix.NoInternetAdvertise
		result.Properties.NoInternetAdvertise = &noInternetAdvertise
	}
	if prefix.PrefixType != nil {
		prefixType := *prefix.PrefixType
		result.Properties.PrefixType = &prefixType
	}
	if prefix.SignedMessage != nil {
		signedMessage := *prefix.SignedMessage
		result.Properties.SignedMessage = &signedMessage
	}

	// Set property ‘Tags’:
	if prefix.Tags != nil {
		result.Tags = make(map[string]string, len(prefix.Tags))
		for key, value := range prefix.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range prefix.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (prefix *CustomIpPrefix_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomIpPrefix_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (prefix *CustomIpPrefix_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomIpPrefix_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomIpPrefix_Spec_ARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Asn != nil {
			asn := *typedInput.Properties.Asn
			prefix.Asn = &asn
		}
	}

	// Set property ‘AuthorizationMessage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AuthorizationMessage != nil {
			authorizationMessage := *typedInput.Properties.AuthorizationMessage
			prefix.AuthorizationMessage = &authorizationMessage
		}
	}

	// Set property ‘AzureName’:
	prefix.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Cidr’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cidr != nil {
			cidr := *typedInput.Properties.Cidr
			prefix.Cidr = &cidr
		}
	}

	// Set property ‘CommissionedState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CommissionedState != nil {
			commissionedState := *typedInput.Properties.CommissionedState
			prefix.CommissionedState = &commissionedState
		}
	}

	// Set property ‘CustomIpPrefixParent’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomIpPrefixParent != nil {
			var customIpPrefixParent1 CustomIpPrefixSubResource
			err := customIpPrefixParent1.PopulateFromARM(owner, *typedInput.Properties.CustomIpPrefixParent)
			if err != nil {
				return err
			}
			customIpPrefixParent := customIpPrefixParent1
			prefix.CustomIpPrefixParent = &customIpPrefixParent
		}
	}

	// Set property ‘ExpressRouteAdvertise’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpressRouteAdvertise != nil {
			expressRouteAdvertise := *typedInput.Properties.ExpressRouteAdvertise
			prefix.ExpressRouteAdvertise = &expressRouteAdvertise
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		prefix.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Geo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Geo != nil {
			geo := *typedInput.Properties.Geo
			prefix.Geo = &geo
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		prefix.Location = &location
	}

	// Set property ‘NoInternetAdvertise’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NoInternetAdvertise != nil {
			noInternetAdvertise := *typedInput.Properties.NoInternetAdvertise
			prefix.NoInternetAdvertise = &noInternetAdvertise
		}
	}

	// Set property ‘Owner’:
	prefix.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘PrefixType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrefixType != nil {
			prefixType := *typedInput.Properties.PrefixType
			prefix.PrefixType = &prefixType
		}
	}

	// Set property ‘SignedMessage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SignedMessage != nil {
			signedMessage := *typedInput.Properties.SignedMessage
			prefix.SignedMessage = &signedMessage
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		prefix.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			prefix.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		prefix.Zones = append(prefix.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &CustomIpPrefix_Spec{}

// ConvertSpecFrom populates our CustomIpPrefix_Spec from the provided source
func (prefix *CustomIpPrefix_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1api20220701s.CustomIpPrefix_Spec)
	if ok {
		// Populate our instance from source
		return prefix.AssignProperties_From_CustomIpPrefix_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1api20220701s.CustomIpPrefix_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = prefix.AssignProperties_From_CustomIpPrefix_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our CustomIpPrefix_Spec
func (prefix *CustomIpPrefix_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1api20220701s.CustomIpPrefix_Spec)
	if ok {
		// Populate destination from our instance
		return prefix.AssignProperties_To_CustomIpPrefix_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20220701s.CustomIpPrefix_Spec{}
	err := prefix.AssignProperties_To_CustomIpPrefix_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_CustomIpPrefix_Spec populates our CustomIpPrefix_Spec from the provided source CustomIpPrefix_Spec
func (prefix *CustomIpPrefix_Spec) AssignProperties_From_CustomIpPrefix_Spec(source *v1api20220701s.CustomIpPrefix_Spec) error {

	// Asn
	prefix.Asn = genruntime.ClonePointerToString(source.Asn)

	// AuthorizationMessage
	prefix.AuthorizationMessage = genruntime.ClonePointerToString(source.AuthorizationMessage)

	// AzureName
	prefix.AzureName = source.AzureName

	// Cidr
	prefix.Cidr = genruntime.ClonePointerToString(source.Cidr)

	// CommissionedState
	if source.CommissionedState != nil {
		commissionedState := CustomIpPrefixPropertiesFormat_CommissionedState(*source.CommissionedState)
		prefix.CommissionedState = &commissionedState
	} else {
		prefix.CommissionedState = nil
	}

	// CustomIpPrefixParent
	if source.CustomIpPrefixParent != nil {
		var customIpPrefixParent CustomIpPrefixSubResource
		err := customIpPrefixParent.AssignProperties_From_CustomIpPrefixSubResource(source.CustomIpPrefixParent)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CustomIpPrefixSubResource() to populate field CustomIpPrefixParent")
		}
		prefix.CustomIpPrefixParent = &customIpPrefixParent
	} else {
		prefix.CustomIpPrefixParent = nil
	}

	// ExpressRouteAdvertise
	if source.ExpressRouteAdvertise != nil {
		expressRouteAdvertise := *source.ExpressRouteAdvertise
		prefix.ExpressRouteAdvertise = &expressRouteAdvertise
	} else {
		prefix.ExpressRouteAdvertise = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignProperties_From_ExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExtendedLocation() to populate field ExtendedLocation")
		}
		prefix.ExtendedLocation = &extendedLocation
	} else {
		prefix.ExtendedLocation = nil
	}

	// Geo
	if source.Geo != nil {
		geo := CustomIpPrefixPropertiesFormat_Geo(*source.Geo)
		prefix.Geo = &geo
	} else {
		prefix.Geo = nil
	}

	// Location
	prefix.Location = genruntime.ClonePointerToString(source.Location)

	// NoInternetAdvertise
	if source.NoInternetAdvertise != nil {
		noInternetAdvertise := *source.NoInternetAdvertise
		prefix.NoInternetAdvertise = &noInternetAdvertise
	} else {
		prefix.NoInternetAdvertise = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		prefix.Owner = &owner
	} else {
		prefix.Owner = nil
	}

	// PrefixType
	if source.PrefixType != nil {
		prefixType := CustomIpPrefixPropertiesFormat_PrefixType(*source.PrefixType)
		prefix.PrefixType = &prefixType
	} else {
		prefix.PrefixType = nil
	}

	// SignedMessage
	prefix.SignedMessage = genruntime.ClonePointerToString(source.SignedMessage)

	// Tags
	prefix.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	prefix.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_CustomIpPrefix_Spec populates the provided destination CustomIpPrefix_Spec from our CustomIpPrefix_Spec
func (prefix *CustomIpPrefix_Spec) AssignProperties_To_CustomIpPrefix_Spec(destination *v1api20220701s.CustomIpPrefix_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	destination.Asn = genruntime.ClonePointerToString(prefix.Asn)

	// AuthorizationMessage
	destination.AuthorizationMessage = genruntime.ClonePointerToString(prefix.AuthorizationMessage)

	// AzureName
	destination.AzureName = prefix.AzureName

	// Cidr
	destination.Cidr = genruntime.ClonePointerToString(prefix.Cidr)

	// CommissionedState
	if prefix.CommissionedState != nil {
		commissionedState := string(*prefix.CommissionedState)
		destination.CommissionedState = &commissionedState
	} else {
		destination.CommissionedState = nil
	}

	// CustomIpPrefixParent
	if prefix.CustomIpPrefixParent != nil {
		var customIpPrefixParent v1api20220701s.CustomIpPrefixSubResource
		err := prefix.CustomIpPrefixParent.AssignProperties_To_CustomIpPrefixSubResource(&customIpPrefixParent)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CustomIpPrefixSubResource() to populate field CustomIpPrefixParent")
		}
		destination.CustomIpPrefixParent = &customIpPrefixParent
	} else {
		destination.CustomIpPrefixParent = nil
	}

	// ExpressRouteAdvertise
	if prefix.ExpressRouteAdvertise != nil {
		expressRouteAdvertise := *prefix.ExpressRouteAdvertise
		destination.ExpressRouteAdvertise = &expressRouteAdvertise
	} else {
		destination.ExpressRouteAdvertise = nil
	}

	// ExtendedLocation
	if prefix.ExtendedLocation != nil {
		var extendedLocation v1api20220701s.ExtendedLocation
		err := prefix.ExtendedLocation.AssignProperties_To_ExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Geo
	if prefix.Geo != nil {
		geo := string(*prefix.Geo)
		destination.Geo = &geo
	} else {
		destination.Geo = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(prefix.Location)

	// NoInternetAdvertise
	if prefix.NoInternetAdvertise != nil {
		noInternetAdvertise := *prefix.NoInternetAdvertise
		destination.NoInternetAdvertise = &noInternetAdvertise
	} else {
		destination.NoInternetAdvertise = nil
	}

	// OriginalVersion
	destination.OriginalVersion = prefix.OriginalVersion()

	// Owner
	if prefix.Owner != nil {
		owner := prefix.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrefixType
	if prefix.PrefixType != nil {
		prefixType := string(*prefix.PrefixType)
		destination.PrefixType = &prefixType
	} else {
		destination.PrefixType = nil
	}

	// SignedMessage
	destination.SignedMessage = genruntime.ClonePointerToString(prefix.SignedMessage)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(prefix.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(prefix.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_CustomIpPrefix_STATUS populates our CustomIpPrefix_Spec from the provided source CustomIpPrefix_STATUS
func (prefix *CustomIpPrefix_Spec) Initialize_From_CustomIpPrefix_STATUS(source *CustomIpPrefix_STATUS) error {

	// Asn
	prefix.Asn = genruntime.ClonePointerToString(source.Asn)

	// AuthorizationMessage
	prefix.AuthorizationMessage = genruntime.ClonePointerToString(source.AuthorizationMessage)

	// Cidr
	prefix.Cidr = genruntime.ClonePointerToString(source.Cidr)

	// CommissionedState
	if source.CommissionedState != nil {
		commissionedState := CustomIpPrefixPropertiesFormat_CommissionedState(*source.CommissionedState)
		prefix.CommissionedState = &commissionedState
	} else {
		prefix.CommissionedState = nil
	}

	// CustomIpPrefixParent
	if source.CustomIpPrefixParent != nil {
		var customIpPrefixParent CustomIpPrefixSubResource
		err := customIpPrefixParent.Initialize_From_CustomIpPrefixSubResource_STATUS(source.CustomIpPrefixParent)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_CustomIpPrefixSubResource_STATUS() to populate field CustomIpPrefixParent")
		}
		prefix.CustomIpPrefixParent = &customIpPrefixParent
	} else {
		prefix.CustomIpPrefixParent = nil
	}

	// ExpressRouteAdvertise
	if source.ExpressRouteAdvertise != nil {
		expressRouteAdvertise := *source.ExpressRouteAdvertise
		prefix.ExpressRouteAdvertise = &expressRouteAdvertise
	} else {
		prefix.ExpressRouteAdvertise = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.Initialize_From_ExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_ExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		prefix.ExtendedLocation = &extendedLocation
	} else {
		prefix.ExtendedLocation = nil
	}

	// Geo
	if source.Geo != nil {
		geo := CustomIpPrefixPropertiesFormat_Geo(*source.Geo)
		prefix.Geo = &geo
	} else {
		prefix.Geo = nil
	}

	// Location
	prefix.Location = genruntime.ClonePointerToString(source.Location)

	// NoInternetAdvertise
	if source.NoInternetAdvertise != nil {
		noInternetAdvertise := *source.NoInternetAdvertise
		prefix.NoInternetAdvertise = &noInternetAdvertise
	} else {
		prefix.NoInternetAdvertise = nil
	}

	// PrefixType
	if source.PrefixType != nil {
		prefixType := CustomIpPrefixPropertiesFormat_PrefixType(*source.PrefixType)
		prefix.PrefixType = &prefixType
	} else {
		prefix.PrefixType = nil
	}

	// SignedMessage
	prefix.SignedMessage = genruntime.ClonePointerToString(source.SignedMessage)

	// Tags
	prefix.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	prefix.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (prefix *CustomIpPrefix_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (prefix *CustomIpPrefix_Spec) SetAzureName(azureName string) { prefix.AzureName = azureName }

// Custom IP prefix resource.
type CustomIpPrefix_STATUS struct {
	// Asn: The ASN for CIDR advertising. Should be an integer as string.
	Asn *string `json:"asn,omitempty"`

	// AuthorizationMessage: Authorization message for WAN validation.
	AuthorizationMessage *string `json:"authorizationMessage,omitempty"`

	// ChildCustomIpPrefixes: The list of all Children for IPv6 /48 CustomIpPrefix.
	ChildCustomIpPrefixes []CustomIpPrefixSubResource_STATUS `json:"childCustomIpPrefixes,omitempty"`

	// Cidr: The prefix range in CIDR notation. Should include the start address and the prefix length.
	Cidr *string `json:"cidr,omitempty"`

	// CommissionedState: The commissioned state of the Custom IP Prefix.
	CommissionedState *CustomIpPrefixPropertiesFormat_CommissionedState_STATUS `json:"commissionedState,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CustomIpPrefixParent: The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
	CustomIpPrefixParent *CustomIpPrefixSubResource_STATUS `json:"customIpPrefixParent,omitempty"`

	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// ExpressRouteAdvertise: Whether to do express route advertise.
	ExpressRouteAdvertise *bool `json:"expressRouteAdvertise,omitempty"`

	// ExtendedLocation: The extended location of the custom IP prefix.
	ExtendedLocation *ExtendedLocation_STATUS `json:"extendedLocation,omitempty"`

	// FailedReason: The reason why resource is in failed state.
	FailedReason *string `json:"failedReason,omitempty"`

	// Geo: The Geo for CIDR advertising. Should be an Geo code.
	Geo *CustomIpPrefixPropertiesFormat_Geo_STATUS `json:"geo,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// NoInternetAdvertise: Whether to Advertise the range to Internet.
	NoInternetAdvertise *bool `json:"noInternetAdvertise,omitempty"`

	// PrefixType: Type of custom IP prefix. Should be Singular, Parent, or Child.
	PrefixType *CustomIpPrefixPropertiesFormat_PrefixType_STATUS `json:"prefixType,omitempty"`

	// ProvisioningState: The provisioning state of the custom IP prefix resource.
	ProvisioningState *CustomIpPrefixProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// PublicIpPrefixes: The list of all referenced PublicIpPrefixes.
	PublicIpPrefixes []CustomIpPrefixSubResource_STATUS `json:"publicIpPrefixes,omitempty"`

	// ResourceGuid: The resource GUID property of the custom IP prefix resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	// SignedMessage: Signed message for WAN validation.
	SignedMessage *string `json:"signedMessage,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// Zones: A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &CustomIpPrefix_STATUS{}

// ConvertStatusFrom populates our CustomIpPrefix_STATUS from the provided source
func (prefix *CustomIpPrefix_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1api20220701s.CustomIpPrefix_STATUS)
	if ok {
		// Populate our instance from source
		return prefix.AssignProperties_From_CustomIpPrefix_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v1api20220701s.CustomIpPrefix_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = prefix.AssignProperties_From_CustomIpPrefix_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our CustomIpPrefix_STATUS
func (prefix *CustomIpPrefix_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1api20220701s.CustomIpPrefix_STATUS)
	if ok {
		// Populate destination from our instance
		return prefix.AssignProperties_To_CustomIpPrefix_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20220701s.CustomIpPrefix_STATUS{}
	err := prefix.AssignProperties_To_CustomIpPrefix_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &CustomIpPrefix_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (prefix *CustomIpPrefix_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomIpPrefix_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (prefix *CustomIpPrefix_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomIpPrefix_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomIpPrefix_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Asn != nil {
			asn := *typedInput.Properties.Asn
			prefix.Asn = &asn
		}
	}

	// Set property ‘AuthorizationMessage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AuthorizationMessage != nil {
			authorizationMessage := *typedInput.Properties.AuthorizationMessage
			prefix.AuthorizationMessage = &authorizationMessage
		}
	}

	// Set property ‘ChildCustomIpPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ChildCustomIpPrefixes {
			var item1 CustomIpPrefixSubResource_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			prefix.ChildCustomIpPrefixes = append(prefix.ChildCustomIpPrefixes, item1)
		}
	}

	// Set property ‘Cidr’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cidr != nil {
			cidr := *typedInput.Properties.Cidr
			prefix.Cidr = &cidr
		}
	}

	// Set property ‘CommissionedState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CommissionedState != nil {
			commissionedState := *typedInput.Properties.CommissionedState
			prefix.CommissionedState = &commissionedState
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CustomIpPrefixParent’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomIpPrefixParent != nil {
			var customIpPrefixParent1 CustomIpPrefixSubResource_STATUS
			err := customIpPrefixParent1.PopulateFromARM(owner, *typedInput.Properties.CustomIpPrefixParent)
			if err != nil {
				return err
			}
			customIpPrefixParent := customIpPrefixParent1
			prefix.CustomIpPrefixParent = &customIpPrefixParent
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		prefix.Etag = &etag
	}

	// Set property ‘ExpressRouteAdvertise’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpressRouteAdvertise != nil {
			expressRouteAdvertise := *typedInput.Properties.ExpressRouteAdvertise
			prefix.ExpressRouteAdvertise = &expressRouteAdvertise
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		prefix.ExtendedLocation = &extendedLocation
	}

	// Set property ‘FailedReason’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FailedReason != nil {
			failedReason := *typedInput.Properties.FailedReason
			prefix.FailedReason = &failedReason
		}
	}

	// Set property ‘Geo’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Geo != nil {
			geo := *typedInput.Properties.Geo
			prefix.Geo = &geo
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		prefix.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		prefix.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		prefix.Name = &name
	}

	// Set property ‘NoInternetAdvertise’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NoInternetAdvertise != nil {
			noInternetAdvertise := *typedInput.Properties.NoInternetAdvertise
			prefix.NoInternetAdvertise = &noInternetAdvertise
		}
	}

	// Set property ‘PrefixType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrefixType != nil {
			prefixType := *typedInput.Properties.PrefixType
			prefix.PrefixType = &prefixType
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			prefix.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIpPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PublicIpPrefixes {
			var item1 CustomIpPrefixSubResource_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			prefix.PublicIpPrefixes = append(prefix.PublicIpPrefixes, item1)
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			prefix.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘SignedMessage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SignedMessage != nil {
			signedMessage := *typedInput.Properties.SignedMessage
			prefix.SignedMessage = &signedMessage
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		prefix.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			prefix.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		prefix.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		prefix.Zones = append(prefix.Zones, item)
	}

	// No error
	return nil
}

// AssignProperties_From_CustomIpPrefix_STATUS populates our CustomIpPrefix_STATUS from the provided source CustomIpPrefix_STATUS
func (prefix *CustomIpPrefix_STATUS) AssignProperties_From_CustomIpPrefix_STATUS(source *v1api20220701s.CustomIpPrefix_STATUS) error {

	// Asn
	prefix.Asn = genruntime.ClonePointerToString(source.Asn)

	// AuthorizationMessage
	prefix.AuthorizationMessage = genruntime.ClonePointerToString(source.AuthorizationMessage)

	// ChildCustomIpPrefixes
	if source.ChildCustomIpPrefixes != nil {
		childCustomIpPrefixList := make([]CustomIpPrefixSubResource_STATUS, len(source.ChildCustomIpPrefixes))
		for childCustomIpPrefixIndex, childCustomIpPrefixItem := range source.ChildCustomIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			childCustomIpPrefixItem := childCustomIpPrefixItem
			var childCustomIpPrefix CustomIpPrefixSubResource_STATUS
			err := childCustomIpPrefix.AssignProperties_From_CustomIpPrefixSubResource_STATUS(&childCustomIpPrefixItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CustomIpPrefixSubResource_STATUS() to populate field ChildCustomIpPrefixes")
			}
			childCustomIpPrefixList[childCustomIpPrefixIndex] = childCustomIpPrefix
		}
		prefix.ChildCustomIpPrefixes = childCustomIpPrefixList
	} else {
		prefix.ChildCustomIpPrefixes = nil
	}

	// Cidr
	prefix.Cidr = genruntime.ClonePointerToString(source.Cidr)

	// CommissionedState
	if source.CommissionedState != nil {
		commissionedState := CustomIpPrefixPropertiesFormat_CommissionedState_STATUS(*source.CommissionedState)
		prefix.CommissionedState = &commissionedState
	} else {
		prefix.CommissionedState = nil
	}

	// Conditions
	prefix.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CustomIpPrefixParent
	if source.CustomIpPrefixParent != nil {
		var customIpPrefixParent CustomIpPrefixSubResource_STATUS
		err := customIpPrefixParent.AssignProperties_From_CustomIpPrefixSubResource_STATUS(source.CustomIpPrefixParent)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CustomIpPrefixSubResource_STATUS() to populate field CustomIpPrefixParent")
		}
		prefix.CustomIpPrefixParent = &customIpPrefixParent
	} else {
		prefix.CustomIpPrefixParent = nil
	}

	// Etag
	prefix.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExpressRouteAdvertise
	if source.ExpressRouteAdvertise != nil {
		expressRouteAdvertise := *source.ExpressRouteAdvertise
		prefix.ExpressRouteAdvertise = &expressRouteAdvertise
	} else {
		prefix.ExpressRouteAdvertise = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignProperties_From_ExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		prefix.ExtendedLocation = &extendedLocation
	} else {
		prefix.ExtendedLocation = nil
	}

	// FailedReason
	prefix.FailedReason = genruntime.ClonePointerToString(source.FailedReason)

	// Geo
	if source.Geo != nil {
		geo := CustomIpPrefixPropertiesFormat_Geo_STATUS(*source.Geo)
		prefix.Geo = &geo
	} else {
		prefix.Geo = nil
	}

	// Id
	prefix.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	prefix.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	prefix.Name = genruntime.ClonePointerToString(source.Name)

	// NoInternetAdvertise
	if source.NoInternetAdvertise != nil {
		noInternetAdvertise := *source.NoInternetAdvertise
		prefix.NoInternetAdvertise = &noInternetAdvertise
	} else {
		prefix.NoInternetAdvertise = nil
	}

	// PrefixType
	if source.PrefixType != nil {
		prefixType := CustomIpPrefixPropertiesFormat_PrefixType_STATUS(*source.PrefixType)
		prefix.PrefixType = &prefixType
	} else {
		prefix.PrefixType = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := CustomIpPrefixProvisioningState_STATUS(*source.ProvisioningState)
		prefix.ProvisioningState = &provisioningState
	} else {
		prefix.ProvisioningState = nil
	}

	// PublicIpPrefixes
	if source.PublicIpPrefixes != nil {
		publicIpPrefixList := make([]CustomIpPrefixSubResource_STATUS, len(source.PublicIpPrefixes))
		for publicIpPrefixIndex, publicIpPrefixItem := range source.PublicIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			publicIpPrefixItem := publicIpPrefixItem
			var publicIpPrefix CustomIpPrefixSubResource_STATUS
			err := publicIpPrefix.AssignProperties_From_CustomIpPrefixSubResource_STATUS(&publicIpPrefixItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CustomIpPrefixSubResource_STATUS() to populate field PublicIpPrefixes")
			}
			publicIpPrefixList[publicIpPrefixIndex] = publicIpPrefix
		}
		prefix.PublicIpPrefixes = publicIpPrefixList
	} else {
		prefix.PublicIpPrefixes = nil
	}

	// ResourceGuid
	prefix.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// SignedMessage
	prefix.SignedMessage = genruntime.ClonePointerToString(source.SignedMessage)

	// Tags
	prefix.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	prefix.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	prefix.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_CustomIpPrefix_STATUS populates the provided destination CustomIpPrefix_STATUS from our CustomIpPrefix_STATUS
func (prefix *CustomIpPrefix_STATUS) AssignProperties_To_CustomIpPrefix_STATUS(destination *v1api20220701s.CustomIpPrefix_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	destination.Asn = genruntime.ClonePointerToString(prefix.Asn)

	// AuthorizationMessage
	destination.AuthorizationMessage = genruntime.ClonePointerToString(prefix.AuthorizationMessage)

	// ChildCustomIpPrefixes
	if prefix.ChildCustomIpPrefixes != nil {
		childCustomIpPrefixList := make([]v1api20220701s.CustomIpPrefixSubResource_STATUS, len(prefix.ChildCustomIpPrefixes))
		for childCustomIpPrefixIndex, childCustomIpPrefixItem := range prefix.ChildCustomIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			childCustomIpPrefixItem := childCustomIpPrefixItem
			var childCustomIpPrefix v1api20220701s.CustomIpPrefixSubResource_STATUS
			err := childCustomIpPrefixItem.AssignProperties_To_CustomIpPrefixSubResource_STATUS(&childCustomIpPrefix)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CustomIpPrefixSubResource_STATUS() to populate field ChildCustomIpPrefixes")
			}
			childCustomIpPrefixList[childCustomIpPrefixIndex] = childCustomIpPrefix
		}
		destination.ChildCustomIpPrefixes = childCustomIpPrefixList
	} else {
		destination.ChildCustomIpPrefixes = nil
	}

	// Cidr
	destination.Cidr = genruntime.ClonePointerToString(prefix.Cidr)

	// CommissionedState
	if prefix.CommissionedState != nil {
		commissionedState := string(*prefix.CommissionedState)
		destination.CommissionedState = &commissionedState
	} else {
		destination.CommissionedState = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(prefix.Conditions)

	// CustomIpPrefixParent
	if prefix.CustomIpPrefixParent != nil {
		var customIpPrefixParent v1api20220701s.CustomIpPrefixSubResource_STATUS
		err := prefix.CustomIpPrefixParent.AssignProperties_To_CustomIpPrefixSubResource_STATUS(&customIpPrefixParent)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CustomIpPrefixSubResource_STATUS() to populate field CustomIpPrefixParent")
		}
		destination.CustomIpPrefixParent = &customIpPrefixParent
	} else {
		destination.CustomIpPrefixParent = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(prefix.Etag)

	// ExpressRouteAdvertise
	if prefix.ExpressRouteAdvertise != nil {
		expressRouteAdvertise := *prefix.ExpressRouteAdvertise
		destination.ExpressRouteAdvertise = &expressRouteAdvertise
	} else {
		destination.ExpressRouteAdvertise = nil
	}

	// ExtendedLocation
	if prefix.ExtendedLocation != nil {
		var extendedLocation v1api20220701s.ExtendedLocation_STATUS
		err := prefix.ExtendedLocation.AssignProperties_To_ExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FailedReason
	destination.FailedReason = genruntime.ClonePointerToString(prefix.FailedReason)

	// Geo
	if prefix.Geo != nil {
		geo := string(*prefix.Geo)
		destination.Geo = &geo
	} else {
		destination.Geo = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(prefix.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(prefix.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(prefix.Name)

	// NoInternetAdvertise
	if prefix.NoInternetAdvertise != nil {
		noInternetAdvertise := *prefix.NoInternetAdvertise
		destination.NoInternetAdvertise = &noInternetAdvertise
	} else {
		destination.NoInternetAdvertise = nil
	}

	// PrefixType
	if prefix.PrefixType != nil {
		prefixType := string(*prefix.PrefixType)
		destination.PrefixType = &prefixType
	} else {
		destination.PrefixType = nil
	}

	// ProvisioningState
	if prefix.ProvisioningState != nil {
		provisioningState := string(*prefix.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIpPrefixes
	if prefix.PublicIpPrefixes != nil {
		publicIpPrefixList := make([]v1api20220701s.CustomIpPrefixSubResource_STATUS, len(prefix.PublicIpPrefixes))
		for publicIpPrefixIndex, publicIpPrefixItem := range prefix.PublicIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			publicIpPrefixItem := publicIpPrefixItem
			var publicIpPrefix v1api20220701s.CustomIpPrefixSubResource_STATUS
			err := publicIpPrefixItem.AssignProperties_To_CustomIpPrefixSubResource_STATUS(&publicIpPrefix)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CustomIpPrefixSubResource_STATUS() to populate field PublicIpPrefixes")
			}
			publicIpPrefixList[publicIpPrefixIndex] = publicIpPrefix
		}
		destination.PublicIpPrefixes = publicIpPrefixList
	} else {
		destination.PublicIpPrefixes = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(prefix.ResourceGuid)

	// SignedMessage
	destination.SignedMessage = genruntime.ClonePointerToString(prefix.SignedMessage)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(prefix.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(prefix.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(prefix.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Commissioned","CommissionedNoInternetAdvertise","Commissioning","Decommissioning","Deprovisioned","Deprovisioning","Provisioned","Provisioning"}
type CustomIpPrefixPropertiesFormat_CommissionedState string

const (
	CustomIpPrefixPropertiesFormat_CommissionedState_Commissioned                    = CustomIpPrefixPropertiesFormat_CommissionedState("Commissioned")
	CustomIpPrefixPropertiesFormat_CommissionedState_CommissionedNoInternetAdvertise = CustomIpPrefixPropertiesFormat_CommissionedState("CommissionedNoInternetAdvertise")
	CustomIpPrefixPropertiesFormat_CommissionedState_Commissioning                   = CustomIpPrefixPropertiesFormat_CommissionedState("Commissioning")
	CustomIpPrefixPropertiesFormat_CommissionedState_Decommissioning                 = CustomIpPrefixPropertiesFormat_CommissionedState("Decommissioning")
	CustomIpPrefixPropertiesFormat_CommissionedState_Deprovisioned                   = CustomIpPrefixPropertiesFormat_CommissionedState("Deprovisioned")
	CustomIpPrefixPropertiesFormat_CommissionedState_Deprovisioning                  = CustomIpPrefixPropertiesFormat_CommissionedState("Deprovisioning")
	CustomIpPrefixPropertiesFormat_CommissionedState_Provisioned                     = CustomIpPrefixPropertiesFormat_CommissionedState("Provisioned")
	CustomIpPrefixPropertiesFormat_CommissionedState_Provisioning                    = CustomIpPrefixPropertiesFormat_CommissionedState("Provisioning")
)

type CustomIpPrefixPropertiesFormat_CommissionedState_STATUS string

const (
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Commissioned                    = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Commissioned")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_CommissionedNoInternetAdvertise = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("CommissionedNoInternetAdvertise")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Commissioning                   = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Commissioning")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Decommissioning                 = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Decommissioning")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Deprovisioned                   = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Deprovisioned")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Deprovisioning                  = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Deprovisioning")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Provisioned                     = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Provisioned")
	CustomIpPrefixPropertiesFormat_CommissionedState_STATUS_Provisioning                    = CustomIpPrefixPropertiesFormat_CommissionedState_STATUS("Provisioning")
)

// +kubebuilder:validation:Enum={"AFRI","APAC","AQ","EURO","GLOBAL","LATAM","ME","NAM","OCEANIA"}
type CustomIpPrefixPropertiesFormat_Geo string

const (
	CustomIpPrefixPropertiesFormat_Geo_AFRI    = CustomIpPrefixPropertiesFormat_Geo("AFRI")
	CustomIpPrefixPropertiesFormat_Geo_APAC    = CustomIpPrefixPropertiesFormat_Geo("APAC")
	CustomIpPrefixPropertiesFormat_Geo_AQ      = CustomIpPrefixPropertiesFormat_Geo("AQ")
	CustomIpPrefixPropertiesFormat_Geo_EURO    = CustomIpPrefixPropertiesFormat_Geo("EURO")
	CustomIpPrefixPropertiesFormat_Geo_GLOBAL  = CustomIpPrefixPropertiesFormat_Geo("GLOBAL")
	CustomIpPrefixPropertiesFormat_Geo_LATAM   = CustomIpPrefixPropertiesFormat_Geo("LATAM")
	CustomIpPrefixPropertiesFormat_Geo_ME      = CustomIpPrefixPropertiesFormat_Geo("ME")
	CustomIpPrefixPropertiesFormat_Geo_NAM     = CustomIpPrefixPropertiesFormat_Geo("NAM")
	CustomIpPrefixPropertiesFormat_Geo_OCEANIA = CustomIpPrefixPropertiesFormat_Geo("OCEANIA")
)

type CustomIpPrefixPropertiesFormat_Geo_STATUS string

const (
	CustomIpPrefixPropertiesFormat_Geo_STATUS_AFRI    = CustomIpPrefixPropertiesFormat_Geo_STATUS("AFRI")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_APAC    = CustomIpPrefixPropertiesFormat_Geo_STATUS("APAC")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_AQ      = CustomIpPrefixPropertiesFormat_Geo_STATUS("AQ")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_EURO    = CustomIpPrefixPropertiesFormat_Geo_STATUS("EURO")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_GLOBAL  = CustomIpPrefixPropertiesFormat_Geo_STATUS("GLOBAL")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_LATAM   = CustomIpPrefixPropertiesFormat_Geo_STATUS("LATAM")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_ME      = CustomIpPrefixPropertiesFormat_Geo_STATUS("ME")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_NAM     = CustomIpPrefixPropertiesFormat_Geo_STATUS("NAM")
	CustomIpPrefixPropertiesFormat_Geo_STATUS_OCEANIA = CustomIpPrefixPropertiesFormat_Geo_STATUS("OCEANIA")
)

// +kubebuilder:validation:Enum={"Child","Parent","Singular"}
type CustomIpPrefixPropertiesFormat_PrefixType string

const (
	CustomIpPrefixPropertiesFormat_PrefixType_Child    = CustomIpPrefixPropertiesFormat_PrefixType("Child")
	CustomIpPrefixPropertiesFormat_PrefixType_Parent   = CustomIpPrefixPropertiesFormat_PrefixType("Parent")
	CustomIpPrefixPropertiesFormat_PrefixType_Singular = CustomIpPrefixPropertiesFormat_PrefixType("Singular")
)

type CustomIpPrefixPropertiesFormat_PrefixType_STATUS string

const (
	CustomIpPrefixPropertiesFormat_PrefixType_STATUS_Child    = CustomIpPrefixPropertiesFormat_PrefixType_STATUS("Child")
	CustomIpPrefixPropertiesFormat_PrefixType_STATUS_Parent   = CustomIpPrefixPropertiesFormat_PrefixType_STATUS("Parent")
	CustomIpPrefixPropertiesFormat_PrefixType_STATUS_Singular = CustomIpPrefixPropertiesFormat_PrefixType_STATUS("Singular")
)

// The current provisioning state.
type CustomIpPrefixProvisioningState_STATUS string

const (
	CustomIpPrefixProvisioningState_STATUS_Deleting  = CustomIpPrefixProvisioningState_STATUS("Deleting")
	CustomIpPrefixProvisioningState_STATUS_Failed    = CustomIpPrefixProvisioningState_STATUS("Failed")
	CustomIpPrefixProvisioningState_STATUS_Succeeded = CustomIpPrefixProvisioningState_STATUS("Succeeded")
	CustomIpPrefixProvisioningState_STATUS_Updating  = CustomIpPrefixProvisioningState_STATUS("Updating")
)

// Reference to another subresource.
type CustomIpPrefixSubResource struct {
	// Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &CustomIpPrefixSubResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *CustomIpPrefixSubResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &CustomIpPrefixSubResource_ARM{}

	// Set property ‘Id’:
	if resource.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.Lookup(*resource.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *CustomIpPrefixSubResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomIpPrefixSubResource_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *CustomIpPrefixSubResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(CustomIpPrefixSubResource_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomIpPrefixSubResource_ARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignProperties_From_CustomIpPrefixSubResource populates our CustomIpPrefixSubResource from the provided source CustomIpPrefixSubResource
func (resource *CustomIpPrefixSubResource) AssignProperties_From_CustomIpPrefixSubResource(source *v1api20220701s.CustomIpPrefixSubResource) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		resource.Reference = &reference
	} else {
		resource.Reference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CustomIpPrefixSubResource populates the provided destination CustomIpPrefixSubResource from our CustomIpPrefixSubResource
func (resource *CustomIpPrefixSubResource) AssignProperties_To_CustomIpPrefixSubResource(destination *v1api20220701s.CustomIpPrefixSubResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if resource.Reference != nil {
		reference := resource.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_CustomIpPrefixSubResource_STATUS populates our CustomIpPrefixSubResource from the provided source CustomIpPrefixSubResource_STATUS
func (resource *CustomIpPrefixSubResource) Initialize_From_CustomIpPrefixSubResource_STATUS(source *CustomIpPrefixSubResource_STATUS) error {

	// Reference
	if source.Id != nil {
		reference := genruntime.CreateResourceReferenceFromARMID(*source.Id)
		resource.Reference = &reference
	} else {
		resource.Reference = nil
	}

	// No error
	return nil
}

// Reference to another subresource.
type CustomIpPrefixSubResource_STATUS struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &CustomIpPrefixSubResource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *CustomIpPrefixSubResource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomIpPrefixSubResource_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *CustomIpPrefixSubResource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomIpPrefixSubResource_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomIpPrefixSubResource_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_CustomIpPrefixSubResource_STATUS populates our CustomIpPrefixSubResource_STATUS from the provided source CustomIpPrefixSubResource_STATUS
func (resource *CustomIpPrefixSubResource_STATUS) AssignProperties_From_CustomIpPrefixSubResource_STATUS(source *v1api20220701s.CustomIpPrefixSubResource_STATUS) error {

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_CustomIpPrefixSubResource_STATUS populates the provided destination CustomIpPrefixSubResource_STATUS from our CustomIpPrefixSubResource_STATUS
func (resource *CustomIpPrefixSubResource_STATUS) AssignProperties_To_CustomIpPrefixSubResource_STATUS(destination *v1api20220701s.CustomIpPrefixSubResource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// ExtendedLocation complex type.
type ExtendedLocation struct {
	// Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	// Type: The type of the extended location.
	Type *ExtendedLocationType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	result := &ExtendedLocation_ARM{}

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if location.Type != nil {
		typeVar := *location.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignProperties_From_ExtendedLocation(source *v1api20220701s.ExtendedLocation) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignProperties_To_ExtendedLocation(destination *v1api20220701s.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ExtendedLocation_STATUS populates our ExtendedLocation from the provided source ExtendedLocation_STATUS
func (location *ExtendedLocation) Initialize_From_ExtendedLocation_STATUS(source *ExtendedLocation_STATUS) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// ExtendedLocation complex type.
type ExtendedLocation_STATUS struct {
	// Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	// Type: The type of the extended location.
	Type *ExtendedLocationType_STATUS `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ExtendedLocation_STATUS populates our ExtendedLocation_STATUS from the provided source ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignProperties_From_ExtendedLocation_STATUS(source *v1api20220701s.ExtendedLocation_STATUS) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_STATUS(*source.Type)
		location.Type = &typeVar
	} else {
		location.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ExtendedLocation_STATUS populates the provided destination ExtendedLocation_STATUS from our ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignProperties_To_ExtendedLocation_STATUS(destination *v1api20220701s.ExtendedLocation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	if location.Type != nil {
		typeVar := string(*location.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&CustomIpPrefix{}, &CustomIpPrefixList{})
}
