// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM, ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM runs a test to see if a specific instance of ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(subject ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM instances for property testing -
// lazily instantiated by ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator()
var applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator gopter.Gen

// ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator returns a generator of ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM instances for property testing.
// We first initialize applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator != nil {
		return applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM{}), generators)

	return applicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGateway_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ApplicationGatewayPropertiesFormat_STATUS_ARMGenerator())
}

func Test_ApplicationGatewayPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPropertiesFormat_STATUS_ARM, ApplicationGatewayPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPropertiesFormat_STATUS_ARM(subject ApplicationGatewayPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayPropertiesFormat_STATUS_ARMGenerator()
var applicationGatewayPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayPropertiesFormat_STATUS_ARMGenerator returns a generator of ApplicationGatewayPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize applicationGatewayPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayPropertiesFormat_STATUS_ARMGenerator != nil {
		return applicationGatewayPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM(generators)
	applicationGatewayPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM(generators)
	applicationGatewayPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPropertiesFormat_STATUS_ARM{}), generators)

	return applicationGatewayPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnableFips"] = gen.PtrOf(gen.Bool())
	gens["EnableHttp2"] = gen.PtrOf(gen.Bool())
	gens["ForceFirewallPolicyAssociation"] = gen.PtrOf(gen.Bool())
	gens["OperationalState"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayPropertiesFormat_OperationalState_STATUS_Running,
		ApplicationGatewayPropertiesFormat_OperationalState_STATUS_Starting,
		ApplicationGatewayPropertiesFormat_OperationalState_STATUS_Stopped,
		ApplicationGatewayPropertiesFormat_OperationalState_STATUS_Stopping))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProvisioningState_STATUS_Deleting,
		ApplicationGatewayProvisioningState_STATUS_Failed,
		ApplicationGatewayProvisioningState_STATUS_Succeeded,
		ApplicationGatewayProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthenticationCertificates"] = gen.SliceOf(ApplicationGatewayAuthenticationCertificate_STATUS_ARMGenerator())
	gens["AutoscaleConfiguration"] = gen.PtrOf(ApplicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator())
	gens["BackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator())
	gens["BackendHttpSettingsCollection"] = gen.SliceOf(ApplicationGatewayBackendHttpSettings_STATUS_ARMGenerator())
	gens["BackendSettingsCollection"] = gen.SliceOf(ApplicationGatewayBackendSettings_STATUS_ARMGenerator())
	gens["CustomErrorConfigurations"] = gen.SliceOf(ApplicationGatewayCustomError_STATUS_ARMGenerator())
	gens["FirewallPolicy"] = gen.PtrOf(ApplicationGatewaySubResource_STATUS_ARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(ApplicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator())
	gens["FrontendPorts"] = gen.SliceOf(ApplicationGatewayFrontendPort_STATUS_ARMGenerator())
	gens["GatewayIPConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator())
	gens["GlobalConfiguration"] = gen.PtrOf(ApplicationGatewayGlobalConfiguration_STATUS_ARMGenerator())
	gens["HttpListeners"] = gen.SliceOf(ApplicationGatewayHttpListener_STATUS_ARMGenerator())
	gens["Listeners"] = gen.SliceOf(ApplicationGatewayListener_STATUS_ARMGenerator())
	gens["LoadDistributionPolicies"] = gen.SliceOf(ApplicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(ApplicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator())
	gens["PrivateLinkConfigurations"] = gen.SliceOf(ApplicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator())
	gens["Probes"] = gen.SliceOf(ApplicationGatewayProbe_STATUS_ARMGenerator())
	gens["RedirectConfigurations"] = gen.SliceOf(ApplicationGatewayRedirectConfiguration_STATUS_ARMGenerator())
	gens["RequestRoutingRules"] = gen.SliceOf(ApplicationGatewayRequestRoutingRule_STATUS_ARMGenerator())
	gens["RewriteRuleSets"] = gen.SliceOf(ApplicationGatewayRewriteRuleSet_STATUS_ARMGenerator())
	gens["RoutingRules"] = gen.SliceOf(ApplicationGatewayRoutingRule_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(ApplicationGatewaySku_STATUS_ARMGenerator())
	gens["SslCertificates"] = gen.SliceOf(ApplicationGatewaySslCertificate_STATUS_ARMGenerator())
	gens["SslPolicy"] = gen.PtrOf(ApplicationGatewaySslPolicy_STATUS_ARMGenerator())
	gens["SslProfiles"] = gen.SliceOf(ApplicationGatewaySslProfile_STATUS_ARMGenerator())
	gens["TrustedClientCertificates"] = gen.SliceOf(ApplicationGatewayTrustedClientCertificate_STATUS_ARMGenerator())
	gens["TrustedRootCertificates"] = gen.SliceOf(ApplicationGatewayTrustedRootCertificate_STATUS_ARMGenerator())
	gens["UrlPathMaps"] = gen.SliceOf(ApplicationGatewayUrlPathMap_STATUS_ARMGenerator())
	gens["WebApplicationFirewallConfiguration"] = gen.PtrOf(ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator())
}

func Test_ManagedServiceIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM, ManagedServiceIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM(subject ManagedServiceIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUS_ARMGenerator()
var managedServiceIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedServiceIdentity_STATUS_ARMGenerator returns a generator of ManagedServiceIdentity_STATUS_ARM instances for property testing.
// We first initialize managedServiceIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_STATUS_ARMGenerator != nil {
		return managedServiceIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	return managedServiceIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_STATUS_None,
		ManagedServiceIdentity_Type_STATUS_SystemAssigned,
		ManagedServiceIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator())
}

func Test_ApplicationGatewayAuthenticationCertificate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayAuthenticationCertificate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayAuthenticationCertificate_STATUS_ARM, ApplicationGatewayAuthenticationCertificate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayAuthenticationCertificate_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayAuthenticationCertificate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayAuthenticationCertificate_STATUS_ARM(subject ApplicationGatewayAuthenticationCertificate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayAuthenticationCertificate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayAuthenticationCertificate_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayAuthenticationCertificate_STATUS_ARMGenerator()
var applicationGatewayAuthenticationCertificate_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayAuthenticationCertificate_STATUS_ARMGenerator returns a generator of ApplicationGatewayAuthenticationCertificate_STATUS_ARM instances for property testing.
func ApplicationGatewayAuthenticationCertificate_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayAuthenticationCertificate_STATUS_ARMGenerator != nil {
		return applicationGatewayAuthenticationCertificate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_STATUS_ARM(generators)
	applicationGatewayAuthenticationCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayAuthenticationCertificate_STATUS_ARM{}), generators)

	return applicationGatewayAuthenticationCertificate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayAuthenticationCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayAutoscaleConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayAutoscaleConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayAutoscaleConfiguration_STATUS_ARM, ApplicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayAutoscaleConfiguration_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayAutoscaleConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayAutoscaleConfiguration_STATUS_ARM(subject ApplicationGatewayAutoscaleConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayAutoscaleConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayAutoscaleConfiguration_STATUS_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator()
var applicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator returns a generator of ApplicationGatewayAutoscaleConfiguration_STATUS_ARM instances for property testing.
func ApplicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator != nil {
		return applicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayAutoscaleConfiguration_STATUS_ARM(generators)
	applicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayAutoscaleConfiguration_STATUS_ARM{}), generators)

	return applicationGatewayAutoscaleConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayAutoscaleConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayAutoscaleConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MaxCapacity"] = gen.PtrOf(gen.Int())
	gens["MinCapacity"] = gen.PtrOf(gen.Int())
}

func Test_ApplicationGatewayBackendAddressPool_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUS_ARM, ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUS_ARM(subject ApplicationGatewayBackendAddressPool_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator()
var applicationGatewayBackendAddressPool_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_STATUS_ARM instances for property testing.
func ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPool_STATUS_ARMGenerator != nil {
		return applicationGatewayBackendAddressPool_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(generators)
	applicationGatewayBackendAddressPool_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUS_ARM{}), generators)

	return applicationGatewayBackendAddressPool_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendHttpSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendHttpSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendHttpSettings_STATUS_ARM, ApplicationGatewayBackendHttpSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendHttpSettings_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayBackendHttpSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendHttpSettings_STATUS_ARM(subject ApplicationGatewayBackendHttpSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendHttpSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendHttpSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendHttpSettings_STATUS_ARMGenerator()
var applicationGatewayBackendHttpSettings_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayBackendHttpSettings_STATUS_ARMGenerator returns a generator of ApplicationGatewayBackendHttpSettings_STATUS_ARM instances for property testing.
func ApplicationGatewayBackendHttpSettings_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendHttpSettings_STATUS_ARMGenerator != nil {
		return applicationGatewayBackendHttpSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_STATUS_ARM(generators)
	applicationGatewayBackendHttpSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendHttpSettings_STATUS_ARM{}), generators)

	return applicationGatewayBackendHttpSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendHttpSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendSettings_STATUS_ARM, ApplicationGatewayBackendSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendSettings_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayBackendSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendSettings_STATUS_ARM(subject ApplicationGatewayBackendSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendSettings_STATUS_ARMGenerator()
var applicationGatewayBackendSettings_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayBackendSettings_STATUS_ARMGenerator returns a generator of ApplicationGatewayBackendSettings_STATUS_ARM instances for property testing.
func ApplicationGatewayBackendSettings_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendSettings_STATUS_ARMGenerator != nil {
		return applicationGatewayBackendSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_STATUS_ARM(generators)
	applicationGatewayBackendSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendSettings_STATUS_ARM{}), generators)

	return applicationGatewayBackendSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayCustomError_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayCustomError_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayCustomError_STATUS_ARM, ApplicationGatewayCustomError_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayCustomError_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayCustomError_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayCustomError_STATUS_ARM(subject ApplicationGatewayCustomError_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayCustomError_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayCustomError_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayCustomError_STATUS_ARMGenerator()
var applicationGatewayCustomError_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayCustomError_STATUS_ARMGenerator returns a generator of ApplicationGatewayCustomError_STATUS_ARM instances for property testing.
func ApplicationGatewayCustomError_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayCustomError_STATUS_ARMGenerator != nil {
		return applicationGatewayCustomError_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayCustomError_STATUS_ARM(generators)
	applicationGatewayCustomError_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayCustomError_STATUS_ARM{}), generators)

	return applicationGatewayCustomError_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayCustomError_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayCustomError_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomErrorPageUrl"] = gen.PtrOf(gen.AlphaString())
	gens["StatusCode"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayCustomError_StatusCode_STATUS_HttpStatus403, ApplicationGatewayCustomError_StatusCode_STATUS_HttpStatus502))
}

func Test_ApplicationGatewayFrontendIPConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFrontendIPConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFrontendIPConfiguration_STATUS_ARM, ApplicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFrontendIPConfiguration_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayFrontendIPConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFrontendIPConfiguration_STATUS_ARM(subject ApplicationGatewayFrontendIPConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFrontendIPConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFrontendIPConfiguration_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator()
var applicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator returns a generator of ApplicationGatewayFrontendIPConfiguration_STATUS_ARM instances for property testing.
func ApplicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator != nil {
		return applicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_STATUS_ARM(generators)
	applicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendIPConfiguration_STATUS_ARM{}), generators)

	return applicationGatewayFrontendIPConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFrontendIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayFrontendPort_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFrontendPort_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFrontendPort_STATUS_ARM, ApplicationGatewayFrontendPort_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFrontendPort_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayFrontendPort_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFrontendPort_STATUS_ARM(subject ApplicationGatewayFrontendPort_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFrontendPort_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFrontendPort_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayFrontendPort_STATUS_ARMGenerator()
var applicationGatewayFrontendPort_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayFrontendPort_STATUS_ARMGenerator returns a generator of ApplicationGatewayFrontendPort_STATUS_ARM instances for property testing.
func ApplicationGatewayFrontendPort_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayFrontendPort_STATUS_ARMGenerator != nil {
		return applicationGatewayFrontendPort_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_STATUS_ARM(generators)
	applicationGatewayFrontendPort_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFrontendPort_STATUS_ARM{}), generators)

	return applicationGatewayFrontendPort_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFrontendPort_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayGlobalConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayGlobalConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayGlobalConfiguration_STATUS_ARM, ApplicationGatewayGlobalConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayGlobalConfiguration_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayGlobalConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayGlobalConfiguration_STATUS_ARM(subject ApplicationGatewayGlobalConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayGlobalConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayGlobalConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayGlobalConfiguration_STATUS_ARMGenerator()
var applicationGatewayGlobalConfiguration_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayGlobalConfiguration_STATUS_ARMGenerator returns a generator of ApplicationGatewayGlobalConfiguration_STATUS_ARM instances for property testing.
func ApplicationGatewayGlobalConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayGlobalConfiguration_STATUS_ARMGenerator != nil {
		return applicationGatewayGlobalConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayGlobalConfiguration_STATUS_ARM(generators)
	applicationGatewayGlobalConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayGlobalConfiguration_STATUS_ARM{}), generators)

	return applicationGatewayGlobalConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayGlobalConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayGlobalConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnableRequestBuffering"] = gen.PtrOf(gen.Bool())
	gens["EnableResponseBuffering"] = gen.PtrOf(gen.Bool())
}

func Test_ApplicationGatewayHttpListener_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayHttpListener_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayHttpListener_STATUS_ARM, ApplicationGatewayHttpListener_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayHttpListener_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayHttpListener_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayHttpListener_STATUS_ARM(subject ApplicationGatewayHttpListener_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayHttpListener_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayHttpListener_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayHttpListener_STATUS_ARMGenerator()
var applicationGatewayHttpListener_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayHttpListener_STATUS_ARMGenerator returns a generator of ApplicationGatewayHttpListener_STATUS_ARM instances for property testing.
func ApplicationGatewayHttpListener_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayHttpListener_STATUS_ARMGenerator != nil {
		return applicationGatewayHttpListener_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_STATUS_ARM(generators)
	applicationGatewayHttpListener_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayHttpListener_STATUS_ARM{}), generators)

	return applicationGatewayHttpListener_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayHttpListener_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM, ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(subject ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM instances for
// property testing - lazily instantiated by
// ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator()
var applicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator gopter.Gen

// ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator returns a generator of ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM instances for property testing.
func ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if applicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator != nil {
		return applicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(generators)
	applicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM{}), generators)

	return applicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUS_ApplicationGateway_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayListener_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayListener_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayListener_STATUS_ARM, ApplicationGatewayListener_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayListener_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayListener_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayListener_STATUS_ARM(subject ApplicationGatewayListener_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayListener_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayListener_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayListener_STATUS_ARMGenerator()
var applicationGatewayListener_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayListener_STATUS_ARMGenerator returns a generator of ApplicationGatewayListener_STATUS_ARM instances for property testing.
func ApplicationGatewayListener_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayListener_STATUS_ARMGenerator != nil {
		return applicationGatewayListener_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayListener_STATUS_ARM(generators)
	applicationGatewayListener_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayListener_STATUS_ARM{}), generators)

	return applicationGatewayListener_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayListener_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayListener_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayLoadDistributionPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayLoadDistributionPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicy_STATUS_ARM, ApplicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicy_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayLoadDistributionPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayLoadDistributionPolicy_STATUS_ARM(subject ApplicationGatewayLoadDistributionPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayLoadDistributionPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayLoadDistributionPolicy_STATUS_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator()
var applicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator returns a generator of ApplicationGatewayLoadDistributionPolicy_STATUS_ARM instances for property testing.
func ApplicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator != nil {
		return applicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_STATUS_ARM(generators)
	applicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayLoadDistributionPolicy_STATUS_ARM{}), generators)

	return applicationGatewayLoadDistributionPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayLoadDistributionPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayPrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPrivateEndpointConnection_STATUS_ARM, ApplicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayPrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPrivateEndpointConnection_STATUS_ARM(subject ApplicationGatewayPrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPrivateEndpointConnection_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator()
var applicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator returns a generator of ApplicationGatewayPrivateEndpointConnection_STATUS_ARM instances for property testing.
func ApplicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator != nil {
		return applicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPrivateEndpointConnection_STATUS_ARM(generators)
	applicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPrivateEndpointConnection_STATUS_ARM{}), generators)

	return applicationGatewayPrivateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayPrivateLinkConfiguration_STATUS_ARM, ApplicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayPrivateLinkConfiguration_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayPrivateLinkConfiguration_STATUS_ARM(subject ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator()
var applicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator returns a generator of ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM instances for property testing.
func ApplicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator != nil {
		return applicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_STATUS_ARM(generators)
	applicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayPrivateLinkConfiguration_STATUS_ARM{}), generators)

	return applicationGatewayPrivateLinkConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayPrivateLinkConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayProbe_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayProbe_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayProbe_STATUS_ARM, ApplicationGatewayProbe_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayProbe_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayProbe_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayProbe_STATUS_ARM(subject ApplicationGatewayProbe_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayProbe_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayProbe_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayProbe_STATUS_ARMGenerator()
var applicationGatewayProbe_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayProbe_STATUS_ARMGenerator returns a generator of ApplicationGatewayProbe_STATUS_ARM instances for property testing.
func ApplicationGatewayProbe_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayProbe_STATUS_ARMGenerator != nil {
		return applicationGatewayProbe_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayProbe_STATUS_ARM(generators)
	applicationGatewayProbe_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayProbe_STATUS_ARM{}), generators)

	return applicationGatewayProbe_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayProbe_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayProbe_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayRedirectConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRedirectConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRedirectConfiguration_STATUS_ARM, ApplicationGatewayRedirectConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRedirectConfiguration_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayRedirectConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRedirectConfiguration_STATUS_ARM(subject ApplicationGatewayRedirectConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRedirectConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRedirectConfiguration_STATUS_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayRedirectConfiguration_STATUS_ARMGenerator()
var applicationGatewayRedirectConfiguration_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayRedirectConfiguration_STATUS_ARMGenerator returns a generator of ApplicationGatewayRedirectConfiguration_STATUS_ARM instances for property testing.
func ApplicationGatewayRedirectConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayRedirectConfiguration_STATUS_ARMGenerator != nil {
		return applicationGatewayRedirectConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_STATUS_ARM(generators)
	applicationGatewayRedirectConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRedirectConfiguration_STATUS_ARM{}), generators)

	return applicationGatewayRedirectConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRedirectConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayRequestRoutingRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRequestRoutingRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRequestRoutingRule_STATUS_ARM, ApplicationGatewayRequestRoutingRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRequestRoutingRule_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayRequestRoutingRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRequestRoutingRule_STATUS_ARM(subject ApplicationGatewayRequestRoutingRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRequestRoutingRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRequestRoutingRule_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRequestRoutingRule_STATUS_ARMGenerator()
var applicationGatewayRequestRoutingRule_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayRequestRoutingRule_STATUS_ARMGenerator returns a generator of ApplicationGatewayRequestRoutingRule_STATUS_ARM instances for property testing.
func ApplicationGatewayRequestRoutingRule_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayRequestRoutingRule_STATUS_ARMGenerator != nil {
		return applicationGatewayRequestRoutingRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_STATUS_ARM(generators)
	applicationGatewayRequestRoutingRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRequestRoutingRule_STATUS_ARM{}), generators)

	return applicationGatewayRequestRoutingRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRequestRoutingRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayRewriteRuleSet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRewriteRuleSet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRewriteRuleSet_STATUS_ARM, ApplicationGatewayRewriteRuleSet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRewriteRuleSet_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayRewriteRuleSet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRewriteRuleSet_STATUS_ARM(subject ApplicationGatewayRewriteRuleSet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRewriteRuleSet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRewriteRuleSet_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRewriteRuleSet_STATUS_ARMGenerator()
var applicationGatewayRewriteRuleSet_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayRewriteRuleSet_STATUS_ARMGenerator returns a generator of ApplicationGatewayRewriteRuleSet_STATUS_ARM instances for property testing.
func ApplicationGatewayRewriteRuleSet_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayRewriteRuleSet_STATUS_ARMGenerator != nil {
		return applicationGatewayRewriteRuleSet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_STATUS_ARM(generators)
	applicationGatewayRewriteRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRewriteRuleSet_STATUS_ARM{}), generators)

	return applicationGatewayRewriteRuleSet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRewriteRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayRoutingRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayRoutingRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayRoutingRule_STATUS_ARM, ApplicationGatewayRoutingRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayRoutingRule_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayRoutingRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayRoutingRule_STATUS_ARM(subject ApplicationGatewayRoutingRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayRoutingRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayRoutingRule_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayRoutingRule_STATUS_ARMGenerator()
var applicationGatewayRoutingRule_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayRoutingRule_STATUS_ARMGenerator returns a generator of ApplicationGatewayRoutingRule_STATUS_ARM instances for property testing.
func ApplicationGatewayRoutingRule_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayRoutingRule_STATUS_ARMGenerator != nil {
		return applicationGatewayRoutingRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_STATUS_ARM(generators)
	applicationGatewayRoutingRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayRoutingRule_STATUS_ARM{}), generators)

	return applicationGatewayRoutingRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayRoutingRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewaySku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySku_STATUS_ARM, ApplicationGatewaySku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySku_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewaySku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySku_STATUS_ARM(subject ApplicationGatewaySku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySku_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySku_STATUS_ARMGenerator()
var applicationGatewaySku_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewaySku_STATUS_ARMGenerator returns a generator of ApplicationGatewaySku_STATUS_ARM instances for property testing.
func ApplicationGatewaySku_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewaySku_STATUS_ARMGenerator != nil {
		return applicationGatewaySku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySku_STATUS_ARM(generators)
	applicationGatewaySku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySku_STATUS_ARM{}), generators)

	return applicationGatewaySku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewaySku_Name_STATUS_Standard_Large,
		ApplicationGatewaySku_Name_STATUS_Standard_Medium,
		ApplicationGatewaySku_Name_STATUS_Standard_Small,
		ApplicationGatewaySku_Name_STATUS_Standard_V2,
		ApplicationGatewaySku_Name_STATUS_WAF_Large,
		ApplicationGatewaySku_Name_STATUS_WAF_Medium,
		ApplicationGatewaySku_Name_STATUS_WAF_V2))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewaySku_Tier_STATUS_Standard,
		ApplicationGatewaySku_Tier_STATUS_Standard_V2,
		ApplicationGatewaySku_Tier_STATUS_WAF,
		ApplicationGatewaySku_Tier_STATUS_WAF_V2))
}

func Test_ApplicationGatewaySslCertificate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslCertificate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslCertificate_STATUS_ARM, ApplicationGatewaySslCertificate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslCertificate_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewaySslCertificate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslCertificate_STATUS_ARM(subject ApplicationGatewaySslCertificate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslCertificate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslCertificate_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslCertificate_STATUS_ARMGenerator()
var applicationGatewaySslCertificate_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewaySslCertificate_STATUS_ARMGenerator returns a generator of ApplicationGatewaySslCertificate_STATUS_ARM instances for property testing.
func ApplicationGatewaySslCertificate_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewaySslCertificate_STATUS_ARMGenerator != nil {
		return applicationGatewaySslCertificate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_STATUS_ARM(generators)
	applicationGatewaySslCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslCertificate_STATUS_ARM{}), generators)

	return applicationGatewaySslCertificate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewaySslPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslPolicy_STATUS_ARM, ApplicationGatewaySslPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslPolicy_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewaySslPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslPolicy_STATUS_ARM(subject ApplicationGatewaySslPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslPolicy_STATUS_ARMGenerator()
var applicationGatewaySslPolicy_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewaySslPolicy_STATUS_ARMGenerator returns a generator of ApplicationGatewaySslPolicy_STATUS_ARM instances for property testing.
func ApplicationGatewaySslPolicy_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewaySslPolicy_STATUS_ARMGenerator != nil {
		return applicationGatewaySslPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslPolicy_STATUS_ARM(generators)
	applicationGatewaySslPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslPolicy_STATUS_ARM{}), generators)

	return applicationGatewaySslPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CipherSuites"] = gen.SliceOf(gen.OneConstOf(
		CipherSuitesEnum_STATUS_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_STATUS_TLS_DHE_DSS_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,
		CipherSuitesEnum_STATUS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_STATUS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
		CipherSuitesEnum_STATUS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_STATUS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_STATUS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
		CipherSuitesEnum_STATUS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		CipherSuitesEnum_STATUS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_STATUS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_STATUS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
		CipherSuitesEnum_STATUS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_AES_128_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_AES_128_CBC_SHA256,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_AES_128_GCM_SHA256,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_AES_256_CBC_SHA,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_AES_256_CBC_SHA256,
		CipherSuitesEnum_STATUS_TLS_RSA_WITH_AES_256_GCM_SHA384))
	gens["DisabledSslProtocols"] = gen.SliceOf(gen.OneConstOf(
		ProtocolsEnum_STATUS_TLSv1_0,
		ProtocolsEnum_STATUS_TLSv1_1,
		ProtocolsEnum_STATUS_TLSv1_2,
		ProtocolsEnum_STATUS_TLSv1_3))
	gens["MinProtocolVersion"] = gen.PtrOf(gen.OneConstOf(
		ProtocolsEnum_STATUS_TLSv1_0,
		ProtocolsEnum_STATUS_TLSv1_1,
		ProtocolsEnum_STATUS_TLSv1_2,
		ProtocolsEnum_STATUS_TLSv1_3))
	gens["PolicyName"] = gen.PtrOf(gen.OneConstOf(
		PolicyNameEnum_STATUS_AppGwSslPolicy20150501,
		PolicyNameEnum_STATUS_AppGwSslPolicy20170401,
		PolicyNameEnum_STATUS_AppGwSslPolicy20170401S,
		PolicyNameEnum_STATUS_AppGwSslPolicy20220101,
		PolicyNameEnum_STATUS_AppGwSslPolicy20220101S))
	gens["PolicyType"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewaySslPolicy_PolicyType_STATUS_Custom, ApplicationGatewaySslPolicy_PolicyType_STATUS_CustomV2, ApplicationGatewaySslPolicy_PolicyType_STATUS_Predefined))
}

func Test_ApplicationGatewaySslProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySslProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySslProfile_STATUS_ARM, ApplicationGatewaySslProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySslProfile_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewaySslProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySslProfile_STATUS_ARM(subject ApplicationGatewaySslProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySslProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySslProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySslProfile_STATUS_ARMGenerator()
var applicationGatewaySslProfile_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewaySslProfile_STATUS_ARMGenerator returns a generator of ApplicationGatewaySslProfile_STATUS_ARM instances for property testing.
func ApplicationGatewaySslProfile_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewaySslProfile_STATUS_ARMGenerator != nil {
		return applicationGatewaySslProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_STATUS_ARM(generators)
	applicationGatewaySslProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySslProfile_STATUS_ARM{}), generators)

	return applicationGatewaySslProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySslProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewaySubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewaySubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewaySubResource_STATUS_ARM, ApplicationGatewaySubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewaySubResource_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewaySubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewaySubResource_STATUS_ARM(subject ApplicationGatewaySubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewaySubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewaySubResource_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewaySubResource_STATUS_ARMGenerator()
var applicationGatewaySubResource_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewaySubResource_STATUS_ARMGenerator returns a generator of ApplicationGatewaySubResource_STATUS_ARM instances for property testing.
func ApplicationGatewaySubResource_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewaySubResource_STATUS_ARMGenerator != nil {
		return applicationGatewaySubResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewaySubResource_STATUS_ARM(generators)
	applicationGatewaySubResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewaySubResource_STATUS_ARM{}), generators)

	return applicationGatewaySubResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewaySubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewaySubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayTrustedClientCertificate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayTrustedClientCertificate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayTrustedClientCertificate_STATUS_ARM, ApplicationGatewayTrustedClientCertificate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayTrustedClientCertificate_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayTrustedClientCertificate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayTrustedClientCertificate_STATUS_ARM(subject ApplicationGatewayTrustedClientCertificate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayTrustedClientCertificate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayTrustedClientCertificate_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayTrustedClientCertificate_STATUS_ARMGenerator()
var applicationGatewayTrustedClientCertificate_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayTrustedClientCertificate_STATUS_ARMGenerator returns a generator of ApplicationGatewayTrustedClientCertificate_STATUS_ARM instances for property testing.
func ApplicationGatewayTrustedClientCertificate_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayTrustedClientCertificate_STATUS_ARMGenerator != nil {
		return applicationGatewayTrustedClientCertificate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_STATUS_ARM(generators)
	applicationGatewayTrustedClientCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedClientCertificate_STATUS_ARM{}), generators)

	return applicationGatewayTrustedClientCertificate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayTrustedClientCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayTrustedRootCertificate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayTrustedRootCertificate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayTrustedRootCertificate_STATUS_ARM, ApplicationGatewayTrustedRootCertificate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayTrustedRootCertificate_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayTrustedRootCertificate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayTrustedRootCertificate_STATUS_ARM(subject ApplicationGatewayTrustedRootCertificate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayTrustedRootCertificate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayTrustedRootCertificate_STATUS_ARM instances for property testing - lazily instantiated
// by ApplicationGatewayTrustedRootCertificate_STATUS_ARMGenerator()
var applicationGatewayTrustedRootCertificate_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayTrustedRootCertificate_STATUS_ARMGenerator returns a generator of ApplicationGatewayTrustedRootCertificate_STATUS_ARM instances for property testing.
func ApplicationGatewayTrustedRootCertificate_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayTrustedRootCertificate_STATUS_ARMGenerator != nil {
		return applicationGatewayTrustedRootCertificate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_STATUS_ARM(generators)
	applicationGatewayTrustedRootCertificate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayTrustedRootCertificate_STATUS_ARM{}), generators)

	return applicationGatewayTrustedRootCertificate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayTrustedRootCertificate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayUrlPathMap_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayUrlPathMap_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayUrlPathMap_STATUS_ARM, ApplicationGatewayUrlPathMap_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayUrlPathMap_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayUrlPathMap_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayUrlPathMap_STATUS_ARM(subject ApplicationGatewayUrlPathMap_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayUrlPathMap_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayUrlPathMap_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayUrlPathMap_STATUS_ARMGenerator()
var applicationGatewayUrlPathMap_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayUrlPathMap_STATUS_ARMGenerator returns a generator of ApplicationGatewayUrlPathMap_STATUS_ARM instances for property testing.
func ApplicationGatewayUrlPathMap_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayUrlPathMap_STATUS_ARMGenerator != nil {
		return applicationGatewayUrlPathMap_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_STATUS_ARM(generators)
	applicationGatewayUrlPathMap_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayUrlPathMap_STATUS_ARM{}), generators)

	return applicationGatewayUrlPathMap_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayUrlPathMap_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM, ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM(subject ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator()
var applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator returns a generator of ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM instances for property testing.
// We first initialize applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator != nil {
		return applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM(generators)
	applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM(generators)
	applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM{}), generators)

	return applicationGatewayWebApplicationFirewallConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["FileUploadLimitInMb"] = gen.PtrOf(gen.Int())
	gens["FirewallMode"] = gen.PtrOf(gen.OneConstOf(ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_STATUS_Detection, ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_STATUS_Prevention))
	gens["MaxRequestBodySize"] = gen.PtrOf(gen.Int())
	gens["MaxRequestBodySizeInKb"] = gen.PtrOf(gen.Int())
	gens["RequestBodyCheck"] = gen.PtrOf(gen.Bool())
	gens["RuleSetType"] = gen.PtrOf(gen.AlphaString())
	gens["RuleSetVersion"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayWebApplicationFirewallConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DisabledRuleGroups"] = gen.SliceOf(ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator())
	gens["Exclusions"] = gen.SliceOf(ApplicationGatewayFirewallExclusion_STATUS_ARMGenerator())
}

func Test_ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM, ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM runs a test to see if a specific instance of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM(subject ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator()
var managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator gopter.Gen

// ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator returns a generator of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing.
func ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator != nil {
		return managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM(generators)
	managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM{}), generators)

	return managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM, ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM(subject ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator()
var applicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator returns a generator of ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM instances for property testing.
func ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator != nil {
		return applicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM(generators)
	applicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM{}), generators)

	return applicationGatewayFirewallDisabledRuleGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFirewallDisabledRuleGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RuleGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["Rules"] = gen.SliceOf(gen.Int())
}

func Test_ApplicationGatewayFirewallExclusion_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayFirewallExclusion_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayFirewallExclusion_STATUS_ARM, ApplicationGatewayFirewallExclusion_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayFirewallExclusion_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayFirewallExclusion_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayFirewallExclusion_STATUS_ARM(subject ApplicationGatewayFirewallExclusion_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayFirewallExclusion_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayFirewallExclusion_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayFirewallExclusion_STATUS_ARMGenerator()
var applicationGatewayFirewallExclusion_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayFirewallExclusion_STATUS_ARMGenerator returns a generator of ApplicationGatewayFirewallExclusion_STATUS_ARM instances for property testing.
func ApplicationGatewayFirewallExclusion_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayFirewallExclusion_STATUS_ARMGenerator != nil {
		return applicationGatewayFirewallExclusion_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayFirewallExclusion_STATUS_ARM(generators)
	applicationGatewayFirewallExclusion_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayFirewallExclusion_STATUS_ARM{}), generators)

	return applicationGatewayFirewallExclusion_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayFirewallExclusion_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayFirewallExclusion_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchVariable"] = gen.PtrOf(gen.AlphaString())
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["SelectorMatchOperator"] = gen.PtrOf(gen.AlphaString())
}
