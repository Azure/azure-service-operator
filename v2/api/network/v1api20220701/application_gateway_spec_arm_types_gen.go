// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220701

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type ApplicationGateway_Spec_ARM struct {
	// Identity: The identity of the application gateway, if configured.
	Identity *ManagedServiceIdentity_ARM `json:"identity,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties of the application gateway.
	Properties *ApplicationGatewayPropertiesFormat_ARM `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: A list of availability zones denoting where the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMResourceSpec = &ApplicationGateway_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-07-01"
func (gateway ApplicationGateway_Spec_ARM) GetAPIVersion() string {
	return "2022-07-01"
}

// GetName returns the Name of the resource
func (gateway *ApplicationGateway_Spec_ARM) GetName() string {
	return gateway.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/applicationGateways"
func (gateway *ApplicationGateway_Spec_ARM) GetType() string {
	return "Microsoft.Network/applicationGateways"
}

// Properties of the application gateway.
type ApplicationGatewayPropertiesFormat_ARM struct {
	// AuthenticationCertificates: Authentication certificates of the application gateway resource. For default limits, see
	// [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	AuthenticationCertificates []ApplicationGatewayAuthenticationCertificate_ARM `json:"authenticationCertificates,omitempty"`

	// AutoscaleConfiguration: Autoscale Configuration.
	AutoscaleConfiguration *ApplicationGatewayAutoscaleConfiguration_ARM `json:"autoscaleConfiguration,omitempty"`

	// BackendAddressPools: Backend address pool of the application gateway resource. For default limits, see [Application
	// Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	BackendAddressPools []ApplicationGatewayBackendAddressPool_ARM `json:"backendAddressPools,omitempty"`

	// BackendHttpSettingsCollection: Backend http settings of the application gateway resource. For default limits, see
	// [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	BackendHttpSettingsCollection []ApplicationGatewayBackendHttpSettings_ARM `json:"backendHttpSettingsCollection,omitempty"`

	// BackendSettingsCollection: Backend settings of the application gateway resource. For default limits, see [Application
	// Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	BackendSettingsCollection []ApplicationGatewayBackendSettings_ARM `json:"backendSettingsCollection,omitempty"`

	// CustomErrorConfigurations: Custom error configurations of the application gateway resource.
	CustomErrorConfigurations []ApplicationGatewayCustomError_ARM `json:"customErrorConfigurations,omitempty"`

	// EnableFips: Whether FIPS is enabled on the application gateway resource.
	EnableFips *bool `json:"enableFips,omitempty"`

	// EnableHttp2: Whether HTTP2 is enabled on the application gateway resource.
	EnableHttp2 *bool `json:"enableHttp2,omitempty"`

	// FirewallPolicy: Reference to the FirewallPolicy resource.
	FirewallPolicy *ApplicationGatewaySubResource_ARM `json:"firewallPolicy,omitempty"`

	// ForceFirewallPolicyAssociation: If true, associates a firewall policy with an application gateway regardless whether the
	// policy differs from the WAF Config.
	ForceFirewallPolicyAssociation *bool `json:"forceFirewallPolicyAssociation,omitempty"`

	// FrontendIPConfigurations: Frontend IP addresses of the application gateway resource. For default limits, see
	// [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	FrontendIPConfigurations []ApplicationGatewayFrontendIPConfiguration_ARM `json:"frontendIPConfigurations,omitempty"`

	// FrontendPorts: Frontend ports of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	FrontendPorts []ApplicationGatewayFrontendPort_ARM `json:"frontendPorts,omitempty"`

	// GatewayIPConfigurations: Subnets of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	GatewayIPConfigurations []ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM `json:"gatewayIPConfigurations,omitempty"`

	// GlobalConfiguration: Global Configuration.
	GlobalConfiguration *ApplicationGatewayGlobalConfiguration_ARM `json:"globalConfiguration,omitempty"`

	// HttpListeners: Http listeners of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	HttpListeners []ApplicationGatewayHttpListener_ARM `json:"httpListeners,omitempty"`

	// Listeners: Listeners of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	Listeners []ApplicationGatewayListener_ARM `json:"listeners,omitempty"`

	// LoadDistributionPolicies: Load distribution policies of the application gateway resource.
	LoadDistributionPolicies []ApplicationGatewayLoadDistributionPolicy_ARM `json:"loadDistributionPolicies,omitempty"`

	// PrivateLinkConfigurations: PrivateLink configurations on application gateway.
	PrivateLinkConfigurations []ApplicationGatewayPrivateLinkConfiguration_ARM `json:"privateLinkConfigurations,omitempty"`

	// Probes: Probes of the application gateway resource.
	Probes []ApplicationGatewayProbe_ARM `json:"probes,omitempty"`

	// RedirectConfigurations: Redirect configurations of the application gateway resource. For default limits, see
	// [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	RedirectConfigurations []ApplicationGatewayRedirectConfiguration_ARM `json:"redirectConfigurations,omitempty"`

	// RequestRoutingRules: Request routing rules of the application gateway resource.
	RequestRoutingRules []ApplicationGatewayRequestRoutingRule_ARM `json:"requestRoutingRules,omitempty"`

	// RewriteRuleSets: Rewrite rules for the application gateway resource.
	RewriteRuleSets []ApplicationGatewayRewriteRuleSet_ARM `json:"rewriteRuleSets,omitempty"`

	// RoutingRules: Routing rules of the application gateway resource.
	RoutingRules []ApplicationGatewayRoutingRule_ARM `json:"routingRules,omitempty"`

	// Sku: SKU of the application gateway resource.
	Sku *ApplicationGatewaySku_ARM `json:"sku,omitempty"`

	// SslCertificates: SSL certificates of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	SslCertificates []ApplicationGatewaySslCertificate_ARM `json:"sslCertificates,omitempty"`

	// SslPolicy: SSL policy of the application gateway resource.
	SslPolicy *ApplicationGatewaySslPolicy_ARM `json:"sslPolicy,omitempty"`

	// SslProfiles: SSL profiles of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	SslProfiles []ApplicationGatewaySslProfile_ARM `json:"sslProfiles,omitempty"`

	// TrustedClientCertificates: Trusted client certificates of the application gateway resource. For default limits, see
	// [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	TrustedClientCertificates []ApplicationGatewayTrustedClientCertificate_ARM `json:"trustedClientCertificates,omitempty"`

	// TrustedRootCertificates: Trusted Root certificates of the application gateway resource. For default limits, see
	// [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	TrustedRootCertificates []ApplicationGatewayTrustedRootCertificate_ARM `json:"trustedRootCertificates,omitempty"`

	// UrlPathMaps: URL path map of the application gateway resource. For default limits, see [Application Gateway
	// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
	UrlPathMaps []ApplicationGatewayUrlPathMap_ARM `json:"urlPathMaps,omitempty"`

	// WebApplicationFirewallConfiguration: Web application firewall configuration.
	WebApplicationFirewallConfiguration *ApplicationGatewayWebApplicationFirewallConfiguration_ARM `json:"webApplicationFirewallConfiguration,omitempty"`
}

// Identity for the resource.
type ManagedServiceIdentity_ARM struct {
	// Type: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly
	// created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual
	// machine.
	Type                   *ManagedServiceIdentity_Type_ARM           `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentityDetails_ARM `json:"userAssignedIdentities,omitempty"`
}

// Authentication certificates of an application gateway.
type ApplicationGatewayAuthenticationCertificate_ARM struct {
	// Name: Name of the authentication certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway authentication certificate.
	Properties *ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM `json:"properties,omitempty"`
}

// Application Gateway autoscale configuration.
type ApplicationGatewayAutoscaleConfiguration_ARM struct {
	// MaxCapacity: Upper bound on number of Application Gateway capacity.
	MaxCapacity *int `json:"maxCapacity,omitempty"`

	// MinCapacity: Lower bound on number of Application Gateway capacity.
	MinCapacity *int `json:"minCapacity,omitempty"`
}

// Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPool_ARM struct {
	// Name: Name of the backend address pool that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway backend address pool.
	Properties *ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHttpSettings_ARM struct {
	// Name: Name of the backend http settings that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway backend HTTP settings.
	Properties *ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Backend address pool settings of an application gateway.
type ApplicationGatewayBackendSettings_ARM struct {
	// Name: Name of the backend settings that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway backend settings.
	Properties *ApplicationGatewayBackendSettingsPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Customer error of an application gateway.
type ApplicationGatewayCustomError_ARM struct {
	// CustomErrorPageUrl: Error page URL of the application gateway customer error.
	CustomErrorPageUrl *string `json:"customErrorPageUrl,omitempty"`

	// StatusCode: Status code of the application gateway customer error.
	StatusCode *ApplicationGatewayCustomError_StatusCode_ARM `json:"statusCode,omitempty"`
}

// Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfiguration_ARM struct {
	// Name: Name of the frontend IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway frontend IP configuration.
	Properties *ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Frontend port of an application gateway.
type ApplicationGatewayFrontendPort_ARM struct {
	// Name: Name of the frontend port that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway frontend port.
	Properties *ApplicationGatewayFrontendPortPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Application Gateway global configuration.
type ApplicationGatewayGlobalConfiguration_ARM struct {
	// EnableRequestBuffering: Enable request buffering.
	EnableRequestBuffering *bool `json:"enableRequestBuffering,omitempty"`

	// EnableResponseBuffering: Enable response buffering.
	EnableResponseBuffering *bool `json:"enableResponseBuffering,omitempty"`
}

// Http listener of an application gateway.
type ApplicationGatewayHttpListener_ARM struct {
	// Name: Name of the HTTP listener that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway HTTP listener.
	Properties *ApplicationGatewayHttpListenerPropertiesFormat_ARM `json:"properties,omitempty"`
}

// IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
type ApplicationGatewayIPConfiguration_ApplicationGateway_SubResourceEmbedded_ARM struct {
	// Name: Name of the IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway IP configuration.
	Properties *ApplicationGatewayIPConfigurationPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Listener of an application gateway.
type ApplicationGatewayListener_ARM struct {
	// Name: Name of the listener that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway listener.
	Properties *ApplicationGatewayListenerPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Load Distribution Policy of an application gateway.
type ApplicationGatewayLoadDistributionPolicy_ARM struct {
	// Name: Name of the load distribution policy that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway load distribution policy.
	Properties *ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Private Link Configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfiguration_ARM struct {
	// Name: Name of the private link configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway private link configuration.
	Properties *ApplicationGatewayPrivateLinkConfigurationProperties_ARM `json:"properties,omitempty"`
}

// Probe of the application gateway.
type ApplicationGatewayProbe_ARM struct {
	// Name: Name of the probe that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway probe.
	Properties *ApplicationGatewayProbePropertiesFormat_ARM `json:"properties,omitempty"`
}

// Redirect configuration of an application gateway.
type ApplicationGatewayRedirectConfiguration_ARM struct {
	// Name: Name of the redirect configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway redirect configuration.
	Properties *ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Request routing rule of an application gateway.
type ApplicationGatewayRequestRoutingRule_ARM struct {
	// Name: Name of the request routing rule that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway request routing rule.
	Properties *ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM `json:"properties,omitempty"`
}

// Rewrite rule set of an application gateway.
type ApplicationGatewayRewriteRuleSet_ARM struct {
	// Name: Name of the rewrite rule set that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway rewrite rule set.
	Properties *ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Routing rule of an application gateway.
type ApplicationGatewayRoutingRule_ARM struct {
	// Name: Name of the routing rule that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway routing rule.
	Properties *ApplicationGatewayRoutingRulePropertiesFormat_ARM `json:"properties,omitempty"`
}

// SKU of an application gateway.
type ApplicationGatewaySku_ARM struct {
	// Capacity: Capacity (instance count) of an application gateway.
	Capacity *int `json:"capacity,omitempty"`

	// Name: Name of an application gateway SKU.
	Name *ApplicationGatewaySku_Name_ARM `json:"name,omitempty"`

	// Tier: Tier of an application gateway.
	Tier *ApplicationGatewaySku_Tier_ARM `json:"tier,omitempty"`
}

// SSL certificates of an application gateway.
type ApplicationGatewaySslCertificate_ARM struct {
	// Name: Name of the SSL certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway SSL certificate.
	Properties *ApplicationGatewaySslCertificatePropertiesFormat_ARM `json:"properties,omitempty"`
}

// Application Gateway Ssl policy.
type ApplicationGatewaySslPolicy_ARM struct {
	// CipherSuites: Ssl cipher suites to be enabled in the specified order to application gateway.
	CipherSuites []CipherSuitesEnum_ARM `json:"cipherSuites,omitempty"`

	// DisabledSslProtocols: Ssl protocols to be disabled on application gateway.
	DisabledSslProtocols []ProtocolsEnum_ARM `json:"disabledSslProtocols,omitempty"`

	// MinProtocolVersion: Minimum version of Ssl protocol to be supported on application gateway.
	MinProtocolVersion *ProtocolsEnum_ARM `json:"minProtocolVersion,omitempty"`

	// PolicyName: Name of Ssl predefined policy.
	PolicyName *PolicyNameEnum_ARM `json:"policyName,omitempty"`

	// PolicyType: Type of Ssl Policy.
	PolicyType *ApplicationGatewaySslPolicy_PolicyType_ARM `json:"policyType,omitempty"`
}

// SSL profile of an application gateway.
type ApplicationGatewaySslProfile_ARM struct {
	// Name: Name of the SSL profile that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway SSL profile.
	Properties *ApplicationGatewaySslProfilePropertiesFormat_ARM `json:"properties,omitempty"`
}

// Reference to another subresource.
type ApplicationGatewaySubResource_ARM struct {
	Id *string `json:"id,omitempty"`
}

// Trusted client certificates of an application gateway.
type ApplicationGatewayTrustedClientCertificate_ARM struct {
	// Name: Name of the trusted client certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway trusted client certificate.
	Properties *ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM `json:"properties,omitempty"`
}

// Trusted Root certificates of an application gateway.
type ApplicationGatewayTrustedRootCertificate_ARM struct {
	// Name: Name of the trusted root certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway trusted root certificate.
	Properties *ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM `json:"properties,omitempty"`
}

// UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
type ApplicationGatewayUrlPathMap_ARM struct {
	// Name: Name of the URL path map that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the application gateway URL path map.
	Properties *ApplicationGatewayUrlPathMapPropertiesFormat_ARM `json:"properties,omitempty"`
}

// Application gateway web application firewall configuration.
type ApplicationGatewayWebApplicationFirewallConfiguration_ARM struct {
	// DisabledRuleGroups: The disabled rule groups.
	DisabledRuleGroups []ApplicationGatewayFirewallDisabledRuleGroup_ARM `json:"disabledRuleGroups,omitempty"`

	// Enabled: Whether the web application firewall is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`

	// Exclusions: The exclusion list.
	Exclusions []ApplicationGatewayFirewallExclusion_ARM `json:"exclusions,omitempty"`

	// FileUploadLimitInMb: Maximum file upload size in Mb for WAF.
	FileUploadLimitInMb *int `json:"fileUploadLimitInMb,omitempty"`

	// FirewallMode: Web application firewall mode.
	FirewallMode *ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM `json:"firewallMode,omitempty"`

	// MaxRequestBodySize: Maximum request body size for WAF.
	MaxRequestBodySize *int `json:"maxRequestBodySize,omitempty"`

	// MaxRequestBodySizeInKb: Maximum request body size in Kb for WAF.
	MaxRequestBodySizeInKb *int `json:"maxRequestBodySizeInKb,omitempty"`

	// RequestBodyCheck: Whether allow WAF to check request Body.
	RequestBodyCheck *bool `json:"requestBodyCheck,omitempty"`

	// RuleSetType: The type of the web application firewall rule set. Possible values are: 'OWASP'.
	RuleSetType *string `json:"ruleSetType,omitempty"`

	// RuleSetVersion: The version of the rule set type.
	RuleSetVersion *string `json:"ruleSetVersion,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned, UserAssigned","UserAssigned"}
type ManagedServiceIdentity_Type_ARM string

const (
	ManagedServiceIdentity_Type_ARM_None                       = ManagedServiceIdentity_Type_ARM("None")
	ManagedServiceIdentity_Type_ARM_SystemAssigned             = ManagedServiceIdentity_Type_ARM("SystemAssigned")
	ManagedServiceIdentity_Type_ARM_SystemAssignedUserAssigned = ManagedServiceIdentity_Type_ARM("SystemAssigned, UserAssigned")
	ManagedServiceIdentity_Type_ARM_UserAssigned               = ManagedServiceIdentity_Type_ARM("UserAssigned")
)

// Mapping from string to ManagedServiceIdentity_Type_ARM
var managedServiceIdentity_Type_ARM_Values = map[string]ManagedServiceIdentity_Type_ARM{
	"none":                         ManagedServiceIdentity_Type_ARM_None,
	"systemassigned":               ManagedServiceIdentity_Type_ARM_SystemAssigned,
	"systemassigned, userassigned": ManagedServiceIdentity_Type_ARM_SystemAssignedUserAssigned,
	"userassigned":                 ManagedServiceIdentity_Type_ARM_UserAssigned,
}

// Information about the user assigned identity for the resource
type UserAssignedIdentityDetails_ARM struct {
}

// Authentication certificates properties of an application gateway.
type ApplicationGatewayAuthenticationCertificatePropertiesFormat_ARM struct {
	// Data: Certificate public data.
	Data *string `json:"data,omitempty"`
}

// Properties of Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPoolPropertiesFormat_ARM struct {
	// BackendAddresses: Backend addresses.
	BackendAddresses []ApplicationGatewayBackendAddress_ARM `json:"backendAddresses,omitempty"`
}

// Properties of Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHttpSettingsPropertiesFormat_ARM struct {
	// AffinityCookieName: Cookie name to use for the affinity cookie.
	AffinityCookieName *string `json:"affinityCookieName,omitempty"`

	// AuthenticationCertificates: Array of references to application gateway authentication certificates.
	AuthenticationCertificates []ApplicationGatewaySubResource_ARM `json:"authenticationCertificates,omitempty"`

	// ConnectionDraining: Connection draining of the backend http settings resource.
	ConnectionDraining *ApplicationGatewayConnectionDraining_ARM `json:"connectionDraining,omitempty"`

	// CookieBasedAffinity: Cookie based affinity.
	CookieBasedAffinity *ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM `json:"cookieBasedAffinity,omitempty"`

	// HostName: Host header to be sent to the backend servers.
	HostName *string `json:"hostName,omitempty"`

	// Path: Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is
	// null.
	Path *string `json:"path,omitempty"`

	// PickHostNameFromBackendAddress: Whether to pick host header should be picked from the host name of the backend server.
	// Default value is false.
	PickHostNameFromBackendAddress *bool `json:"pickHostNameFromBackendAddress,omitempty"`

	// Port: The destination port on the backend.
	Port *int `json:"port,omitempty"`

	// Probe: Probe resource of an application gateway.
	Probe *ApplicationGatewaySubResource_ARM `json:"probe,omitempty"`

	// ProbeEnabled: Whether the probe is enabled. Default value is false.
	ProbeEnabled *bool `json:"probeEnabled,omitempty"`

	// Protocol: The protocol used to communicate with the backend.
	Protocol *ApplicationGatewayProtocol_ARM `json:"protocol,omitempty"`

	// RequestTimeout: Request timeout in seconds. Application Gateway will fail the request if response is not received within
	// RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
	RequestTimeout *int `json:"requestTimeout,omitempty"`

	// TrustedRootCertificates: Array of references to application gateway trusted root certificates.
	TrustedRootCertificates []ApplicationGatewaySubResource_ARM `json:"trustedRootCertificates,omitempty"`
}

// Properties of Backend address pool settings of an application gateway.
type ApplicationGatewayBackendSettingsPropertiesFormat_ARM struct {
	// HostName: Server name indication to be sent to the backend servers for Tls protocol.
	HostName *string `json:"hostName,omitempty"`

	// PickHostNameFromBackendAddress: Whether to pick server name indication from the host name of the backend server for Tls
	// protocol. Default value is false.
	PickHostNameFromBackendAddress *bool `json:"pickHostNameFromBackendAddress,omitempty"`

	// Port: The destination port on the backend.
	Port *int `json:"port,omitempty"`

	// Probe: Probe resource of an application gateway.
	Probe *ApplicationGatewaySubResource_ARM `json:"probe,omitempty"`

	// Protocol: The protocol used to communicate with the backend.
	Protocol *ApplicationGatewayProtocol_ARM `json:"protocol,omitempty"`

	// Timeout: Connection timeout in seconds. Application Gateway will fail the request if response is not received within
	// ConnectionTimeout. Acceptable values are from 1 second to 86400 seconds.
	Timeout *int `json:"timeout,omitempty"`

	// TrustedRootCertificates: Array of references to application gateway trusted root certificates.
	TrustedRootCertificates []ApplicationGatewaySubResource_ARM `json:"trustedRootCertificates,omitempty"`
}

// +kubebuilder:validation:Enum={"HttpStatus403","HttpStatus502"}
type ApplicationGatewayCustomError_StatusCode_ARM string

const (
	ApplicationGatewayCustomError_StatusCode_ARM_HttpStatus403 = ApplicationGatewayCustomError_StatusCode_ARM("HttpStatus403")
	ApplicationGatewayCustomError_StatusCode_ARM_HttpStatus502 = ApplicationGatewayCustomError_StatusCode_ARM("HttpStatus502")
)

// Mapping from string to ApplicationGatewayCustomError_StatusCode_ARM
var applicationGatewayCustomError_StatusCode_ARM_Values = map[string]ApplicationGatewayCustomError_StatusCode_ARM{
	"httpstatus403": ApplicationGatewayCustomError_StatusCode_ARM_HttpStatus403,
	"httpstatus502": ApplicationGatewayCustomError_StatusCode_ARM_HttpStatus502,
}

// Allows to disable rules within a rule group or an entire rule group.
type ApplicationGatewayFirewallDisabledRuleGroup_ARM struct {
	// RuleGroupName: The name of the rule group that will be disabled.
	RuleGroupName *string `json:"ruleGroupName,omitempty"`

	// Rules: The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
	Rules []int `json:"rules,omitempty"`
}

// Allow to exclude some variable satisfy the condition for the WAF check.
type ApplicationGatewayFirewallExclusion_ARM struct {
	// MatchVariable: The variable to be excluded.
	MatchVariable *string `json:"matchVariable,omitempty"`

	// Selector: When matchVariable is a collection, operator used to specify which elements in the collection this exclusion
	// applies to.
	Selector *string `json:"selector,omitempty"`

	// SelectorMatchOperator: When matchVariable is a collection, operate on the selector to specify which elements in the
	// collection this exclusion applies to.
	SelectorMatchOperator *string `json:"selectorMatchOperator,omitempty"`
}

// Properties of Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat_ARM struct {
	// PrivateIPAddress: PrivateIPAddress of the network interface IP Configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_ARM `json:"privateIPAllocationMethod,omitempty"`

	// PrivateLinkConfiguration: Reference to the application gateway private link configuration.
	PrivateLinkConfiguration *ApplicationGatewaySubResource_ARM `json:"privateLinkConfiguration,omitempty"`

	// PublicIPAddress: Reference to the PublicIP resource.
	PublicIPAddress *ApplicationGatewaySubResource_ARM `json:"publicIPAddress,omitempty"`

	// Subnet: Reference to the subnet resource.
	Subnet *ApplicationGatewaySubResource_ARM `json:"subnet,omitempty"`
}

// Properties of Frontend port of an application gateway.
type ApplicationGatewayFrontendPortPropertiesFormat_ARM struct {
	// Port: Frontend port.
	Port *int `json:"port,omitempty"`
}

// Properties of HTTP listener of an application gateway.
type ApplicationGatewayHttpListenerPropertiesFormat_ARM struct {
	// CustomErrorConfigurations: Custom error configurations of the HTTP listener.
	CustomErrorConfigurations []ApplicationGatewayCustomError_ARM `json:"customErrorConfigurations,omitempty"`

	// FirewallPolicy: Reference to the FirewallPolicy resource.
	FirewallPolicy *ApplicationGatewaySubResource_ARM `json:"firewallPolicy,omitempty"`

	// FrontendIPConfiguration: Frontend IP configuration resource of an application gateway.
	FrontendIPConfiguration *ApplicationGatewaySubResource_ARM `json:"frontendIPConfiguration,omitempty"`

	// FrontendPort: Frontend port resource of an application gateway.
	FrontendPort *ApplicationGatewaySubResource_ARM `json:"frontendPort,omitempty"`

	// HostName: Host name of HTTP listener.
	HostName *string `json:"hostName,omitempty"`

	// HostNames: List of Host names for HTTP Listener that allows special wildcard characters as well.
	HostNames []string `json:"hostNames,omitempty"`

	// Protocol: Protocol of the HTTP listener.
	Protocol *ApplicationGatewayProtocol_ARM `json:"protocol,omitempty"`

	// RequireServerNameIndication: Applicable only if protocol is https. Enables SNI for multi-hosting.
	RequireServerNameIndication *bool `json:"requireServerNameIndication,omitempty"`

	// SslCertificate: SSL certificate resource of an application gateway.
	SslCertificate *ApplicationGatewaySubResource_ARM `json:"sslCertificate,omitempty"`

	// SslProfile: SSL profile resource of the application gateway.
	SslProfile *ApplicationGatewaySubResource_ARM `json:"sslProfile,omitempty"`
}

// Properties of IP configuration of an application gateway.
type ApplicationGatewayIPConfigurationPropertiesFormat_ARM struct {
	// Subnet: Reference to the subnet resource. A subnet from where application gateway gets its private address.
	Subnet *ApplicationGatewaySubResource_ARM `json:"subnet,omitempty"`
}

// Properties of listener of an application gateway.
type ApplicationGatewayListenerPropertiesFormat_ARM struct {
	// FrontendIPConfiguration: Frontend IP configuration resource of an application gateway.
	FrontendIPConfiguration *ApplicationGatewaySubResource_ARM `json:"frontendIPConfiguration,omitempty"`

	// FrontendPort: Frontend port resource of an application gateway.
	FrontendPort *ApplicationGatewaySubResource_ARM `json:"frontendPort,omitempty"`

	// Protocol: Protocol of the listener.
	Protocol *ApplicationGatewayProtocol_ARM `json:"protocol,omitempty"`

	// SslCertificate: SSL certificate resource of an application gateway.
	SslCertificate *ApplicationGatewaySubResource_ARM `json:"sslCertificate,omitempty"`

	// SslProfile: SSL profile resource of the application gateway.
	SslProfile *ApplicationGatewaySubResource_ARM `json:"sslProfile,omitempty"`
}

// Properties of Load Distribution Policy of an application gateway.
type ApplicationGatewayLoadDistributionPolicyPropertiesFormat_ARM struct {
	// LoadDistributionAlgorithm: Load Distribution Targets resource of an application gateway.
	LoadDistributionAlgorithm *ApplicationGatewayLoadDistributionAlgorithmEnum_ARM `json:"loadDistributionAlgorithm,omitempty"`

	// LoadDistributionTargets: Load Distribution Targets resource of an application gateway.
	LoadDistributionTargets []ApplicationGatewayLoadDistributionTarget_ARM `json:"loadDistributionTargets,omitempty"`
}

// Properties of private link configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfigurationProperties_ARM struct {
	// IpConfigurations: An array of application gateway private link ip configurations.
	IpConfigurations []ApplicationGatewayPrivateLinkIpConfiguration_ARM `json:"ipConfigurations,omitempty"`
}

// Properties of probe of an application gateway.
type ApplicationGatewayProbePropertiesFormat_ARM struct {
	// Host: Host name to send the probe to.
	Host *string `json:"host,omitempty"`

	// Interval: The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values
	// are from 1 second to 86400 seconds.
	Interval *int `json:"interval,omitempty"`

	// Match: Criterion for classifying a healthy probe response.
	Match *ApplicationGatewayProbeHealthResponseMatch_ARM `json:"match,omitempty"`

	// MinServers: Minimum number of servers that are always marked healthy. Default value is 0.
	MinServers *int `json:"minServers,omitempty"`

	// Path: Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
	Path *string `json:"path,omitempty"`

	// PickHostNameFromBackendHttpSettings: Whether the host header should be picked from the backend http settings. Default
	// value is false.
	PickHostNameFromBackendHttpSettings *bool `json:"pickHostNameFromBackendHttpSettings,omitempty"`

	// PickHostNameFromBackendSettings: Whether the server name indication should be picked from the backend settings for Tls
	// protocol. Default value is false.
	PickHostNameFromBackendSettings *bool `json:"pickHostNameFromBackendSettings,omitempty"`

	// Port: Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case
	// not set, port from http settings will be used. This property is valid for Standard_v2 and WAF_v2 only.
	Port *int `json:"port,omitempty"`

	// Protocol: The protocol used for the probe.
	Protocol *ApplicationGatewayProtocol_ARM `json:"protocol,omitempty"`

	// Timeout: The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout
	// period. Acceptable values are from 1 second to 86400 seconds.
	Timeout *int `json:"timeout,omitempty"`

	// UnhealthyThreshold: The probe retry count. Backend server is marked down after consecutive probe failure count reaches
	// UnhealthyThreshold. Acceptable values are from 1 second to 20.
	UnhealthyThreshold *int `json:"unhealthyThreshold,omitempty"`
}

// Properties of redirect configuration of the application gateway.
type ApplicationGatewayRedirectConfigurationPropertiesFormat_ARM struct {
	// IncludePath: Include path in the redirected url.
	IncludePath *bool `json:"includePath,omitempty"`

	// IncludeQueryString: Include query string in the redirected url.
	IncludeQueryString *bool `json:"includeQueryString,omitempty"`

	// PathRules: Path rules specifying redirect configuration.
	PathRules []ApplicationGatewaySubResource_ARM `json:"pathRules,omitempty"`

	// RedirectType: HTTP redirection type.
	RedirectType *RedirectTypeEnum_ARM `json:"redirectType,omitempty"`

	// RequestRoutingRules: Request routing specifying redirect configuration.
	RequestRoutingRules []ApplicationGatewaySubResource_ARM `json:"requestRoutingRules,omitempty"`

	// TargetListener: Reference to a listener to redirect the request to.
	TargetListener *ApplicationGatewaySubResource_ARM `json:"targetListener,omitempty"`

	// TargetUrl: Url to redirect the request to.
	TargetUrl *string `json:"targetUrl,omitempty"`

	// UrlPathMaps: Url path maps specifying default redirect configuration.
	UrlPathMaps []ApplicationGatewaySubResource_ARM `json:"urlPathMaps,omitempty"`
}

// Properties of request routing rule of the application gateway.
type ApplicationGatewayRequestRoutingRulePropertiesFormat_ARM struct {
	// BackendAddressPool: Backend address pool resource of the application gateway.
	BackendAddressPool *ApplicationGatewaySubResource_ARM `json:"backendAddressPool,omitempty"`

	// BackendHttpSettings: Backend http settings resource of the application gateway.
	BackendHttpSettings *ApplicationGatewaySubResource_ARM `json:"backendHttpSettings,omitempty"`

	// HttpListener: Http listener resource of the application gateway.
	HttpListener *ApplicationGatewaySubResource_ARM `json:"httpListener,omitempty"`

	// LoadDistributionPolicy: Load Distribution Policy resource of the application gateway.
	LoadDistributionPolicy *ApplicationGatewaySubResource_ARM `json:"loadDistributionPolicy,omitempty"`

	// Priority: Priority of the request routing rule.
	Priority *int `json:"priority,omitempty"`

	// RedirectConfiguration: Redirect configuration resource of the application gateway.
	RedirectConfiguration *ApplicationGatewaySubResource_ARM `json:"redirectConfiguration,omitempty"`

	// RewriteRuleSet: Rewrite Rule Set resource in Basic rule of the application gateway.
	RewriteRuleSet *ApplicationGatewaySubResource_ARM `json:"rewriteRuleSet,omitempty"`

	// RuleType: Rule type.
	RuleType *ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM `json:"ruleType,omitempty"`

	// UrlPathMap: URL path map resource of the application gateway.
	UrlPathMap *ApplicationGatewaySubResource_ARM `json:"urlPathMap,omitempty"`
}

// Properties of rewrite rule set of the application gateway.
type ApplicationGatewayRewriteRuleSetPropertiesFormat_ARM struct {
	// RewriteRules: Rewrite rules in the rewrite rule set.
	RewriteRules []ApplicationGatewayRewriteRule_ARM `json:"rewriteRules,omitempty"`
}

// Properties of routing rule of the application gateway.
type ApplicationGatewayRoutingRulePropertiesFormat_ARM struct {
	// BackendAddressPool: Backend address pool resource of the application gateway.
	BackendAddressPool *ApplicationGatewaySubResource_ARM `json:"backendAddressPool,omitempty"`

	// BackendSettings: Backend settings resource of the application gateway.
	BackendSettings *ApplicationGatewaySubResource_ARM `json:"backendSettings,omitempty"`

	// Listener: Listener resource of the application gateway.
	Listener *ApplicationGatewaySubResource_ARM `json:"listener,omitempty"`

	// Priority: Priority of the routing rule.
	Priority *int `json:"priority,omitempty"`

	// RuleType: Rule type.
	RuleType *ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM `json:"ruleType,omitempty"`
}

// +kubebuilder:validation:Enum={"Standard_Large","Standard_Medium","Standard_Small","Standard_v2","WAF_Large","WAF_Medium","WAF_v2"}
type ApplicationGatewaySku_Name_ARM string

const (
	ApplicationGatewaySku_Name_ARM_Standard_Large  = ApplicationGatewaySku_Name_ARM("Standard_Large")
	ApplicationGatewaySku_Name_ARM_Standard_Medium = ApplicationGatewaySku_Name_ARM("Standard_Medium")
	ApplicationGatewaySku_Name_ARM_Standard_Small  = ApplicationGatewaySku_Name_ARM("Standard_Small")
	ApplicationGatewaySku_Name_ARM_Standard_V2     = ApplicationGatewaySku_Name_ARM("Standard_v2")
	ApplicationGatewaySku_Name_ARM_WAF_Large       = ApplicationGatewaySku_Name_ARM("WAF_Large")
	ApplicationGatewaySku_Name_ARM_WAF_Medium      = ApplicationGatewaySku_Name_ARM("WAF_Medium")
	ApplicationGatewaySku_Name_ARM_WAF_V2          = ApplicationGatewaySku_Name_ARM("WAF_v2")
)

// Mapping from string to ApplicationGatewaySku_Name_ARM
var applicationGatewaySku_Name_ARM_Values = map[string]ApplicationGatewaySku_Name_ARM{
	"standard_large":  ApplicationGatewaySku_Name_ARM_Standard_Large,
	"standard_medium": ApplicationGatewaySku_Name_ARM_Standard_Medium,
	"standard_small":  ApplicationGatewaySku_Name_ARM_Standard_Small,
	"standard_v2":     ApplicationGatewaySku_Name_ARM_Standard_V2,
	"waf_large":       ApplicationGatewaySku_Name_ARM_WAF_Large,
	"waf_medium":      ApplicationGatewaySku_Name_ARM_WAF_Medium,
	"waf_v2":          ApplicationGatewaySku_Name_ARM_WAF_V2,
}

// +kubebuilder:validation:Enum={"Standard","Standard_v2","WAF","WAF_v2"}
type ApplicationGatewaySku_Tier_ARM string

const (
	ApplicationGatewaySku_Tier_ARM_Standard    = ApplicationGatewaySku_Tier_ARM("Standard")
	ApplicationGatewaySku_Tier_ARM_Standard_V2 = ApplicationGatewaySku_Tier_ARM("Standard_v2")
	ApplicationGatewaySku_Tier_ARM_WAF         = ApplicationGatewaySku_Tier_ARM("WAF")
	ApplicationGatewaySku_Tier_ARM_WAF_V2      = ApplicationGatewaySku_Tier_ARM("WAF_v2")
)

// Mapping from string to ApplicationGatewaySku_Tier_ARM
var applicationGatewaySku_Tier_ARM_Values = map[string]ApplicationGatewaySku_Tier_ARM{
	"standard":    ApplicationGatewaySku_Tier_ARM_Standard,
	"standard_v2": ApplicationGatewaySku_Tier_ARM_Standard_V2,
	"waf":         ApplicationGatewaySku_Tier_ARM_WAF,
	"waf_v2":      ApplicationGatewaySku_Tier_ARM_WAF_V2,
}

// Properties of SSL certificates of an application gateway.
type ApplicationGatewaySslCertificatePropertiesFormat_ARM struct {
	// Data: Base-64 encoded pfx certificate. Only applicable in PUT Request.
	Data *string `json:"data,omitempty"`

	// KeyVaultSecretId: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretId *string `json:"keyVaultSecretId,omitempty"`

	// Password: Password for the pfx file specified in data. Only applicable in PUT request.
	Password *string `json:"password,omitempty"`
}

// +kubebuilder:validation:Enum={"Custom","CustomV2","Predefined"}
type ApplicationGatewaySslPolicy_PolicyType_ARM string

const (
	ApplicationGatewaySslPolicy_PolicyType_ARM_Custom     = ApplicationGatewaySslPolicy_PolicyType_ARM("Custom")
	ApplicationGatewaySslPolicy_PolicyType_ARM_CustomV2   = ApplicationGatewaySslPolicy_PolicyType_ARM("CustomV2")
	ApplicationGatewaySslPolicy_PolicyType_ARM_Predefined = ApplicationGatewaySslPolicy_PolicyType_ARM("Predefined")
)

// Mapping from string to ApplicationGatewaySslPolicy_PolicyType_ARM
var applicationGatewaySslPolicy_PolicyType_ARM_Values = map[string]ApplicationGatewaySslPolicy_PolicyType_ARM{
	"custom":     ApplicationGatewaySslPolicy_PolicyType_ARM_Custom,
	"customv2":   ApplicationGatewaySslPolicy_PolicyType_ARM_CustomV2,
	"predefined": ApplicationGatewaySslPolicy_PolicyType_ARM_Predefined,
}

// Properties of SSL profile of an application gateway.
type ApplicationGatewaySslProfilePropertiesFormat_ARM struct {
	// ClientAuthConfiguration: Client authentication configuration of the application gateway resource.
	ClientAuthConfiguration *ApplicationGatewayClientAuthConfiguration_ARM `json:"clientAuthConfiguration,omitempty"`

	// SslPolicy: SSL policy of the application gateway resource.
	SslPolicy *ApplicationGatewaySslPolicy_ARM `json:"sslPolicy,omitempty"`

	// TrustedClientCertificates: Array of references to application gateway trusted client certificates.
	TrustedClientCertificates []ApplicationGatewaySubResource_ARM `json:"trustedClientCertificates,omitempty"`
}

// Trusted client certificates properties of an application gateway.
type ApplicationGatewayTrustedClientCertificatePropertiesFormat_ARM struct {
	// Data: Certificate public data.
	Data *string `json:"data,omitempty"`
}

// Trusted Root certificates properties of an application gateway.
type ApplicationGatewayTrustedRootCertificatePropertiesFormat_ARM struct {
	// Data: Certificate public data.
	Data *string `json:"data,omitempty"`

	// KeyVaultSecretId: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretId *string `json:"keyVaultSecretId,omitempty"`
}

// Properties of UrlPathMap of the application gateway.
type ApplicationGatewayUrlPathMapPropertiesFormat_ARM struct {
	// DefaultBackendAddressPool: Default backend address pool resource of URL path map.
	DefaultBackendAddressPool *ApplicationGatewaySubResource_ARM `json:"defaultBackendAddressPool,omitempty"`

	// DefaultBackendHttpSettings: Default backend http settings resource of URL path map.
	DefaultBackendHttpSettings *ApplicationGatewaySubResource_ARM `json:"defaultBackendHttpSettings,omitempty"`

	// DefaultLoadDistributionPolicy: Default Load Distribution Policy resource of URL path map.
	DefaultLoadDistributionPolicy *ApplicationGatewaySubResource_ARM `json:"defaultLoadDistributionPolicy,omitempty"`

	// DefaultRedirectConfiguration: Default redirect configuration resource of URL path map.
	DefaultRedirectConfiguration *ApplicationGatewaySubResource_ARM `json:"defaultRedirectConfiguration,omitempty"`

	// DefaultRewriteRuleSet: Default Rewrite rule set resource of URL path map.
	DefaultRewriteRuleSet *ApplicationGatewaySubResource_ARM `json:"defaultRewriteRuleSet,omitempty"`

	// PathRules: Path rule of URL path map resource.
	PathRules []ApplicationGatewayPathRule_ARM `json:"pathRules,omitempty"`
}

// +kubebuilder:validation:Enum={"Detection","Prevention"}
type ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM string

const (
	ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Detection  = ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM("Detection")
	ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Prevention = ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM("Prevention")
)

// Mapping from string to ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM
var applicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Values = map[string]ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM{
	"detection":  ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Detection,
	"prevention": ApplicationGatewayWebApplicationFirewallConfiguration_FirewallMode_ARM_Prevention,
}

// Ssl cipher suites enums.
// +kubebuilder:validation:Enum={"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA","TLS_DHE_DSS_WITH_AES_128_CBC_SHA","TLS_DHE_DSS_WITH_AES_128_CBC_SHA256","TLS_DHE_DSS_WITH_AES_256_CBC_SHA","TLS_DHE_DSS_WITH_AES_256_CBC_SHA256","TLS_DHE_RSA_WITH_AES_128_CBC_SHA","TLS_DHE_RSA_WITH_AES_128_GCM_SHA256","TLS_DHE_RSA_WITH_AES_256_CBC_SHA","TLS_DHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_3DES_EDE_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA256","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_256_CBC_SHA256","TLS_RSA_WITH_AES_256_GCM_SHA384"}
type CipherSuitesEnum_ARM string

const (
	CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       = CipherSuitesEnum_ARM("TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_128_CBC_SHA        = CipherSuitesEnum_ARM("TLS_DHE_DSS_WITH_AES_128_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256     = CipherSuitesEnum_ARM("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256")
	CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_256_CBC_SHA        = CipherSuitesEnum_ARM("TLS_DHE_DSS_WITH_AES_256_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256     = CipherSuitesEnum_ARM("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256")
	CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_128_CBC_SHA        = CipherSuitesEnum_ARM("TLS_DHE_RSA_WITH_AES_128_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256     = CipherSuitesEnum_ARM("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256")
	CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_256_CBC_SHA        = CipherSuitesEnum_ARM("TLS_DHE_RSA_WITH_AES_256_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384     = CipherSuitesEnum_ARM("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384")
	CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA    = CipherSuitesEnum_ARM("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = CipherSuitesEnum_ARM("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256")
	CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = CipherSuitesEnum_ARM("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256")
	CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA    = CipherSuitesEnum_ARM("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = CipherSuitesEnum_ARM("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384")
	CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = CipherSuitesEnum_ARM("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384")
	CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA      = CipherSuitesEnum_ARM("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256   = CipherSuitesEnum_ARM("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256")
	CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256   = CipherSuitesEnum_ARM("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256")
	CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA      = CipherSuitesEnum_ARM("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384   = CipherSuitesEnum_ARM("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384")
	CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384   = CipherSuitesEnum_ARM("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_3DES_EDE_CBC_SHA           = CipherSuitesEnum_ARM("TLS_RSA_WITH_3DES_EDE_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_CBC_SHA            = CipherSuitesEnum_ARM("TLS_RSA_WITH_AES_128_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_CBC_SHA256         = CipherSuitesEnum_ARM("TLS_RSA_WITH_AES_128_CBC_SHA256")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_GCM_SHA256         = CipherSuitesEnum_ARM("TLS_RSA_WITH_AES_128_GCM_SHA256")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_CBC_SHA            = CipherSuitesEnum_ARM("TLS_RSA_WITH_AES_256_CBC_SHA")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_CBC_SHA256         = CipherSuitesEnum_ARM("TLS_RSA_WITH_AES_256_CBC_SHA256")
	CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_GCM_SHA384         = CipherSuitesEnum_ARM("TLS_RSA_WITH_AES_256_GCM_SHA384")
)

// Mapping from string to CipherSuitesEnum_ARM
var cipherSuitesEnum_ARM_Values = map[string]CipherSuitesEnum_ARM{
	"tls_dhe_dss_with_3des_ede_cbc_sha":       CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
	"tls_dhe_dss_with_aes_128_cbc_sha":        CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
	"tls_dhe_dss_with_aes_128_cbc_sha256":     CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,
	"tls_dhe_dss_with_aes_256_cbc_sha":        CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_256_CBC_SHA,
	"tls_dhe_dss_with_aes_256_cbc_sha256":     CipherSuitesEnum_ARM_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,
	"tls_dhe_rsa_with_aes_128_cbc_sha":        CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
	"tls_dhe_rsa_with_aes_128_gcm_sha256":     CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
	"tls_dhe_rsa_with_aes_256_cbc_sha":        CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
	"tls_dhe_rsa_with_aes_256_gcm_sha384":     CipherSuitesEnum_ARM_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
	"tls_ecdhe_ecdsa_with_aes_128_cbc_sha":    CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	"tls_ecdhe_ecdsa_with_aes_128_cbc_sha256": CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
	"tls_ecdhe_ecdsa_with_aes_128_gcm_sha256": CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	"tls_ecdhe_ecdsa_with_aes_256_cbc_sha":    CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	"tls_ecdhe_ecdsa_with_aes_256_cbc_sha384": CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
	"tls_ecdhe_ecdsa_with_aes_256_gcm_sha384": CipherSuitesEnum_ARM_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	"tls_ecdhe_rsa_with_aes_128_cbc_sha":      CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	"tls_ecdhe_rsa_with_aes_128_cbc_sha256":   CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
	"tls_ecdhe_rsa_with_aes_128_gcm_sha256":   CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
	"tls_ecdhe_rsa_with_aes_256_cbc_sha":      CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	"tls_ecdhe_rsa_with_aes_256_cbc_sha384":   CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
	"tls_ecdhe_rsa_with_aes_256_gcm_sha384":   CipherSuitesEnum_ARM_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	"tls_rsa_with_3des_ede_cbc_sha":           CipherSuitesEnum_ARM_TLS_RSA_WITH_3DES_EDE_CBC_SHA,
	"tls_rsa_with_aes_128_cbc_sha":            CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_CBC_SHA,
	"tls_rsa_with_aes_128_cbc_sha256":         CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_CBC_SHA256,
	"tls_rsa_with_aes_128_gcm_sha256":         CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_128_GCM_SHA256,
	"tls_rsa_with_aes_256_cbc_sha":            CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_CBC_SHA,
	"tls_rsa_with_aes_256_cbc_sha256":         CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_CBC_SHA256,
	"tls_rsa_with_aes_256_gcm_sha384":         CipherSuitesEnum_ARM_TLS_RSA_WITH_AES_256_GCM_SHA384,
}

// Ssl predefined policy name enums.
// +kubebuilder:validation:Enum={"AppGwSslPolicy20150501","AppGwSslPolicy20170401","AppGwSslPolicy20170401S","AppGwSslPolicy20220101","AppGwSslPolicy20220101S"}
type PolicyNameEnum_ARM string

const (
	PolicyNameEnum_ARM_AppGwSslPolicy20150501  = PolicyNameEnum_ARM("AppGwSslPolicy20150501")
	PolicyNameEnum_ARM_AppGwSslPolicy20170401  = PolicyNameEnum_ARM("AppGwSslPolicy20170401")
	PolicyNameEnum_ARM_AppGwSslPolicy20170401S = PolicyNameEnum_ARM("AppGwSslPolicy20170401S")
	PolicyNameEnum_ARM_AppGwSslPolicy20220101  = PolicyNameEnum_ARM("AppGwSslPolicy20220101")
	PolicyNameEnum_ARM_AppGwSslPolicy20220101S = PolicyNameEnum_ARM("AppGwSslPolicy20220101S")
)

// Mapping from string to PolicyNameEnum_ARM
var policyNameEnum_ARM_Values = map[string]PolicyNameEnum_ARM{
	"appgwsslpolicy20150501":  PolicyNameEnum_ARM_AppGwSslPolicy20150501,
	"appgwsslpolicy20170401":  PolicyNameEnum_ARM_AppGwSslPolicy20170401,
	"appgwsslpolicy20170401s": PolicyNameEnum_ARM_AppGwSslPolicy20170401S,
	"appgwsslpolicy20220101":  PolicyNameEnum_ARM_AppGwSslPolicy20220101,
	"appgwsslpolicy20220101s": PolicyNameEnum_ARM_AppGwSslPolicy20220101S,
}

// Ssl protocol enums.
// +kubebuilder:validation:Enum={"TLSv1_0","TLSv1_1","TLSv1_2","TLSv1_3"}
type ProtocolsEnum_ARM string

const (
	ProtocolsEnum_ARM_TLSv1_0 = ProtocolsEnum_ARM("TLSv1_0")
	ProtocolsEnum_ARM_TLSv1_1 = ProtocolsEnum_ARM("TLSv1_1")
	ProtocolsEnum_ARM_TLSv1_2 = ProtocolsEnum_ARM("TLSv1_2")
	ProtocolsEnum_ARM_TLSv1_3 = ProtocolsEnum_ARM("TLSv1_3")
)

// Mapping from string to ProtocolsEnum_ARM
var protocolsEnum_ARM_Values = map[string]ProtocolsEnum_ARM{
	"tlsv1_0": ProtocolsEnum_ARM_TLSv1_0,
	"tlsv1_1": ProtocolsEnum_ARM_TLSv1_1,
	"tlsv1_2": ProtocolsEnum_ARM_TLSv1_2,
	"tlsv1_3": ProtocolsEnum_ARM_TLSv1_3,
}

// Backend address of an application gateway.
type ApplicationGatewayBackendAddress_ARM struct {
	// Fqdn: Fully qualified domain name (FQDN).
	Fqdn *string `json:"fqdn,omitempty"`

	// IpAddress: IP address.
	IpAddress *string `json:"ipAddress,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM string

const (
	ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Disabled = ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM("Disabled")
	ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Enabled  = ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM("Enabled")
)

// Mapping from string to ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM
var applicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Values = map[string]ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM{
	"disabled": ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Disabled,
	"enabled":  ApplicationGatewayBackendHttpSettingsPropertiesFormat_CookieBasedAffinity_ARM_Enabled,
}

// Application gateway client authentication configuration.
type ApplicationGatewayClientAuthConfiguration_ARM struct {
	// VerifyClientCertIssuerDN: Verify client certificate issuer name on the application gateway.
	VerifyClientCertIssuerDN *bool `json:"verifyClientCertIssuerDN,omitempty"`

	// VerifyClientRevocation: Verify client certificate revocation status.
	VerifyClientRevocation *ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM `json:"verifyClientRevocation,omitempty"`
}

// Connection draining allows open connections to a backend server to be active for a specified time after the backend
// server got removed from the configuration.
type ApplicationGatewayConnectionDraining_ARM struct {
	// DrainTimeoutInSec: The number of seconds connection draining is active. Acceptable values are from 1 second to 3600
	// seconds.
	DrainTimeoutInSec *int `json:"drainTimeoutInSec,omitempty"`

	// Enabled: Whether connection draining is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
}

// Load Distribution Algorithm enums.
// +kubebuilder:validation:Enum={"IpHash","LeastConnections","RoundRobin"}
type ApplicationGatewayLoadDistributionAlgorithmEnum_ARM string

const (
	ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_IpHash           = ApplicationGatewayLoadDistributionAlgorithmEnum_ARM("IpHash")
	ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_LeastConnections = ApplicationGatewayLoadDistributionAlgorithmEnum_ARM("LeastConnections")
	ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_RoundRobin       = ApplicationGatewayLoadDistributionAlgorithmEnum_ARM("RoundRobin")
)

// Mapping from string to ApplicationGatewayLoadDistributionAlgorithmEnum_ARM
var applicationGatewayLoadDistributionAlgorithmEnum_ARM_Values = map[string]ApplicationGatewayLoadDistributionAlgorithmEnum_ARM{
	"iphash":           ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_IpHash,
	"leastconnections": ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_LeastConnections,
	"roundrobin":       ApplicationGatewayLoadDistributionAlgorithmEnum_ARM_RoundRobin,
}

// Load Distribution Target of an application gateway.
type ApplicationGatewayLoadDistributionTarget_ARM struct {
	Id *string `json:"id,omitempty"`
}

// Path rule of URL path map of an application gateway.
type ApplicationGatewayPathRule_ARM struct {
	Id *string `json:"id,omitempty"`
}

// The application gateway private link ip configuration.
type ApplicationGatewayPrivateLinkIpConfiguration_ARM struct {
	Id *string `json:"id,omitempty"`
}

// Application gateway probe health response match.
type ApplicationGatewayProbeHealthResponseMatch_ARM struct {
	// Body: Body that must be contained in the health response. Default value is empty.
	Body *string `json:"body,omitempty"`

	// StatusCodes: Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
	StatusCodes []string `json:"statusCodes,omitempty"`
}

// Application Gateway protocol.
// +kubebuilder:validation:Enum={"Http","Https","Tcp","Tls"}
type ApplicationGatewayProtocol_ARM string

const (
	ApplicationGatewayProtocol_ARM_Http  = ApplicationGatewayProtocol_ARM("Http")
	ApplicationGatewayProtocol_ARM_Https = ApplicationGatewayProtocol_ARM("Https")
	ApplicationGatewayProtocol_ARM_Tcp   = ApplicationGatewayProtocol_ARM("Tcp")
	ApplicationGatewayProtocol_ARM_Tls   = ApplicationGatewayProtocol_ARM("Tls")
)

// Mapping from string to ApplicationGatewayProtocol_ARM
var applicationGatewayProtocol_ARM_Values = map[string]ApplicationGatewayProtocol_ARM{
	"http":  ApplicationGatewayProtocol_ARM_Http,
	"https": ApplicationGatewayProtocol_ARM_Https,
	"tcp":   ApplicationGatewayProtocol_ARM_Tcp,
	"tls":   ApplicationGatewayProtocol_ARM_Tls,
}

// +kubebuilder:validation:Enum={"Basic","PathBasedRouting"}
type ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM string

const (
	ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_Basic            = ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM("Basic")
	ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_PathBasedRouting = ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM("PathBasedRouting")
)

// Mapping from string to ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM
var applicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_Values = map[string]ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM{
	"basic":            ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_Basic,
	"pathbasedrouting": ApplicationGatewayRequestRoutingRulePropertiesFormat_RuleType_ARM_PathBasedRouting,
}

// Rewrite rule of an application gateway.
type ApplicationGatewayRewriteRule_ARM struct {
	// ActionSet: Set of actions to be done as part of the rewrite Rule.
	ActionSet *ApplicationGatewayRewriteRuleActionSet_ARM `json:"actionSet,omitempty"`

	// Conditions: Conditions based on which the action set execution will be evaluated.
	Conditions []ApplicationGatewayRewriteRuleCondition_ARM `json:"conditions,omitempty"`

	// Name: Name of the rewrite rule that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// RuleSequence: Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a
	// RewriteRuleSet.
	RuleSequence *int `json:"ruleSequence,omitempty"`
}

// +kubebuilder:validation:Enum={"Basic","PathBasedRouting"}
type ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM string

const (
	ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_Basic            = ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM("Basic")
	ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_PathBasedRouting = ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM("PathBasedRouting")
)

// Mapping from string to ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM
var applicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_Values = map[string]ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM{
	"basic":            ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_Basic,
	"pathbasedrouting": ApplicationGatewayRoutingRulePropertiesFormat_RuleType_ARM_PathBasedRouting,
}

// IP address allocation method.
// +kubebuilder:validation:Enum={"Dynamic","Static"}
type IPAllocationMethod_ARM string

const (
	IPAllocationMethod_ARM_Dynamic = IPAllocationMethod_ARM("Dynamic")
	IPAllocationMethod_ARM_Static  = IPAllocationMethod_ARM("Static")
)

// Mapping from string to IPAllocationMethod_ARM
var iPAllocationMethod_ARM_Values = map[string]IPAllocationMethod_ARM{
	"dynamic": IPAllocationMethod_ARM_Dynamic,
	"static":  IPAllocationMethod_ARM_Static,
}

// Redirect type enum.
// +kubebuilder:validation:Enum={"Found","Permanent","SeeOther","Temporary"}
type RedirectTypeEnum_ARM string

const (
	RedirectTypeEnum_ARM_Found     = RedirectTypeEnum_ARM("Found")
	RedirectTypeEnum_ARM_Permanent = RedirectTypeEnum_ARM("Permanent")
	RedirectTypeEnum_ARM_SeeOther  = RedirectTypeEnum_ARM("SeeOther")
	RedirectTypeEnum_ARM_Temporary = RedirectTypeEnum_ARM("Temporary")
)

// Mapping from string to RedirectTypeEnum_ARM
var redirectTypeEnum_ARM_Values = map[string]RedirectTypeEnum_ARM{
	"found":     RedirectTypeEnum_ARM_Found,
	"permanent": RedirectTypeEnum_ARM_Permanent,
	"seeother":  RedirectTypeEnum_ARM_SeeOther,
	"temporary": RedirectTypeEnum_ARM_Temporary,
}

// +kubebuilder:validation:Enum={"None","OCSP"}
type ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM string

const (
	ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_None = ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM("None")
	ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_OCSP = ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM("OCSP")
)

// Mapping from string to ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM
var applicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_Values = map[string]ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM{
	"none": ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_None,
	"ocsp": ApplicationGatewayClientAuthConfiguration_VerifyClientRevocation_ARM_OCSP,
}

// Set of actions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleActionSet_ARM struct {
	// RequestHeaderConfigurations: Request Header Actions in the Action Set.
	RequestHeaderConfigurations []ApplicationGatewayHeaderConfiguration_ARM `json:"requestHeaderConfigurations,omitempty"`

	// ResponseHeaderConfigurations: Response Header Actions in the Action Set.
	ResponseHeaderConfigurations []ApplicationGatewayHeaderConfiguration_ARM `json:"responseHeaderConfigurations,omitempty"`

	// UrlConfiguration: Url Configuration Action in the Action Set.
	UrlConfiguration *ApplicationGatewayUrlConfiguration_ARM `json:"urlConfiguration,omitempty"`
}

// Set of conditions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleCondition_ARM struct {
	// IgnoreCase: Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
	IgnoreCase *bool `json:"ignoreCase,omitempty"`

	// Negate: Setting this value as truth will force to check the negation of the condition given by the user.
	Negate *bool `json:"negate,omitempty"`

	// Pattern: The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
	Pattern *string `json:"pattern,omitempty"`

	// Variable: The condition parameter of the RewriteRuleCondition.
	Variable *string `json:"variable,omitempty"`
}

// Header configuration of the Actions set in Application Gateway.
type ApplicationGatewayHeaderConfiguration_ARM struct {
	// HeaderName: Header name of the header configuration.
	HeaderName *string `json:"headerName,omitempty"`

	// HeaderValue: Header value of the header configuration.
	HeaderValue *string `json:"headerValue,omitempty"`
}

// Url configuration of the Actions set in Application Gateway.
type ApplicationGatewayUrlConfiguration_ARM struct {
	// ModifiedPath: Url path which user has provided for url rewrite. Null means no path will be updated. Default value is
	// null.
	ModifiedPath *string `json:"modifiedPath,omitempty"`

	// ModifiedQueryString: Query string which user has provided for url rewrite. Null means no query string will be updated.
	// Default value is null.
	ModifiedQueryString *string `json:"modifiedQueryString,omitempty"`

	// Reroute: If set as true, it will re-evaluate the url path map provided in path based request routing rules using
	// modified path. Default value is false.
	Reroute *bool `json:"reroute,omitempty"`
}
