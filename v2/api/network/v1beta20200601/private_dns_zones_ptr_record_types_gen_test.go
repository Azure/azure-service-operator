// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20200601

import (
	"encoding/json"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/network/v1beta20200601storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateDnsZonesPTRRecord_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZonesPTRRecord to hub returns original",
		prop.ForAll(RunResourceConversionTestForPrivateDnsZonesPTRRecord, PrivateDnsZonesPTRRecordGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForPrivateDnsZonesPTRRecord tests if a specific instance of PrivateDnsZonesPTRRecord round trips to the hub storage version and back losslessly
func RunResourceConversionTestForPrivateDnsZonesPTRRecord(subject PrivateDnsZonesPTRRecord) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20200601s.PrivateDnsZonesPTRRecord
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual PrivateDnsZonesPTRRecord
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZonesPTRRecord_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZonesPTRRecord to PrivateDnsZonesPTRRecord via AssignProperties_To_PrivateDnsZonesPTRRecord & AssignProperties_From_PrivateDnsZonesPTRRecord returns original",
		prop.ForAll(RunPropertyAssignmentTestForPrivateDnsZonesPTRRecord, PrivateDnsZonesPTRRecordGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPrivateDnsZonesPTRRecord tests if a specific instance of PrivateDnsZonesPTRRecord can be assigned to v1beta20200601storage and back losslessly
func RunPropertyAssignmentTestForPrivateDnsZonesPTRRecord(subject PrivateDnsZonesPTRRecord) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20200601s.PrivateDnsZonesPTRRecord
	err := copied.AssignProperties_To_PrivateDnsZonesPTRRecord(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PrivateDnsZonesPTRRecord
	err = actual.AssignProperties_From_PrivateDnsZonesPTRRecord(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZonesPTRRecord_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZonesPTRRecord via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesPTRRecord, PrivateDnsZonesPTRRecordGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesPTRRecord runs a test to see if a specific instance of PrivateDnsZonesPTRRecord round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesPTRRecord(subject PrivateDnsZonesPTRRecord) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZonesPTRRecord
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZonesPTRRecord instances for property testing - lazily instantiated by
// PrivateDnsZonesPTRRecordGenerator()
var privateDnsZonesPTRRecordGenerator gopter.Gen

// PrivateDnsZonesPTRRecordGenerator returns a generator of PrivateDnsZonesPTRRecord instances for property testing.
func PrivateDnsZonesPTRRecordGenerator() gopter.Gen {
	if privateDnsZonesPTRRecordGenerator != nil {
		return privateDnsZonesPTRRecordGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPrivateDnsZonesPTRRecord(generators)
	privateDnsZonesPTRRecordGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesPTRRecord{}), generators)

	return privateDnsZonesPTRRecordGenerator
}

// AddRelatedPropertyGeneratorsForPrivateDnsZonesPTRRecord is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZonesPTRRecord(gens map[string]gopter.Gen) {
	gens["Spec"] = PrivateDnsZones_PTR_SpecGenerator()
	gens["Status"] = PrivateDnsZones_PTR_STATUSGenerator()
}

func Test_PrivateDnsZones_PTR_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZones_PTR_Spec to PrivateDnsZones_PTR_Spec via AssignProperties_To_PrivateDnsZones_PTR_Spec & AssignProperties_From_PrivateDnsZones_PTR_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForPrivateDnsZones_PTR_Spec, PrivateDnsZones_PTR_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPrivateDnsZones_PTR_Spec tests if a specific instance of PrivateDnsZones_PTR_Spec can be assigned to v1beta20200601storage and back losslessly
func RunPropertyAssignmentTestForPrivateDnsZones_PTR_Spec(subject PrivateDnsZones_PTR_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20200601s.PrivateDnsZones_PTR_Spec
	err := copied.AssignProperties_To_PrivateDnsZones_PTR_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PrivateDnsZones_PTR_Spec
	err = actual.AssignProperties_From_PrivateDnsZones_PTR_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZones_PTR_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZones_PTR_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZones_PTR_Spec, PrivateDnsZones_PTR_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZones_PTR_Spec runs a test to see if a specific instance of PrivateDnsZones_PTR_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZones_PTR_Spec(subject PrivateDnsZones_PTR_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZones_PTR_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZones_PTR_Spec instances for property testing - lazily instantiated by
// PrivateDnsZones_PTR_SpecGenerator()
var privateDnsZones_PTR_SpecGenerator gopter.Gen

// PrivateDnsZones_PTR_SpecGenerator returns a generator of PrivateDnsZones_PTR_Spec instances for property testing.
// We first initialize privateDnsZones_PTR_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateDnsZones_PTR_SpecGenerator() gopter.Gen {
	if privateDnsZones_PTR_SpecGenerator != nil {
		return privateDnsZones_PTR_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_Spec(generators)
	privateDnsZones_PTR_SpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZones_PTR_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_Spec(generators)
	AddRelatedPropertyGeneratorsForPrivateDnsZones_PTR_Spec(generators)
	privateDnsZones_PTR_SpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZones_PTR_Spec{}), generators)

	return privateDnsZones_PTR_SpecGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Ttl"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForPrivateDnsZones_PTR_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZones_PTR_Spec(gens map[string]gopter.Gen) {
	gens["ARecords"] = gen.SliceOf(ARecordGenerator())
	gens["AaaaRecords"] = gen.SliceOf(AaaaRecordGenerator())
	gens["CnameRecord"] = gen.PtrOf(CnameRecordGenerator())
	gens["MxRecords"] = gen.SliceOf(MxRecordGenerator())
	gens["PtrRecords"] = gen.SliceOf(PtrRecordGenerator())
	gens["SoaRecord"] = gen.PtrOf(SoaRecordGenerator())
	gens["SrvRecords"] = gen.SliceOf(SrvRecordGenerator())
	gens["TxtRecords"] = gen.SliceOf(TxtRecordGenerator())
}

func Test_PrivateDnsZones_PTR_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZones_PTR_STATUS to PrivateDnsZones_PTR_STATUS via AssignProperties_To_PrivateDnsZones_PTR_STATUS & AssignProperties_From_PrivateDnsZones_PTR_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForPrivateDnsZones_PTR_STATUS, PrivateDnsZones_PTR_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPrivateDnsZones_PTR_STATUS tests if a specific instance of PrivateDnsZones_PTR_STATUS can be assigned to v1beta20200601storage and back losslessly
func RunPropertyAssignmentTestForPrivateDnsZones_PTR_STATUS(subject PrivateDnsZones_PTR_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20200601s.PrivateDnsZones_PTR_STATUS
	err := copied.AssignProperties_To_PrivateDnsZones_PTR_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PrivateDnsZones_PTR_STATUS
	err = actual.AssignProperties_From_PrivateDnsZones_PTR_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZones_PTR_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZones_PTR_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZones_PTR_STATUS, PrivateDnsZones_PTR_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZones_PTR_STATUS runs a test to see if a specific instance of PrivateDnsZones_PTR_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZones_PTR_STATUS(subject PrivateDnsZones_PTR_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZones_PTR_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZones_PTR_STATUS instances for property testing - lazily instantiated by
// PrivateDnsZones_PTR_STATUSGenerator()
var privateDnsZones_PTR_STATUSGenerator gopter.Gen

// PrivateDnsZones_PTR_STATUSGenerator returns a generator of PrivateDnsZones_PTR_STATUS instances for property testing.
// We first initialize privateDnsZones_PTR_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateDnsZones_PTR_STATUSGenerator() gopter.Gen {
	if privateDnsZones_PTR_STATUSGenerator != nil {
		return privateDnsZones_PTR_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_STATUS(generators)
	privateDnsZones_PTR_STATUSGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZones_PTR_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_STATUS(generators)
	AddRelatedPropertyGeneratorsForPrivateDnsZones_PTR_STATUS(generators)
	privateDnsZones_PTR_STATUSGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZones_PTR_STATUS{}), generators)

	return privateDnsZones_PTR_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZones_PTR_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsAutoRegistered"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Ttl"] = gen.PtrOf(gen.Int())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateDnsZones_PTR_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZones_PTR_STATUS(gens map[string]gopter.Gen) {
	gens["ARecords"] = gen.SliceOf(ARecord_STATUSGenerator())
	gens["AaaaRecords"] = gen.SliceOf(AaaaRecord_STATUSGenerator())
	gens["CnameRecord"] = gen.PtrOf(CnameRecord_STATUSGenerator())
	gens["MxRecords"] = gen.SliceOf(MxRecord_STATUSGenerator())
	gens["PtrRecords"] = gen.SliceOf(PtrRecord_STATUSGenerator())
	gens["SoaRecord"] = gen.PtrOf(SoaRecord_STATUSGenerator())
	gens["SrvRecords"] = gen.SliceOf(SrvRecord_STATUSGenerator())
	gens["TxtRecords"] = gen.SliceOf(TxtRecord_STATUSGenerator())
}
