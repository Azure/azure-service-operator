// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_STATUSARM, VirtualNetworkGateway_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_STATUSARM runs a test to see if a specific instance of VirtualNetworkGateway_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_STATUSARM(subject VirtualNetworkGateway_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_STATUSARMGenerator()
var virtualNetworkGateway_STATUSARMGenerator gopter.Gen

// VirtualNetworkGateway_STATUSARMGenerator returns a generator of VirtualNetworkGateway_STATUSARM instances for property testing.
// We first initialize virtualNetworkGateway_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkGateway_STATUSARMGenerator != nil {
		return virtualNetworkGateway_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUSARM(generators)
	virtualNetworkGateway_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_STATUSARM(generators)
	virtualNetworkGateway_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_STATUSARM{}), generators)

	return virtualNetworkGateway_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormat_STATUSARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_STATUSARM, VirtualNetworkGatewayPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_STATUSARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_STATUSARM(subject VirtualNetworkGatewayPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayPropertiesFormat_STATUSARMGenerator()
var virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormat_STATUSARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM(generators)
	virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM(generators)
	virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_STATUSARM{}), generators)

	return virtualNetworkGatewayPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_STATUS_GatewayType_ExpressRoute, VirtualNetworkGatewayPropertiesFormat_STATUS_GatewayType_LocalGateway, VirtualNetworkGatewayPropertiesFormat_STATUS_GatewayType_Vpn))
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_STATUS_VpnGatewayGeneration_Generation1, VirtualNetworkGatewayPropertiesFormat_STATUS_VpnGatewayGeneration_Generation2, VirtualNetworkGatewayPropertiesFormat_STATUS_VpnGatewayGeneration_None))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_STATUS_VpnType_PolicyBased, VirtualNetworkGatewayPropertiesFormat_STATUS_VpnType_RouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_STATUSARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_STATUSARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_STATUSARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_STATUSARMGenerator())
}

func Test_AddressSpace_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_STATUSARM, AddressSpace_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_STATUSARM runs a test to see if a specific instance of AddressSpace_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_STATUSARM(subject AddressSpace_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_STATUSARM instances for property testing - lazily instantiated by
// AddressSpace_STATUSARMGenerator()
var addressSpace_STATUSARMGenerator gopter.Gen

// AddressSpace_STATUSARMGenerator returns a generator of AddressSpace_STATUSARM instances for property testing.
func AddressSpace_STATUSARMGenerator() gopter.Gen {
	if addressSpace_STATUSARMGenerator != nil {
		return addressSpace_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_STATUSARM(generators)
	addressSpace_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_STATUSARM{}), generators)

	return addressSpace_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_STATUSARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_STATUSARM, BgpSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_STATUSARM runs a test to see if a specific instance of BgpSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_STATUSARM(subject BgpSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_STATUSARM instances for property testing - lazily instantiated by
// BgpSettings_STATUSARMGenerator()
var bgpSettings_STATUSARMGenerator gopter.Gen

// BgpSettings_STATUSARMGenerator returns a generator of BgpSettings_STATUSARM instances for property testing.
// We first initialize bgpSettings_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_STATUSARMGenerator() gopter.Gen {
	if bgpSettings_STATUSARMGenerator != nil {
		return bgpSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_STATUSARM(generators)
	bgpSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_STATUSARM(generators)
	bgpSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_STATUSARM{}), generators)

	return bgpSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_STATUSARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_STATUSARM, VirtualNetworkGatewayIPConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_STATUSARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_STATUSARM(subject VirtualNetworkGatewayIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayIPConfiguration_STATUSARMGenerator()
var virtualNetworkGatewayIPConfiguration_STATUSARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_STATUSARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_STATUSARMGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM(generators)
	virtualNetworkGatewayIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM(generators)
	virtualNetworkGatewayIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_STATUSARM{}), generators)

	return virtualNetworkGatewayIPConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator())
}

func Test_VirtualNetworkGatewaySku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_STATUSARM, VirtualNetworkGatewaySku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_STATUSARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_STATUSARM(subject VirtualNetworkGatewaySku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySku_STATUSARMGenerator()
var virtualNetworkGatewaySku_STATUSARMGenerator gopter.Gen

// VirtualNetworkGatewaySku_STATUSARMGenerator returns a generator of VirtualNetworkGatewaySku_STATUSARM instances for property testing.
func VirtualNetworkGatewaySku_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_STATUSARMGenerator != nil {
		return virtualNetworkGatewaySku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_STATUSARM(generators)
	virtualNetworkGatewaySku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_STATUSARM{}), generators)

	return virtualNetworkGatewaySku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_STATUS_Name_Basic,
		VirtualNetworkGatewaySku_STATUS_Name_ErGw1AZ,
		VirtualNetworkGatewaySku_STATUS_Name_ErGw2AZ,
		VirtualNetworkGatewaySku_STATUS_Name_ErGw3AZ,
		VirtualNetworkGatewaySku_STATUS_Name_HighPerformance,
		VirtualNetworkGatewaySku_STATUS_Name_Standard,
		VirtualNetworkGatewaySku_STATUS_Name_UltraPerformance,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw1,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw1AZ,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw2,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw2AZ,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw3,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw3AZ,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw4,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw4AZ,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw5,
		VirtualNetworkGatewaySku_STATUS_Name_VpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_STATUS_Tier_Basic,
		VirtualNetworkGatewaySku_STATUS_Tier_ErGw1AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_ErGw2AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_ErGw3AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_HighPerformance,
		VirtualNetworkGatewaySku_STATUS_Tier_Standard,
		VirtualNetworkGatewaySku_STATUS_Tier_UltraPerformance,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw1,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw1AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw2,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw2AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw3,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw3AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw4,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw4AZ,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw5,
		VirtualNetworkGatewaySku_STATUS_Tier_VpnGw5AZ))
}

func Test_VpnClientConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_STATUSARM, VpnClientConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_STATUSARM runs a test to see if a specific instance of VpnClientConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_STATUSARM(subject VpnClientConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_STATUSARM instances for property testing - lazily instantiated by
// VpnClientConfiguration_STATUSARMGenerator()
var vpnClientConfiguration_STATUSARMGenerator gopter.Gen

// VpnClientConfiguration_STATUSARMGenerator returns a generator of VpnClientConfiguration_STATUSARM instances for property testing.
// We first initialize vpnClientConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_STATUSARMGenerator() gopter.Gen {
	if vpnClientConfiguration_STATUSARMGenerator != nil {
		return vpnClientConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUSARM(generators)
	vpnClientConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_STATUSARM(generators)
	vpnClientConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_STATUSARM{}), generators)

	return vpnClientConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_STATUS_VpnAuthenticationTypes_AAD, VpnClientConfiguration_STATUS_VpnAuthenticationTypes_Certificate, VpnClientConfiguration_STATUS_VpnAuthenticationTypes_Radius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_STATUS_VpnClientProtocols_IkeV2, VpnClientConfiguration_STATUS_VpnClientProtocols_OpenVPN, VpnClientConfiguration_STATUS_VpnClientProtocols_SSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_STATUSARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_STATUSARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_STATUSARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_STATUSARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_STATUSARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_STATUSARM, IPConfigurationBgpPeeringAddress_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_STATUSARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_STATUSARM(subject IPConfigurationBgpPeeringAddress_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_STATUSARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddress_STATUSARMGenerator()
var ipConfigurationBgpPeeringAddress_STATUSARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_STATUSARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_STATUSARM instances for property testing.
func IPConfigurationBgpPeeringAddress_STATUSARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_STATUSARMGenerator != nil {
		return ipConfigurationBgpPeeringAddress_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_STATUSARM(generators)
	ipConfigurationBgpPeeringAddress_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_STATUSARM{}), generators)

	return ipConfigurationBgpPeeringAddress_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_STATUSARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_STATUSARM, IpsecPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_STATUSARM runs a test to see if a specific instance of IpsecPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_STATUSARM(subject IpsecPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_STATUSARM instances for property testing - lazily instantiated by
// IpsecPolicy_STATUSARMGenerator()
var ipsecPolicy_STATUSARMGenerator gopter.Gen

// IpsecPolicy_STATUSARMGenerator returns a generator of IpsecPolicy_STATUSARM instances for property testing.
func IpsecPolicy_STATUSARMGenerator() gopter.Gen {
	if ipsecPolicy_STATUSARMGenerator != nil {
		return ipsecPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_STATUSARM(generators)
	ipsecPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_STATUSARM{}), generators)

	return ipsecPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		DhGroup_STATUS_DHGroup1,
		DhGroup_STATUS_DHGroup14,
		DhGroup_STATUS_DHGroup2,
		DhGroup_STATUS_DHGroup2048,
		DhGroup_STATUS_DHGroup24,
		DhGroup_STATUS_ECP256,
		DhGroup_STATUS_ECP384,
		DhGroup_STATUS_None))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IkeEncryption_STATUS_AES128,
		IkeEncryption_STATUS_AES192,
		IkeEncryption_STATUS_AES256,
		IkeEncryption_STATUS_DES,
		IkeEncryption_STATUS_DES3,
		IkeEncryption_STATUS_GCMAES128,
		IkeEncryption_STATUS_GCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IkeIntegrity_STATUS_GCMAES128,
		IkeIntegrity_STATUS_GCMAES256,
		IkeIntegrity_STATUS_MD5,
		IkeIntegrity_STATUS_SHA1,
		IkeIntegrity_STATUS_SHA256,
		IkeIntegrity_STATUS_SHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecEncryption_STATUS_AES128,
		IpsecEncryption_STATUS_AES192,
		IpsecEncryption_STATUS_AES256,
		IpsecEncryption_STATUS_DES,
		IpsecEncryption_STATUS_DES3,
		IpsecEncryption_STATUS_GCMAES128,
		IpsecEncryption_STATUS_GCMAES192,
		IpsecEncryption_STATUS_GCMAES256,
		IpsecEncryption_STATUS_None))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecIntegrity_STATUS_GCMAES128,
		IpsecIntegrity_STATUS_GCMAES192,
		IpsecIntegrity_STATUS_GCMAES256,
		IpsecIntegrity_STATUS_MD5,
		IpsecIntegrity_STATUS_SHA1,
		IpsecIntegrity_STATUS_SHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		PfsGroup_STATUS_ECP256,
		PfsGroup_STATUS_ECP384,
		PfsGroup_STATUS_None,
		PfsGroup_STATUS_PFS1,
		PfsGroup_STATUS_PFS14,
		PfsGroup_STATUS_PFS2,
		PfsGroup_STATUS_PFS2048,
		PfsGroup_STATUS_PFS24,
		PfsGroup_STATUS_PFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServer_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_STATUSARM, RadiusServer_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_STATUSARM runs a test to see if a specific instance of RadiusServer_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_STATUSARM(subject RadiusServer_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_STATUSARM instances for property testing - lazily instantiated by
// RadiusServer_STATUSARMGenerator()
var radiusServer_STATUSARMGenerator gopter.Gen

// RadiusServer_STATUSARMGenerator returns a generator of RadiusServer_STATUSARM instances for property testing.
func RadiusServer_STATUSARMGenerator() gopter.Gen {
	if radiusServer_STATUSARMGenerator != nil {
		return radiusServer_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_STATUSARM(generators)
	radiusServer_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_STATUSARM{}), generators)

	return radiusServer_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_STATUSARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM, VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_VpnClientRevokedCertificate_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_STATUSARM, VpnClientRevokedCertificate_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_STATUSARM runs a test to see if a specific instance of VpnClientRevokedCertificate_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_STATUSARM(subject VpnClientRevokedCertificate_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_STATUSARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificate_STATUSARMGenerator()
var vpnClientRevokedCertificate_STATUSARMGenerator gopter.Gen

// VpnClientRevokedCertificate_STATUSARMGenerator returns a generator of VpnClientRevokedCertificate_STATUSARM instances for property testing.
// We first initialize vpnClientRevokedCertificate_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificate_STATUSARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_STATUSARMGenerator != nil {
		return vpnClientRevokedCertificate_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM(generators)
	vpnClientRevokedCertificate_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM(generators)
	vpnClientRevokedCertificate_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_STATUSARM{}), generators)

	return vpnClientRevokedCertificate_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator())
}

func Test_VpnClientRootCertificate_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_STATUSARM, VpnClientRootCertificate_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_STATUSARM runs a test to see if a specific instance of VpnClientRootCertificate_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_STATUSARM(subject VpnClientRootCertificate_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_STATUSARM instances for property testing - lazily instantiated by
// VpnClientRootCertificate_STATUSARMGenerator()
var vpnClientRootCertificate_STATUSARMGenerator gopter.Gen

// VpnClientRootCertificate_STATUSARMGenerator returns a generator of VpnClientRootCertificate_STATUSARM instances for property testing.
// We first initialize vpnClientRootCertificate_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificate_STATUSARMGenerator() gopter.Gen {
	if vpnClientRootCertificate_STATUSARMGenerator != nil {
		return vpnClientRootCertificate_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUSARM(generators)
	vpnClientRootCertificate_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificate_STATUSARM(generators)
	vpnClientRootCertificate_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_STATUSARM{}), generators)

	return vpnClientRootCertificate_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificate_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificate_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormat_STATUSARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_STATUSARM, VpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_STATUSARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_STATUSARM(subject VpnClientRevokedCertificatePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by VpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator()
var vpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_STATUSARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_STATUSARM(generators)
	vpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_STATUSARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_STATUSARM, VpnClientRootCertificatePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_STATUSARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_STATUSARM(subject VpnClientRootCertificatePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_STATUSARM instances for property testing - lazily instantiated
// by VpnClientRootCertificatePropertiesFormat_STATUSARMGenerator()
var vpnClientRootCertificatePropertiesFormat_STATUSARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormat_STATUSARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_STATUSARM instances for property testing.
func VpnClientRootCertificatePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormat_STATUSARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_STATUSARM(generators)
	vpnClientRootCertificatePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_STATUSARM{}), generators)

	return vpnClientRootCertificatePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
