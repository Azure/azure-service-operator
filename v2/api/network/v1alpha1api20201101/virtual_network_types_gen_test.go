// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetwork_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetwork to hub returns original",
		prop.ForAll(RunResourceConversionTestForVirtualNetwork, VirtualNetworkGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForVirtualNetwork tests if a specific instance of VirtualNetwork round trips to the hub storage version and back losslessly
func RunResourceConversionTestForVirtualNetwork(subject VirtualNetwork) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20201101storage.VirtualNetwork
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual VirtualNetwork
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetwork_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetwork to VirtualNetwork via AssignPropertiesToVirtualNetwork & AssignPropertiesFromVirtualNetwork returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetwork, VirtualNetworkGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetwork tests if a specific instance of VirtualNetwork can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetwork(subject VirtualNetwork) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetwork
	err := copied.AssignPropertiesToVirtualNetwork(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetwork
	err = actual.AssignPropertiesFromVirtualNetwork(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetwork_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork, VirtualNetworkGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork runs a test to see if a specific instance of VirtualNetwork round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork(subject VirtualNetwork) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork instances for property testing - lazily instantiated by VirtualNetworkGenerator()
var virtualNetworkGenerator gopter.Gen

// VirtualNetworkGenerator returns a generator of VirtualNetwork instances for property testing.
func VirtualNetworkGenerator() gopter.Gen {
	if virtualNetworkGenerator != nil {
		return virtualNetworkGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualNetwork(generators)
	virtualNetworkGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork{}), generators)

	return virtualNetworkGenerator
}

// AddRelatedPropertyGeneratorsForVirtualNetwork is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork(gens map[string]gopter.Gen) {
	gens["Spec"] = VirtualNetwork_SpecGenerator()
	gens["Status"] = VirtualNetwork_StatusGenerator()
}

func Test_VirtualNetwork_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetwork_Spec to VirtualNetwork_Spec via AssignPropertiesToVirtualNetwork_Spec & AssignPropertiesFromVirtualNetwork_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetwork_Spec, VirtualNetwork_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetwork_Spec tests if a specific instance of VirtualNetwork_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetwork_Spec(subject VirtualNetwork_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetwork_Spec
	err := copied.AssignPropertiesToVirtualNetwork_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetwork_Spec
	err = actual.AssignPropertiesFromVirtualNetwork_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetwork_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork_Spec, VirtualNetwork_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork_Spec runs a test to see if a specific instance of VirtualNetwork_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork_Spec(subject VirtualNetwork_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork_Spec instances for property testing - lazily instantiated by
//VirtualNetwork_SpecGenerator()
var virtualNetwork_specGenerator gopter.Gen

// VirtualNetwork_SpecGenerator returns a generator of VirtualNetwork_Spec instances for property testing.
// We first initialize virtualNetwork_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetwork_SpecGenerator() gopter.Gen {
	if virtualNetwork_specGenerator != nil {
		return virtualNetwork_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_Spec(generators)
	virtualNetwork_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_Spec(generators)
	AddRelatedPropertyGeneratorsForVirtualNetwork_Spec(generators)
	virtualNetwork_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Spec{}), generators)

	return virtualNetwork_specGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetwork_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetwork_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetwork_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork_Spec(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpaceGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunitiesGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResourceGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptionsGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceGenerator())
}

func Test_VirtualNetwork_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetwork_Status to VirtualNetwork_Status via AssignPropertiesToVirtualNetwork_Status & AssignPropertiesFromVirtualNetwork_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetwork_Status, VirtualNetwork_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetwork_Status tests if a specific instance of VirtualNetwork_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetwork_Status(subject VirtualNetwork_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetwork_Status
	err := copied.AssignPropertiesToVirtualNetwork_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetwork_Status
	err = actual.AssignPropertiesFromVirtualNetwork_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetwork_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork_Status, VirtualNetwork_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork_Status runs a test to see if a specific instance of VirtualNetwork_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork_Status(subject VirtualNetwork_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork_Status instances for property testing - lazily instantiated by
//VirtualNetwork_StatusGenerator()
var virtualNetwork_statusGenerator gopter.Gen

// VirtualNetwork_StatusGenerator returns a generator of VirtualNetwork_Status instances for property testing.
// We first initialize virtualNetwork_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetwork_StatusGenerator() gopter.Gen {
	if virtualNetwork_statusGenerator != nil {
		return virtualNetwork_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_Status(generators)
	virtualNetwork_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_Status(generators)
	AddRelatedPropertyGeneratorsForVirtualNetwork_Status(generators)
	virtualNetwork_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_Status{}), generators)

	return virtualNetwork_statusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetwork_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetwork_Status(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetwork_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork_Status(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpace_StatusGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunities_StatusGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResource_StatusGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptions_StatusGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_StatusGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_Status_VirtualNetwork_SubResourceEmbeddedGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeering_Status_SubResourceEmbeddedGenerator())
}

func Test_AddressSpace_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AddressSpace to AddressSpace via AssignPropertiesToAddressSpace & AssignPropertiesFromAddressSpace returns original",
		prop.ForAll(RunPropertyAssignmentTestForAddressSpace, AddressSpaceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAddressSpace tests if a specific instance of AddressSpace can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForAddressSpace(subject AddressSpace) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.AddressSpace
	err := copied.AssignPropertiesToAddressSpace(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AddressSpace
	err = actual.AssignPropertiesFromAddressSpace(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AddressSpace_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace, AddressSpaceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace runs a test to see if a specific instance of AddressSpace round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace(subject AddressSpace) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace instances for property testing - lazily instantiated by AddressSpaceGenerator()
var addressSpaceGenerator gopter.Gen

// AddressSpaceGenerator returns a generator of AddressSpace instances for property testing.
func AddressSpaceGenerator() gopter.Gen {
	if addressSpaceGenerator != nil {
		return addressSpaceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace(generators)
	addressSpaceGenerator = gen.Struct(reflect.TypeOf(AddressSpace{}), generators)

	return addressSpaceGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_AddressSpace_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AddressSpace_Status to AddressSpace_Status via AssignPropertiesToAddressSpace_Status & AssignPropertiesFromAddressSpace_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForAddressSpace_Status, AddressSpace_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAddressSpace_Status tests if a specific instance of AddressSpace_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForAddressSpace_Status(subject AddressSpace_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.AddressSpace_Status
	err := copied.AssignPropertiesToAddressSpace_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AddressSpace_Status
	err = actual.AssignPropertiesFromAddressSpace_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AddressSpace_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_Status, AddressSpace_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_Status runs a test to see if a specific instance of AddressSpace_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_Status(subject AddressSpace_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_Status instances for property testing - lazily instantiated by
//AddressSpace_StatusGenerator()
var addressSpace_statusGenerator gopter.Gen

// AddressSpace_StatusGenerator returns a generator of AddressSpace_Status instances for property testing.
func AddressSpace_StatusGenerator() gopter.Gen {
	if addressSpace_statusGenerator != nil {
		return addressSpace_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_Status(generators)
	addressSpace_statusGenerator = gen.Struct(reflect.TypeOf(AddressSpace_Status{}), generators)

	return addressSpace_statusGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_Status(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_DhcpOptions_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DhcpOptions to DhcpOptions via AssignPropertiesToDhcpOptions & AssignPropertiesFromDhcpOptions returns original",
		prop.ForAll(RunPropertyAssignmentTestForDhcpOptions, DhcpOptionsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDhcpOptions tests if a specific instance of DhcpOptions can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForDhcpOptions(subject DhcpOptions) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.DhcpOptions
	err := copied.AssignPropertiesToDhcpOptions(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DhcpOptions
	err = actual.AssignPropertiesFromDhcpOptions(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DhcpOptions_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptions, DhcpOptionsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptions runs a test to see if a specific instance of DhcpOptions round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptions(subject DhcpOptions) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions instances for property testing - lazily instantiated by DhcpOptionsGenerator()
var dhcpOptionsGenerator gopter.Gen

// DhcpOptionsGenerator returns a generator of DhcpOptions instances for property testing.
func DhcpOptionsGenerator() gopter.Gen {
	if dhcpOptionsGenerator != nil {
		return dhcpOptionsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptions(generators)
	dhcpOptionsGenerator = gen.Struct(reflect.TypeOf(DhcpOptions{}), generators)

	return dhcpOptionsGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptions is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptions(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_DhcpOptions_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DhcpOptions_Status to DhcpOptions_Status via AssignPropertiesToDhcpOptions_Status & AssignPropertiesFromDhcpOptions_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForDhcpOptions_Status, DhcpOptions_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDhcpOptions_Status tests if a specific instance of DhcpOptions_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForDhcpOptions_Status(subject DhcpOptions_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.DhcpOptions_Status
	err := copied.AssignPropertiesToDhcpOptions_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DhcpOptions_Status
	err = actual.AssignPropertiesFromDhcpOptions_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DhcpOptions_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptions_Status, DhcpOptions_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptions_Status runs a test to see if a specific instance of DhcpOptions_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptions_Status(subject DhcpOptions_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_Status instances for property testing - lazily instantiated by DhcpOptions_StatusGenerator()
var dhcpOptions_statusGenerator gopter.Gen

// DhcpOptions_StatusGenerator returns a generator of DhcpOptions_Status instances for property testing.
func DhcpOptions_StatusGenerator() gopter.Gen {
	if dhcpOptions_statusGenerator != nil {
		return dhcpOptions_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptions_Status(generators)
	dhcpOptions_statusGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_Status{}), generators)

	return dhcpOptions_statusGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptions_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptions_Status(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_Status_VirtualNetwork_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Subnet_Status_VirtualNetwork_SubResourceEmbedded to Subnet_Status_VirtualNetwork_SubResourceEmbedded via AssignPropertiesToSubnet_Status_VirtualNetwork_SubResourceEmbedded & AssignPropertiesFromSubnet_Status_VirtualNetwork_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForSubnet_Status_VirtualNetwork_SubResourceEmbedded, Subnet_Status_VirtualNetwork_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSubnet_Status_VirtualNetwork_SubResourceEmbedded tests if a specific instance of Subnet_Status_VirtualNetwork_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForSubnet_Status_VirtualNetwork_SubResourceEmbedded(subject Subnet_Status_VirtualNetwork_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded
	err := copied.AssignPropertiesToSubnet_Status_VirtualNetwork_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Subnet_Status_VirtualNetwork_SubResourceEmbedded
	err = actual.AssignPropertiesFromSubnet_Status_VirtualNetwork_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Subnet_Status_VirtualNetwork_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetwork_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_VirtualNetwork_SubResourceEmbedded, Subnet_Status_VirtualNetwork_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_VirtualNetwork_SubResourceEmbedded runs a test to see if a specific instance of Subnet_Status_VirtualNetwork_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_VirtualNetwork_SubResourceEmbedded(subject Subnet_Status_VirtualNetwork_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetwork_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetwork_SubResourceEmbedded instances for property testing - lazily instantiated by
//Subnet_Status_VirtualNetwork_SubResourceEmbeddedGenerator()
var subnet_status_virtualNetwork_subResourceEmbeddedGenerator gopter.Gen

// Subnet_Status_VirtualNetwork_SubResourceEmbeddedGenerator returns a generator of Subnet_Status_VirtualNetwork_SubResourceEmbedded instances for property testing.
func Subnet_Status_VirtualNetwork_SubResourceEmbeddedGenerator() gopter.Gen {
	if subnet_status_virtualNetwork_subResourceEmbeddedGenerator != nil {
		return subnet_status_virtualNetwork_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetwork_SubResourceEmbedded(generators)
	subnet_status_virtualNetwork_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetwork_SubResourceEmbedded{}), generators)

	return subnet_status_virtualNetwork_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetwork_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetwork_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkBgpCommunities_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkBgpCommunities to VirtualNetworkBgpCommunities via AssignPropertiesToVirtualNetworkBgpCommunities & AssignPropertiesFromVirtualNetworkBgpCommunities returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkBgpCommunities, VirtualNetworkBgpCommunitiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkBgpCommunities tests if a specific instance of VirtualNetworkBgpCommunities can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkBgpCommunities(subject VirtualNetworkBgpCommunities) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkBgpCommunities
	err := copied.AssignPropertiesToVirtualNetworkBgpCommunities(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkBgpCommunities
	err = actual.AssignPropertiesFromVirtualNetworkBgpCommunities(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkBgpCommunities_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkBgpCommunities via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkBgpCommunities, VirtualNetworkBgpCommunitiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkBgpCommunities runs a test to see if a specific instance of VirtualNetworkBgpCommunities round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkBgpCommunities(subject VirtualNetworkBgpCommunities) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkBgpCommunities
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkBgpCommunities instances for property testing - lazily instantiated by
//VirtualNetworkBgpCommunitiesGenerator()
var virtualNetworkBgpCommunitiesGenerator gopter.Gen

// VirtualNetworkBgpCommunitiesGenerator returns a generator of VirtualNetworkBgpCommunities instances for property testing.
func VirtualNetworkBgpCommunitiesGenerator() gopter.Gen {
	if virtualNetworkBgpCommunitiesGenerator != nil {
		return virtualNetworkBgpCommunitiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities(generators)
	virtualNetworkBgpCommunitiesGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkBgpCommunities{}), generators)

	return virtualNetworkBgpCommunitiesGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities(gens map[string]gopter.Gen) {
	gens["VirtualNetworkCommunity"] = gen.AlphaString()
}

func Test_VirtualNetworkBgpCommunities_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkBgpCommunities_Status to VirtualNetworkBgpCommunities_Status via AssignPropertiesToVirtualNetworkBgpCommunities_Status & AssignPropertiesFromVirtualNetworkBgpCommunities_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkBgpCommunities_Status, VirtualNetworkBgpCommunities_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkBgpCommunities_Status tests if a specific instance of VirtualNetworkBgpCommunities_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkBgpCommunities_Status(subject VirtualNetworkBgpCommunities_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status
	err := copied.AssignPropertiesToVirtualNetworkBgpCommunities_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkBgpCommunities_Status
	err = actual.AssignPropertiesFromVirtualNetworkBgpCommunities_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkBgpCommunities_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkBgpCommunities_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkBgpCommunities_Status, VirtualNetworkBgpCommunities_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkBgpCommunities_Status runs a test to see if a specific instance of VirtualNetworkBgpCommunities_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkBgpCommunities_Status(subject VirtualNetworkBgpCommunities_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkBgpCommunities_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkBgpCommunities_Status instances for property testing - lazily instantiated by
//VirtualNetworkBgpCommunities_StatusGenerator()
var virtualNetworkBgpCommunities_statusGenerator gopter.Gen

// VirtualNetworkBgpCommunities_StatusGenerator returns a generator of VirtualNetworkBgpCommunities_Status instances for property testing.
func VirtualNetworkBgpCommunities_StatusGenerator() gopter.Gen {
	if virtualNetworkBgpCommunities_statusGenerator != nil {
		return virtualNetworkBgpCommunities_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities_Status(generators)
	virtualNetworkBgpCommunities_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkBgpCommunities_Status{}), generators)

	return virtualNetworkBgpCommunities_statusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunities_Status(gens map[string]gopter.Gen) {
	gens["RegionalCommunity"] = gen.PtrOf(gen.AlphaString())
	gens["VirtualNetworkCommunity"] = gen.AlphaString()
}

func Test_VirtualNetworkPeering_Status_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkPeering_Status_SubResourceEmbedded to VirtualNetworkPeering_Status_SubResourceEmbedded via AssignPropertiesToVirtualNetworkPeering_Status_SubResourceEmbedded & AssignPropertiesFromVirtualNetworkPeering_Status_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkPeering_Status_SubResourceEmbedded, VirtualNetworkPeering_Status_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkPeering_Status_SubResourceEmbedded tests if a specific instance of VirtualNetworkPeering_Status_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkPeering_Status_SubResourceEmbedded(subject VirtualNetworkPeering_Status_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded
	err := copied.AssignPropertiesToVirtualNetworkPeering_Status_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkPeering_Status_SubResourceEmbedded
	err = actual.AssignPropertiesFromVirtualNetworkPeering_Status_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkPeering_Status_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_Status_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeering_Status_SubResourceEmbedded, VirtualNetworkPeering_Status_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeering_Status_SubResourceEmbedded runs a test to see if a specific instance of VirtualNetworkPeering_Status_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeering_Status_SubResourceEmbedded(subject VirtualNetworkPeering_Status_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_Status_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_Status_SubResourceEmbedded instances for property testing - lazily instantiated by
//VirtualNetworkPeering_Status_SubResourceEmbeddedGenerator()
var virtualNetworkPeering_status_subResourceEmbeddedGenerator gopter.Gen

// VirtualNetworkPeering_Status_SubResourceEmbeddedGenerator returns a generator of VirtualNetworkPeering_Status_SubResourceEmbedded instances for property testing.
func VirtualNetworkPeering_Status_SubResourceEmbeddedGenerator() gopter.Gen {
	if virtualNetworkPeering_status_subResourceEmbeddedGenerator != nil {
		return virtualNetworkPeering_status_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeering_Status_SubResourceEmbedded(generators)
	virtualNetworkPeering_status_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_Status_SubResourceEmbedded{}), generators)

	return virtualNetworkPeering_status_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeering_Status_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeering_Status_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
