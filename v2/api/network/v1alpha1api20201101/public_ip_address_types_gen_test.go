// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PublicIPAddress_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddress to hub returns original",
		prop.ForAll(RunResourceConversionTestForPublicIPAddress, PublicIPAddressGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForPublicIPAddress tests if a specific instance of PublicIPAddress round trips to the hub storage version and back losslessly
func RunResourceConversionTestForPublicIPAddress(subject PublicIPAddress) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20201101storage.PublicIPAddress
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual PublicIPAddress
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddress_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddress to PublicIPAddress via AssignPropertiesToPublicIPAddress & AssignPropertiesFromPublicIPAddress returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddress, PublicIPAddressGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddress tests if a specific instance of PublicIPAddress can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddress(subject PublicIPAddress) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddress
	err := copied.AssignPropertiesToPublicIPAddress(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddress
	err = actual.AssignPropertiesFromPublicIPAddress(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddress_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress, PublicIPAddressGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress runs a test to see if a specific instance of PublicIPAddress round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress(subject PublicIPAddress) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress instances for property testing - lazily instantiated by PublicIPAddressGenerator()
var publicIPAddressGenerator gopter.Gen

// PublicIPAddressGenerator returns a generator of PublicIPAddress instances for property testing.
func PublicIPAddressGenerator() gopter.Gen {
	if publicIPAddressGenerator != nil {
		return publicIPAddressGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPublicIPAddress(generators)
	publicIPAddressGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress{}), generators)

	return publicIPAddressGenerator
}

// AddRelatedPropertyGeneratorsForPublicIPAddress is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress(gens map[string]gopter.Gen) {
	gens["Spec"] = PublicIPAddresses_SPECGenerator()
	gens["Status"] = PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedGenerator()
}

func Test_PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded to PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded via AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded & AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded, PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded tests if a specific instance of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(subject PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err := copied.AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err = actual.AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded, PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded runs a test to see if a specific instance of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(subject PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded instances for property testing - lazily
//instantiated by PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedGenerator()
var publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator gopter.Gen

// PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedGenerator returns a generator of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded instances for property testing.
// We first initialize publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedGenerator() gopter.Gen {
	if publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator != nil {
		return publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(generators)
	publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(generators)
	publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	return publicIPAddress_status_publicIPAddress_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		PublicIPAddressPropertiesFormat_MigrationPhase_StatusAbort,
		PublicIPAddressPropertiesFormat_MigrationPhase_StatusCommit,
		PublicIPAddressPropertiesFormat_MigrationPhase_StatusCommitted,
		PublicIPAddressPropertiesFormat_MigrationPhase_StatusNone,
		PublicIPAddressPropertiesFormat_MigrationPhase_StatusPrepare))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_StatusIPv4, IPVersion_StatusIPv6))
	gens["PublicIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["DdosSettings"] = gen.PtrOf(DdosSettings_StatusGenerator())
	gens["DnsSettings"] = gen.PtrOf(PublicIPAddressDnsSettings_StatusGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusGenerator())
	gens["IpConfiguration"] = gen.PtrOf(IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedGenerator())
	gens["IpTags"] = gen.SliceOf(IpTag_StatusGenerator())
	gens["NatGateway"] = gen.PtrOf(NatGateway_Status_PublicIPAddress_SubResourceEmbeddedGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_StatusGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_StatusGenerator())
}

func Test_PublicIPAddresses_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddresses_SPEC to PublicIPAddresses_SPEC via AssignPropertiesToPublicIPAddresses_SPEC & AssignPropertiesFromPublicIPAddresses_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddresses_SPEC, PublicIPAddresses_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddresses_SPEC tests if a specific instance of PublicIPAddresses_SPEC can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddresses_SPEC(subject PublicIPAddresses_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddresses_SPEC
	err := copied.AssignPropertiesToPublicIPAddresses_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddresses_SPEC
	err = actual.AssignPropertiesFromPublicIPAddresses_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddresses_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddresses_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddresses_SPEC, PublicIPAddresses_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddresses_SPEC runs a test to see if a specific instance of PublicIPAddresses_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddresses_SPEC(subject PublicIPAddresses_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddresses_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddresses_SPEC instances for property testing - lazily instantiated by
//PublicIPAddresses_SPECGenerator()
var publicIPAddresses_specGenerator gopter.Gen

// PublicIPAddresses_SPECGenerator returns a generator of PublicIPAddresses_SPEC instances for property testing.
// We first initialize publicIPAddresses_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddresses_SPECGenerator() gopter.Gen {
	if publicIPAddresses_specGenerator != nil {
		return publicIPAddresses_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddresses_SPEC(generators)
	publicIPAddresses_specGenerator = gen.Struct(reflect.TypeOf(PublicIPAddresses_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddresses_SPEC(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddresses_SPEC(generators)
	publicIPAddresses_specGenerator = gen.Struct(reflect.TypeOf(PublicIPAddresses_SPEC{}), generators)

	return publicIPAddresses_specGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddresses_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddresses_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		PublicIPAddressPropertiesFormat_MigrationPhase_SpecAbort,
		PublicIPAddressPropertiesFormat_MigrationPhase_SpecCommit,
		PublicIPAddressPropertiesFormat_MigrationPhase_SpecCommitted,
		PublicIPAddressPropertiesFormat_MigrationPhase_SpecNone,
		PublicIPAddressPropertiesFormat_MigrationPhase_SpecPrepare))
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PublicIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddresses_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddresses_SPEC(gens map[string]gopter.Gen) {
	gens["DdosSettings"] = gen.PtrOf(DdosSettings_SpecGenerator())
	gens["DnsSettings"] = gen.PtrOf(PublicIPAddressDnsSettings_SpecGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecGenerator())
	gens["IpTags"] = gen.SliceOf(IpTag_SpecGenerator())
	gens["LinkedPublicIPAddress"] = gen.PtrOf(PublicIPAddress_Spec_SubResourceEmbeddedGenerator())
	gens["NatGateway"] = gen.PtrOf(NatGateway_SpecGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_SpecGenerator())
	gens["ServicePublicIPAddress"] = gen.PtrOf(PublicIPAddress_Spec_SubResourceEmbeddedGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_SpecGenerator())
}

func Test_DdosSettings_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DdosSettings_Spec to DdosSettings_Spec via AssignPropertiesToDdosSettings_Spec & AssignPropertiesFromDdosSettings_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForDdosSettings_Spec, DdosSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDdosSettings_Spec tests if a specific instance of DdosSettings_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForDdosSettings_Spec(subject DdosSettings_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.DdosSettings_Spec
	err := copied.AssignPropertiesToDdosSettings_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DdosSettings_Spec
	err = actual.AssignPropertiesFromDdosSettings_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DdosSettings_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DdosSettings_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDdosSettings_Spec, DdosSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDdosSettings_Spec runs a test to see if a specific instance of DdosSettings_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDdosSettings_Spec(subject DdosSettings_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DdosSettings_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DdosSettings_Spec instances for property testing - lazily instantiated by DdosSettings_SpecGenerator()
var ddosSettings_specGenerator gopter.Gen

// DdosSettings_SpecGenerator returns a generator of DdosSettings_Spec instances for property testing.
// We first initialize ddosSettings_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DdosSettings_SpecGenerator() gopter.Gen {
	if ddosSettings_specGenerator != nil {
		return ddosSettings_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_Spec(generators)
	ddosSettings_specGenerator = gen.Struct(reflect.TypeOf(DdosSettings_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_Spec(generators)
	AddRelatedPropertyGeneratorsForDdosSettings_Spec(generators)
	ddosSettings_specGenerator = gen.Struct(reflect.TypeOf(DdosSettings_Spec{}), generators)

	return ddosSettings_specGenerator
}

// AddIndependentPropertyGeneratorsForDdosSettings_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDdosSettings_Spec(gens map[string]gopter.Gen) {
	gens["ProtectedIP"] = gen.PtrOf(gen.Bool())
	gens["ProtectionCoverage"] = gen.PtrOf(gen.OneConstOf(DdosSettings_ProtectionCoverage_SpecBasic, DdosSettings_ProtectionCoverage_SpecStandard))
}

// AddRelatedPropertyGeneratorsForDdosSettings_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDdosSettings_Spec(gens map[string]gopter.Gen) {
	gens["DdosCustomPolicy"] = gen.PtrOf(SubResource_SpecGenerator())
}

func Test_DdosSettings_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DdosSettings_Status to DdosSettings_Status via AssignPropertiesToDdosSettings_Status & AssignPropertiesFromDdosSettings_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForDdosSettings_Status, DdosSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDdosSettings_Status tests if a specific instance of DdosSettings_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForDdosSettings_Status(subject DdosSettings_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.DdosSettings_Status
	err := copied.AssignPropertiesToDdosSettings_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DdosSettings_Status
	err = actual.AssignPropertiesFromDdosSettings_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DdosSettings_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DdosSettings_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDdosSettings_Status, DdosSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDdosSettings_Status runs a test to see if a specific instance of DdosSettings_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForDdosSettings_Status(subject DdosSettings_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DdosSettings_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DdosSettings_Status instances for property testing - lazily instantiated by
//DdosSettings_StatusGenerator()
var ddosSettings_statusGenerator gopter.Gen

// DdosSettings_StatusGenerator returns a generator of DdosSettings_Status instances for property testing.
// We first initialize ddosSettings_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DdosSettings_StatusGenerator() gopter.Gen {
	if ddosSettings_statusGenerator != nil {
		return ddosSettings_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_Status(generators)
	ddosSettings_statusGenerator = gen.Struct(reflect.TypeOf(DdosSettings_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_Status(generators)
	AddRelatedPropertyGeneratorsForDdosSettings_Status(generators)
	ddosSettings_statusGenerator = gen.Struct(reflect.TypeOf(DdosSettings_Status{}), generators)

	return ddosSettings_statusGenerator
}

// AddIndependentPropertyGeneratorsForDdosSettings_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDdosSettings_Status(gens map[string]gopter.Gen) {
	gens["ProtectedIP"] = gen.PtrOf(gen.Bool())
	gens["ProtectionCoverage"] = gen.PtrOf(gen.OneConstOf(DdosSettings_ProtectionCoverage_StatusBasic, DdosSettings_ProtectionCoverage_StatusStandard))
}

// AddRelatedPropertyGeneratorsForDdosSettings_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDdosSettings_Status(gens map[string]gopter.Gen) {
	gens["DdosCustomPolicy"] = gen.PtrOf(SubResource_StatusGenerator())
}

func Test_IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded to IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded via AssignPropertiesToIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded & AssignPropertiesFromIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded, IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded tests if a specific instance of IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(subject IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
	err := copied.AssignPropertiesToIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
	err = actual.AssignPropertiesFromIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded, IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded runs a test to see if a specific instance of IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(subject IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded instances for property testing - lazily
//instantiated by IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedGenerator()
var ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator gopter.Gen

// IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedGenerator returns a generator of IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded instances for property testing.
// We first initialize ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedGenerator() gopter.Gen {
	if ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator != nil {
		return ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(generators)
	ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(generators)
	ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	return ipConfiguration_status_publicIPAddress_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_Status_PublicIPAddress_SubResourceEmbeddedGenerator())
}

func Test_IpTag_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IpTag_Spec to IpTag_Spec via AssignPropertiesToIpTag_Spec & AssignPropertiesFromIpTag_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForIpTag_Spec, IpTag_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIpTag_Spec tests if a specific instance of IpTag_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIpTag_Spec(subject IpTag_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IpTag_Spec
	err := copied.AssignPropertiesToIpTag_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IpTag_Spec
	err = actual.AssignPropertiesFromIpTag_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IpTag_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpTag_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpTag_Spec, IpTag_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpTag_Spec runs a test to see if a specific instance of IpTag_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForIpTag_Spec(subject IpTag_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpTag_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpTag_Spec instances for property testing - lazily instantiated by IpTag_SpecGenerator()
var ipTag_specGenerator gopter.Gen

// IpTag_SpecGenerator returns a generator of IpTag_Spec instances for property testing.
func IpTag_SpecGenerator() gopter.Gen {
	if ipTag_specGenerator != nil {
		return ipTag_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpTag_Spec(generators)
	ipTag_specGenerator = gen.Struct(reflect.TypeOf(IpTag_Spec{}), generators)

	return ipTag_specGenerator
}

// AddIndependentPropertyGeneratorsForIpTag_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpTag_Spec(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpTag_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IpTag_Status to IpTag_Status via AssignPropertiesToIpTag_Status & AssignPropertiesFromIpTag_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForIpTag_Status, IpTag_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIpTag_Status tests if a specific instance of IpTag_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIpTag_Status(subject IpTag_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IpTag_Status
	err := copied.AssignPropertiesToIpTag_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IpTag_Status
	err = actual.AssignPropertiesFromIpTag_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IpTag_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpTag_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpTag_Status, IpTag_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpTag_Status runs a test to see if a specific instance of IpTag_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForIpTag_Status(subject IpTag_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpTag_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpTag_Status instances for property testing - lazily instantiated by IpTag_StatusGenerator()
var ipTag_statusGenerator gopter.Gen

// IpTag_StatusGenerator returns a generator of IpTag_Status instances for property testing.
func IpTag_StatusGenerator() gopter.Gen {
	if ipTag_statusGenerator != nil {
		return ipTag_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpTag_Status(generators)
	ipTag_statusGenerator = gen.Struct(reflect.TypeOf(IpTag_Status{}), generators)

	return ipTag_statusGenerator
}

// AddIndependentPropertyGeneratorsForIpTag_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpTag_Status(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_NatGateway_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NatGateway_Spec to NatGateway_Spec via AssignPropertiesToNatGateway_Spec & AssignPropertiesFromNatGateway_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForNatGateway_Spec, NatGateway_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNatGateway_Spec tests if a specific instance of NatGateway_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForNatGateway_Spec(subject NatGateway_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.NatGateway_Spec
	err := copied.AssignPropertiesToNatGateway_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NatGateway_Spec
	err = actual.AssignPropertiesFromNatGateway_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NatGateway_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGateway_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGateway_Spec, NatGateway_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGateway_Spec runs a test to see if a specific instance of NatGateway_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGateway_Spec(subject NatGateway_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGateway_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGateway_Spec instances for property testing - lazily instantiated by NatGateway_SpecGenerator()
var natGateway_specGenerator gopter.Gen

// NatGateway_SpecGenerator returns a generator of NatGateway_Spec instances for property testing.
// We first initialize natGateway_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NatGateway_SpecGenerator() gopter.Gen {
	if natGateway_specGenerator != nil {
		return natGateway_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_Spec(generators)
	natGateway_specGenerator = gen.Struct(reflect.TypeOf(NatGateway_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_Spec(generators)
	AddRelatedPropertyGeneratorsForNatGateway_Spec(generators)
	natGateway_specGenerator = gen.Struct(reflect.TypeOf(NatGateway_Spec{}), generators)

	return natGateway_specGenerator
}

// AddIndependentPropertyGeneratorsForNatGateway_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGateway_Spec(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNatGateway_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNatGateway_Spec(gens map[string]gopter.Gen) {
	gens["PublicIpAddresses"] = gen.SliceOf(SubResource_SpecGenerator())
	gens["PublicIpPrefixes"] = gen.SliceOf(SubResource_SpecGenerator())
	gens["Sku"] = gen.PtrOf(NatGatewaySku_SpecGenerator())
}

func Test_NatGateway_Status_PublicIPAddress_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NatGateway_Status_PublicIPAddress_SubResourceEmbedded to NatGateway_Status_PublicIPAddress_SubResourceEmbedded via AssignPropertiesToNatGateway_Status_PublicIPAddress_SubResourceEmbedded & AssignPropertiesFromNatGateway_Status_PublicIPAddress_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForNatGateway_Status_PublicIPAddress_SubResourceEmbedded, NatGateway_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNatGateway_Status_PublicIPAddress_SubResourceEmbedded tests if a specific instance of NatGateway_Status_PublicIPAddress_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(subject NatGateway_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded
	err := copied.AssignPropertiesToNatGateway_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NatGateway_Status_PublicIPAddress_SubResourceEmbedded
	err = actual.AssignPropertiesFromNatGateway_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NatGateway_Status_PublicIPAddress_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGateway_Status_PublicIPAddress_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGateway_Status_PublicIPAddress_SubResourceEmbedded, NatGateway_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGateway_Status_PublicIPAddress_SubResourceEmbedded runs a test to see if a specific instance of NatGateway_Status_PublicIPAddress_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(subject NatGateway_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGateway_Status_PublicIPAddress_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGateway_Status_PublicIPAddress_SubResourceEmbedded instances for property testing - lazily
//instantiated by NatGateway_Status_PublicIPAddress_SubResourceEmbeddedGenerator()
var natGateway_status_publicIPAddress_subResourceEmbeddedGenerator gopter.Gen

// NatGateway_Status_PublicIPAddress_SubResourceEmbeddedGenerator returns a generator of NatGateway_Status_PublicIPAddress_SubResourceEmbedded instances for property testing.
// We first initialize natGateway_status_publicIPAddress_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NatGateway_Status_PublicIPAddress_SubResourceEmbeddedGenerator() gopter.Gen {
	if natGateway_status_publicIPAddress_subResourceEmbeddedGenerator != nil {
		return natGateway_status_publicIPAddress_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(generators)
	natGateway_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(NatGateway_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(generators)
	natGateway_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(NatGateway_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	return natGateway_status_publicIPAddress_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Sku"] = gen.PtrOf(NatGatewaySku_StatusGenerator())
}

func Test_PublicIPAddressDnsSettings_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddressDnsSettings_Spec to PublicIPAddressDnsSettings_Spec via AssignPropertiesToPublicIPAddressDnsSettings_Spec & AssignPropertiesFromPublicIPAddressDnsSettings_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddressDnsSettings_Spec, PublicIPAddressDnsSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddressDnsSettings_Spec tests if a specific instance of PublicIPAddressDnsSettings_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddressDnsSettings_Spec(subject PublicIPAddressDnsSettings_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddressDnsSettings_Spec
	err := copied.AssignPropertiesToPublicIPAddressDnsSettings_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddressDnsSettings_Spec
	err = actual.AssignPropertiesFromPublicIPAddressDnsSettings_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddressDnsSettings_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressDnsSettings_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressDnsSettings_Spec, PublicIPAddressDnsSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressDnsSettings_Spec runs a test to see if a specific instance of PublicIPAddressDnsSettings_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressDnsSettings_Spec(subject PublicIPAddressDnsSettings_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressDnsSettings_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressDnsSettings_Spec instances for property testing - lazily instantiated by
//PublicIPAddressDnsSettings_SpecGenerator()
var publicIPAddressDnsSettings_specGenerator gopter.Gen

// PublicIPAddressDnsSettings_SpecGenerator returns a generator of PublicIPAddressDnsSettings_Spec instances for property testing.
func PublicIPAddressDnsSettings_SpecGenerator() gopter.Gen {
	if publicIPAddressDnsSettings_specGenerator != nil {
		return publicIPAddressDnsSettings_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_Spec(generators)
	publicIPAddressDnsSettings_specGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressDnsSettings_Spec{}), generators)

	return publicIPAddressDnsSettings_specGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_Spec(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ReverseFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddressDnsSettings_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddressDnsSettings_Status to PublicIPAddressDnsSettings_Status via AssignPropertiesToPublicIPAddressDnsSettings_Status & AssignPropertiesFromPublicIPAddressDnsSettings_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddressDnsSettings_Status, PublicIPAddressDnsSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddressDnsSettings_Status tests if a specific instance of PublicIPAddressDnsSettings_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddressDnsSettings_Status(subject PublicIPAddressDnsSettings_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status
	err := copied.AssignPropertiesToPublicIPAddressDnsSettings_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddressDnsSettings_Status
	err = actual.AssignPropertiesFromPublicIPAddressDnsSettings_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddressDnsSettings_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressDnsSettings_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressDnsSettings_Status, PublicIPAddressDnsSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressDnsSettings_Status runs a test to see if a specific instance of PublicIPAddressDnsSettings_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressDnsSettings_Status(subject PublicIPAddressDnsSettings_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressDnsSettings_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressDnsSettings_Status instances for property testing - lazily instantiated by
//PublicIPAddressDnsSettings_StatusGenerator()
var publicIPAddressDnsSettings_statusGenerator gopter.Gen

// PublicIPAddressDnsSettings_StatusGenerator returns a generator of PublicIPAddressDnsSettings_Status instances for property testing.
func PublicIPAddressDnsSettings_StatusGenerator() gopter.Gen {
	if publicIPAddressDnsSettings_statusGenerator != nil {
		return publicIPAddressDnsSettings_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_Status(generators)
	publicIPAddressDnsSettings_statusGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressDnsSettings_Status{}), generators)

	return publicIPAddressDnsSettings_statusGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_Status(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ReverseFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddressSku_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddressSku_Spec to PublicIPAddressSku_Spec via AssignPropertiesToPublicIPAddressSku_Spec & AssignPropertiesFromPublicIPAddressSku_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddressSku_Spec, PublicIPAddressSku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddressSku_Spec tests if a specific instance of PublicIPAddressSku_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddressSku_Spec(subject PublicIPAddressSku_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddressSku_Spec
	err := copied.AssignPropertiesToPublicIPAddressSku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddressSku_Spec
	err = actual.AssignPropertiesFromPublicIPAddressSku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddressSku_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressSku_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSku_Spec, PublicIPAddressSku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSku_Spec runs a test to see if a specific instance of PublicIPAddressSku_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSku_Spec(subject PublicIPAddressSku_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressSku_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressSku_Spec instances for property testing - lazily instantiated by
//PublicIPAddressSku_SpecGenerator()
var publicIPAddressSku_specGenerator gopter.Gen

// PublicIPAddressSku_SpecGenerator returns a generator of PublicIPAddressSku_Spec instances for property testing.
func PublicIPAddressSku_SpecGenerator() gopter.Gen {
	if publicIPAddressSku_specGenerator != nil {
		return publicIPAddressSku_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSku_Spec(generators)
	publicIPAddressSku_specGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSku_Spec{}), generators)

	return publicIPAddressSku_specGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSku_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSku_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(PublicIPAddressSku_Name_SpecBasic, PublicIPAddressSku_Name_SpecStandard))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(PublicIPAddressSku_Tier_SpecGlobal, PublicIPAddressSku_Tier_SpecRegional))
}

func Test_PublicIPAddressSku_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddressSku_Status to PublicIPAddressSku_Status via AssignPropertiesToPublicIPAddressSku_Status & AssignPropertiesFromPublicIPAddressSku_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddressSku_Status, PublicIPAddressSku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddressSku_Status tests if a specific instance of PublicIPAddressSku_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddressSku_Status(subject PublicIPAddressSku_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddressSku_Status
	err := copied.AssignPropertiesToPublicIPAddressSku_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddressSku_Status
	err = actual.AssignPropertiesFromPublicIPAddressSku_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddressSku_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressSku_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSku_Status, PublicIPAddressSku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSku_Status runs a test to see if a specific instance of PublicIPAddressSku_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSku_Status(subject PublicIPAddressSku_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressSku_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressSku_Status instances for property testing - lazily instantiated by
//PublicIPAddressSku_StatusGenerator()
var publicIPAddressSku_statusGenerator gopter.Gen

// PublicIPAddressSku_StatusGenerator returns a generator of PublicIPAddressSku_Status instances for property testing.
func PublicIPAddressSku_StatusGenerator() gopter.Gen {
	if publicIPAddressSku_statusGenerator != nil {
		return publicIPAddressSku_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSku_Status(generators)
	publicIPAddressSku_statusGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSku_Status{}), generators)

	return publicIPAddressSku_statusGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSku_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSku_Status(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(PublicIPAddressSku_Name_StatusBasic, PublicIPAddressSku_Name_StatusStandard))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(PublicIPAddressSku_Tier_StatusGlobal, PublicIPAddressSku_Tier_StatusRegional))
}

func Test_PublicIPAddress_Spec_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PublicIPAddress_Spec_SubResourceEmbedded to PublicIPAddress_Spec_SubResourceEmbedded via AssignPropertiesToPublicIPAddress_Spec_SubResourceEmbedded & AssignPropertiesFromPublicIPAddress_Spec_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForPublicIPAddress_Spec_SubResourceEmbedded, PublicIPAddress_Spec_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPublicIPAddress_Spec_SubResourceEmbedded tests if a specific instance of PublicIPAddress_Spec_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForPublicIPAddress_Spec_SubResourceEmbedded(subject PublicIPAddress_Spec_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.PublicIPAddress_Spec_SubResourceEmbedded
	err := copied.AssignPropertiesToPublicIPAddress_Spec_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PublicIPAddress_Spec_SubResourceEmbedded
	err = actual.AssignPropertiesFromPublicIPAddress_Spec_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PublicIPAddress_Spec_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Spec_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress_Spec_SubResourceEmbedded, PublicIPAddress_Spec_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress_Spec_SubResourceEmbedded runs a test to see if a specific instance of PublicIPAddress_Spec_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress_Spec_SubResourceEmbedded(subject PublicIPAddress_Spec_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Spec_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Spec_SubResourceEmbedded instances for property testing - lazily instantiated by
//PublicIPAddress_Spec_SubResourceEmbeddedGenerator()
var publicIPAddress_spec_subResourceEmbeddedGenerator gopter.Gen

// PublicIPAddress_Spec_SubResourceEmbeddedGenerator returns a generator of PublicIPAddress_Spec_SubResourceEmbedded instances for property testing.
// We first initialize publicIPAddress_spec_subResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddress_Spec_SubResourceEmbeddedGenerator() gopter.Gen {
	if publicIPAddress_spec_subResourceEmbeddedGenerator != nil {
		return publicIPAddress_spec_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded(generators)
	publicIPAddress_spec_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Spec_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded(generators)
	publicIPAddress_spec_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Spec_SubResourceEmbedded{}), generators)

	return publicIPAddress_spec_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress_Spec_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_SpecGenerator())
}

func Test_SubResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SubResource_Spec to SubResource_Spec via AssignPropertiesToSubResource_Spec & AssignPropertiesFromSubResource_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForSubResource_Spec, SubResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSubResource_Spec tests if a specific instance of SubResource_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForSubResource_Spec(subject SubResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.SubResource_Spec
	err := copied.AssignPropertiesToSubResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SubResource_Spec
	err = actual.AssignPropertiesFromSubResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SubResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_Spec, SubResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_Spec runs a test to see if a specific instance of SubResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_Spec(subject SubResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_Spec instances for property testing - lazily instantiated by SubResource_SpecGenerator()
var subResource_specGenerator gopter.Gen

// SubResource_SpecGenerator returns a generator of SubResource_Spec instances for property testing.
func SubResource_SpecGenerator() gopter.Gen {
	if subResource_specGenerator != nil {
		return subResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	subResource_specGenerator = gen.Struct(reflect.TypeOf(SubResource_Spec{}), generators)

	return subResource_specGenerator
}

func Test_NatGatewaySku_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NatGatewaySku_Spec to NatGatewaySku_Spec via AssignPropertiesToNatGatewaySku_Spec & AssignPropertiesFromNatGatewaySku_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForNatGatewaySku_Spec, NatGatewaySku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNatGatewaySku_Spec tests if a specific instance of NatGatewaySku_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForNatGatewaySku_Spec(subject NatGatewaySku_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.NatGatewaySku_Spec
	err := copied.AssignPropertiesToNatGatewaySku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NatGatewaySku_Spec
	err = actual.AssignPropertiesFromNatGatewaySku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NatGatewaySku_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGatewaySku_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGatewaySku_Spec, NatGatewaySku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGatewaySku_Spec runs a test to see if a specific instance of NatGatewaySku_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGatewaySku_Spec(subject NatGatewaySku_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGatewaySku_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGatewaySku_Spec instances for property testing - lazily instantiated by NatGatewaySku_SpecGenerator()
var natGatewaySku_specGenerator gopter.Gen

// NatGatewaySku_SpecGenerator returns a generator of NatGatewaySku_Spec instances for property testing.
func NatGatewaySku_SpecGenerator() gopter.Gen {
	if natGatewaySku_specGenerator != nil {
		return natGatewaySku_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGatewaySku_Spec(generators)
	natGatewaySku_specGenerator = gen.Struct(reflect.TypeOf(NatGatewaySku_Spec{}), generators)

	return natGatewaySku_specGenerator
}

// AddIndependentPropertyGeneratorsForNatGatewaySku_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGatewaySku_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(NatGatewaySku_Name_SpecStandard))
}

func Test_NatGatewaySku_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NatGatewaySku_Status to NatGatewaySku_Status via AssignPropertiesToNatGatewaySku_Status & AssignPropertiesFromNatGatewaySku_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForNatGatewaySku_Status, NatGatewaySku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNatGatewaySku_Status tests if a specific instance of NatGatewaySku_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForNatGatewaySku_Status(subject NatGatewaySku_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.NatGatewaySku_Status
	err := copied.AssignPropertiesToNatGatewaySku_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NatGatewaySku_Status
	err = actual.AssignPropertiesFromNatGatewaySku_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NatGatewaySku_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGatewaySku_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGatewaySku_Status, NatGatewaySku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGatewaySku_Status runs a test to see if a specific instance of NatGatewaySku_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGatewaySku_Status(subject NatGatewaySku_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGatewaySku_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGatewaySku_Status instances for property testing - lazily instantiated by
//NatGatewaySku_StatusGenerator()
var natGatewaySku_statusGenerator gopter.Gen

// NatGatewaySku_StatusGenerator returns a generator of NatGatewaySku_Status instances for property testing.
func NatGatewaySku_StatusGenerator() gopter.Gen {
	if natGatewaySku_statusGenerator != nil {
		return natGatewaySku_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGatewaySku_Status(generators)
	natGatewaySku_statusGenerator = gen.Struct(reflect.TypeOf(NatGatewaySku_Status{}), generators)

	return natGatewaySku_statusGenerator
}

// AddIndependentPropertyGeneratorsForNatGatewaySku_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGatewaySku_Status(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(NatGatewaySku_Name_StatusStandard))
}

func Test_Subnet_Status_PublicIPAddress_SubResourceEmbedded_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Subnet_Status_PublicIPAddress_SubResourceEmbedded to Subnet_Status_PublicIPAddress_SubResourceEmbedded via AssignPropertiesToSubnet_Status_PublicIPAddress_SubResourceEmbedded & AssignPropertiesFromSubnet_Status_PublicIPAddress_SubResourceEmbedded returns original",
		prop.ForAll(RunPropertyAssignmentTestForSubnet_Status_PublicIPAddress_SubResourceEmbedded, Subnet_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSubnet_Status_PublicIPAddress_SubResourceEmbedded tests if a specific instance of Subnet_Status_PublicIPAddress_SubResourceEmbedded can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForSubnet_Status_PublicIPAddress_SubResourceEmbedded(subject Subnet_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded
	err := copied.AssignPropertiesToSubnet_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Subnet_Status_PublicIPAddress_SubResourceEmbedded
	err = actual.AssignPropertiesFromSubnet_Status_PublicIPAddress_SubResourceEmbedded(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Subnet_Status_PublicIPAddress_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_PublicIPAddress_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_PublicIPAddress_SubResourceEmbedded, Subnet_Status_PublicIPAddress_SubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_PublicIPAddress_SubResourceEmbedded runs a test to see if a specific instance of Subnet_Status_PublicIPAddress_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_PublicIPAddress_SubResourceEmbedded(subject Subnet_Status_PublicIPAddress_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_PublicIPAddress_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_PublicIPAddress_SubResourceEmbedded instances for property testing - lazily instantiated
//by Subnet_Status_PublicIPAddress_SubResourceEmbeddedGenerator()
var subnet_status_publicIPAddress_subResourceEmbeddedGenerator gopter.Gen

// Subnet_Status_PublicIPAddress_SubResourceEmbeddedGenerator returns a generator of Subnet_Status_PublicIPAddress_SubResourceEmbedded instances for property testing.
func Subnet_Status_PublicIPAddress_SubResourceEmbeddedGenerator() gopter.Gen {
	if subnet_status_publicIPAddress_subResourceEmbeddedGenerator != nil {
		return subnet_status_publicIPAddress_subResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_PublicIPAddress_SubResourceEmbedded(generators)
	subnet_status_publicIPAddress_subResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_PublicIPAddress_SubResourceEmbedded{}), generators)

	return subnet_status_publicIPAddress_subResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_PublicIPAddress_SubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_PublicIPAddress_SubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
