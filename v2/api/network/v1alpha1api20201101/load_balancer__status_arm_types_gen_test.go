// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_LoadBalancer_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancer_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerStatusARM, LoadBalancerStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerStatusARM runs a test to see if a specific instance of LoadBalancer_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerStatusARM(subject LoadBalancer_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancer_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancer_StatusARM instances for property testing - lazily instantiated by
// LoadBalancerStatusARMGenerator()
var loadBalancerStatusARMGenerator gopter.Gen

// LoadBalancerStatusARMGenerator returns a generator of LoadBalancer_StatusARM instances for property testing.
// We first initialize loadBalancerStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancerStatusARMGenerator() gopter.Gen {
	if loadBalancerStatusARMGenerator != nil {
		return loadBalancerStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerStatusARM(generators)
	loadBalancerStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerStatusARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancerStatusARM(generators)
	loadBalancerStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancer_StatusARM{}), generators)

	return loadBalancerStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancerStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancerStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancerStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancerStatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(LoadBalancerPropertiesFormatStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(LoadBalancerSkuStatusARMGenerator())
}

func Test_ExtendedLocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationStatusARM, ExtendedLocationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationStatusARM runs a test to see if a specific instance of ExtendedLocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationStatusARM(subject ExtendedLocation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_StatusARM instances for property testing - lazily instantiated by
// ExtendedLocationStatusARMGenerator()
var extendedLocationStatusARMGenerator gopter.Gen

// ExtendedLocationStatusARMGenerator returns a generator of ExtendedLocation_StatusARM instances for property testing.
func ExtendedLocationStatusARMGenerator() gopter.Gen {
	if extendedLocationStatusARMGenerator != nil {
		return extendedLocationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationStatusARM(generators)
	extendedLocationStatusARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_StatusARM{}), generators)

	return extendedLocationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_StatusEdgeZone))
}

func Test_LoadBalancerPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancerPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerPropertiesFormatStatusARM, LoadBalancerPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerPropertiesFormatStatusARM runs a test to see if a specific instance of LoadBalancerPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerPropertiesFormatStatusARM(subject LoadBalancerPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancerPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancerPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// LoadBalancerPropertiesFormatStatusARMGenerator()
var loadBalancerPropertiesFormatStatusARMGenerator gopter.Gen

// LoadBalancerPropertiesFormatStatusARMGenerator returns a generator of LoadBalancerPropertiesFormat_StatusARM instances for property testing.
// We first initialize loadBalancerPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancerPropertiesFormatStatusARMGenerator() gopter.Gen {
	if loadBalancerPropertiesFormatStatusARMGenerator != nil {
		return loadBalancerPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM(generators)
	loadBalancerPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM(generators)
	loadBalancerPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerPropertiesFormat_StatusARM{}), generators)

	return loadBalancerPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancerPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPools"] = gen.SliceOf(BackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(FrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator())
	gens["InboundNatPools"] = gen.SliceOf(InboundNatPoolStatusARMGenerator())
	gens["InboundNatRules"] = gen.SliceOf(InboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator())
	gens["LoadBalancingRules"] = gen.SliceOf(LoadBalancingRuleStatusARMGenerator())
	gens["OutboundRules"] = gen.SliceOf(OutboundRuleStatusARMGenerator())
	gens["Probes"] = gen.SliceOf(ProbeStatusARMGenerator())
}

func Test_LoadBalancerSku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancerSku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancerSkuStatusARM, LoadBalancerSkuStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancerSkuStatusARM runs a test to see if a specific instance of LoadBalancerSku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancerSkuStatusARM(subject LoadBalancerSku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancerSku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancerSku_StatusARM instances for property testing - lazily instantiated by
// LoadBalancerSkuStatusARMGenerator()
var loadBalancerSkuStatusARMGenerator gopter.Gen

// LoadBalancerSkuStatusARMGenerator returns a generator of LoadBalancerSku_StatusARM instances for property testing.
func LoadBalancerSkuStatusARMGenerator() gopter.Gen {
	if loadBalancerSkuStatusARMGenerator != nil {
		return loadBalancerSkuStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancerSkuStatusARM(generators)
	loadBalancerSkuStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancerSku_StatusARM{}), generators)

	return loadBalancerSkuStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancerSkuStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancerSkuStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(LoadBalancerSkuStatusNameBasic, LoadBalancerSkuStatusNameStandard))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(LoadBalancerSkuStatusTierGlobal, LoadBalancerSkuStatusTierRegional))
}

func Test_BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARM, BackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARM(subject BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by BackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator()
var backendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator != nil {
		return backendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARM(generators)
	backendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	return backendAddressPoolStatusLoadBalancerSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM, FrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM(subject FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by FrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator()
var frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM(generators)
	frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM(generators)
	frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator())
}

func Test_InboundNatPool_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatPool_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatPoolStatusARM, InboundNatPoolStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatPoolStatusARM runs a test to see if a specific instance of InboundNatPool_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatPoolStatusARM(subject InboundNatPool_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatPool_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatPool_StatusARM instances for property testing - lazily instantiated by
// InboundNatPoolStatusARMGenerator()
var inboundNatPoolStatusARMGenerator gopter.Gen

// InboundNatPoolStatusARMGenerator returns a generator of InboundNatPool_StatusARM instances for property testing.
// We first initialize inboundNatPoolStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InboundNatPoolStatusARMGenerator() gopter.Gen {
	if inboundNatPoolStatusARMGenerator != nil {
		return inboundNatPoolStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolStatusARM(generators)
	inboundNatPoolStatusARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPool_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolStatusARM(generators)
	AddRelatedPropertyGeneratorsForInboundNatPoolStatusARM(generators)
	inboundNatPoolStatusARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPool_StatusARM{}), generators)

	return inboundNatPoolStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatPoolStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatPoolStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInboundNatPoolStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInboundNatPoolStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InboundNatPoolPropertiesFormatStatusARMGenerator())
}

func Test_InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleStatusLoadBalancerSubResourceEmbeddedARM, InboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleStatusLoadBalancerSubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleStatusLoadBalancerSubResourceEmbeddedARM(subject InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by InboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator()
var inboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing.
func InboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator != nil {
		return inboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleStatusLoadBalancerSubResourceEmbeddedARM(generators)
	inboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	return inboundNatRuleStatusLoadBalancerSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_LoadBalancingRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancingRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancingRuleStatusARM, LoadBalancingRuleStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancingRuleStatusARM runs a test to see if a specific instance of LoadBalancingRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancingRuleStatusARM(subject LoadBalancingRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancingRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancingRule_StatusARM instances for property testing - lazily instantiated by
// LoadBalancingRuleStatusARMGenerator()
var loadBalancingRuleStatusARMGenerator gopter.Gen

// LoadBalancingRuleStatusARMGenerator returns a generator of LoadBalancingRule_StatusARM instances for property testing.
// We first initialize loadBalancingRuleStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancingRuleStatusARMGenerator() gopter.Gen {
	if loadBalancingRuleStatusARMGenerator != nil {
		return loadBalancingRuleStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRuleStatusARM(generators)
	loadBalancingRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRule_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRuleStatusARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancingRuleStatusARM(generators)
	loadBalancingRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRule_StatusARM{}), generators)

	return loadBalancingRuleStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancingRuleStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancingRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLoadBalancingRuleStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancingRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(LoadBalancingRulePropertiesFormatStatusARMGenerator())
}

func Test_OutboundRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OutboundRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOutboundRuleStatusARM, OutboundRuleStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOutboundRuleStatusARM runs a test to see if a specific instance of OutboundRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOutboundRuleStatusARM(subject OutboundRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OutboundRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OutboundRule_StatusARM instances for property testing - lazily instantiated by
// OutboundRuleStatusARMGenerator()
var outboundRuleStatusARMGenerator gopter.Gen

// OutboundRuleStatusARMGenerator returns a generator of OutboundRule_StatusARM instances for property testing.
// We first initialize outboundRuleStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OutboundRuleStatusARMGenerator() gopter.Gen {
	if outboundRuleStatusARMGenerator != nil {
		return outboundRuleStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRuleStatusARM(generators)
	outboundRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(OutboundRule_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRuleStatusARM(generators)
	AddRelatedPropertyGeneratorsForOutboundRuleStatusARM(generators)
	outboundRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(OutboundRule_StatusARM{}), generators)

	return outboundRuleStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForOutboundRuleStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOutboundRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForOutboundRuleStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOutboundRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(OutboundRulePropertiesFormatStatusARMGenerator())
}

func Test_Probe_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Probe_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProbeStatusARM, ProbeStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProbeStatusARM runs a test to see if a specific instance of Probe_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProbeStatusARM(subject Probe_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Probe_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Probe_StatusARM instances for property testing - lazily instantiated by ProbeStatusARMGenerator()
var probeStatusARMGenerator gopter.Gen

// ProbeStatusARMGenerator returns a generator of Probe_StatusARM instances for property testing.
// We first initialize probeStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProbeStatusARMGenerator() gopter.Gen {
	if probeStatusARMGenerator != nil {
		return probeStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbeStatusARM(generators)
	probeStatusARMGenerator = gen.Struct(reflect.TypeOf(Probe_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbeStatusARM(generators)
	AddRelatedPropertyGeneratorsForProbeStatusARM(generators)
	probeStatusARMGenerator = gen.Struct(reflect.TypeOf(Probe_StatusARM{}), generators)

	return probeStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForProbeStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProbeStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProbeStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProbeStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ProbePropertiesFormatStatusARMGenerator())
}

func Test_FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM, FrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM(subject FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM instances for
// property testing - lazily instantiated by
// FrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator()
var frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_StatusIPv4, IPVersion_StatusIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["InboundNatPools"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["InboundNatRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["LoadBalancingRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["OutboundRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetStatusLoadBalancerSubResourceEmbeddedARMGenerator())
}

func Test_InboundNatPoolPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatPoolPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatPoolPropertiesFormatStatusARM, InboundNatPoolPropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatPoolPropertiesFormatStatusARM runs a test to see if a specific instance of InboundNatPoolPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatPoolPropertiesFormatStatusARM(subject InboundNatPoolPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatPoolPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatPoolPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// InboundNatPoolPropertiesFormatStatusARMGenerator()
var inboundNatPoolPropertiesFormatStatusARMGenerator gopter.Gen

// InboundNatPoolPropertiesFormatStatusARMGenerator returns a generator of InboundNatPoolPropertiesFormat_StatusARM instances for property testing.
// We first initialize inboundNatPoolPropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InboundNatPoolPropertiesFormatStatusARMGenerator() gopter.Gen {
	if inboundNatPoolPropertiesFormatStatusARMGenerator != nil {
		return inboundNatPoolPropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM(generators)
	inboundNatPoolPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPoolPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM(generators)
	inboundNatPoolPropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(InboundNatPoolPropertiesFormat_StatusARM{}), generators)

	return inboundNatPoolPropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["BackendPort"] = gen.PtrOf(gen.Int())
	gens["EnableFloatingIP"] = gen.PtrOf(gen.Bool())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["FrontendPortRangeEnd"] = gen.PtrOf(gen.Int())
	gens["FrontendPortRangeStart"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(TransportProtocol_StatusAll, TransportProtocol_StatusTcp, TransportProtocol_StatusUdp))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInboundNatPoolPropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["FrontendIPConfiguration"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_LoadBalancingRulePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancingRulePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancingRulePropertiesFormatStatusARM, LoadBalancingRulePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancingRulePropertiesFormatStatusARM runs a test to see if a specific instance of LoadBalancingRulePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancingRulePropertiesFormatStatusARM(subject LoadBalancingRulePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancingRulePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancingRulePropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// LoadBalancingRulePropertiesFormatStatusARMGenerator()
var loadBalancingRulePropertiesFormatStatusARMGenerator gopter.Gen

// LoadBalancingRulePropertiesFormatStatusARMGenerator returns a generator of LoadBalancingRulePropertiesFormat_StatusARM instances for property testing.
// We first initialize loadBalancingRulePropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LoadBalancingRulePropertiesFormatStatusARMGenerator() gopter.Gen {
	if loadBalancingRulePropertiesFormatStatusARMGenerator != nil {
		return loadBalancingRulePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM(generators)
	loadBalancingRulePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRulePropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM(generators)
	loadBalancingRulePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingRulePropertiesFormat_StatusARM{}), generators)

	return loadBalancingRulePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["BackendPort"] = gen.PtrOf(gen.Int())
	gens["DisableOutboundSnat"] = gen.PtrOf(gen.Bool())
	gens["EnableFloatingIP"] = gen.PtrOf(gen.Bool())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["FrontendPort"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["LoadDistribution"] = gen.PtrOf(gen.OneConstOf(LoadBalancingRulePropertiesFormatStatusLoadDistributionDefault, LoadBalancingRulePropertiesFormatStatusLoadDistributionSourceIP, LoadBalancingRulePropertiesFormatStatusLoadDistributionSourceIPProtocol))
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(TransportProtocol_StatusAll, TransportProtocol_StatusTcp, TransportProtocol_StatusUdp))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLoadBalancingRulePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPool"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["FrontendIPConfiguration"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["Probe"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_OutboundRulePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OutboundRulePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOutboundRulePropertiesFormatStatusARM, OutboundRulePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOutboundRulePropertiesFormatStatusARM runs a test to see if a specific instance of OutboundRulePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOutboundRulePropertiesFormatStatusARM(subject OutboundRulePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OutboundRulePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OutboundRulePropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// OutboundRulePropertiesFormatStatusARMGenerator()
var outboundRulePropertiesFormatStatusARMGenerator gopter.Gen

// OutboundRulePropertiesFormatStatusARMGenerator returns a generator of OutboundRulePropertiesFormat_StatusARM instances for property testing.
// We first initialize outboundRulePropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OutboundRulePropertiesFormatStatusARMGenerator() gopter.Gen {
	if outboundRulePropertiesFormatStatusARMGenerator != nil {
		return outboundRulePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM(generators)
	outboundRulePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(OutboundRulePropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM(generators)
	outboundRulePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(OutboundRulePropertiesFormat_StatusARM{}), generators)

	return outboundRulePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["EnableTcpReset"] = gen.PtrOf(gen.Bool())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(OutboundRulePropertiesFormatStatusProtocolAll, OutboundRulePropertiesFormatStatusProtocolTcp, OutboundRulePropertiesFormatStatusProtocolUdp))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOutboundRulePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["BackendAddressPool"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["FrontendIPConfigurations"] = gen.SliceOf(SubResourceStatusARMGenerator())
}

func Test_ProbePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProbePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProbePropertiesFormatStatusARM, ProbePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProbePropertiesFormatStatusARM runs a test to see if a specific instance of ProbePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProbePropertiesFormatStatusARM(subject ProbePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProbePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProbePropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// ProbePropertiesFormatStatusARMGenerator()
var probePropertiesFormatStatusARMGenerator gopter.Gen

// ProbePropertiesFormatStatusARMGenerator returns a generator of ProbePropertiesFormat_StatusARM instances for property testing.
// We first initialize probePropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProbePropertiesFormatStatusARMGenerator() gopter.Gen {
	if probePropertiesFormatStatusARMGenerator != nil {
		return probePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbePropertiesFormatStatusARM(generators)
	probePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ProbePropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProbePropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForProbePropertiesFormatStatusARM(generators)
	probePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(ProbePropertiesFormat_StatusARM{}), generators)

	return probePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForProbePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProbePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["NumberOfProbes"] = gen.PtrOf(gen.Int())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(ProbePropertiesFormatStatusProtocolHttp, ProbePropertiesFormatStatusProtocolHttps, ProbePropertiesFormatStatusProtocolTcp))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["RequestPath"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProbePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProbePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["LoadBalancingRules"] = gen.SliceOf(SubResourceStatusARMGenerator())
}

func Test_PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM, PublicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM(subject PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PublicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator()
var publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM(generators)
	publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM(generators)
	publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressStatusLoadBalancerSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuStatusARMGenerator())
}

func Test_Subnet_Status_LoadBalancer_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_LoadBalancer_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusLoadBalancerSubResourceEmbeddedARM, SubnetStatusLoadBalancerSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusLoadBalancerSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_LoadBalancer_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusLoadBalancerSubResourceEmbeddedARM(subject Subnet_Status_LoadBalancer_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_LoadBalancer_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing - lazily instantiated
// by SubnetStatusLoadBalancerSubResourceEmbeddedARMGenerator()
var subnetStatusLoadBalancerSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetStatusLoadBalancerSubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_LoadBalancer_SubResourceEmbeddedARM instances for property testing.
func SubnetStatusLoadBalancerSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetStatusLoadBalancerSubResourceEmbeddedARMGenerator != nil {
		return subnetStatusLoadBalancerSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusLoadBalancerSubResourceEmbeddedARM(generators)
	subnetStatusLoadBalancerSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_LoadBalancer_SubResourceEmbeddedARM{}), generators)

	return subnetStatusLoadBalancerSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusLoadBalancerSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusLoadBalancerSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
