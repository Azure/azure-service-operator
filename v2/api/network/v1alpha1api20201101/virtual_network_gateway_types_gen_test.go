// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGateway to hub returns original",
		prop.ForAll(RunResourceConversionTestForVirtualNetworkGateway, VirtualNetworkGatewayGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForVirtualNetworkGateway tests if a specific instance of VirtualNetworkGateway round trips to the hub storage version and back losslessly
func RunResourceConversionTestForVirtualNetworkGateway(subject VirtualNetworkGateway) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20201101storage.VirtualNetworkGateway
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual VirtualNetworkGateway
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGateway_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGateway to VirtualNetworkGateway via AssignPropertiesToVirtualNetworkGateway & AssignPropertiesFromVirtualNetworkGateway returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGateway, VirtualNetworkGatewayGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGateway tests if a specific instance of VirtualNetworkGateway can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGateway(subject VirtualNetworkGateway) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGateway
	err := copied.AssignPropertiesToVirtualNetworkGateway(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGateway
	err = actual.AssignPropertiesFromVirtualNetworkGateway(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGateway_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway, VirtualNetworkGatewayGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway runs a test to see if a specific instance of VirtualNetworkGateway round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway(subject VirtualNetworkGateway) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway instances for property testing - lazily instantiated by
//VirtualNetworkGatewayGenerator()
var virtualNetworkGatewayGenerator gopter.Gen

// VirtualNetworkGatewayGenerator returns a generator of VirtualNetworkGateway instances for property testing.
func VirtualNetworkGatewayGenerator() gopter.Gen {
	if virtualNetworkGatewayGenerator != nil {
		return virtualNetworkGatewayGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway(generators)
	virtualNetworkGatewayGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway{}), generators)

	return virtualNetworkGatewayGenerator
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway(gens map[string]gopter.Gen) {
	gens["Spec"] = VirtualNetworkGateways_SPECGenerator()
	gens["Status"] = VirtualNetworkGateway_StatusGenerator()
}

func Test_VirtualNetworkGateway_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGateway_Status to VirtualNetworkGateway_Status via AssignPropertiesToVirtualNetworkGateway_Status & AssignPropertiesFromVirtualNetworkGateway_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGateway_Status, VirtualNetworkGateway_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGateway_Status tests if a specific instance of VirtualNetworkGateway_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGateway_Status(subject VirtualNetworkGateway_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGateway_Status
	err := copied.AssignPropertiesToVirtualNetworkGateway_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGateway_Status
	err = actual.AssignPropertiesFromVirtualNetworkGateway_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGateway_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Status, VirtualNetworkGateway_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Status runs a test to see if a specific instance of VirtualNetworkGateway_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Status(subject VirtualNetworkGateway_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Status instances for property testing - lazily instantiated by
//VirtualNetworkGateway_StatusGenerator()
var virtualNetworkGateway_statusGenerator gopter.Gen

// VirtualNetworkGateway_StatusGenerator returns a generator of VirtualNetworkGateway_Status instances for property testing.
// We first initialize virtualNetworkGateway_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_StatusGenerator() gopter.Gen {
	if virtualNetworkGateway_statusGenerator != nil {
		return virtualNetworkGateway_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Status(generators)
	virtualNetworkGateway_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Status(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Status(generators)
	virtualNetworkGateway_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Status{}), generators)

	return virtualNetworkGateway_statusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Status(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusLocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusVpn))
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusGeneration1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusGeneration2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnType_StatusPolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnType_StatusRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Status(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_StatusGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_StatusGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_StatusGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_StatusGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_StatusGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_StatusGenerator())
}

func Test_VirtualNetworkGateways_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGateways_SPEC to VirtualNetworkGateways_SPEC via AssignPropertiesToVirtualNetworkGateways_SPEC & AssignPropertiesFromVirtualNetworkGateways_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGateways_SPEC, VirtualNetworkGateways_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGateways_SPEC tests if a specific instance of VirtualNetworkGateways_SPEC can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGateways_SPEC(subject VirtualNetworkGateways_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGateways_SPEC
	err := copied.AssignPropertiesToVirtualNetworkGateways_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGateways_SPEC
	err = actual.AssignPropertiesFromVirtualNetworkGateways_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGateways_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateways_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateways_SPEC, VirtualNetworkGateways_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateways_SPEC runs a test to see if a specific instance of VirtualNetworkGateways_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateways_SPEC(subject VirtualNetworkGateways_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateways_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateways_SPEC instances for property testing - lazily instantiated by
//VirtualNetworkGateways_SPECGenerator()
var virtualNetworkGateways_specGenerator gopter.Gen

// VirtualNetworkGateways_SPECGenerator returns a generator of VirtualNetworkGateways_SPEC instances for property testing.
// We first initialize virtualNetworkGateways_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateways_SPECGenerator() gopter.Gen {
	if virtualNetworkGateways_specGenerator != nil {
		return virtualNetworkGateways_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPEC(generators)
	virtualNetworkGateways_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateways_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPEC(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateways_SPEC(generators)
	virtualNetworkGateways_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateways_SPEC{}), generators)

	return virtualNetworkGateways_specGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPEC(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["AzureName"] = gen.AlphaString()
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecLocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecVpn))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecGeneration1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecGeneration2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnType_SpecPolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnType_SpecRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateways_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateways_SPEC(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_SpecGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_SpecGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_SpecGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_SpecGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_SpecGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_SpecGenerator())
}

func Test_BgpSettings_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from BgpSettings_Spec to BgpSettings_Spec via AssignPropertiesToBgpSettings_Spec & AssignPropertiesFromBgpSettings_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForBgpSettings_Spec, BgpSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForBgpSettings_Spec tests if a specific instance of BgpSettings_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForBgpSettings_Spec(subject BgpSettings_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.BgpSettings_Spec
	err := copied.AssignPropertiesToBgpSettings_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual BgpSettings_Spec
	err = actual.AssignPropertiesFromBgpSettings_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_BgpSettings_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_Spec, BgpSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_Spec runs a test to see if a specific instance of BgpSettings_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_Spec(subject BgpSettings_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_Spec instances for property testing - lazily instantiated by BgpSettings_SpecGenerator()
var bgpSettings_specGenerator gopter.Gen

// BgpSettings_SpecGenerator returns a generator of BgpSettings_Spec instances for property testing.
// We first initialize bgpSettings_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_SpecGenerator() gopter.Gen {
	if bgpSettings_specGenerator != nil {
		return bgpSettings_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_Spec(generators)
	bgpSettings_specGenerator = gen.Struct(reflect.TypeOf(BgpSettings_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_Spec(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_Spec(generators)
	bgpSettings_specGenerator = gen.Struct(reflect.TypeOf(BgpSettings_Spec{}), generators)

	return bgpSettings_specGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_Spec(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_Spec(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_SpecGenerator())
}

func Test_BgpSettings_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from BgpSettings_Status to BgpSettings_Status via AssignPropertiesToBgpSettings_Status & AssignPropertiesFromBgpSettings_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForBgpSettings_Status, BgpSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForBgpSettings_Status tests if a specific instance of BgpSettings_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForBgpSettings_Status(subject BgpSettings_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.BgpSettings_Status
	err := copied.AssignPropertiesToBgpSettings_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual BgpSettings_Status
	err = actual.AssignPropertiesFromBgpSettings_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_BgpSettings_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_Status, BgpSettings_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_Status runs a test to see if a specific instance of BgpSettings_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_Status(subject BgpSettings_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_Status instances for property testing - lazily instantiated by BgpSettings_StatusGenerator()
var bgpSettings_statusGenerator gopter.Gen

// BgpSettings_StatusGenerator returns a generator of BgpSettings_Status instances for property testing.
// We first initialize bgpSettings_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_StatusGenerator() gopter.Gen {
	if bgpSettings_statusGenerator != nil {
		return bgpSettings_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_Status(generators)
	bgpSettings_statusGenerator = gen.Struct(reflect.TypeOf(BgpSettings_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_Status(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_Status(generators)
	bgpSettings_statusGenerator = gen.Struct(reflect.TypeOf(BgpSettings_Status{}), generators)

	return bgpSettings_statusGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_Status(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_Status(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_StatusGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGatewayIPConfiguration_Spec to VirtualNetworkGatewayIPConfiguration_Spec via AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Spec & AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGatewayIPConfiguration_Spec, VirtualNetworkGatewayIPConfiguration_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGatewayIPConfiguration_Spec tests if a specific instance of VirtualNetworkGatewayIPConfiguration_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGatewayIPConfiguration_Spec(subject VirtualNetworkGatewayIPConfiguration_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Spec
	err := copied.AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGatewayIPConfiguration_Spec
	err = actual.AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGatewayIPConfiguration_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_Spec, VirtualNetworkGatewayIPConfiguration_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_Spec runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_Spec(subject VirtualNetworkGatewayIPConfiguration_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_Spec instances for property testing - lazily instantiated by
//VirtualNetworkGatewayIPConfiguration_SpecGenerator()
var virtualNetworkGatewayIPConfiguration_specGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_SpecGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_Spec instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_SpecGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_specGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec(generators)
	virtualNetworkGatewayIPConfiguration_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec(generators)
	virtualNetworkGatewayIPConfiguration_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_Spec{}), generators)

	return virtualNetworkGatewayIPConfiguration_specGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Spec(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_SpecGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_SpecGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGatewayIPConfiguration_Status to VirtualNetworkGatewayIPConfiguration_Status via AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Status & AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGatewayIPConfiguration_Status, VirtualNetworkGatewayIPConfiguration_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGatewayIPConfiguration_Status tests if a specific instance of VirtualNetworkGatewayIPConfiguration_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGatewayIPConfiguration_Status(subject VirtualNetworkGatewayIPConfiguration_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status
	err := copied.AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGatewayIPConfiguration_Status
	err = actual.AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGatewayIPConfiguration_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_Status, VirtualNetworkGatewayIPConfiguration_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_Status runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_Status(subject VirtualNetworkGatewayIPConfiguration_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_Status instances for property testing - lazily instantiated by
//VirtualNetworkGatewayIPConfiguration_StatusGenerator()
var virtualNetworkGatewayIPConfiguration_statusGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_StatusGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_Status instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_StatusGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_statusGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status(generators)
	virtualNetworkGatewayIPConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status(generators)
	virtualNetworkGatewayIPConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_Status{}), generators)

	return virtualNetworkGatewayIPConfiguration_statusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_Status(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_StatusGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_StatusGenerator())
}

func Test_VirtualNetworkGatewaySku_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGatewaySku_Spec to VirtualNetworkGatewaySku_Spec via AssignPropertiesToVirtualNetworkGatewaySku_Spec & AssignPropertiesFromVirtualNetworkGatewaySku_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGatewaySku_Spec, VirtualNetworkGatewaySku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGatewaySku_Spec tests if a specific instance of VirtualNetworkGatewaySku_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGatewaySku_Spec(subject VirtualNetworkGatewaySku_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGatewaySku_Spec
	err := copied.AssignPropertiesToVirtualNetworkGatewaySku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGatewaySku_Spec
	err = actual.AssignPropertiesFromVirtualNetworkGatewaySku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGatewaySku_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_Spec, VirtualNetworkGatewaySku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_Spec runs a test to see if a specific instance of VirtualNetworkGatewaySku_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_Spec(subject VirtualNetworkGatewaySku_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_Spec instances for property testing - lazily instantiated by
//VirtualNetworkGatewaySku_SpecGenerator()
var virtualNetworkGatewaySku_specGenerator gopter.Gen

// VirtualNetworkGatewaySku_SpecGenerator returns a generator of VirtualNetworkGatewaySku_Spec instances for property testing.
func VirtualNetworkGatewaySku_SpecGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_specGenerator != nil {
		return virtualNetworkGatewaySku_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_Spec(generators)
	virtualNetworkGatewaySku_specGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_Spec{}), generators)

	return virtualNetworkGatewaySku_specGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_SpecBasic,
		VirtualNetworkGatewaySku_Name_SpecErGw1AZ,
		VirtualNetworkGatewaySku_Name_SpecErGw2AZ,
		VirtualNetworkGatewaySku_Name_SpecErGw3AZ,
		VirtualNetworkGatewaySku_Name_SpecHighPerformance,
		VirtualNetworkGatewaySku_Name_SpecStandard,
		VirtualNetworkGatewaySku_Name_SpecUltraPerformance,
		VirtualNetworkGatewaySku_Name_SpecVpnGw1,
		VirtualNetworkGatewaySku_Name_SpecVpnGw1AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw2,
		VirtualNetworkGatewaySku_Name_SpecVpnGw2AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw3,
		VirtualNetworkGatewaySku_Name_SpecVpnGw3AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw4,
		VirtualNetworkGatewaySku_Name_SpecVpnGw4AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw5,
		VirtualNetworkGatewaySku_Name_SpecVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_SpecBasic,
		VirtualNetworkGatewaySku_Tier_SpecErGw1AZ,
		VirtualNetworkGatewaySku_Tier_SpecErGw2AZ,
		VirtualNetworkGatewaySku_Tier_SpecErGw3AZ,
		VirtualNetworkGatewaySku_Tier_SpecHighPerformance,
		VirtualNetworkGatewaySku_Tier_SpecStandard,
		VirtualNetworkGatewaySku_Tier_SpecUltraPerformance,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw1,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw2,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw3,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw4,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw5,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw5AZ))
}

func Test_VirtualNetworkGatewaySku_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualNetworkGatewaySku_Status to VirtualNetworkGatewaySku_Status via AssignPropertiesToVirtualNetworkGatewaySku_Status & AssignPropertiesFromVirtualNetworkGatewaySku_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualNetworkGatewaySku_Status, VirtualNetworkGatewaySku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualNetworkGatewaySku_Status tests if a specific instance of VirtualNetworkGatewaySku_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVirtualNetworkGatewaySku_Status(subject VirtualNetworkGatewaySku_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status
	err := copied.AssignPropertiesToVirtualNetworkGatewaySku_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualNetworkGatewaySku_Status
	err = actual.AssignPropertiesFromVirtualNetworkGatewaySku_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualNetworkGatewaySku_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_Status, VirtualNetworkGatewaySku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_Status runs a test to see if a specific instance of VirtualNetworkGatewaySku_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_Status(subject VirtualNetworkGatewaySku_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_Status instances for property testing - lazily instantiated by
//VirtualNetworkGatewaySku_StatusGenerator()
var virtualNetworkGatewaySku_statusGenerator gopter.Gen

// VirtualNetworkGatewaySku_StatusGenerator returns a generator of VirtualNetworkGatewaySku_Status instances for property testing.
func VirtualNetworkGatewaySku_StatusGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_statusGenerator != nil {
		return virtualNetworkGatewaySku_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_Status(generators)
	virtualNetworkGatewaySku_statusGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_Status{}), generators)

	return virtualNetworkGatewaySku_statusGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_Status(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_StatusBasic,
		VirtualNetworkGatewaySku_Name_StatusErGw1AZ,
		VirtualNetworkGatewaySku_Name_StatusErGw2AZ,
		VirtualNetworkGatewaySku_Name_StatusErGw3AZ,
		VirtualNetworkGatewaySku_Name_StatusHighPerformance,
		VirtualNetworkGatewaySku_Name_StatusStandard,
		VirtualNetworkGatewaySku_Name_StatusUltraPerformance,
		VirtualNetworkGatewaySku_Name_StatusVpnGw1,
		VirtualNetworkGatewaySku_Name_StatusVpnGw1AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw2,
		VirtualNetworkGatewaySku_Name_StatusVpnGw2AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw3,
		VirtualNetworkGatewaySku_Name_StatusVpnGw3AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw4,
		VirtualNetworkGatewaySku_Name_StatusVpnGw4AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw5,
		VirtualNetworkGatewaySku_Name_StatusVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_StatusBasic,
		VirtualNetworkGatewaySku_Tier_StatusErGw1AZ,
		VirtualNetworkGatewaySku_Tier_StatusErGw2AZ,
		VirtualNetworkGatewaySku_Tier_StatusErGw3AZ,
		VirtualNetworkGatewaySku_Tier_StatusHighPerformance,
		VirtualNetworkGatewaySku_Tier_StatusStandard,
		VirtualNetworkGatewaySku_Tier_StatusUltraPerformance,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw1,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw2,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw3,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw4,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw5,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw5AZ))
}

func Test_VpnClientConfiguration_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VpnClientConfiguration_Spec to VpnClientConfiguration_Spec via AssignPropertiesToVpnClientConfiguration_Spec & AssignPropertiesFromVpnClientConfiguration_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForVpnClientConfiguration_Spec, VpnClientConfiguration_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVpnClientConfiguration_Spec tests if a specific instance of VpnClientConfiguration_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVpnClientConfiguration_Spec(subject VpnClientConfiguration_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VpnClientConfiguration_Spec
	err := copied.AssignPropertiesToVpnClientConfiguration_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VpnClientConfiguration_Spec
	err = actual.AssignPropertiesFromVpnClientConfiguration_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VpnClientConfiguration_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_Spec, VpnClientConfiguration_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_Spec runs a test to see if a specific instance of VpnClientConfiguration_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_Spec(subject VpnClientConfiguration_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_Spec instances for property testing - lazily instantiated by
//VpnClientConfiguration_SpecGenerator()
var vpnClientConfiguration_specGenerator gopter.Gen

// VpnClientConfiguration_SpecGenerator returns a generator of VpnClientConfiguration_Spec instances for property testing.
// We first initialize vpnClientConfiguration_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_SpecGenerator() gopter.Gen {
	if vpnClientConfiguration_specGenerator != nil {
		return vpnClientConfiguration_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_Spec(generators)
	vpnClientConfiguration_specGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_Spec(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_Spec(generators)
	vpnClientConfiguration_specGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_Spec{}), generators)

	return vpnClientConfiguration_specGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_Spec(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypes_SpecAAD, VpnClientConfiguration_VpnAuthenticationTypes_SpecCertificate, VpnClientConfiguration_VpnAuthenticationTypes_SpecRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocols_SpecIkeV2, VpnClientConfiguration_VpnClientProtocols_SpecOpenVPN, VpnClientConfiguration_VpnClientProtocols_SpecSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_Spec(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_SpecGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_SpecGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_SpecGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_SpecGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_SpecGenerator())
}

func Test_VpnClientConfiguration_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VpnClientConfiguration_Status to VpnClientConfiguration_Status via AssignPropertiesToVpnClientConfiguration_Status & AssignPropertiesFromVpnClientConfiguration_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVpnClientConfiguration_Status, VpnClientConfiguration_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVpnClientConfiguration_Status tests if a specific instance of VpnClientConfiguration_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVpnClientConfiguration_Status(subject VpnClientConfiguration_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VpnClientConfiguration_Status
	err := copied.AssignPropertiesToVpnClientConfiguration_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VpnClientConfiguration_Status
	err = actual.AssignPropertiesFromVpnClientConfiguration_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VpnClientConfiguration_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_Status, VpnClientConfiguration_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_Status runs a test to see if a specific instance of VpnClientConfiguration_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_Status(subject VpnClientConfiguration_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_Status instances for property testing - lazily instantiated by
//VpnClientConfiguration_StatusGenerator()
var vpnClientConfiguration_statusGenerator gopter.Gen

// VpnClientConfiguration_StatusGenerator returns a generator of VpnClientConfiguration_Status instances for property testing.
// We first initialize vpnClientConfiguration_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_StatusGenerator() gopter.Gen {
	if vpnClientConfiguration_statusGenerator != nil {
		return vpnClientConfiguration_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_Status(generators)
	vpnClientConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_Status(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_Status(generators)
	vpnClientConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_Status{}), generators)

	return vpnClientConfiguration_statusGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_Status(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypes_StatusAAD, VpnClientConfiguration_VpnAuthenticationTypes_StatusCertificate, VpnClientConfiguration_VpnAuthenticationTypes_StatusRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocols_StatusIkeV2, VpnClientConfiguration_VpnClientProtocols_StatusOpenVPN, VpnClientConfiguration_VpnClientProtocols_StatusSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_Status(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_StatusGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_StatusGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_StatusGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_StatusGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_StatusGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IPConfigurationBgpPeeringAddress_Spec to IPConfigurationBgpPeeringAddress_Spec via AssignPropertiesToIPConfigurationBgpPeeringAddress_Spec & AssignPropertiesFromIPConfigurationBgpPeeringAddress_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForIPConfigurationBgpPeeringAddress_Spec, IPConfigurationBgpPeeringAddress_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIPConfigurationBgpPeeringAddress_Spec tests if a specific instance of IPConfigurationBgpPeeringAddress_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIPConfigurationBgpPeeringAddress_Spec(subject IPConfigurationBgpPeeringAddress_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Spec
	err := copied.AssignPropertiesToIPConfigurationBgpPeeringAddress_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IPConfigurationBgpPeeringAddress_Spec
	err = actual.AssignPropertiesFromIPConfigurationBgpPeeringAddress_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IPConfigurationBgpPeeringAddress_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_Spec, IPConfigurationBgpPeeringAddress_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_Spec runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_Spec(subject IPConfigurationBgpPeeringAddress_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_Spec instances for property testing - lazily instantiated by
//IPConfigurationBgpPeeringAddress_SpecGenerator()
var ipConfigurationBgpPeeringAddress_specGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_SpecGenerator returns a generator of IPConfigurationBgpPeeringAddress_Spec instances for property testing.
func IPConfigurationBgpPeeringAddress_SpecGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_specGenerator != nil {
		return ipConfigurationBgpPeeringAddress_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_Spec(generators)
	ipConfigurationBgpPeeringAddress_specGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_Spec{}), generators)

	return ipConfigurationBgpPeeringAddress_specGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_Spec(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
}

func Test_IPConfigurationBgpPeeringAddress_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IPConfigurationBgpPeeringAddress_Status to IPConfigurationBgpPeeringAddress_Status via AssignPropertiesToIPConfigurationBgpPeeringAddress_Status & AssignPropertiesFromIPConfigurationBgpPeeringAddress_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForIPConfigurationBgpPeeringAddress_Status, IPConfigurationBgpPeeringAddress_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIPConfigurationBgpPeeringAddress_Status tests if a specific instance of IPConfigurationBgpPeeringAddress_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIPConfigurationBgpPeeringAddress_Status(subject IPConfigurationBgpPeeringAddress_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status
	err := copied.AssignPropertiesToIPConfigurationBgpPeeringAddress_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IPConfigurationBgpPeeringAddress_Status
	err = actual.AssignPropertiesFromIPConfigurationBgpPeeringAddress_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IPConfigurationBgpPeeringAddress_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_Status, IPConfigurationBgpPeeringAddress_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_Status runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_Status(subject IPConfigurationBgpPeeringAddress_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_Status instances for property testing - lazily instantiated by
//IPConfigurationBgpPeeringAddress_StatusGenerator()
var ipConfigurationBgpPeeringAddress_statusGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_StatusGenerator returns a generator of IPConfigurationBgpPeeringAddress_Status instances for property testing.
func IPConfigurationBgpPeeringAddress_StatusGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_statusGenerator != nil {
		return ipConfigurationBgpPeeringAddress_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_Status(generators)
	ipConfigurationBgpPeeringAddress_statusGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_Status{}), generators)

	return ipConfigurationBgpPeeringAddress_statusGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_Status(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicy_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IpsecPolicy_Spec to IpsecPolicy_Spec via AssignPropertiesToIpsecPolicy_Spec & AssignPropertiesFromIpsecPolicy_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForIpsecPolicy_Spec, IpsecPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIpsecPolicy_Spec tests if a specific instance of IpsecPolicy_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIpsecPolicy_Spec(subject IpsecPolicy_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IpsecPolicy_Spec
	err := copied.AssignPropertiesToIpsecPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IpsecPolicy_Spec
	err = actual.AssignPropertiesFromIpsecPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IpsecPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_Spec, IpsecPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_Spec runs a test to see if a specific instance of IpsecPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_Spec(subject IpsecPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_Spec instances for property testing - lazily instantiated by IpsecPolicy_SpecGenerator()
var ipsecPolicy_specGenerator gopter.Gen

// IpsecPolicy_SpecGenerator returns a generator of IpsecPolicy_Spec instances for property testing.
func IpsecPolicy_SpecGenerator() gopter.Gen {
	if ipsecPolicy_specGenerator != nil {
		return ipsecPolicy_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_Spec(generators)
	ipsecPolicy_specGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_Spec{}), generators)

	return ipsecPolicy_specGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_Spec(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.OneConstOf(
		DhGroup_SpecDHGroup1,
		DhGroup_SpecDHGroup14,
		DhGroup_SpecDHGroup2,
		DhGroup_SpecDHGroup2048,
		DhGroup_SpecDHGroup24,
		DhGroup_SpecECP256,
		DhGroup_SpecECP384,
		DhGroup_SpecNone)
	gens["IkeEncryption"] = gen.OneConstOf(
		IkeEncryption_SpecAES128,
		IkeEncryption_SpecAES192,
		IkeEncryption_SpecAES256,
		IkeEncryption_SpecDES,
		IkeEncryption_SpecDES3,
		IkeEncryption_SpecGCMAES128,
		IkeEncryption_SpecGCMAES256)
	gens["IkeIntegrity"] = gen.OneConstOf(
		IkeIntegrity_SpecGCMAES128,
		IkeIntegrity_SpecGCMAES256,
		IkeIntegrity_SpecMD5,
		IkeIntegrity_SpecSHA1,
		IkeIntegrity_SpecSHA256,
		IkeIntegrity_SpecSHA384)
	gens["IpsecEncryption"] = gen.OneConstOf(
		IpsecEncryption_SpecAES128,
		IpsecEncryption_SpecAES192,
		IpsecEncryption_SpecAES256,
		IpsecEncryption_SpecDES,
		IpsecEncryption_SpecDES3,
		IpsecEncryption_SpecGCMAES128,
		IpsecEncryption_SpecGCMAES192,
		IpsecEncryption_SpecGCMAES256,
		IpsecEncryption_SpecNone)
	gens["IpsecIntegrity"] = gen.OneConstOf(
		IpsecIntegrity_SpecGCMAES128,
		IpsecIntegrity_SpecGCMAES192,
		IpsecIntegrity_SpecGCMAES256,
		IpsecIntegrity_SpecMD5,
		IpsecIntegrity_SpecSHA1,
		IpsecIntegrity_SpecSHA256)
	gens["PfsGroup"] = gen.OneConstOf(
		PfsGroup_SpecECP256,
		PfsGroup_SpecECP384,
		PfsGroup_SpecNone,
		PfsGroup_SpecPFS1,
		PfsGroup_SpecPFS14,
		PfsGroup_SpecPFS2,
		PfsGroup_SpecPFS2048,
		PfsGroup_SpecPFS24,
		PfsGroup_SpecPFSMM)
	gens["SaDataSizeKilobytes"] = gen.Int()
	gens["SaLifeTimeSeconds"] = gen.Int()
}

func Test_IpsecPolicy_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from IpsecPolicy_Status to IpsecPolicy_Status via AssignPropertiesToIpsecPolicy_Status & AssignPropertiesFromIpsecPolicy_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForIpsecPolicy_Status, IpsecPolicy_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForIpsecPolicy_Status tests if a specific instance of IpsecPolicy_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForIpsecPolicy_Status(subject IpsecPolicy_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.IpsecPolicy_Status
	err := copied.AssignPropertiesToIpsecPolicy_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual IpsecPolicy_Status
	err = actual.AssignPropertiesFromIpsecPolicy_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_IpsecPolicy_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_Status, IpsecPolicy_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_Status runs a test to see if a specific instance of IpsecPolicy_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_Status(subject IpsecPolicy_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_Status instances for property testing - lazily instantiated by IpsecPolicy_StatusGenerator()
var ipsecPolicy_statusGenerator gopter.Gen

// IpsecPolicy_StatusGenerator returns a generator of IpsecPolicy_Status instances for property testing.
func IpsecPolicy_StatusGenerator() gopter.Gen {
	if ipsecPolicy_statusGenerator != nil {
		return ipsecPolicy_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_Status(generators)
	ipsecPolicy_statusGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_Status{}), generators)

	return ipsecPolicy_statusGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_Status(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.OneConstOf(
		DhGroup_StatusDHGroup1,
		DhGroup_StatusDHGroup14,
		DhGroup_StatusDHGroup2,
		DhGroup_StatusDHGroup2048,
		DhGroup_StatusDHGroup24,
		DhGroup_StatusECP256,
		DhGroup_StatusECP384,
		DhGroup_StatusNone)
	gens["IkeEncryption"] = gen.OneConstOf(
		IkeEncryption_StatusAES128,
		IkeEncryption_StatusAES192,
		IkeEncryption_StatusAES256,
		IkeEncryption_StatusDES,
		IkeEncryption_StatusDES3,
		IkeEncryption_StatusGCMAES128,
		IkeEncryption_StatusGCMAES256)
	gens["IkeIntegrity"] = gen.OneConstOf(
		IkeIntegrity_StatusGCMAES128,
		IkeIntegrity_StatusGCMAES256,
		IkeIntegrity_StatusMD5,
		IkeIntegrity_StatusSHA1,
		IkeIntegrity_StatusSHA256,
		IkeIntegrity_StatusSHA384)
	gens["IpsecEncryption"] = gen.OneConstOf(
		IpsecEncryption_StatusAES128,
		IpsecEncryption_StatusAES192,
		IpsecEncryption_StatusAES256,
		IpsecEncryption_StatusDES,
		IpsecEncryption_StatusDES3,
		IpsecEncryption_StatusGCMAES128,
		IpsecEncryption_StatusGCMAES192,
		IpsecEncryption_StatusGCMAES256,
		IpsecEncryption_StatusNone)
	gens["IpsecIntegrity"] = gen.OneConstOf(
		IpsecIntegrity_StatusGCMAES128,
		IpsecIntegrity_StatusGCMAES192,
		IpsecIntegrity_StatusGCMAES256,
		IpsecIntegrity_StatusMD5,
		IpsecIntegrity_StatusSHA1,
		IpsecIntegrity_StatusSHA256)
	gens["PfsGroup"] = gen.OneConstOf(
		PfsGroup_StatusECP256,
		PfsGroup_StatusECP384,
		PfsGroup_StatusNone,
		PfsGroup_StatusPFS1,
		PfsGroup_StatusPFS14,
		PfsGroup_StatusPFS2,
		PfsGroup_StatusPFS2048,
		PfsGroup_StatusPFS24,
		PfsGroup_StatusPFSMM)
	gens["SaDataSizeKilobytes"] = gen.Int()
	gens["SaLifeTimeSeconds"] = gen.Int()
}

func Test_RadiusServer_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RadiusServer_Spec to RadiusServer_Spec via AssignPropertiesToRadiusServer_Spec & AssignPropertiesFromRadiusServer_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForRadiusServer_Spec, RadiusServer_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRadiusServer_Spec tests if a specific instance of RadiusServer_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForRadiusServer_Spec(subject RadiusServer_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.RadiusServer_Spec
	err := copied.AssignPropertiesToRadiusServer_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RadiusServer_Spec
	err = actual.AssignPropertiesFromRadiusServer_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RadiusServer_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_Spec, RadiusServer_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_Spec runs a test to see if a specific instance of RadiusServer_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_Spec(subject RadiusServer_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_Spec instances for property testing - lazily instantiated by RadiusServer_SpecGenerator()
var radiusServer_specGenerator gopter.Gen

// RadiusServer_SpecGenerator returns a generator of RadiusServer_Spec instances for property testing.
func RadiusServer_SpecGenerator() gopter.Gen {
	if radiusServer_specGenerator != nil {
		return radiusServer_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_Spec(generators)
	radiusServer_specGenerator = gen.Struct(reflect.TypeOf(RadiusServer_Spec{}), generators)

	return radiusServer_specGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_Spec(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.AlphaString()
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_RadiusServer_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RadiusServer_Status to RadiusServer_Status via AssignPropertiesToRadiusServer_Status & AssignPropertiesFromRadiusServer_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForRadiusServer_Status, RadiusServer_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRadiusServer_Status tests if a specific instance of RadiusServer_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForRadiusServer_Status(subject RadiusServer_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.RadiusServer_Status
	err := copied.AssignPropertiesToRadiusServer_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RadiusServer_Status
	err = actual.AssignPropertiesFromRadiusServer_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RadiusServer_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_Status, RadiusServer_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_Status runs a test to see if a specific instance of RadiusServer_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_Status(subject RadiusServer_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_Status instances for property testing - lazily instantiated by
//RadiusServer_StatusGenerator()
var radiusServer_statusGenerator gopter.Gen

// RadiusServer_StatusGenerator returns a generator of RadiusServer_Status instances for property testing.
func RadiusServer_StatusGenerator() gopter.Gen {
	if radiusServer_statusGenerator != nil {
		return radiusServer_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_Status(generators)
	radiusServer_statusGenerator = gen.Struct(reflect.TypeOf(RadiusServer_Status{}), generators)

	return radiusServer_statusGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_Status(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.AlphaString()
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRevokedCertificate_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VpnClientRevokedCertificate_Spec to VpnClientRevokedCertificate_Spec via AssignPropertiesToVpnClientRevokedCertificate_Spec & AssignPropertiesFromVpnClientRevokedCertificate_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForVpnClientRevokedCertificate_Spec, VpnClientRevokedCertificate_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVpnClientRevokedCertificate_Spec tests if a specific instance of VpnClientRevokedCertificate_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVpnClientRevokedCertificate_Spec(subject VpnClientRevokedCertificate_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VpnClientRevokedCertificate_Spec
	err := copied.AssignPropertiesToVpnClientRevokedCertificate_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VpnClientRevokedCertificate_Spec
	err = actual.AssignPropertiesFromVpnClientRevokedCertificate_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VpnClientRevokedCertificate_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_Spec, VpnClientRevokedCertificate_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_Spec runs a test to see if a specific instance of VpnClientRevokedCertificate_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_Spec(subject VpnClientRevokedCertificate_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_Spec instances for property testing - lazily instantiated by
//VpnClientRevokedCertificate_SpecGenerator()
var vpnClientRevokedCertificate_specGenerator gopter.Gen

// VpnClientRevokedCertificate_SpecGenerator returns a generator of VpnClientRevokedCertificate_Spec instances for property testing.
func VpnClientRevokedCertificate_SpecGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_specGenerator != nil {
		return vpnClientRevokedCertificate_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_Spec(generators)
	vpnClientRevokedCertificate_specGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_Spec{}), generators)

	return vpnClientRevokedCertificate_specGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRevokedCertificate_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VpnClientRevokedCertificate_Status to VpnClientRevokedCertificate_Status via AssignPropertiesToVpnClientRevokedCertificate_Status & AssignPropertiesFromVpnClientRevokedCertificate_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVpnClientRevokedCertificate_Status, VpnClientRevokedCertificate_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVpnClientRevokedCertificate_Status tests if a specific instance of VpnClientRevokedCertificate_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVpnClientRevokedCertificate_Status(subject VpnClientRevokedCertificate_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VpnClientRevokedCertificate_Status
	err := copied.AssignPropertiesToVpnClientRevokedCertificate_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VpnClientRevokedCertificate_Status
	err = actual.AssignPropertiesFromVpnClientRevokedCertificate_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VpnClientRevokedCertificate_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_Status, VpnClientRevokedCertificate_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_Status runs a test to see if a specific instance of VpnClientRevokedCertificate_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_Status(subject VpnClientRevokedCertificate_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_Status instances for property testing - lazily instantiated by
//VpnClientRevokedCertificate_StatusGenerator()
var vpnClientRevokedCertificate_statusGenerator gopter.Gen

// VpnClientRevokedCertificate_StatusGenerator returns a generator of VpnClientRevokedCertificate_Status instances for property testing.
func VpnClientRevokedCertificate_StatusGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_statusGenerator != nil {
		return vpnClientRevokedCertificate_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_Status(generators)
	vpnClientRevokedCertificate_statusGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_Status{}), generators)

	return vpnClientRevokedCertificate_statusGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_Status(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificate_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VpnClientRootCertificate_Spec to VpnClientRootCertificate_Spec via AssignPropertiesToVpnClientRootCertificate_Spec & AssignPropertiesFromVpnClientRootCertificate_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForVpnClientRootCertificate_Spec, VpnClientRootCertificate_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVpnClientRootCertificate_Spec tests if a specific instance of VpnClientRootCertificate_Spec can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVpnClientRootCertificate_Spec(subject VpnClientRootCertificate_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VpnClientRootCertificate_Spec
	err := copied.AssignPropertiesToVpnClientRootCertificate_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VpnClientRootCertificate_Spec
	err = actual.AssignPropertiesFromVpnClientRootCertificate_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VpnClientRootCertificate_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_Spec, VpnClientRootCertificate_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_Spec runs a test to see if a specific instance of VpnClientRootCertificate_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_Spec(subject VpnClientRootCertificate_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_Spec instances for property testing - lazily instantiated by
//VpnClientRootCertificate_SpecGenerator()
var vpnClientRootCertificate_specGenerator gopter.Gen

// VpnClientRootCertificate_SpecGenerator returns a generator of VpnClientRootCertificate_Spec instances for property testing.
func VpnClientRootCertificate_SpecGenerator() gopter.Gen {
	if vpnClientRootCertificate_specGenerator != nil {
		return vpnClientRootCertificate_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_Spec(generators)
	vpnClientRootCertificate_specGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_Spec{}), generators)

	return vpnClientRootCertificate_specGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PublicCertData"] = gen.AlphaString()
}

func Test_VpnClientRootCertificate_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VpnClientRootCertificate_Status to VpnClientRootCertificate_Status via AssignPropertiesToVpnClientRootCertificate_Status & AssignPropertiesFromVpnClientRootCertificate_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForVpnClientRootCertificate_Status, VpnClientRootCertificate_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVpnClientRootCertificate_Status tests if a specific instance of VpnClientRootCertificate_Status can be assigned to v1alpha1api20201101storage and back losslessly
func RunPropertyAssignmentTestForVpnClientRootCertificate_Status(subject VpnClientRootCertificate_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201101storage.VpnClientRootCertificate_Status
	err := copied.AssignPropertiesToVpnClientRootCertificate_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VpnClientRootCertificate_Status
	err = actual.AssignPropertiesFromVpnClientRootCertificate_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VpnClientRootCertificate_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_Status, VpnClientRootCertificate_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_Status runs a test to see if a specific instance of VpnClientRootCertificate_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_Status(subject VpnClientRootCertificate_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_Status instances for property testing - lazily instantiated by
//VpnClientRootCertificate_StatusGenerator()
var vpnClientRootCertificate_statusGenerator gopter.Gen

// VpnClientRootCertificate_StatusGenerator returns a generator of VpnClientRootCertificate_Status instances for property testing.
func VpnClientRootCertificate_StatusGenerator() gopter.Gen {
	if vpnClientRootCertificate_statusGenerator != nil {
		return vpnClientRootCertificate_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_Status(generators)
	vpnClientRootCertificate_statusGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_Status{}), generators)

	return vpnClientRootCertificate_statusGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_Status(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["PublicCertData"] = gen.AlphaString()
}
