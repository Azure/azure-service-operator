// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/virtualNetworkGateway.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}
type VirtualNetworkGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworkGateways_SPEC  `json:"spec,omitempty"`
	Status            VirtualNetworkGateway_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworkGateway{}

// GetConditions returns the conditions of the resource
func (gateway *VirtualNetworkGateway) GetConditions() conditions.Conditions {
	return gateway.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (gateway *VirtualNetworkGateway) SetConditions(conditions conditions.Conditions) {
	gateway.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworkGateway{}

// ConvertFrom populates our VirtualNetworkGateway from the provided hub VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201101storage.VirtualNetworkGateway)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetworkGateway but received %T instead", hub)
	}

	return gateway.AssignPropertiesFromVirtualNetworkGateway(source)
}

// ConvertTo populates the provided hub VirtualNetworkGateway from our VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201101storage.VirtualNetworkGateway)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetworkGateway but received %T instead", hub)
	}

	return gateway.AssignPropertiesToVirtualNetworkGateway(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-virtualnetworkgateway,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworkgateways.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetworkGateway{}

// Default applies defaults to the VirtualNetworkGateway resource
func (gateway *VirtualNetworkGateway) Default() {
	gateway.defaultImpl()
	var temp interface{} = gateway
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (gateway *VirtualNetworkGateway) defaultAzureName() {
	if gateway.Spec.AzureName == "" {
		gateway.Spec.AzureName = gateway.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworkGateway resource
func (gateway *VirtualNetworkGateway) defaultImpl() { gateway.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetworkGateway{}

// AzureName returns the Azure name of the resource
func (gateway *VirtualNetworkGateway) AzureName() string {
	return gateway.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (gateway VirtualNetworkGateway) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (gateway *VirtualNetworkGateway) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (gateway *VirtualNetworkGateway) GetSpec() genruntime.ConvertibleSpec {
	return &gateway.Spec
}

// GetStatus returns the status of this resource
func (gateway *VirtualNetworkGateway) GetStatus() genruntime.ConvertibleStatus {
	return &gateway.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworkGateways"
func (gateway *VirtualNetworkGateway) GetType() string {
	return "Microsoft.Network/virtualNetworkGateways"
}

// NewEmptyStatus returns a new empty (blank) status
func (gateway *VirtualNetworkGateway) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &VirtualNetworkGateway_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (gateway *VirtualNetworkGateway) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(gateway.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  gateway.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (gateway *VirtualNetworkGateway) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualNetworkGateway_Status); ok {
		gateway.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualNetworkGateway_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	gateway.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-virtualnetworkgateway,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworkgateways.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetworkGateway{}

// ValidateCreate validates the creation of the resource
func (gateway *VirtualNetworkGateway) ValidateCreate() error {
	validations := gateway.createValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (gateway *VirtualNetworkGateway) ValidateDelete() error {
	validations := gateway.deleteValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (gateway *VirtualNetworkGateway) ValidateUpdate(old runtime.Object) error {
	validations := gateway.updateValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (gateway *VirtualNetworkGateway) createValidations() []func() error {
	return []func() error{gateway.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (gateway *VirtualNetworkGateway) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (gateway *VirtualNetworkGateway) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return gateway.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (gateway *VirtualNetworkGateway) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&gateway.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualNetworkGateway populates our VirtualNetworkGateway from the provided source VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) AssignPropertiesFromVirtualNetworkGateway(source *v1alpha1api20201101storage.VirtualNetworkGateway) error {

	// ObjectMeta
	gateway.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworkGateways_SPEC
	err := spec.AssignPropertiesFromVirtualNetworkGateways_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGateways_SPEC() to populate field Spec")
	}
	gateway.Spec = spec

	// Status
	var status VirtualNetworkGateway_Status
	err = status.AssignPropertiesFromVirtualNetworkGateway_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGateway_Status() to populate field Status")
	}
	gateway.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGateway populates the provided destination VirtualNetworkGateway from our VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) AssignPropertiesToVirtualNetworkGateway(destination *v1alpha1api20201101storage.VirtualNetworkGateway) error {

	// ObjectMeta
	destination.ObjectMeta = *gateway.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201101storage.VirtualNetworkGateways_SPEC
	err := gateway.Spec.AssignPropertiesToVirtualNetworkGateways_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGateways_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.VirtualNetworkGateway_Status
	err = gateway.Status.AssignPropertiesToVirtualNetworkGateway_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGateway_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (gateway *VirtualNetworkGateway) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: gateway.Spec.OriginalVersion(),
		Kind:    "VirtualNetworkGateway",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/virtualNetworkGateway.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}
type VirtualNetworkGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworkGateway `json:"items"`
}

type VirtualNetworkGateway_Status struct {
	//ActiveActive: ActiveActive flag.
	ActiveActive *bool `json:"activeActive,omitempty"`

	//BgpSettings: Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings_Status `json:"bgpSettings,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CustomRoutes: The reference to the address space resource which represents the
	//custom routes address space specified by the customer for virtual network
	//gateway and VpnClient.
	CustomRoutes *AddressSpace_Status `json:"customRoutes,omitempty"`

	//EnableBgp: Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	//EnableDnsForwarding: Whether dns forwarding is enabled or not.
	EnableDnsForwarding *bool `json:"enableDnsForwarding,omitempty"`

	//EnablePrivateIpAddress: Whether private IP needs to be enabled on this gateway
	//for connections or not.
	EnablePrivateIpAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//ExtendedLocation: The extended location of type local virtual network gateway.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//GatewayDefaultSite: The reference to the LocalNetworkGateway resource which
	//represents local network site having default routes. Assign Null value in case
	//of removing existing default site setting.
	GatewayDefaultSite *SubResource_Status `json:"gatewayDefaultSite,omitempty"`

	//GatewayType: The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewayPropertiesFormat_GatewayType_Status `json:"gatewayType,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//InboundDnsForwardingEndpoint: The IP address allocated by the gateway to which
	//dns requests can be sent.
	InboundDnsForwardingEndpoint *string `json:"inboundDnsForwardingEndpoint,omitempty"`

	//IpConfigurations: IP configurations for virtual network gateway.
	IpConfigurations []VirtualNetworkGatewayIPConfiguration_Status `json:"ipConfigurations,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network gateway
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resource GUID property of the virtual network gateway resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Sku: The reference to the VirtualNetworkGatewaySku resource which represents the
	//SKU selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//VNetExtendedLocationResourceId: Customer vnet resource id. VirtualNetworkGateway
	//of type local gateway is associated with the customer vnet.
	VNetExtendedLocationResourceId *string `json:"vNetExtendedLocationResourceId,omitempty"`

	//VpnClientConfiguration: The reference to the VpnClientConfiguration resource
	//which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration_Status `json:"vpnClientConfiguration,omitempty"`

	//VpnGatewayGeneration: The generation for this VirtualNetworkGateway. Must be
	//None if gatewayType is not VPN.
	VpnGatewayGeneration *VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Status `json:"vpnGatewayGeneration,omitempty"`

	//VpnType: The type of this virtual network gateway.
	VpnType *VirtualNetworkGatewayPropertiesFormat_VpnType_Status `json:"vpnType,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetworkGateway_Status{}

// ConvertStatusFrom populates our VirtualNetworkGateway_Status from the provided source
func (gateway *VirtualNetworkGateway_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworkGateway_Status)
	if ok {
		// Populate our instance from source
		return gateway.AssignPropertiesFromVirtualNetworkGateway_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworkGateway_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = gateway.AssignPropertiesFromVirtualNetworkGateway_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetworkGateway_Status
func (gateway *VirtualNetworkGateway_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworkGateway_Status)
	if ok {
		// Populate destination from our instance
		return gateway.AssignPropertiesToVirtualNetworkGateway_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworkGateway_Status{}
	err := gateway.AssignPropertiesToVirtualNetworkGateway_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetworkGateway_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateway *VirtualNetworkGateway_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateway_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateway *VirtualNetworkGateway_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateway_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateway_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveActive != nil {
			activeActive := *typedInput.Properties.ActiveActive
			gateway.ActiveActive = &activeActive
		}
	}

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpSettings != nil {
			var bgpSettings1 BgpSettings_Status
			err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
			if err != nil {
				return err
			}
			bgpSettings := bgpSettings1
			gateway.BgpSettings = &bgpSettings
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomRoutes != nil {
			var customRoutes1 AddressSpace_Status
			err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
			if err != nil {
				return err
			}
			customRoutes := customRoutes1
			gateway.CustomRoutes = &customRoutes
		}
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBgp != nil {
			enableBgp := *typedInput.Properties.EnableBgp
			gateway.EnableBgp = &enableBgp
		}
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDnsForwarding != nil {
			enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
			gateway.EnableDnsForwarding = &enableDnsForwarding
		}
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePrivateIpAddress != nil {
			enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
			gateway.EnablePrivateIpAddress = &enablePrivateIpAddress
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		gateway.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		gateway.ExtendedLocation = &extendedLocation
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayDefaultSite != nil {
			var gatewayDefaultSite1 SubResource_Status
			err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
			if err != nil {
				return err
			}
			gatewayDefaultSite := gatewayDefaultSite1
			gateway.GatewayDefaultSite = &gatewayDefaultSite
		}
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayType != nil {
			gatewayType := *typedInput.Properties.GatewayType
			gateway.GatewayType = &gatewayType
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		gateway.Id = &id
	}

	// Set property ‘InboundDnsForwardingEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InboundDnsForwardingEndpoint != nil {
			inboundDnsForwardingEndpoint := *typedInput.Properties.InboundDnsForwardingEndpoint
			gateway.InboundDnsForwardingEndpoint = &inboundDnsForwardingEndpoint
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 VirtualNetworkGatewayIPConfiguration_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.IpConfigurations = append(gateway.IpConfigurations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateway.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gateway.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			gateway.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			gateway.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 VirtualNetworkGatewaySku_Status
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			gateway.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateway.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			gateway.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		gateway.Type = &typeVar
	}

	// Set property ‘VNetExtendedLocationResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VNetExtendedLocationResourceId != nil {
			vNetExtendedLocationResourceId := *typedInput.Properties.VNetExtendedLocationResourceId
			gateway.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
		}
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnClientConfiguration != nil {
			var vpnClientConfiguration1 VpnClientConfiguration_Status
			err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
			if err != nil {
				return err
			}
			vpnClientConfiguration := vpnClientConfiguration1
			gateway.VpnClientConfiguration = &vpnClientConfiguration
		}
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnGatewayGeneration != nil {
			vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
			gateway.VpnGatewayGeneration = &vpnGatewayGeneration
		}
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnType != nil {
			vpnType := *typedInput.Properties.VpnType
			gateway.VpnType = &vpnType
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGateway_Status populates our VirtualNetworkGateway_Status from the provided source VirtualNetworkGateway_Status
func (gateway *VirtualNetworkGateway_Status) AssignPropertiesFromVirtualNetworkGateway_Status(source *v1alpha1api20201101storage.VirtualNetworkGateway_Status) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		gateway.ActiveActive = &activeActive
	} else {
		gateway.ActiveActive = nil
	}

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings_Status
		err := bgpSetting.AssignPropertiesFromBgpSettings_Status(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBgpSettings_Status() to populate field BgpSettings")
		}
		gateway.BgpSettings = &bgpSetting
	} else {
		gateway.BgpSettings = nil
	}

	// Conditions
	gateway.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace_Status
		err := customRoute.AssignPropertiesFromAddressSpace_Status(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace_Status() to populate field CustomRoutes")
		}
		gateway.CustomRoutes = &customRoute
	} else {
		gateway.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		gateway.EnableBgp = &enableBgp
	} else {
		gateway.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		gateway.EnableDnsForwarding = &enableDnsForwarding
	} else {
		gateway.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		gateway.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		gateway.EnablePrivateIpAddress = nil
	}

	// Etag
	gateway.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		gateway.ExtendedLocation = &extendedLocation
	} else {
		gateway.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource_Status
		err := gatewayDefaultSite.AssignPropertiesFromSubResource_Status(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field GatewayDefaultSite")
		}
		gateway.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		gateway.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewayPropertiesFormat_GatewayType_Status(*source.GatewayType)
		gateway.GatewayType = &gatewayType
	} else {
		gateway.GatewayType = nil
	}

	// Id
	gateway.Id = genruntime.ClonePointerToString(source.Id)

	// InboundDnsForwardingEndpoint
	gateway.InboundDnsForwardingEndpoint = genruntime.ClonePointerToString(source.InboundDnsForwardingEndpoint)

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]VirtualNetworkGatewayIPConfiguration_Status, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration VirtualNetworkGatewayIPConfiguration_Status
			err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Status(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Status() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		gateway.IpConfigurations = ipConfigurationList
	} else {
		gateway.IpConfigurations = nil
	}

	// Location
	gateway.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	gateway.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		gateway.ProvisioningState = &provisioningState
	} else {
		gateway.ProvisioningState = nil
	}

	// ResourceGuid
	gateway.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku_Status
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySku_Status() to populate field Sku")
		}
		gateway.Sku = &sku
	} else {
		gateway.Sku = nil
	}

	// Tags
	gateway.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	gateway.Type = genruntime.ClonePointerToString(source.Type)

	// VNetExtendedLocationResourceId
	gateway.VNetExtendedLocationResourceId = genruntime.ClonePointerToString(source.VNetExtendedLocationResourceId)

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VpnClientConfiguration_Status
		err := vpnClientConfiguration.AssignPropertiesFromVpnClientConfiguration_Status(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVpnClientConfiguration_Status() to populate field VpnClientConfiguration")
		}
		gateway.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		gateway.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Status(*source.VpnGatewayGeneration)
		gateway.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		gateway.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewayPropertiesFormat_VpnType_Status(*source.VpnType)
		gateway.VpnType = &vpnType
	} else {
		gateway.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGateway_Status populates the provided destination VirtualNetworkGateway_Status from our VirtualNetworkGateway_Status
func (gateway *VirtualNetworkGateway_Status) AssignPropertiesToVirtualNetworkGateway_Status(destination *v1alpha1api20201101storage.VirtualNetworkGateway_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if gateway.ActiveActive != nil {
		activeActive := *gateway.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// BgpSettings
	if gateway.BgpSettings != nil {
		var bgpSetting v1alpha1api20201101storage.BgpSettings_Status
		err := gateway.BgpSettings.AssignPropertiesToBgpSettings_Status(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBgpSettings_Status() to populate field BgpSettings")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(gateway.Conditions)

	// CustomRoutes
	if gateway.CustomRoutes != nil {
		var customRoute v1alpha1api20201101storage.AddressSpace_Status
		err := gateway.CustomRoutes.AssignPropertiesToAddressSpace_Status(&customRoute)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace_Status() to populate field CustomRoutes")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if gateway.EnableBgp != nil {
		enableBgp := *gateway.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if gateway.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateway.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if gateway.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateway.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(gateway.Etag)

	// ExtendedLocation
	if gateway.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := gateway.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if gateway.GatewayDefaultSite != nil {
		var gatewayDefaultSite v1alpha1api20201101storage.SubResource_Status
		err := gateway.GatewayDefaultSite.AssignPropertiesToSubResource_Status(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field GatewayDefaultSite")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if gateway.GatewayType != nil {
		gatewayType := string(*gateway.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(gateway.Id)

	// InboundDnsForwardingEndpoint
	destination.InboundDnsForwardingEndpoint = genruntime.ClonePointerToString(gateway.InboundDnsForwardingEndpoint)

	// IpConfigurations
	if gateway.IpConfigurations != nil {
		ipConfigurationList := make([]v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status, len(gateway.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range gateway.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status
			err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Status(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Status() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(gateway.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(gateway.Name)

	// ProvisioningState
	if gateway.ProvisioningState != nil {
		provisioningState := string(*gateway.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(gateway.ResourceGuid)

	// Sku
	if gateway.Sku != nil {
		var sku v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status
		err := gateway.Sku.AssignPropertiesToVirtualNetworkGatewaySku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateway.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(gateway.Type)

	// VNetExtendedLocationResourceId
	destination.VNetExtendedLocationResourceId = genruntime.ClonePointerToString(gateway.VNetExtendedLocationResourceId)

	// VpnClientConfiguration
	if gateway.VpnClientConfiguration != nil {
		var vpnClientConfiguration v1alpha1api20201101storage.VpnClientConfiguration_Status
		err := gateway.VpnClientConfiguration.AssignPropertiesToVpnClientConfiguration_Status(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVpnClientConfiguration_Status() to populate field VpnClientConfiguration")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if gateway.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*gateway.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if gateway.VpnType != nil {
		vpnType := string(*gateway.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGateways_SPEC struct {
	//ActiveActive: ActiveActive flag.
	ActiveActive *bool `json:"activeActive,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BgpSettings: Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings_Spec `json:"bgpSettings,omitempty"`

	//CustomRoutes: The reference to the address space resource which represents the
	//custom routes address space specified by the customer for virtual network
	//gateway and VpnClient.
	CustomRoutes *AddressSpace_Spec `json:"customRoutes,omitempty"`

	//EnableBgp: Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	//EnableDnsForwarding: Whether dns forwarding is enabled or not.
	EnableDnsForwarding *bool `json:"enableDnsForwarding,omitempty"`

	//EnablePrivateIpAddress: Whether private IP needs to be enabled on this gateway
	//for connections or not.
	EnablePrivateIpAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	//ExtendedLocation: The extended location of type local virtual network gateway.
	ExtendedLocation *ExtendedLocation_Spec `json:"extendedLocation,omitempty"`

	//GatewayDefaultSite: The reference to the LocalNetworkGateway resource which
	//represents local network site having default routes. Assign Null value in case
	//of removing existing default site setting.
	GatewayDefaultSite *SubResource_Spec `json:"gatewayDefaultSite,omitempty"`

	//GatewayType: The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewayPropertiesFormat_GatewayType_Spec `json:"gatewayType,omitempty"`

	//IpConfigurations: IP configurations for virtual network gateway.
	IpConfigurations []VirtualNetworkGatewayIPConfiguration_Spec `json:"ipConfigurations,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Sku: The reference to the VirtualNetworkGatewaySku resource which represents the
	//SKU selected for Virtual network gateway.
	Sku *VirtualNetworkGatewaySku_Spec `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//VNetExtendedLocationResourceReference: Customer vnet resource id.
	//VirtualNetworkGateway of type local gateway is associated with the customer vnet.
	VNetExtendedLocationResourceReference *genruntime.ResourceReference `armReference:"VNetExtendedLocationResourceId" json:"vNetExtendedLocationResourceReference,omitempty"`

	//VpnClientConfiguration: The reference to the VpnClientConfiguration resource
	//which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration_Spec `json:"vpnClientConfiguration,omitempty"`

	//VpnGatewayGeneration: The generation for this VirtualNetworkGateway. Must be
	//None if gatewayType is not VPN.
	VpnGatewayGeneration *VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Spec `json:"vpnGatewayGeneration,omitempty"`

	//VpnType: The type of this virtual network gateway.
	VpnType *VirtualNetworkGatewayPropertiesFormat_VpnType_Spec `json:"vpnType,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *VirtualNetworkGateways_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result VirtualNetworkGateways_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘ExtendedLocation’:
	if spec.ExtendedLocation != nil {
		extendedLocationARM, err := (*spec.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocation_SpecARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if spec.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*spec.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if spec.Location != nil {
		location := *spec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.ActiveActive != nil {
		activeActive := *spec.ActiveActive
		result.Properties.ActiveActive = &activeActive
	}
	if spec.BgpSettings != nil {
		bgpSettingsARM, err := (*spec.BgpSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bgpSettings := bgpSettingsARM.(BgpSettings_SpecARM)
		result.Properties.BgpSettings = &bgpSettings
	}
	if spec.CustomRoutes != nil {
		customRoutesARM, err := (*spec.CustomRoutes).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customRoutes := customRoutesARM.(AddressSpace_SpecARM)
		result.Properties.CustomRoutes = &customRoutes
	}
	if spec.EnableBgp != nil {
		enableBgp := *spec.EnableBgp
		result.Properties.EnableBgp = &enableBgp
	}
	if spec.EnableDnsForwarding != nil {
		enableDnsForwarding := *spec.EnableDnsForwarding
		result.Properties.EnableDnsForwarding = &enableDnsForwarding
	}
	if spec.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *spec.EnablePrivateIpAddress
		result.Properties.EnablePrivateIpAddress = &enablePrivateIpAddress
	}
	if spec.GatewayDefaultSite != nil {
		gatewayDefaultSiteARM, err := (*spec.GatewayDefaultSite).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		gatewayDefaultSite := gatewayDefaultSiteARM.(SubResource_SpecARM)
		result.Properties.GatewayDefaultSite = &gatewayDefaultSite
	}
	if spec.GatewayType != nil {
		gatewayType := *spec.GatewayType
		result.Properties.GatewayType = &gatewayType
	}
	for _, item := range spec.IpConfigurations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpConfigurations = append(result.Properties.IpConfigurations, itemARM.(VirtualNetworkGatewayIPConfiguration_SpecARM))
	}
	if spec.Sku != nil {
		skuARM, err := (*spec.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(VirtualNetworkGatewaySku_SpecARM)
		result.Properties.Sku = &sku
	}
	if spec.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*spec.VNetExtendedLocationResourceReference)
		if err != nil {
			return nil, err
		}
		vNetExtendedLocationResourceId := vNetExtendedLocationResourceIdARMID
		result.Properties.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
	}
	if spec.VpnClientConfiguration != nil {
		vpnClientConfigurationARM, err := (*spec.VpnClientConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vpnClientConfiguration := vpnClientConfigurationARM.(VpnClientConfiguration_SpecARM)
		result.Properties.VpnClientConfiguration = &vpnClientConfiguration
	}
	if spec.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := *spec.VpnGatewayGeneration
		result.Properties.VpnGatewayGeneration = &vpnGatewayGeneration
	}
	if spec.VpnType != nil {
		vpnType := *spec.VpnType
		result.Properties.VpnType = &vpnType
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *VirtualNetworkGateways_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *VirtualNetworkGateways_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_SPECARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties.ActiveActive != nil {
		activeActive := *typedInput.Properties.ActiveActive
		spec.ActiveActive = &activeActive
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties.BgpSettings != nil {
		var bgpSettings1 BgpSettings_Spec
		err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
		if err != nil {
			return err
		}
		bgpSettings := bgpSettings1
		spec.BgpSettings = &bgpSettings
	}

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties.CustomRoutes != nil {
		var customRoutes1 AddressSpace_Spec
		err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
		if err != nil {
			return err
		}
		customRoutes := customRoutes1
		spec.CustomRoutes = &customRoutes
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties.EnableBgp != nil {
		enableBgp := *typedInput.Properties.EnableBgp
		spec.EnableBgp = &enableBgp
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties.EnableDnsForwarding != nil {
		enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
		spec.EnableDnsForwarding = &enableDnsForwarding
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
		spec.EnablePrivateIpAddress = &enablePrivateIpAddress
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Spec
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		spec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties.GatewayDefaultSite != nil {
		var gatewayDefaultSite1 SubResource_Spec
		err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
		if err != nil {
			return err
		}
		gatewayDefaultSite := gatewayDefaultSite1
		spec.GatewayDefaultSite = &gatewayDefaultSite
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties.GatewayType != nil {
		gatewayType := *typedInput.Properties.GatewayType
		spec.GatewayType = &gatewayType
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	for _, item := range typedInput.Properties.IpConfigurations {
		var item1 VirtualNetworkGatewayIPConfiguration_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.IpConfigurations = append(spec.IpConfigurations, item1)
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		spec.Location = &location
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// no assignment for property ‘Reference’

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties.Sku != nil {
		var sku1 VirtualNetworkGatewaySku_Spec
		err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		spec.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// no assignment for property ‘VNetExtendedLocationResourceReference’

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties.VpnClientConfiguration != nil {
		var vpnClientConfiguration1 VpnClientConfiguration_Spec
		err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
		if err != nil {
			return err
		}
		vpnClientConfiguration := vpnClientConfiguration1
		spec.VpnClientConfiguration = &vpnClientConfiguration
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
		spec.VpnGatewayGeneration = &vpnGatewayGeneration
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties.VpnType != nil {
		vpnType := *typedInput.Properties.VpnType
		spec.VpnType = &vpnType
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworkGateways_SPEC{}

// ConvertSpecFrom populates our VirtualNetworkGateways_SPEC from the provided source
func (spec *VirtualNetworkGateways_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworkGateways_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromVirtualNetworkGateways_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworkGateways_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromVirtualNetworkGateways_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworkGateways_SPEC
func (spec *VirtualNetworkGateways_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworkGateways_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToVirtualNetworkGateways_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworkGateways_SPEC{}
	err := spec.AssignPropertiesToVirtualNetworkGateways_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworkGateways_SPEC populates our VirtualNetworkGateways_SPEC from the provided source VirtualNetworkGateways_SPEC
func (spec *VirtualNetworkGateways_SPEC) AssignPropertiesFromVirtualNetworkGateways_SPEC(source *v1alpha1api20201101storage.VirtualNetworkGateways_SPEC) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		spec.ActiveActive = &activeActive
	} else {
		spec.ActiveActive = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings_Spec
		err := bgpSetting.AssignPropertiesFromBgpSettings_Spec(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBgpSettings_Spec() to populate field BgpSettings")
		}
		spec.BgpSettings = &bgpSetting
	} else {
		spec.BgpSettings = nil
	}

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace_Spec
		err := customRoute.AssignPropertiesFromAddressSpace_Spec(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace_Spec() to populate field CustomRoutes")
		}
		spec.CustomRoutes = &customRoute
	} else {
		spec.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		spec.EnableBgp = &enableBgp
	} else {
		spec.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		spec.EnableDnsForwarding = &enableDnsForwarding
	} else {
		spec.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		spec.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		spec.EnablePrivateIpAddress = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Spec
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Spec(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		spec.ExtendedLocation = &extendedLocation
	} else {
		spec.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource_Spec
		err := gatewayDefaultSite.AssignPropertiesFromSubResource_Spec(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Spec() to populate field GatewayDefaultSite")
		}
		spec.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		spec.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewayPropertiesFormat_GatewayType_Spec(*source.GatewayType)
		spec.GatewayType = &gatewayType
	} else {
		spec.GatewayType = nil
	}

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]VirtualNetworkGatewayIPConfiguration_Spec, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration VirtualNetworkGatewayIPConfiguration_Spec
			err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Spec(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Spec() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		spec.IpConfigurations = ipConfigurationList
	} else {
		spec.IpConfigurations = nil
	}

	// Location
	spec.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	spec.Owner = source.Owner.Copy()

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		spec.Reference = &reference
	} else {
		spec.Reference = nil
	}

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku_Spec
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySku_Spec(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySku_Spec() to populate field Sku")
		}
		spec.Sku = &sku
	} else {
		spec.Sku = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VNetExtendedLocationResourceReference
	if source.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := source.VNetExtendedLocationResourceReference.Copy()
		spec.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		spec.VNetExtendedLocationResourceReference = nil
	}

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VpnClientConfiguration_Spec
		err := vpnClientConfiguration.AssignPropertiesFromVpnClientConfiguration_Spec(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVpnClientConfiguration_Spec() to populate field VpnClientConfiguration")
		}
		spec.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		spec.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Spec(*source.VpnGatewayGeneration)
		spec.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		spec.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewayPropertiesFormat_VpnType_Spec(*source.VpnType)
		spec.VpnType = &vpnType
	} else {
		spec.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGateways_SPEC populates the provided destination VirtualNetworkGateways_SPEC from our VirtualNetworkGateways_SPEC
func (spec *VirtualNetworkGateways_SPEC) AssignPropertiesToVirtualNetworkGateways_SPEC(destination *v1alpha1api20201101storage.VirtualNetworkGateways_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if spec.ActiveActive != nil {
		activeActive := *spec.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// BgpSettings
	if spec.BgpSettings != nil {
		var bgpSetting v1alpha1api20201101storage.BgpSettings_Spec
		err := spec.BgpSettings.AssignPropertiesToBgpSettings_Spec(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBgpSettings_Spec() to populate field BgpSettings")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// CustomRoutes
	if spec.CustomRoutes != nil {
		var customRoute v1alpha1api20201101storage.AddressSpace_Spec
		err := spec.CustomRoutes.AssignPropertiesToAddressSpace_Spec(&customRoute)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace_Spec() to populate field CustomRoutes")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if spec.EnableBgp != nil {
		enableBgp := *spec.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if spec.EnableDnsForwarding != nil {
		enableDnsForwarding := *spec.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if spec.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *spec.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// ExtendedLocation
	if spec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Spec
		err := spec.ExtendedLocation.AssignPropertiesToExtendedLocation_Spec(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if spec.GatewayDefaultSite != nil {
		var gatewayDefaultSite v1alpha1api20201101storage.SubResource_Spec
		err := spec.GatewayDefaultSite.AssignPropertiesToSubResource_Spec(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Spec() to populate field GatewayDefaultSite")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if spec.GatewayType != nil {
		gatewayType := string(*spec.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// IpConfigurations
	if spec.IpConfigurations != nil {
		ipConfigurationList := make([]v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Spec, len(spec.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range spec.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Spec
			err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Spec(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Spec() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(spec.Location)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// Reference
	if spec.Reference != nil {
		reference := spec.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Sku
	if spec.Sku != nil {
		var sku v1alpha1api20201101storage.VirtualNetworkGatewaySku_Spec
		err := spec.Sku.AssignPropertiesToVirtualNetworkGatewaySku_Spec(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySku_Spec() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// VNetExtendedLocationResourceReference
	if spec.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := spec.VNetExtendedLocationResourceReference.Copy()
		destination.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		destination.VNetExtendedLocationResourceReference = nil
	}

	// VpnClientConfiguration
	if spec.VpnClientConfiguration != nil {
		var vpnClientConfiguration v1alpha1api20201101storage.VpnClientConfiguration_Spec
		err := spec.VpnClientConfiguration.AssignPropertiesToVpnClientConfiguration_Spec(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVpnClientConfiguration_Spec() to populate field VpnClientConfiguration")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if spec.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*spec.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if spec.VpnType != nil {
		vpnType := string(*spec.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *VirtualNetworkGateways_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *VirtualNetworkGateways_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type BgpSettings_Spec struct {
	//Asn: The BGP speaker's ASN.
	Asn *uint32 `json:"asn,omitempty"`

	//BgpPeeringAddress: The BGP peering address and BGP identifier of this BGP
	//speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	//BgpPeeringAddresses: BGP peering address with IP configuration ID for virtual
	//network gateway.
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress_Spec `json:"bgpPeeringAddresses,omitempty"`

	//PeerWeight: The weight added to routes learned from this BGP speaker.
	PeerWeight *int `json:"peerWeight,omitempty"`
}

var _ genruntime.ARMTransformer = &BgpSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *BgpSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result BgpSettings_SpecARM

	// Set property ‘Asn’:
	if settings.Asn != nil {
		asn := *settings.Asn
		result.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if settings.BgpPeeringAddress != nil {
		bgpPeeringAddress := *settings.BgpPeeringAddress
		result.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range settings.BgpPeeringAddresses {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.BgpPeeringAddresses = append(result.BgpPeeringAddresses, itemARM.(IPConfigurationBgpPeeringAddress_SpecARM))
	}

	// Set property ‘PeerWeight’:
	if settings.PeerWeight != nil {
		peerWeight := *settings.PeerWeight
		result.PeerWeight = &peerWeight
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *BgpSettings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BgpSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *BgpSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		settings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		settings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.BgpPeeringAddresses = append(settings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		settings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettings_Spec populates our BgpSettings_Spec from the provided source BgpSettings_Spec
func (settings *BgpSettings_Spec) AssignPropertiesFromBgpSettings_Spec(source *v1alpha1api20201101storage.BgpSettings_Spec) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		settings.Asn = &asn
	} else {
		settings.Asn = nil
	}

	// BgpPeeringAddress
	settings.BgpPeeringAddress = genruntime.ClonePointerToString(source.BgpPeeringAddress)

	// BgpPeeringAddresses
	if source.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress_Spec, len(source.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress IPConfigurationBgpPeeringAddress_Spec
			err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddress_Spec(&bgpPeeringAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationBgpPeeringAddress_Spec() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		settings.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		settings.BgpPeeringAddresses = nil
	}

	// PeerWeight
	settings.PeerWeight = genruntime.ClonePointerToInt(source.PeerWeight)

	// No error
	return nil
}

// AssignPropertiesToBgpSettings_Spec populates the provided destination BgpSettings_Spec from our BgpSettings_Spec
func (settings *BgpSettings_Spec) AssignPropertiesToBgpSettings_Spec(destination *v1alpha1api20201101storage.BgpSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if settings.Asn != nil {
		asn := *settings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	destination.BgpPeeringAddress = genruntime.ClonePointerToString(settings.BgpPeeringAddress)

	// BgpPeeringAddresses
	if settings.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Spec, len(settings.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range settings.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Spec
			err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddress_Spec(&bgpPeeringAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationBgpPeeringAddress_Spec() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		destination.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		destination.BgpPeeringAddresses = nil
	}

	// PeerWeight
	destination.PeerWeight = genruntime.ClonePointerToInt(settings.PeerWeight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BgpSettings_Status struct {
	//Asn: The BGP speaker's ASN.
	Asn *uint32 `json:"asn,omitempty"`

	//BgpPeeringAddress: The BGP peering address and BGP identifier of this BGP
	//speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	//BgpPeeringAddresses: BGP peering address with IP configuration ID for virtual
	//network gateway.
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress_Status `json:"bgpPeeringAddresses,omitempty"`

	//PeerWeight: The weight added to routes learned from this BGP speaker.
	PeerWeight *int `json:"peerWeight,omitempty"`
}

var _ genruntime.FromARMConverter = &BgpSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *BgpSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BgpSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *BgpSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		settings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		settings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.BgpPeeringAddresses = append(settings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		settings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettings_Status populates our BgpSettings_Status from the provided source BgpSettings_Status
func (settings *BgpSettings_Status) AssignPropertiesFromBgpSettings_Status(source *v1alpha1api20201101storage.BgpSettings_Status) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		settings.Asn = &asn
	} else {
		settings.Asn = nil
	}

	// BgpPeeringAddress
	settings.BgpPeeringAddress = genruntime.ClonePointerToString(source.BgpPeeringAddress)

	// BgpPeeringAddresses
	if source.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress_Status, len(source.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress IPConfigurationBgpPeeringAddress_Status
			err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddress_Status(&bgpPeeringAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationBgpPeeringAddress_Status() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		settings.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		settings.BgpPeeringAddresses = nil
	}

	// PeerWeight
	settings.PeerWeight = genruntime.ClonePointerToInt(source.PeerWeight)

	// No error
	return nil
}

// AssignPropertiesToBgpSettings_Status populates the provided destination BgpSettings_Status from our BgpSettings_Status
func (settings *BgpSettings_Status) AssignPropertiesToBgpSettings_Status(destination *v1alpha1api20201101storage.BgpSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if settings.Asn != nil {
		asn := *settings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	destination.BgpPeeringAddress = genruntime.ClonePointerToString(settings.BgpPeeringAddress)

	// BgpPeeringAddresses
	if settings.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status, len(settings.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range settings.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status
			err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddress_Status(&bgpPeeringAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationBgpPeeringAddress_Status() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		destination.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		destination.BgpPeeringAddresses = nil
	}

	// PeerWeight
	destination.PeerWeight = genruntime.ClonePointerToInt(settings.PeerWeight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGatewayIPConfiguration_Spec struct {
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_Spec `json:"privateIPAllocationMethod,omitempty"`

	//PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *SubResource_Spec `json:"publicIPAddress,omitempty"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Subnet: The reference to the subnet resource.
	Subnet *SubResource_Spec `json:"subnet,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGatewayIPConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *VirtualNetworkGatewayIPConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result VirtualNetworkGatewayIPConfiguration_SpecARM

	// Set property ‘Id’:
	if configuration.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*configuration.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Name’:
	if configuration.Name != nil {
		name := *configuration.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if configuration.PrivateIPAllocationMethod != nil ||
		configuration.PublicIPAddress != nil ||
		configuration.Subnet != nil {
		result.Properties = &VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM{}
	}
	if configuration.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := *configuration.PrivateIPAllocationMethod
		result.Properties.PrivateIPAllocationMethod = &privateIPAllocationMethod
	}
	if configuration.PublicIPAddress != nil {
		publicIPAddressARM, err := (*configuration.PublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicIPAddress := publicIPAddressARM.(SubResource_SpecARM)
		result.Properties.PublicIPAddress = &publicIPAddress
	}
	if configuration.Subnet != nil {
		subnetARM, err := (*configuration.Subnet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		subnet := subnetARM.(SubResource_SpecARM)
		result.Properties.Subnet = &subnet
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VirtualNetworkGatewayIPConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewayIPConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VirtualNetworkGatewayIPConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewayIPConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewayIPConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource_Spec
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			configuration.PublicIPAddress = &publicIPAddress
		}
	}

	// no assignment for property ‘Reference’

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_Spec
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Spec populates our VirtualNetworkGatewayIPConfiguration_Spec from the provided source VirtualNetworkGatewayIPConfiguration_Spec
func (configuration *VirtualNetworkGatewayIPConfiguration_Spec) AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Spec(source *v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Spec) error {

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_Spec(*source.PrivateIPAllocationMethod)
		configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		configuration.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource_Spec
		err := publicIPAddress.AssignPropertiesFromSubResource_Spec(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Spec() to populate field PublicIPAddress")
		}
		configuration.PublicIPAddress = &publicIPAddress
	} else {
		configuration.PublicIPAddress = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		configuration.Reference = &reference
	} else {
		configuration.Reference = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_Spec
		err := subnet.AssignPropertiesFromSubResource_Spec(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Spec() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Spec populates the provided destination VirtualNetworkGatewayIPConfiguration_Spec from our VirtualNetworkGatewayIPConfiguration_Spec
func (configuration *VirtualNetworkGatewayIPConfiguration_Spec) AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Spec(destination *v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// PrivateIPAllocationMethod
	if configuration.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*configuration.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if configuration.PublicIPAddress != nil {
		var publicIPAddress v1alpha1api20201101storage.SubResource_Spec
		err := configuration.PublicIPAddress.AssignPropertiesToSubResource_Spec(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Spec() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Reference
	if configuration.Reference != nil {
		reference := configuration.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Subnet
	if configuration.Subnet != nil {
		var subnet v1alpha1api20201101storage.SubResource_Spec
		err := configuration.Subnet.AssignPropertiesToSubResource_Spec(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Spec() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGatewayIPConfiguration_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAddress: Private IP Address for this gateway.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_Status `json:"privateIPAllocationMethod,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network gateway IP
	//configuration resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *SubResource_Status `json:"publicIPAddress,omitempty"`

	//Subnet: The reference to the subnet resource.
	Subnet *SubResource_Status `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewayIPConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewayIPConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewayIPConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewayIPConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		configuration.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		configuration.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			configuration.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			configuration.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource_Status
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			configuration.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_Status
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Status populates our VirtualNetworkGatewayIPConfiguration_Status from the provided source VirtualNetworkGatewayIPConfiguration_Status
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) AssignPropertiesFromVirtualNetworkGatewayIPConfiguration_Status(source *v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status) error {

	// Etag
	configuration.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	configuration.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_Status(*source.PrivateIPAllocationMethod)
		configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		configuration.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		configuration.ProvisioningState = &provisioningState
	} else {
		configuration.ProvisioningState = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource_Status
		err := publicIPAddress.AssignPropertiesFromSubResource_Status(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field PublicIPAddress")
		}
		configuration.PublicIPAddress = &publicIPAddress
	} else {
		configuration.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_Status
		err := subnet.AssignPropertiesFromSubResource_Status(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Status populates the provided destination VirtualNetworkGatewayIPConfiguration_Status from our VirtualNetworkGatewayIPConfiguration_Status
func (configuration *VirtualNetworkGatewayIPConfiguration_Status) AssignPropertiesToVirtualNetworkGatewayIPConfiguration_Status(destination *v1alpha1api20201101storage.VirtualNetworkGatewayIPConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(configuration.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(configuration.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if configuration.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*configuration.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if configuration.ProvisioningState != nil {
		provisioningState := string(*configuration.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddress
	if configuration.PublicIPAddress != nil {
		var publicIPAddress v1alpha1api20201101storage.SubResource_Status
		err := configuration.PublicIPAddress.AssignPropertiesToSubResource_Status(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if configuration.Subnet != nil {
		var subnet v1alpha1api20201101storage.SubResource_Status
		err := configuration.Subnet.AssignPropertiesToSubResource_Status(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ExpressRoute","LocalGateway","Vpn"}
type VirtualNetworkGatewayPropertiesFormat_GatewayType_Spec string

const (
	VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecExpressRoute = VirtualNetworkGatewayPropertiesFormat_GatewayType_Spec("ExpressRoute")
	VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecLocalGateway = VirtualNetworkGatewayPropertiesFormat_GatewayType_Spec("LocalGateway")
	VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecVpn          = VirtualNetworkGatewayPropertiesFormat_GatewayType_Spec("Vpn")
)

type VirtualNetworkGatewayPropertiesFormat_GatewayType_Status string

const (
	VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusExpressRoute = VirtualNetworkGatewayPropertiesFormat_GatewayType_Status("ExpressRoute")
	VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusLocalGateway = VirtualNetworkGatewayPropertiesFormat_GatewayType_Status("LocalGateway")
	VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusVpn          = VirtualNetworkGatewayPropertiesFormat_GatewayType_Status("Vpn")
)

// +kubebuilder:validation:Enum={"Generation1","Generation2","None"}
type VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Spec string

const (
	VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecGeneration1 = VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Spec("Generation1")
	VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecGeneration2 = VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Spec("Generation2")
	VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecNone        = VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Spec("None")
)

type VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Status string

const (
	VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusGeneration1 = VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Status("Generation1")
	VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusGeneration2 = VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Status("Generation2")
	VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusNone        = VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_Status("None")
)

// +kubebuilder:validation:Enum={"PolicyBased","RouteBased"}
type VirtualNetworkGatewayPropertiesFormat_VpnType_Spec string

const (
	VirtualNetworkGatewayPropertiesFormat_VpnType_SpecPolicyBased = VirtualNetworkGatewayPropertiesFormat_VpnType_Spec("PolicyBased")
	VirtualNetworkGatewayPropertiesFormat_VpnType_SpecRouteBased  = VirtualNetworkGatewayPropertiesFormat_VpnType_Spec("RouteBased")
)

type VirtualNetworkGatewayPropertiesFormat_VpnType_Status string

const (
	VirtualNetworkGatewayPropertiesFormat_VpnType_StatusPolicyBased = VirtualNetworkGatewayPropertiesFormat_VpnType_Status("PolicyBased")
	VirtualNetworkGatewayPropertiesFormat_VpnType_StatusRouteBased  = VirtualNetworkGatewayPropertiesFormat_VpnType_Status("RouteBased")
)

type VirtualNetworkGatewaySku_Spec struct {
	//Name: Gateway SKU name.
	Name *VirtualNetworkGatewaySku_Name_Spec `json:"name,omitempty"`

	//Tier: Gateway SKU tier.
	Tier *VirtualNetworkGatewaySku_Tier_Spec `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGatewaySku_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gatewaySku *VirtualNetworkGatewaySku_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gatewaySku == nil {
		return nil, nil
	}
	var result VirtualNetworkGatewaySku_SpecARM

	// Set property ‘Name’:
	if gatewaySku.Name != nil {
		name := *gatewaySku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if gatewaySku.Tier != nil {
		tier := *gatewaySku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *VirtualNetworkGatewaySku_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewaySku_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *VirtualNetworkGatewaySku_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySku_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySku_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		gatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySku_Spec populates our VirtualNetworkGatewaySku_Spec from the provided source VirtualNetworkGatewaySku_Spec
func (gatewaySku *VirtualNetworkGatewaySku_Spec) AssignPropertiesFromVirtualNetworkGatewaySku_Spec(source *v1alpha1api20201101storage.VirtualNetworkGatewaySku_Spec) error {

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySku_Name_Spec(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySku_Tier_Spec(*source.Tier)
		gatewaySku.Tier = &tier
	} else {
		gatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySku_Spec populates the provided destination VirtualNetworkGatewaySku_Spec from our VirtualNetworkGatewaySku_Spec
func (gatewaySku *VirtualNetworkGatewaySku_Spec) AssignPropertiesToVirtualNetworkGatewaySku_Spec(destination *v1alpha1api20201101storage.VirtualNetworkGatewaySku_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if gatewaySku.Tier != nil {
		tier := string(*gatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGatewaySku_Status struct {
	//Capacity: The capacity.
	Capacity *int `json:"capacity,omitempty"`

	//Name: Gateway SKU name.
	Name *VirtualNetworkGatewaySku_Name_Status `json:"name,omitempty"`

	//Tier: Gateway SKU tier.
	Tier *VirtualNetworkGatewaySku_Tier_Status `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewaySku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *VirtualNetworkGatewaySku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewaySku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *VirtualNetworkGatewaySku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		gatewaySku.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		gatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySku_Status populates our VirtualNetworkGatewaySku_Status from the provided source VirtualNetworkGatewaySku_Status
func (gatewaySku *VirtualNetworkGatewaySku_Status) AssignPropertiesFromVirtualNetworkGatewaySku_Status(source *v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status) error {

	// Capacity
	gatewaySku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySku_Name_Status(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySku_Tier_Status(*source.Tier)
		gatewaySku.Tier = &tier
	} else {
		gatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySku_Status populates the provided destination VirtualNetworkGatewaySku_Status from our VirtualNetworkGatewaySku_Status
func (gatewaySku *VirtualNetworkGatewaySku_Status) AssignPropertiesToVirtualNetworkGatewaySku_Status(destination *v1alpha1api20201101storage.VirtualNetworkGatewaySku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(gatewaySku.Capacity)

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if gatewaySku.Tier != nil {
		tier := string(*gatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientConfiguration_Spec struct {
	//AadAudience: The AADAudience property of the VirtualNetworkGateway resource for
	//vpn client connection used for AAD authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	//AadIssuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	//AadTenant: The AADTenant property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	//RadiusServerAddress: The radius server address property of the
	//VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	//RadiusServerSecret: The radius secret property of the VirtualNetworkGateway
	//resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	//RadiusServers: The radiusServers property for multiple radius server
	//configuration.
	RadiusServers []RadiusServer_Spec `json:"radiusServers,omitempty"`

	//VpnAuthenticationTypes: VPN authentication types for the virtual network
	//gateway..
	VpnAuthenticationTypes []VpnClientConfiguration_VpnAuthenticationTypes_Spec `json:"vpnAuthenticationTypes,omitempty"`

	//VpnClientAddressPool: The reference to the address space resource which
	//represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace_Spec `json:"vpnClientAddressPool,omitempty"`

	//VpnClientIpsecPolicies: VpnClientIpsecPolicies for virtual network gateway P2S
	//client.
	VpnClientIpsecPolicies []IpsecPolicy_Spec `json:"vpnClientIpsecPolicies,omitempty"`

	//VpnClientProtocols: VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols []VpnClientConfiguration_VpnClientProtocols_Spec `json:"vpnClientProtocols,omitempty"`

	//VpnClientRevokedCertificates: VpnClientRevokedCertificate for Virtual network
	//gateway.
	VpnClientRevokedCertificates []VpnClientRevokedCertificate_Spec `json:"vpnClientRevokedCertificates,omitempty"`

	//VpnClientRootCertificates: VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VpnClientRootCertificate_Spec `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.ARMTransformer = &VpnClientConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *VpnClientConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result VpnClientConfiguration_SpecARM

	// Set property ‘AadAudience’:
	if configuration.AadAudience != nil {
		aadAudience := *configuration.AadAudience
		result.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if configuration.AadIssuer != nil {
		aadIssuer := *configuration.AadIssuer
		result.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if configuration.AadTenant != nil {
		aadTenant := *configuration.AadTenant
		result.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if configuration.RadiusServerAddress != nil {
		radiusServerAddress := *configuration.RadiusServerAddress
		result.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if configuration.RadiusServerSecret != nil {
		radiusServerSecret := *configuration.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range configuration.RadiusServers {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.RadiusServers = append(result.RadiusServers, itemARM.(RadiusServer_SpecARM))
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range configuration.VpnAuthenticationTypes {
		result.VpnAuthenticationTypes = append(result.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if configuration.VpnClientAddressPool != nil {
		vpnClientAddressPoolARM, err := (*configuration.VpnClientAddressPool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vpnClientAddressPool := vpnClientAddressPoolARM.(AddressSpace_SpecARM)
		result.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range configuration.VpnClientIpsecPolicies {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientIpsecPolicies = append(result.VpnClientIpsecPolicies, itemARM.(IpsecPolicy_SpecARM))
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range configuration.VpnClientProtocols {
		result.VpnClientProtocols = append(result.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range configuration.VpnClientRevokedCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientRevokedCertificates = append(result.VpnClientRevokedCertificates, itemARM.(VpnClientRevokedCertificate_SpecARM))
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range configuration.VpnClientRootCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientRootCertificates = append(result.VpnClientRootCertificates, itemARM.(VpnClientRootCertificate_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VpnClientConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VpnClientConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		configuration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		configuration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		configuration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		configuration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		configuration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.RadiusServers = append(configuration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		configuration.VpnAuthenticationTypes = append(configuration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace_Spec
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientIpsecPolicies = append(configuration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		configuration.VpnClientProtocols = append(configuration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VpnClientRevokedCertificate_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRevokedCertificates = append(configuration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VpnClientRootCertificate_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRootCertificates = append(configuration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientConfiguration_Spec populates our VpnClientConfiguration_Spec from the provided source VpnClientConfiguration_Spec
func (configuration *VpnClientConfiguration_Spec) AssignPropertiesFromVpnClientConfiguration_Spec(source *v1alpha1api20201101storage.VpnClientConfiguration_Spec) error {

	// AadAudience
	configuration.AadAudience = genruntime.ClonePointerToString(source.AadAudience)

	// AadIssuer
	configuration.AadIssuer = genruntime.ClonePointerToString(source.AadIssuer)

	// AadTenant
	configuration.AadTenant = genruntime.ClonePointerToString(source.AadTenant)

	// RadiusServerAddress
	configuration.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerSecret
	configuration.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// RadiusServers
	if source.RadiusServers != nil {
		radiusServerList := make([]RadiusServer_Spec, len(source.RadiusServers))
		for radiusServerIndex, radiusServerItem := range source.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer RadiusServer_Spec
			err := radiusServer.AssignPropertiesFromRadiusServer_Spec(&radiusServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRadiusServer_Spec() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		configuration.RadiusServers = radiusServerList
	} else {
		configuration.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if source.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]VpnClientConfiguration_VpnAuthenticationTypes_Spec, len(source.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VpnClientConfiguration_VpnAuthenticationTypes_Spec(vpnAuthenticationTypeItem)
		}
		configuration.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		configuration.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace_Spec
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpace_Spec(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace_Spec() to populate field VpnClientAddressPool")
		}
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		configuration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if source.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]IpsecPolicy_Spec, len(source.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy IpsecPolicy_Spec
			err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicy_Spec(&vpnClientIpsecPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpsecPolicy_Spec() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		configuration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		configuration.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if source.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]VpnClientConfiguration_VpnClientProtocols_Spec, len(source.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = VpnClientConfiguration_VpnClientProtocols_Spec(vpnClientProtocolItem)
		}
		configuration.VpnClientProtocols = vpnClientProtocolList
	} else {
		configuration.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if source.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]VpnClientRevokedCertificate_Spec, len(source.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate VpnClientRevokedCertificate_Spec
			err := vpnClientRevokedCertificate.AssignPropertiesFromVpnClientRevokedCertificate_Spec(&vpnClientRevokedCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRevokedCertificate_Spec() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		configuration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		configuration.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if source.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]VpnClientRootCertificate_Spec, len(source.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate VpnClientRootCertificate_Spec
			err := vpnClientRootCertificate.AssignPropertiesFromVpnClientRootCertificate_Spec(&vpnClientRootCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRootCertificate_Spec() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		configuration.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		configuration.VpnClientRootCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientConfiguration_Spec populates the provided destination VpnClientConfiguration_Spec from our VpnClientConfiguration_Spec
func (configuration *VpnClientConfiguration_Spec) AssignPropertiesToVpnClientConfiguration_Spec(destination *v1alpha1api20201101storage.VpnClientConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	destination.AadAudience = genruntime.ClonePointerToString(configuration.AadAudience)

	// AadIssuer
	destination.AadIssuer = genruntime.ClonePointerToString(configuration.AadIssuer)

	// AadTenant
	destination.AadTenant = genruntime.ClonePointerToString(configuration.AadTenant)

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(configuration.RadiusServerAddress)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(configuration.RadiusServerSecret)

	// RadiusServers
	if configuration.RadiusServers != nil {
		radiusServerList := make([]v1alpha1api20201101storage.RadiusServer_Spec, len(configuration.RadiusServers))
		for radiusServerIndex, radiusServerItem := range configuration.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer v1alpha1api20201101storage.RadiusServer_Spec
			err := radiusServerItem.AssignPropertiesToRadiusServer_Spec(&radiusServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRadiusServer_Spec() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		destination.RadiusServers = radiusServerList
	} else {
		destination.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if configuration.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]string, len(configuration.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range configuration.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
		}
		destination.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		destination.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if configuration.VpnClientAddressPool != nil {
		var vpnClientAddressPool v1alpha1api20201101storage.AddressSpace_Spec
		err := configuration.VpnClientAddressPool.AssignPropertiesToAddressSpace_Spec(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace_Spec() to populate field VpnClientAddressPool")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if configuration.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]v1alpha1api20201101storage.IpsecPolicy_Spec, len(configuration.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range configuration.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy v1alpha1api20201101storage.IpsecPolicy_Spec
			err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicy_Spec(&vpnClientIpsecPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpsecPolicy_Spec() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		destination.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if configuration.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]string, len(configuration.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range configuration.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
		}
		destination.VpnClientProtocols = vpnClientProtocolList
	} else {
		destination.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if configuration.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]v1alpha1api20201101storage.VpnClientRevokedCertificate_Spec, len(configuration.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range configuration.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate v1alpha1api20201101storage.VpnClientRevokedCertificate_Spec
			err := vpnClientRevokedCertificateItem.AssignPropertiesToVpnClientRevokedCertificate_Spec(&vpnClientRevokedCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRevokedCertificate_Spec() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		destination.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if configuration.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]v1alpha1api20201101storage.VpnClientRootCertificate_Spec, len(configuration.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range configuration.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate v1alpha1api20201101storage.VpnClientRootCertificate_Spec
			err := vpnClientRootCertificateItem.AssignPropertiesToVpnClientRootCertificate_Spec(&vpnClientRootCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRootCertificate_Spec() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		destination.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		destination.VpnClientRootCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientConfiguration_Status struct {
	//AadAudience: The AADAudience property of the VirtualNetworkGateway resource for
	//vpn client connection used for AAD authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	//AadIssuer: The AADIssuer property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	//AadTenant: The AADTenant property of the VirtualNetworkGateway resource for vpn
	//client connection used for AAD authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	//RadiusServerAddress: The radius server address property of the
	//VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	//RadiusServerSecret: The radius secret property of the VirtualNetworkGateway
	//resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	//RadiusServers: The radiusServers property for multiple radius server
	//configuration.
	RadiusServers []RadiusServer_Status `json:"radiusServers,omitempty"`

	//VpnAuthenticationTypes: VPN authentication types for the virtual network
	//gateway..
	VpnAuthenticationTypes []VpnClientConfiguration_VpnAuthenticationTypes_Status `json:"vpnAuthenticationTypes,omitempty"`

	//VpnClientAddressPool: The reference to the address space resource which
	//represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace_Status `json:"vpnClientAddressPool,omitempty"`

	//VpnClientIpsecPolicies: VpnClientIpsecPolicies for virtual network gateway P2S
	//client.
	VpnClientIpsecPolicies []IpsecPolicy_Status `json:"vpnClientIpsecPolicies,omitempty"`

	//VpnClientProtocols: VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols []VpnClientConfiguration_VpnClientProtocols_Status `json:"vpnClientProtocols,omitempty"`

	//VpnClientRevokedCertificates: VpnClientRevokedCertificate for Virtual network
	//gateway.
	VpnClientRevokedCertificates []VpnClientRevokedCertificate_Status `json:"vpnClientRevokedCertificates,omitempty"`

	//VpnClientRootCertificates: VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates []VpnClientRootCertificate_Status `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VpnClientConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VpnClientConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		configuration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		configuration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		configuration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		configuration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		configuration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.RadiusServers = append(configuration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		configuration.VpnAuthenticationTypes = append(configuration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace_Status
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientIpsecPolicies = append(configuration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		configuration.VpnClientProtocols = append(configuration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VpnClientRevokedCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRevokedCertificates = append(configuration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VpnClientRootCertificate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRootCertificates = append(configuration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientConfiguration_Status populates our VpnClientConfiguration_Status from the provided source VpnClientConfiguration_Status
func (configuration *VpnClientConfiguration_Status) AssignPropertiesFromVpnClientConfiguration_Status(source *v1alpha1api20201101storage.VpnClientConfiguration_Status) error {

	// AadAudience
	configuration.AadAudience = genruntime.ClonePointerToString(source.AadAudience)

	// AadIssuer
	configuration.AadIssuer = genruntime.ClonePointerToString(source.AadIssuer)

	// AadTenant
	configuration.AadTenant = genruntime.ClonePointerToString(source.AadTenant)

	// RadiusServerAddress
	configuration.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerSecret
	configuration.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// RadiusServers
	if source.RadiusServers != nil {
		radiusServerList := make([]RadiusServer_Status, len(source.RadiusServers))
		for radiusServerIndex, radiusServerItem := range source.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer RadiusServer_Status
			err := radiusServer.AssignPropertiesFromRadiusServer_Status(&radiusServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRadiusServer_Status() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		configuration.RadiusServers = radiusServerList
	} else {
		configuration.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if source.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]VpnClientConfiguration_VpnAuthenticationTypes_Status, len(source.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VpnClientConfiguration_VpnAuthenticationTypes_Status(vpnAuthenticationTypeItem)
		}
		configuration.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		configuration.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace_Status
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpace_Status(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace_Status() to populate field VpnClientAddressPool")
		}
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		configuration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if source.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]IpsecPolicy_Status, len(source.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy IpsecPolicy_Status
			err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicy_Status(&vpnClientIpsecPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpsecPolicy_Status() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		configuration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		configuration.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if source.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]VpnClientConfiguration_VpnClientProtocols_Status, len(source.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = VpnClientConfiguration_VpnClientProtocols_Status(vpnClientProtocolItem)
		}
		configuration.VpnClientProtocols = vpnClientProtocolList
	} else {
		configuration.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if source.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]VpnClientRevokedCertificate_Status, len(source.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate VpnClientRevokedCertificate_Status
			err := vpnClientRevokedCertificate.AssignPropertiesFromVpnClientRevokedCertificate_Status(&vpnClientRevokedCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRevokedCertificate_Status() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		configuration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		configuration.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if source.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]VpnClientRootCertificate_Status, len(source.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate VpnClientRootCertificate_Status
			err := vpnClientRootCertificate.AssignPropertiesFromVpnClientRootCertificate_Status(&vpnClientRootCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRootCertificate_Status() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		configuration.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		configuration.VpnClientRootCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientConfiguration_Status populates the provided destination VpnClientConfiguration_Status from our VpnClientConfiguration_Status
func (configuration *VpnClientConfiguration_Status) AssignPropertiesToVpnClientConfiguration_Status(destination *v1alpha1api20201101storage.VpnClientConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	destination.AadAudience = genruntime.ClonePointerToString(configuration.AadAudience)

	// AadIssuer
	destination.AadIssuer = genruntime.ClonePointerToString(configuration.AadIssuer)

	// AadTenant
	destination.AadTenant = genruntime.ClonePointerToString(configuration.AadTenant)

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(configuration.RadiusServerAddress)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(configuration.RadiusServerSecret)

	// RadiusServers
	if configuration.RadiusServers != nil {
		radiusServerList := make([]v1alpha1api20201101storage.RadiusServer_Status, len(configuration.RadiusServers))
		for radiusServerIndex, radiusServerItem := range configuration.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer v1alpha1api20201101storage.RadiusServer_Status
			err := radiusServerItem.AssignPropertiesToRadiusServer_Status(&radiusServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRadiusServer_Status() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		destination.RadiusServers = radiusServerList
	} else {
		destination.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if configuration.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]string, len(configuration.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range configuration.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
		}
		destination.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		destination.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if configuration.VpnClientAddressPool != nil {
		var vpnClientAddressPool v1alpha1api20201101storage.AddressSpace_Status
		err := configuration.VpnClientAddressPool.AssignPropertiesToAddressSpace_Status(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace_Status() to populate field VpnClientAddressPool")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if configuration.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]v1alpha1api20201101storage.IpsecPolicy_Status, len(configuration.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range configuration.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy v1alpha1api20201101storage.IpsecPolicy_Status
			err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicy_Status(&vpnClientIpsecPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpsecPolicy_Status() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		destination.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if configuration.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]string, len(configuration.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range configuration.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
		}
		destination.VpnClientProtocols = vpnClientProtocolList
	} else {
		destination.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if configuration.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]v1alpha1api20201101storage.VpnClientRevokedCertificate_Status, len(configuration.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range configuration.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate v1alpha1api20201101storage.VpnClientRevokedCertificate_Status
			err := vpnClientRevokedCertificateItem.AssignPropertiesToVpnClientRevokedCertificate_Status(&vpnClientRevokedCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRevokedCertificate_Status() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		destination.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if configuration.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]v1alpha1api20201101storage.VpnClientRootCertificate_Status, len(configuration.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range configuration.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate v1alpha1api20201101storage.VpnClientRootCertificate_Status
			err := vpnClientRootCertificateItem.AssignPropertiesToVpnClientRootCertificate_Status(&vpnClientRootCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRootCertificate_Status() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		destination.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		destination.VpnClientRootCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfigurationBgpPeeringAddress_Spec struct {
	//CustomBgpIpAddresses: The list of custom BGP peering addresses which belong to
	//IP configuration.
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`

	//IpconfigurationId: The ID of IP configuration which belongs to gateway.
	IpconfigurationId *string `json:"ipconfigurationId,omitempty"`
}

var _ genruntime.ARMTransformer = &IPConfigurationBgpPeeringAddress_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (address *IPConfigurationBgpPeeringAddress_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if address == nil {
		return nil, nil
	}
	var result IPConfigurationBgpPeeringAddress_SpecARM

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range address.CustomBgpIpAddresses {
		result.CustomBgpIpAddresses = append(result.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if address.IpconfigurationId != nil {
		ipconfigurationId := *address.IpconfigurationId
		result.IpconfigurationId = &ipconfigurationId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *IPConfigurationBgpPeeringAddress_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationBgpPeeringAddress_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *IPConfigurationBgpPeeringAddress_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddress_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddress_SpecARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		address.CustomBgpIpAddresses = append(address.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		address.IpconfigurationId = &ipconfigurationId
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddress_Spec populates our IPConfigurationBgpPeeringAddress_Spec from the provided source IPConfigurationBgpPeeringAddress_Spec
func (address *IPConfigurationBgpPeeringAddress_Spec) AssignPropertiesFromIPConfigurationBgpPeeringAddress_Spec(source *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Spec) error {

	// CustomBgpIpAddresses
	address.CustomBgpIpAddresses = genruntime.CloneSliceOfString(source.CustomBgpIpAddresses)

	// IpconfigurationId
	address.IpconfigurationId = genruntime.ClonePointerToString(source.IpconfigurationId)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddress_Spec populates the provided destination IPConfigurationBgpPeeringAddress_Spec from our IPConfigurationBgpPeeringAddress_Spec
func (address *IPConfigurationBgpPeeringAddress_Spec) AssignPropertiesToIPConfigurationBgpPeeringAddress_Spec(destination *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	destination.CustomBgpIpAddresses = genruntime.CloneSliceOfString(address.CustomBgpIpAddresses)

	// IpconfigurationId
	destination.IpconfigurationId = genruntime.ClonePointerToString(address.IpconfigurationId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfigurationBgpPeeringAddress_Status struct {
	//CustomBgpIpAddresses: The list of custom BGP peering addresses which belong to
	//IP configuration.
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`

	//DefaultBgpIpAddresses: The list of default BGP peering addresses which belong to
	//IP configuration.
	DefaultBgpIpAddresses []string `json:"defaultBgpIpAddresses,omitempty"`

	//IpconfigurationId: The ID of IP configuration which belongs to gateway.
	IpconfigurationId *string `json:"ipconfigurationId,omitempty"`

	//TunnelIpAddresses: The list of tunnel public IP addresses which belong to IP
	//configuration.
	TunnelIpAddresses []string `json:"tunnelIpAddresses,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfigurationBgpPeeringAddress_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *IPConfigurationBgpPeeringAddress_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationBgpPeeringAddress_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *IPConfigurationBgpPeeringAddress_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddress_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddress_StatusARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		address.CustomBgpIpAddresses = append(address.CustomBgpIpAddresses, item)
	}

	// Set property ‘DefaultBgpIpAddresses’:
	for _, item := range typedInput.DefaultBgpIpAddresses {
		address.DefaultBgpIpAddresses = append(address.DefaultBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		address.IpconfigurationId = &ipconfigurationId
	}

	// Set property ‘TunnelIpAddresses’:
	for _, item := range typedInput.TunnelIpAddresses {
		address.TunnelIpAddresses = append(address.TunnelIpAddresses, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddress_Status populates our IPConfigurationBgpPeeringAddress_Status from the provided source IPConfigurationBgpPeeringAddress_Status
func (address *IPConfigurationBgpPeeringAddress_Status) AssignPropertiesFromIPConfigurationBgpPeeringAddress_Status(source *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status) error {

	// CustomBgpIpAddresses
	address.CustomBgpIpAddresses = genruntime.CloneSliceOfString(source.CustomBgpIpAddresses)

	// DefaultBgpIpAddresses
	address.DefaultBgpIpAddresses = genruntime.CloneSliceOfString(source.DefaultBgpIpAddresses)

	// IpconfigurationId
	address.IpconfigurationId = genruntime.ClonePointerToString(source.IpconfigurationId)

	// TunnelIpAddresses
	address.TunnelIpAddresses = genruntime.CloneSliceOfString(source.TunnelIpAddresses)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddress_Status populates the provided destination IPConfigurationBgpPeeringAddress_Status from our IPConfigurationBgpPeeringAddress_Status
func (address *IPConfigurationBgpPeeringAddress_Status) AssignPropertiesToIPConfigurationBgpPeeringAddress_Status(destination *v1alpha1api20201101storage.IPConfigurationBgpPeeringAddress_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	destination.CustomBgpIpAddresses = genruntime.CloneSliceOfString(address.CustomBgpIpAddresses)

	// DefaultBgpIpAddresses
	destination.DefaultBgpIpAddresses = genruntime.CloneSliceOfString(address.DefaultBgpIpAddresses)

	// IpconfigurationId
	destination.IpconfigurationId = genruntime.ClonePointerToString(address.IpconfigurationId)

	// TunnelIpAddresses
	destination.TunnelIpAddresses = genruntime.CloneSliceOfString(address.TunnelIpAddresses)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IpsecPolicy_Spec struct {
	// +kubebuilder:validation:Required
	//DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup DhGroup_Spec `json:"dhGroup"`

	// +kubebuilder:validation:Required
	//IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption IkeEncryption_Spec `json:"ikeEncryption"`

	// +kubebuilder:validation:Required
	//IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity IkeIntegrity_Spec `json:"ikeIntegrity"`

	// +kubebuilder:validation:Required
	//IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption IpsecEncryption_Spec `json:"ipsecEncryption"`

	// +kubebuilder:validation:Required
	//IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity IpsecIntegrity_Spec `json:"ipsecIntegrity"`

	// +kubebuilder:validation:Required
	//PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup PfsGroup_Spec `json:"pfsGroup"`

	// +kubebuilder:validation:Required
	//SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes int `json:"saDataSizeKilobytes"`

	// +kubebuilder:validation:Required
	//SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds int `json:"saLifeTimeSeconds"`
}

var _ genruntime.ARMTransformer = &IpsecPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *IpsecPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result IpsecPolicy_SpecARM

	// Set property ‘DhGroup’:
	result.DhGroup = policy.DhGroup

	// Set property ‘IkeEncryption’:
	result.IkeEncryption = policy.IkeEncryption

	// Set property ‘IkeIntegrity’:
	result.IkeIntegrity = policy.IkeIntegrity

	// Set property ‘IpsecEncryption’:
	result.IpsecEncryption = policy.IpsecEncryption

	// Set property ‘IpsecIntegrity’:
	result.IpsecIntegrity = policy.IpsecIntegrity

	// Set property ‘PfsGroup’:
	result.PfsGroup = policy.PfsGroup

	// Set property ‘SaDataSizeKilobytes’:
	result.SaDataSizeKilobytes = policy.SaDataSizeKilobytes

	// Set property ‘SaLifeTimeSeconds’:
	result.SaLifeTimeSeconds = policy.SaLifeTimeSeconds
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IpsecPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpsecPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IpsecPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	policy.DhGroup = typedInput.DhGroup

	// Set property ‘IkeEncryption’:
	policy.IkeEncryption = typedInput.IkeEncryption

	// Set property ‘IkeIntegrity’:
	policy.IkeIntegrity = typedInput.IkeIntegrity

	// Set property ‘IpsecEncryption’:
	policy.IpsecEncryption = typedInput.IpsecEncryption

	// Set property ‘IpsecIntegrity’:
	policy.IpsecIntegrity = typedInput.IpsecIntegrity

	// Set property ‘PfsGroup’:
	policy.PfsGroup = typedInput.PfsGroup

	// Set property ‘SaDataSizeKilobytes’:
	policy.SaDataSizeKilobytes = typedInput.SaDataSizeKilobytes

	// Set property ‘SaLifeTimeSeconds’:
	policy.SaLifeTimeSeconds = typedInput.SaLifeTimeSeconds

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicy_Spec populates our IpsecPolicy_Spec from the provided source IpsecPolicy_Spec
func (policy *IpsecPolicy_Spec) AssignPropertiesFromIpsecPolicy_Spec(source *v1alpha1api20201101storage.IpsecPolicy_Spec) error {

	// DhGroup
	if source.DhGroup != nil {
		policy.DhGroup = DhGroup_Spec(*source.DhGroup)
	} else {
		policy.DhGroup = ""
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		policy.IkeEncryption = IkeEncryption_Spec(*source.IkeEncryption)
	} else {
		policy.IkeEncryption = ""
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		policy.IkeIntegrity = IkeIntegrity_Spec(*source.IkeIntegrity)
	} else {
		policy.IkeIntegrity = ""
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		policy.IpsecEncryption = IpsecEncryption_Spec(*source.IpsecEncryption)
	} else {
		policy.IpsecEncryption = ""
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		policy.IpsecIntegrity = IpsecIntegrity_Spec(*source.IpsecIntegrity)
	} else {
		policy.IpsecIntegrity = ""
	}

	// PfsGroup
	if source.PfsGroup != nil {
		policy.PfsGroup = PfsGroup_Spec(*source.PfsGroup)
	} else {
		policy.PfsGroup = ""
	}

	// SaDataSizeKilobytes
	policy.SaDataSizeKilobytes = genruntime.GetOptionalIntValue(source.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	policy.SaLifeTimeSeconds = genruntime.GetOptionalIntValue(source.SaLifeTimeSeconds)

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicy_Spec populates the provided destination IpsecPolicy_Spec from our IpsecPolicy_Spec
func (policy *IpsecPolicy_Spec) AssignPropertiesToIpsecPolicy_Spec(destination *v1alpha1api20201101storage.IpsecPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	dhGroup := string(policy.DhGroup)
	destination.DhGroup = &dhGroup

	// IkeEncryption
	ikeEncryption := string(policy.IkeEncryption)
	destination.IkeEncryption = &ikeEncryption

	// IkeIntegrity
	ikeIntegrity := string(policy.IkeIntegrity)
	destination.IkeIntegrity = &ikeIntegrity

	// IpsecEncryption
	ipsecEncryption := string(policy.IpsecEncryption)
	destination.IpsecEncryption = &ipsecEncryption

	// IpsecIntegrity
	ipsecIntegrity := string(policy.IpsecIntegrity)
	destination.IpsecIntegrity = &ipsecIntegrity

	// PfsGroup
	pfsGroup := string(policy.PfsGroup)
	destination.PfsGroup = &pfsGroup

	// SaDataSizeKilobytes
	saDataSizeKilobyte := policy.SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = &saDataSizeKilobyte

	// SaLifeTimeSeconds
	saLifeTimeSecond := policy.SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = &saLifeTimeSecond

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IpsecPolicy_Status struct {
	// +kubebuilder:validation:Required
	//DhGroup: The DH Group used in IKE Phase 1 for initial SA.
	DhGroup DhGroup_Status `json:"dhGroup"`

	// +kubebuilder:validation:Required
	//IkeEncryption: The IKE encryption algorithm (IKE phase 2).
	IkeEncryption IkeEncryption_Status `json:"ikeEncryption"`

	// +kubebuilder:validation:Required
	//IkeIntegrity: The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity IkeIntegrity_Status `json:"ikeIntegrity"`

	// +kubebuilder:validation:Required
	//IpsecEncryption: The IPSec encryption algorithm (IKE phase 1).
	IpsecEncryption IpsecEncryption_Status `json:"ipsecEncryption"`

	// +kubebuilder:validation:Required
	//IpsecIntegrity: The IPSec integrity algorithm (IKE phase 1).
	IpsecIntegrity IpsecIntegrity_Status `json:"ipsecIntegrity"`

	// +kubebuilder:validation:Required
	//PfsGroup: The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup PfsGroup_Status `json:"pfsGroup"`

	// +kubebuilder:validation:Required
	//SaDataSizeKilobytes: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes int `json:"saDataSizeKilobytes"`

	// +kubebuilder:validation:Required
	//SaLifeTimeSeconds: The IPSec Security Association (also called Quick Mode or
	//Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds int `json:"saLifeTimeSeconds"`
}

var _ genruntime.FromARMConverter = &IpsecPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IpsecPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpsecPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IpsecPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	policy.DhGroup = typedInput.DhGroup

	// Set property ‘IkeEncryption’:
	policy.IkeEncryption = typedInput.IkeEncryption

	// Set property ‘IkeIntegrity’:
	policy.IkeIntegrity = typedInput.IkeIntegrity

	// Set property ‘IpsecEncryption’:
	policy.IpsecEncryption = typedInput.IpsecEncryption

	// Set property ‘IpsecIntegrity’:
	policy.IpsecIntegrity = typedInput.IpsecIntegrity

	// Set property ‘PfsGroup’:
	policy.PfsGroup = typedInput.PfsGroup

	// Set property ‘SaDataSizeKilobytes’:
	policy.SaDataSizeKilobytes = typedInput.SaDataSizeKilobytes

	// Set property ‘SaLifeTimeSeconds’:
	policy.SaLifeTimeSeconds = typedInput.SaLifeTimeSeconds

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicy_Status populates our IpsecPolicy_Status from the provided source IpsecPolicy_Status
func (policy *IpsecPolicy_Status) AssignPropertiesFromIpsecPolicy_Status(source *v1alpha1api20201101storage.IpsecPolicy_Status) error {

	// DhGroup
	if source.DhGroup != nil {
		policy.DhGroup = DhGroup_Status(*source.DhGroup)
	} else {
		policy.DhGroup = ""
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		policy.IkeEncryption = IkeEncryption_Status(*source.IkeEncryption)
	} else {
		policy.IkeEncryption = ""
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		policy.IkeIntegrity = IkeIntegrity_Status(*source.IkeIntegrity)
	} else {
		policy.IkeIntegrity = ""
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		policy.IpsecEncryption = IpsecEncryption_Status(*source.IpsecEncryption)
	} else {
		policy.IpsecEncryption = ""
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		policy.IpsecIntegrity = IpsecIntegrity_Status(*source.IpsecIntegrity)
	} else {
		policy.IpsecIntegrity = ""
	}

	// PfsGroup
	if source.PfsGroup != nil {
		policy.PfsGroup = PfsGroup_Status(*source.PfsGroup)
	} else {
		policy.PfsGroup = ""
	}

	// SaDataSizeKilobytes
	policy.SaDataSizeKilobytes = genruntime.GetOptionalIntValue(source.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	policy.SaLifeTimeSeconds = genruntime.GetOptionalIntValue(source.SaLifeTimeSeconds)

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicy_Status populates the provided destination IpsecPolicy_Status from our IpsecPolicy_Status
func (policy *IpsecPolicy_Status) AssignPropertiesToIpsecPolicy_Status(destination *v1alpha1api20201101storage.IpsecPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	dhGroup := string(policy.DhGroup)
	destination.DhGroup = &dhGroup

	// IkeEncryption
	ikeEncryption := string(policy.IkeEncryption)
	destination.IkeEncryption = &ikeEncryption

	// IkeIntegrity
	ikeIntegrity := string(policy.IkeIntegrity)
	destination.IkeIntegrity = &ikeIntegrity

	// IpsecEncryption
	ipsecEncryption := string(policy.IpsecEncryption)
	destination.IpsecEncryption = &ipsecEncryption

	// IpsecIntegrity
	ipsecIntegrity := string(policy.IpsecIntegrity)
	destination.IpsecIntegrity = &ipsecIntegrity

	// PfsGroup
	pfsGroup := string(policy.PfsGroup)
	destination.PfsGroup = &pfsGroup

	// SaDataSizeKilobytes
	saDataSizeKilobyte := policy.SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = &saDataSizeKilobyte

	// SaLifeTimeSeconds
	saLifeTimeSecond := policy.SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = &saLifeTimeSecond

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RadiusServer_Spec struct {
	// +kubebuilder:validation:Required
	//RadiusServerAddress: The address of this radius server.
	RadiusServerAddress string `json:"radiusServerAddress"`

	//RadiusServerScore: The initial score assigned to this radius server.
	RadiusServerScore *int `json:"radiusServerScore,omitempty"`

	//RadiusServerSecret: The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.ARMTransformer = &RadiusServer_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (server *RadiusServer_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if server == nil {
		return nil, nil
	}
	var result RadiusServer_SpecARM

	// Set property ‘RadiusServerAddress’:
	result.RadiusServerAddress = server.RadiusServerAddress

	// Set property ‘RadiusServerScore’:
	if server.RadiusServerScore != nil {
		radiusServerScore := *server.RadiusServerScore
		result.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if server.RadiusServerSecret != nil {
		radiusServerSecret := *server.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RadiusServer_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RadiusServer_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RadiusServer_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServer_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServer_SpecARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	server.RadiusServerAddress = typedInput.RadiusServerAddress

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		server.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		server.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServer_Spec populates our RadiusServer_Spec from the provided source RadiusServer_Spec
func (server *RadiusServer_Spec) AssignPropertiesFromRadiusServer_Spec(source *v1alpha1api20201101storage.RadiusServer_Spec) error {

	// RadiusServerAddress
	server.RadiusServerAddress = genruntime.GetOptionalStringValue(source.RadiusServerAddress)

	// RadiusServerScore
	server.RadiusServerScore = genruntime.ClonePointerToInt(source.RadiusServerScore)

	// RadiusServerSecret
	server.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// No error
	return nil
}

// AssignPropertiesToRadiusServer_Spec populates the provided destination RadiusServer_Spec from our RadiusServer_Spec
func (server *RadiusServer_Spec) AssignPropertiesToRadiusServer_Spec(destination *v1alpha1api20201101storage.RadiusServer_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	radiusServerAddress := server.RadiusServerAddress
	destination.RadiusServerAddress = &radiusServerAddress

	// RadiusServerScore
	destination.RadiusServerScore = genruntime.ClonePointerToInt(server.RadiusServerScore)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(server.RadiusServerSecret)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RadiusServer_Status struct {
	// +kubebuilder:validation:Required
	//RadiusServerAddress: The address of this radius server.
	RadiusServerAddress string `json:"radiusServerAddress"`

	//RadiusServerScore: The initial score assigned to this radius server.
	RadiusServerScore *int `json:"radiusServerScore,omitempty"`

	//RadiusServerSecret: The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.FromARMConverter = &RadiusServer_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RadiusServer_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RadiusServer_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RadiusServer_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServer_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServer_StatusARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	server.RadiusServerAddress = typedInput.RadiusServerAddress

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		server.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		server.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServer_Status populates our RadiusServer_Status from the provided source RadiusServer_Status
func (server *RadiusServer_Status) AssignPropertiesFromRadiusServer_Status(source *v1alpha1api20201101storage.RadiusServer_Status) error {

	// RadiusServerAddress
	server.RadiusServerAddress = genruntime.GetOptionalStringValue(source.RadiusServerAddress)

	// RadiusServerScore
	server.RadiusServerScore = genruntime.ClonePointerToInt(source.RadiusServerScore)

	// RadiusServerSecret
	server.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// No error
	return nil
}

// AssignPropertiesToRadiusServer_Status populates the provided destination RadiusServer_Status from our RadiusServer_Status
func (server *RadiusServer_Status) AssignPropertiesToRadiusServer_Status(destination *v1alpha1api20201101storage.RadiusServer_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	radiusServerAddress := server.RadiusServerAddress
	destination.RadiusServerAddress = &radiusServerAddress

	// RadiusServerScore
	destination.RadiusServerScore = genruntime.ClonePointerToInt(server.RadiusServerScore)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(server.RadiusServerSecret)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySku_Name_Spec string

const (
	VirtualNetworkGatewaySku_Name_SpecBasic            = VirtualNetworkGatewaySku_Name_Spec("Basic")
	VirtualNetworkGatewaySku_Name_SpecErGw1AZ          = VirtualNetworkGatewaySku_Name_Spec("ErGw1AZ")
	VirtualNetworkGatewaySku_Name_SpecErGw2AZ          = VirtualNetworkGatewaySku_Name_Spec("ErGw2AZ")
	VirtualNetworkGatewaySku_Name_SpecErGw3AZ          = VirtualNetworkGatewaySku_Name_Spec("ErGw3AZ")
	VirtualNetworkGatewaySku_Name_SpecHighPerformance  = VirtualNetworkGatewaySku_Name_Spec("HighPerformance")
	VirtualNetworkGatewaySku_Name_SpecStandard         = VirtualNetworkGatewaySku_Name_Spec("Standard")
	VirtualNetworkGatewaySku_Name_SpecUltraPerformance = VirtualNetworkGatewaySku_Name_Spec("UltraPerformance")
	VirtualNetworkGatewaySku_Name_SpecVpnGw1           = VirtualNetworkGatewaySku_Name_Spec("VpnGw1")
	VirtualNetworkGatewaySku_Name_SpecVpnGw1AZ         = VirtualNetworkGatewaySku_Name_Spec("VpnGw1AZ")
	VirtualNetworkGatewaySku_Name_SpecVpnGw2           = VirtualNetworkGatewaySku_Name_Spec("VpnGw2")
	VirtualNetworkGatewaySku_Name_SpecVpnGw2AZ         = VirtualNetworkGatewaySku_Name_Spec("VpnGw2AZ")
	VirtualNetworkGatewaySku_Name_SpecVpnGw3           = VirtualNetworkGatewaySku_Name_Spec("VpnGw3")
	VirtualNetworkGatewaySku_Name_SpecVpnGw3AZ         = VirtualNetworkGatewaySku_Name_Spec("VpnGw3AZ")
	VirtualNetworkGatewaySku_Name_SpecVpnGw4           = VirtualNetworkGatewaySku_Name_Spec("VpnGw4")
	VirtualNetworkGatewaySku_Name_SpecVpnGw4AZ         = VirtualNetworkGatewaySku_Name_Spec("VpnGw4AZ")
	VirtualNetworkGatewaySku_Name_SpecVpnGw5           = VirtualNetworkGatewaySku_Name_Spec("VpnGw5")
	VirtualNetworkGatewaySku_Name_SpecVpnGw5AZ         = VirtualNetworkGatewaySku_Name_Spec("VpnGw5AZ")
)

type VirtualNetworkGatewaySku_Name_Status string

const (
	VirtualNetworkGatewaySku_Name_StatusBasic            = VirtualNetworkGatewaySku_Name_Status("Basic")
	VirtualNetworkGatewaySku_Name_StatusErGw1AZ          = VirtualNetworkGatewaySku_Name_Status("ErGw1AZ")
	VirtualNetworkGatewaySku_Name_StatusErGw2AZ          = VirtualNetworkGatewaySku_Name_Status("ErGw2AZ")
	VirtualNetworkGatewaySku_Name_StatusErGw3AZ          = VirtualNetworkGatewaySku_Name_Status("ErGw3AZ")
	VirtualNetworkGatewaySku_Name_StatusHighPerformance  = VirtualNetworkGatewaySku_Name_Status("HighPerformance")
	VirtualNetworkGatewaySku_Name_StatusStandard         = VirtualNetworkGatewaySku_Name_Status("Standard")
	VirtualNetworkGatewaySku_Name_StatusUltraPerformance = VirtualNetworkGatewaySku_Name_Status("UltraPerformance")
	VirtualNetworkGatewaySku_Name_StatusVpnGw1           = VirtualNetworkGatewaySku_Name_Status("VpnGw1")
	VirtualNetworkGatewaySku_Name_StatusVpnGw1AZ         = VirtualNetworkGatewaySku_Name_Status("VpnGw1AZ")
	VirtualNetworkGatewaySku_Name_StatusVpnGw2           = VirtualNetworkGatewaySku_Name_Status("VpnGw2")
	VirtualNetworkGatewaySku_Name_StatusVpnGw2AZ         = VirtualNetworkGatewaySku_Name_Status("VpnGw2AZ")
	VirtualNetworkGatewaySku_Name_StatusVpnGw3           = VirtualNetworkGatewaySku_Name_Status("VpnGw3")
	VirtualNetworkGatewaySku_Name_StatusVpnGw3AZ         = VirtualNetworkGatewaySku_Name_Status("VpnGw3AZ")
	VirtualNetworkGatewaySku_Name_StatusVpnGw4           = VirtualNetworkGatewaySku_Name_Status("VpnGw4")
	VirtualNetworkGatewaySku_Name_StatusVpnGw4AZ         = VirtualNetworkGatewaySku_Name_Status("VpnGw4AZ")
	VirtualNetworkGatewaySku_Name_StatusVpnGw5           = VirtualNetworkGatewaySku_Name_Status("VpnGw5")
	VirtualNetworkGatewaySku_Name_StatusVpnGw5AZ         = VirtualNetworkGatewaySku_Name_Status("VpnGw5AZ")
)

// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySku_Tier_Spec string

const (
	VirtualNetworkGatewaySku_Tier_SpecBasic            = VirtualNetworkGatewaySku_Tier_Spec("Basic")
	VirtualNetworkGatewaySku_Tier_SpecErGw1AZ          = VirtualNetworkGatewaySku_Tier_Spec("ErGw1AZ")
	VirtualNetworkGatewaySku_Tier_SpecErGw2AZ          = VirtualNetworkGatewaySku_Tier_Spec("ErGw2AZ")
	VirtualNetworkGatewaySku_Tier_SpecErGw3AZ          = VirtualNetworkGatewaySku_Tier_Spec("ErGw3AZ")
	VirtualNetworkGatewaySku_Tier_SpecHighPerformance  = VirtualNetworkGatewaySku_Tier_Spec("HighPerformance")
	VirtualNetworkGatewaySku_Tier_SpecStandard         = VirtualNetworkGatewaySku_Tier_Spec("Standard")
	VirtualNetworkGatewaySku_Tier_SpecUltraPerformance = VirtualNetworkGatewaySku_Tier_Spec("UltraPerformance")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw1           = VirtualNetworkGatewaySku_Tier_Spec("VpnGw1")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw1AZ         = VirtualNetworkGatewaySku_Tier_Spec("VpnGw1AZ")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw2           = VirtualNetworkGatewaySku_Tier_Spec("VpnGw2")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw2AZ         = VirtualNetworkGatewaySku_Tier_Spec("VpnGw2AZ")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw3           = VirtualNetworkGatewaySku_Tier_Spec("VpnGw3")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw3AZ         = VirtualNetworkGatewaySku_Tier_Spec("VpnGw3AZ")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw4           = VirtualNetworkGatewaySku_Tier_Spec("VpnGw4")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw4AZ         = VirtualNetworkGatewaySku_Tier_Spec("VpnGw4AZ")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw5           = VirtualNetworkGatewaySku_Tier_Spec("VpnGw5")
	VirtualNetworkGatewaySku_Tier_SpecVpnGw5AZ         = VirtualNetworkGatewaySku_Tier_Spec("VpnGw5AZ")
)

type VirtualNetworkGatewaySku_Tier_Status string

const (
	VirtualNetworkGatewaySku_Tier_StatusBasic            = VirtualNetworkGatewaySku_Tier_Status("Basic")
	VirtualNetworkGatewaySku_Tier_StatusErGw1AZ          = VirtualNetworkGatewaySku_Tier_Status("ErGw1AZ")
	VirtualNetworkGatewaySku_Tier_StatusErGw2AZ          = VirtualNetworkGatewaySku_Tier_Status("ErGw2AZ")
	VirtualNetworkGatewaySku_Tier_StatusErGw3AZ          = VirtualNetworkGatewaySku_Tier_Status("ErGw3AZ")
	VirtualNetworkGatewaySku_Tier_StatusHighPerformance  = VirtualNetworkGatewaySku_Tier_Status("HighPerformance")
	VirtualNetworkGatewaySku_Tier_StatusStandard         = VirtualNetworkGatewaySku_Tier_Status("Standard")
	VirtualNetworkGatewaySku_Tier_StatusUltraPerformance = VirtualNetworkGatewaySku_Tier_Status("UltraPerformance")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw1           = VirtualNetworkGatewaySku_Tier_Status("VpnGw1")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw1AZ         = VirtualNetworkGatewaySku_Tier_Status("VpnGw1AZ")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw2           = VirtualNetworkGatewaySku_Tier_Status("VpnGw2")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw2AZ         = VirtualNetworkGatewaySku_Tier_Status("VpnGw2AZ")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw3           = VirtualNetworkGatewaySku_Tier_Status("VpnGw3")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw3AZ         = VirtualNetworkGatewaySku_Tier_Status("VpnGw3AZ")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw4           = VirtualNetworkGatewaySku_Tier_Status("VpnGw4")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw4AZ         = VirtualNetworkGatewaySku_Tier_Status("VpnGw4AZ")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw5           = VirtualNetworkGatewaySku_Tier_Status("VpnGw5")
	VirtualNetworkGatewaySku_Tier_StatusVpnGw5AZ         = VirtualNetworkGatewaySku_Tier_Status("VpnGw5AZ")
)

// +kubebuilder:validation:Enum={"AAD","Certificate","Radius"}
type VpnClientConfiguration_VpnAuthenticationTypes_Spec string

const (
	VpnClientConfiguration_VpnAuthenticationTypes_SpecAAD         = VpnClientConfiguration_VpnAuthenticationTypes_Spec("AAD")
	VpnClientConfiguration_VpnAuthenticationTypes_SpecCertificate = VpnClientConfiguration_VpnAuthenticationTypes_Spec("Certificate")
	VpnClientConfiguration_VpnAuthenticationTypes_SpecRadius      = VpnClientConfiguration_VpnAuthenticationTypes_Spec("Radius")
)

type VpnClientConfiguration_VpnAuthenticationTypes_Status string

const (
	VpnClientConfiguration_VpnAuthenticationTypes_StatusAAD         = VpnClientConfiguration_VpnAuthenticationTypes_Status("AAD")
	VpnClientConfiguration_VpnAuthenticationTypes_StatusCertificate = VpnClientConfiguration_VpnAuthenticationTypes_Status("Certificate")
	VpnClientConfiguration_VpnAuthenticationTypes_StatusRadius      = VpnClientConfiguration_VpnAuthenticationTypes_Status("Radius")
)

// +kubebuilder:validation:Enum={"IkeV2","OpenVPN","SSTP"}
type VpnClientConfiguration_VpnClientProtocols_Spec string

const (
	VpnClientConfiguration_VpnClientProtocols_SpecIkeV2   = VpnClientConfiguration_VpnClientProtocols_Spec("IkeV2")
	VpnClientConfiguration_VpnClientProtocols_SpecOpenVPN = VpnClientConfiguration_VpnClientProtocols_Spec("OpenVPN")
	VpnClientConfiguration_VpnClientProtocols_SpecSSTP    = VpnClientConfiguration_VpnClientProtocols_Spec("SSTP")
)

type VpnClientConfiguration_VpnClientProtocols_Status string

const (
	VpnClientConfiguration_VpnClientProtocols_StatusIkeV2   = VpnClientConfiguration_VpnClientProtocols_Status("IkeV2")
	VpnClientConfiguration_VpnClientProtocols_StatusOpenVPN = VpnClientConfiguration_VpnClientProtocols_Status("OpenVPN")
	VpnClientConfiguration_VpnClientProtocols_StatusSSTP    = VpnClientConfiguration_VpnClientProtocols_Status("SSTP")
)

type VpnClientRevokedCertificate_Spec struct {
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Thumbprint: The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.ARMTransformer = &VpnClientRevokedCertificate_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificate *VpnClientRevokedCertificate_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificate == nil {
		return nil, nil
	}
	var result VpnClientRevokedCertificate_SpecARM

	// Set property ‘Id’:
	if certificate.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*certificate.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Name’:
	if certificate.Name != nil {
		name := *certificate.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if certificate.Thumbprint != nil {
		result.Properties = &VpnClientRevokedCertificatePropertiesFormat_SpecARM{}
	}
	if certificate.Thumbprint != nil {
		thumbprint := *certificate.Thumbprint
		result.Properties.Thumbprint = &thumbprint
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRevokedCertificate_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRevokedCertificate_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRevokedCertificate_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRevokedCertificate_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRevokedCertificate_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// no assignment for property ‘Reference’

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			certificate.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRevokedCertificate_Spec populates our VpnClientRevokedCertificate_Spec from the provided source VpnClientRevokedCertificate_Spec
func (certificate *VpnClientRevokedCertificate_Spec) AssignPropertiesFromVpnClientRevokedCertificate_Spec(source *v1alpha1api20201101storage.VpnClientRevokedCertificate_Spec) error {

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		certificate.Reference = &reference
	} else {
		certificate.Reference = nil
	}

	// Thumbprint
	certificate.Thumbprint = genruntime.ClonePointerToString(source.Thumbprint)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRevokedCertificate_Spec populates the provided destination VpnClientRevokedCertificate_Spec from our VpnClientRevokedCertificate_Spec
func (certificate *VpnClientRevokedCertificate_Spec) AssignPropertiesToVpnClientRevokedCertificate_Spec(destination *v1alpha1api20201101storage.VpnClientRevokedCertificate_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// Reference
	if certificate.Reference != nil {
		reference := certificate.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Thumbprint
	destination.Thumbprint = genruntime.ClonePointerToString(certificate.Thumbprint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientRevokedCertificate_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the VPN client revoked certificate
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//Thumbprint: The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientRevokedCertificate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRevokedCertificate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRevokedCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRevokedCertificate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRevokedCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRevokedCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		certificate.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		certificate.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			certificate.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			certificate.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRevokedCertificate_Status populates our VpnClientRevokedCertificate_Status from the provided source VpnClientRevokedCertificate_Status
func (certificate *VpnClientRevokedCertificate_Status) AssignPropertiesFromVpnClientRevokedCertificate_Status(source *v1alpha1api20201101storage.VpnClientRevokedCertificate_Status) error {

	// Etag
	certificate.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	certificate.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		certificate.ProvisioningState = &provisioningState
	} else {
		certificate.ProvisioningState = nil
	}

	// Thumbprint
	certificate.Thumbprint = genruntime.ClonePointerToString(source.Thumbprint)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRevokedCertificate_Status populates the provided destination VpnClientRevokedCertificate_Status from our VpnClientRevokedCertificate_Status
func (certificate *VpnClientRevokedCertificate_Status) AssignPropertiesToVpnClientRevokedCertificate_Status(destination *v1alpha1api20201101storage.VpnClientRevokedCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(certificate.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(certificate.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// ProvisioningState
	if certificate.ProvisioningState != nil {
		provisioningState := string(*certificate.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Thumbprint
	destination.Thumbprint = genruntime.ClonePointerToString(certificate.Thumbprint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientRootCertificate_Spec struct {
	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	//PublicCertData: The certificate public data.
	PublicCertData string `json:"publicCertData"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &VpnClientRootCertificate_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificate *VpnClientRootCertificate_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificate == nil {
		return nil, nil
	}
	var result VpnClientRootCertificate_SpecARM

	// Set property ‘Id’:
	if certificate.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*certificate.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Name’:
	if certificate.Name != nil {
		name := *certificate.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	result.Properties.PublicCertData = certificate.PublicCertData
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRootCertificate_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRootCertificate_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRootCertificate_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRootCertificate_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRootCertificate_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	certificate.PublicCertData = typedInput.Properties.PublicCertData

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRootCertificate_Spec populates our VpnClientRootCertificate_Spec from the provided source VpnClientRootCertificate_Spec
func (certificate *VpnClientRootCertificate_Spec) AssignPropertiesFromVpnClientRootCertificate_Spec(source *v1alpha1api20201101storage.VpnClientRootCertificate_Spec) error {

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// PublicCertData
	certificate.PublicCertData = genruntime.GetOptionalStringValue(source.PublicCertData)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		certificate.Reference = &reference
	} else {
		certificate.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientRootCertificate_Spec populates the provided destination VpnClientRootCertificate_Spec from our VpnClientRootCertificate_Spec
func (certificate *VpnClientRootCertificate_Spec) AssignPropertiesToVpnClientRootCertificate_Spec(destination *v1alpha1api20201101storage.VpnClientRootCertificate_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// PublicCertData
	publicCertDatum := certificate.PublicCertData
	destination.PublicCertData = &publicCertDatum

	// Reference
	if certificate.Reference != nil {
		reference := certificate.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VpnClientRootCertificate_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the VPN client root certificate
	//resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// +kubebuilder:validation:Required
	//PublicCertData: The certificate public data.
	PublicCertData string `json:"publicCertData"`
}

var _ genruntime.FromARMConverter = &VpnClientRootCertificate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRootCertificate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRootCertificate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRootCertificate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRootCertificate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRootCertificate_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		certificate.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		certificate.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties.ProvisioningState != nil {
		provisioningState := *typedInput.Properties.ProvisioningState
		certificate.ProvisioningState = &provisioningState
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	certificate.PublicCertData = typedInput.Properties.PublicCertData

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRootCertificate_Status populates our VpnClientRootCertificate_Status from the provided source VpnClientRootCertificate_Status
func (certificate *VpnClientRootCertificate_Status) AssignPropertiesFromVpnClientRootCertificate_Status(source *v1alpha1api20201101storage.VpnClientRootCertificate_Status) error {

	// Etag
	certificate.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	certificate.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		certificate.ProvisioningState = &provisioningState
	} else {
		certificate.ProvisioningState = nil
	}

	// PublicCertData
	certificate.PublicCertData = genruntime.GetOptionalStringValue(source.PublicCertData)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRootCertificate_Status populates the provided destination VpnClientRootCertificate_Status from our VpnClientRootCertificate_Status
func (certificate *VpnClientRootCertificate_Status) AssignPropertiesToVpnClientRootCertificate_Status(destination *v1alpha1api20201101storage.VpnClientRootCertificate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(certificate.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(certificate.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// ProvisioningState
	if certificate.ProvisioningState != nil {
		provisioningState := string(*certificate.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicCertData
	publicCertDatum := certificate.PublicCertData
	destination.PublicCertData = &publicCertDatum

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"DHGroup1","DHGroup14","DHGroup2","DHGroup2048","DHGroup24","ECP256","ECP384","None"}
type DhGroup_Spec string

const (
	DhGroup_SpecDHGroup1    = DhGroup_Spec("DHGroup1")
	DhGroup_SpecDHGroup14   = DhGroup_Spec("DHGroup14")
	DhGroup_SpecDHGroup2    = DhGroup_Spec("DHGroup2")
	DhGroup_SpecDHGroup2048 = DhGroup_Spec("DHGroup2048")
	DhGroup_SpecDHGroup24   = DhGroup_Spec("DHGroup24")
	DhGroup_SpecECP256      = DhGroup_Spec("ECP256")
	DhGroup_SpecECP384      = DhGroup_Spec("ECP384")
	DhGroup_SpecNone        = DhGroup_Spec("None")
)

type DhGroup_Status string

const (
	DhGroup_StatusDHGroup1    = DhGroup_Status("DHGroup1")
	DhGroup_StatusDHGroup14   = DhGroup_Status("DHGroup14")
	DhGroup_StatusDHGroup2    = DhGroup_Status("DHGroup2")
	DhGroup_StatusDHGroup2048 = DhGroup_Status("DHGroup2048")
	DhGroup_StatusDHGroup24   = DhGroup_Status("DHGroup24")
	DhGroup_StatusECP256      = DhGroup_Status("ECP256")
	DhGroup_StatusECP384      = DhGroup_Status("ECP384")
	DhGroup_StatusNone        = DhGroup_Status("None")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES256"}
type IkeEncryption_Spec string

const (
	IkeEncryption_SpecAES128    = IkeEncryption_Spec("AES128")
	IkeEncryption_SpecAES192    = IkeEncryption_Spec("AES192")
	IkeEncryption_SpecAES256    = IkeEncryption_Spec("AES256")
	IkeEncryption_SpecDES       = IkeEncryption_Spec("DES")
	IkeEncryption_SpecDES3      = IkeEncryption_Spec("DES3")
	IkeEncryption_SpecGCMAES128 = IkeEncryption_Spec("GCMAES128")
	IkeEncryption_SpecGCMAES256 = IkeEncryption_Spec("GCMAES256")
)

type IkeEncryption_Status string

const (
	IkeEncryption_StatusAES128    = IkeEncryption_Status("AES128")
	IkeEncryption_StatusAES192    = IkeEncryption_Status("AES192")
	IkeEncryption_StatusAES256    = IkeEncryption_Status("AES256")
	IkeEncryption_StatusDES       = IkeEncryption_Status("DES")
	IkeEncryption_StatusDES3      = IkeEncryption_Status("DES3")
	IkeEncryption_StatusGCMAES128 = IkeEncryption_Status("GCMAES128")
	IkeEncryption_StatusGCMAES256 = IkeEncryption_Status("GCMAES256")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES256","MD5","SHA1","SHA256","SHA384"}
type IkeIntegrity_Spec string

const (
	IkeIntegrity_SpecGCMAES128 = IkeIntegrity_Spec("GCMAES128")
	IkeIntegrity_SpecGCMAES256 = IkeIntegrity_Spec("GCMAES256")
	IkeIntegrity_SpecMD5       = IkeIntegrity_Spec("MD5")
	IkeIntegrity_SpecSHA1      = IkeIntegrity_Spec("SHA1")
	IkeIntegrity_SpecSHA256    = IkeIntegrity_Spec("SHA256")
	IkeIntegrity_SpecSHA384    = IkeIntegrity_Spec("SHA384")
)

type IkeIntegrity_Status string

const (
	IkeIntegrity_StatusGCMAES128 = IkeIntegrity_Status("GCMAES128")
	IkeIntegrity_StatusGCMAES256 = IkeIntegrity_Status("GCMAES256")
	IkeIntegrity_StatusMD5       = IkeIntegrity_Status("MD5")
	IkeIntegrity_StatusSHA1      = IkeIntegrity_Status("SHA1")
	IkeIntegrity_StatusSHA256    = IkeIntegrity_Status("SHA256")
	IkeIntegrity_StatusSHA384    = IkeIntegrity_Status("SHA384")
)

// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES192","GCMAES256","None"}
type IpsecEncryption_Spec string

const (
	IpsecEncryption_SpecAES128    = IpsecEncryption_Spec("AES128")
	IpsecEncryption_SpecAES192    = IpsecEncryption_Spec("AES192")
	IpsecEncryption_SpecAES256    = IpsecEncryption_Spec("AES256")
	IpsecEncryption_SpecDES       = IpsecEncryption_Spec("DES")
	IpsecEncryption_SpecDES3      = IpsecEncryption_Spec("DES3")
	IpsecEncryption_SpecGCMAES128 = IpsecEncryption_Spec("GCMAES128")
	IpsecEncryption_SpecGCMAES192 = IpsecEncryption_Spec("GCMAES192")
	IpsecEncryption_SpecGCMAES256 = IpsecEncryption_Spec("GCMAES256")
	IpsecEncryption_SpecNone      = IpsecEncryption_Spec("None")
)

type IpsecEncryption_Status string

const (
	IpsecEncryption_StatusAES128    = IpsecEncryption_Status("AES128")
	IpsecEncryption_StatusAES192    = IpsecEncryption_Status("AES192")
	IpsecEncryption_StatusAES256    = IpsecEncryption_Status("AES256")
	IpsecEncryption_StatusDES       = IpsecEncryption_Status("DES")
	IpsecEncryption_StatusDES3      = IpsecEncryption_Status("DES3")
	IpsecEncryption_StatusGCMAES128 = IpsecEncryption_Status("GCMAES128")
	IpsecEncryption_StatusGCMAES192 = IpsecEncryption_Status("GCMAES192")
	IpsecEncryption_StatusGCMAES256 = IpsecEncryption_Status("GCMAES256")
	IpsecEncryption_StatusNone      = IpsecEncryption_Status("None")
)

// +kubebuilder:validation:Enum={"GCMAES128","GCMAES192","GCMAES256","MD5","SHA1","SHA256"}
type IpsecIntegrity_Spec string

const (
	IpsecIntegrity_SpecGCMAES128 = IpsecIntegrity_Spec("GCMAES128")
	IpsecIntegrity_SpecGCMAES192 = IpsecIntegrity_Spec("GCMAES192")
	IpsecIntegrity_SpecGCMAES256 = IpsecIntegrity_Spec("GCMAES256")
	IpsecIntegrity_SpecMD5       = IpsecIntegrity_Spec("MD5")
	IpsecIntegrity_SpecSHA1      = IpsecIntegrity_Spec("SHA1")
	IpsecIntegrity_SpecSHA256    = IpsecIntegrity_Spec("SHA256")
)

type IpsecIntegrity_Status string

const (
	IpsecIntegrity_StatusGCMAES128 = IpsecIntegrity_Status("GCMAES128")
	IpsecIntegrity_StatusGCMAES192 = IpsecIntegrity_Status("GCMAES192")
	IpsecIntegrity_StatusGCMAES256 = IpsecIntegrity_Status("GCMAES256")
	IpsecIntegrity_StatusMD5       = IpsecIntegrity_Status("MD5")
	IpsecIntegrity_StatusSHA1      = IpsecIntegrity_Status("SHA1")
	IpsecIntegrity_StatusSHA256    = IpsecIntegrity_Status("SHA256")
)

// +kubebuilder:validation:Enum={"ECP256","ECP384","None","PFS1","PFS14","PFS2","PFS2048","PFS24","PFSMM"}
type PfsGroup_Spec string

const (
	PfsGroup_SpecECP256  = PfsGroup_Spec("ECP256")
	PfsGroup_SpecECP384  = PfsGroup_Spec("ECP384")
	PfsGroup_SpecNone    = PfsGroup_Spec("None")
	PfsGroup_SpecPFS1    = PfsGroup_Spec("PFS1")
	PfsGroup_SpecPFS14   = PfsGroup_Spec("PFS14")
	PfsGroup_SpecPFS2    = PfsGroup_Spec("PFS2")
	PfsGroup_SpecPFS2048 = PfsGroup_Spec("PFS2048")
	PfsGroup_SpecPFS24   = PfsGroup_Spec("PFS24")
	PfsGroup_SpecPFSMM   = PfsGroup_Spec("PFSMM")
)

type PfsGroup_Status string

const (
	PfsGroup_StatusECP256  = PfsGroup_Status("ECP256")
	PfsGroup_StatusECP384  = PfsGroup_Status("ECP384")
	PfsGroup_StatusNone    = PfsGroup_Status("None")
	PfsGroup_StatusPFS1    = PfsGroup_Status("PFS1")
	PfsGroup_StatusPFS14   = PfsGroup_Status("PFS14")
	PfsGroup_StatusPFS2    = PfsGroup_Status("PFS2")
	PfsGroup_StatusPFS2048 = PfsGroup_Status("PFS2048")
	PfsGroup_StatusPFS24   = PfsGroup_Status("PFS24")
	PfsGroup_StatusPFSMM   = PfsGroup_Status("PFSMM")
)

func init() {
	SchemeBuilder.Register(&VirtualNetworkGateway{}, &VirtualNetworkGatewayList{})
}
