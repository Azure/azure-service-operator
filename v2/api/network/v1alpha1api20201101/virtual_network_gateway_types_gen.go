// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	alpha20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of VirtualNetworkGateway. Use v1beta20201101.VirtualNetworkGateway instead
type VirtualNetworkGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworkGateways_Spec  `json:"spec,omitempty"`
	Status            VirtualNetworkGateway_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworkGateway{}

// GetConditions returns the conditions of the resource
func (gateway *VirtualNetworkGateway) GetConditions() conditions.Conditions {
	return gateway.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (gateway *VirtualNetworkGateway) SetConditions(conditions conditions.Conditions) {
	gateway.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworkGateway{}

// ConvertFrom populates our VirtualNetworkGateway from the provided hub VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20201101s.VirtualNetworkGateway

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = gateway.AssignPropertiesFromVirtualNetworkGateway(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to gateway")
	}

	return nil
}

// ConvertTo populates the provided hub VirtualNetworkGateway from our VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20201101s.VirtualNetworkGateway
	err := gateway.AssignPropertiesToVirtualNetworkGateway(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from gateway")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-virtualnetworkgateway,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworkgateways.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &VirtualNetworkGateway{}

// Default applies defaults to the VirtualNetworkGateway resource
func (gateway *VirtualNetworkGateway) Default() {
	gateway.defaultImpl()
	var temp interface{} = gateway
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (gateway *VirtualNetworkGateway) defaultAzureName() {
	if gateway.Spec.AzureName == "" {
		gateway.Spec.AzureName = gateway.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworkGateway resource
func (gateway *VirtualNetworkGateway) defaultImpl() { gateway.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetworkGateway{}

// AzureName returns the Azure name of the resource
func (gateway *VirtualNetworkGateway) AzureName() string {
	return gateway.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (gateway VirtualNetworkGateway) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (gateway *VirtualNetworkGateway) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (gateway *VirtualNetworkGateway) GetSpec() genruntime.ConvertibleSpec {
	return &gateway.Spec
}

// GetStatus returns the status of this resource
func (gateway *VirtualNetworkGateway) GetStatus() genruntime.ConvertibleStatus {
	return &gateway.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworkGateways"
func (gateway *VirtualNetworkGateway) GetType() string {
	return "Microsoft.Network/virtualNetworkGateways"
}

// NewEmptyStatus returns a new empty (blank) status
func (gateway *VirtualNetworkGateway) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &VirtualNetworkGateway_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (gateway *VirtualNetworkGateway) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(gateway.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  gateway.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (gateway *VirtualNetworkGateway) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualNetworkGateway_STATUS); ok {
		gateway.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualNetworkGateway_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	gateway.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-virtualnetworkgateway,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkgateways,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworkgateways.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &VirtualNetworkGateway{}

// ValidateCreate validates the creation of the resource
func (gateway *VirtualNetworkGateway) ValidateCreate() error {
	validations := gateway.createValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (gateway *VirtualNetworkGateway) ValidateDelete() error {
	validations := gateway.deleteValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (gateway *VirtualNetworkGateway) ValidateUpdate(old runtime.Object) error {
	validations := gateway.updateValidations()
	var temp interface{} = gateway
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (gateway *VirtualNetworkGateway) createValidations() []func() error {
	return []func() error{gateway.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (gateway *VirtualNetworkGateway) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (gateway *VirtualNetworkGateway) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return gateway.validateResourceReferences()
		},
		gateway.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (gateway *VirtualNetworkGateway) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&gateway.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (gateway *VirtualNetworkGateway) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*VirtualNetworkGateway)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, gateway)
}

// AssignPropertiesFromVirtualNetworkGateway populates our VirtualNetworkGateway from the provided source VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) AssignPropertiesFromVirtualNetworkGateway(source *alpha20201101s.VirtualNetworkGateway) error {

	// ObjectMeta
	gateway.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworkGateways_Spec
	err := spec.AssignPropertiesFromVirtualNetworkGatewaysSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpec() to populate field Spec")
	}
	gateway.Spec = spec

	// Status
	var status VirtualNetworkGateway_STATUS
	err = status.AssignPropertiesFromVirtualNetworkGatewaySTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySTATUS() to populate field Status")
	}
	gateway.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGateway populates the provided destination VirtualNetworkGateway from our VirtualNetworkGateway
func (gateway *VirtualNetworkGateway) AssignPropertiesToVirtualNetworkGateway(destination *alpha20201101s.VirtualNetworkGateway) error {

	// ObjectMeta
	destination.ObjectMeta = *gateway.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20201101s.VirtualNetworkGateways_Spec
	err := gateway.Spec.AssignPropertiesToVirtualNetworkGatewaysSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20201101s.VirtualNetworkGateway_STATUS
	err = gateway.Status.AssignPropertiesToVirtualNetworkGatewaySTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (gateway *VirtualNetworkGateway) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: gateway.Spec.OriginalVersion(),
		Kind:    "VirtualNetworkGateway",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of VirtualNetworkGateway. Use v1beta20201101.VirtualNetworkGateway instead
type VirtualNetworkGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworkGateway `json:"items"`
}

// Deprecated version of VirtualNetworkGateway_STATUS. Use v1beta20201101.VirtualNetworkGateway_STATUS instead
type VirtualNetworkGateway_STATUS struct {
	ActiveActive *bool               `json:"activeActive,omitempty"`
	BgpSettings  *BgpSettings_STATUS `json:"bgpSettings,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                     []conditions.Condition                                           `json:"conditions,omitempty"`
	CustomRoutes                   *AddressSpace_STATUS                                             `json:"customRoutes,omitempty"`
	EnableBgp                      *bool                                                            `json:"enableBgp,omitempty"`
	EnableDnsForwarding            *bool                                                            `json:"enableDnsForwarding,omitempty"`
	EnablePrivateIpAddress         *bool                                                            `json:"enablePrivateIpAddress,omitempty"`
	Etag                           *string                                                          `json:"etag,omitempty"`
	ExtendedLocation               *ExtendedLocation_STATUS                                         `json:"extendedLocation,omitempty"`
	GatewayDefaultSite             *SubResource_STATUS                                              `json:"gatewayDefaultSite,omitempty"`
	GatewayType                    *VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType          `json:"gatewayType,omitempty"`
	Id                             *string                                                          `json:"id,omitempty"`
	InboundDnsForwardingEndpoint   *string                                                          `json:"inboundDnsForwardingEndpoint,omitempty"`
	IpConfigurations               []VirtualNetworkGatewayIPConfiguration_STATUS                    `json:"ipConfigurations,omitempty"`
	Location                       *string                                                          `json:"location,omitempty"`
	Name                           *string                                                          `json:"name,omitempty"`
	ProvisioningState              *ProvisioningState_STATUS                                        `json:"provisioningState,omitempty"`
	ResourceGuid                   *string                                                          `json:"resourceGuid,omitempty"`
	Sku                            *VirtualNetworkGatewaySku_STATUS                                 `json:"sku,omitempty"`
	Tags                           map[string]string                                                `json:"tags,omitempty"`
	Type                           *string                                                          `json:"type,omitempty"`
	VNetExtendedLocationResourceId *string                                                          `json:"vNetExtendedLocationResourceId,omitempty"`
	VpnClientConfiguration         *VpnClientConfiguration_STATUS                                   `json:"vpnClientConfiguration,omitempty"`
	VpnGatewayGeneration           *VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration `json:"vpnGatewayGeneration,omitempty"`
	VpnType                        *VirtualNetworkGatewayPropertiesFormatSTATUSVpnType              `json:"vpnType,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetworkGateway_STATUS{}

// ConvertStatusFrom populates our VirtualNetworkGateway_STATUS from the provided source
func (gateway *VirtualNetworkGateway_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20201101s.VirtualNetworkGateway_STATUS)
	if ok {
		// Populate our instance from source
		return gateway.AssignPropertiesFromVirtualNetworkGatewaySTATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20201101s.VirtualNetworkGateway_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = gateway.AssignPropertiesFromVirtualNetworkGatewaySTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetworkGateway_STATUS
func (gateway *VirtualNetworkGateway_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20201101s.VirtualNetworkGateway_STATUS)
	if ok {
		// Populate destination from our instance
		return gateway.AssignPropertiesToVirtualNetworkGatewaySTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201101s.VirtualNetworkGateway_STATUS{}
	err := gateway.AssignPropertiesToVirtualNetworkGatewaySTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetworkGateway_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateway *VirtualNetworkGateway_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateway_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateway *VirtualNetworkGateway_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateway_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateway_STATUSARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveActive != nil {
			activeActive := *typedInput.Properties.ActiveActive
			gateway.ActiveActive = &activeActive
		}
	}

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpSettings != nil {
			var bgpSettings1 BgpSettings_STATUS
			err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
			if err != nil {
				return err
			}
			bgpSettings := bgpSettings1
			gateway.BgpSettings = &bgpSettings
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomRoutes != nil {
			var customRoutes1 AddressSpace_STATUS
			err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
			if err != nil {
				return err
			}
			customRoutes := customRoutes1
			gateway.CustomRoutes = &customRoutes
		}
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBgp != nil {
			enableBgp := *typedInput.Properties.EnableBgp
			gateway.EnableBgp = &enableBgp
		}
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDnsForwarding != nil {
			enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
			gateway.EnableDnsForwarding = &enableDnsForwarding
		}
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePrivateIpAddress != nil {
			enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
			gateway.EnablePrivateIpAddress = &enablePrivateIpAddress
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		gateway.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		gateway.ExtendedLocation = &extendedLocation
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayDefaultSite != nil {
			var gatewayDefaultSite1 SubResource_STATUS
			err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
			if err != nil {
				return err
			}
			gatewayDefaultSite := gatewayDefaultSite1
			gateway.GatewayDefaultSite = &gatewayDefaultSite
		}
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayType != nil {
			gatewayType := *typedInput.Properties.GatewayType
			gateway.GatewayType = &gatewayType
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		gateway.Id = &id
	}

	// Set property ‘InboundDnsForwardingEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.InboundDnsForwardingEndpoint != nil {
			inboundDnsForwardingEndpoint := *typedInput.Properties.InboundDnsForwardingEndpoint
			gateway.InboundDnsForwardingEndpoint = &inboundDnsForwardingEndpoint
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 VirtualNetworkGatewayIPConfiguration_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.IpConfigurations = append(gateway.IpConfigurations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateway.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gateway.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			gateway.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			gateway.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 VirtualNetworkGatewaySku_STATUS
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			gateway.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateway.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			gateway.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		gateway.Type = &typeVar
	}

	// Set property ‘VNetExtendedLocationResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VNetExtendedLocationResourceId != nil {
			vNetExtendedLocationResourceId := *typedInput.Properties.VNetExtendedLocationResourceId
			gateway.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
		}
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnClientConfiguration != nil {
			var vpnClientConfiguration1 VpnClientConfiguration_STATUS
			err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
			if err != nil {
				return err
			}
			vpnClientConfiguration := vpnClientConfiguration1
			gateway.VpnClientConfiguration = &vpnClientConfiguration
		}
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnGatewayGeneration != nil {
			vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
			gateway.VpnGatewayGeneration = &vpnGatewayGeneration
		}
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnType != nil {
			vpnType := *typedInput.Properties.VpnType
			gateway.VpnType = &vpnType
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySTATUS populates our VirtualNetworkGateway_STATUS from the provided source VirtualNetworkGateway_STATUS
func (gateway *VirtualNetworkGateway_STATUS) AssignPropertiesFromVirtualNetworkGatewaySTATUS(source *alpha20201101s.VirtualNetworkGateway_STATUS) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		gateway.ActiveActive = &activeActive
	} else {
		gateway.ActiveActive = nil
	}

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings_STATUS
		err := bgpSetting.AssignPropertiesFromBgpSettingsSTATUS(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBgpSettingsSTATUS() to populate field BgpSettings")
		}
		gateway.BgpSettings = &bgpSetting
	} else {
		gateway.BgpSettings = nil
	}

	// Conditions
	gateway.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace_STATUS
		err := customRoute.AssignPropertiesFromAddressSpaceSTATUS(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpaceSTATUS() to populate field CustomRoutes")
		}
		gateway.CustomRoutes = &customRoute
	} else {
		gateway.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		gateway.EnableBgp = &enableBgp
	} else {
		gateway.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		gateway.EnableDnsForwarding = &enableDnsForwarding
	} else {
		gateway.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		gateway.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		gateway.EnablePrivateIpAddress = nil
	}

	// Etag
	gateway.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocationSTATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		gateway.ExtendedLocation = &extendedLocation
	} else {
		gateway.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource_STATUS
		err := gatewayDefaultSite.AssignPropertiesFromSubResourceSTATUS(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSTATUS() to populate field GatewayDefaultSite")
		}
		gateway.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		gateway.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType(*source.GatewayType)
		gateway.GatewayType = &gatewayType
	} else {
		gateway.GatewayType = nil
	}

	// Id
	gateway.Id = genruntime.ClonePointerToString(source.Id)

	// InboundDnsForwardingEndpoint
	gateway.InboundDnsForwardingEndpoint = genruntime.ClonePointerToString(source.InboundDnsForwardingEndpoint)

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]VirtualNetworkGatewayIPConfiguration_STATUS, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration VirtualNetworkGatewayIPConfiguration_STATUS
			err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewayIPConfigurationSTATUS(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewayIPConfigurationSTATUS() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		gateway.IpConfigurations = ipConfigurationList
	} else {
		gateway.IpConfigurations = nil
	}

	// Location
	gateway.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	gateway.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		gateway.ProvisioningState = &provisioningState
	} else {
		gateway.ProvisioningState = nil
	}

	// ResourceGuid
	gateway.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku_STATUS
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySkuSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySkuSTATUS() to populate field Sku")
		}
		gateway.Sku = &sku
	} else {
		gateway.Sku = nil
	}

	// Tags
	gateway.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	gateway.Type = genruntime.ClonePointerToString(source.Type)

	// VNetExtendedLocationResourceId
	gateway.VNetExtendedLocationResourceId = genruntime.ClonePointerToString(source.VNetExtendedLocationResourceId)

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VpnClientConfiguration_STATUS
		err := vpnClientConfiguration.AssignPropertiesFromVpnClientConfigurationSTATUS(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVpnClientConfigurationSTATUS() to populate field VpnClientConfiguration")
		}
		gateway.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		gateway.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration(*source.VpnGatewayGeneration)
		gateway.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		gateway.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewayPropertiesFormatSTATUSVpnType(*source.VpnType)
		gateway.VpnType = &vpnType
	} else {
		gateway.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySTATUS populates the provided destination VirtualNetworkGateway_STATUS from our VirtualNetworkGateway_STATUS
func (gateway *VirtualNetworkGateway_STATUS) AssignPropertiesToVirtualNetworkGatewaySTATUS(destination *alpha20201101s.VirtualNetworkGateway_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if gateway.ActiveActive != nil {
		activeActive := *gateway.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// BgpSettings
	if gateway.BgpSettings != nil {
		var bgpSetting alpha20201101s.BgpSettings_STATUS
		err := gateway.BgpSettings.AssignPropertiesToBgpSettingsSTATUS(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBgpSettingsSTATUS() to populate field BgpSettings")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(gateway.Conditions)

	// CustomRoutes
	if gateway.CustomRoutes != nil {
		var customRoute alpha20201101s.AddressSpace_STATUS
		err := gateway.CustomRoutes.AssignPropertiesToAddressSpaceSTATUS(&customRoute)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpaceSTATUS() to populate field CustomRoutes")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if gateway.EnableBgp != nil {
		enableBgp := *gateway.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if gateway.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateway.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if gateway.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateway.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(gateway.Etag)

	// ExtendedLocation
	if gateway.ExtendedLocation != nil {
		var extendedLocation alpha20201101s.ExtendedLocation_STATUS
		err := gateway.ExtendedLocation.AssignPropertiesToExtendedLocationSTATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// GatewayDefaultSite
	if gateway.GatewayDefaultSite != nil {
		var gatewayDefaultSite alpha20201101s.SubResource_STATUS
		err := gateway.GatewayDefaultSite.AssignPropertiesToSubResourceSTATUS(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSTATUS() to populate field GatewayDefaultSite")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if gateway.GatewayType != nil {
		gatewayType := string(*gateway.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(gateway.Id)

	// InboundDnsForwardingEndpoint
	destination.InboundDnsForwardingEndpoint = genruntime.ClonePointerToString(gateway.InboundDnsForwardingEndpoint)

	// IpConfigurations
	if gateway.IpConfigurations != nil {
		ipConfigurationList := make([]alpha20201101s.VirtualNetworkGatewayIPConfiguration_STATUS, len(gateway.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range gateway.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration alpha20201101s.VirtualNetworkGatewayIPConfiguration_STATUS
			err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewayIPConfigurationSTATUS(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewayIPConfigurationSTATUS() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(gateway.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(gateway.Name)

	// ProvisioningState
	if gateway.ProvisioningState != nil {
		provisioningState := string(*gateway.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(gateway.ResourceGuid)

	// Sku
	if gateway.Sku != nil {
		var sku alpha20201101s.VirtualNetworkGatewaySku_STATUS
		err := gateway.Sku.AssignPropertiesToVirtualNetworkGatewaySkuSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySkuSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateway.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(gateway.Type)

	// VNetExtendedLocationResourceId
	destination.VNetExtendedLocationResourceId = genruntime.ClonePointerToString(gateway.VNetExtendedLocationResourceId)

	// VpnClientConfiguration
	if gateway.VpnClientConfiguration != nil {
		var vpnClientConfiguration alpha20201101s.VpnClientConfiguration_STATUS
		err := gateway.VpnClientConfiguration.AssignPropertiesToVpnClientConfigurationSTATUS(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVpnClientConfigurationSTATUS() to populate field VpnClientConfiguration")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if gateway.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*gateway.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if gateway.VpnType != nil {
		vpnType := string(*gateway.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkGateways_Spec struct {
	ActiveActive *bool `json:"activeActive,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName              string                                                    `json:"azureName,omitempty"`
	BgpSettings            *BgpSettings                                              `json:"bgpSettings,omitempty"`
	CustomRoutes           *AddressSpace                                             `json:"customRoutes,omitempty"`
	EnableBgp              *bool                                                     `json:"enableBgp,omitempty"`
	EnableDnsForwarding    *bool                                                     `json:"enableDnsForwarding,omitempty"`
	EnablePrivateIpAddress *bool                                                     `json:"enablePrivateIpAddress,omitempty"`
	GatewayDefaultSite     *SubResource                                              `json:"gatewayDefaultSite,omitempty"`
	GatewayType            *VirtualNetworkGatewaysSpecPropertiesGatewayType          `json:"gatewayType,omitempty"`
	IpConfigurations       []VirtualNetworkGateways_Spec_Properties_IpConfigurations `json:"ipConfigurations,omitempty"`
	Location               *string                                                   `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                                 *genruntime.KnownResourceReference                             `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Sku                                   *VirtualNetworkGatewaySku                                      `json:"sku,omitempty"`
	Tags                                  map[string]string                                              `json:"tags,omitempty"`
	VNetExtendedLocationResourceReference *genruntime.ResourceReference                                  `armReference:"VNetExtendedLocationResourceId" json:"vNetExtendedLocationResourceReference,omitempty"`
	VirtualNetworkExtendedLocation        *ExtendedLocation                                              `json:"virtualNetworkExtendedLocation,omitempty"`
	VpnClientConfiguration                *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`
	VpnGatewayGeneration                  *VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration      `json:"vpnGatewayGeneration,omitempty"`
	VpnType                               *VirtualNetworkGatewaysSpecPropertiesVpnType                   `json:"vpnType,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gateways *VirtualNetworkGateways_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gateways == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_SpecARM{}

	// Set property ‘Location’:
	if gateways.Location != nil {
		location := *gateways.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if gateways.ActiveActive != nil ||
		gateways.BgpSettings != nil ||
		gateways.CustomRoutes != nil ||
		gateways.EnableBgp != nil ||
		gateways.EnableDnsForwarding != nil ||
		gateways.EnablePrivateIpAddress != nil ||
		gateways.GatewayDefaultSite != nil ||
		gateways.GatewayType != nil ||
		gateways.IpConfigurations != nil ||
		gateways.Sku != nil ||
		gateways.VNetExtendedLocationResourceReference != nil ||
		gateways.VirtualNetworkExtendedLocation != nil ||
		gateways.VpnClientConfiguration != nil ||
		gateways.VpnGatewayGeneration != nil ||
		gateways.VpnType != nil {
		result.Properties = &VirtualNetworkGateways_Spec_PropertiesARM{}
	}
	if gateways.ActiveActive != nil {
		activeActive := *gateways.ActiveActive
		result.Properties.ActiveActive = &activeActive
	}
	if gateways.BgpSettings != nil {
		bgpSettingsARM, err := (*gateways.BgpSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bgpSettings := *bgpSettingsARM.(*BgpSettingsARM)
		result.Properties.BgpSettings = &bgpSettings
	}
	if gateways.CustomRoutes != nil {
		customRoutesARM, err := (*gateways.CustomRoutes).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		customRoutes := *customRoutesARM.(*AddressSpaceARM)
		result.Properties.CustomRoutes = &customRoutes
	}
	if gateways.EnableBgp != nil {
		enableBgp := *gateways.EnableBgp
		result.Properties.EnableBgp = &enableBgp
	}
	if gateways.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateways.EnableDnsForwarding
		result.Properties.EnableDnsForwarding = &enableDnsForwarding
	}
	if gateways.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateways.EnablePrivateIpAddress
		result.Properties.EnablePrivateIpAddress = &enablePrivateIpAddress
	}
	if gateways.GatewayDefaultSite != nil {
		gatewayDefaultSiteARM, err := (*gateways.GatewayDefaultSite).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		gatewayDefaultSite := *gatewayDefaultSiteARM.(*SubResourceARM)
		result.Properties.GatewayDefaultSite = &gatewayDefaultSite
	}
	if gateways.GatewayType != nil {
		gatewayType := *gateways.GatewayType
		result.Properties.GatewayType = &gatewayType
	}
	for _, item := range gateways.IpConfigurations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpConfigurations = append(result.Properties.IpConfigurations, *itemARM.(*VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM))
	}
	if gateways.Sku != nil {
		skuARM, err := (*gateways.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*VirtualNetworkGatewaySkuARM)
		result.Properties.Sku = &sku
	}
	if gateways.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*gateways.VNetExtendedLocationResourceReference)
		if err != nil {
			return nil, err
		}
		vNetExtendedLocationResourceId := vNetExtendedLocationResourceIdARMID
		result.Properties.VNetExtendedLocationResourceId = &vNetExtendedLocationResourceId
	}
	if gateways.VirtualNetworkExtendedLocation != nil {
		virtualNetworkExtendedLocationARM, err := (*gateways.VirtualNetworkExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		virtualNetworkExtendedLocation := *virtualNetworkExtendedLocationARM.(*ExtendedLocationARM)
		result.Properties.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	}
	if gateways.VpnClientConfiguration != nil {
		vpnClientConfigurationARM, err := (*gateways.VpnClientConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vpnClientConfiguration := *vpnClientConfigurationARM.(*VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM)
		result.Properties.VpnClientConfiguration = &vpnClientConfiguration
	}
	if gateways.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := *gateways.VpnGatewayGeneration
		result.Properties.VpnGatewayGeneration = &vpnGatewayGeneration
	}
	if gateways.VpnType != nil {
		vpnType := *gateways.VpnType
		result.Properties.VpnType = &vpnType
	}

	// Set property ‘Tags’:
	if gateways.Tags != nil {
		result.Tags = make(map[string]string, len(gateways.Tags))
		for key, value := range gateways.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateways *VirtualNetworkGateways_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateways *VirtualNetworkGateways_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_SpecARM, got %T", armInput)
	}

	// Set property ‘ActiveActive’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveActive != nil {
			activeActive := *typedInput.Properties.ActiveActive
			gateways.ActiveActive = &activeActive
		}
	}

	// Set property ‘AzureName’:
	gateways.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BgpSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpSettings != nil {
			var bgpSettings1 BgpSettings
			err := bgpSettings1.PopulateFromARM(owner, *typedInput.Properties.BgpSettings)
			if err != nil {
				return err
			}
			bgpSettings := bgpSettings1
			gateways.BgpSettings = &bgpSettings
		}
	}

	// Set property ‘CustomRoutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomRoutes != nil {
			var customRoutes1 AddressSpace
			err := customRoutes1.PopulateFromARM(owner, *typedInput.Properties.CustomRoutes)
			if err != nil {
				return err
			}
			customRoutes := customRoutes1
			gateways.CustomRoutes = &customRoutes
		}
	}

	// Set property ‘EnableBgp’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableBgp != nil {
			enableBgp := *typedInput.Properties.EnableBgp
			gateways.EnableBgp = &enableBgp
		}
	}

	// Set property ‘EnableDnsForwarding’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDnsForwarding != nil {
			enableDnsForwarding := *typedInput.Properties.EnableDnsForwarding
			gateways.EnableDnsForwarding = &enableDnsForwarding
		}
	}

	// Set property ‘EnablePrivateIpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnablePrivateIpAddress != nil {
			enablePrivateIpAddress := *typedInput.Properties.EnablePrivateIpAddress
			gateways.EnablePrivateIpAddress = &enablePrivateIpAddress
		}
	}

	// Set property ‘GatewayDefaultSite’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayDefaultSite != nil {
			var gatewayDefaultSite1 SubResource
			err := gatewayDefaultSite1.PopulateFromARM(owner, *typedInput.Properties.GatewayDefaultSite)
			if err != nil {
				return err
			}
			gatewayDefaultSite := gatewayDefaultSite1
			gateways.GatewayDefaultSite = &gatewayDefaultSite
		}
	}

	// Set property ‘GatewayType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GatewayType != nil {
			gatewayType := *typedInput.Properties.GatewayType
			gateways.GatewayType = &gatewayType
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 VirtualNetworkGateways_Spec_Properties_IpConfigurations
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateways.IpConfigurations = append(gateways.IpConfigurations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateways.Location = &location
	}

	// Set property ‘Owner’:
	gateways.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 VirtualNetworkGatewaySku
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			gateways.Sku = &sku
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateways.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			gateways.Tags[key] = value
		}
	}

	// no assignment for property ‘VNetExtendedLocationResourceReference’

	// Set property ‘VirtualNetworkExtendedLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VirtualNetworkExtendedLocation != nil {
			var virtualNetworkExtendedLocation1 ExtendedLocation
			err := virtualNetworkExtendedLocation1.PopulateFromARM(owner, *typedInput.Properties.VirtualNetworkExtendedLocation)
			if err != nil {
				return err
			}
			virtualNetworkExtendedLocation := virtualNetworkExtendedLocation1
			gateways.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
		}
	}

	// Set property ‘VpnClientConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnClientConfiguration != nil {
			var vpnClientConfiguration1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
			err := vpnClientConfiguration1.PopulateFromARM(owner, *typedInput.Properties.VpnClientConfiguration)
			if err != nil {
				return err
			}
			vpnClientConfiguration := vpnClientConfiguration1
			gateways.VpnClientConfiguration = &vpnClientConfiguration
		}
	}

	// Set property ‘VpnGatewayGeneration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnGatewayGeneration != nil {
			vpnGatewayGeneration := *typedInput.Properties.VpnGatewayGeneration
			gateways.VpnGatewayGeneration = &vpnGatewayGeneration
		}
	}

	// Set property ‘VpnType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VpnType != nil {
			vpnType := *typedInput.Properties.VpnType
			gateways.VpnType = &vpnType
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworkGateways_Spec{}

// ConvertSpecFrom populates our VirtualNetworkGateways_Spec from the provided source
func (gateways *VirtualNetworkGateways_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20201101s.VirtualNetworkGateways_Spec)
	if ok {
		// Populate our instance from source
		return gateways.AssignPropertiesFromVirtualNetworkGatewaysSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20201101s.VirtualNetworkGateways_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = gateways.AssignPropertiesFromVirtualNetworkGatewaysSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworkGateways_Spec
func (gateways *VirtualNetworkGateways_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20201101s.VirtualNetworkGateways_Spec)
	if ok {
		// Populate destination from our instance
		return gateways.AssignPropertiesToVirtualNetworkGatewaysSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201101s.VirtualNetworkGateways_Spec{}
	err := gateways.AssignPropertiesToVirtualNetworkGatewaysSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpec populates our VirtualNetworkGateways_Spec from the provided source VirtualNetworkGateways_Spec
func (gateways *VirtualNetworkGateways_Spec) AssignPropertiesFromVirtualNetworkGatewaysSpec(source *alpha20201101s.VirtualNetworkGateways_Spec) error {

	// ActiveActive
	if source.ActiveActive != nil {
		activeActive := *source.ActiveActive
		gateways.ActiveActive = &activeActive
	} else {
		gateways.ActiveActive = nil
	}

	// AzureName
	gateways.AzureName = source.AzureName

	// BgpSettings
	if source.BgpSettings != nil {
		var bgpSetting BgpSettings
		err := bgpSetting.AssignPropertiesFromBgpSettings(source.BgpSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBgpSettings() to populate field BgpSettings")
		}
		gateways.BgpSettings = &bgpSetting
	} else {
		gateways.BgpSettings = nil
	}

	// CustomRoutes
	if source.CustomRoutes != nil {
		var customRoute AddressSpace
		err := customRoute.AssignPropertiesFromAddressSpace(source.CustomRoutes)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace() to populate field CustomRoutes")
		}
		gateways.CustomRoutes = &customRoute
	} else {
		gateways.CustomRoutes = nil
	}

	// EnableBgp
	if source.EnableBgp != nil {
		enableBgp := *source.EnableBgp
		gateways.EnableBgp = &enableBgp
	} else {
		gateways.EnableBgp = nil
	}

	// EnableDnsForwarding
	if source.EnableDnsForwarding != nil {
		enableDnsForwarding := *source.EnableDnsForwarding
		gateways.EnableDnsForwarding = &enableDnsForwarding
	} else {
		gateways.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if source.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *source.EnablePrivateIpAddress
		gateways.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		gateways.EnablePrivateIpAddress = nil
	}

	// GatewayDefaultSite
	if source.GatewayDefaultSite != nil {
		var gatewayDefaultSite SubResource
		err := gatewayDefaultSite.AssignPropertiesFromSubResource(source.GatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field GatewayDefaultSite")
		}
		gateways.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		gateways.GatewayDefaultSite = nil
	}

	// GatewayType
	if source.GatewayType != nil {
		gatewayType := VirtualNetworkGatewaysSpecPropertiesGatewayType(*source.GatewayType)
		gateways.GatewayType = &gatewayType
	} else {
		gateways.GatewayType = nil
	}

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]VirtualNetworkGateways_Spec_Properties_IpConfigurations, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration VirtualNetworkGateways_Spec_Properties_IpConfigurations
			err := ipConfiguration.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		gateways.IpConfigurations = ipConfigurationList
	} else {
		gateways.IpConfigurations = nil
	}

	// Location
	gateways.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		gateways.Owner = &owner
	} else {
		gateways.Owner = nil
	}

	// Sku
	if source.Sku != nil {
		var sku VirtualNetworkGatewaySku
		err := sku.AssignPropertiesFromVirtualNetworkGatewaySku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaySku() to populate field Sku")
		}
		gateways.Sku = &sku
	} else {
		gateways.Sku = nil
	}

	// Tags
	gateways.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VNetExtendedLocationResourceReference
	if source.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := source.VNetExtendedLocationResourceReference.Copy()
		gateways.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		gateways.VNetExtendedLocationResourceReference = nil
	}

	// VirtualNetworkExtendedLocation
	if source.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation ExtendedLocation
		err := virtualNetworkExtendedLocation.AssignPropertiesFromExtendedLocation(source.VirtualNetworkExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field VirtualNetworkExtendedLocation")
		}
		gateways.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	} else {
		gateways.VirtualNetworkExtendedLocation = nil
	}

	// VpnClientConfiguration
	if source.VpnClientConfiguration != nil {
		var vpnClientConfiguration VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := vpnClientConfiguration.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(source.VpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration() to populate field VpnClientConfiguration")
		}
		gateways.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		gateways.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if source.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration(*source.VpnGatewayGeneration)
		gateways.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		gateways.VpnGatewayGeneration = nil
	}

	// VpnType
	if source.VpnType != nil {
		vpnType := VirtualNetworkGatewaysSpecPropertiesVpnType(*source.VpnType)
		gateways.VpnType = &vpnType
	} else {
		gateways.VpnType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpec populates the provided destination VirtualNetworkGateways_Spec from our VirtualNetworkGateways_Spec
func (gateways *VirtualNetworkGateways_Spec) AssignPropertiesToVirtualNetworkGatewaysSpec(destination *alpha20201101s.VirtualNetworkGateways_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveActive
	if gateways.ActiveActive != nil {
		activeActive := *gateways.ActiveActive
		destination.ActiveActive = &activeActive
	} else {
		destination.ActiveActive = nil
	}

	// AzureName
	destination.AzureName = gateways.AzureName

	// BgpSettings
	if gateways.BgpSettings != nil {
		var bgpSetting alpha20201101s.BgpSettings
		err := gateways.BgpSettings.AssignPropertiesToBgpSettings(&bgpSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBgpSettings() to populate field BgpSettings")
		}
		destination.BgpSettings = &bgpSetting
	} else {
		destination.BgpSettings = nil
	}

	// CustomRoutes
	if gateways.CustomRoutes != nil {
		var customRoute alpha20201101s.AddressSpace
		err := gateways.CustomRoutes.AssignPropertiesToAddressSpace(&customRoute)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace() to populate field CustomRoutes")
		}
		destination.CustomRoutes = &customRoute
	} else {
		destination.CustomRoutes = nil
	}

	// EnableBgp
	if gateways.EnableBgp != nil {
		enableBgp := *gateways.EnableBgp
		destination.EnableBgp = &enableBgp
	} else {
		destination.EnableBgp = nil
	}

	// EnableDnsForwarding
	if gateways.EnableDnsForwarding != nil {
		enableDnsForwarding := *gateways.EnableDnsForwarding
		destination.EnableDnsForwarding = &enableDnsForwarding
	} else {
		destination.EnableDnsForwarding = nil
	}

	// EnablePrivateIpAddress
	if gateways.EnablePrivateIpAddress != nil {
		enablePrivateIpAddress := *gateways.EnablePrivateIpAddress
		destination.EnablePrivateIpAddress = &enablePrivateIpAddress
	} else {
		destination.EnablePrivateIpAddress = nil
	}

	// GatewayDefaultSite
	if gateways.GatewayDefaultSite != nil {
		var gatewayDefaultSite alpha20201101s.SubResource
		err := gateways.GatewayDefaultSite.AssignPropertiesToSubResource(&gatewayDefaultSite)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field GatewayDefaultSite")
		}
		destination.GatewayDefaultSite = &gatewayDefaultSite
	} else {
		destination.GatewayDefaultSite = nil
	}

	// GatewayType
	if gateways.GatewayType != nil {
		gatewayType := string(*gateways.GatewayType)
		destination.GatewayType = &gatewayType
	} else {
		destination.GatewayType = nil
	}

	// IpConfigurations
	if gateways.IpConfigurations != nil {
		ipConfigurationList := make([]alpha20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations, len(gateways.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range gateways.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration alpha20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations
			err := ipConfigurationItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(gateways.Location)

	// OriginalVersion
	destination.OriginalVersion = gateways.OriginalVersion()

	// Owner
	if gateways.Owner != nil {
		owner := gateways.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Sku
	if gateways.Sku != nil {
		var sku alpha20201101s.VirtualNetworkGatewaySku
		err := gateways.Sku.AssignPropertiesToVirtualNetworkGatewaySku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaySku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateways.Tags)

	// VNetExtendedLocationResourceReference
	if gateways.VNetExtendedLocationResourceReference != nil {
		vNetExtendedLocationResourceReference := gateways.VNetExtendedLocationResourceReference.Copy()
		destination.VNetExtendedLocationResourceReference = &vNetExtendedLocationResourceReference
	} else {
		destination.VNetExtendedLocationResourceReference = nil
	}

	// VirtualNetworkExtendedLocation
	if gateways.VirtualNetworkExtendedLocation != nil {
		var virtualNetworkExtendedLocation alpha20201101s.ExtendedLocation
		err := gateways.VirtualNetworkExtendedLocation.AssignPropertiesToExtendedLocation(&virtualNetworkExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field VirtualNetworkExtendedLocation")
		}
		destination.VirtualNetworkExtendedLocation = &virtualNetworkExtendedLocation
	} else {
		destination.VirtualNetworkExtendedLocation = nil
	}

	// VpnClientConfiguration
	if gateways.VpnClientConfiguration != nil {
		var vpnClientConfiguration alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
		err := gateways.VpnClientConfiguration.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(&vpnClientConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration() to populate field VpnClientConfiguration")
		}
		destination.VpnClientConfiguration = &vpnClientConfiguration
	} else {
		destination.VpnClientConfiguration = nil
	}

	// VpnGatewayGeneration
	if gateways.VpnGatewayGeneration != nil {
		vpnGatewayGeneration := string(*gateways.VpnGatewayGeneration)
		destination.VpnGatewayGeneration = &vpnGatewayGeneration
	} else {
		destination.VpnGatewayGeneration = nil
	}

	// VpnType
	if gateways.VpnType != nil {
		vpnType := string(*gateways.VpnType)
		destination.VpnType = &vpnType
	} else {
		destination.VpnType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (gateways *VirtualNetworkGateways_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (gateways *VirtualNetworkGateways_Spec) SetAzureName(azureName string) {
	gateways.AzureName = azureName
}

// Deprecated version of BgpSettings. Use v1beta20201101.BgpSettings instead
type BgpSettings struct {
	Asn                 *uint32                            `json:"asn,omitempty"`
	BgpPeeringAddress   *string                            `json:"bgpPeeringAddress,omitempty"`
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress `json:"bgpPeeringAddresses,omitempty"`
	PeerWeight          *int                               `json:"peerWeight,omitempty"`
}

var _ genruntime.ARMTransformer = &BgpSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *BgpSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &BgpSettingsARM{}

	// Set property ‘Asn’:
	if settings.Asn != nil {
		asn := *settings.Asn
		result.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if settings.BgpPeeringAddress != nil {
		bgpPeeringAddress := *settings.BgpPeeringAddress
		result.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range settings.BgpPeeringAddresses {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.BgpPeeringAddresses = append(result.BgpPeeringAddresses, *itemARM.(*IPConfigurationBgpPeeringAddressARM))
	}

	// Set property ‘PeerWeight’:
	if settings.PeerWeight != nil {
		peerWeight := *settings.PeerWeight
		result.PeerWeight = &peerWeight
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *BgpSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BgpSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *BgpSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettingsARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		settings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		settings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.BgpPeeringAddresses = append(settings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		settings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettings populates our BgpSettings from the provided source BgpSettings
func (settings *BgpSettings) AssignPropertiesFromBgpSettings(source *alpha20201101s.BgpSettings) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		settings.Asn = &asn
	} else {
		settings.Asn = nil
	}

	// BgpPeeringAddress
	settings.BgpPeeringAddress = genruntime.ClonePointerToString(source.BgpPeeringAddress)

	// BgpPeeringAddresses
	if source.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress, len(source.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress IPConfigurationBgpPeeringAddress
			err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddress(&bgpPeeringAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationBgpPeeringAddress() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		settings.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		settings.BgpPeeringAddresses = nil
	}

	// PeerWeight
	settings.PeerWeight = genruntime.ClonePointerToInt(source.PeerWeight)

	// No error
	return nil
}

// AssignPropertiesToBgpSettings populates the provided destination BgpSettings from our BgpSettings
func (settings *BgpSettings) AssignPropertiesToBgpSettings(destination *alpha20201101s.BgpSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if settings.Asn != nil {
		asn := *settings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	destination.BgpPeeringAddress = genruntime.ClonePointerToString(settings.BgpPeeringAddress)

	// BgpPeeringAddresses
	if settings.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]alpha20201101s.IPConfigurationBgpPeeringAddress, len(settings.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range settings.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress alpha20201101s.IPConfigurationBgpPeeringAddress
			err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddress(&bgpPeeringAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationBgpPeeringAddress() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		destination.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		destination.BgpPeeringAddresses = nil
	}

	// PeerWeight
	destination.PeerWeight = genruntime.ClonePointerToInt(settings.PeerWeight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BgpSettings_STATUS. Use v1beta20201101.BgpSettings_STATUS instead
type BgpSettings_STATUS struct {
	Asn                 *uint32                                   `json:"asn,omitempty"`
	BgpPeeringAddress   *string                                   `json:"bgpPeeringAddress,omitempty"`
	BgpPeeringAddresses []IPConfigurationBgpPeeringAddress_STATUS `json:"bgpPeeringAddresses,omitempty"`
	PeerWeight          *int                                      `json:"peerWeight,omitempty"`
}

var _ genruntime.FromARMConverter = &BgpSettings_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *BgpSettings_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BgpSettings_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *BgpSettings_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BgpSettings_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BgpSettings_STATUSARM, got %T", armInput)
	}

	// Set property ‘Asn’:
	if typedInput.Asn != nil {
		asn := *typedInput.Asn
		settings.Asn = &asn
	}

	// Set property ‘BgpPeeringAddress’:
	if typedInput.BgpPeeringAddress != nil {
		bgpPeeringAddress := *typedInput.BgpPeeringAddress
		settings.BgpPeeringAddress = &bgpPeeringAddress
	}

	// Set property ‘BgpPeeringAddresses’:
	for _, item := range typedInput.BgpPeeringAddresses {
		var item1 IPConfigurationBgpPeeringAddress_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.BgpPeeringAddresses = append(settings.BgpPeeringAddresses, item1)
	}

	// Set property ‘PeerWeight’:
	if typedInput.PeerWeight != nil {
		peerWeight := *typedInput.PeerWeight
		settings.PeerWeight = &peerWeight
	}

	// No error
	return nil
}

// AssignPropertiesFromBgpSettingsSTATUS populates our BgpSettings_STATUS from the provided source BgpSettings_STATUS
func (settings *BgpSettings_STATUS) AssignPropertiesFromBgpSettingsSTATUS(source *alpha20201101s.BgpSettings_STATUS) error {

	// Asn
	if source.Asn != nil {
		asn := *source.Asn
		settings.Asn = &asn
	} else {
		settings.Asn = nil
	}

	// BgpPeeringAddress
	settings.BgpPeeringAddress = genruntime.ClonePointerToString(source.BgpPeeringAddress)

	// BgpPeeringAddresses
	if source.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]IPConfigurationBgpPeeringAddress_STATUS, len(source.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range source.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress IPConfigurationBgpPeeringAddress_STATUS
			err := bgpPeeringAddress.AssignPropertiesFromIPConfigurationBgpPeeringAddressSTATUS(&bgpPeeringAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationBgpPeeringAddressSTATUS() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		settings.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		settings.BgpPeeringAddresses = nil
	}

	// PeerWeight
	settings.PeerWeight = genruntime.ClonePointerToInt(source.PeerWeight)

	// No error
	return nil
}

// AssignPropertiesToBgpSettingsSTATUS populates the provided destination BgpSettings_STATUS from our BgpSettings_STATUS
func (settings *BgpSettings_STATUS) AssignPropertiesToBgpSettingsSTATUS(destination *alpha20201101s.BgpSettings_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Asn
	if settings.Asn != nil {
		asn := *settings.Asn
		destination.Asn = &asn
	} else {
		destination.Asn = nil
	}

	// BgpPeeringAddress
	destination.BgpPeeringAddress = genruntime.ClonePointerToString(settings.BgpPeeringAddress)

	// BgpPeeringAddresses
	if settings.BgpPeeringAddresses != nil {
		bgpPeeringAddressList := make([]alpha20201101s.IPConfigurationBgpPeeringAddress_STATUS, len(settings.BgpPeeringAddresses))
		for bgpPeeringAddressIndex, bgpPeeringAddressItem := range settings.BgpPeeringAddresses {
			// Shadow the loop variable to avoid aliasing
			bgpPeeringAddressItem := bgpPeeringAddressItem
			var bgpPeeringAddress alpha20201101s.IPConfigurationBgpPeeringAddress_STATUS
			err := bgpPeeringAddressItem.AssignPropertiesToIPConfigurationBgpPeeringAddressSTATUS(&bgpPeeringAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationBgpPeeringAddressSTATUS() to populate field BgpPeeringAddresses")
			}
			bgpPeeringAddressList[bgpPeeringAddressIndex] = bgpPeeringAddress
		}
		destination.BgpPeeringAddresses = bgpPeeringAddressList
	} else {
		destination.BgpPeeringAddresses = nil
	}

	// PeerWeight
	destination.PeerWeight = genruntime.ClonePointerToInt(settings.PeerWeight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewayIPConfiguration_STATUS. Use v1beta20201101.VirtualNetworkGatewayIPConfiguration_STATUS instead
type VirtualNetworkGatewayIPConfiguration_STATUS struct {
	Etag                      *string                    `json:"etag,omitempty"`
	Id                        *string                    `json:"id,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	PrivateIPAddress          *string                    `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod *IPAllocationMethod_STATUS `json:"privateIPAllocationMethod,omitempty"`
	ProvisioningState         *ProvisioningState_STATUS  `json:"provisioningState,omitempty"`
	PublicIPAddress           *SubResource_STATUS        `json:"publicIPAddress,omitempty"`
	Subnet                    *SubResource_STATUS        `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewayIPConfiguration_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VirtualNetworkGatewayIPConfiguration_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewayIPConfiguration_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VirtualNetworkGatewayIPConfiguration_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewayIPConfiguration_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewayIPConfiguration_STATUSARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		configuration.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		configuration.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			configuration.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			configuration.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource_STATUS
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			configuration.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_STATUS
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewayIPConfigurationSTATUS populates our VirtualNetworkGatewayIPConfiguration_STATUS from the provided source VirtualNetworkGatewayIPConfiguration_STATUS
func (configuration *VirtualNetworkGatewayIPConfiguration_STATUS) AssignPropertiesFromVirtualNetworkGatewayIPConfigurationSTATUS(source *alpha20201101s.VirtualNetworkGatewayIPConfiguration_STATUS) error {

	// Etag
	configuration.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	configuration.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_STATUS(*source.PrivateIPAllocationMethod)
		configuration.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		configuration.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		configuration.ProvisioningState = &provisioningState
	} else {
		configuration.ProvisioningState = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource_STATUS
		err := publicIPAddress.AssignPropertiesFromSubResourceSTATUS(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSTATUS() to populate field PublicIPAddress")
		}
		configuration.PublicIPAddress = &publicIPAddress
	} else {
		configuration.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_STATUS
		err := subnet.AssignPropertiesFromSubResourceSTATUS(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceSTATUS() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewayIPConfigurationSTATUS populates the provided destination VirtualNetworkGatewayIPConfiguration_STATUS from our VirtualNetworkGatewayIPConfiguration_STATUS
func (configuration *VirtualNetworkGatewayIPConfiguration_STATUS) AssignPropertiesToVirtualNetworkGatewayIPConfigurationSTATUS(destination *alpha20201101s.VirtualNetworkGatewayIPConfiguration_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(configuration.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(configuration.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if configuration.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*configuration.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if configuration.ProvisioningState != nil {
		provisioningState := string(*configuration.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddress
	if configuration.PublicIPAddress != nil {
		var publicIPAddress alpha20201101s.SubResource_STATUS
		err := configuration.PublicIPAddress.AssignPropertiesToSubResourceSTATUS(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSTATUS() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if configuration.Subnet != nil {
		var subnet alpha20201101s.SubResource_STATUS
		err := configuration.Subnet.AssignPropertiesToSubResourceSTATUS(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceSTATUS() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType. Use
// v1beta20201101.VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType instead
type VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType string

const (
	VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType_ExpressRoute = VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType("ExpressRoute")
	VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType_LocalGateway = VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType("LocalGateway")
	VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType_Vpn          = VirtualNetworkGatewayPropertiesFormatSTATUSGatewayType("Vpn")
)

// Deprecated version of VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration. Use
// v1beta20201101.VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration instead
type VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration string

const (
	VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration_Generation1 = VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration("Generation1")
	VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration_Generation2 = VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration("Generation2")
	VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration_None        = VirtualNetworkGatewayPropertiesFormatSTATUSVpnGatewayGeneration("None")
)

// Deprecated version of VirtualNetworkGatewayPropertiesFormatSTATUSVpnType. Use
// v1beta20201101.VirtualNetworkGatewayPropertiesFormatSTATUSVpnType instead
type VirtualNetworkGatewayPropertiesFormatSTATUSVpnType string

const (
	VirtualNetworkGatewayPropertiesFormatSTATUSVpnType_PolicyBased = VirtualNetworkGatewayPropertiesFormatSTATUSVpnType("PolicyBased")
	VirtualNetworkGatewayPropertiesFormatSTATUSVpnType_RouteBased  = VirtualNetworkGatewayPropertiesFormatSTATUSVpnType("RouteBased")
)

// Deprecated version of VirtualNetworkGateways_Spec_Properties_IpConfigurations. Use v1beta20201101.VirtualNetworkGateways_Spec_Properties_IpConfigurations instead
type VirtualNetworkGateways_Spec_Properties_IpConfigurations struct {
	Name                      *string                                                                        `json:"name,omitempty"`
	PrivateIPAllocationMethod *VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
	PublicIPAddress           *SubResource                                                                   `json:"publicIPAddress,omitempty"`
	Subnet                    *SubResource                                                                   `json:"subnet,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_IpConfigurations{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configurations == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM{}

	// Set property ‘Name’:
	if configurations.Name != nil {
		name := *configurations.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if configurations.PrivateIPAllocationMethod != nil ||
		configurations.PublicIPAddress != nil ||
		configurations.Subnet != nil {
		result.Properties = &VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}
	}
	if configurations.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := *configurations.PrivateIPAllocationMethod
		result.Properties.PrivateIPAllocationMethod = &privateIPAllocationMethod
	}
	if configurations.PublicIPAddress != nil {
		publicIPAddressARM, err := (*configurations.PublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicIPAddress := *publicIPAddressARM.(*SubResourceARM)
		result.Properties.PublicIPAddress = &publicIPAddress
	}
	if configurations.Subnet != nil {
		subnetARM, err := (*configurations.Subnet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		subnet := *subnetARM.(*SubResourceARM)
		result.Properties.Subnet = &subnet
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_IpConfigurationsARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configurations.Name = &name
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			configurations.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 SubResource
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			configurations.PublicIPAddress = &publicIPAddress
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configurations.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations populates our VirtualNetworkGateways_Spec_Properties_IpConfigurations from the provided source VirtualNetworkGateways_Spec_Properties_IpConfigurations
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesIpConfigurations(source *alpha20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations) error {

	// Name
	configurations.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod(*source.PrivateIPAllocationMethod)
		configurations.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		configurations.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress SubResource
		err := publicIPAddress.AssignPropertiesFromSubResource(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIPAddress")
		}
		configurations.PublicIPAddress = &publicIPAddress
	} else {
		configurations.PublicIPAddress = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource
		err := subnet.AssignPropertiesFromSubResource(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field Subnet")
		}
		configurations.Subnet = &subnet
	} else {
		configurations.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations populates the provided destination VirtualNetworkGateways_Spec_Properties_IpConfigurations from our VirtualNetworkGateways_Spec_Properties_IpConfigurations
func (configurations *VirtualNetworkGateways_Spec_Properties_IpConfigurations) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesIpConfigurations(destination *alpha20201101s.VirtualNetworkGateways_Spec_Properties_IpConfigurations) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(configurations.Name)

	// PrivateIPAllocationMethod
	if configurations.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*configurations.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// PublicIPAddress
	if configurations.PublicIPAddress != nil {
		var publicIPAddress alpha20201101s.SubResource
		err := configurations.PublicIPAddress.AssignPropertiesToSubResource(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Subnet
	if configurations.Subnet != nil {
		var subnet alpha20201101s.SubResource
		err := configurations.Subnet.AssignPropertiesToSubResource(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration. Use v1beta20201101.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration instead
type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration struct {
	AadAudience                  *string                                                                                      `json:"aadAudience,omitempty"`
	AadIssuer                    *string                                                                                      `json:"aadIssuer,omitempty"`
	AadTenant                    *string                                                                                      `json:"aadTenant,omitempty"`
	RadiusServerAddress          *string                                                                                      `json:"radiusServerAddress,omitempty"`
	RadiusServerSecret           *string                                                                                      `json:"radiusServerSecret,omitempty"`
	RadiusServers                []RadiusServer                                                                               `json:"radiusServers,omitempty"`
	VpnAuthenticationTypes       []VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes           `json:"vpnAuthenticationTypes,omitempty"`
	VpnClientAddressPool         *AddressSpace                                                                                `json:"vpnClientAddressPool,omitempty"`
	VpnClientIpsecPolicies       []IpsecPolicy                                                                                `json:"vpnClientIpsecPolicies,omitempty"`
	VpnClientProtocols           []VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols               `json:"vpnClientProtocols,omitempty"`
	VpnClientRevokedCertificates []VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates `json:"vpnClientRevokedCertificates,omitempty"`
	VpnClientRootCertificates    []VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates    `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM{}

	// Set property ‘AadAudience’:
	if configuration.AadAudience != nil {
		aadAudience := *configuration.AadAudience
		result.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if configuration.AadIssuer != nil {
		aadIssuer := *configuration.AadIssuer
		result.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if configuration.AadTenant != nil {
		aadTenant := *configuration.AadTenant
		result.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if configuration.RadiusServerAddress != nil {
		radiusServerAddress := *configuration.RadiusServerAddress
		result.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if configuration.RadiusServerSecret != nil {
		radiusServerSecret := *configuration.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range configuration.RadiusServers {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.RadiusServers = append(result.RadiusServers, *itemARM.(*RadiusServerARM))
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range configuration.VpnAuthenticationTypes {
		result.VpnAuthenticationTypes = append(result.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if configuration.VpnClientAddressPool != nil {
		vpnClientAddressPoolARM, err := (*configuration.VpnClientAddressPool).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		vpnClientAddressPool := *vpnClientAddressPoolARM.(*AddressSpaceARM)
		result.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range configuration.VpnClientIpsecPolicies {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientIpsecPolicies = append(result.VpnClientIpsecPolicies, *itemARM.(*IpsecPolicyARM))
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range configuration.VpnClientProtocols {
		result.VpnClientProtocols = append(result.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range configuration.VpnClientRevokedCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientRevokedCertificates = append(result.VpnClientRevokedCertificates, *itemARM.(*VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM))
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range configuration.VpnClientRootCertificates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.VpnClientRootCertificates = append(result.VpnClientRootCertificates, *itemARM.(*VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfigurationARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		configuration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		configuration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		configuration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		configuration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		configuration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.RadiusServers = append(configuration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		configuration.VpnAuthenticationTypes = append(configuration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientIpsecPolicies = append(configuration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		configuration.VpnClientProtocols = append(configuration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRevokedCertificates = append(configuration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRootCertificates = append(configuration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(source *alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) error {

	// AadAudience
	configuration.AadAudience = genruntime.ClonePointerToString(source.AadAudience)

	// AadIssuer
	configuration.AadIssuer = genruntime.ClonePointerToString(source.AadIssuer)

	// AadTenant
	configuration.AadTenant = genruntime.ClonePointerToString(source.AadTenant)

	// RadiusServerAddress
	configuration.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerSecret
	configuration.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// RadiusServers
	if source.RadiusServers != nil {
		radiusServerList := make([]RadiusServer, len(source.RadiusServers))
		for radiusServerIndex, radiusServerItem := range source.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer RadiusServer
			err := radiusServer.AssignPropertiesFromRadiusServer(&radiusServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRadiusServer() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		configuration.RadiusServers = radiusServerList
	} else {
		configuration.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if source.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes, len(source.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes(vpnAuthenticationTypeItem)
		}
		configuration.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		configuration.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpace(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace() to populate field VpnClientAddressPool")
		}
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		configuration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if source.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]IpsecPolicy, len(source.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy IpsecPolicy
			err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicy(&vpnClientIpsecPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpsecPolicy() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		configuration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		configuration.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if source.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols, len(source.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols(vpnClientProtocolItem)
		}
		configuration.VpnClientProtocols = vpnClientProtocolList
	} else {
		configuration.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if source.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates, len(source.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
			err := vpnClientRevokedCertificate.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(&vpnClientRevokedCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		configuration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		configuration.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if source.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates, len(source.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
			err := vpnClientRootCertificate.AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(&vpnClientRootCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		configuration.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		configuration.VpnClientRootCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration
func (configuration *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfiguration(destination *alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	destination.AadAudience = genruntime.ClonePointerToString(configuration.AadAudience)

	// AadIssuer
	destination.AadIssuer = genruntime.ClonePointerToString(configuration.AadIssuer)

	// AadTenant
	destination.AadTenant = genruntime.ClonePointerToString(configuration.AadTenant)

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(configuration.RadiusServerAddress)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(configuration.RadiusServerSecret)

	// RadiusServers
	if configuration.RadiusServers != nil {
		radiusServerList := make([]alpha20201101s.RadiusServer, len(configuration.RadiusServers))
		for radiusServerIndex, radiusServerItem := range configuration.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer alpha20201101s.RadiusServer
			err := radiusServerItem.AssignPropertiesToRadiusServer(&radiusServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRadiusServer() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		destination.RadiusServers = radiusServerList
	} else {
		destination.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if configuration.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]string, len(configuration.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range configuration.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
		}
		destination.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		destination.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if configuration.VpnClientAddressPool != nil {
		var vpnClientAddressPool alpha20201101s.AddressSpace
		err := configuration.VpnClientAddressPool.AssignPropertiesToAddressSpace(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace() to populate field VpnClientAddressPool")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if configuration.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]alpha20201101s.IpsecPolicy, len(configuration.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range configuration.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy alpha20201101s.IpsecPolicy
			err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicy(&vpnClientIpsecPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpsecPolicy() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		destination.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if configuration.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]string, len(configuration.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range configuration.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
		}
		destination.VpnClientProtocols = vpnClientProtocolList
	} else {
		destination.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if configuration.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates, len(configuration.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range configuration.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
			err := vpnClientRevokedCertificateItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(&vpnClientRevokedCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		destination.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if configuration.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates, len(configuration.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range configuration.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
			err := vpnClientRootCertificateItem.AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(&vpnClientRootCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		destination.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		destination.VpnClientRootCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewaySku. Use v1beta20201101.VirtualNetworkGatewaySku instead
type VirtualNetworkGatewaySku struct {
	Name *VirtualNetworkGatewaySkuName `json:"name,omitempty"`
	Tier *VirtualNetworkGatewaySkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGatewaySku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gatewaySku *VirtualNetworkGatewaySku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gatewaySku == nil {
		return nil, nil
	}
	result := &VirtualNetworkGatewaySkuARM{}

	// Set property ‘Name’:
	if gatewaySku.Name != nil {
		name := *gatewaySku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if gatewaySku.Tier != nil {
		tier := *gatewaySku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *VirtualNetworkGatewaySku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewaySkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *VirtualNetworkGatewaySku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		gatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySku populates our VirtualNetworkGatewaySku from the provided source VirtualNetworkGatewaySku
func (gatewaySku *VirtualNetworkGatewaySku) AssignPropertiesFromVirtualNetworkGatewaySku(source *alpha20201101s.VirtualNetworkGatewaySku) error {

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySkuName(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySkuTier(*source.Tier)
		gatewaySku.Tier = &tier
	} else {
		gatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySku populates the provided destination VirtualNetworkGatewaySku from our VirtualNetworkGatewaySku
func (gatewaySku *VirtualNetworkGatewaySku) AssignPropertiesToVirtualNetworkGatewaySku(destination *alpha20201101s.VirtualNetworkGatewaySku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if gatewaySku.Tier != nil {
		tier := string(*gatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewaySku_STATUS. Use v1beta20201101.VirtualNetworkGatewaySku_STATUS instead
type VirtualNetworkGatewaySku_STATUS struct {
	Capacity *int                                `json:"capacity,omitempty"`
	Name     *VirtualNetworkGatewaySkuSTATUSName `json:"name,omitempty"`
	Tier     *VirtualNetworkGatewaySkuSTATUSTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkGatewaySku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *VirtualNetworkGatewaySku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGatewaySku_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *VirtualNetworkGatewaySku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGatewaySku_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGatewaySku_STATUSARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		gatewaySku.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		gatewaySku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaySkuSTATUS populates our VirtualNetworkGatewaySku_STATUS from the provided source VirtualNetworkGatewaySku_STATUS
func (gatewaySku *VirtualNetworkGatewaySku_STATUS) AssignPropertiesFromVirtualNetworkGatewaySkuSTATUS(source *alpha20201101s.VirtualNetworkGatewaySku_STATUS) error {

	// Capacity
	gatewaySku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		name := VirtualNetworkGatewaySkuSTATUSName(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := VirtualNetworkGatewaySkuSTATUSTier(*source.Tier)
		gatewaySku.Tier = &tier
	} else {
		gatewaySku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaySkuSTATUS populates the provided destination VirtualNetworkGatewaySku_STATUS from our VirtualNetworkGatewaySku_STATUS
func (gatewaySku *VirtualNetworkGatewaySku_STATUS) AssignPropertiesToVirtualNetworkGatewaySkuSTATUS(destination *alpha20201101s.VirtualNetworkGatewaySku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(gatewaySku.Capacity)

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if gatewaySku.Tier != nil {
		tier := string(*gatewaySku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewaysSpecPropertiesGatewayType. Use
// v1beta20201101.VirtualNetworkGatewaysSpecPropertiesGatewayType instead
// +kubebuilder:validation:Enum={"ExpressRoute","HyperNet","LocalGateway","Vpn"}
type VirtualNetworkGatewaysSpecPropertiesGatewayType string

const (
	VirtualNetworkGatewaysSpecPropertiesGatewayType_ExpressRoute = VirtualNetworkGatewaysSpecPropertiesGatewayType("ExpressRoute")
	VirtualNetworkGatewaysSpecPropertiesGatewayType_HyperNet     = VirtualNetworkGatewaysSpecPropertiesGatewayType("HyperNet")
	VirtualNetworkGatewaysSpecPropertiesGatewayType_LocalGateway = VirtualNetworkGatewaysSpecPropertiesGatewayType("LocalGateway")
	VirtualNetworkGatewaysSpecPropertiesGatewayType_Vpn          = VirtualNetworkGatewaysSpecPropertiesGatewayType("Vpn")
)

// Deprecated version of VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration. Use
// v1beta20201101.VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration instead
// +kubebuilder:validation:Enum={"Generation1","Generation2","None"}
type VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration_Generation1 = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("Generation1")
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration_Generation2 = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("Generation2")
	VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration_None        = VirtualNetworkGatewaysSpecPropertiesVpnGatewayGeneration("None")
)

// Deprecated version of VirtualNetworkGatewaysSpecPropertiesVpnType. Use
// v1beta20201101.VirtualNetworkGatewaysSpecPropertiesVpnType instead
// +kubebuilder:validation:Enum={"PolicyBased","RouteBased"}
type VirtualNetworkGatewaysSpecPropertiesVpnType string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnType_PolicyBased = VirtualNetworkGatewaysSpecPropertiesVpnType("PolicyBased")
	VirtualNetworkGatewaysSpecPropertiesVpnType_RouteBased  = VirtualNetworkGatewaysSpecPropertiesVpnType("RouteBased")
)

// Deprecated version of VpnClientConfiguration_STATUS. Use v1beta20201101.VpnClientConfiguration_STATUS instead
type VpnClientConfiguration_STATUS struct {
	AadAudience                  *string                                              `json:"aadAudience,omitempty"`
	AadIssuer                    *string                                              `json:"aadIssuer,omitempty"`
	AadTenant                    *string                                              `json:"aadTenant,omitempty"`
	RadiusServerAddress          *string                                              `json:"radiusServerAddress,omitempty"`
	RadiusServerSecret           *string                                              `json:"radiusServerSecret,omitempty"`
	RadiusServers                []RadiusServer_STATUS                                `json:"radiusServers,omitempty"`
	VpnAuthenticationTypes       []VpnClientConfigurationSTATUSVpnAuthenticationTypes `json:"vpnAuthenticationTypes,omitempty"`
	VpnClientAddressPool         *AddressSpace_STATUS                                 `json:"vpnClientAddressPool,omitempty"`
	VpnClientIpsecPolicies       []IpsecPolicy_STATUS                                 `json:"vpnClientIpsecPolicies,omitempty"`
	VpnClientProtocols           []VpnClientConfigurationSTATUSVpnClientProtocols     `json:"vpnClientProtocols,omitempty"`
	VpnClientRevokedCertificates []VpnClientRevokedCertificate_STATUS                 `json:"vpnClientRevokedCertificates,omitempty"`
	VpnClientRootCertificates    []VpnClientRootCertificate_STATUS                    `json:"vpnClientRootCertificates,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientConfiguration_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *VpnClientConfiguration_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientConfiguration_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *VpnClientConfiguration_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientConfiguration_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientConfiguration_STATUSARM, got %T", armInput)
	}

	// Set property ‘AadAudience’:
	if typedInput.AadAudience != nil {
		aadAudience := *typedInput.AadAudience
		configuration.AadAudience = &aadAudience
	}

	// Set property ‘AadIssuer’:
	if typedInput.AadIssuer != nil {
		aadIssuer := *typedInput.AadIssuer
		configuration.AadIssuer = &aadIssuer
	}

	// Set property ‘AadTenant’:
	if typedInput.AadTenant != nil {
		aadTenant := *typedInput.AadTenant
		configuration.AadTenant = &aadTenant
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		configuration.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		configuration.RadiusServerSecret = &radiusServerSecret
	}

	// Set property ‘RadiusServers’:
	for _, item := range typedInput.RadiusServers {
		var item1 RadiusServer_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.RadiusServers = append(configuration.RadiusServers, item1)
	}

	// Set property ‘VpnAuthenticationTypes’:
	for _, item := range typedInput.VpnAuthenticationTypes {
		configuration.VpnAuthenticationTypes = append(configuration.VpnAuthenticationTypes, item)
	}

	// Set property ‘VpnClientAddressPool’:
	if typedInput.VpnClientAddressPool != nil {
		var vpnClientAddressPool1 AddressSpace_STATUS
		err := vpnClientAddressPool1.PopulateFromARM(owner, *typedInput.VpnClientAddressPool)
		if err != nil {
			return err
		}
		vpnClientAddressPool := vpnClientAddressPool1
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	}

	// Set property ‘VpnClientIpsecPolicies’:
	for _, item := range typedInput.VpnClientIpsecPolicies {
		var item1 IpsecPolicy_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientIpsecPolicies = append(configuration.VpnClientIpsecPolicies, item1)
	}

	// Set property ‘VpnClientProtocols’:
	for _, item := range typedInput.VpnClientProtocols {
		configuration.VpnClientProtocols = append(configuration.VpnClientProtocols, item)
	}

	// Set property ‘VpnClientRevokedCertificates’:
	for _, item := range typedInput.VpnClientRevokedCertificates {
		var item1 VpnClientRevokedCertificate_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRevokedCertificates = append(configuration.VpnClientRevokedCertificates, item1)
	}

	// Set property ‘VpnClientRootCertificates’:
	for _, item := range typedInput.VpnClientRootCertificates {
		var item1 VpnClientRootCertificate_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.VpnClientRootCertificates = append(configuration.VpnClientRootCertificates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientConfigurationSTATUS populates our VpnClientConfiguration_STATUS from the provided source VpnClientConfiguration_STATUS
func (configuration *VpnClientConfiguration_STATUS) AssignPropertiesFromVpnClientConfigurationSTATUS(source *alpha20201101s.VpnClientConfiguration_STATUS) error {

	// AadAudience
	configuration.AadAudience = genruntime.ClonePointerToString(source.AadAudience)

	// AadIssuer
	configuration.AadIssuer = genruntime.ClonePointerToString(source.AadIssuer)

	// AadTenant
	configuration.AadTenant = genruntime.ClonePointerToString(source.AadTenant)

	// RadiusServerAddress
	configuration.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerSecret
	configuration.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// RadiusServers
	if source.RadiusServers != nil {
		radiusServerList := make([]RadiusServer_STATUS, len(source.RadiusServers))
		for radiusServerIndex, radiusServerItem := range source.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer RadiusServer_STATUS
			err := radiusServer.AssignPropertiesFromRadiusServerSTATUS(&radiusServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRadiusServerSTATUS() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		configuration.RadiusServers = radiusServerList
	} else {
		configuration.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if source.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]VpnClientConfigurationSTATUSVpnAuthenticationTypes, len(source.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range source.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = VpnClientConfigurationSTATUSVpnAuthenticationTypes(vpnAuthenticationTypeItem)
		}
		configuration.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		configuration.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if source.VpnClientAddressPool != nil {
		var vpnClientAddressPool AddressSpace_STATUS
		err := vpnClientAddressPool.AssignPropertiesFromAddressSpaceSTATUS(source.VpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpaceSTATUS() to populate field VpnClientAddressPool")
		}
		configuration.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		configuration.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if source.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]IpsecPolicy_STATUS, len(source.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range source.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy IpsecPolicy_STATUS
			err := vpnClientIpsecPolicy.AssignPropertiesFromIpsecPolicySTATUS(&vpnClientIpsecPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpsecPolicySTATUS() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		configuration.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		configuration.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if source.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]VpnClientConfigurationSTATUSVpnClientProtocols, len(source.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range source.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = VpnClientConfigurationSTATUSVpnClientProtocols(vpnClientProtocolItem)
		}
		configuration.VpnClientProtocols = vpnClientProtocolList
	} else {
		configuration.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if source.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]VpnClientRevokedCertificate_STATUS, len(source.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range source.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate VpnClientRevokedCertificate_STATUS
			err := vpnClientRevokedCertificate.AssignPropertiesFromVpnClientRevokedCertificateSTATUS(&vpnClientRevokedCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRevokedCertificateSTATUS() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		configuration.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		configuration.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if source.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]VpnClientRootCertificate_STATUS, len(source.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range source.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate VpnClientRootCertificate_STATUS
			err := vpnClientRootCertificate.AssignPropertiesFromVpnClientRootCertificateSTATUS(&vpnClientRootCertificateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVpnClientRootCertificateSTATUS() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		configuration.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		configuration.VpnClientRootCertificates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVpnClientConfigurationSTATUS populates the provided destination VpnClientConfiguration_STATUS from our VpnClientConfiguration_STATUS
func (configuration *VpnClientConfiguration_STATUS) AssignPropertiesToVpnClientConfigurationSTATUS(destination *alpha20201101s.VpnClientConfiguration_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AadAudience
	destination.AadAudience = genruntime.ClonePointerToString(configuration.AadAudience)

	// AadIssuer
	destination.AadIssuer = genruntime.ClonePointerToString(configuration.AadIssuer)

	// AadTenant
	destination.AadTenant = genruntime.ClonePointerToString(configuration.AadTenant)

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(configuration.RadiusServerAddress)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(configuration.RadiusServerSecret)

	// RadiusServers
	if configuration.RadiusServers != nil {
		radiusServerList := make([]alpha20201101s.RadiusServer_STATUS, len(configuration.RadiusServers))
		for radiusServerIndex, radiusServerItem := range configuration.RadiusServers {
			// Shadow the loop variable to avoid aliasing
			radiusServerItem := radiusServerItem
			var radiusServer alpha20201101s.RadiusServer_STATUS
			err := radiusServerItem.AssignPropertiesToRadiusServerSTATUS(&radiusServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRadiusServerSTATUS() to populate field RadiusServers")
			}
			radiusServerList[radiusServerIndex] = radiusServer
		}
		destination.RadiusServers = radiusServerList
	} else {
		destination.RadiusServers = nil
	}

	// VpnAuthenticationTypes
	if configuration.VpnAuthenticationTypes != nil {
		vpnAuthenticationTypeList := make([]string, len(configuration.VpnAuthenticationTypes))
		for vpnAuthenticationTypeIndex, vpnAuthenticationTypeItem := range configuration.VpnAuthenticationTypes {
			// Shadow the loop variable to avoid aliasing
			vpnAuthenticationTypeItem := vpnAuthenticationTypeItem
			vpnAuthenticationTypeList[vpnAuthenticationTypeIndex] = string(vpnAuthenticationTypeItem)
		}
		destination.VpnAuthenticationTypes = vpnAuthenticationTypeList
	} else {
		destination.VpnAuthenticationTypes = nil
	}

	// VpnClientAddressPool
	if configuration.VpnClientAddressPool != nil {
		var vpnClientAddressPool alpha20201101s.AddressSpace_STATUS
		err := configuration.VpnClientAddressPool.AssignPropertiesToAddressSpaceSTATUS(&vpnClientAddressPool)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpaceSTATUS() to populate field VpnClientAddressPool")
		}
		destination.VpnClientAddressPool = &vpnClientAddressPool
	} else {
		destination.VpnClientAddressPool = nil
	}

	// VpnClientIpsecPolicies
	if configuration.VpnClientIpsecPolicies != nil {
		vpnClientIpsecPolicyList := make([]alpha20201101s.IpsecPolicy_STATUS, len(configuration.VpnClientIpsecPolicies))
		for vpnClientIpsecPolicyIndex, vpnClientIpsecPolicyItem := range configuration.VpnClientIpsecPolicies {
			// Shadow the loop variable to avoid aliasing
			vpnClientIpsecPolicyItem := vpnClientIpsecPolicyItem
			var vpnClientIpsecPolicy alpha20201101s.IpsecPolicy_STATUS
			err := vpnClientIpsecPolicyItem.AssignPropertiesToIpsecPolicySTATUS(&vpnClientIpsecPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpsecPolicySTATUS() to populate field VpnClientIpsecPolicies")
			}
			vpnClientIpsecPolicyList[vpnClientIpsecPolicyIndex] = vpnClientIpsecPolicy
		}
		destination.VpnClientIpsecPolicies = vpnClientIpsecPolicyList
	} else {
		destination.VpnClientIpsecPolicies = nil
	}

	// VpnClientProtocols
	if configuration.VpnClientProtocols != nil {
		vpnClientProtocolList := make([]string, len(configuration.VpnClientProtocols))
		for vpnClientProtocolIndex, vpnClientProtocolItem := range configuration.VpnClientProtocols {
			// Shadow the loop variable to avoid aliasing
			vpnClientProtocolItem := vpnClientProtocolItem
			vpnClientProtocolList[vpnClientProtocolIndex] = string(vpnClientProtocolItem)
		}
		destination.VpnClientProtocols = vpnClientProtocolList
	} else {
		destination.VpnClientProtocols = nil
	}

	// VpnClientRevokedCertificates
	if configuration.VpnClientRevokedCertificates != nil {
		vpnClientRevokedCertificateList := make([]alpha20201101s.VpnClientRevokedCertificate_STATUS, len(configuration.VpnClientRevokedCertificates))
		for vpnClientRevokedCertificateIndex, vpnClientRevokedCertificateItem := range configuration.VpnClientRevokedCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRevokedCertificateItem := vpnClientRevokedCertificateItem
			var vpnClientRevokedCertificate alpha20201101s.VpnClientRevokedCertificate_STATUS
			err := vpnClientRevokedCertificateItem.AssignPropertiesToVpnClientRevokedCertificateSTATUS(&vpnClientRevokedCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRevokedCertificateSTATUS() to populate field VpnClientRevokedCertificates")
			}
			vpnClientRevokedCertificateList[vpnClientRevokedCertificateIndex] = vpnClientRevokedCertificate
		}
		destination.VpnClientRevokedCertificates = vpnClientRevokedCertificateList
	} else {
		destination.VpnClientRevokedCertificates = nil
	}

	// VpnClientRootCertificates
	if configuration.VpnClientRootCertificates != nil {
		vpnClientRootCertificateList := make([]alpha20201101s.VpnClientRootCertificate_STATUS, len(configuration.VpnClientRootCertificates))
		for vpnClientRootCertificateIndex, vpnClientRootCertificateItem := range configuration.VpnClientRootCertificates {
			// Shadow the loop variable to avoid aliasing
			vpnClientRootCertificateItem := vpnClientRootCertificateItem
			var vpnClientRootCertificate alpha20201101s.VpnClientRootCertificate_STATUS
			err := vpnClientRootCertificateItem.AssignPropertiesToVpnClientRootCertificateSTATUS(&vpnClientRootCertificate)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVpnClientRootCertificateSTATUS() to populate field VpnClientRootCertificates")
			}
			vpnClientRootCertificateList[vpnClientRootCertificateIndex] = vpnClientRootCertificate
		}
		destination.VpnClientRootCertificates = vpnClientRootCertificateList
	} else {
		destination.VpnClientRootCertificates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPConfigurationBgpPeeringAddress. Use v1beta20201101.IPConfigurationBgpPeeringAddress instead
type IPConfigurationBgpPeeringAddress struct {
	CustomBgpIpAddresses []string `json:"customBgpIpAddresses,omitempty"`
	IpconfigurationId    *string  `json:"ipconfigurationId,omitempty"`
}

var _ genruntime.ARMTransformer = &IPConfigurationBgpPeeringAddress{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (address *IPConfigurationBgpPeeringAddress) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if address == nil {
		return nil, nil
	}
	result := &IPConfigurationBgpPeeringAddressARM{}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range address.CustomBgpIpAddresses {
		result.CustomBgpIpAddresses = append(result.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if address.IpconfigurationId != nil {
		ipconfigurationId := *address.IpconfigurationId
		result.IpconfigurationId = &ipconfigurationId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *IPConfigurationBgpPeeringAddress) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationBgpPeeringAddressARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *IPConfigurationBgpPeeringAddress) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddressARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddressARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		address.CustomBgpIpAddresses = append(address.CustomBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		address.IpconfigurationId = &ipconfigurationId
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddress populates our IPConfigurationBgpPeeringAddress from the provided source IPConfigurationBgpPeeringAddress
func (address *IPConfigurationBgpPeeringAddress) AssignPropertiesFromIPConfigurationBgpPeeringAddress(source *alpha20201101s.IPConfigurationBgpPeeringAddress) error {

	// CustomBgpIpAddresses
	address.CustomBgpIpAddresses = genruntime.CloneSliceOfString(source.CustomBgpIpAddresses)

	// IpconfigurationId
	address.IpconfigurationId = genruntime.ClonePointerToString(source.IpconfigurationId)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddress populates the provided destination IPConfigurationBgpPeeringAddress from our IPConfigurationBgpPeeringAddress
func (address *IPConfigurationBgpPeeringAddress) AssignPropertiesToIPConfigurationBgpPeeringAddress(destination *alpha20201101s.IPConfigurationBgpPeeringAddress) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	destination.CustomBgpIpAddresses = genruntime.CloneSliceOfString(address.CustomBgpIpAddresses)

	// IpconfigurationId
	destination.IpconfigurationId = genruntime.ClonePointerToString(address.IpconfigurationId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPConfigurationBgpPeeringAddress_STATUS. Use v1beta20201101.IPConfigurationBgpPeeringAddress_STATUS instead
type IPConfigurationBgpPeeringAddress_STATUS struct {
	CustomBgpIpAddresses  []string `json:"customBgpIpAddresses,omitempty"`
	DefaultBgpIpAddresses []string `json:"defaultBgpIpAddresses,omitempty"`
	IpconfigurationId     *string  `json:"ipconfigurationId,omitempty"`
	TunnelIpAddresses     []string `json:"tunnelIpAddresses,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfigurationBgpPeeringAddress_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *IPConfigurationBgpPeeringAddress_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationBgpPeeringAddress_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *IPConfigurationBgpPeeringAddress_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationBgpPeeringAddress_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationBgpPeeringAddress_STATUSARM, got %T", armInput)
	}

	// Set property ‘CustomBgpIpAddresses’:
	for _, item := range typedInput.CustomBgpIpAddresses {
		address.CustomBgpIpAddresses = append(address.CustomBgpIpAddresses, item)
	}

	// Set property ‘DefaultBgpIpAddresses’:
	for _, item := range typedInput.DefaultBgpIpAddresses {
		address.DefaultBgpIpAddresses = append(address.DefaultBgpIpAddresses, item)
	}

	// Set property ‘IpconfigurationId’:
	if typedInput.IpconfigurationId != nil {
		ipconfigurationId := *typedInput.IpconfigurationId
		address.IpconfigurationId = &ipconfigurationId
	}

	// Set property ‘TunnelIpAddresses’:
	for _, item := range typedInput.TunnelIpAddresses {
		address.TunnelIpAddresses = append(address.TunnelIpAddresses, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationBgpPeeringAddressSTATUS populates our IPConfigurationBgpPeeringAddress_STATUS from the provided source IPConfigurationBgpPeeringAddress_STATUS
func (address *IPConfigurationBgpPeeringAddress_STATUS) AssignPropertiesFromIPConfigurationBgpPeeringAddressSTATUS(source *alpha20201101s.IPConfigurationBgpPeeringAddress_STATUS) error {

	// CustomBgpIpAddresses
	address.CustomBgpIpAddresses = genruntime.CloneSliceOfString(source.CustomBgpIpAddresses)

	// DefaultBgpIpAddresses
	address.DefaultBgpIpAddresses = genruntime.CloneSliceOfString(source.DefaultBgpIpAddresses)

	// IpconfigurationId
	address.IpconfigurationId = genruntime.ClonePointerToString(source.IpconfigurationId)

	// TunnelIpAddresses
	address.TunnelIpAddresses = genruntime.CloneSliceOfString(source.TunnelIpAddresses)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationBgpPeeringAddressSTATUS populates the provided destination IPConfigurationBgpPeeringAddress_STATUS from our IPConfigurationBgpPeeringAddress_STATUS
func (address *IPConfigurationBgpPeeringAddress_STATUS) AssignPropertiesToIPConfigurationBgpPeeringAddressSTATUS(destination *alpha20201101s.IPConfigurationBgpPeeringAddress_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomBgpIpAddresses
	destination.CustomBgpIpAddresses = genruntime.CloneSliceOfString(address.CustomBgpIpAddresses)

	// DefaultBgpIpAddresses
	destination.DefaultBgpIpAddresses = genruntime.CloneSliceOfString(address.DefaultBgpIpAddresses)

	// IpconfigurationId
	destination.IpconfigurationId = genruntime.ClonePointerToString(address.IpconfigurationId)

	// TunnelIpAddresses
	destination.TunnelIpAddresses = genruntime.CloneSliceOfString(address.TunnelIpAddresses)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IpsecPolicy. Use v1beta20201101.IpsecPolicy instead
type IpsecPolicy struct {
	// +kubebuilder:validation:Required
	DhGroup *IpsecPolicyDhGroup `json:"dhGroup,omitempty"`

	// +kubebuilder:validation:Required
	IkeEncryption *IpsecPolicyIkeEncryption `json:"ikeEncryption,omitempty"`

	// +kubebuilder:validation:Required
	IkeIntegrity *IpsecPolicyIkeIntegrity `json:"ikeIntegrity,omitempty"`

	// +kubebuilder:validation:Required
	IpsecEncryption *IpsecPolicyIpsecEncryption `json:"ipsecEncryption,omitempty"`

	// +kubebuilder:validation:Required
	IpsecIntegrity *IpsecPolicyIpsecIntegrity `json:"ipsecIntegrity,omitempty"`

	// +kubebuilder:validation:Required
	PfsGroup *IpsecPolicyPfsGroup `json:"pfsGroup,omitempty"`

	// +kubebuilder:validation:Required
	SaDataSizeKilobytes *int `json:"saDataSizeKilobytes,omitempty"`

	// +kubebuilder:validation:Required
	SaLifeTimeSeconds *int `json:"saLifeTimeSeconds,omitempty"`
}

var _ genruntime.ARMTransformer = &IpsecPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *IpsecPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &IpsecPolicyARM{}

	// Set property ‘DhGroup’:
	if policy.DhGroup != nil {
		dhGroup := *policy.DhGroup
		result.DhGroup = &dhGroup
	}

	// Set property ‘IkeEncryption’:
	if policy.IkeEncryption != nil {
		ikeEncryption := *policy.IkeEncryption
		result.IkeEncryption = &ikeEncryption
	}

	// Set property ‘IkeIntegrity’:
	if policy.IkeIntegrity != nil {
		ikeIntegrity := *policy.IkeIntegrity
		result.IkeIntegrity = &ikeIntegrity
	}

	// Set property ‘IpsecEncryption’:
	if policy.IpsecEncryption != nil {
		ipsecEncryption := *policy.IpsecEncryption
		result.IpsecEncryption = &ipsecEncryption
	}

	// Set property ‘IpsecIntegrity’:
	if policy.IpsecIntegrity != nil {
		ipsecIntegrity := *policy.IpsecIntegrity
		result.IpsecIntegrity = &ipsecIntegrity
	}

	// Set property ‘PfsGroup’:
	if policy.PfsGroup != nil {
		pfsGroup := *policy.PfsGroup
		result.PfsGroup = &pfsGroup
	}

	// Set property ‘SaDataSizeKilobytes’:
	if policy.SaDataSizeKilobytes != nil {
		saDataSizeKilobytes := *policy.SaDataSizeKilobytes
		result.SaDataSizeKilobytes = &saDataSizeKilobytes
	}

	// Set property ‘SaLifeTimeSeconds’:
	if policy.SaLifeTimeSeconds != nil {
		saLifeTimeSeconds := *policy.SaLifeTimeSeconds
		result.SaLifeTimeSeconds = &saLifeTimeSeconds
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IpsecPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpsecPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IpsecPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicyARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	if typedInput.DhGroup != nil {
		dhGroup := *typedInput.DhGroup
		policy.DhGroup = &dhGroup
	}

	// Set property ‘IkeEncryption’:
	if typedInput.IkeEncryption != nil {
		ikeEncryption := *typedInput.IkeEncryption
		policy.IkeEncryption = &ikeEncryption
	}

	// Set property ‘IkeIntegrity’:
	if typedInput.IkeIntegrity != nil {
		ikeIntegrity := *typedInput.IkeIntegrity
		policy.IkeIntegrity = &ikeIntegrity
	}

	// Set property ‘IpsecEncryption’:
	if typedInput.IpsecEncryption != nil {
		ipsecEncryption := *typedInput.IpsecEncryption
		policy.IpsecEncryption = &ipsecEncryption
	}

	// Set property ‘IpsecIntegrity’:
	if typedInput.IpsecIntegrity != nil {
		ipsecIntegrity := *typedInput.IpsecIntegrity
		policy.IpsecIntegrity = &ipsecIntegrity
	}

	// Set property ‘PfsGroup’:
	if typedInput.PfsGroup != nil {
		pfsGroup := *typedInput.PfsGroup
		policy.PfsGroup = &pfsGroup
	}

	// Set property ‘SaDataSizeKilobytes’:
	if typedInput.SaDataSizeKilobytes != nil {
		saDataSizeKilobytes := *typedInput.SaDataSizeKilobytes
		policy.SaDataSizeKilobytes = &saDataSizeKilobytes
	}

	// Set property ‘SaLifeTimeSeconds’:
	if typedInput.SaLifeTimeSeconds != nil {
		saLifeTimeSeconds := *typedInput.SaLifeTimeSeconds
		policy.SaLifeTimeSeconds = &saLifeTimeSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicy populates our IpsecPolicy from the provided source IpsecPolicy
func (policy *IpsecPolicy) AssignPropertiesFromIpsecPolicy(source *alpha20201101s.IpsecPolicy) error {

	// DhGroup
	if source.DhGroup != nil {
		dhGroup := IpsecPolicyDhGroup(*source.DhGroup)
		policy.DhGroup = &dhGroup
	} else {
		policy.DhGroup = nil
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		ikeEncryption := IpsecPolicyIkeEncryption(*source.IkeEncryption)
		policy.IkeEncryption = &ikeEncryption
	} else {
		policy.IkeEncryption = nil
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		ikeIntegrity := IpsecPolicyIkeIntegrity(*source.IkeIntegrity)
		policy.IkeIntegrity = &ikeIntegrity
	} else {
		policy.IkeIntegrity = nil
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		ipsecEncryption := IpsecPolicyIpsecEncryption(*source.IpsecEncryption)
		policy.IpsecEncryption = &ipsecEncryption
	} else {
		policy.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		ipsecIntegrity := IpsecPolicyIpsecIntegrity(*source.IpsecIntegrity)
		policy.IpsecIntegrity = &ipsecIntegrity
	} else {
		policy.IpsecIntegrity = nil
	}

	// PfsGroup
	if source.PfsGroup != nil {
		pfsGroup := IpsecPolicyPfsGroup(*source.PfsGroup)
		policy.PfsGroup = &pfsGroup
	} else {
		policy.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	policy.SaDataSizeKilobytes = genruntime.ClonePointerToInt(source.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	policy.SaLifeTimeSeconds = genruntime.ClonePointerToInt(source.SaLifeTimeSeconds)

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicy populates the provided destination IpsecPolicy from our IpsecPolicy
func (policy *IpsecPolicy) AssignPropertiesToIpsecPolicy(destination *alpha20201101s.IpsecPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	if policy.DhGroup != nil {
		dhGroup := string(*policy.DhGroup)
		destination.DhGroup = &dhGroup
	} else {
		destination.DhGroup = nil
	}

	// IkeEncryption
	if policy.IkeEncryption != nil {
		ikeEncryption := string(*policy.IkeEncryption)
		destination.IkeEncryption = &ikeEncryption
	} else {
		destination.IkeEncryption = nil
	}

	// IkeIntegrity
	if policy.IkeIntegrity != nil {
		ikeIntegrity := string(*policy.IkeIntegrity)
		destination.IkeIntegrity = &ikeIntegrity
	} else {
		destination.IkeIntegrity = nil
	}

	// IpsecEncryption
	if policy.IpsecEncryption != nil {
		ipsecEncryption := string(*policy.IpsecEncryption)
		destination.IpsecEncryption = &ipsecEncryption
	} else {
		destination.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if policy.IpsecIntegrity != nil {
		ipsecIntegrity := string(*policy.IpsecIntegrity)
		destination.IpsecIntegrity = &ipsecIntegrity
	} else {
		destination.IpsecIntegrity = nil
	}

	// PfsGroup
	if policy.PfsGroup != nil {
		pfsGroup := string(*policy.PfsGroup)
		destination.PfsGroup = &pfsGroup
	} else {
		destination.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = genruntime.ClonePointerToInt(policy.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = genruntime.ClonePointerToInt(policy.SaLifeTimeSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IpsecPolicy_STATUS. Use v1beta20201101.IpsecPolicy_STATUS instead
type IpsecPolicy_STATUS struct {
	DhGroup             *DhGroup_STATUS         `json:"dhGroup,omitempty"`
	IkeEncryption       *IkeEncryption_STATUS   `json:"ikeEncryption,omitempty"`
	IkeIntegrity        *IkeIntegrity_STATUS    `json:"ikeIntegrity,omitempty"`
	IpsecEncryption     *IpsecEncryption_STATUS `json:"ipsecEncryption,omitempty"`
	IpsecIntegrity      *IpsecIntegrity_STATUS  `json:"ipsecIntegrity,omitempty"`
	PfsGroup            *PfsGroup_STATUS        `json:"pfsGroup,omitempty"`
	SaDataSizeKilobytes *int                    `json:"saDataSizeKilobytes,omitempty"`
	SaLifeTimeSeconds   *int                    `json:"saLifeTimeSeconds,omitempty"`
}

var _ genruntime.FromARMConverter = &IpsecPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IpsecPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpsecPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IpsecPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpsecPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpsecPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘DhGroup’:
	if typedInput.DhGroup != nil {
		dhGroup := *typedInput.DhGroup
		policy.DhGroup = &dhGroup
	}

	// Set property ‘IkeEncryption’:
	if typedInput.IkeEncryption != nil {
		ikeEncryption := *typedInput.IkeEncryption
		policy.IkeEncryption = &ikeEncryption
	}

	// Set property ‘IkeIntegrity’:
	if typedInput.IkeIntegrity != nil {
		ikeIntegrity := *typedInput.IkeIntegrity
		policy.IkeIntegrity = &ikeIntegrity
	}

	// Set property ‘IpsecEncryption’:
	if typedInput.IpsecEncryption != nil {
		ipsecEncryption := *typedInput.IpsecEncryption
		policy.IpsecEncryption = &ipsecEncryption
	}

	// Set property ‘IpsecIntegrity’:
	if typedInput.IpsecIntegrity != nil {
		ipsecIntegrity := *typedInput.IpsecIntegrity
		policy.IpsecIntegrity = &ipsecIntegrity
	}

	// Set property ‘PfsGroup’:
	if typedInput.PfsGroup != nil {
		pfsGroup := *typedInput.PfsGroup
		policy.PfsGroup = &pfsGroup
	}

	// Set property ‘SaDataSizeKilobytes’:
	if typedInput.SaDataSizeKilobytes != nil {
		saDataSizeKilobytes := *typedInput.SaDataSizeKilobytes
		policy.SaDataSizeKilobytes = &saDataSizeKilobytes
	}

	// Set property ‘SaLifeTimeSeconds’:
	if typedInput.SaLifeTimeSeconds != nil {
		saLifeTimeSeconds := *typedInput.SaLifeTimeSeconds
		policy.SaLifeTimeSeconds = &saLifeTimeSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromIpsecPolicySTATUS populates our IpsecPolicy_STATUS from the provided source IpsecPolicy_STATUS
func (policy *IpsecPolicy_STATUS) AssignPropertiesFromIpsecPolicySTATUS(source *alpha20201101s.IpsecPolicy_STATUS) error {

	// DhGroup
	if source.DhGroup != nil {
		dhGroup := DhGroup_STATUS(*source.DhGroup)
		policy.DhGroup = &dhGroup
	} else {
		policy.DhGroup = nil
	}

	// IkeEncryption
	if source.IkeEncryption != nil {
		ikeEncryption := IkeEncryption_STATUS(*source.IkeEncryption)
		policy.IkeEncryption = &ikeEncryption
	} else {
		policy.IkeEncryption = nil
	}

	// IkeIntegrity
	if source.IkeIntegrity != nil {
		ikeIntegrity := IkeIntegrity_STATUS(*source.IkeIntegrity)
		policy.IkeIntegrity = &ikeIntegrity
	} else {
		policy.IkeIntegrity = nil
	}

	// IpsecEncryption
	if source.IpsecEncryption != nil {
		ipsecEncryption := IpsecEncryption_STATUS(*source.IpsecEncryption)
		policy.IpsecEncryption = &ipsecEncryption
	} else {
		policy.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if source.IpsecIntegrity != nil {
		ipsecIntegrity := IpsecIntegrity_STATUS(*source.IpsecIntegrity)
		policy.IpsecIntegrity = &ipsecIntegrity
	} else {
		policy.IpsecIntegrity = nil
	}

	// PfsGroup
	if source.PfsGroup != nil {
		pfsGroup := PfsGroup_STATUS(*source.PfsGroup)
		policy.PfsGroup = &pfsGroup
	} else {
		policy.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	policy.SaDataSizeKilobytes = genruntime.ClonePointerToInt(source.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	policy.SaLifeTimeSeconds = genruntime.ClonePointerToInt(source.SaLifeTimeSeconds)

	// No error
	return nil
}

// AssignPropertiesToIpsecPolicySTATUS populates the provided destination IpsecPolicy_STATUS from our IpsecPolicy_STATUS
func (policy *IpsecPolicy_STATUS) AssignPropertiesToIpsecPolicySTATUS(destination *alpha20201101s.IpsecPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DhGroup
	if policy.DhGroup != nil {
		dhGroup := string(*policy.DhGroup)
		destination.DhGroup = &dhGroup
	} else {
		destination.DhGroup = nil
	}

	// IkeEncryption
	if policy.IkeEncryption != nil {
		ikeEncryption := string(*policy.IkeEncryption)
		destination.IkeEncryption = &ikeEncryption
	} else {
		destination.IkeEncryption = nil
	}

	// IkeIntegrity
	if policy.IkeIntegrity != nil {
		ikeIntegrity := string(*policy.IkeIntegrity)
		destination.IkeIntegrity = &ikeIntegrity
	} else {
		destination.IkeIntegrity = nil
	}

	// IpsecEncryption
	if policy.IpsecEncryption != nil {
		ipsecEncryption := string(*policy.IpsecEncryption)
		destination.IpsecEncryption = &ipsecEncryption
	} else {
		destination.IpsecEncryption = nil
	}

	// IpsecIntegrity
	if policy.IpsecIntegrity != nil {
		ipsecIntegrity := string(*policy.IpsecIntegrity)
		destination.IpsecIntegrity = &ipsecIntegrity
	} else {
		destination.IpsecIntegrity = nil
	}

	// PfsGroup
	if policy.PfsGroup != nil {
		pfsGroup := string(*policy.PfsGroup)
		destination.PfsGroup = &pfsGroup
	} else {
		destination.PfsGroup = nil
	}

	// SaDataSizeKilobytes
	destination.SaDataSizeKilobytes = genruntime.ClonePointerToInt(policy.SaDataSizeKilobytes)

	// SaLifeTimeSeconds
	destination.SaLifeTimeSeconds = genruntime.ClonePointerToInt(policy.SaLifeTimeSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RadiusServer. Use v1beta20201101.RadiusServer instead
type RadiusServer struct {
	// +kubebuilder:validation:Required
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`
	RadiusServerScore   *int    `json:"radiusServerScore,omitempty"`
	RadiusServerSecret  *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.ARMTransformer = &RadiusServer{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (server *RadiusServer) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if server == nil {
		return nil, nil
	}
	result := &RadiusServerARM{}

	// Set property ‘RadiusServerAddress’:
	if server.RadiusServerAddress != nil {
		radiusServerAddress := *server.RadiusServerAddress
		result.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerScore’:
	if server.RadiusServerScore != nil {
		radiusServerScore := *server.RadiusServerScore
		result.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if server.RadiusServerSecret != nil {
		radiusServerSecret := *server.RadiusServerSecret
		result.RadiusServerSecret = &radiusServerSecret
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RadiusServer) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RadiusServerARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RadiusServer) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServerARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServerARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		server.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		server.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		server.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServer populates our RadiusServer from the provided source RadiusServer
func (server *RadiusServer) AssignPropertiesFromRadiusServer(source *alpha20201101s.RadiusServer) error {

	// RadiusServerAddress
	server.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerScore
	server.RadiusServerScore = genruntime.ClonePointerToInt(source.RadiusServerScore)

	// RadiusServerSecret
	server.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// No error
	return nil
}

// AssignPropertiesToRadiusServer populates the provided destination RadiusServer from our RadiusServer
func (server *RadiusServer) AssignPropertiesToRadiusServer(destination *alpha20201101s.RadiusServer) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(server.RadiusServerAddress)

	// RadiusServerScore
	destination.RadiusServerScore = genruntime.ClonePointerToInt(server.RadiusServerScore)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(server.RadiusServerSecret)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RadiusServer_STATUS. Use v1beta20201101.RadiusServer_STATUS instead
type RadiusServer_STATUS struct {
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`
	RadiusServerScore   *int    `json:"radiusServerScore,omitempty"`
	RadiusServerSecret  *string `json:"radiusServerSecret,omitempty"`
}

var _ genruntime.FromARMConverter = &RadiusServer_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RadiusServer_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RadiusServer_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RadiusServer_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RadiusServer_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RadiusServer_STATUSARM, got %T", armInput)
	}

	// Set property ‘RadiusServerAddress’:
	if typedInput.RadiusServerAddress != nil {
		radiusServerAddress := *typedInput.RadiusServerAddress
		server.RadiusServerAddress = &radiusServerAddress
	}

	// Set property ‘RadiusServerScore’:
	if typedInput.RadiusServerScore != nil {
		radiusServerScore := *typedInput.RadiusServerScore
		server.RadiusServerScore = &radiusServerScore
	}

	// Set property ‘RadiusServerSecret’:
	if typedInput.RadiusServerSecret != nil {
		radiusServerSecret := *typedInput.RadiusServerSecret
		server.RadiusServerSecret = &radiusServerSecret
	}

	// No error
	return nil
}

// AssignPropertiesFromRadiusServerSTATUS populates our RadiusServer_STATUS from the provided source RadiusServer_STATUS
func (server *RadiusServer_STATUS) AssignPropertiesFromRadiusServerSTATUS(source *alpha20201101s.RadiusServer_STATUS) error {

	// RadiusServerAddress
	server.RadiusServerAddress = genruntime.ClonePointerToString(source.RadiusServerAddress)

	// RadiusServerScore
	server.RadiusServerScore = genruntime.ClonePointerToInt(source.RadiusServerScore)

	// RadiusServerSecret
	server.RadiusServerSecret = genruntime.ClonePointerToString(source.RadiusServerSecret)

	// No error
	return nil
}

// AssignPropertiesToRadiusServerSTATUS populates the provided destination RadiusServer_STATUS from our RadiusServer_STATUS
func (server *RadiusServer_STATUS) AssignPropertiesToRadiusServerSTATUS(destination *alpha20201101s.RadiusServer_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RadiusServerAddress
	destination.RadiusServerAddress = genruntime.ClonePointerToString(server.RadiusServerAddress)

	// RadiusServerScore
	destination.RadiusServerScore = genruntime.ClonePointerToInt(server.RadiusServerScore)

	// RadiusServerSecret
	destination.RadiusServerSecret = genruntime.ClonePointerToString(server.RadiusServerSecret)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod. Use
// v1beta20201101.VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod instead
// +kubebuilder:validation:Enum={"Dynamic","Static"}
type VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod string

const (
	VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod_Dynamic = VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod("Dynamic")
	VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod_Static  = VirtualNetworkGatewayIPConfigurationPropertiesFormatPrivateIPAllocationMethod("Static")
)

// Deprecated version of VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates. Use v1beta20201101.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates instead
type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates struct {
	Name       *string `json:"name,omitempty"`
	Thumbprint *string `json:"thumbprint,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificates == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}

	// Set property ‘Name’:
	if certificates.Name != nil {
		name := *certificates.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if certificates.Thumbprint != nil {
		result.Properties = &VpnClientRevokedCertificatePropertiesFormatARM{}
	}
	if certificates.Thumbprint != nil {
		thumbprint := *certificates.Thumbprint
		result.Properties.Thumbprint = &thumbprint
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificates.Name = &name
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			certificates.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(source *alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) error {

	// Name
	certificates.Name = genruntime.ClonePointerToString(source.Name)

	// Thumbprint
	certificates.Thumbprint = genruntime.ClonePointerToString(source.Thumbprint)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRevokedCertificates(destination *alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificates) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(certificates.Name)

	// Thumbprint
	destination.Thumbprint = genruntime.ClonePointerToString(certificates.Thumbprint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates. Use v1beta20201101.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates instead
type VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates struct {
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	PublicCertData *string `json:"publicCertData,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if certificates == nil {
		return nil, nil
	}
	result := &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}

	// Set property ‘Name’:
	if certificates.Name != nil {
		name := *certificates.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if certificates.PublicCertData != nil {
		result.Properties = &VpnClientRootCertificatePropertiesFormatARM{}
	}
	if certificates.PublicCertData != nil {
		publicCertData := *certificates.PublicCertData
		result.Properties.PublicCertData = &publicCertData
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificates.Name = &name
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicCertData != nil {
			publicCertData := *typedInput.Properties.PublicCertData
			certificates.PublicCertData = &publicCertData
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates populates our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates from the provided source VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) AssignPropertiesFromVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(source *alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) error {

	// Name
	certificates.Name = genruntime.ClonePointerToString(source.Name)

	// PublicCertData
	certificates.PublicCertData = genruntime.ClonePointerToString(source.PublicCertData)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates populates the provided destination VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates from our VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates
func (certificates *VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) AssignPropertiesToVirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientRootCertificates(destination *alpha20201101s.VirtualNetworkGateways_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificates) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(certificates.Name)

	// PublicCertData
	destination.PublicCertData = genruntime.ClonePointerToString(certificates.PublicCertData)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VirtualNetworkGatewaySkuName. Use v1beta20201101.VirtualNetworkGatewaySkuName instead
// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySkuName string

const (
	VirtualNetworkGatewaySkuName_Basic            = VirtualNetworkGatewaySkuName("Basic")
	VirtualNetworkGatewaySkuName_ErGw1AZ          = VirtualNetworkGatewaySkuName("ErGw1AZ")
	VirtualNetworkGatewaySkuName_ErGw2AZ          = VirtualNetworkGatewaySkuName("ErGw2AZ")
	VirtualNetworkGatewaySkuName_ErGw3AZ          = VirtualNetworkGatewaySkuName("ErGw3AZ")
	VirtualNetworkGatewaySkuName_HighPerformance  = VirtualNetworkGatewaySkuName("HighPerformance")
	VirtualNetworkGatewaySkuName_Standard         = VirtualNetworkGatewaySkuName("Standard")
	VirtualNetworkGatewaySkuName_UltraPerformance = VirtualNetworkGatewaySkuName("UltraPerformance")
	VirtualNetworkGatewaySkuName_VpnGw1           = VirtualNetworkGatewaySkuName("VpnGw1")
	VirtualNetworkGatewaySkuName_VpnGw1AZ         = VirtualNetworkGatewaySkuName("VpnGw1AZ")
	VirtualNetworkGatewaySkuName_VpnGw2           = VirtualNetworkGatewaySkuName("VpnGw2")
	VirtualNetworkGatewaySkuName_VpnGw2AZ         = VirtualNetworkGatewaySkuName("VpnGw2AZ")
	VirtualNetworkGatewaySkuName_VpnGw3           = VirtualNetworkGatewaySkuName("VpnGw3")
	VirtualNetworkGatewaySkuName_VpnGw3AZ         = VirtualNetworkGatewaySkuName("VpnGw3AZ")
	VirtualNetworkGatewaySkuName_VpnGw4           = VirtualNetworkGatewaySkuName("VpnGw4")
	VirtualNetworkGatewaySkuName_VpnGw4AZ         = VirtualNetworkGatewaySkuName("VpnGw4AZ")
	VirtualNetworkGatewaySkuName_VpnGw5           = VirtualNetworkGatewaySkuName("VpnGw5")
	VirtualNetworkGatewaySkuName_VpnGw5AZ         = VirtualNetworkGatewaySkuName("VpnGw5AZ")
)

// Deprecated version of VirtualNetworkGatewaySkuSTATUSName. Use v1beta20201101.VirtualNetworkGatewaySkuSTATUSName instead
type VirtualNetworkGatewaySkuSTATUSName string

const (
	VirtualNetworkGatewaySkuSTATUSName_Basic            = VirtualNetworkGatewaySkuSTATUSName("Basic")
	VirtualNetworkGatewaySkuSTATUSName_ErGw1AZ          = VirtualNetworkGatewaySkuSTATUSName("ErGw1AZ")
	VirtualNetworkGatewaySkuSTATUSName_ErGw2AZ          = VirtualNetworkGatewaySkuSTATUSName("ErGw2AZ")
	VirtualNetworkGatewaySkuSTATUSName_ErGw3AZ          = VirtualNetworkGatewaySkuSTATUSName("ErGw3AZ")
	VirtualNetworkGatewaySkuSTATUSName_HighPerformance  = VirtualNetworkGatewaySkuSTATUSName("HighPerformance")
	VirtualNetworkGatewaySkuSTATUSName_Standard         = VirtualNetworkGatewaySkuSTATUSName("Standard")
	VirtualNetworkGatewaySkuSTATUSName_UltraPerformance = VirtualNetworkGatewaySkuSTATUSName("UltraPerformance")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw1           = VirtualNetworkGatewaySkuSTATUSName("VpnGw1")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw1AZ         = VirtualNetworkGatewaySkuSTATUSName("VpnGw1AZ")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw2           = VirtualNetworkGatewaySkuSTATUSName("VpnGw2")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw2AZ         = VirtualNetworkGatewaySkuSTATUSName("VpnGw2AZ")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw3           = VirtualNetworkGatewaySkuSTATUSName("VpnGw3")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw3AZ         = VirtualNetworkGatewaySkuSTATUSName("VpnGw3AZ")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw4           = VirtualNetworkGatewaySkuSTATUSName("VpnGw4")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw4AZ         = VirtualNetworkGatewaySkuSTATUSName("VpnGw4AZ")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw5           = VirtualNetworkGatewaySkuSTATUSName("VpnGw5")
	VirtualNetworkGatewaySkuSTATUSName_VpnGw5AZ         = VirtualNetworkGatewaySkuSTATUSName("VpnGw5AZ")
)

// Deprecated version of VirtualNetworkGatewaySkuSTATUSTier. Use v1beta20201101.VirtualNetworkGatewaySkuSTATUSTier instead
type VirtualNetworkGatewaySkuSTATUSTier string

const (
	VirtualNetworkGatewaySkuSTATUSTier_Basic            = VirtualNetworkGatewaySkuSTATUSTier("Basic")
	VirtualNetworkGatewaySkuSTATUSTier_ErGw1AZ          = VirtualNetworkGatewaySkuSTATUSTier("ErGw1AZ")
	VirtualNetworkGatewaySkuSTATUSTier_ErGw2AZ          = VirtualNetworkGatewaySkuSTATUSTier("ErGw2AZ")
	VirtualNetworkGatewaySkuSTATUSTier_ErGw3AZ          = VirtualNetworkGatewaySkuSTATUSTier("ErGw3AZ")
	VirtualNetworkGatewaySkuSTATUSTier_HighPerformance  = VirtualNetworkGatewaySkuSTATUSTier("HighPerformance")
	VirtualNetworkGatewaySkuSTATUSTier_Standard         = VirtualNetworkGatewaySkuSTATUSTier("Standard")
	VirtualNetworkGatewaySkuSTATUSTier_UltraPerformance = VirtualNetworkGatewaySkuSTATUSTier("UltraPerformance")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw1           = VirtualNetworkGatewaySkuSTATUSTier("VpnGw1")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw1AZ         = VirtualNetworkGatewaySkuSTATUSTier("VpnGw1AZ")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw2           = VirtualNetworkGatewaySkuSTATUSTier("VpnGw2")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw2AZ         = VirtualNetworkGatewaySkuSTATUSTier("VpnGw2AZ")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw3           = VirtualNetworkGatewaySkuSTATUSTier("VpnGw3")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw3AZ         = VirtualNetworkGatewaySkuSTATUSTier("VpnGw3AZ")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw4           = VirtualNetworkGatewaySkuSTATUSTier("VpnGw4")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw4AZ         = VirtualNetworkGatewaySkuSTATUSTier("VpnGw4AZ")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw5           = VirtualNetworkGatewaySkuSTATUSTier("VpnGw5")
	VirtualNetworkGatewaySkuSTATUSTier_VpnGw5AZ         = VirtualNetworkGatewaySkuSTATUSTier("VpnGw5AZ")
)

// Deprecated version of VirtualNetworkGatewaySkuTier. Use v1beta20201101.VirtualNetworkGatewaySkuTier instead
// +kubebuilder:validation:Enum={"Basic","ErGw1AZ","ErGw2AZ","ErGw3AZ","HighPerformance","Standard","UltraPerformance","VpnGw1","VpnGw1AZ","VpnGw2","VpnGw2AZ","VpnGw3","VpnGw3AZ","VpnGw4","VpnGw4AZ","VpnGw5","VpnGw5AZ"}
type VirtualNetworkGatewaySkuTier string

const (
	VirtualNetworkGatewaySkuTier_Basic            = VirtualNetworkGatewaySkuTier("Basic")
	VirtualNetworkGatewaySkuTier_ErGw1AZ          = VirtualNetworkGatewaySkuTier("ErGw1AZ")
	VirtualNetworkGatewaySkuTier_ErGw2AZ          = VirtualNetworkGatewaySkuTier("ErGw2AZ")
	VirtualNetworkGatewaySkuTier_ErGw3AZ          = VirtualNetworkGatewaySkuTier("ErGw3AZ")
	VirtualNetworkGatewaySkuTier_HighPerformance  = VirtualNetworkGatewaySkuTier("HighPerformance")
	VirtualNetworkGatewaySkuTier_Standard         = VirtualNetworkGatewaySkuTier("Standard")
	VirtualNetworkGatewaySkuTier_UltraPerformance = VirtualNetworkGatewaySkuTier("UltraPerformance")
	VirtualNetworkGatewaySkuTier_VpnGw1           = VirtualNetworkGatewaySkuTier("VpnGw1")
	VirtualNetworkGatewaySkuTier_VpnGw1AZ         = VirtualNetworkGatewaySkuTier("VpnGw1AZ")
	VirtualNetworkGatewaySkuTier_VpnGw2           = VirtualNetworkGatewaySkuTier("VpnGw2")
	VirtualNetworkGatewaySkuTier_VpnGw2AZ         = VirtualNetworkGatewaySkuTier("VpnGw2AZ")
	VirtualNetworkGatewaySkuTier_VpnGw3           = VirtualNetworkGatewaySkuTier("VpnGw3")
	VirtualNetworkGatewaySkuTier_VpnGw3AZ         = VirtualNetworkGatewaySkuTier("VpnGw3AZ")
	VirtualNetworkGatewaySkuTier_VpnGw4           = VirtualNetworkGatewaySkuTier("VpnGw4")
	VirtualNetworkGatewaySkuTier_VpnGw4AZ         = VirtualNetworkGatewaySkuTier("VpnGw4AZ")
	VirtualNetworkGatewaySkuTier_VpnGw5           = VirtualNetworkGatewaySkuTier("VpnGw5")
	VirtualNetworkGatewaySkuTier_VpnGw5AZ         = VirtualNetworkGatewaySkuTier("VpnGw5AZ")
)

// Deprecated version of VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes. Use
// v1beta20201101.VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes instead
// +kubebuilder:validation:Enum={"AAD","Certificate","Radius"}
type VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes_AAD         = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("AAD")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes_Certificate = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("Certificate")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes_Radius      = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnAuthenticationTypes("Radius")
)

// Deprecated version of VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols. Use
// v1beta20201101.VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols instead
// +kubebuilder:validation:Enum={"IkeV2","OpenVPN","SSTP"}
type VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols string

const (
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols_IkeV2   = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("IkeV2")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols_OpenVPN = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("OpenVPN")
	VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols_SSTP    = VirtualNetworkGatewaysSpecPropertiesVpnClientConfigurationVpnClientProtocols("SSTP")
)

// Deprecated version of VpnClientConfigurationSTATUSVpnAuthenticationTypes. Use
// v1beta20201101.VpnClientConfigurationSTATUSVpnAuthenticationTypes instead
type VpnClientConfigurationSTATUSVpnAuthenticationTypes string

const (
	VpnClientConfigurationSTATUSVpnAuthenticationTypes_AAD         = VpnClientConfigurationSTATUSVpnAuthenticationTypes("AAD")
	VpnClientConfigurationSTATUSVpnAuthenticationTypes_Certificate = VpnClientConfigurationSTATUSVpnAuthenticationTypes("Certificate")
	VpnClientConfigurationSTATUSVpnAuthenticationTypes_Radius      = VpnClientConfigurationSTATUSVpnAuthenticationTypes("Radius")
)

// Deprecated version of VpnClientConfigurationSTATUSVpnClientProtocols. Use
// v1beta20201101.VpnClientConfigurationSTATUSVpnClientProtocols instead
type VpnClientConfigurationSTATUSVpnClientProtocols string

const (
	VpnClientConfigurationSTATUSVpnClientProtocols_IkeV2   = VpnClientConfigurationSTATUSVpnClientProtocols("IkeV2")
	VpnClientConfigurationSTATUSVpnClientProtocols_OpenVPN = VpnClientConfigurationSTATUSVpnClientProtocols("OpenVPN")
	VpnClientConfigurationSTATUSVpnClientProtocols_SSTP    = VpnClientConfigurationSTATUSVpnClientProtocols("SSTP")
)

// Deprecated version of VpnClientRevokedCertificate_STATUS. Use v1beta20201101.VpnClientRevokedCertificate_STATUS instead
type VpnClientRevokedCertificate_STATUS struct {
	Etag              *string                   `json:"etag,omitempty"`
	Id                *string                   `json:"id,omitempty"`
	Name              *string                   `json:"name,omitempty"`
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`
	Thumbprint        *string                   `json:"thumbprint,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientRevokedCertificate_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRevokedCertificate_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRevokedCertificate_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRevokedCertificate_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRevokedCertificate_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRevokedCertificate_STATUSARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		certificate.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		certificate.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			certificate.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Thumbprint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Thumbprint != nil {
			thumbprint := *typedInput.Properties.Thumbprint
			certificate.Thumbprint = &thumbprint
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRevokedCertificateSTATUS populates our VpnClientRevokedCertificate_STATUS from the provided source VpnClientRevokedCertificate_STATUS
func (certificate *VpnClientRevokedCertificate_STATUS) AssignPropertiesFromVpnClientRevokedCertificateSTATUS(source *alpha20201101s.VpnClientRevokedCertificate_STATUS) error {

	// Etag
	certificate.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	certificate.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		certificate.ProvisioningState = &provisioningState
	} else {
		certificate.ProvisioningState = nil
	}

	// Thumbprint
	certificate.Thumbprint = genruntime.ClonePointerToString(source.Thumbprint)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRevokedCertificateSTATUS populates the provided destination VpnClientRevokedCertificate_STATUS from our VpnClientRevokedCertificate_STATUS
func (certificate *VpnClientRevokedCertificate_STATUS) AssignPropertiesToVpnClientRevokedCertificateSTATUS(destination *alpha20201101s.VpnClientRevokedCertificate_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(certificate.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(certificate.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// ProvisioningState
	if certificate.ProvisioningState != nil {
		provisioningState := string(*certificate.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Thumbprint
	destination.Thumbprint = genruntime.ClonePointerToString(certificate.Thumbprint)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of VpnClientRootCertificate_STATUS. Use v1beta20201101.VpnClientRootCertificate_STATUS instead
type VpnClientRootCertificate_STATUS struct {
	Etag              *string                   `json:"etag,omitempty"`
	Id                *string                   `json:"id,omitempty"`
	Name              *string                   `json:"name,omitempty"`
	ProvisioningState *ProvisioningState_STATUS `json:"provisioningState,omitempty"`
	PublicCertData    *string                   `json:"publicCertData,omitempty"`
}

var _ genruntime.FromARMConverter = &VpnClientRootCertificate_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (certificate *VpnClientRootCertificate_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VpnClientRootCertificate_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (certificate *VpnClientRootCertificate_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VpnClientRootCertificate_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VpnClientRootCertificate_STATUSARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		certificate.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		certificate.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		certificate.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			certificate.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicCertData’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicCertData != nil {
			publicCertData := *typedInput.Properties.PublicCertData
			certificate.PublicCertData = &publicCertData
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVpnClientRootCertificateSTATUS populates our VpnClientRootCertificate_STATUS from the provided source VpnClientRootCertificate_STATUS
func (certificate *VpnClientRootCertificate_STATUS) AssignPropertiesFromVpnClientRootCertificateSTATUS(source *alpha20201101s.VpnClientRootCertificate_STATUS) error {

	// Etag
	certificate.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	certificate.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	certificate.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		certificate.ProvisioningState = &provisioningState
	} else {
		certificate.ProvisioningState = nil
	}

	// PublicCertData
	certificate.PublicCertData = genruntime.ClonePointerToString(source.PublicCertData)

	// No error
	return nil
}

// AssignPropertiesToVpnClientRootCertificateSTATUS populates the provided destination VpnClientRootCertificate_STATUS from our VpnClientRootCertificate_STATUS
func (certificate *VpnClientRootCertificate_STATUS) AssignPropertiesToVpnClientRootCertificateSTATUS(destination *alpha20201101s.VpnClientRootCertificate_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(certificate.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(certificate.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(certificate.Name)

	// ProvisioningState
	if certificate.ProvisioningState != nil {
		provisioningState := string(*certificate.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicCertData
	destination.PublicCertData = genruntime.ClonePointerToString(certificate.PublicCertData)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DhGroup_STATUS. Use v1beta20201101.DhGroup_STATUS instead
type DhGroup_STATUS string

const (
	DhGroup_STATUS_DHGroup1    = DhGroup_STATUS("DHGroup1")
	DhGroup_STATUS_DHGroup14   = DhGroup_STATUS("DHGroup14")
	DhGroup_STATUS_DHGroup2    = DhGroup_STATUS("DHGroup2")
	DhGroup_STATUS_DHGroup2048 = DhGroup_STATUS("DHGroup2048")
	DhGroup_STATUS_DHGroup24   = DhGroup_STATUS("DHGroup24")
	DhGroup_STATUS_ECP256      = DhGroup_STATUS("ECP256")
	DhGroup_STATUS_ECP384      = DhGroup_STATUS("ECP384")
	DhGroup_STATUS_None        = DhGroup_STATUS("None")
)

// Deprecated version of IkeEncryption_STATUS. Use v1beta20201101.IkeEncryption_STATUS instead
type IkeEncryption_STATUS string

const (
	IkeEncryption_STATUS_AES128    = IkeEncryption_STATUS("AES128")
	IkeEncryption_STATUS_AES192    = IkeEncryption_STATUS("AES192")
	IkeEncryption_STATUS_AES256    = IkeEncryption_STATUS("AES256")
	IkeEncryption_STATUS_DES       = IkeEncryption_STATUS("DES")
	IkeEncryption_STATUS_DES3      = IkeEncryption_STATUS("DES3")
	IkeEncryption_STATUS_GCMAES128 = IkeEncryption_STATUS("GCMAES128")
	IkeEncryption_STATUS_GCMAES256 = IkeEncryption_STATUS("GCMAES256")
)

// Deprecated version of IkeIntegrity_STATUS. Use v1beta20201101.IkeIntegrity_STATUS instead
type IkeIntegrity_STATUS string

const (
	IkeIntegrity_STATUS_GCMAES128 = IkeIntegrity_STATUS("GCMAES128")
	IkeIntegrity_STATUS_GCMAES256 = IkeIntegrity_STATUS("GCMAES256")
	IkeIntegrity_STATUS_MD5       = IkeIntegrity_STATUS("MD5")
	IkeIntegrity_STATUS_SHA1      = IkeIntegrity_STATUS("SHA1")
	IkeIntegrity_STATUS_SHA256    = IkeIntegrity_STATUS("SHA256")
	IkeIntegrity_STATUS_SHA384    = IkeIntegrity_STATUS("SHA384")
)

// Deprecated version of IpsecEncryption_STATUS. Use v1beta20201101.IpsecEncryption_STATUS instead
type IpsecEncryption_STATUS string

const (
	IpsecEncryption_STATUS_AES128    = IpsecEncryption_STATUS("AES128")
	IpsecEncryption_STATUS_AES192    = IpsecEncryption_STATUS("AES192")
	IpsecEncryption_STATUS_AES256    = IpsecEncryption_STATUS("AES256")
	IpsecEncryption_STATUS_DES       = IpsecEncryption_STATUS("DES")
	IpsecEncryption_STATUS_DES3      = IpsecEncryption_STATUS("DES3")
	IpsecEncryption_STATUS_GCMAES128 = IpsecEncryption_STATUS("GCMAES128")
	IpsecEncryption_STATUS_GCMAES192 = IpsecEncryption_STATUS("GCMAES192")
	IpsecEncryption_STATUS_GCMAES256 = IpsecEncryption_STATUS("GCMAES256")
	IpsecEncryption_STATUS_None      = IpsecEncryption_STATUS("None")
)

// Deprecated version of IpsecIntegrity_STATUS. Use v1beta20201101.IpsecIntegrity_STATUS instead
type IpsecIntegrity_STATUS string

const (
	IpsecIntegrity_STATUS_GCMAES128 = IpsecIntegrity_STATUS("GCMAES128")
	IpsecIntegrity_STATUS_GCMAES192 = IpsecIntegrity_STATUS("GCMAES192")
	IpsecIntegrity_STATUS_GCMAES256 = IpsecIntegrity_STATUS("GCMAES256")
	IpsecIntegrity_STATUS_MD5       = IpsecIntegrity_STATUS("MD5")
	IpsecIntegrity_STATUS_SHA1      = IpsecIntegrity_STATUS("SHA1")
	IpsecIntegrity_STATUS_SHA256    = IpsecIntegrity_STATUS("SHA256")
)

// Deprecated version of IpsecPolicyDhGroup. Use v1beta20201101.IpsecPolicyDhGroup instead
// +kubebuilder:validation:Enum={"DHGroup1","DHGroup14","DHGroup2","DHGroup2048","DHGroup24","ECP256","ECP384","None"}
type IpsecPolicyDhGroup string

const (
	IpsecPolicyDhGroup_DHGroup1    = IpsecPolicyDhGroup("DHGroup1")
	IpsecPolicyDhGroup_DHGroup14   = IpsecPolicyDhGroup("DHGroup14")
	IpsecPolicyDhGroup_DHGroup2    = IpsecPolicyDhGroup("DHGroup2")
	IpsecPolicyDhGroup_DHGroup2048 = IpsecPolicyDhGroup("DHGroup2048")
	IpsecPolicyDhGroup_DHGroup24   = IpsecPolicyDhGroup("DHGroup24")
	IpsecPolicyDhGroup_ECP256      = IpsecPolicyDhGroup("ECP256")
	IpsecPolicyDhGroup_ECP384      = IpsecPolicyDhGroup("ECP384")
	IpsecPolicyDhGroup_None        = IpsecPolicyDhGroup("None")
)

// Deprecated version of IpsecPolicyIkeEncryption. Use v1beta20201101.IpsecPolicyIkeEncryption instead
// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES256"}
type IpsecPolicyIkeEncryption string

const (
	IpsecPolicyIkeEncryption_AES128    = IpsecPolicyIkeEncryption("AES128")
	IpsecPolicyIkeEncryption_AES192    = IpsecPolicyIkeEncryption("AES192")
	IpsecPolicyIkeEncryption_AES256    = IpsecPolicyIkeEncryption("AES256")
	IpsecPolicyIkeEncryption_DES       = IpsecPolicyIkeEncryption("DES")
	IpsecPolicyIkeEncryption_DES3      = IpsecPolicyIkeEncryption("DES3")
	IpsecPolicyIkeEncryption_GCMAES128 = IpsecPolicyIkeEncryption("GCMAES128")
	IpsecPolicyIkeEncryption_GCMAES256 = IpsecPolicyIkeEncryption("GCMAES256")
)

// Deprecated version of IpsecPolicyIkeIntegrity. Use v1beta20201101.IpsecPolicyIkeIntegrity instead
// +kubebuilder:validation:Enum={"GCMAES128","GCMAES256","MD5","SHA1","SHA256","SHA384"}
type IpsecPolicyIkeIntegrity string

const (
	IpsecPolicyIkeIntegrity_GCMAES128 = IpsecPolicyIkeIntegrity("GCMAES128")
	IpsecPolicyIkeIntegrity_GCMAES256 = IpsecPolicyIkeIntegrity("GCMAES256")
	IpsecPolicyIkeIntegrity_MD5       = IpsecPolicyIkeIntegrity("MD5")
	IpsecPolicyIkeIntegrity_SHA1      = IpsecPolicyIkeIntegrity("SHA1")
	IpsecPolicyIkeIntegrity_SHA256    = IpsecPolicyIkeIntegrity("SHA256")
	IpsecPolicyIkeIntegrity_SHA384    = IpsecPolicyIkeIntegrity("SHA384")
)

// Deprecated version of IpsecPolicyIpsecEncryption. Use v1beta20201101.IpsecPolicyIpsecEncryption instead
// +kubebuilder:validation:Enum={"AES128","AES192","AES256","DES","DES3","GCMAES128","GCMAES192","GCMAES256","None"}
type IpsecPolicyIpsecEncryption string

const (
	IpsecPolicyIpsecEncryption_AES128    = IpsecPolicyIpsecEncryption("AES128")
	IpsecPolicyIpsecEncryption_AES192    = IpsecPolicyIpsecEncryption("AES192")
	IpsecPolicyIpsecEncryption_AES256    = IpsecPolicyIpsecEncryption("AES256")
	IpsecPolicyIpsecEncryption_DES       = IpsecPolicyIpsecEncryption("DES")
	IpsecPolicyIpsecEncryption_DES3      = IpsecPolicyIpsecEncryption("DES3")
	IpsecPolicyIpsecEncryption_GCMAES128 = IpsecPolicyIpsecEncryption("GCMAES128")
	IpsecPolicyIpsecEncryption_GCMAES192 = IpsecPolicyIpsecEncryption("GCMAES192")
	IpsecPolicyIpsecEncryption_GCMAES256 = IpsecPolicyIpsecEncryption("GCMAES256")
	IpsecPolicyIpsecEncryption_None      = IpsecPolicyIpsecEncryption("None")
)

// Deprecated version of IpsecPolicyIpsecIntegrity. Use v1beta20201101.IpsecPolicyIpsecIntegrity instead
// +kubebuilder:validation:Enum={"GCMAES128","GCMAES192","GCMAES256","MD5","SHA1","SHA256"}
type IpsecPolicyIpsecIntegrity string

const (
	IpsecPolicyIpsecIntegrity_GCMAES128 = IpsecPolicyIpsecIntegrity("GCMAES128")
	IpsecPolicyIpsecIntegrity_GCMAES192 = IpsecPolicyIpsecIntegrity("GCMAES192")
	IpsecPolicyIpsecIntegrity_GCMAES256 = IpsecPolicyIpsecIntegrity("GCMAES256")
	IpsecPolicyIpsecIntegrity_MD5       = IpsecPolicyIpsecIntegrity("MD5")
	IpsecPolicyIpsecIntegrity_SHA1      = IpsecPolicyIpsecIntegrity("SHA1")
	IpsecPolicyIpsecIntegrity_SHA256    = IpsecPolicyIpsecIntegrity("SHA256")
)

// Deprecated version of IpsecPolicyPfsGroup. Use v1beta20201101.IpsecPolicyPfsGroup instead
// +kubebuilder:validation:Enum={"ECP256","ECP384","None","PFS1","PFS14","PFS2","PFS2048","PFS24","PFSMM"}
type IpsecPolicyPfsGroup string

const (
	IpsecPolicyPfsGroup_ECP256  = IpsecPolicyPfsGroup("ECP256")
	IpsecPolicyPfsGroup_ECP384  = IpsecPolicyPfsGroup("ECP384")
	IpsecPolicyPfsGroup_None    = IpsecPolicyPfsGroup("None")
	IpsecPolicyPfsGroup_PFS1    = IpsecPolicyPfsGroup("PFS1")
	IpsecPolicyPfsGroup_PFS14   = IpsecPolicyPfsGroup("PFS14")
	IpsecPolicyPfsGroup_PFS2    = IpsecPolicyPfsGroup("PFS2")
	IpsecPolicyPfsGroup_PFS2048 = IpsecPolicyPfsGroup("PFS2048")
	IpsecPolicyPfsGroup_PFS24   = IpsecPolicyPfsGroup("PFS24")
	IpsecPolicyPfsGroup_PFSMM   = IpsecPolicyPfsGroup("PFSMM")
)

// Deprecated version of PfsGroup_STATUS. Use v1beta20201101.PfsGroup_STATUS instead
type PfsGroup_STATUS string

const (
	PfsGroup_STATUS_ECP256  = PfsGroup_STATUS("ECP256")
	PfsGroup_STATUS_ECP384  = PfsGroup_STATUS("ECP384")
	PfsGroup_STATUS_None    = PfsGroup_STATUS("None")
	PfsGroup_STATUS_PFS1    = PfsGroup_STATUS("PFS1")
	PfsGroup_STATUS_PFS14   = PfsGroup_STATUS("PFS14")
	PfsGroup_STATUS_PFS2    = PfsGroup_STATUS("PFS2")
	PfsGroup_STATUS_PFS2048 = PfsGroup_STATUS("PFS2048")
	PfsGroup_STATUS_PFS24   = PfsGroup_STATUS("PFS24")
	PfsGroup_STATUS_PFSMM   = PfsGroup_STATUS("PFSMM")
)

func init() {
	SchemeBuilder.Register(&VirtualNetworkGateway{}, &VirtualNetworkGatewayList{})
}
