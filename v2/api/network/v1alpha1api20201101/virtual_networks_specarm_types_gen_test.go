// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_SPECARM, VirtualNetworks_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_SPECARM runs a test to see if a specific instance of VirtualNetworks_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_SPECARM(subject VirtualNetworks_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_SPECARM instances for property testing - lazily instantiated by
//VirtualNetworks_SPECARMGenerator()
var virtualNetworks_specarmGenerator gopter.Gen

// VirtualNetworks_SPECARMGenerator returns a generator of VirtualNetworks_SPECARM instances for property testing.
// We first initialize virtualNetworks_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_SPECARMGenerator() gopter.Gen {
	if virtualNetworks_specarmGenerator != nil {
		return virtualNetworks_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_SPECARM(generators)
	virtualNetworks_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_SPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_SPECARM(generators)
	virtualNetworks_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_SPECARM{}), generators)

	return virtualNetworks_specarmGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_SPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkPropertiesFormat_SpecARMGenerator())
}

func Test_VirtualNetworkPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPropertiesFormat_SpecARM, VirtualNetworkPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPropertiesFormat_SpecARM runs a test to see if a specific instance of VirtualNetworkPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPropertiesFormat_SpecARM(subject VirtualNetworkPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkPropertiesFormat_SpecARMGenerator()
var virtualNetworkPropertiesFormat_specARMGenerator gopter.Gen

// VirtualNetworkPropertiesFormat_SpecARMGenerator returns a generator of VirtualNetworkPropertiesFormat_SpecARM instances for property testing.
// We first initialize virtualNetworkPropertiesFormat_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if virtualNetworkPropertiesFormat_specARMGenerator != nil {
		return virtualNetworkPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM(generators)
	virtualNetworkPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM(generators)
	virtualNetworkPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_SpecARM{}), generators)

	return virtualNetworkPropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpace_SpecARMGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunities_SpecARMGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptions_SpecARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_SpecARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeering_SpecARMGenerator())
}

func Test_DhcpOptions_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptions_SpecARM, DhcpOptions_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptions_SpecARM runs a test to see if a specific instance of DhcpOptions_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptions_SpecARM(subject DhcpOptions_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_SpecARM instances for property testing - lazily instantiated by
//DhcpOptions_SpecARMGenerator()
var dhcpOptions_specARMGenerator gopter.Gen

// DhcpOptions_SpecARMGenerator returns a generator of DhcpOptions_SpecARM instances for property testing.
func DhcpOptions_SpecARMGenerator() gopter.Gen {
	if dhcpOptions_specARMGenerator != nil {
		return dhcpOptions_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptions_SpecARM(generators)
	dhcpOptions_specARMGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_SpecARM{}), generators)

	return dhcpOptions_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptions_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptions_SpecARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Spec_VirtualNetwork_SubResourceEmbeddedARM, Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Spec_VirtualNetwork_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Spec_VirtualNetwork_SubResourceEmbeddedARM(subject Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARMGenerator()
var subnet_spec_virtualNetwork_subResourceEmbeddedARMGenerator gopter.Gen

// Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARMGenerator returns a generator of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM instances for property testing.
func Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_spec_virtualNetwork_subResourceEmbeddedARMGenerator != nil {
		return subnet_spec_virtualNetwork_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Spec_VirtualNetwork_SubResourceEmbeddedARM(generators)
	subnet_spec_virtualNetwork_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM{}), generators)

	return subnet_spec_virtualNetwork_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Spec_VirtualNetwork_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Spec_VirtualNetwork_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkPeering_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeering_SpecARM, VirtualNetworkPeering_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeering_SpecARM runs a test to see if a specific instance of VirtualNetworkPeering_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeering_SpecARM(subject VirtualNetworkPeering_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkPeering_SpecARMGenerator()
var virtualNetworkPeering_specARMGenerator gopter.Gen

// VirtualNetworkPeering_SpecARMGenerator returns a generator of VirtualNetworkPeering_SpecARM instances for property testing.
func VirtualNetworkPeering_SpecARMGenerator() gopter.Gen {
	if virtualNetworkPeering_specARMGenerator != nil {
		return virtualNetworkPeering_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeering_SpecARM(generators)
	virtualNetworkPeering_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_SpecARM{}), generators)

	return virtualNetworkPeering_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeering_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeering_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
