// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworksSPECARM, VirtualNetworksSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworksSPECARM runs a test to see if a specific instance of VirtualNetworks_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworksSPECARM(subject VirtualNetworks_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_SPECARM instances for property testing - lazily instantiated by
//VirtualNetworksSPECARMGenerator()
var virtualNetworksSPECARMGenerator gopter.Gen

// VirtualNetworksSPECARMGenerator returns a generator of VirtualNetworks_SPECARM instances for property testing.
// We first initialize virtualNetworksSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworksSPECARMGenerator() gopter.Gen {
	if virtualNetworksSPECARMGenerator != nil {
		return virtualNetworksSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSPECARM(generators)
	virtualNetworksSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworksSPECARM(generators)
	virtualNetworksSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_SPECARM{}), generators)

	return virtualNetworksSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworksSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworksSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworksSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworksSPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkPropertiesFormatSpecARMGenerator())
}

func Test_VirtualNetworkPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPropertiesFormatSpecARM, VirtualNetworkPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPropertiesFormatSpecARM runs a test to see if a specific instance of VirtualNetworkPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPropertiesFormatSpecARM(subject VirtualNetworkPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkPropertiesFormatSpecARMGenerator()
var virtualNetworkPropertiesFormatSpecARMGenerator gopter.Gen

// VirtualNetworkPropertiesFormatSpecARMGenerator returns a generator of VirtualNetworkPropertiesFormat_SpecARM instances for property testing.
// We first initialize virtualNetworkPropertiesFormatSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPropertiesFormatSpecARMGenerator() gopter.Gen {
	if virtualNetworkPropertiesFormatSpecARMGenerator != nil {
		return virtualNetworkPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM(generators)
	virtualNetworkPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM(generators)
	virtualNetworkPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_SpecARM{}), generators)

	return virtualNetworkPropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpaceSpecARMGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunitiesSpecARMGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptionsSpecARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceSpecARMGenerator())
	gens["Subnets"] = gen.SliceOf(SubnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeeringSpecARMGenerator())
}

func Test_DhcpOptions_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptionsSpecARM, DhcpOptionsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptionsSpecARM runs a test to see if a specific instance of DhcpOptions_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptionsSpecARM(subject DhcpOptions_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_SpecARM instances for property testing - lazily instantiated by DhcpOptionsSpecARMGenerator()
var dhcpOptionsSpecARMGenerator gopter.Gen

// DhcpOptionsSpecARMGenerator returns a generator of DhcpOptions_SpecARM instances for property testing.
func DhcpOptionsSpecARMGenerator() gopter.Gen {
	if dhcpOptionsSpecARMGenerator != nil {
		return dhcpOptionsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptionsSpecARM(generators)
	dhcpOptionsSpecARMGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_SpecARM{}), generators)

	return dhcpOptionsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptionsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptionsSpecARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetSpecVirtualNetworkSubResourceEmbeddedARM, SubnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetSpecVirtualNetworkSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetSpecVirtualNetworkSubResourceEmbeddedARM(subject Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by SubnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator()
var subnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator returns a generator of Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM instances for property testing.
func SubnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator != nil {
		return subnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetSpecVirtualNetworkSubResourceEmbeddedARM(generators)
	subnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM{}), generators)

	return subnetSpecVirtualNetworkSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetSpecVirtualNetworkSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetSpecVirtualNetworkSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkPeering_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeeringSpecARM, VirtualNetworkPeeringSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeeringSpecARM runs a test to see if a specific instance of VirtualNetworkPeering_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeeringSpecARM(subject VirtualNetworkPeering_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkPeeringSpecARMGenerator()
var virtualNetworkPeeringSpecARMGenerator gopter.Gen

// VirtualNetworkPeeringSpecARMGenerator returns a generator of VirtualNetworkPeering_SpecARM instances for property testing.
func VirtualNetworkPeeringSpecARMGenerator() gopter.Gen {
	if virtualNetworkPeeringSpecARMGenerator != nil {
		return virtualNetworkPeeringSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeeringSpecARM(generators)
	virtualNetworkPeeringSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_SpecARM{}), generators)

	return virtualNetworkPeeringSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeeringSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeeringSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
