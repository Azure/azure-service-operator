// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return subnet_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormat_StatusARMGenerator())
}

func Test_SubnetPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormat_StatusARM, SubnetPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormat_StatusARM runs a test to see if a specific instance of SubnetPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormat_StatusARM(subject SubnetPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubnetPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubnetPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//SubnetPropertiesFormat_StatusARMGenerator()
var subnetPropertiesFormat_statusARMGenerator gopter.Gen

// SubnetPropertiesFormat_StatusARMGenerator returns a generator of SubnetPropertiesFormat_StatusARM instances for property testing.
// We first initialize subnetPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if subnetPropertiesFormat_statusARMGenerator != nil {
		return subnetPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_StatusARM(generators)
	subnetPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_StatusARM(generators)
	subnetPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_StatusARM{}), generators)

	return subnetPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Purpose"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfiguration_StatusARMGenerator())
	gens["Delegations"] = gen.SliceOf(Delegation_StatusARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_StatusARMGenerator())
	gens["IpConfigurationProfiles"] = gen.SliceOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResource_StatusARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["ResourceNavigationLinks"] = gen.SliceOf(ResourceNavigationLink_StatusARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["ServiceAssociationLinks"] = gen.SliceOf(ServiceAssociationLink_StatusARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormat_StatusARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration_StatusARM, ApplicationGatewayIPConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration_StatusARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration_StatusARM(subject ApplicationGatewayIPConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_StatusARM instances for property testing - lazily instantiated by
//ApplicationGatewayIPConfiguration_StatusARMGenerator()
var applicationGatewayIPConfiguration_statusARMGenerator gopter.Gen

// ApplicationGatewayIPConfiguration_StatusARMGenerator returns a generator of ApplicationGatewayIPConfiguration_StatusARM instances for property testing.
// We first initialize applicationGatewayIPConfiguration_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfiguration_StatusARMGenerator() gopter.Gen {
	if applicationGatewayIPConfiguration_statusARMGenerator != nil {
		return applicationGatewayIPConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM(generators)
	applicationGatewayIPConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM(generators)
	applicationGatewayIPConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_StatusARM{}), generators)

	return applicationGatewayIPConfiguration_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormat_StatusARMGenerator())
}

func Test_Delegation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegation_StatusARM, Delegation_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegation_StatusARM runs a test to see if a specific instance of Delegation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegation_StatusARM(subject Delegation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_StatusARM instances for property testing - lazily instantiated by
//Delegation_StatusARMGenerator()
var delegation_statusARMGenerator gopter.Gen

// Delegation_StatusARMGenerator returns a generator of Delegation_StatusARM instances for property testing.
// We first initialize delegation_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Delegation_StatusARMGenerator() gopter.Gen {
	if delegation_statusARMGenerator != nil {
		return delegation_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_StatusARM(generators)
	delegation_statusARMGenerator = gen.Struct(reflect.TypeOf(Delegation_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDelegation_StatusARM(generators)
	delegation_statusARMGenerator = gen.Struct(reflect.TypeOf(Delegation_StatusARM{}), generators)

	return delegation_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegation_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegation_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegation_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegation_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormat_StatusARMGenerator())
}

func Test_IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationProfile_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfiguration_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroup_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return privateEndpoint_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
}

func Test_ResourceNavigationLink_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLink_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLink_StatusARM, ResourceNavigationLink_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLink_StatusARM runs a test to see if a specific instance of ResourceNavigationLink_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLink_StatusARM(subject ResourceNavigationLink_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLink_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLink_StatusARM instances for property testing - lazily instantiated by
//ResourceNavigationLink_StatusARMGenerator()
var resourceNavigationLink_statusARMGenerator gopter.Gen

// ResourceNavigationLink_StatusARMGenerator returns a generator of ResourceNavigationLink_StatusARM instances for property testing.
// We first initialize resourceNavigationLink_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceNavigationLink_StatusARMGenerator() gopter.Gen {
	if resourceNavigationLink_statusARMGenerator != nil {
		return resourceNavigationLink_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLink_StatusARM(generators)
	resourceNavigationLink_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLink_StatusARM(generators)
	AddRelatedPropertyGeneratorsForResourceNavigationLink_StatusARM(generators)
	resourceNavigationLink_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_StatusARM{}), generators)

	return resourceNavigationLink_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLink_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLink_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForResourceNavigationLink_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceNavigationLink_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ResourceNavigationLinkFormat_StatusARMGenerator())
}

func Test_RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var routeTable_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTable_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return routeTable_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	routeTable_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return routeTable_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceAssociationLink_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLink_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLink_StatusARM, ServiceAssociationLink_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLink_StatusARM runs a test to see if a specific instance of ServiceAssociationLink_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLink_StatusARM(subject ServiceAssociationLink_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLink_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLink_StatusARM instances for property testing - lazily instantiated by
//ServiceAssociationLink_StatusARMGenerator()
var serviceAssociationLink_statusARMGenerator gopter.Gen

// ServiceAssociationLink_StatusARMGenerator returns a generator of ServiceAssociationLink_StatusARM instances for property testing.
// We first initialize serviceAssociationLink_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceAssociationLink_StatusARMGenerator() gopter.Gen {
	if serviceAssociationLink_statusARMGenerator != nil {
		return serviceAssociationLink_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLink_StatusARM(generators)
	serviceAssociationLink_statusARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLink_StatusARM(generators)
	AddRelatedPropertyGeneratorsForServiceAssociationLink_StatusARM(generators)
	serviceAssociationLink_statusARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_StatusARM{}), generators)

	return serviceAssociationLink_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLink_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLink_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceAssociationLink_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceAssociationLink_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceAssociationLinkPropertiesFormat_StatusARMGenerator())
}

func Test_ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicy_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormat_StatusARM, ServiceEndpointPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormat_StatusARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormat_StatusARM(subject ServiceEndpointPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//ServiceEndpointPropertiesFormat_StatusARMGenerator()
var serviceEndpointPropertiesFormat_statusARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormat_StatusARMGenerator returns a generator of ServiceEndpointPropertiesFormat_StatusARM instances for property testing.
func ServiceEndpointPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormat_statusARMGenerator != nil {
		return serviceEndpointPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_StatusARM(generators)
	serviceEndpointPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_StatusARM{}), generators)

	return serviceEndpointPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM, ApplicationGatewayIPConfigurationPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing - lazily
//instantiated by ApplicationGatewayIPConfigurationPropertiesFormat_StatusARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormat_StatusARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM(generators)
	applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM(generators)
	applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var ipConfigurationProfilePropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationProfilePropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return ipConfigurationProfilePropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfigurationProfilePropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationProfilePropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

func Test_IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationPropertiesFormat_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_ResourceNavigationLinkFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLinkFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLinkFormat_StatusARM, ResourceNavigationLinkFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLinkFormat_StatusARM runs a test to see if a specific instance of ResourceNavigationLinkFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLinkFormat_StatusARM(subject ResourceNavigationLinkFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLinkFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLinkFormat_StatusARM instances for property testing - lazily instantiated by
//ResourceNavigationLinkFormat_StatusARMGenerator()
var resourceNavigationLinkFormat_statusARMGenerator gopter.Gen

// ResourceNavigationLinkFormat_StatusARMGenerator returns a generator of ResourceNavigationLinkFormat_StatusARM instances for property testing.
func ResourceNavigationLinkFormat_StatusARMGenerator() gopter.Gen {
	if resourceNavigationLinkFormat_statusARMGenerator != nil {
		return resourceNavigationLinkFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkFormat_StatusARM(generators)
	resourceNavigationLinkFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLinkFormat_StatusARM{}), generators)

	return resourceNavigationLinkFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLinkFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLinkFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceAssociationLinkPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLinkPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLinkPropertiesFormat_StatusARM, ServiceAssociationLinkPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLinkPropertiesFormat_StatusARM runs a test to see if a specific instance of ServiceAssociationLinkPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLinkPropertiesFormat_StatusARM(subject ServiceAssociationLinkPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLinkPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLinkPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//ServiceAssociationLinkPropertiesFormat_StatusARMGenerator()
var serviceAssociationLinkPropertiesFormat_statusARMGenerator gopter.Gen

// ServiceAssociationLinkPropertiesFormat_StatusARMGenerator returns a generator of ServiceAssociationLinkPropertiesFormat_StatusARM instances for property testing.
func ServiceAssociationLinkPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if serviceAssociationLinkPropertiesFormat_statusARMGenerator != nil {
		return serviceAssociationLinkPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormat_StatusARM(generators)
	serviceAssociationLinkPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLinkPropertiesFormat_StatusARM{}), generators)

	return serviceAssociationLinkPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["AllowDelete"] = gen.PtrOf(gen.Bool())
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceDelegationPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormat_StatusARM, ServiceDelegationPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormat_StatusARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormat_StatusARM(subject ServiceDelegationPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//ServiceDelegationPropertiesFormat_StatusARMGenerator()
var serviceDelegationPropertiesFormat_statusARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormat_StatusARMGenerator returns a generator of ServiceDelegationPropertiesFormat_StatusARM instances for property testing.
func ServiceDelegationPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormat_statusARMGenerator != nil {
		return serviceDelegationPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_StatusARM(generators)
	serviceDelegationPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_StatusARM{}), generators)

	return serviceDelegationPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return publicIPAddress_status_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_StatusARMGenerator())
}
