// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateways_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateways_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaysSPECARM, VirtualNetworkGatewaysSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaysSPECARM runs a test to see if a specific instance of VirtualNetworkGateways_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaysSPECARM(subject VirtualNetworkGateways_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateways_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateways_SPECARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewaysSPECARMGenerator()
var virtualNetworkGatewaysSPECARMGenerator gopter.Gen

// VirtualNetworkGatewaysSPECARMGenerator returns a generator of VirtualNetworkGateways_SPECARM instances for property testing.
// We first initialize virtualNetworkGatewaysSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewaysSPECARMGenerator() gopter.Gen {
	if virtualNetworkGatewaysSPECARMGenerator != nil {
		return virtualNetworkGatewaysSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaysSPECARM(generators)
	virtualNetworkGatewaysSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateways_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaysSPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewaysSPECARM(generators)
	virtualNetworkGatewaysSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateways_SPECARM{}), generators)

	return virtualNetworkGatewaysSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaysSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaysSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewaysSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewaysSPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecARMGenerator())
	gens["Properties"] = VirtualNetworkGatewayPropertiesFormatSpecARMGenerator()
}

func Test_VirtualNetworkGatewayPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatSpecARM, VirtualNetworkGatewayPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatSpecARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatSpecARM(subject VirtualNetworkGatewayPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewayPropertiesFormatSpecARMGenerator()
var virtualNetworkGatewayPropertiesFormatSpecARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormatSpecARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_SpecARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormatSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormatSpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormatSpecARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM(generators)
	virtualNetworkGatewayPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM(generators)
	virtualNetworkGatewayPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_SpecARM{}), generators)

	return virtualNetworkGatewayPropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatSpecGatewayTypeExpressRoute, VirtualNetworkGatewayPropertiesFormatSpecGatewayTypeLocalGateway, VirtualNetworkGatewayPropertiesFormatSpecGatewayTypeVpn))
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatSpecVpnGatewayGenerationGeneration1, VirtualNetworkGatewayPropertiesFormatSpecVpnGatewayGenerationGeneration2, VirtualNetworkGatewayPropertiesFormatSpecVpnGatewayGenerationNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormatSpecVpnTypePolicyBased, VirtualNetworkGatewayPropertiesFormatSpecVpnTypeRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettingsSpecARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpaceSpecARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfigurationSpecARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySkuSpecARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfigurationSpecARMGenerator())
}

func Test_AddressSpace_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceSpecARM, AddressSpaceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceSpecARM runs a test to see if a specific instance of AddressSpace_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceSpecARM(subject AddressSpace_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_SpecARM instances for property testing - lazily instantiated by
//AddressSpaceSpecARMGenerator()
var addressSpaceSpecARMGenerator gopter.Gen

// AddressSpaceSpecARMGenerator returns a generator of AddressSpace_SpecARM instances for property testing.
func AddressSpaceSpecARMGenerator() gopter.Gen {
	if addressSpaceSpecARMGenerator != nil {
		return addressSpaceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceSpecARM(generators)
	addressSpaceSpecARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_SpecARM{}), generators)

	return addressSpaceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceSpecARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettingsSpecARM, BgpSettingsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettingsSpecARM runs a test to see if a specific instance of BgpSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettingsSpecARM(subject BgpSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_SpecARM instances for property testing - lazily instantiated by BgpSettingsSpecARMGenerator()
var bgpSettingsSpecARMGenerator gopter.Gen

// BgpSettingsSpecARMGenerator returns a generator of BgpSettings_SpecARM instances for property testing.
// We first initialize bgpSettingsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettingsSpecARMGenerator() gopter.Gen {
	if bgpSettingsSpecARMGenerator != nil {
		return bgpSettingsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsSpecARM(generators)
	bgpSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsSpecARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettingsSpecARM(generators)
	bgpSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_SpecARM{}), generators)

	return bgpSettingsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettingsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettingsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddressSpecARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationSpecARM, VirtualNetworkGatewayIPConfigurationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationSpecARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationSpecARM(subject VirtualNetworkGatewayIPConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewayIPConfigurationSpecARMGenerator()
var virtualNetworkGatewayIPConfigurationSpecARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationSpecARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_SpecARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationSpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationSpecARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM(generators)
	virtualNetworkGatewayIPConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM(generators)
	virtualNetworkGatewayIPConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_SpecARM{}), generators)

	return virtualNetworkGatewayIPConfigurationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator())
}

func Test_VirtualNetworkGatewaySku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySkuSpecARM, VirtualNetworkGatewaySkuSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySkuSpecARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySkuSpecARM(subject VirtualNetworkGatewaySku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewaySkuSpecARMGenerator()
var virtualNetworkGatewaySkuSpecARMGenerator gopter.Gen

// VirtualNetworkGatewaySkuSpecARMGenerator returns a generator of VirtualNetworkGatewaySku_SpecARM instances for property testing.
func VirtualNetworkGatewaySkuSpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySkuSpecARMGenerator != nil {
		return virtualNetworkGatewaySkuSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuSpecARM(generators)
	virtualNetworkGatewaySkuSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_SpecARM{}), generators)

	return virtualNetworkGatewaySkuSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuSpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySkuSpecNameBasic,
		VirtualNetworkGatewaySkuSpecNameErGw1AZ,
		VirtualNetworkGatewaySkuSpecNameErGw2AZ,
		VirtualNetworkGatewaySkuSpecNameErGw3AZ,
		VirtualNetworkGatewaySkuSpecNameHighPerformance,
		VirtualNetworkGatewaySkuSpecNameStandard,
		VirtualNetworkGatewaySkuSpecNameUltraPerformance,
		VirtualNetworkGatewaySkuSpecNameVpnGw1,
		VirtualNetworkGatewaySkuSpecNameVpnGw1AZ,
		VirtualNetworkGatewaySkuSpecNameVpnGw2,
		VirtualNetworkGatewaySkuSpecNameVpnGw2AZ,
		VirtualNetworkGatewaySkuSpecNameVpnGw3,
		VirtualNetworkGatewaySkuSpecNameVpnGw3AZ,
		VirtualNetworkGatewaySkuSpecNameVpnGw4,
		VirtualNetworkGatewaySkuSpecNameVpnGw4AZ,
		VirtualNetworkGatewaySkuSpecNameVpnGw5,
		VirtualNetworkGatewaySkuSpecNameVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySkuSpecTierBasic,
		VirtualNetworkGatewaySkuSpecTierErGw1AZ,
		VirtualNetworkGatewaySkuSpecTierErGw2AZ,
		VirtualNetworkGatewaySkuSpecTierErGw3AZ,
		VirtualNetworkGatewaySkuSpecTierHighPerformance,
		VirtualNetworkGatewaySkuSpecTierStandard,
		VirtualNetworkGatewaySkuSpecTierUltraPerformance,
		VirtualNetworkGatewaySkuSpecTierVpnGw1,
		VirtualNetworkGatewaySkuSpecTierVpnGw1AZ,
		VirtualNetworkGatewaySkuSpecTierVpnGw2,
		VirtualNetworkGatewaySkuSpecTierVpnGw2AZ,
		VirtualNetworkGatewaySkuSpecTierVpnGw3,
		VirtualNetworkGatewaySkuSpecTierVpnGw3AZ,
		VirtualNetworkGatewaySkuSpecTierVpnGw4,
		VirtualNetworkGatewaySkuSpecTierVpnGw4AZ,
		VirtualNetworkGatewaySkuSpecTierVpnGw5,
		VirtualNetworkGatewaySkuSpecTierVpnGw5AZ))
}

func Test_VpnClientConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfigurationSpecARM, VpnClientConfigurationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfigurationSpecARM runs a test to see if a specific instance of VpnClientConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfigurationSpecARM(subject VpnClientConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_SpecARM instances for property testing - lazily instantiated by
//VpnClientConfigurationSpecARMGenerator()
var vpnClientConfigurationSpecARMGenerator gopter.Gen

// VpnClientConfigurationSpecARMGenerator returns a generator of VpnClientConfiguration_SpecARM instances for property testing.
// We first initialize vpnClientConfigurationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfigurationSpecARMGenerator() gopter.Gen {
	if vpnClientConfigurationSpecARMGenerator != nil {
		return vpnClientConfigurationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationSpecARM(generators)
	vpnClientConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationSpecARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfigurationSpecARM(generators)
	vpnClientConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_SpecARM{}), generators)

	return vpnClientConfigurationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfigurationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfigurationSpecVpnAuthenticationTypesAAD, VpnClientConfigurationSpecVpnAuthenticationTypesCertificate, VpnClientConfigurationSpecVpnAuthenticationTypesRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfigurationSpecVpnClientProtocolsIkeV2, VpnClientConfigurationSpecVpnClientProtocolsOpenVPN, VpnClientConfigurationSpecVpnClientProtocolsSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfigurationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServerSpecARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpaceSpecARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicySpecARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificateSpecARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificateSpecARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddressSpecARM, IPConfigurationBgpPeeringAddressSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddressSpecARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddressSpecARM(subject IPConfigurationBgpPeeringAddress_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_SpecARM instances for property testing - lazily instantiated by
//IPConfigurationBgpPeeringAddressSpecARMGenerator()
var ipConfigurationBgpPeeringAddressSpecARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddressSpecARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_SpecARM instances for property testing.
func IPConfigurationBgpPeeringAddressSpecARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddressSpecARMGenerator != nil {
		return ipConfigurationBgpPeeringAddressSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressSpecARM(generators)
	ipConfigurationBgpPeeringAddressSpecARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_SpecARM{}), generators)

	return ipConfigurationBgpPeeringAddressSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressSpecARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpsecPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicySpecARM, IpsecPolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicySpecARM runs a test to see if a specific instance of IpsecPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicySpecARM(subject IpsecPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_SpecARM instances for property testing - lazily instantiated by IpsecPolicySpecARMGenerator()
var ipsecPolicySpecARMGenerator gopter.Gen

// IpsecPolicySpecARMGenerator returns a generator of IpsecPolicy_SpecARM instances for property testing.
func IpsecPolicySpecARMGenerator() gopter.Gen {
	if ipsecPolicySpecARMGenerator != nil {
		return ipsecPolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicySpecARM(generators)
	ipsecPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_SpecARM{}), generators)

	return ipsecPolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicySpecARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.OneConstOf(
		DhGroup_SpecDHGroup1,
		DhGroup_SpecDHGroup14,
		DhGroup_SpecDHGroup2,
		DhGroup_SpecDHGroup2048,
		DhGroup_SpecDHGroup24,
		DhGroup_SpecECP256,
		DhGroup_SpecECP384,
		DhGroup_SpecNone)
	gens["IkeEncryption"] = gen.OneConstOf(
		IkeEncryption_SpecAES128,
		IkeEncryption_SpecAES192,
		IkeEncryption_SpecAES256,
		IkeEncryption_SpecDES,
		IkeEncryption_SpecDES3,
		IkeEncryption_SpecGCMAES128,
		IkeEncryption_SpecGCMAES256)
	gens["IkeIntegrity"] = gen.OneConstOf(
		IkeIntegrity_SpecGCMAES128,
		IkeIntegrity_SpecGCMAES256,
		IkeIntegrity_SpecMD5,
		IkeIntegrity_SpecSHA1,
		IkeIntegrity_SpecSHA256,
		IkeIntegrity_SpecSHA384)
	gens["IpsecEncryption"] = gen.OneConstOf(
		IpsecEncryption_SpecAES128,
		IpsecEncryption_SpecAES192,
		IpsecEncryption_SpecAES256,
		IpsecEncryption_SpecDES,
		IpsecEncryption_SpecDES3,
		IpsecEncryption_SpecGCMAES128,
		IpsecEncryption_SpecGCMAES192,
		IpsecEncryption_SpecGCMAES256,
		IpsecEncryption_SpecNone)
	gens["IpsecIntegrity"] = gen.OneConstOf(
		IpsecIntegrity_SpecGCMAES128,
		IpsecIntegrity_SpecGCMAES192,
		IpsecIntegrity_SpecGCMAES256,
		IpsecIntegrity_SpecMD5,
		IpsecIntegrity_SpecSHA1,
		IpsecIntegrity_SpecSHA256)
	gens["PfsGroup"] = gen.OneConstOf(
		PfsGroup_SpecECP256,
		PfsGroup_SpecECP384,
		PfsGroup_SpecNone,
		PfsGroup_SpecPFS1,
		PfsGroup_SpecPFS14,
		PfsGroup_SpecPFS2,
		PfsGroup_SpecPFS2048,
		PfsGroup_SpecPFS24,
		PfsGroup_SpecPFSMM)
	gens["SaDataSizeKilobytes"] = gen.Int()
	gens["SaLifeTimeSeconds"] = gen.Int()
}

func Test_RadiusServer_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServerSpecARM, RadiusServerSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServerSpecARM runs a test to see if a specific instance of RadiusServer_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServerSpecARM(subject RadiusServer_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_SpecARM instances for property testing - lazily instantiated by
//RadiusServerSpecARMGenerator()
var radiusServerSpecARMGenerator gopter.Gen

// RadiusServerSpecARMGenerator returns a generator of RadiusServer_SpecARM instances for property testing.
func RadiusServerSpecARMGenerator() gopter.Gen {
	if radiusServerSpecARMGenerator != nil {
		return radiusServerSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServerSpecARM(generators)
	radiusServerSpecARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_SpecARM{}), generators)

	return radiusServerSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServerSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServerSpecARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.AlphaString()
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM, VirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing - lazily
//instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResourceSpecARMGenerator())
}

func Test_VpnClientRevokedCertificate_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificateSpecARM, VpnClientRevokedCertificateSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificateSpecARM runs a test to see if a specific instance of VpnClientRevokedCertificate_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificateSpecARM(subject VpnClientRevokedCertificate_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_SpecARM instances for property testing - lazily instantiated by
//VpnClientRevokedCertificateSpecARMGenerator()
var vpnClientRevokedCertificateSpecARMGenerator gopter.Gen

// VpnClientRevokedCertificateSpecARMGenerator returns a generator of VpnClientRevokedCertificate_SpecARM instances for property testing.
// We first initialize vpnClientRevokedCertificateSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificateSpecARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificateSpecARMGenerator != nil {
		return vpnClientRevokedCertificateSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSpecARM(generators)
	vpnClientRevokedCertificateSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSpecARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateSpecARM(generators)
	vpnClientRevokedCertificateSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_SpecARM{}), generators)

	return vpnClientRevokedCertificateSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormatSpecARMGenerator())
}

func Test_VpnClientRootCertificate_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificateSpecARM, VpnClientRootCertificateSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificateSpecARM runs a test to see if a specific instance of VpnClientRootCertificate_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificateSpecARM(subject VpnClientRootCertificate_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_SpecARM instances for property testing - lazily instantiated by
//VpnClientRootCertificateSpecARMGenerator()
var vpnClientRootCertificateSpecARMGenerator gopter.Gen

// VpnClientRootCertificateSpecARMGenerator returns a generator of VpnClientRootCertificate_SpecARM instances for property testing.
// We first initialize vpnClientRootCertificateSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificateSpecARMGenerator() gopter.Gen {
	if vpnClientRootCertificateSpecARMGenerator != nil {
		return vpnClientRootCertificateSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateSpecARM(generators)
	vpnClientRootCertificateSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateSpecARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificateSpecARM(generators)
	vpnClientRootCertificateSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_SpecARM{}), generators)

	return vpnClientRootCertificateSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificateSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificateSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificateSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificateSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = VpnClientRootCertificatePropertiesFormatSpecARMGenerator()
}

func Test_VpnClientRevokedCertificatePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatSpecARM, VpnClientRevokedCertificatePropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatSpecARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatSpecARM(subject VpnClientRevokedCertificatePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_SpecARM instances for property testing - lazily instantiated
//by VpnClientRevokedCertificatePropertiesFormatSpecARMGenerator()
var vpnClientRevokedCertificatePropertiesFormatSpecARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormatSpecARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_SpecARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormatSpecARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormatSpecARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatSpecARM(generators)
	vpnClientRevokedCertificatePropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_SpecARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatSpecARM, VpnClientRootCertificatePropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatSpecARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatSpecARM(subject VpnClientRootCertificatePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//VpnClientRootCertificatePropertiesFormatSpecARMGenerator()
var vpnClientRootCertificatePropertiesFormatSpecARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormatSpecARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_SpecARM instances for property testing.
func VpnClientRootCertificatePropertiesFormatSpecARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormatSpecARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatSpecARM(generators)
	vpnClientRootCertificatePropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_SpecARM{}), generators)

	return vpnClientRootCertificatePropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["PublicCertData"] = gen.AlphaString()
}
