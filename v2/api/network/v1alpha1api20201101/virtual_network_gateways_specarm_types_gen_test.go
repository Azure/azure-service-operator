// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateways_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateways_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateways_SPECARM, VirtualNetworkGateways_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateways_SPECARM runs a test to see if a specific instance of VirtualNetworkGateways_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateways_SPECARM(subject VirtualNetworkGateways_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateways_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateways_SPECARM instances for property testing - lazily instantiated by
//VirtualNetworkGateways_SPECARMGenerator()
var virtualNetworkGateways_specarmGenerator gopter.Gen

// VirtualNetworkGateways_SPECARMGenerator returns a generator of VirtualNetworkGateways_SPECARM instances for property testing.
// We first initialize virtualNetworkGateways_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateways_SPECARMGenerator() gopter.Gen {
	if virtualNetworkGateways_specarmGenerator != nil {
		return virtualNetworkGateways_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPECARM(generators)
	virtualNetworkGateways_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateways_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateways_SPECARM(generators)
	virtualNetworkGateways_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateways_SPECARM{}), generators)

	return virtualNetworkGateways_specarmGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateways_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateways_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateways_SPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecARMGenerator())
	gens["Properties"] = VirtualNetworkGatewayPropertiesFormat_SpecARMGenerator()
}

func Test_VirtualNetworkGatewayPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_SpecARM, VirtualNetworkGatewayPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_SpecARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_SpecARM(subject VirtualNetworkGatewayPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewayPropertiesFormat_SpecARMGenerator()
var virtualNetworkGatewayPropertiesFormat_specARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormat_SpecARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_SpecARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormat_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormat_specARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM(generators)
	virtualNetworkGatewayPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM(generators)
	virtualNetworkGatewayPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_SpecARM{}), generators)

	return virtualNetworkGatewayPropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecLocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayType_SpecVpn))
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecGeneration1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecGeneration2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_SpecNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnType_SpecPolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnType_SpecRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_SpecARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_SpecARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_SpecARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_SpecARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_SpecARMGenerator())
}

func Test_AddressSpace_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_SpecARM, AddressSpace_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_SpecARM runs a test to see if a specific instance of AddressSpace_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_SpecARM(subject AddressSpace_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_SpecARM instances for property testing - lazily instantiated by
//AddressSpace_SpecARMGenerator()
var addressSpace_specARMGenerator gopter.Gen

// AddressSpace_SpecARMGenerator returns a generator of AddressSpace_SpecARM instances for property testing.
func AddressSpace_SpecARMGenerator() gopter.Gen {
	if addressSpace_specARMGenerator != nil {
		return addressSpace_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_SpecARM(generators)
	addressSpace_specARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_SpecARM{}), generators)

	return addressSpace_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_SpecARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_SpecARM, BgpSettings_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_SpecARM runs a test to see if a specific instance of BgpSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_SpecARM(subject BgpSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_SpecARM instances for property testing - lazily instantiated by
//BgpSettings_SpecARMGenerator()
var bgpSettings_specARMGenerator gopter.Gen

// BgpSettings_SpecARMGenerator returns a generator of BgpSettings_SpecARM instances for property testing.
// We first initialize bgpSettings_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_SpecARMGenerator() gopter.Gen {
	if bgpSettings_specARMGenerator != nil {
		return bgpSettings_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_SpecARM(generators)
	bgpSettings_specARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_SpecARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_SpecARM(generators)
	bgpSettings_specARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_SpecARM{}), generators)

	return bgpSettings_specARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_SpecARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_SpecARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_SpecARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_SpecARM, VirtualNetworkGatewayIPConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_SpecARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_SpecARM(subject VirtualNetworkGatewayIPConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewayIPConfiguration_SpecARMGenerator()
var virtualNetworkGatewayIPConfiguration_specARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_SpecARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_SpecARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_SpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_specARMGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM(generators)
	virtualNetworkGatewayIPConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM(generators)
	virtualNetworkGatewayIPConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_SpecARM{}), generators)

	return virtualNetworkGatewayIPConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARMGenerator())
}

func Test_VirtualNetworkGatewaySku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_SpecARM, VirtualNetworkGatewaySku_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_SpecARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_SpecARM(subject VirtualNetworkGatewaySku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_SpecARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewaySku_SpecARMGenerator()
var virtualNetworkGatewaySku_specARMGenerator gopter.Gen

// VirtualNetworkGatewaySku_SpecARMGenerator returns a generator of VirtualNetworkGatewaySku_SpecARM instances for property testing.
func VirtualNetworkGatewaySku_SpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_specARMGenerator != nil {
		return virtualNetworkGatewaySku_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_SpecARM(generators)
	virtualNetworkGatewaySku_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_SpecARM{}), generators)

	return virtualNetworkGatewaySku_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_SpecBasic,
		VirtualNetworkGatewaySku_Name_SpecErGw1AZ,
		VirtualNetworkGatewaySku_Name_SpecErGw2AZ,
		VirtualNetworkGatewaySku_Name_SpecErGw3AZ,
		VirtualNetworkGatewaySku_Name_SpecHighPerformance,
		VirtualNetworkGatewaySku_Name_SpecStandard,
		VirtualNetworkGatewaySku_Name_SpecUltraPerformance,
		VirtualNetworkGatewaySku_Name_SpecVpnGw1,
		VirtualNetworkGatewaySku_Name_SpecVpnGw1AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw2,
		VirtualNetworkGatewaySku_Name_SpecVpnGw2AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw3,
		VirtualNetworkGatewaySku_Name_SpecVpnGw3AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw4,
		VirtualNetworkGatewaySku_Name_SpecVpnGw4AZ,
		VirtualNetworkGatewaySku_Name_SpecVpnGw5,
		VirtualNetworkGatewaySku_Name_SpecVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_SpecBasic,
		VirtualNetworkGatewaySku_Tier_SpecErGw1AZ,
		VirtualNetworkGatewaySku_Tier_SpecErGw2AZ,
		VirtualNetworkGatewaySku_Tier_SpecErGw3AZ,
		VirtualNetworkGatewaySku_Tier_SpecHighPerformance,
		VirtualNetworkGatewaySku_Tier_SpecStandard,
		VirtualNetworkGatewaySku_Tier_SpecUltraPerformance,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw1,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw2,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw3,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw4,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw5,
		VirtualNetworkGatewaySku_Tier_SpecVpnGw5AZ))
}

func Test_VpnClientConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_SpecARM, VpnClientConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_SpecARM runs a test to see if a specific instance of VpnClientConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_SpecARM(subject VpnClientConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_SpecARM instances for property testing - lazily instantiated by
//VpnClientConfiguration_SpecARMGenerator()
var vpnClientConfiguration_specARMGenerator gopter.Gen

// VpnClientConfiguration_SpecARMGenerator returns a generator of VpnClientConfiguration_SpecARM instances for property testing.
// We first initialize vpnClientConfiguration_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_SpecARMGenerator() gopter.Gen {
	if vpnClientConfiguration_specARMGenerator != nil {
		return vpnClientConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_SpecARM(generators)
	vpnClientConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_SpecARM(generators)
	vpnClientConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_SpecARM{}), generators)

	return vpnClientConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypes_SpecAAD, VpnClientConfiguration_VpnAuthenticationTypes_SpecCertificate, VpnClientConfiguration_VpnAuthenticationTypes_SpecRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocols_SpecIkeV2, VpnClientConfiguration_VpnClientProtocols_SpecOpenVPN, VpnClientConfiguration_VpnClientProtocols_SpecSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_SpecARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_SpecARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_SpecARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_SpecARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_SpecARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_SpecARM, IPConfigurationBgpPeeringAddress_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_SpecARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_SpecARM(subject IPConfigurationBgpPeeringAddress_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_SpecARM instances for property testing - lazily instantiated by
//IPConfigurationBgpPeeringAddress_SpecARMGenerator()
var ipConfigurationBgpPeeringAddress_specARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_SpecARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_SpecARM instances for property testing.
func IPConfigurationBgpPeeringAddress_SpecARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_specARMGenerator != nil {
		return ipConfigurationBgpPeeringAddress_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_SpecARM(generators)
	ipConfigurationBgpPeeringAddress_specARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_SpecARM{}), generators)

	return ipConfigurationBgpPeeringAddress_specARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_SpecARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpsecPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_SpecARM, IpsecPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_SpecARM runs a test to see if a specific instance of IpsecPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_SpecARM(subject IpsecPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_SpecARM instances for property testing - lazily instantiated by
//IpsecPolicy_SpecARMGenerator()
var ipsecPolicy_specARMGenerator gopter.Gen

// IpsecPolicy_SpecARMGenerator returns a generator of IpsecPolicy_SpecARM instances for property testing.
func IpsecPolicy_SpecARMGenerator() gopter.Gen {
	if ipsecPolicy_specARMGenerator != nil {
		return ipsecPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_SpecARM(generators)
	ipsecPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_SpecARM{}), generators)

	return ipsecPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.OneConstOf(
		DhGroup_SpecDHGroup1,
		DhGroup_SpecDHGroup14,
		DhGroup_SpecDHGroup2,
		DhGroup_SpecDHGroup2048,
		DhGroup_SpecDHGroup24,
		DhGroup_SpecECP256,
		DhGroup_SpecECP384,
		DhGroup_SpecNone)
	gens["IkeEncryption"] = gen.OneConstOf(
		IkeEncryption_SpecAES128,
		IkeEncryption_SpecAES192,
		IkeEncryption_SpecAES256,
		IkeEncryption_SpecDES,
		IkeEncryption_SpecDES3,
		IkeEncryption_SpecGCMAES128,
		IkeEncryption_SpecGCMAES256)
	gens["IkeIntegrity"] = gen.OneConstOf(
		IkeIntegrity_SpecGCMAES128,
		IkeIntegrity_SpecGCMAES256,
		IkeIntegrity_SpecMD5,
		IkeIntegrity_SpecSHA1,
		IkeIntegrity_SpecSHA256,
		IkeIntegrity_SpecSHA384)
	gens["IpsecEncryption"] = gen.OneConstOf(
		IpsecEncryption_SpecAES128,
		IpsecEncryption_SpecAES192,
		IpsecEncryption_SpecAES256,
		IpsecEncryption_SpecDES,
		IpsecEncryption_SpecDES3,
		IpsecEncryption_SpecGCMAES128,
		IpsecEncryption_SpecGCMAES192,
		IpsecEncryption_SpecGCMAES256,
		IpsecEncryption_SpecNone)
	gens["IpsecIntegrity"] = gen.OneConstOf(
		IpsecIntegrity_SpecGCMAES128,
		IpsecIntegrity_SpecGCMAES192,
		IpsecIntegrity_SpecGCMAES256,
		IpsecIntegrity_SpecMD5,
		IpsecIntegrity_SpecSHA1,
		IpsecIntegrity_SpecSHA256)
	gens["PfsGroup"] = gen.OneConstOf(
		PfsGroup_SpecECP256,
		PfsGroup_SpecECP384,
		PfsGroup_SpecNone,
		PfsGroup_SpecPFS1,
		PfsGroup_SpecPFS14,
		PfsGroup_SpecPFS2,
		PfsGroup_SpecPFS2048,
		PfsGroup_SpecPFS24,
		PfsGroup_SpecPFSMM)
	gens["SaDataSizeKilobytes"] = gen.Int()
	gens["SaLifeTimeSeconds"] = gen.Int()
}

func Test_RadiusServer_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_SpecARM, RadiusServer_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_SpecARM runs a test to see if a specific instance of RadiusServer_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_SpecARM(subject RadiusServer_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_SpecARM instances for property testing - lazily instantiated by
//RadiusServer_SpecARMGenerator()
var radiusServer_specARMGenerator gopter.Gen

// RadiusServer_SpecARMGenerator returns a generator of RadiusServer_SpecARM instances for property testing.
func RadiusServer_SpecARMGenerator() gopter.Gen {
	if radiusServer_specARMGenerator != nil {
		return radiusServer_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_SpecARM(generators)
	radiusServer_specARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_SpecARM{}), generators)

	return radiusServer_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_SpecARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.AlphaString()
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM, VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing - lazily
//instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_SpecARMGenerator())
}

func Test_VpnClientRevokedCertificate_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_SpecARM, VpnClientRevokedCertificate_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_SpecARM runs a test to see if a specific instance of VpnClientRevokedCertificate_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_SpecARM(subject VpnClientRevokedCertificate_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_SpecARM instances for property testing - lazily instantiated by
//VpnClientRevokedCertificate_SpecARMGenerator()
var vpnClientRevokedCertificate_specARMGenerator gopter.Gen

// VpnClientRevokedCertificate_SpecARMGenerator returns a generator of VpnClientRevokedCertificate_SpecARM instances for property testing.
// We first initialize vpnClientRevokedCertificate_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificate_SpecARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_specARMGenerator != nil {
		return vpnClientRevokedCertificate_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM(generators)
	vpnClientRevokedCertificate_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM(generators)
	vpnClientRevokedCertificate_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_SpecARM{}), generators)

	return vpnClientRevokedCertificate_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormat_SpecARMGenerator())
}

func Test_VpnClientRootCertificate_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_SpecARM, VpnClientRootCertificate_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_SpecARM runs a test to see if a specific instance of VpnClientRootCertificate_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_SpecARM(subject VpnClientRootCertificate_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_SpecARM instances for property testing - lazily instantiated by
//VpnClientRootCertificate_SpecARMGenerator()
var vpnClientRootCertificate_specARMGenerator gopter.Gen

// VpnClientRootCertificate_SpecARMGenerator returns a generator of VpnClientRootCertificate_SpecARM instances for property testing.
// We first initialize vpnClientRootCertificate_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificate_SpecARMGenerator() gopter.Gen {
	if vpnClientRootCertificate_specARMGenerator != nil {
		return vpnClientRootCertificate_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_SpecARM(generators)
	vpnClientRootCertificate_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificate_SpecARM(generators)
	vpnClientRootCertificate_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_SpecARM{}), generators)

	return vpnClientRootCertificate_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificate_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificate_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = VpnClientRootCertificatePropertiesFormat_SpecARMGenerator()
}

func Test_VpnClientRevokedCertificatePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_SpecARM, VpnClientRevokedCertificatePropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_SpecARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_SpecARM(subject VpnClientRevokedCertificatePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_SpecARM instances for property testing - lazily instantiated
//by VpnClientRevokedCertificatePropertiesFormat_SpecARMGenerator()
var vpnClientRevokedCertificatePropertiesFormat_specARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormat_SpecARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_SpecARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormat_SpecARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormat_specARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_SpecARM(generators)
	vpnClientRevokedCertificatePropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_SpecARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_SpecARM, VpnClientRootCertificatePropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_SpecARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_SpecARM(subject VpnClientRootCertificatePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//VpnClientRootCertificatePropertiesFormat_SpecARMGenerator()
var vpnClientRootCertificatePropertiesFormat_specARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormat_SpecARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_SpecARM instances for property testing.
func VpnClientRootCertificatePropertiesFormat_SpecARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormat_specARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_SpecARM(generators)
	vpnClientRootCertificatePropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_SpecARM{}), generators)

	return vpnClientRootCertificatePropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["PublicCertData"] = gen.AlphaString()
}
