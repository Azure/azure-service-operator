// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_Subnet_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_STATUSARM, VirtualNetworks_Subnet_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_STATUSARM runs a test to see if a specific instance of VirtualNetworks_Subnet_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_STATUSARM(subject VirtualNetworks_Subnet_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnet_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnet_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnet_STATUSARMGenerator()
var virtualNetworks_Subnet_STATUSARMGenerator gopter.Gen

// VirtualNetworks_Subnet_STATUSARMGenerator returns a generator of VirtualNetworks_Subnet_STATUSARM instances for property testing.
// We first initialize virtualNetworks_Subnet_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_STATUSARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_STATUSARMGenerator != nil {
		return virtualNetworks_Subnet_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM(generators)
	virtualNetworks_Subnet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM(generators)
	virtualNetworks_Subnet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_STATUSARM{}), generators)

	return virtualNetworks_Subnet_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormat_STATUSARMGenerator())
}

func Test_SubnetPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormat_STATUSARM, SubnetPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormat_STATUSARM runs a test to see if a specific instance of SubnetPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormat_STATUSARM(subject SubnetPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubnetPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubnetPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// SubnetPropertiesFormat_STATUSARMGenerator()
var subnetPropertiesFormat_STATUSARMGenerator gopter.Gen

// SubnetPropertiesFormat_STATUSARMGenerator returns a generator of SubnetPropertiesFormat_STATUSARM instances for property testing.
// We first initialize subnetPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if subnetPropertiesFormat_STATUSARMGenerator != nil {
		return subnetPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM(generators)
	subnetPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM(generators)
	subnetPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_STATUSARM{}), generators)

	return subnetPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormat_PrivateEndpointNetworkPolicies_Disabled_STATUS, SubnetPropertiesFormat_PrivateEndpointNetworkPolicies_Enabled_STATUS))
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormat_PrivateLinkServiceNetworkPolicies_Disabled_STATUS, SubnetPropertiesFormat_PrivateLinkServiceNetworkPolicies_Enabled_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["Purpose"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfiguration_STATUSARMGenerator())
	gens["Delegations"] = gen.SliceOf(Delegation_STATUSARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_STATUSARMGenerator())
	gens["IpConfigurationProfiles"] = gen.SliceOf(IPConfigurationProfile_STATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(IPConfiguration_STATUSARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_STATUSARMGenerator())
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpoint_STATUSARMGenerator())
	gens["ResourceNavigationLinks"] = gen.SliceOf(ResourceNavigationLink_STATUSARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTable_STATUSARMGenerator())
	gens["ServiceAssociationLinks"] = gen.SliceOf(ServiceAssociationLink_STATUSARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicy_STATUSARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormat_STATUSARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration_STATUSARM, ApplicationGatewayIPConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration_STATUSARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration_STATUSARM(subject ApplicationGatewayIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// ApplicationGatewayIPConfiguration_STATUSARMGenerator()
var applicationGatewayIPConfiguration_STATUSARMGenerator gopter.Gen

// ApplicationGatewayIPConfiguration_STATUSARMGenerator returns a generator of ApplicationGatewayIPConfiguration_STATUSARM instances for property testing.
// We first initialize applicationGatewayIPConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfiguration_STATUSARMGenerator() gopter.Gen {
	if applicationGatewayIPConfiguration_STATUSARMGenerator != nil {
		return applicationGatewayIPConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM(generators)
	applicationGatewayIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM(generators)
	applicationGatewayIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_STATUSARM{}), generators)

	return applicationGatewayIPConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator())
}

func Test_Delegation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegation_STATUSARM, Delegation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegation_STATUSARM runs a test to see if a specific instance of Delegation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegation_STATUSARM(subject Delegation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_STATUSARM instances for property testing - lazily instantiated by
// Delegation_STATUSARMGenerator()
var delegation_STATUSARMGenerator gopter.Gen

// Delegation_STATUSARMGenerator returns a generator of Delegation_STATUSARM instances for property testing.
// We first initialize delegation_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Delegation_STATUSARMGenerator() gopter.Gen {
	if delegation_STATUSARMGenerator != nil {
		return delegation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_STATUSARM(generators)
	delegation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Delegation_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDelegation_STATUSARM(generators)
	delegation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Delegation_STATUSARM{}), generators)

	return delegation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegation_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormat_STATUSARMGenerator())
}

func Test_IPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfiguration_STATUSARM, IPConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfiguration_STATUSARM runs a test to see if a specific instance of IPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfiguration_STATUSARM(subject IPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// IPConfiguration_STATUSARMGenerator()
var ipConfiguration_STATUSARMGenerator gopter.Gen

// IPConfiguration_STATUSARMGenerator returns a generator of IPConfiguration_STATUSARM instances for property testing.
// We first initialize ipConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfiguration_STATUSARMGenerator() gopter.Gen {
	if ipConfiguration_STATUSARMGenerator != nil {
		return ipConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_STATUSARM(generators)
	ipConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIPConfiguration_STATUSARM(generators)
	ipConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_STATUSARM{}), generators)

	return ipConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationPropertiesFormat_STATUSARMGenerator())
}

func Test_IPConfigurationProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfile_STATUSARM, IPConfigurationProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfile_STATUSARM runs a test to see if a specific instance of IPConfigurationProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfile_STATUSARM(subject IPConfigurationProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfile_STATUSARM instances for property testing - lazily instantiated by
// IPConfigurationProfile_STATUSARMGenerator()
var ipConfigurationProfile_STATUSARMGenerator gopter.Gen

// IPConfigurationProfile_STATUSARMGenerator returns a generator of IPConfigurationProfile_STATUSARM instances for property testing.
// We first initialize ipConfigurationProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationProfile_STATUSARMGenerator() gopter.Gen {
	if ipConfigurationProfile_STATUSARMGenerator != nil {
		return ipConfigurationProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfile_STATUSARM(generators)
	ipConfigurationProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationProfile_STATUSARM(generators)
	ipConfigurationProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_STATUSARM{}), generators)

	return ipConfigurationProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationProfilePropertiesFormat_STATUSARMGenerator())
}

func Test_ResourceNavigationLink_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLink_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLink_STATUSARM, ResourceNavigationLink_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLink_STATUSARM runs a test to see if a specific instance of ResourceNavigationLink_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLink_STATUSARM(subject ResourceNavigationLink_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLink_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLink_STATUSARM instances for property testing - lazily instantiated by
// ResourceNavigationLink_STATUSARMGenerator()
var resourceNavigationLink_STATUSARMGenerator gopter.Gen

// ResourceNavigationLink_STATUSARMGenerator returns a generator of ResourceNavigationLink_STATUSARM instances for property testing.
// We first initialize resourceNavigationLink_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceNavigationLink_STATUSARMGenerator() gopter.Gen {
	if resourceNavigationLink_STATUSARMGenerator != nil {
		return resourceNavigationLink_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLink_STATUSARM(generators)
	resourceNavigationLink_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLink_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForResourceNavigationLink_STATUSARM(generators)
	resourceNavigationLink_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_STATUSARM{}), generators)

	return resourceNavigationLink_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLink_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLink_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForResourceNavigationLink_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceNavigationLink_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ResourceNavigationLinkFormat_STATUSARMGenerator())
}

func Test_RouteTable_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTable_STATUSARM, RouteTable_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTable_STATUSARM runs a test to see if a specific instance of RouteTable_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTable_STATUSARM(subject RouteTable_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_STATUSARM instances for property testing - lazily instantiated by
// RouteTable_STATUSARMGenerator()
var routeTable_STATUSARMGenerator gopter.Gen

// RouteTable_STATUSARMGenerator returns a generator of RouteTable_STATUSARM instances for property testing.
// We first initialize routeTable_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTable_STATUSARMGenerator() gopter.Gen {
	if routeTable_STATUSARMGenerator != nil {
		return routeTable_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_STATUSARM(generators)
	routeTable_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForRouteTable_STATUSARM(generators)
	routeTable_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_STATUSARM{}), generators)

	return routeTable_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTable_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTable_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTable_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTable_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormat_STATUSARMGenerator())
}

func Test_ServiceAssociationLink_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLink_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLink_STATUSARM, ServiceAssociationLink_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLink_STATUSARM runs a test to see if a specific instance of ServiceAssociationLink_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLink_STATUSARM(subject ServiceAssociationLink_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLink_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLink_STATUSARM instances for property testing - lazily instantiated by
// ServiceAssociationLink_STATUSARMGenerator()
var serviceAssociationLink_STATUSARMGenerator gopter.Gen

// ServiceAssociationLink_STATUSARMGenerator returns a generator of ServiceAssociationLink_STATUSARM instances for property testing.
// We first initialize serviceAssociationLink_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceAssociationLink_STATUSARMGenerator() gopter.Gen {
	if serviceAssociationLink_STATUSARMGenerator != nil {
		return serviceAssociationLink_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLink_STATUSARM(generators)
	serviceAssociationLink_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLink_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForServiceAssociationLink_STATUSARM(generators)
	serviceAssociationLink_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_STATUSARM{}), generators)

	return serviceAssociationLink_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLink_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLink_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceAssociationLink_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceAssociationLink_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceAssociationLinkPropertiesFormat_STATUSARMGenerator())
}

func Test_ServiceEndpointPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicy_STATUSARM, ServiceEndpointPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicy_STATUSARM runs a test to see if a specific instance of ServiceEndpointPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicy_STATUSARM(subject ServiceEndpointPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_STATUSARM instances for property testing - lazily instantiated by
// ServiceEndpointPolicy_STATUSARMGenerator()
var serviceEndpointPolicy_STATUSARMGenerator gopter.Gen

// ServiceEndpointPolicy_STATUSARMGenerator returns a generator of ServiceEndpointPolicy_STATUSARM instances for property testing.
// We first initialize serviceEndpointPolicy_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicy_STATUSARMGenerator() gopter.Gen {
	if serviceEndpointPolicy_STATUSARMGenerator != nil {
		return serviceEndpointPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicy_STATUSARM(generators)
	serviceEndpointPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicy_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicy_STATUSARM(generators)
	serviceEndpointPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_STATUSARM{}), generators)

	return serviceEndpointPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicy_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceEndpointPolicyPropertiesFormat_STATUSARMGenerator())
}

func Test_ServiceEndpointPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormat_STATUSARM, ServiceEndpointPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormat_STATUSARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormat_STATUSARM(subject ServiceEndpointPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceEndpointPropertiesFormat_STATUSARMGenerator()
var serviceEndpointPropertiesFormat_STATUSARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormat_STATUSARMGenerator returns a generator of ServiceEndpointPropertiesFormat_STATUSARM instances for property testing.
func ServiceEndpointPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormat_STATUSARMGenerator != nil {
		return serviceEndpointPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_STATUSARM(generators)
	serviceEndpointPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_STATUSARM{}), generators)

	return serviceEndpointPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM, ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM(generators)
	applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM(generators)
	applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_IPConfigurationProfilePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfilePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfilePropertiesFormat_STATUSARM, IPConfigurationProfilePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfilePropertiesFormat_STATUSARM runs a test to see if a specific instance of IPConfigurationProfilePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfilePropertiesFormat_STATUSARM(subject IPConfigurationProfilePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfilePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfilePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// IPConfigurationProfilePropertiesFormat_STATUSARMGenerator()
var ipConfigurationProfilePropertiesFormat_STATUSARMGenerator gopter.Gen

// IPConfigurationProfilePropertiesFormat_STATUSARMGenerator returns a generator of IPConfigurationProfilePropertiesFormat_STATUSARM instances for property testing.
// We first initialize ipConfigurationProfilePropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationProfilePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if ipConfigurationProfilePropertiesFormat_STATUSARMGenerator != nil {
		return ipConfigurationProfilePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM(generators)
	ipConfigurationProfilePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfilePropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM(generators)
	ipConfigurationProfilePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfilePropertiesFormat_STATUSARM{}), generators)

	return ipConfigurationProfilePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationProfilePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_STATUSARMGenerator())
}

func Test_IPConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationPropertiesFormat_STATUSARM, IPConfigurationPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationPropertiesFormat_STATUSARM runs a test to see if a specific instance of IPConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationPropertiesFormat_STATUSARM(subject IPConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// IPConfigurationPropertiesFormat_STATUSARMGenerator()
var ipConfigurationPropertiesFormat_STATUSARMGenerator gopter.Gen

// IPConfigurationPropertiesFormat_STATUSARMGenerator returns a generator of IPConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize ipConfigurationPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if ipConfigurationPropertiesFormat_STATUSARMGenerator != nil {
		return ipConfigurationPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM(generators)
	ipConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM(generators)
	ipConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_STATUSARM{}), generators)

	return ipConfigurationPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_Dynamic_STATUS, IPAllocationMethod_Static_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_STATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_STATUSARMGenerator())
}

func Test_ResourceNavigationLinkFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLinkFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLinkFormat_STATUSARM, ResourceNavigationLinkFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLinkFormat_STATUSARM runs a test to see if a specific instance of ResourceNavigationLinkFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLinkFormat_STATUSARM(subject ResourceNavigationLinkFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLinkFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLinkFormat_STATUSARM instances for property testing - lazily instantiated by
// ResourceNavigationLinkFormat_STATUSARMGenerator()
var resourceNavigationLinkFormat_STATUSARMGenerator gopter.Gen

// ResourceNavigationLinkFormat_STATUSARMGenerator returns a generator of ResourceNavigationLinkFormat_STATUSARM instances for property testing.
func ResourceNavigationLinkFormat_STATUSARMGenerator() gopter.Gen {
	if resourceNavigationLinkFormat_STATUSARMGenerator != nil {
		return resourceNavigationLinkFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkFormat_STATUSARM(generators)
	resourceNavigationLinkFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLinkFormat_STATUSARM{}), generators)

	return resourceNavigationLinkFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLinkFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLinkFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

func Test_RouteTablePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablePropertiesFormat_STATUSARM, RouteTablePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablePropertiesFormat_STATUSARM runs a test to see if a specific instance of RouteTablePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablePropertiesFormat_STATUSARM(subject RouteTablePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// RouteTablePropertiesFormat_STATUSARMGenerator()
var routeTablePropertiesFormat_STATUSARMGenerator gopter.Gen

// RouteTablePropertiesFormat_STATUSARMGenerator returns a generator of RouteTablePropertiesFormat_STATUSARM instances for property testing.
func RouteTablePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if routeTablePropertiesFormat_STATUSARMGenerator != nil {
		return routeTablePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_STATUSARM(generators)
	routeTablePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_STATUSARM{}), generators)

	return routeTablePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceAssociationLinkPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLinkPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLinkPropertiesFormat_STATUSARM, ServiceAssociationLinkPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLinkPropertiesFormat_STATUSARM runs a test to see if a specific instance of ServiceAssociationLinkPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLinkPropertiesFormat_STATUSARM(subject ServiceAssociationLinkPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLinkPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLinkPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceAssociationLinkPropertiesFormat_STATUSARMGenerator()
var serviceAssociationLinkPropertiesFormat_STATUSARMGenerator gopter.Gen

// ServiceAssociationLinkPropertiesFormat_STATUSARMGenerator returns a generator of ServiceAssociationLinkPropertiesFormat_STATUSARM instances for property testing.
func ServiceAssociationLinkPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if serviceAssociationLinkPropertiesFormat_STATUSARMGenerator != nil {
		return serviceAssociationLinkPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormat_STATUSARM(generators)
	serviceAssociationLinkPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLinkPropertiesFormat_STATUSARM{}), generators)

	return serviceAssociationLinkPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["AllowDelete"] = gen.PtrOf(gen.Bool())
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

func Test_ServiceDelegationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormat_STATUSARM, ServiceDelegationPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormat_STATUSARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormat_STATUSARM(subject ServiceDelegationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceDelegationPropertiesFormat_STATUSARMGenerator()
var serviceDelegationPropertiesFormat_STATUSARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormat_STATUSARMGenerator returns a generator of ServiceDelegationPropertiesFormat_STATUSARM instances for property testing.
func ServiceDelegationPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormat_STATUSARMGenerator != nil {
		return serviceDelegationPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_STATUSARM(generators)
	serviceDelegationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_STATUSARM{}), generators)

	return serviceDelegationPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPolicyPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormat_STATUSARM, ServiceEndpointPolicyPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormat_STATUSARM runs a test to see if a specific instance of ServiceEndpointPolicyPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormat_STATUSARM(subject ServiceEndpointPolicyPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceEndpointPolicyPropertiesFormat_STATUSARMGenerator()
var serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator gopter.Gen

// ServiceEndpointPolicyPropertiesFormat_STATUSARMGenerator returns a generator of ServiceEndpointPolicyPropertiesFormat_STATUSARM instances for property testing.
// We first initialize serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicyPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator != nil {
		return serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM(generators)
	serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM(generators)
	serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyPropertiesFormat_STATUSARM{}), generators)

	return serviceEndpointPolicyPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ServiceEndpointPolicyDefinitions"] = gen.SliceOf(ServiceEndpointPolicyDefinition_STATUSARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_STATUSARMGenerator())
}

func Test_ServiceEndpointPolicyDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinition_STATUSARM, ServiceEndpointPolicyDefinition_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinition_STATUSARM runs a test to see if a specific instance of ServiceEndpointPolicyDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinition_STATUSARM(subject ServiceEndpointPolicyDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinition_STATUSARM instances for property testing - lazily instantiated by
// ServiceEndpointPolicyDefinition_STATUSARMGenerator()
var serviceEndpointPolicyDefinition_STATUSARMGenerator gopter.Gen

// ServiceEndpointPolicyDefinition_STATUSARMGenerator returns a generator of ServiceEndpointPolicyDefinition_STATUSARM instances for property testing.
// We first initialize serviceEndpointPolicyDefinition_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicyDefinition_STATUSARMGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinition_STATUSARMGenerator != nil {
		return serviceEndpointPolicyDefinition_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM(generators)
	serviceEndpointPolicyDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinition_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM(generators)
	serviceEndpointPolicyDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinition_STATUSARM{}), generators)

	return serviceEndpointPolicyDefinition_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicyDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator())
}

func Test_ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM, ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM runs a test to see if a specific instance of ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM(subject ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator()
var serviceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator gopter.Gen

// ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator returns a generator of ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM instances for property testing.
func ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator != nil {
		return serviceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM(generators)
	serviceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM{}), generators)

	return serviceEndpointPolicyDefinitionPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["Service"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceResources"] = gen.SliceOf(gen.AlphaString())
}
