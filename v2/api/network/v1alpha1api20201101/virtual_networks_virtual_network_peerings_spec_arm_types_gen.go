// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peering__spec_arm_types_gen.go
// Deprecated version of VirtualNetworksVirtualNetworkPeering_Spec. Use v1beta20201101.VirtualNetworksVirtualNetworkPeering_Spec instead
type VirtualNetworksVirtualNetworkPeering_SpecARM struct {
	AzureName  string                                    `json:"azureName,omitempty"`
	Id         *string                                   `json:"id,omitempty"`
========
// Deprecated version of VirtualNetworks_VirtualNetworkPeerings_Spec. Use v1beta20201101.VirtualNetworks_VirtualNetworkPeerings_Spec instead
type VirtualNetworks_VirtualNetworkPeerings_SpecARM struct {
	Location   *string                                   `json:"location,omitempty"`
>>>>>>>> main:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peerings_spec_arm_types_gen.go
	Name       string                                    `json:"name,omitempty"`
	Properties *VirtualNetworkPeeringPropertiesFormatARM `json:"properties,omitempty"`
	Type       *string                                   `json:"type,omitempty"`
}

<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peering__spec_arm_types_gen.go
var _ genruntime.ARMResourceSpec = &VirtualNetworksVirtualNetworkPeering_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (peering VirtualNetworksVirtualNetworkPeering_SpecARM) GetAPIVersion() string {
========
var _ genruntime.ARMResourceSpec = &VirtualNetworks_VirtualNetworkPeerings_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (peerings VirtualNetworks_VirtualNetworkPeerings_SpecARM) GetAPIVersion() string {
>>>>>>>> main:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peerings_spec_arm_types_gen.go
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peering__spec_arm_types_gen.go
func (peering *VirtualNetworksVirtualNetworkPeering_SpecARM) GetName() string {
	return peering.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
func (peering *VirtualNetworksVirtualNetworkPeering_SpecARM) GetType() string {
========
func (peerings *VirtualNetworks_VirtualNetworkPeerings_SpecARM) GetName() string {
	return peerings.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
func (peerings *VirtualNetworks_VirtualNetworkPeerings_SpecARM) GetType() string {
>>>>>>>> main:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peerings_spec_arm_types_gen.go
	return "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
}

// Deprecated version of VirtualNetworkPeeringPropertiesFormat. Use v1beta20201101.VirtualNetworkPeeringPropertiesFormat instead
type VirtualNetworkPeeringPropertiesFormatARM struct {
	AllowForwardedTraffic     *bool                                               `json:"allowForwardedTraffic,omitempty"`
	AllowGatewayTransit       *bool                                               `json:"allowGatewayTransit,omitempty"`
	AllowVirtualNetworkAccess *bool                                               `json:"allowVirtualNetworkAccess,omitempty"`
<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peering__spec_arm_types_gen.go
	DoNotVerifyRemoteGateways *bool                                               `json:"doNotVerifyRemoteGateways,omitempty"`
========
>>>>>>>> main:v2/api/network/v1alpha1api20201101/virtual_networks_virtual_network_peerings_spec_arm_types_gen.go
	PeeringState              *VirtualNetworkPeeringPropertiesFormat_PeeringState `json:"peeringState,omitempty"`
	RemoteAddressSpace        *AddressSpaceARM                                    `json:"remoteAddressSpace,omitempty"`
	RemoteBgpCommunities      *VirtualNetworkBgpCommunitiesARM                    `json:"remoteBgpCommunities,omitempty"`
	RemoteVirtualNetwork      *SubResourceARM                                     `json:"remoteVirtualNetwork,omitempty"`
	UseRemoteGateways         *bool                                               `json:"useRemoteGateways,omitempty"`
}
