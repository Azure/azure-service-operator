// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/publicIpAddress.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}
type PublicIPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicIPAddress_Spec                                       `json:"spec,omitempty"`
	Status            PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &PublicIPAddress{}

// GetConditions returns the conditions of the resource
func (address *PublicIPAddress) GetConditions() conditions.Conditions {
	return address.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (address *PublicIPAddress) SetConditions(conditions conditions.Conditions) {
	address.Status.Conditions = conditions
}

var _ conversion.Convertible = &PublicIPAddress{}

// ConvertFrom populates our PublicIPAddress from the provided hub PublicIPAddress
func (address *PublicIPAddress) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201101storage.PublicIPAddress)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/PublicIPAddress but received %T instead", hub)
	}

	return address.AssignPropertiesFromPublicIPAddress(source)
}

// ConvertTo populates the provided hub PublicIPAddress from our PublicIPAddress
func (address *PublicIPAddress) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201101storage.PublicIPAddress)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/PublicIPAddress but received %T instead", hub)
	}

	return address.AssignPropertiesToPublicIPAddress(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-publicipaddress,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=publicipaddresses,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.publicipaddresses.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &PublicIPAddress{}

// Default applies defaults to the PublicIPAddress resource
func (address *PublicIPAddress) Default() {
	address.defaultImpl()
	var temp interface{} = address
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (address *PublicIPAddress) defaultAzureName() {
	if address.Spec.AzureName == "" {
		address.Spec.AzureName = address.Name
	}
}

// defaultImpl applies the code generated defaults to the PublicIPAddress resource
func (address *PublicIPAddress) defaultImpl() { address.defaultAzureName() }

var _ genruntime.KubernetesResource = &PublicIPAddress{}

// AzureName returns the Azure name of the resource
func (address *PublicIPAddress) AzureName() string {
	return address.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (address PublicIPAddress) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (address *PublicIPAddress) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (address *PublicIPAddress) GetSpec() genruntime.ConvertibleSpec {
	return &address.Spec
}

// GetStatus returns the status of this resource
func (address *PublicIPAddress) GetStatus() genruntime.ConvertibleStatus {
	return &address.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/publicIPAddresses"
func (address *PublicIPAddress) GetType() string {
	return "Microsoft.Network/publicIPAddresses"
}

// NewEmptyStatus returns a new empty (blank) status
func (address *PublicIPAddress) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (address *PublicIPAddress) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(address.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  address.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (address *PublicIPAddress) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded); ok {
		address.Status = *st
		return nil
	}

	// Convert status to required version
	var st PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	address.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-publicipaddress,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=publicipaddresses,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.publicipaddresses.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &PublicIPAddress{}

// ValidateCreate validates the creation of the resource
func (address *PublicIPAddress) ValidateCreate() error {
	validations := address.createValidations()
	var temp interface{} = address
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (address *PublicIPAddress) ValidateDelete() error {
	validations := address.deleteValidations()
	var temp interface{} = address
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (address *PublicIPAddress) ValidateUpdate(old runtime.Object) error {
	validations := address.updateValidations()
	var temp interface{} = address
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (address *PublicIPAddress) createValidations() []func() error {
	return []func() error{address.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (address *PublicIPAddress) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (address *PublicIPAddress) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return address.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (address *PublicIPAddress) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&address.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromPublicIPAddress populates our PublicIPAddress from the provided source PublicIPAddress
func (address *PublicIPAddress) AssignPropertiesFromPublicIPAddress(source *v1alpha1api20201101storage.PublicIPAddress) error {

	// ObjectMeta
	address.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec PublicIPAddress_Spec
	err := spec.AssignPropertiesFromPublicIPAddress_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddress_Spec() to populate field Spec")
	}
	address.Spec = spec

	// Status
	var status PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err = status.AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded() to populate field Status")
	}
	address.Status = status

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress populates the provided destination PublicIPAddress from our PublicIPAddress
func (address *PublicIPAddress) AssignPropertiesToPublicIPAddress(destination *v1alpha1api20201101storage.PublicIPAddress) error {

	// ObjectMeta
	destination.ObjectMeta = *address.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201101storage.PublicIPAddress_Spec
	err := address.Spec.AssignPropertiesToPublicIPAddress_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddress_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err = address.Status.AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (address *PublicIPAddress) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: address.Spec.OriginalVersion(),
		Kind:    "PublicIPAddress",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/publicIpAddress.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}
type PublicIPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicIPAddress `json:"items"`
}

type PublicIPAddress_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DdosSettings: The DDoS protection custom policy associated with the public IP
	//address.
	DdosSettings *DdosSettings `json:"ddosSettings,omitempty"`

	//DnsSettings: The FQDN of the DNS record associated with the public IP address.
	DnsSettings *PublicIPAddressDnsSettings `json:"dnsSettings,omitempty"`

	//ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	//IdleTimeoutInMinutes: The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//IpAddress: The IP address associated with the public IP address resource.
	IpAddress *string `json:"ipAddress,omitempty"`

	//IpTags: The list of tags associated with the public IP address.
	IpTags []IpTag `json:"ipTags,omitempty"`

	//LinkedPublicIPAddress: The linked public IP address of the public IP address
	//resource.
	LinkedPublicIPAddress *PublicIPAddressSpec_SubResourceEmbedded `json:"linkedPublicIPAddress,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//MigrationPhase: Migration phase of Public IP Address.
	MigrationPhase *PublicIPAddressPropertiesFormatMigrationPhase `json:"migrationPhase,omitempty"`

	//NatGateway: The NatGateway for the Public IP address.
	NatGateway *NatGatewaySpec `json:"natGateway,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicIPAddressVersion: The public IP address version.
	PublicIPAddressVersion *IPVersion `json:"publicIPAddressVersion,omitempty"`

	//PublicIPAllocationMethod: The public IP address allocation method.
	PublicIPAllocationMethod *IPAllocationMethod `json:"publicIPAllocationMethod,omitempty"`

	//PublicIPPrefix: The Public IP Prefix this Public IP Address should be allocated
	//from.
	PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//ServicePublicIPAddress: The service public IP address of the public IP address
	//resource.
	ServicePublicIPAddress *PublicIPAddressSpec_SubResourceEmbedded `json:"servicePublicIPAddress,omitempty"`

	//Sku: The public IP address SKU.
	Sku *PublicIPAddressSku `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Zones: A list of availability zones denoting the IP allocated for the resource
	//needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddress_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (address *PublicIPAddress_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if address == nil {
		return nil, nil
	}
	var result PublicIPAddress_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = address.AzureName

	// Set property ‘ExtendedLocation’:
	if address.ExtendedLocation != nil {
		extendedLocationARM, err := (*address.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if address.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*address.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if address.Location != nil {
		location := *address.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if address.DdosSettings != nil ||
		address.DnsSettings != nil ||
		address.IdleTimeoutInMinutes != nil ||
		address.IpAddress != nil ||
		address.IpTags != nil ||
		address.LinkedPublicIPAddress != nil ||
		address.MigrationPhase != nil ||
		address.NatGateway != nil ||
		address.PublicIPAddressVersion != nil ||
		address.PublicIPAllocationMethod != nil ||
		address.PublicIPPrefix != nil ||
		address.ServicePublicIPAddress != nil {
		result.Properties = &PublicIPAddressPropertiesFormat_SubResourceEmbeddedARM{}
	}
	if address.DdosSettings != nil {
		ddosSettingsARM, err := (*address.DdosSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosSettings := ddosSettingsARM.(DdosSettingsARM)
		result.Properties.DdosSettings = &ddosSettings
	}
	if address.DnsSettings != nil {
		dnsSettingsARM, err := (*address.DnsSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		dnsSettings := dnsSettingsARM.(PublicIPAddressDnsSettingsARM)
		result.Properties.DnsSettings = &dnsSettings
	}
	if address.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinutes := *address.IdleTimeoutInMinutes
		result.Properties.IdleTimeoutInMinutes = &idleTimeoutInMinutes
	}
	if address.IpAddress != nil {
		ipAddress := *address.IpAddress
		result.Properties.IpAddress = &ipAddress
	}
	for _, item := range address.IpTags {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpTags = append(result.Properties.IpTags, itemARM.(IpTagARM))
	}
	if address.LinkedPublicIPAddress != nil {
		linkedPublicIPAddressARM, err := (*address.LinkedPublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		linkedPublicIPAddress := linkedPublicIPAddressARM.(PublicIPAddressSpec_SubResourceEmbeddedARM)
		result.Properties.LinkedPublicIPAddress = &linkedPublicIPAddress
	}
	if address.MigrationPhase != nil {
		migrationPhase := *address.MigrationPhase
		result.Properties.MigrationPhase = &migrationPhase
	}
	if address.NatGateway != nil {
		natGatewayARM, err := (*address.NatGateway).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		natGateway := natGatewayARM.(NatGatewaySpecARM)
		result.Properties.NatGateway = &natGateway
	}
	if address.PublicIPAddressVersion != nil {
		publicIPAddressVersion := *address.PublicIPAddressVersion
		result.Properties.PublicIPAddressVersion = &publicIPAddressVersion
	}
	if address.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := *address.PublicIPAllocationMethod
		result.Properties.PublicIPAllocationMethod = &publicIPAllocationMethod
	}
	if address.PublicIPPrefix != nil {
		publicIPPrefixARM, err := (*address.PublicIPPrefix).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicIPPrefix := publicIPPrefixARM.(SubResourceARM)
		result.Properties.PublicIPPrefix = &publicIPPrefix
	}
	if address.ServicePublicIPAddress != nil {
		servicePublicIPAddressARM, err := (*address.ServicePublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		servicePublicIPAddress := servicePublicIPAddressARM.(PublicIPAddressSpec_SubResourceEmbeddedARM)
		result.Properties.ServicePublicIPAddress = &servicePublicIPAddress
	}

	// Set property ‘Sku’:
	if address.Sku != nil {
		skuARM, err := (*address.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(PublicIPAddressSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if address.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range address.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range address.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *PublicIPAddress_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *PublicIPAddress_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	address.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DdosSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosSettings != nil {
			var ddosSettings1 DdosSettings
			err := ddosSettings1.PopulateFromARM(owner, *typedInput.Properties.DdosSettings)
			if err != nil {
				return err
			}
			ddosSettings := ddosSettings1
			address.DdosSettings = &ddosSettings
		}
	}

	// Set property ‘DnsSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DnsSettings != nil {
			var dnsSettings1 PublicIPAddressDnsSettings
			err := dnsSettings1.PopulateFromARM(owner, *typedInput.Properties.DnsSettings)
			if err != nil {
				return err
			}
			dnsSettings := dnsSettings1
			address.DnsSettings = &dnsSettings
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		address.ExtendedLocation = &extendedLocation
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			address.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘IpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpAddress != nil {
			ipAddress := *typedInput.Properties.IpAddress
			address.IpAddress = &ipAddress
		}
	}

	// Set property ‘IpTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpTags {
			var item1 IpTag
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			address.IpTags = append(address.IpTags, item1)
		}
	}

	// Set property ‘LinkedPublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkedPublicIPAddress != nil {
			var linkedPublicIPAddress1 PublicIPAddressSpec_SubResourceEmbedded
			err := linkedPublicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.LinkedPublicIPAddress)
			if err != nil {
				return err
			}
			linkedPublicIPAddress := linkedPublicIPAddress1
			address.LinkedPublicIPAddress = &linkedPublicIPAddress
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		address.Location = &location
	}

	// Set property ‘MigrationPhase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MigrationPhase != nil {
			migrationPhase := *typedInput.Properties.MigrationPhase
			address.MigrationPhase = &migrationPhase
		}
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 NatGatewaySpec
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			address.NatGateway = &natGateway
		}
	}

	// Set property ‘Owner’:
	address.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicIPAddressVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddressVersion != nil {
			publicIPAddressVersion := *typedInput.Properties.PublicIPAddressVersion
			address.PublicIPAddressVersion = &publicIPAddressVersion
		}
	}

	// Set property ‘PublicIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAllocationMethod != nil {
			publicIPAllocationMethod := *typedInput.Properties.PublicIPAllocationMethod
			address.PublicIPAllocationMethod = &publicIPAllocationMethod
		}
	}

	// Set property ‘PublicIPPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPPrefix != nil {
			var publicIPPrefix1 SubResource
			err := publicIPPrefix1.PopulateFromARM(owner, *typedInput.Properties.PublicIPPrefix)
			if err != nil {
				return err
			}
			publicIPPrefix := publicIPPrefix1
			address.PublicIPPrefix = &publicIPPrefix
		}
	}

	// no assignment for property ‘Reference’

	// Set property ‘ServicePublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServicePublicIPAddress != nil {
			var servicePublicIPAddress1 PublicIPAddressSpec_SubResourceEmbedded
			err := servicePublicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.ServicePublicIPAddress)
			if err != nil {
				return err
			}
			servicePublicIPAddress := servicePublicIPAddress1
			address.ServicePublicIPAddress = &servicePublicIPAddress
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		address.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		address.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			address.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		address.Zones = append(address.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &PublicIPAddress_Spec{}

// ConvertSpecFrom populates our PublicIPAddress_Spec from the provided source
func (address *PublicIPAddress_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.PublicIPAddress_Spec)
	if ok {
		// Populate our instance from source
		return address.AssignPropertiesFromPublicIPAddress_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.PublicIPAddress_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = address.AssignPropertiesFromPublicIPAddress_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our PublicIPAddress_Spec
func (address *PublicIPAddress_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.PublicIPAddress_Spec)
	if ok {
		// Populate destination from our instance
		return address.AssignPropertiesToPublicIPAddress_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.PublicIPAddress_Spec{}
	err := address.AssignPropertiesToPublicIPAddress_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromPublicIPAddress_Spec populates our PublicIPAddress_Spec from the provided source PublicIPAddress_Spec
func (address *PublicIPAddress_Spec) AssignPropertiesFromPublicIPAddress_Spec(source *v1alpha1api20201101storage.PublicIPAddress_Spec) error {

	// AzureName
	address.AzureName = source.AzureName

	// DdosSettings
	if source.DdosSettings != nil {
		var ddosSetting DdosSettings
		err := ddosSetting.AssignPropertiesFromDdosSettings(source.DdosSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDdosSettings() to populate field DdosSettings")
		}
		address.DdosSettings = &ddosSetting
	} else {
		address.DdosSettings = nil
	}

	// DnsSettings
	if source.DnsSettings != nil {
		var dnsSetting PublicIPAddressDnsSettings
		err := dnsSetting.AssignPropertiesFromPublicIPAddressDnsSettings(source.DnsSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressDnsSettings() to populate field DnsSettings")
		}
		address.DnsSettings = &dnsSetting
	} else {
		address.DnsSettings = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		address.ExtendedLocation = &extendedLocation
	} else {
		address.ExtendedLocation = nil
	}

	// IdleTimeoutInMinutes
	address.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(source.IdleTimeoutInMinutes)

	// IpAddress
	address.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// IpTags
	if source.IpTags != nil {
		ipTagList := make([]IpTag, len(source.IpTags))
		for ipTagIndex, ipTagItem := range source.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag IpTag
			err := ipTag.AssignPropertiesFromIpTag(&ipTagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpTag() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		address.IpTags = ipTagList
	} else {
		address.IpTags = nil
	}

	// LinkedPublicIPAddress
	if source.LinkedPublicIPAddress != nil {
		var linkedPublicIPAddress PublicIPAddressSpec_SubResourceEmbedded
		err := linkedPublicIPAddress.AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded(source.LinkedPublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded() to populate field LinkedPublicIPAddress")
		}
		address.LinkedPublicIPAddress = &linkedPublicIPAddress
	} else {
		address.LinkedPublicIPAddress = nil
	}

	// Location
	address.Location = genruntime.ClonePointerToString(source.Location)

	// MigrationPhase
	if source.MigrationPhase != nil {
		migrationPhase := PublicIPAddressPropertiesFormatMigrationPhase(*source.MigrationPhase)
		address.MigrationPhase = &migrationPhase
	} else {
		address.MigrationPhase = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway NatGatewaySpec
		err := natGateway.AssignPropertiesFromNatGatewaySpec(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGatewaySpec() to populate field NatGateway")
		}
		address.NatGateway = &natGateway
	} else {
		address.NatGateway = nil
	}

	// Owner
	address.Owner = source.Owner.Copy()

	// PublicIPAddressVersion
	if source.PublicIPAddressVersion != nil {
		publicIPAddressVersion := IPVersion(*source.PublicIPAddressVersion)
		address.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		address.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if source.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := IPAllocationMethod(*source.PublicIPAllocationMethod)
		address.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		address.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if source.PublicIPPrefix != nil {
		var publicIPPrefix SubResource
		err := publicIPPrefix.AssignPropertiesFromSubResource(source.PublicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIPPrefix")
		}
		address.PublicIPPrefix = &publicIPPrefix
	} else {
		address.PublicIPPrefix = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		address.Reference = &reference
	} else {
		address.Reference = nil
	}

	// ServicePublicIPAddress
	if source.ServicePublicIPAddress != nil {
		var servicePublicIPAddress PublicIPAddressSpec_SubResourceEmbedded
		err := servicePublicIPAddress.AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded(source.ServicePublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded() to populate field ServicePublicIPAddress")
		}
		address.ServicePublicIPAddress = &servicePublicIPAddress
	} else {
		address.ServicePublicIPAddress = nil
	}

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku
		err := sku.AssignPropertiesFromPublicIPAddressSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku() to populate field Sku")
		}
		address.Sku = &sku
	} else {
		address.Sku = nil
	}

	// Tags
	address.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	address.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress_Spec populates the provided destination PublicIPAddress_Spec from our PublicIPAddress_Spec
func (address *PublicIPAddress_Spec) AssignPropertiesToPublicIPAddress_Spec(destination *v1alpha1api20201101storage.PublicIPAddress_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = address.AzureName

	// DdosSettings
	if address.DdosSettings != nil {
		var ddosSetting v1alpha1api20201101storage.DdosSettings
		err := address.DdosSettings.AssignPropertiesToDdosSettings(&ddosSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDdosSettings() to populate field DdosSettings")
		}
		destination.DdosSettings = &ddosSetting
	} else {
		destination.DdosSettings = nil
	}

	// DnsSettings
	if address.DnsSettings != nil {
		var dnsSetting v1alpha1api20201101storage.PublicIPAddressDnsSettings
		err := address.DnsSettings.AssignPropertiesToPublicIPAddressDnsSettings(&dnsSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressDnsSettings() to populate field DnsSettings")
		}
		destination.DnsSettings = &dnsSetting
	} else {
		destination.DnsSettings = nil
	}

	// ExtendedLocation
	if address.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation
		err := address.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// IdleTimeoutInMinutes
	destination.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(address.IdleTimeoutInMinutes)

	// IpAddress
	destination.IpAddress = genruntime.ClonePointerToString(address.IpAddress)

	// IpTags
	if address.IpTags != nil {
		ipTagList := make([]v1alpha1api20201101storage.IpTag, len(address.IpTags))
		for ipTagIndex, ipTagItem := range address.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag v1alpha1api20201101storage.IpTag
			err := ipTagItem.AssignPropertiesToIpTag(&ipTag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpTag() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		destination.IpTags = ipTagList
	} else {
		destination.IpTags = nil
	}

	// LinkedPublicIPAddress
	if address.LinkedPublicIPAddress != nil {
		var linkedPublicIPAddress v1alpha1api20201101storage.PublicIPAddressSpec_SubResourceEmbedded
		err := address.LinkedPublicIPAddress.AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded(&linkedPublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded() to populate field LinkedPublicIPAddress")
		}
		destination.LinkedPublicIPAddress = &linkedPublicIPAddress
	} else {
		destination.LinkedPublicIPAddress = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(address.Location)

	// MigrationPhase
	if address.MigrationPhase != nil {
		migrationPhase := string(*address.MigrationPhase)
		destination.MigrationPhase = &migrationPhase
	} else {
		destination.MigrationPhase = nil
	}

	// NatGateway
	if address.NatGateway != nil {
		var natGateway v1alpha1api20201101storage.NatGatewaySpec
		err := address.NatGateway.AssignPropertiesToNatGatewaySpec(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGatewaySpec() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// OriginalVersion
	destination.OriginalVersion = address.OriginalVersion()

	// Owner
	destination.Owner = address.Owner.Copy()

	// PublicIPAddressVersion
	if address.PublicIPAddressVersion != nil {
		publicIPAddressVersion := string(*address.PublicIPAddressVersion)
		destination.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		destination.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if address.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := string(*address.PublicIPAllocationMethod)
		destination.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		destination.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if address.PublicIPPrefix != nil {
		var publicIPPrefix v1alpha1api20201101storage.SubResource
		err := address.PublicIPPrefix.AssignPropertiesToSubResource(&publicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIPPrefix")
		}
		destination.PublicIPPrefix = &publicIPPrefix
	} else {
		destination.PublicIPPrefix = nil
	}

	// Reference
	if address.Reference != nil {
		reference := address.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// ServicePublicIPAddress
	if address.ServicePublicIPAddress != nil {
		var servicePublicIPAddress v1alpha1api20201101storage.PublicIPAddressSpec_SubResourceEmbedded
		err := address.ServicePublicIPAddress.AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded(&servicePublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded() to populate field ServicePublicIPAddress")
		}
		destination.ServicePublicIPAddress = &servicePublicIPAddress
	} else {
		destination.ServicePublicIPAddress = nil
	}

	// Sku
	if address.Sku != nil {
		var sku v1alpha1api20201101storage.PublicIPAddressSku
		err := address.Sku.AssignPropertiesToPublicIPAddressSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(address.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(address.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (address *PublicIPAddress_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (address *PublicIPAddress_Spec) SetAzureName(azureName string) { address.AzureName = azureName }

type PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DdosSettings: The DDoS protection custom policy associated with the public IP
	//address.
	DdosSettings *DdosSettings_Status `json:"ddosSettings,omitempty"`

	//DnsSettings: The FQDN of the DNS record associated with the public IP address.
	DnsSettings *PublicIPAddressDnsSettings_Status `json:"dnsSettings,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//IdleTimeoutInMinutes: The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//IpAddress: The IP address associated with the public IP address resource.
	IpAddress *string `json:"ipAddress,omitempty"`

	//IpConfiguration: The IP configuration associated with the public IP address.
	IpConfiguration *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded `json:"ipConfiguration,omitempty"`

	//IpTags: The list of tags associated with the public IP address.
	IpTags []IpTag_Status `json:"ipTags,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//MigrationPhase: Migration phase of Public IP Address.
	MigrationPhase *string `json:"migrationPhase,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//NatGateway: The NatGateway for the Public IP address.
	NatGateway *NatGateway_Status_PublicIPAddress_SubResourceEmbedded `json:"natGateway,omitempty"`

	//ProvisioningState: The provisioning state of the public IP address resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//PublicIPAddressVersion: The public IP address version.
	PublicIPAddressVersion *string `json:"publicIPAddressVersion,omitempty"`

	//PublicIPAllocationMethod: The public IP address allocation method.
	PublicIPAllocationMethod *string `json:"publicIPAllocationMethod,omitempty"`

	//PublicIPPrefix: The Public IP Prefix this Public IP Address should be allocated
	//from.
	PublicIPPrefix *SubResource_Status `json:"publicIPPrefix,omitempty"`

	//ResourceGuid: The resource GUID property of the public IP address resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Sku: The public IP address SKU.
	Sku *PublicIPAddressSku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//Zones: A list of availability zones denoting the IP allocated for the resource
	//needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}

// ConvertStatusFrom populates our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded from the provided source
func (embedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return embedded.AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = embedded.AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return embedded.AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}
	err := embedded.AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DdosSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosSettings != nil {
			var ddosSettings1 DdosSettings_Status
			err := ddosSettings1.PopulateFromARM(owner, *typedInput.Properties.DdosSettings)
			if err != nil {
				return err
			}
			ddosSettings := ddosSettings1
			embedded.DdosSettings = &ddosSettings
		}
	}

	// Set property ‘DnsSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DnsSettings != nil {
			var dnsSettings1 PublicIPAddressDnsSettings_Status
			err := dnsSettings1.PopulateFromARM(owner, *typedInput.Properties.DnsSettings)
			if err != nil {
				return err
			}
			dnsSettings := dnsSettings1
			embedded.DnsSettings = &dnsSettings
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			embedded.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘IpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpAddress != nil {
			ipAddress := *typedInput.Properties.IpAddress
			embedded.IpAddress = &ipAddress
		}
	}

	// Set property ‘IpConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpConfiguration != nil {
			var ipConfiguration1 IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
			err := ipConfiguration1.PopulateFromARM(owner, *typedInput.Properties.IpConfiguration)
			if err != nil {
				return err
			}
			ipConfiguration := ipConfiguration1
			embedded.IpConfiguration = &ipConfiguration
		}
	}

	// Set property ‘IpTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpTags {
			var item1 IpTag_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpTags = append(embedded.IpTags, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		embedded.Location = &location
	}

	// Set property ‘MigrationPhase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MigrationPhase != nil {
			migrationPhase := *typedInput.Properties.MigrationPhase
			embedded.MigrationPhase = &migrationPhase
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 NatGateway_Status_PublicIPAddress_SubResourceEmbedded
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			embedded.NatGateway = &natGateway
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddressVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddressVersion != nil {
			publicIPAddressVersion := *typedInput.Properties.PublicIPAddressVersion
			embedded.PublicIPAddressVersion = &publicIPAddressVersion
		}
	}

	// Set property ‘PublicIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAllocationMethod != nil {
			publicIPAllocationMethod := *typedInput.Properties.PublicIPAllocationMethod
			embedded.PublicIPAllocationMethod = &publicIPAllocationMethod
		}
	}

	// Set property ‘PublicIPPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPPrefix != nil {
			var publicIPPrefix1 SubResource_Status
			err := publicIPPrefix1.PopulateFromARM(owner, *typedInput.Properties.PublicIPPrefix)
			if err != nil {
				return err
			}
			publicIPPrefix := publicIPPrefix1
			embedded.PublicIPPrefix = &publicIPPrefix
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			embedded.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		embedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			embedded.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded populates our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded from the provided source PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(source *v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Conditions
	embedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DdosSettings
	if source.DdosSettings != nil {
		var ddosSetting DdosSettings_Status
		err := ddosSetting.AssignPropertiesFromDdosSettings_Status(source.DdosSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDdosSettings_Status() to populate field DdosSettings")
		}
		embedded.DdosSettings = &ddosSetting
	} else {
		embedded.DdosSettings = nil
	}

	// DnsSettings
	if source.DnsSettings != nil {
		var dnsSetting PublicIPAddressDnsSettings_Status
		err := dnsSetting.AssignPropertiesFromPublicIPAddressDnsSettings_Status(source.DnsSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressDnsSettings_Status() to populate field DnsSettings")
		}
		embedded.DnsSettings = &dnsSetting
	} else {
		embedded.DnsSettings = nil
	}

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// IdleTimeoutInMinutes
	embedded.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(source.IdleTimeoutInMinutes)

	// IpAddress
	embedded.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// IpConfiguration
	if source.IpConfiguration != nil {
		var ipConfiguration IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
		err := ipConfiguration.AssignPropertiesFromIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(source.IpConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded() to populate field IpConfiguration")
		}
		embedded.IpConfiguration = &ipConfiguration
	} else {
		embedded.IpConfiguration = nil
	}

	// IpTags
	if source.IpTags != nil {
		ipTagList := make([]IpTag_Status, len(source.IpTags))
		for ipTagIndex, ipTagItem := range source.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag IpTag_Status
			err := ipTag.AssignPropertiesFromIpTag_Status(&ipTagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpTag_Status() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		embedded.IpTags = ipTagList
	} else {
		embedded.IpTags = nil
	}

	// Location
	embedded.Location = genruntime.ClonePointerToString(source.Location)

	// MigrationPhase
	embedded.MigrationPhase = genruntime.ClonePointerToString(source.MigrationPhase)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// NatGateway
	if source.NatGateway != nil {
		var natGateway NatGateway_Status_PublicIPAddress_SubResourceEmbedded
		err := natGateway.AssignPropertiesFromNatGateway_Status_PublicIPAddress_SubResourceEmbedded(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGateway_Status_PublicIPAddress_SubResourceEmbedded() to populate field NatGateway")
		}
		embedded.NatGateway = &natGateway
	} else {
		embedded.NatGateway = nil
	}

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicIPAddressVersion
	embedded.PublicIPAddressVersion = genruntime.ClonePointerToString(source.PublicIPAddressVersion)

	// PublicIPAllocationMethod
	embedded.PublicIPAllocationMethod = genruntime.ClonePointerToString(source.PublicIPAllocationMethod)

	// PublicIPPrefix
	if source.PublicIPPrefix != nil {
		var publicIPPrefix SubResource_Status
		err := publicIPPrefix.AssignPropertiesFromSubResource_Status(source.PublicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field PublicIPPrefix")
		}
		embedded.PublicIPPrefix = &publicIPPrefix
	} else {
		embedded.PublicIPPrefix = nil
	}

	// ResourceGuid
	embedded.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku_Status
		err := sku.AssignPropertiesFromPublicIPAddressSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku_Status() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Tags
	embedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded populates the provided destination PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded from our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToPublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded(destination *v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(embedded.Conditions)

	// DdosSettings
	if embedded.DdosSettings != nil {
		var ddosSetting v1alpha1api20201101storage.DdosSettings_Status
		err := embedded.DdosSettings.AssignPropertiesToDdosSettings_Status(&ddosSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDdosSettings_Status() to populate field DdosSettings")
		}
		destination.DdosSettings = &ddosSetting
	} else {
		destination.DdosSettings = nil
	}

	// DnsSettings
	if embedded.DnsSettings != nil {
		var dnsSetting v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status
		err := embedded.DnsSettings.AssignPropertiesToPublicIPAddressDnsSettings_Status(&dnsSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressDnsSettings_Status() to populate field DnsSettings")
		}
		destination.DnsSettings = &dnsSetting
	} else {
		destination.DnsSettings = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// IdleTimeoutInMinutes
	destination.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(embedded.IdleTimeoutInMinutes)

	// IpAddress
	destination.IpAddress = genruntime.ClonePointerToString(embedded.IpAddress)

	// IpConfiguration
	if embedded.IpConfiguration != nil {
		var ipConfiguration v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
		err := embedded.IpConfiguration.AssignPropertiesToIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(&ipConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded() to populate field IpConfiguration")
		}
		destination.IpConfiguration = &ipConfiguration
	} else {
		destination.IpConfiguration = nil
	}

	// IpTags
	if embedded.IpTags != nil {
		ipTagList := make([]v1alpha1api20201101storage.IpTag_Status, len(embedded.IpTags))
		for ipTagIndex, ipTagItem := range embedded.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag v1alpha1api20201101storage.IpTag_Status
			err := ipTagItem.AssignPropertiesToIpTag_Status(&ipTag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpTag_Status() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		destination.IpTags = ipTagList
	} else {
		destination.IpTags = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(embedded.Location)

	// MigrationPhase
	destination.MigrationPhase = genruntime.ClonePointerToString(embedded.MigrationPhase)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// NatGateway
	if embedded.NatGateway != nil {
		var natGateway v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded
		err := embedded.NatGateway.AssignPropertiesToNatGateway_Status_PublicIPAddress_SubResourceEmbedded(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGateway_Status_PublicIPAddress_SubResourceEmbedded() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// PublicIPAddressVersion
	destination.PublicIPAddressVersion = genruntime.ClonePointerToString(embedded.PublicIPAddressVersion)

	// PublicIPAllocationMethod
	destination.PublicIPAllocationMethod = genruntime.ClonePointerToString(embedded.PublicIPAllocationMethod)

	// PublicIPPrefix
	if embedded.PublicIPPrefix != nil {
		var publicIPPrefix v1alpha1api20201101storage.SubResource_Status
		err := embedded.PublicIPPrefix.AssignPropertiesToSubResource_Status(&publicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field PublicIPPrefix")
		}
		destination.PublicIPPrefix = &publicIPPrefix
	} else {
		destination.PublicIPPrefix = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(embedded.ResourceGuid)

	// Sku
	if embedded.Sku != nil {
		var sku v1alpha1api20201101storage.PublicIPAddressSku_Status
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(embedded.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DdosSettings struct {
	//DdosCustomPolicy: The DDoS custom policy associated with the public IP.
	DdosCustomPolicy *SubResource `json:"ddosCustomPolicy,omitempty"`

	//ProtectedIP: Enables DDoS protection on the public IP.
	ProtectedIP *bool `json:"protectedIP,omitempty"`

	//ProtectionCoverage: The DDoS protection policy customizability of the public IP.
	//Only standard coverage will have the ability to be customized.
	ProtectionCoverage *DdosSettingsProtectionCoverage `json:"protectionCoverage,omitempty"`
}

var _ genruntime.ARMTransformer = &DdosSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *DdosSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result DdosSettingsARM

	// Set property ‘DdosCustomPolicy’:
	if settings.DdosCustomPolicy != nil {
		ddosCustomPolicyARM, err := (*settings.DdosCustomPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosCustomPolicy := ddosCustomPolicyARM.(SubResourceARM)
		result.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if settings.ProtectedIP != nil {
		protectedIP := *settings.ProtectedIP
		result.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if settings.ProtectionCoverage != nil {
		protectionCoverage := *settings.ProtectionCoverage
		result.ProtectionCoverage = &protectionCoverage
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DdosSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DdosSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DdosSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DdosSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DdosSettingsARM, got %T", armInput)
	}

	// Set property ‘DdosCustomPolicy’:
	if typedInput.DdosCustomPolicy != nil {
		var ddosCustomPolicy1 SubResource
		err := ddosCustomPolicy1.PopulateFromARM(owner, *typedInput.DdosCustomPolicy)
		if err != nil {
			return err
		}
		ddosCustomPolicy := ddosCustomPolicy1
		settings.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if typedInput.ProtectedIP != nil {
		protectedIP := *typedInput.ProtectedIP
		settings.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if typedInput.ProtectionCoverage != nil {
		protectionCoverage := *typedInput.ProtectionCoverage
		settings.ProtectionCoverage = &protectionCoverage
	}

	// No error
	return nil
}

// AssignPropertiesFromDdosSettings populates our DdosSettings from the provided source DdosSettings
func (settings *DdosSettings) AssignPropertiesFromDdosSettings(source *v1alpha1api20201101storage.DdosSettings) error {

	// DdosCustomPolicy
	if source.DdosCustomPolicy != nil {
		var ddosCustomPolicy SubResource
		err := ddosCustomPolicy.AssignPropertiesFromSubResource(source.DdosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field DdosCustomPolicy")
		}
		settings.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		settings.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if source.ProtectedIP != nil {
		protectedIP := *source.ProtectedIP
		settings.ProtectedIP = &protectedIP
	} else {
		settings.ProtectedIP = nil
	}

	// ProtectionCoverage
	if source.ProtectionCoverage != nil {
		protectionCoverage := DdosSettingsProtectionCoverage(*source.ProtectionCoverage)
		settings.ProtectionCoverage = &protectionCoverage
	} else {
		settings.ProtectionCoverage = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDdosSettings populates the provided destination DdosSettings from our DdosSettings
func (settings *DdosSettings) AssignPropertiesToDdosSettings(destination *v1alpha1api20201101storage.DdosSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DdosCustomPolicy
	if settings.DdosCustomPolicy != nil {
		var ddosCustomPolicy v1alpha1api20201101storage.SubResource
		err := settings.DdosCustomPolicy.AssignPropertiesToSubResource(&ddosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field DdosCustomPolicy")
		}
		destination.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		destination.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if settings.ProtectedIP != nil {
		protectedIP := *settings.ProtectedIP
		destination.ProtectedIP = &protectedIP
	} else {
		destination.ProtectedIP = nil
	}

	// ProtectionCoverage
	if settings.ProtectionCoverage != nil {
		protectionCoverage := string(*settings.ProtectionCoverage)
		destination.ProtectionCoverage = &protectionCoverage
	} else {
		destination.ProtectionCoverage = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DdosSettings_Status struct {
	//DdosCustomPolicy: The DDoS custom policy associated with the public IP.
	DdosCustomPolicy *SubResource_Status `json:"ddosCustomPolicy,omitempty"`

	//ProtectedIP: Enables DDoS protection on the public IP.
	ProtectedIP *bool `json:"protectedIP,omitempty"`

	//ProtectionCoverage: The DDoS protection policy customizability of the public IP.
	//Only standard coverage will have the ability to be customized.
	ProtectionCoverage *string `json:"protectionCoverage,omitempty"`
}

var _ genruntime.FromARMConverter = &DdosSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DdosSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DdosSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DdosSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DdosSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DdosSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘DdosCustomPolicy’:
	if typedInput.DdosCustomPolicy != nil {
		var ddosCustomPolicy1 SubResource_Status
		err := ddosCustomPolicy1.PopulateFromARM(owner, *typedInput.DdosCustomPolicy)
		if err != nil {
			return err
		}
		ddosCustomPolicy := ddosCustomPolicy1
		settings.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if typedInput.ProtectedIP != nil {
		protectedIP := *typedInput.ProtectedIP
		settings.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if typedInput.ProtectionCoverage != nil {
		protectionCoverage := *typedInput.ProtectionCoverage
		settings.ProtectionCoverage = &protectionCoverage
	}

	// No error
	return nil
}

// AssignPropertiesFromDdosSettings_Status populates our DdosSettings_Status from the provided source DdosSettings_Status
func (settings *DdosSettings_Status) AssignPropertiesFromDdosSettings_Status(source *v1alpha1api20201101storage.DdosSettings_Status) error {

	// DdosCustomPolicy
	if source.DdosCustomPolicy != nil {
		var ddosCustomPolicy SubResource_Status
		err := ddosCustomPolicy.AssignPropertiesFromSubResource_Status(source.DdosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field DdosCustomPolicy")
		}
		settings.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		settings.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if source.ProtectedIP != nil {
		protectedIP := *source.ProtectedIP
		settings.ProtectedIP = &protectedIP
	} else {
		settings.ProtectedIP = nil
	}

	// ProtectionCoverage
	settings.ProtectionCoverage = genruntime.ClonePointerToString(source.ProtectionCoverage)

	// No error
	return nil
}

// AssignPropertiesToDdosSettings_Status populates the provided destination DdosSettings_Status from our DdosSettings_Status
func (settings *DdosSettings_Status) AssignPropertiesToDdosSettings_Status(destination *v1alpha1api20201101storage.DdosSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DdosCustomPolicy
	if settings.DdosCustomPolicy != nil {
		var ddosCustomPolicy v1alpha1api20201101storage.SubResource_Status
		err := settings.DdosCustomPolicy.AssignPropertiesToSubResource_Status(&ddosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field DdosCustomPolicy")
		}
		destination.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		destination.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if settings.ProtectedIP != nil {
		protectedIP := *settings.ProtectedIP
		destination.ProtectedIP = &protectedIP
	} else {
		destination.ProtectedIP = nil
	}

	// ProtectionCoverage
	destination.ProtectionCoverage = genruntime.ClonePointerToString(settings.ProtectionCoverage)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Dynamic","Static"}
type IPAllocationMethod string

const (
	IPAllocationMethodDynamic = IPAllocationMethod("Dynamic")
	IPAllocationMethodStatic  = IPAllocationMethod("Static")
)

type IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAddress: The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *string `json:"privateIPAllocationMethod,omitempty"`

	//ProvisioningState: The provisioning state of the IP configuration resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Subnet: The reference to the subnet resource.
	Subnet *Subnet_Status_PublicIPAddress_SubResourceEmbedded `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			embedded.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			embedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 Subnet_Status_PublicIPAddress_SubResourceEmbedded
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			embedded.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded populates our IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded from the provided source IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(source *v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	embedded.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	embedded.PrivateIPAllocationMethod = genruntime.ClonePointerToString(source.PrivateIPAllocationMethod)

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Subnet
	if source.Subnet != nil {
		var subnet Subnet_Status_PublicIPAddress_SubResourceEmbedded
		err := subnet.AssignPropertiesFromSubnet_Status_PublicIPAddress_SubResourceEmbedded(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubnet_Status_PublicIPAddress_SubResourceEmbedded() to populate field Subnet")
		}
		embedded.Subnet = &subnet
	} else {
		embedded.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded populates the provided destination IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded from our IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToIPConfiguration_Status_PublicIPAddress_SubResourceEmbedded(destination *v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(embedded.PrivateIPAddress)

	// PrivateIPAllocationMethod
	destination.PrivateIPAllocationMethod = genruntime.ClonePointerToString(embedded.PrivateIPAllocationMethod)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// Subnet
	if embedded.Subnet != nil {
		var subnet v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded
		err := embedded.Subnet.AssignPropertiesToSubnet_Status_PublicIPAddress_SubResourceEmbedded(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubnet_Status_PublicIPAddress_SubResourceEmbedded() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"IPv4","IPv6"}
type IPVersion string

const (
	IPVersionIPv4 = IPVersion("IPv4")
	IPVersionIPv6 = IPVersion("IPv6")
)

type IpTag struct {
	//IpTagType: The IP tag type. Example: FirstPartyUsage.
	IpTagType *string `json:"ipTagType,omitempty"`

	//Tag: The value of the IP tag associated with the public IP. Example: SQL.
	Tag *string `json:"tag,omitempty"`
}

var _ genruntime.ARMTransformer = &IpTag{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipTag *IpTag) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ipTag == nil {
		return nil, nil
	}
	var result IpTagARM

	// Set property ‘IpTagType’:
	if ipTag.IpTagType != nil {
		ipTagType := *ipTag.IpTagType
		result.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if ipTag.Tag != nil {
		tag := *ipTag.Tag
		result.Tag = &tag
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipTag *IpTag) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpTagARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipTag *IpTag) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpTagARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpTagARM, got %T", armInput)
	}

	// Set property ‘IpTagType’:
	if typedInput.IpTagType != nil {
		ipTagType := *typedInput.IpTagType
		ipTag.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		ipTag.Tag = &tag
	}

	// No error
	return nil
}

// AssignPropertiesFromIpTag populates our IpTag from the provided source IpTag
func (ipTag *IpTag) AssignPropertiesFromIpTag(source *v1alpha1api20201101storage.IpTag) error {

	// IpTagType
	ipTag.IpTagType = genruntime.ClonePointerToString(source.IpTagType)

	// Tag
	ipTag.Tag = genruntime.ClonePointerToString(source.Tag)

	// No error
	return nil
}

// AssignPropertiesToIpTag populates the provided destination IpTag from our IpTag
func (ipTag *IpTag) AssignPropertiesToIpTag(destination *v1alpha1api20201101storage.IpTag) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpTagType
	destination.IpTagType = genruntime.ClonePointerToString(ipTag.IpTagType)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(ipTag.Tag)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IpTag_Status struct {
	//IpTagType: The IP tag type. Example: FirstPartyUsage.
	IpTagType *string `json:"ipTagType,omitempty"`

	//Tag: The value of the IP tag associated with the public IP. Example: SQL.
	Tag *string `json:"tag,omitempty"`
}

var _ genruntime.FromARMConverter = &IpTag_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipTag *IpTag_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpTag_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipTag *IpTag_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpTag_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpTag_StatusARM, got %T", armInput)
	}

	// Set property ‘IpTagType’:
	if typedInput.IpTagType != nil {
		ipTagType := *typedInput.IpTagType
		ipTag.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		ipTag.Tag = &tag
	}

	// No error
	return nil
}

// AssignPropertiesFromIpTag_Status populates our IpTag_Status from the provided source IpTag_Status
func (ipTag *IpTag_Status) AssignPropertiesFromIpTag_Status(source *v1alpha1api20201101storage.IpTag_Status) error {

	// IpTagType
	ipTag.IpTagType = genruntime.ClonePointerToString(source.IpTagType)

	// Tag
	ipTag.Tag = genruntime.ClonePointerToString(source.Tag)

	// No error
	return nil
}

// AssignPropertiesToIpTag_Status populates the provided destination IpTag_Status from our IpTag_Status
func (ipTag *IpTag_Status) AssignPropertiesToIpTag_Status(destination *v1alpha1api20201101storage.IpTag_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpTagType
	destination.IpTagType = genruntime.ClonePointerToString(ipTag.IpTagType)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(ipTag.Tag)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NatGatewaySpec struct {
	//IdleTimeoutInMinutes: The idle timeout of the nat gateway.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//PublicIpAddresses: An array of public ip addresses associated with the nat
	//gateway resource.
	PublicIpAddresses []SubResource `json:"publicIpAddresses,omitempty"`

	//PublicIpPrefixes: An array of public ip prefixes associated with the nat gateway
	//resource.
	PublicIpPrefixes []SubResource `json:"publicIpPrefixes,omitempty"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Sku: The nat gateway SKU.
	Sku *NatGatewaySku `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Zones: A list of availability zones denoting the zone in which Nat Gateway
	//should be deployed.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &NatGatewaySpec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gateway *NatGatewaySpec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gateway == nil {
		return nil, nil
	}
	var result NatGatewaySpecARM

	// Set property ‘Id’:
	if gateway.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*gateway.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if gateway.Location != nil {
		location := *gateway.Location
		result.Location = &location
	}

	// Set property ‘Properties’:
	if gateway.IdleTimeoutInMinutes != nil ||
		gateway.PublicIpAddresses != nil ||
		gateway.PublicIpPrefixes != nil {
		result.Properties = &NatGatewayPropertiesFormatARM{}
	}
	if gateway.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinutes := *gateway.IdleTimeoutInMinutes
		result.Properties.IdleTimeoutInMinutes = &idleTimeoutInMinutes
	}
	for _, item := range gateway.PublicIpAddresses {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PublicIpAddresses = append(result.Properties.PublicIpAddresses, itemARM.(SubResourceARM))
	}
	for _, item := range gateway.PublicIpPrefixes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PublicIpPrefixes = append(result.Properties.PublicIpPrefixes, itemARM.(SubResourceARM))
	}

	// Set property ‘Sku’:
	if gateway.Sku != nil {
		skuARM, err := (*gateway.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(NatGatewaySkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if gateway.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range gateway.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range gateway.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateway *NatGatewaySpec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateway *NatGatewaySpec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySpecARM, got %T", armInput)
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			gateway.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateway.Location = &location
	}

	// Set property ‘PublicIpAddresses’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PublicIpAddresses {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.PublicIpAddresses = append(gateway.PublicIpAddresses, item1)
		}
	}

	// Set property ‘PublicIpPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PublicIpPrefixes {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.PublicIpPrefixes = append(gateway.PublicIpPrefixes, item1)
		}
	}

	// no assignment for property ‘Reference’

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 NatGatewaySku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		gateway.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateway.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			gateway.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		gateway.Zones = append(gateway.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySpec populates our NatGatewaySpec from the provided source NatGatewaySpec
func (gateway *NatGatewaySpec) AssignPropertiesFromNatGatewaySpec(source *v1alpha1api20201101storage.NatGatewaySpec) error {

	// IdleTimeoutInMinutes
	gateway.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(source.IdleTimeoutInMinutes)

	// Location
	gateway.Location = genruntime.ClonePointerToString(source.Location)

	// PublicIpAddresses
	if source.PublicIpAddresses != nil {
		publicIpAddressList := make([]SubResource, len(source.PublicIpAddresses))
		for publicIpAddressIndex, publicIpAddressItem := range source.PublicIpAddresses {
			// Shadow the loop variable to avoid aliasing
			publicIpAddressItem := publicIpAddressItem
			var publicIpAddress SubResource
			err := publicIpAddress.AssignPropertiesFromSubResource(&publicIpAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIpAddresses")
			}
			publicIpAddressList[publicIpAddressIndex] = publicIpAddress
		}
		gateway.PublicIpAddresses = publicIpAddressList
	} else {
		gateway.PublicIpAddresses = nil
	}

	// PublicIpPrefixes
	if source.PublicIpPrefixes != nil {
		publicIpPrefixList := make([]SubResource, len(source.PublicIpPrefixes))
		for publicIpPrefixIndex, publicIpPrefixItem := range source.PublicIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			publicIpPrefixItem := publicIpPrefixItem
			var publicIpPrefix SubResource
			err := publicIpPrefix.AssignPropertiesFromSubResource(&publicIpPrefixItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIpPrefixes")
			}
			publicIpPrefixList[publicIpPrefixIndex] = publicIpPrefix
		}
		gateway.PublicIpPrefixes = publicIpPrefixList
	} else {
		gateway.PublicIpPrefixes = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		gateway.Reference = &reference
	} else {
		gateway.Reference = nil
	}

	// Sku
	if source.Sku != nil {
		var sku NatGatewaySku
		err := sku.AssignPropertiesFromNatGatewaySku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGatewaySku() to populate field Sku")
		}
		gateway.Sku = &sku
	} else {
		gateway.Sku = nil
	}

	// Tags
	gateway.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	gateway.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySpec populates the provided destination NatGatewaySpec from our NatGatewaySpec
func (gateway *NatGatewaySpec) AssignPropertiesToNatGatewaySpec(destination *v1alpha1api20201101storage.NatGatewaySpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IdleTimeoutInMinutes
	destination.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(gateway.IdleTimeoutInMinutes)

	// Location
	destination.Location = genruntime.ClonePointerToString(gateway.Location)

	// PublicIpAddresses
	if gateway.PublicIpAddresses != nil {
		publicIpAddressList := make([]v1alpha1api20201101storage.SubResource, len(gateway.PublicIpAddresses))
		for publicIpAddressIndex, publicIpAddressItem := range gateway.PublicIpAddresses {
			// Shadow the loop variable to avoid aliasing
			publicIpAddressItem := publicIpAddressItem
			var publicIpAddress v1alpha1api20201101storage.SubResource
			err := publicIpAddressItem.AssignPropertiesToSubResource(&publicIpAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIpAddresses")
			}
			publicIpAddressList[publicIpAddressIndex] = publicIpAddress
		}
		destination.PublicIpAddresses = publicIpAddressList
	} else {
		destination.PublicIpAddresses = nil
	}

	// PublicIpPrefixes
	if gateway.PublicIpPrefixes != nil {
		publicIpPrefixList := make([]v1alpha1api20201101storage.SubResource, len(gateway.PublicIpPrefixes))
		for publicIpPrefixIndex, publicIpPrefixItem := range gateway.PublicIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			publicIpPrefixItem := publicIpPrefixItem
			var publicIpPrefix v1alpha1api20201101storage.SubResource
			err := publicIpPrefixItem.AssignPropertiesToSubResource(&publicIpPrefix)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIpPrefixes")
			}
			publicIpPrefixList[publicIpPrefixIndex] = publicIpPrefix
		}
		destination.PublicIpPrefixes = publicIpPrefixList
	} else {
		destination.PublicIpPrefixes = nil
	}

	// Reference
	if gateway.Reference != nil {
		reference := gateway.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Sku
	if gateway.Sku != nil {
		var sku v1alpha1api20201101storage.NatGatewaySku
		err := gateway.Sku.AssignPropertiesToNatGatewaySku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGatewaySku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateway.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(gateway.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NatGateway_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Sku: The nat gateway SKU.
	Sku *NatGatewaySku_Status `json:"sku,omitempty"`

	//Zones: A list of availability zones denoting the zone in which Nat Gateway
	//should be deployed.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.FromARMConverter = &NatGateway_Status_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 NatGatewaySku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGateway_Status_PublicIPAddress_SubResourceEmbedded populates our NatGateway_Status_PublicIPAddress_SubResourceEmbedded from the provided source NatGateway_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromNatGateway_Status_PublicIPAddress_SubResourceEmbedded(source *v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Sku
	if source.Sku != nil {
		var sku NatGatewaySku_Status
		err := sku.AssignPropertiesFromNatGatewaySku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGatewaySku_Status() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToNatGateway_Status_PublicIPAddress_SubResourceEmbedded populates the provided destination NatGateway_Status_PublicIPAddress_SubResourceEmbedded from our NatGateway_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToNatGateway_Status_PublicIPAddress_SubResourceEmbedded(destination *v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Sku
	if embedded.Sku != nil {
		var sku v1alpha1api20201101storage.NatGatewaySku_Status
		err := embedded.Sku.AssignPropertiesToNatGatewaySku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGatewaySku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicIPAddressDnsSettings struct {
	//DomainNameLabel: The domain name label. The concatenation of the domain name
	//label and the regionalized DNS zone make up the fully qualified domain name
	//associated with the public IP address. If a domain name label is specified, an A
	//DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`

	//Fqdn: The Fully Qualified Domain Name of the A DNS record associated with the
	//public IP. This is the concatenation of the domainNameLabel and the regionalized
	//DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`

	//ReverseFqdn: The reverse FQDN. A user-visible, fully qualified domain name that
	//resolves to this public IP address. If the reverseFqdn is specified, then a PTR
	//DNS record is created pointing from the IP address in the in-addr.arpa domain to
	//the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressDnsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *PublicIPAddressDnsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result PublicIPAddressDnsSettingsARM

	// Set property ‘DomainNameLabel’:
	if settings.DomainNameLabel != nil {
		domainNameLabel := *settings.DomainNameLabel
		result.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if settings.Fqdn != nil {
		fqdn := *settings.Fqdn
		result.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if settings.ReverseFqdn != nil {
		reverseFqdn := *settings.ReverseFqdn
		result.ReverseFqdn = &reverseFqdn
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *PublicIPAddressDnsSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressDnsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *PublicIPAddressDnsSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressDnsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressDnsSettingsARM, got %T", armInput)
	}

	// Set property ‘DomainNameLabel’:
	if typedInput.DomainNameLabel != nil {
		domainNameLabel := *typedInput.DomainNameLabel
		settings.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		settings.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if typedInput.ReverseFqdn != nil {
		reverseFqdn := *typedInput.ReverseFqdn
		settings.ReverseFqdn = &reverseFqdn
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressDnsSettings populates our PublicIPAddressDnsSettings from the provided source PublicIPAddressDnsSettings
func (settings *PublicIPAddressDnsSettings) AssignPropertiesFromPublicIPAddressDnsSettings(source *v1alpha1api20201101storage.PublicIPAddressDnsSettings) error {

	// DomainNameLabel
	settings.DomainNameLabel = genruntime.ClonePointerToString(source.DomainNameLabel)

	// Fqdn
	settings.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// ReverseFqdn
	settings.ReverseFqdn = genruntime.ClonePointerToString(source.ReverseFqdn)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressDnsSettings populates the provided destination PublicIPAddressDnsSettings from our PublicIPAddressDnsSettings
func (settings *PublicIPAddressDnsSettings) AssignPropertiesToPublicIPAddressDnsSettings(destination *v1alpha1api20201101storage.PublicIPAddressDnsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DomainNameLabel
	destination.DomainNameLabel = genruntime.ClonePointerToString(settings.DomainNameLabel)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(settings.Fqdn)

	// ReverseFqdn
	destination.ReverseFqdn = genruntime.ClonePointerToString(settings.ReverseFqdn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicIPAddressDnsSettings_Status struct {
	//DomainNameLabel: The domain name label. The concatenation of the domain name
	//label and the regionalized DNS zone make up the fully qualified domain name
	//associated with the public IP address. If a domain name label is specified, an A
	//DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`

	//Fqdn: The Fully Qualified Domain Name of the A DNS record associated with the
	//public IP. This is the concatenation of the domainNameLabel and the regionalized
	//DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`

	//ReverseFqdn: The reverse FQDN. A user-visible, fully qualified domain name that
	//resolves to this public IP address. If the reverseFqdn is specified, then a PTR
	//DNS record is created pointing from the IP address in the in-addr.arpa domain to
	//the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddressDnsSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *PublicIPAddressDnsSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressDnsSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *PublicIPAddressDnsSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressDnsSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressDnsSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘DomainNameLabel’:
	if typedInput.DomainNameLabel != nil {
		domainNameLabel := *typedInput.DomainNameLabel
		settings.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		settings.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if typedInput.ReverseFqdn != nil {
		reverseFqdn := *typedInput.ReverseFqdn
		settings.ReverseFqdn = &reverseFqdn
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressDnsSettings_Status populates our PublicIPAddressDnsSettings_Status from the provided source PublicIPAddressDnsSettings_Status
func (settings *PublicIPAddressDnsSettings_Status) AssignPropertiesFromPublicIPAddressDnsSettings_Status(source *v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status) error {

	// DomainNameLabel
	settings.DomainNameLabel = genruntime.ClonePointerToString(source.DomainNameLabel)

	// Fqdn
	settings.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// ReverseFqdn
	settings.ReverseFqdn = genruntime.ClonePointerToString(source.ReverseFqdn)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressDnsSettings_Status populates the provided destination PublicIPAddressDnsSettings_Status from our PublicIPAddressDnsSettings_Status
func (settings *PublicIPAddressDnsSettings_Status) AssignPropertiesToPublicIPAddressDnsSettings_Status(destination *v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DomainNameLabel
	destination.DomainNameLabel = genruntime.ClonePointerToString(settings.DomainNameLabel)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(settings.Fqdn)

	// ReverseFqdn
	destination.ReverseFqdn = genruntime.ClonePointerToString(settings.ReverseFqdn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Abort","Commit","Committed","None","Prepare"}
type PublicIPAddressPropertiesFormatMigrationPhase string

const (
	PublicIPAddressPropertiesFormatMigrationPhaseAbort     = PublicIPAddressPropertiesFormatMigrationPhase("Abort")
	PublicIPAddressPropertiesFormatMigrationPhaseCommit    = PublicIPAddressPropertiesFormatMigrationPhase("Commit")
	PublicIPAddressPropertiesFormatMigrationPhaseCommitted = PublicIPAddressPropertiesFormatMigrationPhase("Committed")
	PublicIPAddressPropertiesFormatMigrationPhaseNone      = PublicIPAddressPropertiesFormatMigrationPhase("None")
	PublicIPAddressPropertiesFormatMigrationPhasePrepare   = PublicIPAddressPropertiesFormatMigrationPhase("Prepare")
)

type PublicIPAddressSku struct {
	//Name: Name of a public IP address SKU.
	Name *PublicIPAddressSkuName `json:"name,omitempty"`

	//Tier: Tier of a public IP address SKU.
	Tier *PublicIPAddressSkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (addressSku *PublicIPAddressSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if addressSku == nil {
		return nil, nil
	}
	var result PublicIPAddressSkuARM

	// Set property ‘Name’:
	if addressSku.Name != nil {
		name := *addressSku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if addressSku.Tier != nil {
		tier := *addressSku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (addressSku *PublicIPAddressSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (addressSku *PublicIPAddressSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		addressSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		addressSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSku populates our PublicIPAddressSku from the provided source PublicIPAddressSku
func (addressSku *PublicIPAddressSku) AssignPropertiesFromPublicIPAddressSku(source *v1alpha1api20201101storage.PublicIPAddressSku) error {

	// Name
	if source.Name != nil {
		name := PublicIPAddressSkuName(*source.Name)
		addressSku.Name = &name
	} else {
		addressSku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := PublicIPAddressSkuTier(*source.Tier)
		addressSku.Tier = &tier
	} else {
		addressSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSku populates the provided destination PublicIPAddressSku from our PublicIPAddressSku
func (addressSku *PublicIPAddressSku) AssignPropertiesToPublicIPAddressSku(destination *v1alpha1api20201101storage.PublicIPAddressSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if addressSku.Name != nil {
		name := string(*addressSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if addressSku.Tier != nil {
		tier := string(*addressSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicIPAddressSku_Status struct {
	//Name: Name of a public IP address SKU.
	Name *string `json:"name,omitempty"`

	//Tier: Tier of a public IP address SKU.
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddressSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (addressSku *PublicIPAddressSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (addressSku *PublicIPAddressSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		addressSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		addressSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSku_Status populates our PublicIPAddressSku_Status from the provided source PublicIPAddressSku_Status
func (addressSku *PublicIPAddressSku_Status) AssignPropertiesFromPublicIPAddressSku_Status(source *v1alpha1api20201101storage.PublicIPAddressSku_Status) error {

	// Name
	addressSku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	addressSku.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSku_Status populates the provided destination PublicIPAddressSku_Status from our PublicIPAddressSku_Status
func (addressSku *PublicIPAddressSku_Status) AssignPropertiesToPublicIPAddressSku_Status(destination *v1alpha1api20201101storage.PublicIPAddressSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(addressSku.Name)

	// Tier
	destination.Tier = genruntime.ClonePointerToString(addressSku.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicIPAddressSpec_SubResourceEmbedded struct {
	//ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Sku: The public IP address SKU.
	Sku *PublicIPAddressSku `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Zones: A list of availability zones denoting the IP allocated for the resource
	//needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressSpec_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result PublicIPAddressSpec_SubResourceEmbeddedARM

	// Set property ‘ExtendedLocation’:
	if embedded.ExtendedLocation != nil {
		extendedLocationARM, err := (*embedded.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if embedded.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*embedded.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if embedded.Location != nil {
		location := *embedded.Location
		result.Location = &location
	}

	// Set property ‘Sku’:
	if embedded.Sku != nil {
		skuARM, err := (*embedded.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(PublicIPAddressSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if embedded.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range embedded.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range embedded.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSpec_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSpec_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSpec_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		embedded.Location = &location
	}

	// no assignment for property ‘Reference’

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		embedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			embedded.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded populates our PublicIPAddressSpec_SubResourceEmbedded from the provided source PublicIPAddressSpec_SubResourceEmbedded
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded(source *v1alpha1api20201101storage.PublicIPAddressSpec_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Location
	embedded.Location = genruntime.ClonePointerToString(source.Location)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku
		err := sku.AssignPropertiesFromPublicIPAddressSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Tags
	embedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded populates the provided destination PublicIPAddressSpec_SubResourceEmbedded from our PublicIPAddressSpec_SubResourceEmbedded
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded(destination *v1alpha1api20201101storage.PublicIPAddressSpec_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(embedded.Location)

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Sku
	if embedded.Sku != nil {
		var sku v1alpha1api20201101storage.PublicIPAddressSku
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(embedded.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SubResource struct {
	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SubResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *SubResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result SubResourceARM

	// Set property ‘Id’:
	if resource.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*resource.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SubResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SubResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(SubResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResourceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSubResource populates our SubResource from the provided source SubResource
func (resource *SubResource) AssignPropertiesFromSubResource(source *v1alpha1api20201101storage.SubResource) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		resource.Reference = &reference
	} else {
		resource.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubResource populates the provided destination SubResource from our SubResource
func (resource *SubResource) AssignPropertiesToSubResource(destination *v1alpha1api20201101storage.SubResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if resource.Reference != nil {
		reference := resource.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Basic","Standard"}
type DdosSettingsProtectionCoverage string

const (
	DdosSettingsProtectionCoverageBasic    = DdosSettingsProtectionCoverage("Basic")
	DdosSettingsProtectionCoverageStandard = DdosSettingsProtectionCoverage("Standard")
)

type NatGatewaySku struct {
	//Name: Name of Nat Gateway SKU.
	Name *NatGatewaySkuName `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &NatGatewaySku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gatewaySku *NatGatewaySku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gatewaySku == nil {
		return nil, nil
	}
	var result NatGatewaySkuARM

	// Set property ‘Name’:
	if gatewaySku.Name != nil {
		name := *gatewaySku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *NatGatewaySku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *NatGatewaySku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySku populates our NatGatewaySku from the provided source NatGatewaySku
func (gatewaySku *NatGatewaySku) AssignPropertiesFromNatGatewaySku(source *v1alpha1api20201101storage.NatGatewaySku) error {

	// Name
	if source.Name != nil {
		name := NatGatewaySkuName(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySku populates the provided destination NatGatewaySku from our NatGatewaySku
func (gatewaySku *NatGatewaySku) AssignPropertiesToNatGatewaySku(destination *v1alpha1api20201101storage.NatGatewaySku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NatGatewaySku_Status struct {
	//Name: Name of Nat Gateway SKU.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &NatGatewaySku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *NatGatewaySku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *NatGatewaySku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySku_Status populates our NatGatewaySku_Status from the provided source NatGatewaySku_Status
func (gatewaySku *NatGatewaySku_Status) AssignPropertiesFromNatGatewaySku_Status(source *v1alpha1api20201101storage.NatGatewaySku_Status) error {

	// Name
	gatewaySku.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySku_Status populates the provided destination NatGatewaySku_Status from our NatGatewaySku_Status
func (gatewaySku *NatGatewaySku_Status) AssignPropertiesToNatGatewaySku_Status(destination *v1alpha1api20201101storage.NatGatewaySku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(gatewaySku.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Subnet_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_Status_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnet_Status_PublicIPAddress_SubResourceEmbedded populates our Subnet_Status_PublicIPAddress_SubResourceEmbedded from the provided source Subnet_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromSubnet_Status_PublicIPAddress_SubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubnet_Status_PublicIPAddress_SubResourceEmbedded populates the provided destination Subnet_Status_PublicIPAddress_SubResourceEmbedded from our Subnet_Status_PublicIPAddress_SubResourceEmbedded
func (embedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToSubnet_Status_PublicIPAddress_SubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Standard"}
type NatGatewaySkuName string

const NatGatewaySkuNameStandard = NatGatewaySkuName("Standard")

func init() {
	SchemeBuilder.Register(&PublicIPAddress{}, &PublicIPAddressList{})
}
