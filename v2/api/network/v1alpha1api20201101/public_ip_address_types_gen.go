// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	alpha20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of PublicIPAddress. Use v1beta20201101.PublicIPAddress instead
type PublicIPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicIPAddress_Spec                                       `json:"spec,omitempty"`
	Status            PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &PublicIPAddress{}

// GetConditions returns the conditions of the resource
func (address *PublicIPAddress) GetConditions() conditions.Conditions {
	return address.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (address *PublicIPAddress) SetConditions(conditions conditions.Conditions) {
	address.Status.Conditions = conditions
}

var _ conversion.Convertible = &PublicIPAddress{}

// ConvertFrom populates our PublicIPAddress from the provided hub PublicIPAddress
func (address *PublicIPAddress) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20201101s.PublicIPAddress

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = address.AssignPropertiesFromPublicIPAddress(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to address")
	}

	return nil
}

// ConvertTo populates the provided hub PublicIPAddress from our PublicIPAddress
func (address *PublicIPAddress) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20201101s.PublicIPAddress
	err := address.AssignPropertiesToPublicIPAddress(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from address")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-publicipaddress,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=publicipaddresses,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.publicipaddresses.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &PublicIPAddress{}

// Default applies defaults to the PublicIPAddress resource
func (address *PublicIPAddress) Default() {
	address.defaultImpl()
	var temp interface{} = address
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (address *PublicIPAddress) defaultAzureName() {
	if address.Spec.AzureName == "" {
		address.Spec.AzureName = address.Name
	}
}

// defaultImpl applies the code generated defaults to the PublicIPAddress resource
func (address *PublicIPAddress) defaultImpl() { address.defaultAzureName() }

var _ genruntime.KubernetesResource = &PublicIPAddress{}

// AzureName returns the Azure name of the resource
func (address *PublicIPAddress) AzureName() string {
	return address.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (address PublicIPAddress) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceKind returns the kind of the resource
func (address *PublicIPAddress) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (address *PublicIPAddress) GetSpec() genruntime.ConvertibleSpec {
	return &address.Spec
}

// GetStatus returns the status of this resource
func (address *PublicIPAddress) GetStatus() genruntime.ConvertibleStatus {
	return &address.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (address *PublicIPAddress) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (address *PublicIPAddress) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (address *PublicIPAddress) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(address.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  address.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (address *PublicIPAddress) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded); ok {
		address.Status = *st
		return nil
	}

	// Convert status to required version
	var st PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	address.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-publicipaddress,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=publicipaddresses,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.publicipaddresses.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &PublicIPAddress{}

// ValidateCreate validates the creation of the resource
func (address *PublicIPAddress) ValidateCreate() error {
	validations := address.createValidations()
	var temp interface{} = address
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (address *PublicIPAddress) ValidateDelete() error {
	validations := address.deleteValidations()
	var temp interface{} = address
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (address *PublicIPAddress) ValidateUpdate(old runtime.Object) error {
	validations := address.updateValidations()
	var temp interface{} = address
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (address *PublicIPAddress) createValidations() []func() error {
	return []func() error{address.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (address *PublicIPAddress) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (address *PublicIPAddress) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return address.validateResourceReferences()
		},
		address.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (address *PublicIPAddress) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&address.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (address *PublicIPAddress) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*PublicIPAddress)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, address)
}

// AssignPropertiesFromPublicIPAddress populates our PublicIPAddress from the provided source PublicIPAddress
func (address *PublicIPAddress) AssignPropertiesFromPublicIPAddress(source *alpha20201101s.PublicIPAddress) error {

	// ObjectMeta
	address.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec PublicIPAddress_Spec
	err := spec.AssignPropertiesFromPublicIPAddress_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddress_Spec() to populate field Spec")
	}
	address.Spec = spec

	// Status
	var status PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded
	err = status.AssignPropertiesFromPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field Status")
	}
	address.Status = status

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress populates the provided destination PublicIPAddress from our PublicIPAddress
func (address *PublicIPAddress) AssignPropertiesToPublicIPAddress(destination *alpha20201101s.PublicIPAddress) error {

	// ObjectMeta
	destination.ObjectMeta = *address.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20201101s.PublicIPAddress_Spec
	err := address.Spec.AssignPropertiesToPublicIPAddress_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddress_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded
	err = address.Status.AssignPropertiesToPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (address *PublicIPAddress) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: address.Spec.OriginalVersion(),
		Kind:    "PublicIPAddress",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of PublicIPAddress. Use v1beta20201101.PublicIPAddress instead
type PublicIPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicIPAddress `json:"items"`
}

// Deprecated version of PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded. Use v1beta20201101.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded instead
type PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded struct {
	// Conditions: The observed state of the resource
	Conditions               []conditions.Condition                                      `json:"conditions,omitempty"`
	DdosSettings             *DdosSettings_STATUS                                        `json:"ddosSettings,omitempty"`
	DnsSettings              *PublicIPAddressDnsSettings_STATUS                          `json:"dnsSettings,omitempty"`
	Etag                     *string                                                     `json:"etag,omitempty"`
	ExtendedLocation         *ExtendedLocation_STATUS                                    `json:"extendedLocation,omitempty"`
	Id                       *string                                                     `json:"id,omitempty"`
	IdleTimeoutInMinutes     *int                                                        `json:"idleTimeoutInMinutes,omitempty"`
	IpAddress                *string                                                     `json:"ipAddress,omitempty"`
	IpConfiguration          *IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded `json:"ipConfiguration,omitempty"`
	IpTags                   []IpTag_STATUS                                              `json:"ipTags,omitempty"`
	Location                 *string                                                     `json:"location,omitempty"`
	MigrationPhase           *PublicIPAddressPropertiesFormat_MigrationPhase_STATUS      `json:"migrationPhase,omitempty"`
	Name                     *string                                                     `json:"name,omitempty"`
	NatGateway               *NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded      `json:"natGateway,omitempty"`
	ProvisioningState        *ProvisioningState_STATUS                                   `json:"provisioningState,omitempty"`
	PublicIPAddressVersion   *IPVersion_STATUS                                           `json:"publicIPAddressVersion,omitempty"`
	PublicIPAllocationMethod *IPAllocationMethod_STATUS                                  `json:"publicIPAllocationMethod,omitempty"`
	PublicIPPrefix           *SubResource_STATUS                                         `json:"publicIPPrefix,omitempty"`
	ResourceGuid             *string                                                     `json:"resourceGuid,omitempty"`
	Sku                      *PublicIPAddressSku_STATUS                                  `json:"sku,omitempty"`
	Tags                     map[string]string                                           `json:"tags,omitempty"`
	Type                     *string                                                     `json:"type,omitempty"`
	Zones                    []string                                                    `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded{}

// ConvertStatusFrom populates our PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded from the provided source
func (embedded *PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return embedded.AssignPropertiesFromPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = embedded.AssignPropertiesFromPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return embedded.AssignPropertiesToPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded{}
	err := embedded.AssignPropertiesToPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DdosSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosSettings != nil {
			var ddosSettings1 DdosSettings_STATUS
			err := ddosSettings1.PopulateFromARM(owner, *typedInput.Properties.DdosSettings)
			if err != nil {
				return err
			}
			ddosSettings := ddosSettings1
			embedded.DdosSettings = &ddosSettings
		}
	}

	// Set property ‘DnsSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DnsSettings != nil {
			var dnsSettings1 PublicIPAddressDnsSettings_STATUS
			err := dnsSettings1.PopulateFromARM(owner, *typedInput.Properties.DnsSettings)
			if err != nil {
				return err
			}
			dnsSettings := dnsSettings1
			embedded.DnsSettings = &dnsSettings
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			embedded.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘IpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpAddress != nil {
			ipAddress := *typedInput.Properties.IpAddress
			embedded.IpAddress = &ipAddress
		}
	}

	// Set property ‘IpConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpConfiguration != nil {
			var ipConfiguration1 IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded
			err := ipConfiguration1.PopulateFromARM(owner, *typedInput.Properties.IpConfiguration)
			if err != nil {
				return err
			}
			ipConfiguration := ipConfiguration1
			embedded.IpConfiguration = &ipConfiguration
		}
	}

	// Set property ‘IpTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpTags {
			var item1 IpTag_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpTags = append(embedded.IpTags, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		embedded.Location = &location
	}

	// Set property ‘MigrationPhase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MigrationPhase != nil {
			migrationPhase := *typedInput.Properties.MigrationPhase
			embedded.MigrationPhase = &migrationPhase
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			embedded.NatGateway = &natGateway
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddressVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddressVersion != nil {
			publicIPAddressVersion := *typedInput.Properties.PublicIPAddressVersion
			embedded.PublicIPAddressVersion = &publicIPAddressVersion
		}
	}

	// Set property ‘PublicIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAllocationMethod != nil {
			publicIPAllocationMethod := *typedInput.Properties.PublicIPAllocationMethod
			embedded.PublicIPAllocationMethod = &publicIPAllocationMethod
		}
	}

	// Set property ‘PublicIPPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPPrefix != nil {
			var publicIPPrefix1 SubResource_STATUS
			err := publicIPPrefix1.PopulateFromARM(owner, *typedInput.Properties.PublicIPPrefix)
			if err != nil {
				return err
			}
			publicIPPrefix := publicIPPrefix1
			embedded.PublicIPPrefix = &publicIPPrefix
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			embedded.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		embedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			embedded.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded populates our PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded from the provided source PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(source *alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) error {

	// Conditions
	embedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DdosSettings
	if source.DdosSettings != nil {
		var ddosSetting DdosSettings_STATUS
		err := ddosSetting.AssignPropertiesFromDdosSettings_STATUS(source.DdosSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDdosSettings_STATUS() to populate field DdosSettings")
		}
		embedded.DdosSettings = &ddosSetting
	} else {
		embedded.DdosSettings = nil
	}

	// DnsSettings
	if source.DnsSettings != nil {
		var dnsSetting PublicIPAddressDnsSettings_STATUS
		err := dnsSetting.AssignPropertiesFromPublicIPAddressDnsSettings_STATUS(source.DnsSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressDnsSettings_STATUS() to populate field DnsSettings")
		}
		embedded.DnsSettings = &dnsSetting
	} else {
		embedded.DnsSettings = nil
	}

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// IdleTimeoutInMinutes
	embedded.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(source.IdleTimeoutInMinutes)

	// IpAddress
	embedded.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// IpConfiguration
	if source.IpConfiguration != nil {
		var ipConfiguration IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded
		err := ipConfiguration.AssignPropertiesFromIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded(source.IpConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field IpConfiguration")
		}
		embedded.IpConfiguration = &ipConfiguration
	} else {
		embedded.IpConfiguration = nil
	}

	// IpTags
	if source.IpTags != nil {
		ipTagList := make([]IpTag_STATUS, len(source.IpTags))
		for ipTagIndex, ipTagItem := range source.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag IpTag_STATUS
			err := ipTag.AssignPropertiesFromIpTag_STATUS(&ipTagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpTag_STATUS() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		embedded.IpTags = ipTagList
	} else {
		embedded.IpTags = nil
	}

	// Location
	embedded.Location = genruntime.ClonePointerToString(source.Location)

	// MigrationPhase
	if source.MigrationPhase != nil {
		migrationPhase := PublicIPAddressPropertiesFormat_MigrationPhase_STATUS(*source.MigrationPhase)
		embedded.MigrationPhase = &migrationPhase
	} else {
		embedded.MigrationPhase = nil
	}

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// NatGateway
	if source.NatGateway != nil {
		var natGateway NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded
		err := natGateway.AssignPropertiesFromNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field NatGateway")
		}
		embedded.NatGateway = &natGateway
	} else {
		embedded.NatGateway = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		embedded.ProvisioningState = &provisioningState
	} else {
		embedded.ProvisioningState = nil
	}

	// PublicIPAddressVersion
	if source.PublicIPAddressVersion != nil {
		publicIPAddressVersion := IPVersion_STATUS(*source.PublicIPAddressVersion)
		embedded.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		embedded.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if source.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := IPAllocationMethod_STATUS(*source.PublicIPAllocationMethod)
		embedded.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		embedded.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if source.PublicIPPrefix != nil {
		var publicIPPrefix SubResource_STATUS
		err := publicIPPrefix.AssignPropertiesFromSubResource_STATUS(source.PublicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_STATUS() to populate field PublicIPPrefix")
		}
		embedded.PublicIPPrefix = &publicIPPrefix
	} else {
		embedded.PublicIPPrefix = nil
	}

	// ResourceGuid
	embedded.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku_STATUS
		err := sku.AssignPropertiesFromPublicIPAddressSku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku_STATUS() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Tags
	embedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded populates the provided destination PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded from our PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToPublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded(destination *alpha20201101s.PublicIPAddress_STATUS_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(embedded.Conditions)

	// DdosSettings
	if embedded.DdosSettings != nil {
		var ddosSetting alpha20201101s.DdosSettings_STATUS
		err := embedded.DdosSettings.AssignPropertiesToDdosSettings_STATUS(&ddosSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDdosSettings_STATUS() to populate field DdosSettings")
		}
		destination.DdosSettings = &ddosSetting
	} else {
		destination.DdosSettings = nil
	}

	// DnsSettings
	if embedded.DnsSettings != nil {
		var dnsSetting alpha20201101s.PublicIPAddressDnsSettings_STATUS
		err := embedded.DnsSettings.AssignPropertiesToPublicIPAddressDnsSettings_STATUS(&dnsSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressDnsSettings_STATUS() to populate field DnsSettings")
		}
		destination.DnsSettings = &dnsSetting
	} else {
		destination.DnsSettings = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation alpha20201101s.ExtendedLocation_STATUS
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// IdleTimeoutInMinutes
	destination.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(embedded.IdleTimeoutInMinutes)

	// IpAddress
	destination.IpAddress = genruntime.ClonePointerToString(embedded.IpAddress)

	// IpConfiguration
	if embedded.IpConfiguration != nil {
		var ipConfiguration alpha20201101s.IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded
		err := embedded.IpConfiguration.AssignPropertiesToIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded(&ipConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field IpConfiguration")
		}
		destination.IpConfiguration = &ipConfiguration
	} else {
		destination.IpConfiguration = nil
	}

	// IpTags
	if embedded.IpTags != nil {
		ipTagList := make([]alpha20201101s.IpTag_STATUS, len(embedded.IpTags))
		for ipTagIndex, ipTagItem := range embedded.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag alpha20201101s.IpTag_STATUS
			err := ipTagItem.AssignPropertiesToIpTag_STATUS(&ipTag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpTag_STATUS() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		destination.IpTags = ipTagList
	} else {
		destination.IpTags = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(embedded.Location)

	// MigrationPhase
	if embedded.MigrationPhase != nil {
		migrationPhase := string(*embedded.MigrationPhase)
		destination.MigrationPhase = &migrationPhase
	} else {
		destination.MigrationPhase = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// NatGateway
	if embedded.NatGateway != nil {
		var natGateway alpha20201101s.NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded
		err := embedded.NatGateway.AssignPropertiesToNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// ProvisioningState
	if embedded.ProvisioningState != nil {
		provisioningState := string(*embedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddressVersion
	if embedded.PublicIPAddressVersion != nil {
		publicIPAddressVersion := string(*embedded.PublicIPAddressVersion)
		destination.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		destination.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if embedded.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := string(*embedded.PublicIPAllocationMethod)
		destination.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		destination.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if embedded.PublicIPPrefix != nil {
		var publicIPPrefix alpha20201101s.SubResource_STATUS
		err := embedded.PublicIPPrefix.AssignPropertiesToSubResource_STATUS(&publicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_STATUS() to populate field PublicIPPrefix")
		}
		destination.PublicIPPrefix = &publicIPPrefix
	} else {
		destination.PublicIPPrefix = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(embedded.ResourceGuid)

	// Sku
	if embedded.Sku != nil {
		var sku alpha20201101s.PublicIPAddressSku_STATUS
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(embedded.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PublicIPAddress_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName             string                                          `json:"azureName,omitempty"`
	DdosSettings          *DdosSettings                                   `json:"ddosSettings,omitempty"`
	DnsSettings           *PublicIPAddressDnsSettings                     `json:"dnsSettings,omitempty"`
	ExtendedLocation      *ExtendedLocation                               `json:"extendedLocation,omitempty"`
	IdleTimeoutInMinutes  *int                                            `json:"idleTimeoutInMinutes,omitempty"`
	IpAddress             *string                                         `json:"ipAddress,omitempty"`
	IpTags                []IpTag                                         `json:"ipTags,omitempty"`
	LinkedPublicIPAddress *PublicIPAddressSpec_SubResourceEmbedded        `json:"linkedPublicIPAddress,omitempty"`
	Location              *string                                         `json:"location,omitempty"`
	MigrationPhase        *PublicIPAddressPropertiesFormat_MigrationPhase `json:"migrationPhase,omitempty"`
	NatGateway            *NatGatewaySpec                                 `json:"natGateway,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                    *genruntime.KnownResourceReference       `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PublicIPAddressVersion   *IPVersion                               `json:"publicIPAddressVersion,omitempty"`
	PublicIPAllocationMethod *IPAllocationMethod                      `json:"publicIPAllocationMethod,omitempty"`
	PublicIPPrefix           *SubResource                             `json:"publicIPPrefix,omitempty"`
	Reference                *genruntime.ResourceReference            `armReference:"Id" json:"reference,omitempty"`
	ServicePublicIPAddress   *PublicIPAddressSpec_SubResourceEmbedded `json:"servicePublicIPAddress,omitempty"`
	Sku                      *PublicIPAddressSku                      `json:"sku,omitempty"`
	Tags                     map[string]string                        `json:"tags,omitempty"`
	Zones                    []string                                 `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddress_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (address *PublicIPAddress_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if address == nil {
		return nil, nil
	}
	result := &PublicIPAddress_SpecARM{}

	// Set property ‘AzureName’:
	result.AzureName = address.AzureName

	// Set property ‘ExtendedLocation’:
	if address.ExtendedLocation != nil {
		extendedLocationARM, err := (*address.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocationARM.(*ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if address.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*address.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if address.Location != nil {
		location := *address.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if address.DdosSettings != nil ||
		address.DnsSettings != nil ||
		address.IdleTimeoutInMinutes != nil ||
		address.IpAddress != nil ||
		address.IpTags != nil ||
		address.LinkedPublicIPAddress != nil ||
		address.MigrationPhase != nil ||
		address.NatGateway != nil ||
		address.PublicIPAddressVersion != nil ||
		address.PublicIPAllocationMethod != nil ||
		address.PublicIPPrefix != nil ||
		address.ServicePublicIPAddress != nil {
		result.Properties = &PublicIPAddressPropertiesFormat_SubResourceEmbeddedARM{}
	}
	if address.DdosSettings != nil {
		ddosSettingsARM, err := (*address.DdosSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosSettings := *ddosSettingsARM.(*DdosSettingsARM)
		result.Properties.DdosSettings = &ddosSettings
	}
	if address.DnsSettings != nil {
		dnsSettingsARM, err := (*address.DnsSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		dnsSettings := *dnsSettingsARM.(*PublicIPAddressDnsSettingsARM)
		result.Properties.DnsSettings = &dnsSettings
	}
	if address.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinutes := *address.IdleTimeoutInMinutes
		result.Properties.IdleTimeoutInMinutes = &idleTimeoutInMinutes
	}
	if address.IpAddress != nil {
		ipAddress := *address.IpAddress
		result.Properties.IpAddress = &ipAddress
	}
	for _, item := range address.IpTags {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpTags = append(result.Properties.IpTags, *itemARM.(*IpTagARM))
	}
	if address.LinkedPublicIPAddress != nil {
		linkedPublicIPAddressARM, err := (*address.LinkedPublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		linkedPublicIPAddress := *linkedPublicIPAddressARM.(*PublicIPAddressSpec_SubResourceEmbeddedARM)
		result.Properties.LinkedPublicIPAddress = &linkedPublicIPAddress
	}
	if address.MigrationPhase != nil {
		migrationPhase := *address.MigrationPhase
		result.Properties.MigrationPhase = &migrationPhase
	}
	if address.NatGateway != nil {
		natGatewayARM, err := (*address.NatGateway).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		natGateway := *natGatewayARM.(*NatGatewaySpecARM)
		result.Properties.NatGateway = &natGateway
	}
	if address.PublicIPAddressVersion != nil {
		publicIPAddressVersion := *address.PublicIPAddressVersion
		result.Properties.PublicIPAddressVersion = &publicIPAddressVersion
	}
	if address.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := *address.PublicIPAllocationMethod
		result.Properties.PublicIPAllocationMethod = &publicIPAllocationMethod
	}
	if address.PublicIPPrefix != nil {
		publicIPPrefixARM, err := (*address.PublicIPPrefix).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicIPPrefix := *publicIPPrefixARM.(*SubResourceARM)
		result.Properties.PublicIPPrefix = &publicIPPrefix
	}
	if address.ServicePublicIPAddress != nil {
		servicePublicIPAddressARM, err := (*address.ServicePublicIPAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		servicePublicIPAddress := *servicePublicIPAddressARM.(*PublicIPAddressSpec_SubResourceEmbeddedARM)
		result.Properties.ServicePublicIPAddress = &servicePublicIPAddress
	}

	// Set property ‘Sku’:
	if address.Sku != nil {
		skuARM, err := (*address.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*PublicIPAddressSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if address.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range address.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range address.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (address *PublicIPAddress_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (address *PublicIPAddress_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	address.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DdosSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosSettings != nil {
			var ddosSettings1 DdosSettings
			err := ddosSettings1.PopulateFromARM(owner, *typedInput.Properties.DdosSettings)
			if err != nil {
				return err
			}
			ddosSettings := ddosSettings1
			address.DdosSettings = &ddosSettings
		}
	}

	// Set property ‘DnsSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DnsSettings != nil {
			var dnsSettings1 PublicIPAddressDnsSettings
			err := dnsSettings1.PopulateFromARM(owner, *typedInput.Properties.DnsSettings)
			if err != nil {
				return err
			}
			dnsSettings := dnsSettings1
			address.DnsSettings = &dnsSettings
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		address.ExtendedLocation = &extendedLocation
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			address.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘IpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpAddress != nil {
			ipAddress := *typedInput.Properties.IpAddress
			address.IpAddress = &ipAddress
		}
	}

	// Set property ‘IpTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpTags {
			var item1 IpTag
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			address.IpTags = append(address.IpTags, item1)
		}
	}

	// Set property ‘LinkedPublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkedPublicIPAddress != nil {
			var linkedPublicIPAddress1 PublicIPAddressSpec_SubResourceEmbedded
			err := linkedPublicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.LinkedPublicIPAddress)
			if err != nil {
				return err
			}
			linkedPublicIPAddress := linkedPublicIPAddress1
			address.LinkedPublicIPAddress = &linkedPublicIPAddress
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		address.Location = &location
	}

	// Set property ‘MigrationPhase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MigrationPhase != nil {
			migrationPhase := *typedInput.Properties.MigrationPhase
			address.MigrationPhase = &migrationPhase
		}
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 NatGatewaySpec
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			address.NatGateway = &natGateway
		}
	}

	// Set property ‘Owner’:
	address.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicIPAddressVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddressVersion != nil {
			publicIPAddressVersion := *typedInput.Properties.PublicIPAddressVersion
			address.PublicIPAddressVersion = &publicIPAddressVersion
		}
	}

	// Set property ‘PublicIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAllocationMethod != nil {
			publicIPAllocationMethod := *typedInput.Properties.PublicIPAllocationMethod
			address.PublicIPAllocationMethod = &publicIPAllocationMethod
		}
	}

	// Set property ‘PublicIPPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPPrefix != nil {
			var publicIPPrefix1 SubResource
			err := publicIPPrefix1.PopulateFromARM(owner, *typedInput.Properties.PublicIPPrefix)
			if err != nil {
				return err
			}
			publicIPPrefix := publicIPPrefix1
			address.PublicIPPrefix = &publicIPPrefix
		}
	}

	// no assignment for property ‘Reference’

	// Set property ‘ServicePublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServicePublicIPAddress != nil {
			var servicePublicIPAddress1 PublicIPAddressSpec_SubResourceEmbedded
			err := servicePublicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.ServicePublicIPAddress)
			if err != nil {
				return err
			}
			servicePublicIPAddress := servicePublicIPAddress1
			address.ServicePublicIPAddress = &servicePublicIPAddress
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		address.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		address.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			address.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		address.Zones = append(address.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &PublicIPAddress_Spec{}

// ConvertSpecFrom populates our PublicIPAddress_Spec from the provided source
func (address *PublicIPAddress_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20201101s.PublicIPAddress_Spec)
	if ok {
		// Populate our instance from source
		return address.AssignPropertiesFromPublicIPAddress_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20201101s.PublicIPAddress_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = address.AssignPropertiesFromPublicIPAddress_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our PublicIPAddress_Spec
func (address *PublicIPAddress_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20201101s.PublicIPAddress_Spec)
	if ok {
		// Populate destination from our instance
		return address.AssignPropertiesToPublicIPAddress_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201101s.PublicIPAddress_Spec{}
	err := address.AssignPropertiesToPublicIPAddress_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromPublicIPAddress_Spec populates our PublicIPAddress_Spec from the provided source PublicIPAddress_Spec
func (address *PublicIPAddress_Spec) AssignPropertiesFromPublicIPAddress_Spec(source *alpha20201101s.PublicIPAddress_Spec) error {

	// AzureName
	address.AzureName = source.AzureName

	// DdosSettings
	if source.DdosSettings != nil {
		var ddosSetting DdosSettings
		err := ddosSetting.AssignPropertiesFromDdosSettings(source.DdosSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDdosSettings() to populate field DdosSettings")
		}
		address.DdosSettings = &ddosSetting
	} else {
		address.DdosSettings = nil
	}

	// DnsSettings
	if source.DnsSettings != nil {
		var dnsSetting PublicIPAddressDnsSettings
		err := dnsSetting.AssignPropertiesFromPublicIPAddressDnsSettings(source.DnsSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressDnsSettings() to populate field DnsSettings")
		}
		address.DnsSettings = &dnsSetting
	} else {
		address.DnsSettings = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		address.ExtendedLocation = &extendedLocation
	} else {
		address.ExtendedLocation = nil
	}

	// IdleTimeoutInMinutes
	address.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(source.IdleTimeoutInMinutes)

	// IpAddress
	address.IpAddress = genruntime.ClonePointerToString(source.IpAddress)

	// IpTags
	if source.IpTags != nil {
		ipTagList := make([]IpTag, len(source.IpTags))
		for ipTagIndex, ipTagItem := range source.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag IpTag
			err := ipTag.AssignPropertiesFromIpTag(&ipTagItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpTag() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		address.IpTags = ipTagList
	} else {
		address.IpTags = nil
	}

	// LinkedPublicIPAddress
	if source.LinkedPublicIPAddress != nil {
		var linkedPublicIPAddress PublicIPAddressSpec_SubResourceEmbedded
		err := linkedPublicIPAddress.AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded(source.LinkedPublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded() to populate field LinkedPublicIPAddress")
		}
		address.LinkedPublicIPAddress = &linkedPublicIPAddress
	} else {
		address.LinkedPublicIPAddress = nil
	}

	// Location
	address.Location = genruntime.ClonePointerToString(source.Location)

	// MigrationPhase
	if source.MigrationPhase != nil {
		migrationPhase := PublicIPAddressPropertiesFormat_MigrationPhase(*source.MigrationPhase)
		address.MigrationPhase = &migrationPhase
	} else {
		address.MigrationPhase = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway NatGatewaySpec
		err := natGateway.AssignPropertiesFromNatGatewaySpec(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGatewaySpec() to populate field NatGateway")
		}
		address.NatGateway = &natGateway
	} else {
		address.NatGateway = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		address.Owner = &owner
	} else {
		address.Owner = nil
	}

	// PublicIPAddressVersion
	if source.PublicIPAddressVersion != nil {
		publicIPAddressVersion := IPVersion(*source.PublicIPAddressVersion)
		address.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		address.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if source.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := IPAllocationMethod(*source.PublicIPAllocationMethod)
		address.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		address.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if source.PublicIPPrefix != nil {
		var publicIPPrefix SubResource
		err := publicIPPrefix.AssignPropertiesFromSubResource(source.PublicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIPPrefix")
		}
		address.PublicIPPrefix = &publicIPPrefix
	} else {
		address.PublicIPPrefix = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		address.Reference = &reference
	} else {
		address.Reference = nil
	}

	// ServicePublicIPAddress
	if source.ServicePublicIPAddress != nil {
		var servicePublicIPAddress PublicIPAddressSpec_SubResourceEmbedded
		err := servicePublicIPAddress.AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded(source.ServicePublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded() to populate field ServicePublicIPAddress")
		}
		address.ServicePublicIPAddress = &servicePublicIPAddress
	} else {
		address.ServicePublicIPAddress = nil
	}

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku
		err := sku.AssignPropertiesFromPublicIPAddressSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku() to populate field Sku")
		}
		address.Sku = &sku
	} else {
		address.Sku = nil
	}

	// Tags
	address.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	address.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress_Spec populates the provided destination PublicIPAddress_Spec from our PublicIPAddress_Spec
func (address *PublicIPAddress_Spec) AssignPropertiesToPublicIPAddress_Spec(destination *alpha20201101s.PublicIPAddress_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = address.AzureName

	// DdosSettings
	if address.DdosSettings != nil {
		var ddosSetting alpha20201101s.DdosSettings
		err := address.DdosSettings.AssignPropertiesToDdosSettings(&ddosSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDdosSettings() to populate field DdosSettings")
		}
		destination.DdosSettings = &ddosSetting
	} else {
		destination.DdosSettings = nil
	}

	// DnsSettings
	if address.DnsSettings != nil {
		var dnsSetting alpha20201101s.PublicIPAddressDnsSettings
		err := address.DnsSettings.AssignPropertiesToPublicIPAddressDnsSettings(&dnsSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressDnsSettings() to populate field DnsSettings")
		}
		destination.DnsSettings = &dnsSetting
	} else {
		destination.DnsSettings = nil
	}

	// ExtendedLocation
	if address.ExtendedLocation != nil {
		var extendedLocation alpha20201101s.ExtendedLocation
		err := address.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// IdleTimeoutInMinutes
	destination.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(address.IdleTimeoutInMinutes)

	// IpAddress
	destination.IpAddress = genruntime.ClonePointerToString(address.IpAddress)

	// IpTags
	if address.IpTags != nil {
		ipTagList := make([]alpha20201101s.IpTag, len(address.IpTags))
		for ipTagIndex, ipTagItem := range address.IpTags {
			// Shadow the loop variable to avoid aliasing
			ipTagItem := ipTagItem
			var ipTag alpha20201101s.IpTag
			err := ipTagItem.AssignPropertiesToIpTag(&ipTag)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpTag() to populate field IpTags")
			}
			ipTagList[ipTagIndex] = ipTag
		}
		destination.IpTags = ipTagList
	} else {
		destination.IpTags = nil
	}

	// LinkedPublicIPAddress
	if address.LinkedPublicIPAddress != nil {
		var linkedPublicIPAddress alpha20201101s.PublicIPAddressSpec_SubResourceEmbedded
		err := address.LinkedPublicIPAddress.AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded(&linkedPublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded() to populate field LinkedPublicIPAddress")
		}
		destination.LinkedPublicIPAddress = &linkedPublicIPAddress
	} else {
		destination.LinkedPublicIPAddress = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(address.Location)

	// MigrationPhase
	if address.MigrationPhase != nil {
		migrationPhase := string(*address.MigrationPhase)
		destination.MigrationPhase = &migrationPhase
	} else {
		destination.MigrationPhase = nil
	}

	// NatGateway
	if address.NatGateway != nil {
		var natGateway alpha20201101s.NatGatewaySpec
		err := address.NatGateway.AssignPropertiesToNatGatewaySpec(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGatewaySpec() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// OriginalVersion
	destination.OriginalVersion = address.OriginalVersion()

	// Owner
	if address.Owner != nil {
		owner := address.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicIPAddressVersion
	if address.PublicIPAddressVersion != nil {
		publicIPAddressVersion := string(*address.PublicIPAddressVersion)
		destination.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		destination.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if address.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := string(*address.PublicIPAllocationMethod)
		destination.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		destination.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if address.PublicIPPrefix != nil {
		var publicIPPrefix alpha20201101s.SubResource
		err := address.PublicIPPrefix.AssignPropertiesToSubResource(&publicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIPPrefix")
		}
		destination.PublicIPPrefix = &publicIPPrefix
	} else {
		destination.PublicIPPrefix = nil
	}

	// Reference
	if address.Reference != nil {
		reference := address.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// ServicePublicIPAddress
	if address.ServicePublicIPAddress != nil {
		var servicePublicIPAddress alpha20201101s.PublicIPAddressSpec_SubResourceEmbedded
		err := address.ServicePublicIPAddress.AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded(&servicePublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded() to populate field ServicePublicIPAddress")
		}
		destination.ServicePublicIPAddress = &servicePublicIPAddress
	} else {
		destination.ServicePublicIPAddress = nil
	}

	// Sku
	if address.Sku != nil {
		var sku alpha20201101s.PublicIPAddressSku
		err := address.Sku.AssignPropertiesToPublicIPAddressSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(address.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(address.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (address *PublicIPAddress_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (address *PublicIPAddress_Spec) SetAzureName(azureName string) { address.AzureName = azureName }

// Deprecated version of DdosSettings. Use v1beta20201101.DdosSettings instead
type DdosSettings struct {
	DdosCustomPolicy   *SubResource                     `json:"ddosCustomPolicy,omitempty"`
	ProtectedIP        *bool                            `json:"protectedIP,omitempty"`
	ProtectionCoverage *DdosSettings_ProtectionCoverage `json:"protectionCoverage,omitempty"`
}

var _ genruntime.ARMTransformer = &DdosSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *DdosSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &DdosSettingsARM{}

	// Set property ‘DdosCustomPolicy’:
	if settings.DdosCustomPolicy != nil {
		ddosCustomPolicyARM, err := (*settings.DdosCustomPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosCustomPolicy := *ddosCustomPolicyARM.(*SubResourceARM)
		result.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if settings.ProtectedIP != nil {
		protectedIP := *settings.ProtectedIP
		result.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if settings.ProtectionCoverage != nil {
		protectionCoverage := *settings.ProtectionCoverage
		result.ProtectionCoverage = &protectionCoverage
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DdosSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DdosSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DdosSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DdosSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DdosSettingsARM, got %T", armInput)
	}

	// Set property ‘DdosCustomPolicy’:
	if typedInput.DdosCustomPolicy != nil {
		var ddosCustomPolicy1 SubResource
		err := ddosCustomPolicy1.PopulateFromARM(owner, *typedInput.DdosCustomPolicy)
		if err != nil {
			return err
		}
		ddosCustomPolicy := ddosCustomPolicy1
		settings.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if typedInput.ProtectedIP != nil {
		protectedIP := *typedInput.ProtectedIP
		settings.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if typedInput.ProtectionCoverage != nil {
		protectionCoverage := *typedInput.ProtectionCoverage
		settings.ProtectionCoverage = &protectionCoverage
	}

	// No error
	return nil
}

// AssignPropertiesFromDdosSettings populates our DdosSettings from the provided source DdosSettings
func (settings *DdosSettings) AssignPropertiesFromDdosSettings(source *alpha20201101s.DdosSettings) error {

	// DdosCustomPolicy
	if source.DdosCustomPolicy != nil {
		var ddosCustomPolicy SubResource
		err := ddosCustomPolicy.AssignPropertiesFromSubResource(source.DdosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field DdosCustomPolicy")
		}
		settings.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		settings.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if source.ProtectedIP != nil {
		protectedIP := *source.ProtectedIP
		settings.ProtectedIP = &protectedIP
	} else {
		settings.ProtectedIP = nil
	}

	// ProtectionCoverage
	if source.ProtectionCoverage != nil {
		protectionCoverage := DdosSettings_ProtectionCoverage(*source.ProtectionCoverage)
		settings.ProtectionCoverage = &protectionCoverage
	} else {
		settings.ProtectionCoverage = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDdosSettings populates the provided destination DdosSettings from our DdosSettings
func (settings *DdosSettings) AssignPropertiesToDdosSettings(destination *alpha20201101s.DdosSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DdosCustomPolicy
	if settings.DdosCustomPolicy != nil {
		var ddosCustomPolicy alpha20201101s.SubResource
		err := settings.DdosCustomPolicy.AssignPropertiesToSubResource(&ddosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field DdosCustomPolicy")
		}
		destination.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		destination.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if settings.ProtectedIP != nil {
		protectedIP := *settings.ProtectedIP
		destination.ProtectedIP = &protectedIP
	} else {
		destination.ProtectedIP = nil
	}

	// ProtectionCoverage
	if settings.ProtectionCoverage != nil {
		protectionCoverage := string(*settings.ProtectionCoverage)
		destination.ProtectionCoverage = &protectionCoverage
	} else {
		destination.ProtectionCoverage = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DdosSettings_STATUS. Use v1beta20201101.DdosSettings_STATUS instead
type DdosSettings_STATUS struct {
	DdosCustomPolicy   *SubResource_STATUS                     `json:"ddosCustomPolicy,omitempty"`
	ProtectedIP        *bool                                   `json:"protectedIP,omitempty"`
	ProtectionCoverage *DdosSettings_ProtectionCoverage_STATUS `json:"protectionCoverage,omitempty"`
}

var _ genruntime.FromARMConverter = &DdosSettings_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *DdosSettings_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DdosSettings_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *DdosSettings_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DdosSettings_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DdosSettings_STATUSARM, got %T", armInput)
	}

	// Set property ‘DdosCustomPolicy’:
	if typedInput.DdosCustomPolicy != nil {
		var ddosCustomPolicy1 SubResource_STATUS
		err := ddosCustomPolicy1.PopulateFromARM(owner, *typedInput.DdosCustomPolicy)
		if err != nil {
			return err
		}
		ddosCustomPolicy := ddosCustomPolicy1
		settings.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if typedInput.ProtectedIP != nil {
		protectedIP := *typedInput.ProtectedIP
		settings.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if typedInput.ProtectionCoverage != nil {
		protectionCoverage := *typedInput.ProtectionCoverage
		settings.ProtectionCoverage = &protectionCoverage
	}

	// No error
	return nil
}

// AssignPropertiesFromDdosSettings_STATUS populates our DdosSettings_STATUS from the provided source DdosSettings_STATUS
func (settings *DdosSettings_STATUS) AssignPropertiesFromDdosSettings_STATUS(source *alpha20201101s.DdosSettings_STATUS) error {

	// DdosCustomPolicy
	if source.DdosCustomPolicy != nil {
		var ddosCustomPolicy SubResource_STATUS
		err := ddosCustomPolicy.AssignPropertiesFromSubResource_STATUS(source.DdosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_STATUS() to populate field DdosCustomPolicy")
		}
		settings.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		settings.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if source.ProtectedIP != nil {
		protectedIP := *source.ProtectedIP
		settings.ProtectedIP = &protectedIP
	} else {
		settings.ProtectedIP = nil
	}

	// ProtectionCoverage
	if source.ProtectionCoverage != nil {
		protectionCoverage := DdosSettings_ProtectionCoverage_STATUS(*source.ProtectionCoverage)
		settings.ProtectionCoverage = &protectionCoverage
	} else {
		settings.ProtectionCoverage = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDdosSettings_STATUS populates the provided destination DdosSettings_STATUS from our DdosSettings_STATUS
func (settings *DdosSettings_STATUS) AssignPropertiesToDdosSettings_STATUS(destination *alpha20201101s.DdosSettings_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DdosCustomPolicy
	if settings.DdosCustomPolicy != nil {
		var ddosCustomPolicy alpha20201101s.SubResource_STATUS
		err := settings.DdosCustomPolicy.AssignPropertiesToSubResource_STATUS(&ddosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_STATUS() to populate field DdosCustomPolicy")
		}
		destination.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		destination.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if settings.ProtectedIP != nil {
		protectedIP := *settings.ProtectedIP
		destination.ProtectedIP = &protectedIP
	} else {
		destination.ProtectedIP = nil
	}

	// ProtectionCoverage
	if settings.ProtectionCoverage != nil {
		protectionCoverage := string(*settings.ProtectionCoverage)
		destination.ProtectionCoverage = &protectionCoverage
	} else {
		destination.ProtectionCoverage = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPAllocationMethod. Use v1beta20201101.IPAllocationMethod instead
// +kubebuilder:validation:Enum={"Dynamic","Static"}
type IPAllocationMethod string

const (
	IPAllocationMethod_Dynamic = IPAllocationMethod("Dynamic")
	IPAllocationMethod_Static  = IPAllocationMethod("Static")
)

// Deprecated version of IPAllocationMethod_STATUS. Use v1beta20201101.IPAllocationMethod_STATUS instead
type IPAllocationMethod_STATUS string

const (
	IPAllocationMethod_Dynamic_STATUS = IPAllocationMethod_STATUS("Dynamic")
	IPAllocationMethod_Static_STATUS  = IPAllocationMethod_STATUS("Static")
)

// Deprecated version of IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded. Use v1beta20201101.IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded instead
type IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded struct {
	Etag                      *string                                            `json:"etag,omitempty"`
	Id                        *string                                            `json:"id,omitempty"`
	Name                      *string                                            `json:"name,omitempty"`
	PrivateIPAddress          *string                                            `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod *IPAllocationMethod_STATUS                         `json:"privateIPAllocationMethod,omitempty"`
	ProvisioningState         *ProvisioningState_STATUS                          `json:"provisioningState,omitempty"`
	Subnet                    *Subnet_STATUS_PublicIPAddress_SubResourceEmbedded `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			embedded.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			embedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 Subnet_STATUS_PublicIPAddress_SubResourceEmbedded
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			embedded.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded populates our IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded from the provided source IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded(source *alpha20201101s.IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded) error {

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	embedded.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_STATUS(*source.PrivateIPAllocationMethod)
		embedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		embedded.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		embedded.ProvisioningState = &provisioningState
	} else {
		embedded.ProvisioningState = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet Subnet_STATUS_PublicIPAddress_SubResourceEmbedded
		err := subnet.AssignPropertiesFromSubnet_STATUS_PublicIPAddress_SubResourceEmbedded(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubnet_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field Subnet")
		}
		embedded.Subnet = &subnet
	} else {
		embedded.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded populates the provided destination IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded from our IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToIPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded(destination *alpha20201101s.IPConfiguration_STATUS_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(embedded.PrivateIPAddress)

	// PrivateIPAllocationMethod
	if embedded.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*embedded.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if embedded.ProvisioningState != nil {
		provisioningState := string(*embedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Subnet
	if embedded.Subnet != nil {
		var subnet alpha20201101s.Subnet_STATUS_PublicIPAddress_SubResourceEmbedded
		err := embedded.Subnet.AssignPropertiesToSubnet_STATUS_PublicIPAddress_SubResourceEmbedded(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubnet_STATUS_PublicIPAddress_SubResourceEmbedded() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPVersion. Use v1beta20201101.IPVersion instead
// +kubebuilder:validation:Enum={"IPv4","IPv6"}
type IPVersion string

const (
	IPVersion_IPv4 = IPVersion("IPv4")
	IPVersion_IPv6 = IPVersion("IPv6")
)

// Deprecated version of IPVersion_STATUS. Use v1beta20201101.IPVersion_STATUS instead
type IPVersion_STATUS string

const (
	IPVersion_IPv4_STATUS = IPVersion_STATUS("IPv4")
	IPVersion_IPv6_STATUS = IPVersion_STATUS("IPv6")
)

// Deprecated version of IpTag. Use v1beta20201101.IpTag instead
type IpTag struct {
	IpTagType *string `json:"ipTagType,omitempty"`
	Tag       *string `json:"tag,omitempty"`
}

var _ genruntime.ARMTransformer = &IpTag{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipTag *IpTag) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ipTag == nil {
		return nil, nil
	}
	result := &IpTagARM{}

	// Set property ‘IpTagType’:
	if ipTag.IpTagType != nil {
		ipTagType := *ipTag.IpTagType
		result.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if ipTag.Tag != nil {
		tag := *ipTag.Tag
		result.Tag = &tag
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipTag *IpTag) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpTagARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipTag *IpTag) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpTagARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpTagARM, got %T", armInput)
	}

	// Set property ‘IpTagType’:
	if typedInput.IpTagType != nil {
		ipTagType := *typedInput.IpTagType
		ipTag.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		ipTag.Tag = &tag
	}

	// No error
	return nil
}

// AssignPropertiesFromIpTag populates our IpTag from the provided source IpTag
func (ipTag *IpTag) AssignPropertiesFromIpTag(source *alpha20201101s.IpTag) error {

	// IpTagType
	ipTag.IpTagType = genruntime.ClonePointerToString(source.IpTagType)

	// Tag
	ipTag.Tag = genruntime.ClonePointerToString(source.Tag)

	// No error
	return nil
}

// AssignPropertiesToIpTag populates the provided destination IpTag from our IpTag
func (ipTag *IpTag) AssignPropertiesToIpTag(destination *alpha20201101s.IpTag) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpTagType
	destination.IpTagType = genruntime.ClonePointerToString(ipTag.IpTagType)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(ipTag.Tag)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IpTag_STATUS. Use v1beta20201101.IpTag_STATUS instead
type IpTag_STATUS struct {
	IpTagType *string `json:"ipTagType,omitempty"`
	Tag       *string `json:"tag,omitempty"`
}

var _ genruntime.FromARMConverter = &IpTag_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipTag *IpTag_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpTag_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipTag *IpTag_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpTag_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpTag_STATUSARM, got %T", armInput)
	}

	// Set property ‘IpTagType’:
	if typedInput.IpTagType != nil {
		ipTagType := *typedInput.IpTagType
		ipTag.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		ipTag.Tag = &tag
	}

	// No error
	return nil
}

// AssignPropertiesFromIpTag_STATUS populates our IpTag_STATUS from the provided source IpTag_STATUS
func (ipTag *IpTag_STATUS) AssignPropertiesFromIpTag_STATUS(source *alpha20201101s.IpTag_STATUS) error {

	// IpTagType
	ipTag.IpTagType = genruntime.ClonePointerToString(source.IpTagType)

	// Tag
	ipTag.Tag = genruntime.ClonePointerToString(source.Tag)

	// No error
	return nil
}

// AssignPropertiesToIpTag_STATUS populates the provided destination IpTag_STATUS from our IpTag_STATUS
func (ipTag *IpTag_STATUS) AssignPropertiesToIpTag_STATUS(destination *alpha20201101s.IpTag_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpTagType
	destination.IpTagType = genruntime.ClonePointerToString(ipTag.IpTagType)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(ipTag.Tag)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NatGatewaySpec. Use v1beta20201101.NatGatewaySpec instead
type NatGatewaySpec struct {
	IdleTimeoutInMinutes *int                          `json:"idleTimeoutInMinutes,omitempty"`
	Location             *string                       `json:"location,omitempty"`
	PublicIpAddresses    []SubResource                 `json:"publicIpAddresses,omitempty"`
	PublicIpPrefixes     []SubResource                 `json:"publicIpPrefixes,omitempty"`
	Reference            *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
	Sku                  *NatGatewaySku                `json:"sku,omitempty"`
	Tags                 map[string]string             `json:"tags,omitempty"`
	Zones                []string                      `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &NatGatewaySpec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gateway *NatGatewaySpec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gateway == nil {
		return nil, nil
	}
	result := &NatGatewaySpecARM{}

	// Set property ‘Id’:
	if gateway.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*gateway.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if gateway.Location != nil {
		location := *gateway.Location
		result.Location = &location
	}

	// Set property ‘Properties’:
	if gateway.IdleTimeoutInMinutes != nil ||
		gateway.PublicIpAddresses != nil ||
		gateway.PublicIpPrefixes != nil {
		result.Properties = &NatGatewayPropertiesFormatARM{}
	}
	if gateway.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinutes := *gateway.IdleTimeoutInMinutes
		result.Properties.IdleTimeoutInMinutes = &idleTimeoutInMinutes
	}
	for _, item := range gateway.PublicIpAddresses {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PublicIpAddresses = append(result.Properties.PublicIpAddresses, *itemARM.(*SubResourceARM))
	}
	for _, item := range gateway.PublicIpPrefixes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PublicIpPrefixes = append(result.Properties.PublicIpPrefixes, *itemARM.(*SubResourceARM))
	}

	// Set property ‘Sku’:
	if gateway.Sku != nil {
		skuARM, err := (*gateway.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*NatGatewaySkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if gateway.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range gateway.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range gateway.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gateway *NatGatewaySpec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gateway *NatGatewaySpec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySpecARM, got %T", armInput)
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			gateway.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		gateway.Location = &location
	}

	// Set property ‘PublicIpAddresses’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PublicIpAddresses {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.PublicIpAddresses = append(gateway.PublicIpAddresses, item1)
		}
	}

	// Set property ‘PublicIpPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PublicIpPrefixes {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			gateway.PublicIpPrefixes = append(gateway.PublicIpPrefixes, item1)
		}
	}

	// no assignment for property ‘Reference’

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 NatGatewaySku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		gateway.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		gateway.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			gateway.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		gateway.Zones = append(gateway.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySpec populates our NatGatewaySpec from the provided source NatGatewaySpec
func (gateway *NatGatewaySpec) AssignPropertiesFromNatGatewaySpec(source *alpha20201101s.NatGatewaySpec) error {

	// IdleTimeoutInMinutes
	gateway.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(source.IdleTimeoutInMinutes)

	// Location
	gateway.Location = genruntime.ClonePointerToString(source.Location)

	// PublicIpAddresses
	if source.PublicIpAddresses != nil {
		publicIpAddressList := make([]SubResource, len(source.PublicIpAddresses))
		for publicIpAddressIndex, publicIpAddressItem := range source.PublicIpAddresses {
			// Shadow the loop variable to avoid aliasing
			publicIpAddressItem := publicIpAddressItem
			var publicIpAddress SubResource
			err := publicIpAddress.AssignPropertiesFromSubResource(&publicIpAddressItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIpAddresses")
			}
			publicIpAddressList[publicIpAddressIndex] = publicIpAddress
		}
		gateway.PublicIpAddresses = publicIpAddressList
	} else {
		gateway.PublicIpAddresses = nil
	}

	// PublicIpPrefixes
	if source.PublicIpPrefixes != nil {
		publicIpPrefixList := make([]SubResource, len(source.PublicIpPrefixes))
		for publicIpPrefixIndex, publicIpPrefixItem := range source.PublicIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			publicIpPrefixItem := publicIpPrefixItem
			var publicIpPrefix SubResource
			err := publicIpPrefix.AssignPropertiesFromSubResource(&publicIpPrefixItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field PublicIpPrefixes")
			}
			publicIpPrefixList[publicIpPrefixIndex] = publicIpPrefix
		}
		gateway.PublicIpPrefixes = publicIpPrefixList
	} else {
		gateway.PublicIpPrefixes = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		gateway.Reference = &reference
	} else {
		gateway.Reference = nil
	}

	// Sku
	if source.Sku != nil {
		var sku NatGatewaySku
		err := sku.AssignPropertiesFromNatGatewaySku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGatewaySku() to populate field Sku")
		}
		gateway.Sku = &sku
	} else {
		gateway.Sku = nil
	}

	// Tags
	gateway.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	gateway.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySpec populates the provided destination NatGatewaySpec from our NatGatewaySpec
func (gateway *NatGatewaySpec) AssignPropertiesToNatGatewaySpec(destination *alpha20201101s.NatGatewaySpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IdleTimeoutInMinutes
	destination.IdleTimeoutInMinutes = genruntime.ClonePointerToInt(gateway.IdleTimeoutInMinutes)

	// Location
	destination.Location = genruntime.ClonePointerToString(gateway.Location)

	// PublicIpAddresses
	if gateway.PublicIpAddresses != nil {
		publicIpAddressList := make([]alpha20201101s.SubResource, len(gateway.PublicIpAddresses))
		for publicIpAddressIndex, publicIpAddressItem := range gateway.PublicIpAddresses {
			// Shadow the loop variable to avoid aliasing
			publicIpAddressItem := publicIpAddressItem
			var publicIpAddress alpha20201101s.SubResource
			err := publicIpAddressItem.AssignPropertiesToSubResource(&publicIpAddress)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIpAddresses")
			}
			publicIpAddressList[publicIpAddressIndex] = publicIpAddress
		}
		destination.PublicIpAddresses = publicIpAddressList
	} else {
		destination.PublicIpAddresses = nil
	}

	// PublicIpPrefixes
	if gateway.PublicIpPrefixes != nil {
		publicIpPrefixList := make([]alpha20201101s.SubResource, len(gateway.PublicIpPrefixes))
		for publicIpPrefixIndex, publicIpPrefixItem := range gateway.PublicIpPrefixes {
			// Shadow the loop variable to avoid aliasing
			publicIpPrefixItem := publicIpPrefixItem
			var publicIpPrefix alpha20201101s.SubResource
			err := publicIpPrefixItem.AssignPropertiesToSubResource(&publicIpPrefix)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field PublicIpPrefixes")
			}
			publicIpPrefixList[publicIpPrefixIndex] = publicIpPrefix
		}
		destination.PublicIpPrefixes = publicIpPrefixList
	} else {
		destination.PublicIpPrefixes = nil
	}

	// Reference
	if gateway.Reference != nil {
		reference := gateway.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Sku
	if gateway.Sku != nil {
		var sku alpha20201101s.NatGatewaySku
		err := gateway.Sku.AssignPropertiesToNatGatewaySku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGatewaySku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(gateway.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(gateway.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded. Use v1beta20201101.NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded instead
type NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded struct {
	Id    *string               `json:"id,omitempty"`
	Sku   *NatGatewaySku_STATUS `json:"sku,omitempty"`
	Zones []string              `json:"zones,omitempty"`
}

var _ genruntime.FromARMConverter = &NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGateway_STATUS_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGateway_STATUS_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGateway_STATUS_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 NatGatewaySku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded populates our NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded from the provided source NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded(source *alpha20201101s.NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Sku
	if source.Sku != nil {
		var sku NatGatewaySku_STATUS
		err := sku.AssignPropertiesFromNatGatewaySku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNatGatewaySku_STATUS() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded populates the provided destination NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded from our NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToNatGateway_STATUS_PublicIPAddress_SubResourceEmbedded(destination *alpha20201101s.NatGateway_STATUS_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Sku
	if embedded.Sku != nil {
		var sku alpha20201101s.NatGatewaySku_STATUS
		err := embedded.Sku.AssignPropertiesToNatGatewaySku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNatGatewaySku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PublicIPAddressDnsSettings. Use v1beta20201101.PublicIPAddressDnsSettings instead
type PublicIPAddressDnsSettings struct {
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
	Fqdn            *string `json:"fqdn,omitempty"`
	ReverseFqdn     *string `json:"reverseFqdn,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressDnsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *PublicIPAddressDnsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &PublicIPAddressDnsSettingsARM{}

	// Set property ‘DomainNameLabel’:
	if settings.DomainNameLabel != nil {
		domainNameLabel := *settings.DomainNameLabel
		result.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if settings.Fqdn != nil {
		fqdn := *settings.Fqdn
		result.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if settings.ReverseFqdn != nil {
		reverseFqdn := *settings.ReverseFqdn
		result.ReverseFqdn = &reverseFqdn
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *PublicIPAddressDnsSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressDnsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *PublicIPAddressDnsSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressDnsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressDnsSettingsARM, got %T", armInput)
	}

	// Set property ‘DomainNameLabel’:
	if typedInput.DomainNameLabel != nil {
		domainNameLabel := *typedInput.DomainNameLabel
		settings.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		settings.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if typedInput.ReverseFqdn != nil {
		reverseFqdn := *typedInput.ReverseFqdn
		settings.ReverseFqdn = &reverseFqdn
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressDnsSettings populates our PublicIPAddressDnsSettings from the provided source PublicIPAddressDnsSettings
func (settings *PublicIPAddressDnsSettings) AssignPropertiesFromPublicIPAddressDnsSettings(source *alpha20201101s.PublicIPAddressDnsSettings) error {

	// DomainNameLabel
	settings.DomainNameLabel = genruntime.ClonePointerToString(source.DomainNameLabel)

	// Fqdn
	settings.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// ReverseFqdn
	settings.ReverseFqdn = genruntime.ClonePointerToString(source.ReverseFqdn)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressDnsSettings populates the provided destination PublicIPAddressDnsSettings from our PublicIPAddressDnsSettings
func (settings *PublicIPAddressDnsSettings) AssignPropertiesToPublicIPAddressDnsSettings(destination *alpha20201101s.PublicIPAddressDnsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DomainNameLabel
	destination.DomainNameLabel = genruntime.ClonePointerToString(settings.DomainNameLabel)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(settings.Fqdn)

	// ReverseFqdn
	destination.ReverseFqdn = genruntime.ClonePointerToString(settings.ReverseFqdn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PublicIPAddressDnsSettings_STATUS. Use v1beta20201101.PublicIPAddressDnsSettings_STATUS instead
type PublicIPAddressDnsSettings_STATUS struct {
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
	Fqdn            *string `json:"fqdn,omitempty"`
	ReverseFqdn     *string `json:"reverseFqdn,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddressDnsSettings_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *PublicIPAddressDnsSettings_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressDnsSettings_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *PublicIPAddressDnsSettings_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressDnsSettings_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressDnsSettings_STATUSARM, got %T", armInput)
	}

	// Set property ‘DomainNameLabel’:
	if typedInput.DomainNameLabel != nil {
		domainNameLabel := *typedInput.DomainNameLabel
		settings.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		settings.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if typedInput.ReverseFqdn != nil {
		reverseFqdn := *typedInput.ReverseFqdn
		settings.ReverseFqdn = &reverseFqdn
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressDnsSettings_STATUS populates our PublicIPAddressDnsSettings_STATUS from the provided source PublicIPAddressDnsSettings_STATUS
func (settings *PublicIPAddressDnsSettings_STATUS) AssignPropertiesFromPublicIPAddressDnsSettings_STATUS(source *alpha20201101s.PublicIPAddressDnsSettings_STATUS) error {

	// DomainNameLabel
	settings.DomainNameLabel = genruntime.ClonePointerToString(source.DomainNameLabel)

	// Fqdn
	settings.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// ReverseFqdn
	settings.ReverseFqdn = genruntime.ClonePointerToString(source.ReverseFqdn)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressDnsSettings_STATUS populates the provided destination PublicIPAddressDnsSettings_STATUS from our PublicIPAddressDnsSettings_STATUS
func (settings *PublicIPAddressDnsSettings_STATUS) AssignPropertiesToPublicIPAddressDnsSettings_STATUS(destination *alpha20201101s.PublicIPAddressDnsSettings_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DomainNameLabel
	destination.DomainNameLabel = genruntime.ClonePointerToString(settings.DomainNameLabel)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(settings.Fqdn)

	// ReverseFqdn
	destination.ReverseFqdn = genruntime.ClonePointerToString(settings.ReverseFqdn)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PublicIPAddressPropertiesFormat_MigrationPhase. Use
// v1beta20201101.PublicIPAddressPropertiesFormat_MigrationPhase instead
// +kubebuilder:validation:Enum={"Abort","Commit","Committed","None","Prepare"}
type PublicIPAddressPropertiesFormat_MigrationPhase string

const (
	PublicIPAddressPropertiesFormat_MigrationPhase_Abort     = PublicIPAddressPropertiesFormat_MigrationPhase("Abort")
	PublicIPAddressPropertiesFormat_MigrationPhase_Commit    = PublicIPAddressPropertiesFormat_MigrationPhase("Commit")
	PublicIPAddressPropertiesFormat_MigrationPhase_Committed = PublicIPAddressPropertiesFormat_MigrationPhase("Committed")
	PublicIPAddressPropertiesFormat_MigrationPhase_None      = PublicIPAddressPropertiesFormat_MigrationPhase("None")
	PublicIPAddressPropertiesFormat_MigrationPhase_Prepare   = PublicIPAddressPropertiesFormat_MigrationPhase("Prepare")
)

// Deprecated version of PublicIPAddressPropertiesFormat_MigrationPhase_STATUS. Use
// v1beta20201101.PublicIPAddressPropertiesFormat_MigrationPhase_STATUS instead
type PublicIPAddressPropertiesFormat_MigrationPhase_STATUS string

const (
	PublicIPAddressPropertiesFormat_MigrationPhase_Abort_STATUS     = PublicIPAddressPropertiesFormat_MigrationPhase_STATUS("Abort")
	PublicIPAddressPropertiesFormat_MigrationPhase_Commit_STATUS    = PublicIPAddressPropertiesFormat_MigrationPhase_STATUS("Commit")
	PublicIPAddressPropertiesFormat_MigrationPhase_Committed_STATUS = PublicIPAddressPropertiesFormat_MigrationPhase_STATUS("Committed")
	PublicIPAddressPropertiesFormat_MigrationPhase_None_STATUS      = PublicIPAddressPropertiesFormat_MigrationPhase_STATUS("None")
	PublicIPAddressPropertiesFormat_MigrationPhase_Prepare_STATUS   = PublicIPAddressPropertiesFormat_MigrationPhase_STATUS("Prepare")
)

// Deprecated version of PublicIPAddressSku. Use v1beta20201101.PublicIPAddressSku instead
type PublicIPAddressSku struct {
	Name *PublicIPAddressSku_Name `json:"name,omitempty"`
	Tier *PublicIPAddressSku_Tier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (addressSku *PublicIPAddressSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if addressSku == nil {
		return nil, nil
	}
	result := &PublicIPAddressSkuARM{}

	// Set property ‘Name’:
	if addressSku.Name != nil {
		name := *addressSku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if addressSku.Tier != nil {
		tier := *addressSku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (addressSku *PublicIPAddressSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (addressSku *PublicIPAddressSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		addressSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		addressSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSku populates our PublicIPAddressSku from the provided source PublicIPAddressSku
func (addressSku *PublicIPAddressSku) AssignPropertiesFromPublicIPAddressSku(source *alpha20201101s.PublicIPAddressSku) error {

	// Name
	if source.Name != nil {
		name := PublicIPAddressSku_Name(*source.Name)
		addressSku.Name = &name
	} else {
		addressSku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := PublicIPAddressSku_Tier(*source.Tier)
		addressSku.Tier = &tier
	} else {
		addressSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSku populates the provided destination PublicIPAddressSku from our PublicIPAddressSku
func (addressSku *PublicIPAddressSku) AssignPropertiesToPublicIPAddressSku(destination *alpha20201101s.PublicIPAddressSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if addressSku.Name != nil {
		name := string(*addressSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if addressSku.Tier != nil {
		tier := string(*addressSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PublicIPAddressSku_STATUS. Use v1beta20201101.PublicIPAddressSku_STATUS instead
type PublicIPAddressSku_STATUS struct {
	Name *PublicIPAddressSku_Name_STATUS `json:"name,omitempty"`
	Tier *PublicIPAddressSku_Tier_STATUS `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddressSku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (addressSku *PublicIPAddressSku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSku_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (addressSku *PublicIPAddressSku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSku_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSku_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		addressSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		addressSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSku_STATUS populates our PublicIPAddressSku_STATUS from the provided source PublicIPAddressSku_STATUS
func (addressSku *PublicIPAddressSku_STATUS) AssignPropertiesFromPublicIPAddressSku_STATUS(source *alpha20201101s.PublicIPAddressSku_STATUS) error {

	// Name
	if source.Name != nil {
		name := PublicIPAddressSku_Name_STATUS(*source.Name)
		addressSku.Name = &name
	} else {
		addressSku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := PublicIPAddressSku_Tier_STATUS(*source.Tier)
		addressSku.Tier = &tier
	} else {
		addressSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSku_STATUS populates the provided destination PublicIPAddressSku_STATUS from our PublicIPAddressSku_STATUS
func (addressSku *PublicIPAddressSku_STATUS) AssignPropertiesToPublicIPAddressSku_STATUS(destination *alpha20201101s.PublicIPAddressSku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if addressSku.Name != nil {
		name := string(*addressSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if addressSku.Tier != nil {
		tier := string(*addressSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PublicIPAddressSpec_SubResourceEmbedded. Use v1beta20201101.PublicIPAddressSpec_SubResourceEmbedded instead
type PublicIPAddressSpec_SubResourceEmbedded struct {
	ExtendedLocation *ExtendedLocation             `json:"extendedLocation,omitempty"`
	Location         *string                       `json:"location,omitempty"`
	Reference        *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
	Sku              *PublicIPAddressSku           `json:"sku,omitempty"`
	Tags             map[string]string             `json:"tags,omitempty"`
	Zones            []string                      `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressSpec_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	result := &PublicIPAddressSpec_SubResourceEmbeddedARM{}

	// Set property ‘ExtendedLocation’:
	if embedded.ExtendedLocation != nil {
		extendedLocationARM, err := (*embedded.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocationARM.(*ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if embedded.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*embedded.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if embedded.Location != nil {
		location := *embedded.Location
		result.Location = &location
	}

	// Set property ‘Sku’:
	if embedded.Sku != nil {
		skuARM, err := (*embedded.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*PublicIPAddressSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if embedded.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range embedded.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range embedded.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSpec_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSpec_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSpec_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		embedded.Location = &location
	}

	// no assignment for property ‘Reference’

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		embedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			embedded.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded populates our PublicIPAddressSpec_SubResourceEmbedded from the provided source PublicIPAddressSpec_SubResourceEmbedded
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) AssignPropertiesFromPublicIPAddressSpec_SubResourceEmbedded(source *alpha20201101s.PublicIPAddressSpec_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Location
	embedded.Location = genruntime.ClonePointerToString(source.Location)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku
		err := sku.AssignPropertiesFromPublicIPAddressSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Tags
	embedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded populates the provided destination PublicIPAddressSpec_SubResourceEmbedded from our PublicIPAddressSpec_SubResourceEmbedded
func (embedded *PublicIPAddressSpec_SubResourceEmbedded) AssignPropertiesToPublicIPAddressSpec_SubResourceEmbedded(destination *alpha20201101s.PublicIPAddressSpec_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation alpha20201101s.ExtendedLocation
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(embedded.Location)

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Sku
	if embedded.Sku != nil {
		var sku alpha20201101s.PublicIPAddressSku
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(embedded.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SubResource. Use v1beta20201101.SubResource instead
type SubResource struct {
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &SubResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *SubResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &SubResourceARM{}

	// Set property ‘Id’:
	if resource.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*resource.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SubResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SubResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(SubResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResourceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSubResource populates our SubResource from the provided source SubResource
func (resource *SubResource) AssignPropertiesFromSubResource(source *alpha20201101s.SubResource) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		resource.Reference = &reference
	} else {
		resource.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubResource populates the provided destination SubResource from our SubResource
func (resource *SubResource) AssignPropertiesToSubResource(destination *alpha20201101s.SubResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if resource.Reference != nil {
		reference := resource.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DdosSettings_ProtectionCoverage. Use v1beta20201101.DdosSettings_ProtectionCoverage instead
// +kubebuilder:validation:Enum={"Basic","Standard"}
type DdosSettings_ProtectionCoverage string

const (
	DdosSettings_ProtectionCoverage_Basic    = DdosSettings_ProtectionCoverage("Basic")
	DdosSettings_ProtectionCoverage_Standard = DdosSettings_ProtectionCoverage("Standard")
)

// Deprecated version of DdosSettings_ProtectionCoverage_STATUS. Use v1beta20201101.DdosSettings_ProtectionCoverage_STATUS
// instead
type DdosSettings_ProtectionCoverage_STATUS string

const (
	DdosSettings_ProtectionCoverage_Basic_STATUS    = DdosSettings_ProtectionCoverage_STATUS("Basic")
	DdosSettings_ProtectionCoverage_Standard_STATUS = DdosSettings_ProtectionCoverage_STATUS("Standard")
)

// Deprecated version of NatGatewaySku. Use v1beta20201101.NatGatewaySku instead
type NatGatewaySku struct {
	Name *NatGatewaySku_Name `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &NatGatewaySku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (gatewaySku *NatGatewaySku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if gatewaySku == nil {
		return nil, nil
	}
	result := &NatGatewaySkuARM{}

	// Set property ‘Name’:
	if gatewaySku.Name != nil {
		name := *gatewaySku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *NatGatewaySku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *NatGatewaySku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySku populates our NatGatewaySku from the provided source NatGatewaySku
func (gatewaySku *NatGatewaySku) AssignPropertiesFromNatGatewaySku(source *alpha20201101s.NatGatewaySku) error {

	// Name
	if source.Name != nil {
		name := NatGatewaySku_Name(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySku populates the provided destination NatGatewaySku from our NatGatewaySku
func (gatewaySku *NatGatewaySku) AssignPropertiesToNatGatewaySku(destination *alpha20201101s.NatGatewaySku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NatGatewaySku_STATUS. Use v1beta20201101.NatGatewaySku_STATUS instead
type NatGatewaySku_STATUS struct {
	Name *NatGatewaySku_Name_STATUS `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &NatGatewaySku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (gatewaySku *NatGatewaySku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySku_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (gatewaySku *NatGatewaySku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySku_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySku_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		gatewaySku.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySku_STATUS populates our NatGatewaySku_STATUS from the provided source NatGatewaySku_STATUS
func (gatewaySku *NatGatewaySku_STATUS) AssignPropertiesFromNatGatewaySku_STATUS(source *alpha20201101s.NatGatewaySku_STATUS) error {

	// Name
	if source.Name != nil {
		name := NatGatewaySku_Name_STATUS(*source.Name)
		gatewaySku.Name = &name
	} else {
		gatewaySku.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySku_STATUS populates the provided destination NatGatewaySku_STATUS from our NatGatewaySku_STATUS
func (gatewaySku *NatGatewaySku_STATUS) AssignPropertiesToNatGatewaySku_STATUS(destination *alpha20201101s.NatGatewaySku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if gatewaySku.Name != nil {
		name := string(*gatewaySku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Subnet_STATUS_PublicIPAddress_SubResourceEmbedded. Use v1beta20201101.Subnet_STATUS_PublicIPAddress_SubResourceEmbedded instead
type Subnet_STATUS_PublicIPAddress_SubResourceEmbedded struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_STATUS_PublicIPAddress_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Subnet_STATUS_PublicIPAddress_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_STATUS_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Subnet_STATUS_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_STATUS_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_STATUS_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnet_STATUS_PublicIPAddress_SubResourceEmbedded populates our Subnet_STATUS_PublicIPAddress_SubResourceEmbedded from the provided source Subnet_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *Subnet_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromSubnet_STATUS_PublicIPAddress_SubResourceEmbedded(source *alpha20201101s.Subnet_STATUS_PublicIPAddress_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubnet_STATUS_PublicIPAddress_SubResourceEmbedded populates the provided destination Subnet_STATUS_PublicIPAddress_SubResourceEmbedded from our Subnet_STATUS_PublicIPAddress_SubResourceEmbedded
func (embedded *Subnet_STATUS_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToSubnet_STATUS_PublicIPAddress_SubResourceEmbedded(destination *alpha20201101s.Subnet_STATUS_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NatGatewaySku_Name. Use v1beta20201101.NatGatewaySku_Name instead
// +kubebuilder:validation:Enum={"Standard"}
type NatGatewaySku_Name string

const NatGatewaySku_Name_Standard = NatGatewaySku_Name("Standard")

// Deprecated version of NatGatewaySku_Name_STATUS. Use v1beta20201101.NatGatewaySku_Name_STATUS instead
type NatGatewaySku_Name_STATUS string

const NatGatewaySku_Name_Standard_STATUS = NatGatewaySku_Name_STATUS("Standard")

func init() {
	SchemeBuilder.Register(&PublicIPAddress{}, &PublicIPAddressList{})
}
