// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetwork_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork_SpecARM, VirtualNetwork_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork_SpecARM runs a test to see if a specific instance of VirtualNetwork_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork_SpecARM(subject VirtualNetwork_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork_SpecARM instances for property testing - lazily instantiated by
// VirtualNetwork_SpecARMGenerator()
var virtualNetwork_SpecARMGenerator gopter.Gen

// VirtualNetwork_SpecARMGenerator returns a generator of VirtualNetwork_SpecARM instances for property testing.
// We first initialize virtualNetwork_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetwork_SpecARMGenerator() gopter.Gen {
	if virtualNetwork_SpecARMGenerator != nil {
		return virtualNetwork_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_SpecARM(generators)
	virtualNetwork_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetwork_SpecARM(generators)
	virtualNetwork_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_SpecARM{}), generators)

	return virtualNetwork_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetwork_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetwork_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetwork_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkPropertiesFormatARMGenerator())
}

func Test_VirtualNetworkPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPropertiesFormatARM, VirtualNetworkPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPropertiesFormatARM runs a test to see if a specific instance of VirtualNetworkPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPropertiesFormatARM(subject VirtualNetworkPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPropertiesFormatARM instances for property testing - lazily instantiated by
// VirtualNetworkPropertiesFormatARMGenerator()
var virtualNetworkPropertiesFormatARMGenerator gopter.Gen

// VirtualNetworkPropertiesFormatARMGenerator returns a generator of VirtualNetworkPropertiesFormatARM instances for property testing.
// We first initialize virtualNetworkPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPropertiesFormatARMGenerator() gopter.Gen {
	if virtualNetworkPropertiesFormatARMGenerator != nil {
		return virtualNetworkPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatARM(generators)
	virtualNetworkPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormatARM(generators)
	virtualNetworkPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormatARM{}), generators)

	return virtualNetworkPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting,
		ProvisioningState_Failed,
		ProvisioningState_Succeeded,
		ProvisioningState_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpaceARMGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunitiesARMGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResourceARMGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptionsARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeeringARMGenerator())
}

func Test_DhcpOptionsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptionsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptionsARM, DhcpOptionsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptionsARM runs a test to see if a specific instance of DhcpOptionsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptionsARM(subject DhcpOptionsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptionsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptionsARM instances for property testing - lazily instantiated by DhcpOptionsARMGenerator()
var dhcpOptionsARMGenerator gopter.Gen

// DhcpOptionsARMGenerator returns a generator of DhcpOptionsARM instances for property testing.
func DhcpOptionsARMGenerator() gopter.Gen {
	if dhcpOptionsARMGenerator != nil {
		return dhcpOptionsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptionsARM(generators)
	dhcpOptionsARMGenerator = gen.Struct(reflect.TypeOf(DhcpOptionsARM{}), generators)

	return dhcpOptionsARMGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptionsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptionsARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_VirtualNetwork_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_VirtualNetwork_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_VirtualNetwork_SubResourceEmbeddedARM, Subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_VirtualNetwork_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_VirtualNetwork_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_VirtualNetwork_SubResourceEmbeddedARM(subject Subnet_VirtualNetwork_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_VirtualNetwork_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_VirtualNetwork_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// Subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator()
var subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator gopter.Gen

// Subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator returns a generator of Subnet_VirtualNetwork_SubResourceEmbeddedARM instances for property testing.
func Subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator != nil {
		return subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_VirtualNetwork_SubResourceEmbeddedARM(generators)
	subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_VirtualNetwork_SubResourceEmbeddedARM{}), generators)

	return subnet_VirtualNetwork_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_VirtualNetwork_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_VirtualNetwork_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkBgpCommunitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkBgpCommunitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkBgpCommunitiesARM, VirtualNetworkBgpCommunitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkBgpCommunitiesARM runs a test to see if a specific instance of VirtualNetworkBgpCommunitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkBgpCommunitiesARM(subject VirtualNetworkBgpCommunitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkBgpCommunitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkBgpCommunitiesARM instances for property testing - lazily instantiated by
// VirtualNetworkBgpCommunitiesARMGenerator()
var virtualNetworkBgpCommunitiesARMGenerator gopter.Gen

// VirtualNetworkBgpCommunitiesARMGenerator returns a generator of VirtualNetworkBgpCommunitiesARM instances for property testing.
func VirtualNetworkBgpCommunitiesARMGenerator() gopter.Gen {
	if virtualNetworkBgpCommunitiesARMGenerator != nil {
		return virtualNetworkBgpCommunitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesARM(generators)
	virtualNetworkBgpCommunitiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkBgpCommunitiesARM{}), generators)

	return virtualNetworkBgpCommunitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkBgpCommunitiesARM(gens map[string]gopter.Gen) {
	gens["RegionalCommunity"] = gen.PtrOf(gen.AlphaString())
	gens["VirtualNetworkCommunity"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkPeeringARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeeringARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeeringARM, VirtualNetworkPeeringARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeeringARM runs a test to see if a specific instance of VirtualNetworkPeeringARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeeringARM(subject VirtualNetworkPeeringARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeeringARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeeringARM instances for property testing - lazily instantiated by
// VirtualNetworkPeeringARMGenerator()
var virtualNetworkPeeringARMGenerator gopter.Gen

// VirtualNetworkPeeringARMGenerator returns a generator of VirtualNetworkPeeringARM instances for property testing.
func VirtualNetworkPeeringARMGenerator() gopter.Gen {
	if virtualNetworkPeeringARMGenerator != nil {
		return virtualNetworkPeeringARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeeringARM(generators)
	virtualNetworkPeeringARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeeringARM{}), generators)

	return virtualNetworkPeeringARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeeringARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeeringARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
