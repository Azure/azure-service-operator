// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetwork_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetwork_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetwork_StatusARM, VirtualNetwork_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetwork_StatusARM runs a test to see if a specific instance of VirtualNetwork_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetwork_StatusARM(subject VirtualNetwork_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetwork_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetwork_StatusARM instances for property testing - lazily instantiated by
//VirtualNetwork_StatusARMGenerator()
var virtualNetwork_statusARMGenerator gopter.Gen

// VirtualNetwork_StatusARMGenerator returns a generator of VirtualNetwork_StatusARM instances for property testing.
// We first initialize virtualNetwork_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetwork_StatusARMGenerator() gopter.Gen {
	if virtualNetwork_statusARMGenerator != nil {
		return virtualNetwork_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_StatusARM(generators)
	virtualNetwork_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetwork_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetwork_StatusARM(generators)
	virtualNetwork_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetwork_StatusARM{}), generators)

	return virtualNetwork_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetwork_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetwork_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetwork_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetwork_StatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkPropertiesFormat_StatusARMGenerator())
}

func Test_VirtualNetworkPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPropertiesFormat_StatusARM, VirtualNetworkPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPropertiesFormat_StatusARM runs a test to see if a specific instance of VirtualNetworkPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPropertiesFormat_StatusARM(subject VirtualNetworkPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//VirtualNetworkPropertiesFormat_StatusARMGenerator()
var virtualNetworkPropertiesFormat_statusARMGenerator gopter.Gen

// VirtualNetworkPropertiesFormat_StatusARMGenerator returns a generator of VirtualNetworkPropertiesFormat_StatusARM instances for property testing.
// We first initialize virtualNetworkPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if virtualNetworkPropertiesFormat_statusARMGenerator != nil {
		return virtualNetworkPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM(generators)
	virtualNetworkPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM(generators)
	virtualNetworkPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPropertiesFormat_StatusARM{}), generators)

	return virtualNetworkPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["EnableDdosProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableVmProtection"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["AddressSpace"] = gen.PtrOf(AddressSpace_StatusARMGenerator())
	gens["BgpCommunities"] = gen.PtrOf(VirtualNetworkBgpCommunities_StatusARMGenerator())
	gens["DdosProtectionPlan"] = gen.PtrOf(SubResource_StatusARMGenerator())
	gens["DhcpOptions"] = gen.PtrOf(DhcpOptions_StatusARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_StatusARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_Status_VirtualNetwork_SubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkPeerings"] = gen.SliceOf(VirtualNetworkPeering_Status_SubResourceEmbeddedARMGenerator())
}

func Test_DhcpOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DhcpOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDhcpOptions_StatusARM, DhcpOptions_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDhcpOptions_StatusARM runs a test to see if a specific instance of DhcpOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDhcpOptions_StatusARM(subject DhcpOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DhcpOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DhcpOptions_StatusARM instances for property testing - lazily instantiated by
//DhcpOptions_StatusARMGenerator()
var dhcpOptions_statusARMGenerator gopter.Gen

// DhcpOptions_StatusARMGenerator returns a generator of DhcpOptions_StatusARM instances for property testing.
func DhcpOptions_StatusARMGenerator() gopter.Gen {
	if dhcpOptions_statusARMGenerator != nil {
		return dhcpOptions_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDhcpOptions_StatusARM(generators)
	dhcpOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(DhcpOptions_StatusARM{}), generators)

	return dhcpOptions_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDhcpOptions_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDhcpOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_VirtualNetwork_SubResourceEmbeddedARM, Subnet_Status_VirtualNetwork_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_VirtualNetwork_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_VirtualNetwork_SubResourceEmbeddedARM(subject Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by Subnet_Status_VirtualNetwork_SubResourceEmbeddedARMGenerator()
var subnet_status_virtualNetwork_subResourceEmbeddedARMGenerator gopter.Gen

// Subnet_Status_VirtualNetwork_SubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM instances for property testing.
func Subnet_Status_VirtualNetwork_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_status_virtualNetwork_subResourceEmbeddedARMGenerator != nil {
		return subnet_status_virtualNetwork_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetwork_SubResourceEmbeddedARM(generators)
	subnet_status_virtualNetwork_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM{}), generators)

	return subnet_status_virtualNetwork_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetwork_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_VirtualNetwork_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkPeering_Status_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkPeering_Status_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkPeering_Status_SubResourceEmbeddedARM, VirtualNetworkPeering_Status_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkPeering_Status_SubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkPeering_Status_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkPeering_Status_SubResourceEmbeddedARM(subject VirtualNetworkPeering_Status_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkPeering_Status_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkPeering_Status_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by VirtualNetworkPeering_Status_SubResourceEmbeddedARMGenerator()
var virtualNetworkPeering_status_subResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkPeering_Status_SubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkPeering_Status_SubResourceEmbeddedARM instances for property testing.
func VirtualNetworkPeering_Status_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkPeering_status_subResourceEmbeddedARMGenerator != nil {
		return virtualNetworkPeering_status_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkPeering_Status_SubResourceEmbeddedARM(generators)
	virtualNetworkPeering_status_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkPeering_Status_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkPeering_status_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkPeering_Status_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkPeering_Status_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
