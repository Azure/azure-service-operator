// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworks_virtualNetworkPeerings
type VirtualNetworksVirtualNetworkPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworksVirtualNetworkPeerings_Spec `json:"spec,omitempty"`
	Status            VirtualNetworkPeering_Status               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworksVirtualNetworkPeering{}

// GetConditions returns the conditions of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) GetConditions() conditions.Conditions {
	return peering.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (peering *VirtualNetworksVirtualNetworkPeering) SetConditions(conditions conditions.Conditions) {
	peering.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworksVirtualNetworkPeering{}

// ConvertFrom populates our VirtualNetworksVirtualNetworkPeering from the provided hub VirtualNetworksVirtualNetworkPeering
func (peering *VirtualNetworksVirtualNetworkPeering) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetworksVirtualNetworkPeering but received %T instead", hub)
	}

	return peering.AssignPropertiesFromVirtualNetworksVirtualNetworkPeering(source)
}

// ConvertTo populates the provided hub VirtualNetworksVirtualNetworkPeering from our VirtualNetworksVirtualNetworkPeering
func (peering *VirtualNetworksVirtualNetworkPeering) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetworksVirtualNetworkPeering but received %T instead", hub)
	}

	return peering.AssignPropertiesToVirtualNetworksVirtualNetworkPeering(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-virtualnetworksvirtualnetworkpeering,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworksvirtualnetworkpeerings,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworksvirtualnetworkpeerings.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetworksVirtualNetworkPeering{}

// Default applies defaults to the VirtualNetworksVirtualNetworkPeering resource
func (peering *VirtualNetworksVirtualNetworkPeering) Default() {
	peering.defaultImpl()
	var temp interface{} = peering
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (peering *VirtualNetworksVirtualNetworkPeering) defaultAzureName() {
	if peering.Spec.AzureName == "" {
		peering.Spec.AzureName = peering.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworksVirtualNetworkPeering resource
func (peering *VirtualNetworksVirtualNetworkPeering) defaultImpl() { peering.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetworksVirtualNetworkPeering{}

// AzureName returns the Azure name of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) AzureName() string {
	return peering.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (peering VirtualNetworksVirtualNetworkPeering) GetAPIVersion() string {
	return "2020-11-01"
}

// GetResourceKind returns the kind of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (peering *VirtualNetworksVirtualNetworkPeering) GetSpec() genruntime.ConvertibleSpec {
	return &peering.Spec
}

// GetStatus returns the status of this resource
func (peering *VirtualNetworksVirtualNetworkPeering) GetStatus() genruntime.ConvertibleStatus {
	return &peering.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
func (peering *VirtualNetworksVirtualNetworkPeering) GetType() string {
	return "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
}

// NewEmptyStatus returns a new empty (blank) status
func (peering *VirtualNetworksVirtualNetworkPeering) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &VirtualNetworkPeering_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (peering *VirtualNetworksVirtualNetworkPeering) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(peering.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  peering.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (peering *VirtualNetworksVirtualNetworkPeering) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualNetworkPeering_Status); ok {
		peering.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualNetworkPeering_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	peering.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-virtualnetworksvirtualnetworkpeering,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworksvirtualnetworkpeerings,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworksvirtualnetworkpeerings.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetworksVirtualNetworkPeering{}

// ValidateCreate validates the creation of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) ValidateCreate() error {
	validations := peering.createValidations()
	var temp interface{} = peering
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) ValidateDelete() error {
	validations := peering.deleteValidations()
	var temp interface{} = peering
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) ValidateUpdate(old runtime.Object) error {
	validations := peering.updateValidations()
	var temp interface{} = peering
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) createValidations() []func() error {
	return []func() error{peering.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (peering *VirtualNetworksVirtualNetworkPeering) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return peering.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (peering *VirtualNetworksVirtualNetworkPeering) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&peering.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualNetworksVirtualNetworkPeering populates our VirtualNetworksVirtualNetworkPeering from the provided source VirtualNetworksVirtualNetworkPeering
func (peering *VirtualNetworksVirtualNetworkPeering) AssignPropertiesFromVirtualNetworksVirtualNetworkPeering(source *v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering) error {

	// ObjectMeta
	peering.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworksVirtualNetworkPeerings_Spec
	err := spec.AssignPropertiesFromVirtualNetworksVirtualNetworkPeeringsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworksVirtualNetworkPeeringsSpec() to populate field Spec")
	}
	peering.Spec = spec

	// Status
	var status VirtualNetworkPeering_Status
	err = status.AssignPropertiesFromVirtualNetworkPeeringStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkPeeringStatus() to populate field Status")
	}
	peering.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksVirtualNetworkPeering populates the provided destination VirtualNetworksVirtualNetworkPeering from our VirtualNetworksVirtualNetworkPeering
func (peering *VirtualNetworksVirtualNetworkPeering) AssignPropertiesToVirtualNetworksVirtualNetworkPeering(destination *v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeering) error {

	// ObjectMeta
	destination.ObjectMeta = *peering.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec
	err := peering.Spec.AssignPropertiesToVirtualNetworksVirtualNetworkPeeringsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworksVirtualNetworkPeeringsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.VirtualNetworkPeering_Status
	err = peering.Status.AssignPropertiesToVirtualNetworkPeeringStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkPeeringStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (peering *VirtualNetworksVirtualNetworkPeering) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: peering.Spec.OriginalVersion(),
		Kind:    "VirtualNetworksVirtualNetworkPeering",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/virtualNetworks_virtualNetworkPeerings
type VirtualNetworksVirtualNetworkPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworksVirtualNetworkPeering `json:"items"`
}

type VirtualNetworkPeering_Status struct {
	//AllowForwardedTraffic: Whether the forwarded traffic from the VMs in the local virtual network will be
	//allowed/disallowed in remote virtual network.
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`

	//AllowGatewayTransit: If gateway links can be used in remote virtual networking to link to this virtual network.
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`

	//AllowVirtualNetworkAccess: Whether the VMs in the local virtual network space would be able to access the VMs in remote
	//virtual network space.
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DoNotVerifyRemoteGateways: If we need to verify the provisioning state of the remote gateway.
	DoNotVerifyRemoteGateways *bool `json:"doNotVerifyRemoteGateways,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PeeringState: The status of the virtual network peering.
	PeeringState *VirtualNetworkPeeringPropertiesFormatStatusPeeringState `json:"peeringState,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network peering resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//RemoteAddressSpace: The reference to the remote virtual network address space.
	RemoteAddressSpace *AddressSpace_Status `json:"remoteAddressSpace,omitempty"`

	//RemoteBgpCommunities: The reference to the remote virtual network's Bgp Communities.
	RemoteBgpCommunities *VirtualNetworkBgpCommunities_Status `json:"remoteBgpCommunities,omitempty"`

	//RemoteVirtualNetwork: The reference to the remote virtual network. The remote virtual network can be in the same or
	//different region (preview). See here to register for the preview and learn more
	//(https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
	RemoteVirtualNetwork *SubResource_Status `json:"remoteVirtualNetwork,omitempty"`

	//ResourceGuid: The resourceGuid property of the Virtual Network peering resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//UseRemoteGateways: If remote gateways can be used on this virtual network. If the flag is set to true, and
	//allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for
	//transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a
	//gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetworkPeering_Status{}

// ConvertStatusFrom populates our VirtualNetworkPeering_Status from the provided source
func (peering *VirtualNetworkPeering_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworkPeering_Status)
	if ok {
		// Populate our instance from source
		return peering.AssignPropertiesFromVirtualNetworkPeeringStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworkPeering_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = peering.AssignPropertiesFromVirtualNetworkPeeringStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetworkPeering_Status
func (peering *VirtualNetworkPeering_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworkPeering_Status)
	if ok {
		// Populate destination from our instance
		return peering.AssignPropertiesToVirtualNetworkPeeringStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworkPeering_Status{}
	err := peering.AssignPropertiesToVirtualNetworkPeeringStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetworkPeering_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (peering *VirtualNetworkPeering_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkPeering_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (peering *VirtualNetworkPeering_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkPeering_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkPeering_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowForwardedTraffic’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowForwardedTraffic != nil {
			allowForwardedTraffic := *typedInput.Properties.AllowForwardedTraffic
			peering.AllowForwardedTraffic = &allowForwardedTraffic
		}
	}

	// Set property ‘AllowGatewayTransit’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowGatewayTransit != nil {
			allowGatewayTransit := *typedInput.Properties.AllowGatewayTransit
			peering.AllowGatewayTransit = &allowGatewayTransit
		}
	}

	// Set property ‘AllowVirtualNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowVirtualNetworkAccess != nil {
			allowVirtualNetworkAccess := *typedInput.Properties.AllowVirtualNetworkAccess
			peering.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DoNotVerifyRemoteGateways’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DoNotVerifyRemoteGateways != nil {
			doNotVerifyRemoteGateways := *typedInput.Properties.DoNotVerifyRemoteGateways
			peering.DoNotVerifyRemoteGateways = &doNotVerifyRemoteGateways
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		peering.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		peering.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		peering.Name = &name
	}

	// Set property ‘PeeringState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PeeringState != nil {
			peeringState := *typedInput.Properties.PeeringState
			peering.PeeringState = &peeringState
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			peering.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RemoteAddressSpace’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemoteAddressSpace != nil {
			var remoteAddressSpace1 AddressSpace_Status
			err := remoteAddressSpace1.PopulateFromARM(owner, *typedInput.Properties.RemoteAddressSpace)
			if err != nil {
				return err
			}
			remoteAddressSpace := remoteAddressSpace1
			peering.RemoteAddressSpace = &remoteAddressSpace
		}
	}

	// Set property ‘RemoteBgpCommunities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemoteBgpCommunities != nil {
			var remoteBgpCommunities1 VirtualNetworkBgpCommunities_Status
			err := remoteBgpCommunities1.PopulateFromARM(owner, *typedInput.Properties.RemoteBgpCommunities)
			if err != nil {
				return err
			}
			remoteBgpCommunities := remoteBgpCommunities1
			peering.RemoteBgpCommunities = &remoteBgpCommunities
		}
	}

	// Set property ‘RemoteVirtualNetwork’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RemoteVirtualNetwork != nil {
			var remoteVirtualNetwork1 SubResource_Status
			err := remoteVirtualNetwork1.PopulateFromARM(owner, *typedInput.Properties.RemoteVirtualNetwork)
			if err != nil {
				return err
			}
			remoteVirtualNetwork := remoteVirtualNetwork1
			peering.RemoteVirtualNetwork = &remoteVirtualNetwork
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			peering.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		peering.Type = &typeVar
	}

	// Set property ‘UseRemoteGateways’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UseRemoteGateways != nil {
			useRemoteGateways := *typedInput.Properties.UseRemoteGateways
			peering.UseRemoteGateways = &useRemoteGateways
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkPeeringStatus populates our VirtualNetworkPeering_Status from the provided source VirtualNetworkPeering_Status
func (peering *VirtualNetworkPeering_Status) AssignPropertiesFromVirtualNetworkPeeringStatus(source *v1alpha1api20201101storage.VirtualNetworkPeering_Status) error {

	// AllowForwardedTraffic
	if source.AllowForwardedTraffic != nil {
		allowForwardedTraffic := *source.AllowForwardedTraffic
		peering.AllowForwardedTraffic = &allowForwardedTraffic
	} else {
		peering.AllowForwardedTraffic = nil
	}

	// AllowGatewayTransit
	if source.AllowGatewayTransit != nil {
		allowGatewayTransit := *source.AllowGatewayTransit
		peering.AllowGatewayTransit = &allowGatewayTransit
	} else {
		peering.AllowGatewayTransit = nil
	}

	// AllowVirtualNetworkAccess
	if source.AllowVirtualNetworkAccess != nil {
		allowVirtualNetworkAccess := *source.AllowVirtualNetworkAccess
		peering.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
	} else {
		peering.AllowVirtualNetworkAccess = nil
	}

	// Conditions
	peering.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DoNotVerifyRemoteGateways
	if source.DoNotVerifyRemoteGateways != nil {
		doNotVerifyRemoteGateway := *source.DoNotVerifyRemoteGateways
		peering.DoNotVerifyRemoteGateways = &doNotVerifyRemoteGateway
	} else {
		peering.DoNotVerifyRemoteGateways = nil
	}

	// Etag
	peering.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	peering.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	peering.Name = genruntime.ClonePointerToString(source.Name)

	// PeeringState
	if source.PeeringState != nil {
		peeringState := VirtualNetworkPeeringPropertiesFormatStatusPeeringState(*source.PeeringState)
		peering.PeeringState = &peeringState
	} else {
		peering.PeeringState = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		peering.ProvisioningState = &provisioningState
	} else {
		peering.ProvisioningState = nil
	}

	// RemoteAddressSpace
	if source.RemoteAddressSpace != nil {
		var remoteAddressSpace AddressSpace_Status
		err := remoteAddressSpace.AssignPropertiesFromAddressSpaceStatus(source.RemoteAddressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpaceStatus() to populate field RemoteAddressSpace")
		}
		peering.RemoteAddressSpace = &remoteAddressSpace
	} else {
		peering.RemoteAddressSpace = nil
	}

	// RemoteBgpCommunities
	if source.RemoteBgpCommunities != nil {
		var remoteBgpCommunity VirtualNetworkBgpCommunities_Status
		err := remoteBgpCommunity.AssignPropertiesFromVirtualNetworkBgpCommunitiesStatus(source.RemoteBgpCommunities)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkBgpCommunitiesStatus() to populate field RemoteBgpCommunities")
		}
		peering.RemoteBgpCommunities = &remoteBgpCommunity
	} else {
		peering.RemoteBgpCommunities = nil
	}

	// RemoteVirtualNetwork
	if source.RemoteVirtualNetwork != nil {
		var remoteVirtualNetwork SubResource_Status
		err := remoteVirtualNetwork.AssignPropertiesFromSubResourceStatus(source.RemoteVirtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResourceStatus() to populate field RemoteVirtualNetwork")
		}
		peering.RemoteVirtualNetwork = &remoteVirtualNetwork
	} else {
		peering.RemoteVirtualNetwork = nil
	}

	// ResourceGuid
	peering.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Type
	peering.Type = genruntime.ClonePointerToString(source.Type)

	// UseRemoteGateways
	if source.UseRemoteGateways != nil {
		useRemoteGateway := *source.UseRemoteGateways
		peering.UseRemoteGateways = &useRemoteGateway
	} else {
		peering.UseRemoteGateways = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkPeeringStatus populates the provided destination VirtualNetworkPeering_Status from our VirtualNetworkPeering_Status
func (peering *VirtualNetworkPeering_Status) AssignPropertiesToVirtualNetworkPeeringStatus(destination *v1alpha1api20201101storage.VirtualNetworkPeering_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowForwardedTraffic
	if peering.AllowForwardedTraffic != nil {
		allowForwardedTraffic := *peering.AllowForwardedTraffic
		destination.AllowForwardedTraffic = &allowForwardedTraffic
	} else {
		destination.AllowForwardedTraffic = nil
	}

	// AllowGatewayTransit
	if peering.AllowGatewayTransit != nil {
		allowGatewayTransit := *peering.AllowGatewayTransit
		destination.AllowGatewayTransit = &allowGatewayTransit
	} else {
		destination.AllowGatewayTransit = nil
	}

	// AllowVirtualNetworkAccess
	if peering.AllowVirtualNetworkAccess != nil {
		allowVirtualNetworkAccess := *peering.AllowVirtualNetworkAccess
		destination.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
	} else {
		destination.AllowVirtualNetworkAccess = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(peering.Conditions)

	// DoNotVerifyRemoteGateways
	if peering.DoNotVerifyRemoteGateways != nil {
		doNotVerifyRemoteGateway := *peering.DoNotVerifyRemoteGateways
		destination.DoNotVerifyRemoteGateways = &doNotVerifyRemoteGateway
	} else {
		destination.DoNotVerifyRemoteGateways = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(peering.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(peering.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(peering.Name)

	// PeeringState
	if peering.PeeringState != nil {
		peeringState := string(*peering.PeeringState)
		destination.PeeringState = &peeringState
	} else {
		destination.PeeringState = nil
	}

	// ProvisioningState
	if peering.ProvisioningState != nil {
		provisioningState := string(*peering.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RemoteAddressSpace
	if peering.RemoteAddressSpace != nil {
		var remoteAddressSpace v1alpha1api20201101storage.AddressSpace_Status
		err := peering.RemoteAddressSpace.AssignPropertiesToAddressSpaceStatus(&remoteAddressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpaceStatus() to populate field RemoteAddressSpace")
		}
		destination.RemoteAddressSpace = &remoteAddressSpace
	} else {
		destination.RemoteAddressSpace = nil
	}

	// RemoteBgpCommunities
	if peering.RemoteBgpCommunities != nil {
		var remoteBgpCommunity v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status
		err := peering.RemoteBgpCommunities.AssignPropertiesToVirtualNetworkBgpCommunitiesStatus(&remoteBgpCommunity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkBgpCommunitiesStatus() to populate field RemoteBgpCommunities")
		}
		destination.RemoteBgpCommunities = &remoteBgpCommunity
	} else {
		destination.RemoteBgpCommunities = nil
	}

	// RemoteVirtualNetwork
	if peering.RemoteVirtualNetwork != nil {
		var remoteVirtualNetwork v1alpha1api20201101storage.SubResource_Status
		err := peering.RemoteVirtualNetwork.AssignPropertiesToSubResourceStatus(&remoteVirtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResourceStatus() to populate field RemoteVirtualNetwork")
		}
		destination.RemoteVirtualNetwork = &remoteVirtualNetwork
	} else {
		destination.RemoteVirtualNetwork = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(peering.ResourceGuid)

	// Type
	destination.Type = genruntime.ClonePointerToString(peering.Type)

	// UseRemoteGateways
	if peering.UseRemoteGateways != nil {
		useRemoteGateway := *peering.UseRemoteGateways
		destination.UseRemoteGateways = &useRemoteGateway
	} else {
		destination.UseRemoteGateways = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-11-01"}
type VirtualNetworksVirtualNetworkPeeringsSpecAPIVersion string

const VirtualNetworksVirtualNetworkPeeringsSpecAPIVersion20201101 = VirtualNetworksVirtualNetworkPeeringsSpecAPIVersion("2020-11-01")

type VirtualNetworksVirtualNetworkPeerings_Spec struct {
	//AllowForwardedTraffic: Whether the forwarded traffic from the VMs in the local virtual network will be
	//allowed/disallowed in remote virtual network.
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`

	//AllowGatewayTransit: If gateway links can be used in remote virtual networking to link to this virtual network.
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`

	//AllowVirtualNetworkAccess: Whether the VMs in the local virtual network space would be able to access the VMs in remote
	//virtual network space.
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	//doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"network.azure.com" json:"owner" kind:"VirtualNetwork"`

	//PeeringState: The status of the virtual network peering.
	PeeringState *VirtualNetworkPeeringPropertiesFormatPeeringState `json:"peeringState,omitempty"`

	//RemoteAddressSpace: The reference to the remote virtual network address space.
	RemoteAddressSpace *AddressSpace `json:"remoteAddressSpace,omitempty"`

	//RemoteBgpCommunities: The reference to the remote virtual network's Bgp Communities.
	RemoteBgpCommunities *VirtualNetworkBgpCommunities `json:"remoteBgpCommunities,omitempty"`

	// +kubebuilder:validation:Required
	//RemoteVirtualNetwork: The reference to the remote virtual network. The remote virtual network can be in the same or
	//different region (preview). See here to register for the preview and learn more
	//(https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
	RemoteVirtualNetwork SubResource `json:"remoteVirtualNetwork"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//UseRemoteGateways: If remote gateways can be used on this virtual network. If the flag is set to true, and
	//allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for
	//transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a
	//gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworksVirtualNetworkPeerings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if peerings == nil {
		return nil, nil
	}
	var result VirtualNetworksVirtualNetworkPeerings_SpecARM

	// Set property ‘Location’:
	if peerings.Location != nil {
		location := *peerings.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if peerings.AllowForwardedTraffic != nil {
		allowForwardedTraffic := *peerings.AllowForwardedTraffic
		result.Properties.AllowForwardedTraffic = &allowForwardedTraffic
	}
	if peerings.AllowGatewayTransit != nil {
		allowGatewayTransit := *peerings.AllowGatewayTransit
		result.Properties.AllowGatewayTransit = &allowGatewayTransit
	}
	if peerings.AllowVirtualNetworkAccess != nil {
		allowVirtualNetworkAccess := *peerings.AllowVirtualNetworkAccess
		result.Properties.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
	}
	if peerings.PeeringState != nil {
		peeringState := *peerings.PeeringState
		result.Properties.PeeringState = &peeringState
	}
	if peerings.RemoteAddressSpace != nil {
		remoteAddressSpaceARM, err := (*peerings.RemoteAddressSpace).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		remoteAddressSpace := remoteAddressSpaceARM.(AddressSpaceARM)
		result.Properties.RemoteAddressSpace = &remoteAddressSpace
	}
	if peerings.RemoteBgpCommunities != nil {
		remoteBgpCommunitiesARM, err := (*peerings.RemoteBgpCommunities).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		remoteBgpCommunities := remoteBgpCommunitiesARM.(VirtualNetworkBgpCommunitiesARM)
		result.Properties.RemoteBgpCommunities = &remoteBgpCommunities
	}
	remoteVirtualNetworkARM, err := peerings.RemoteVirtualNetwork.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.RemoteVirtualNetwork = remoteVirtualNetworkARM.(SubResourceARM)
	if peerings.UseRemoteGateways != nil {
		useRemoteGateways := *peerings.UseRemoteGateways
		result.Properties.UseRemoteGateways = &useRemoteGateways
	}

	// Set property ‘Tags’:
	if peerings.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range peerings.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworksVirtualNetworkPeerings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworksVirtualNetworkPeerings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworksVirtualNetworkPeerings_SpecARM, got %T", armInput)
	}

	// Set property ‘AllowForwardedTraffic’:
	// copying flattened property:
	if typedInput.Properties.AllowForwardedTraffic != nil {
		allowForwardedTraffic := *typedInput.Properties.AllowForwardedTraffic
		peerings.AllowForwardedTraffic = &allowForwardedTraffic
	}

	// Set property ‘AllowGatewayTransit’:
	// copying flattened property:
	if typedInput.Properties.AllowGatewayTransit != nil {
		allowGatewayTransit := *typedInput.Properties.AllowGatewayTransit
		peerings.AllowGatewayTransit = &allowGatewayTransit
	}

	// Set property ‘AllowVirtualNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.AllowVirtualNetworkAccess != nil {
		allowVirtualNetworkAccess := *typedInput.Properties.AllowVirtualNetworkAccess
		peerings.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
	}

	// Set property ‘AzureName’:
	peerings.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		peerings.Location = &location
	}

	// Set property ‘Owner’:
	peerings.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PeeringState’:
	// copying flattened property:
	if typedInput.Properties.PeeringState != nil {
		peeringState := *typedInput.Properties.PeeringState
		peerings.PeeringState = &peeringState
	}

	// Set property ‘RemoteAddressSpace’:
	// copying flattened property:
	if typedInput.Properties.RemoteAddressSpace != nil {
		var remoteAddressSpace1 AddressSpace
		err := remoteAddressSpace1.PopulateFromARM(owner, *typedInput.Properties.RemoteAddressSpace)
		if err != nil {
			return err
		}
		remoteAddressSpace := remoteAddressSpace1
		peerings.RemoteAddressSpace = &remoteAddressSpace
	}

	// Set property ‘RemoteBgpCommunities’:
	// copying flattened property:
	if typedInput.Properties.RemoteBgpCommunities != nil {
		var remoteBgpCommunities1 VirtualNetworkBgpCommunities
		err := remoteBgpCommunities1.PopulateFromARM(owner, *typedInput.Properties.RemoteBgpCommunities)
		if err != nil {
			return err
		}
		remoteBgpCommunities := remoteBgpCommunities1
		peerings.RemoteBgpCommunities = &remoteBgpCommunities
	}

	// Set property ‘RemoteVirtualNetwork’:
	// copying flattened property:
	var remoteVirtualNetwork SubResource
	err := remoteVirtualNetwork.PopulateFromARM(owner, typedInput.Properties.RemoteVirtualNetwork)
	if err != nil {
		return err
	}
	peerings.RemoteVirtualNetwork = remoteVirtualNetwork

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		peerings.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			peerings.Tags[key] = value
		}
	}

	// Set property ‘UseRemoteGateways’:
	// copying flattened property:
	if typedInput.Properties.UseRemoteGateways != nil {
		useRemoteGateways := *typedInput.Properties.UseRemoteGateways
		peerings.UseRemoteGateways = &useRemoteGateways
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworksVirtualNetworkPeerings_Spec{}

// ConvertSpecFrom populates our VirtualNetworksVirtualNetworkPeerings_Spec from the provided source
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec)
	if ok {
		// Populate our instance from source
		return peerings.AssignPropertiesFromVirtualNetworksVirtualNetworkPeeringsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = peerings.AssignPropertiesFromVirtualNetworksVirtualNetworkPeeringsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworksVirtualNetworkPeerings_Spec
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec)
	if ok {
		// Populate destination from our instance
		return peerings.AssignPropertiesToVirtualNetworksVirtualNetworkPeeringsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec{}
	err := peerings.AssignPropertiesToVirtualNetworksVirtualNetworkPeeringsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworksVirtualNetworkPeeringsSpec populates our VirtualNetworksVirtualNetworkPeerings_Spec from the provided source VirtualNetworksVirtualNetworkPeerings_Spec
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) AssignPropertiesFromVirtualNetworksVirtualNetworkPeeringsSpec(source *v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec) error {

	// AllowForwardedTraffic
	if source.AllowForwardedTraffic != nil {
		allowForwardedTraffic := *source.AllowForwardedTraffic
		peerings.AllowForwardedTraffic = &allowForwardedTraffic
	} else {
		peerings.AllowForwardedTraffic = nil
	}

	// AllowGatewayTransit
	if source.AllowGatewayTransit != nil {
		allowGatewayTransit := *source.AllowGatewayTransit
		peerings.AllowGatewayTransit = &allowGatewayTransit
	} else {
		peerings.AllowGatewayTransit = nil
	}

	// AllowVirtualNetworkAccess
	if source.AllowVirtualNetworkAccess != nil {
		allowVirtualNetworkAccess := *source.AllowVirtualNetworkAccess
		peerings.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
	} else {
		peerings.AllowVirtualNetworkAccess = nil
	}

	// AzureName
	peerings.AzureName = source.AzureName

	// Location
	peerings.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	peerings.Owner = source.Owner.Copy()

	// PeeringState
	if source.PeeringState != nil {
		peeringState := VirtualNetworkPeeringPropertiesFormatPeeringState(*source.PeeringState)
		peerings.PeeringState = &peeringState
	} else {
		peerings.PeeringState = nil
	}

	// RemoteAddressSpace
	if source.RemoteAddressSpace != nil {
		var remoteAddressSpace AddressSpace
		err := remoteAddressSpace.AssignPropertiesFromAddressSpace(source.RemoteAddressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace() to populate field RemoteAddressSpace")
		}
		peerings.RemoteAddressSpace = &remoteAddressSpace
	} else {
		peerings.RemoteAddressSpace = nil
	}

	// RemoteBgpCommunities
	if source.RemoteBgpCommunities != nil {
		var remoteBgpCommunity VirtualNetworkBgpCommunities
		err := remoteBgpCommunity.AssignPropertiesFromVirtualNetworkBgpCommunities(source.RemoteBgpCommunities)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkBgpCommunities() to populate field RemoteBgpCommunities")
		}
		peerings.RemoteBgpCommunities = &remoteBgpCommunity
	} else {
		peerings.RemoteBgpCommunities = nil
	}

	// RemoteVirtualNetwork
	if source.RemoteVirtualNetwork != nil {
		var remoteVirtualNetwork SubResource
		err := remoteVirtualNetwork.AssignPropertiesFromSubResource(source.RemoteVirtualNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field RemoteVirtualNetwork")
		}
		peerings.RemoteVirtualNetwork = remoteVirtualNetwork
	} else {
		peerings.RemoteVirtualNetwork = SubResource{}
	}

	// Tags
	peerings.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// UseRemoteGateways
	if source.UseRemoteGateways != nil {
		useRemoteGateway := *source.UseRemoteGateways
		peerings.UseRemoteGateways = &useRemoteGateway
	} else {
		peerings.UseRemoteGateways = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksVirtualNetworkPeeringsSpec populates the provided destination VirtualNetworksVirtualNetworkPeerings_Spec from our VirtualNetworksVirtualNetworkPeerings_Spec
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) AssignPropertiesToVirtualNetworksVirtualNetworkPeeringsSpec(destination *v1alpha1api20201101storage.VirtualNetworksVirtualNetworkPeerings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowForwardedTraffic
	if peerings.AllowForwardedTraffic != nil {
		allowForwardedTraffic := *peerings.AllowForwardedTraffic
		destination.AllowForwardedTraffic = &allowForwardedTraffic
	} else {
		destination.AllowForwardedTraffic = nil
	}

	// AllowGatewayTransit
	if peerings.AllowGatewayTransit != nil {
		allowGatewayTransit := *peerings.AllowGatewayTransit
		destination.AllowGatewayTransit = &allowGatewayTransit
	} else {
		destination.AllowGatewayTransit = nil
	}

	// AllowVirtualNetworkAccess
	if peerings.AllowVirtualNetworkAccess != nil {
		allowVirtualNetworkAccess := *peerings.AllowVirtualNetworkAccess
		destination.AllowVirtualNetworkAccess = &allowVirtualNetworkAccess
	} else {
		destination.AllowVirtualNetworkAccess = nil
	}

	// AzureName
	destination.AzureName = peerings.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(peerings.Location)

	// OriginalVersion
	destination.OriginalVersion = peerings.OriginalVersion()

	// Owner
	destination.Owner = peerings.Owner.Copy()

	// PeeringState
	if peerings.PeeringState != nil {
		peeringState := string(*peerings.PeeringState)
		destination.PeeringState = &peeringState
	} else {
		destination.PeeringState = nil
	}

	// RemoteAddressSpace
	if peerings.RemoteAddressSpace != nil {
		var remoteAddressSpace v1alpha1api20201101storage.AddressSpace
		err := peerings.RemoteAddressSpace.AssignPropertiesToAddressSpace(&remoteAddressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace() to populate field RemoteAddressSpace")
		}
		destination.RemoteAddressSpace = &remoteAddressSpace
	} else {
		destination.RemoteAddressSpace = nil
	}

	// RemoteBgpCommunities
	if peerings.RemoteBgpCommunities != nil {
		var remoteBgpCommunity v1alpha1api20201101storage.VirtualNetworkBgpCommunities
		err := peerings.RemoteBgpCommunities.AssignPropertiesToVirtualNetworkBgpCommunities(&remoteBgpCommunity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkBgpCommunities() to populate field RemoteBgpCommunities")
		}
		destination.RemoteBgpCommunities = &remoteBgpCommunity
	} else {
		destination.RemoteBgpCommunities = nil
	}

	// RemoteVirtualNetwork
	var remoteVirtualNetwork v1alpha1api20201101storage.SubResource
	err := peerings.RemoteVirtualNetwork.AssignPropertiesToSubResource(&remoteVirtualNetwork)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field RemoteVirtualNetwork")
	}
	destination.RemoteVirtualNetwork = &remoteVirtualNetwork

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(peerings.Tags)

	// UseRemoteGateways
	if peerings.UseRemoteGateways != nil {
		useRemoteGateway := *peerings.UseRemoteGateways
		destination.UseRemoteGateways = &useRemoteGateway
	} else {
		destination.UseRemoteGateways = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (peerings *VirtualNetworksVirtualNetworkPeerings_Spec) SetAzureName(azureName string) {
	peerings.AzureName = azureName
}

// +kubebuilder:validation:Enum={"Connected","Disconnected","Initiated"}
type VirtualNetworkPeeringPropertiesFormatPeeringState string

const (
	VirtualNetworkPeeringPropertiesFormatPeeringStateConnected    = VirtualNetworkPeeringPropertiesFormatPeeringState("Connected")
	VirtualNetworkPeeringPropertiesFormatPeeringStateDisconnected = VirtualNetworkPeeringPropertiesFormatPeeringState("Disconnected")
	VirtualNetworkPeeringPropertiesFormatPeeringStateInitiated    = VirtualNetworkPeeringPropertiesFormatPeeringState("Initiated")
)

func init() {
	SchemeBuilder.Register(&VirtualNetworksVirtualNetworkPeering{}, &VirtualNetworksVirtualNetworkPeeringList{})
}
