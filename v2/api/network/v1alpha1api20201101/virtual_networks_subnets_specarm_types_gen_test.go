// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworksSubnets_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworksSubnets_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworksSubnetsSPECARM, VirtualNetworksSubnetsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworksSubnetsSPECARM runs a test to see if a specific instance of VirtualNetworksSubnets_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworksSubnetsSPECARM(subject VirtualNetworksSubnets_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworksSubnets_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworksSubnets_SPECARM instances for property testing - lazily instantiated by
//VirtualNetworksSubnetsSPECARMGenerator()
var virtualNetworksSubnetsSPECARMGenerator gopter.Gen

// VirtualNetworksSubnetsSPECARMGenerator returns a generator of VirtualNetworksSubnets_SPECARM instances for property testing.
// We first initialize virtualNetworksSubnetsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworksSubnetsSPECARMGenerator() gopter.Gen {
	if virtualNetworksSubnetsSPECARMGenerator != nil {
		return virtualNetworksSubnetsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSubnetsSPECARM(generators)
	virtualNetworksSubnetsSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnets_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSubnetsSPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworksSubnetsSPECARM(generators)
	virtualNetworksSubnetsSPECARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnets_SPECARM{}), generators)

	return virtualNetworksSubnetsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworksSubnetsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworksSubnetsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworksSubnetsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworksSubnetsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormatSpecARMGenerator())
}

func Test_SubnetPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormatSpecARM, SubnetPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormatSpecARM runs a test to see if a specific instance of SubnetPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormatSpecARM(subject SubnetPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubnetPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubnetPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//SubnetPropertiesFormatSpecARMGenerator()
var subnetPropertiesFormatSpecARMGenerator gopter.Gen

// SubnetPropertiesFormatSpecARMGenerator returns a generator of SubnetPropertiesFormat_SpecARM instances for property testing.
// We first initialize subnetPropertiesFormatSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormatSpecARMGenerator() gopter.Gen {
	if subnetPropertiesFormatSpecARMGenerator != nil {
		return subnetPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSpecARM(generators)
	subnetPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSpecARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormatSpecARM(generators)
	subnetPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_SpecARM{}), generators)

	return subnetPropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormatSpecPrivateEndpointNetworkPoliciesDisabled, SubnetPropertiesFormatSpecPrivateEndpointNetworkPoliciesEnabled))
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormatSpecPrivateLinkServiceNetworkPoliciesDisabled, SubnetPropertiesFormatSpecPrivateLinkServiceNetworkPoliciesEnabled))
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfigurationSpecARMGenerator())
	gens["Delegations"] = gen.SliceOf(DelegationSpecARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceSpecARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTableSpecARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicySpecARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatSpecARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationSpecARM, ApplicationGatewayIPConfigurationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationSpecARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationSpecARM(subject ApplicationGatewayIPConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_SpecARM instances for property testing - lazily instantiated by
//ApplicationGatewayIPConfigurationSpecARMGenerator()
var applicationGatewayIPConfigurationSpecARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationSpecARMGenerator returns a generator of ApplicationGatewayIPConfiguration_SpecARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationSpecARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationSpecARMGenerator != nil {
		return applicationGatewayIPConfigurationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM(generators)
	applicationGatewayIPConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM(generators)
	applicationGatewayIPConfigurationSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_SpecARM{}), generators)

	return applicationGatewayIPConfigurationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator())
}

func Test_Delegation_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegationSpecARM, DelegationSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegationSpecARM runs a test to see if a specific instance of Delegation_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegationSpecARM(subject Delegation_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_SpecARM instances for property testing - lazily instantiated by DelegationSpecARMGenerator()
var delegationSpecARMGenerator gopter.Gen

// DelegationSpecARMGenerator returns a generator of Delegation_SpecARM instances for property testing.
// We first initialize delegationSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DelegationSpecARMGenerator() gopter.Gen {
	if delegationSpecARMGenerator != nil {
		return delegationSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationSpecARM(generators)
	delegationSpecARMGenerator = gen.Struct(reflect.TypeOf(Delegation_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationSpecARM(generators)
	AddRelatedPropertyGeneratorsForDelegationSpecARM(generators)
	delegationSpecARMGenerator = gen.Struct(reflect.TypeOf(Delegation_SpecARM{}), generators)

	return delegationSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegationSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegationSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegationSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegationSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormatSpecARMGenerator())
}

func Test_NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM, NetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by NetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_RouteTable_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableSpecARM, RouteTableSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableSpecARM runs a test to see if a specific instance of RouteTable_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableSpecARM(subject RouteTable_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_SpecARM instances for property testing - lazily instantiated by RouteTableSpecARMGenerator()
var routeTableSpecARMGenerator gopter.Gen

// RouteTableSpecARMGenerator returns a generator of RouteTable_SpecARM instances for property testing.
// We first initialize routeTableSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTableSpecARMGenerator() gopter.Gen {
	if routeTableSpecARMGenerator != nil {
		return routeTableSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSpecARM(generators)
	routeTableSpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTableSpecARM(generators)
	routeTableSpecARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_SpecARM{}), generators)

	return routeTableSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTableSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTableSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_ServiceEndpointPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicySpecARM, ServiceEndpointPolicySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicySpecARM runs a test to see if a specific instance of ServiceEndpointPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicySpecARM(subject ServiceEndpointPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_SpecARM instances for property testing - lazily instantiated by
//ServiceEndpointPolicySpecARMGenerator()
var serviceEndpointPolicySpecARMGenerator gopter.Gen

// ServiceEndpointPolicySpecARMGenerator returns a generator of ServiceEndpointPolicy_SpecARM instances for property testing.
// We first initialize serviceEndpointPolicySpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicySpecARMGenerator() gopter.Gen {
	if serviceEndpointPolicySpecARMGenerator != nil {
		return serviceEndpointPolicySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM(generators)
	serviceEndpointPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicySpecARM(generators)
	serviceEndpointPolicySpecARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_SpecARM{}), generators)

	return serviceEndpointPolicySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicySpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicySpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicySpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_ServiceEndpointPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormatSpecARM, ServiceEndpointPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormatSpecARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormatSpecARM(subject ServiceEndpointPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//ServiceEndpointPropertiesFormatSpecARMGenerator()
var serviceEndpointPropertiesFormatSpecARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormatSpecARMGenerator returns a generator of ServiceEndpointPropertiesFormat_SpecARM instances for property testing.
func ServiceEndpointPropertiesFormatSpecARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormatSpecARMGenerator != nil {
		return serviceEndpointPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatSpecARM(generators)
	serviceEndpointPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_SpecARM{}), generators)

	return serviceEndpointPropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatSpecARM, ApplicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatSpecARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatSpecARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing - lazily
//instantiated by ApplicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing.
func ApplicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSpecARM(generators)
	applicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormatSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResourceSpecARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM, NetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//NetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var networkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	networkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SecurityRules"] = gen.SliceOf(SecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM, RouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by RouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// RouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return routeTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablePropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Routes"] = gen.SliceOf(RouteSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_ServiceDelegationPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormatSpecARM, ServiceDelegationPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormatSpecARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormatSpecARM(subject ServiceDelegationPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//ServiceDelegationPropertiesFormatSpecARMGenerator()
var serviceDelegationPropertiesFormatSpecARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormatSpecARMGenerator returns a generator of ServiceDelegationPropertiesFormat_SpecARM instances for property testing.
func ServiceDelegationPropertiesFormatSpecARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormatSpecARMGenerator != nil {
		return serviceDelegationPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatSpecARM(generators)
	serviceDelegationPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_SpecARM{}), generators)

	return serviceDelegationPropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM, ServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//ServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var serviceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	serviceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormatSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ServiceEndpointPolicyDefinitions"] = gen.SliceOf(ServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteSpecVirtualNetworksSubnetSubResourceEmbeddedARM, RouteSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by RouteSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var routeSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// RouteSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func RouteSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return routeSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	routeSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return routeSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARM, SecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var securityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// SecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func SecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if securityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return securityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	securityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return securityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRuleSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARM, ServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARM(subject ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by
//ServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var serviceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	serviceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinitionSpecVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
