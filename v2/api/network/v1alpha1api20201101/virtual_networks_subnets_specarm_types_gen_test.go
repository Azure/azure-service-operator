// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworksSubnets_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworksSubnets_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworksSubnets_SPECARM, VirtualNetworksSubnets_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworksSubnets_SPECARM runs a test to see if a specific instance of VirtualNetworksSubnets_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworksSubnets_SPECARM(subject VirtualNetworksSubnets_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworksSubnets_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworksSubnets_SPECARM instances for property testing - lazily instantiated by
//VirtualNetworksSubnets_SPECARMGenerator()
var virtualNetworksSubnets_specarmGenerator gopter.Gen

// VirtualNetworksSubnets_SPECARMGenerator returns a generator of VirtualNetworksSubnets_SPECARM instances for property testing.
// We first initialize virtualNetworksSubnets_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworksSubnets_SPECARMGenerator() gopter.Gen {
	if virtualNetworksSubnets_specarmGenerator != nil {
		return virtualNetworksSubnets_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSubnets_SPECARM(generators)
	virtualNetworksSubnets_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnets_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworksSubnets_SPECARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworksSubnets_SPECARM(generators)
	virtualNetworksSubnets_specarmGenerator = gen.Struct(reflect.TypeOf(VirtualNetworksSubnets_SPECARM{}), generators)

	return virtualNetworksSubnets_specarmGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworksSubnets_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworksSubnets_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworksSubnets_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworksSubnets_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormat_SpecARMGenerator())
}

func Test_SubnetPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormat_SpecARM, SubnetPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormat_SpecARM runs a test to see if a specific instance of SubnetPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormat_SpecARM(subject SubnetPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubnetPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubnetPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//SubnetPropertiesFormat_SpecARMGenerator()
var subnetPropertiesFormat_specARMGenerator gopter.Gen

// SubnetPropertiesFormat_SpecARMGenerator returns a generator of SubnetPropertiesFormat_SpecARM instances for property testing.
// We first initialize subnetPropertiesFormat_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if subnetPropertiesFormat_specARMGenerator != nil {
		return subnetPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_SpecARM(generators)
	subnetPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_SpecARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_SpecARM(generators)
	subnetPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_SpecARM{}), generators)

	return subnetPropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormat_PrivateEndpointNetworkPolicies_SpecDisabled, SubnetPropertiesFormat_PrivateEndpointNetworkPolicies_SpecEnabled))
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormat_PrivateLinkServiceNetworkPolicies_SpecDisabled, SubnetPropertiesFormat_PrivateLinkServiceNetworkPolicies_SpecEnabled))
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfiguration_SpecARMGenerator())
	gens["Delegations"] = gen.SliceOf(Delegation_SpecARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_SpecARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTable_SpecARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicy_SpecARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormat_SpecARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfiguration_SpecARM, ApplicationGatewayIPConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfiguration_SpecARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfiguration_SpecARM(subject ApplicationGatewayIPConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_SpecARM instances for property testing - lazily instantiated by
//ApplicationGatewayIPConfiguration_SpecARMGenerator()
var applicationGatewayIPConfiguration_specARMGenerator gopter.Gen

// ApplicationGatewayIPConfiguration_SpecARMGenerator returns a generator of ApplicationGatewayIPConfiguration_SpecARM instances for property testing.
// We first initialize applicationGatewayIPConfiguration_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfiguration_SpecARMGenerator() gopter.Gen {
	if applicationGatewayIPConfiguration_specARMGenerator != nil {
		return applicationGatewayIPConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM(generators)
	applicationGatewayIPConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM(generators)
	applicationGatewayIPConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_SpecARM{}), generators)

	return applicationGatewayIPConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormat_SpecARMGenerator())
}

func Test_Delegation_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegation_SpecARM, Delegation_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegation_SpecARM runs a test to see if a specific instance of Delegation_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegation_SpecARM(subject Delegation_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_SpecARM instances for property testing - lazily instantiated by Delegation_SpecARMGenerator()
var delegation_specARMGenerator gopter.Gen

// Delegation_SpecARMGenerator returns a generator of Delegation_SpecARM instances for property testing.
// We first initialize delegation_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Delegation_SpecARMGenerator() gopter.Gen {
	if delegation_specARMGenerator != nil {
		return delegation_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_SpecARM(generators)
	delegation_specARMGenerator = gen.Struct(reflect.TypeOf(Delegation_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegation_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDelegation_SpecARM(generators)
	delegation_specARMGenerator = gen.Struct(reflect.TypeOf(Delegation_SpecARM{}), generators)

	return delegation_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegation_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegation_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegation_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegation_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormat_SpecARMGenerator())
}

func Test_NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroup_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_RouteTable_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTable_SpecARM, RouteTable_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTable_SpecARM runs a test to see if a specific instance of RouteTable_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTable_SpecARM(subject RouteTable_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_SpecARM instances for property testing - lazily instantiated by RouteTable_SpecARMGenerator()
var routeTable_specARMGenerator gopter.Gen

// RouteTable_SpecARMGenerator returns a generator of RouteTable_SpecARM instances for property testing.
// We first initialize routeTable_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTable_SpecARMGenerator() gopter.Gen {
	if routeTable_specARMGenerator != nil {
		return routeTable_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_SpecARM(generators)
	routeTable_specARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTable_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRouteTable_SpecARM(generators)
	routeTable_specARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_SpecARM{}), generators)

	return routeTable_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTable_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTable_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTable_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTable_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_ServiceEndpointPolicy_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicy_SpecARM, ServiceEndpointPolicy_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicy_SpecARM runs a test to see if a specific instance of ServiceEndpointPolicy_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicy_SpecARM(subject ServiceEndpointPolicy_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_SpecARM instances for property testing - lazily instantiated by
//ServiceEndpointPolicy_SpecARMGenerator()
var serviceEndpointPolicy_specARMGenerator gopter.Gen

// ServiceEndpointPolicy_SpecARMGenerator returns a generator of ServiceEndpointPolicy_SpecARM instances for property testing.
// We first initialize serviceEndpointPolicy_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceEndpointPolicy_SpecARMGenerator() gopter.Gen {
	if serviceEndpointPolicy_specARMGenerator != nil {
		return serviceEndpointPolicy_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicy_SpecARM(generators)
	serviceEndpointPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicy_SpecARM(generators)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicy_SpecARM(generators)
	serviceEndpointPolicy_specARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_SpecARM{}), generators)

	return serviceEndpointPolicy_specARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicy_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicy_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicy_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_ServiceEndpointPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormat_SpecARM, ServiceEndpointPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormat_SpecARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormat_SpecARM(subject ServiceEndpointPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//ServiceEndpointPropertiesFormat_SpecARMGenerator()
var serviceEndpointPropertiesFormat_specARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormat_SpecARMGenerator returns a generator of ServiceEndpointPropertiesFormat_SpecARM instances for property testing.
func ServiceEndpointPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormat_specARMGenerator != nil {
		return serviceEndpointPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_SpecARM(generators)
	serviceEndpointPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_SpecARM{}), generators)

	return serviceEndpointPropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_SpecARM, ApplicationGatewayIPConfigurationPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_SpecARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormat_SpecARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing - lazily
//instantiated by ApplicationGatewayIPConfigurationPropertiesFormat_SpecARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormat_specARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormat_SpecARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM instances for property testing.
func ApplicationGatewayIPConfigurationPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormat_specARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_SpecARM(generators)
	applicationGatewayIPConfigurationPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_SpecARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormat_specARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResource_SpecARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var networkSecurityGroupPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	networkSecurityGroupPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SecurityRules"] = gen.SliceOf(SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return routeTablePropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablePropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Routes"] = gen.SliceOf(Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_ServiceDelegationPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormat_SpecARM, ServiceDelegationPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormat_SpecARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormat_SpecARM(subject ServiceDelegationPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//ServiceDelegationPropertiesFormat_SpecARMGenerator()
var serviceDelegationPropertiesFormat_specARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormat_SpecARMGenerator returns a generator of ServiceDelegationPropertiesFormat_SpecARM instances for property testing.
func ServiceDelegationPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormat_specARMGenerator != nil {
		return serviceDelegationPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_SpecARM(generators)
	serviceDelegationPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_SpecARM{}), generators)

	return serviceDelegationPropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var serviceEndpointPolicyPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicyPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicyPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	serviceEndpointPolicyPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicyPropertiesFormat_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceEndpointPolicyPropertiesFormat_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ServiceEndpointPolicyDefinitions"] = gen.SliceOf(ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator())
}

func Test_Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoute_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoute_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoute_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var route_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if route_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return route_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoute_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	route_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Route_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return route_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRoute_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoute_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var securityRule_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if securityRule_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return securityRule_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	securityRule_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return securityRule_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRule_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM, ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(subject ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by
//ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator()
var serviceEndpointPolicyDefinition_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicyDefinition_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicyDefinition_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(generators)
	serviceEndpointPolicyDefinition_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicyDefinition_spec_virtualNetworksSubnet_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicyDefinition_Spec_VirtualNetworksSubnet_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
