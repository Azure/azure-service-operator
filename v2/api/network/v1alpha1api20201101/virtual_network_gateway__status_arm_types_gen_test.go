// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_StatusARM, VirtualNetworkGateway_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_StatusARM runs a test to see if a specific instance of VirtualNetworkGateway_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_StatusARM(subject VirtualNetworkGateway_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_StatusARM instances for property testing - lazily instantiated by
//VirtualNetworkGateway_StatusARMGenerator()
var virtualNetworkGateway_statusARMGenerator gopter.Gen

// VirtualNetworkGateway_StatusARMGenerator returns a generator of VirtualNetworkGateway_StatusARM instances for property testing.
// We first initialize virtualNetworkGateway_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_StatusARMGenerator() gopter.Gen {
	if virtualNetworkGateway_statusARMGenerator != nil {
		return virtualNetworkGateway_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_StatusARM(generators)
	virtualNetworkGateway_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_StatusARM(generators)
	virtualNetworkGateway_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_StatusARM{}), generators)

	return virtualNetworkGateway_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_StatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormat_StatusARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_StatusARM, VirtualNetworkGatewayPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_StatusARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormat_StatusARM(subject VirtualNetworkGatewayPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewayPropertiesFormat_StatusARMGenerator()
var virtualNetworkGatewayPropertiesFormat_statusARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormat_StatusARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormat_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormat_statusARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM(generators)
	virtualNetworkGatewayPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM(generators)
	virtualNetworkGatewayPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormat_StatusARM{}), generators)

	return virtualNetworkGatewayPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusLocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayType_StatusVpn))
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusGeneration1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusGeneration2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGeneration_StatusNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnType_StatusPolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnType_StatusRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_StatusARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_StatusARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_StatusARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfiguration_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_StatusARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfiguration_StatusARMGenerator())
}

func Test_AddressSpace_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_StatusARM, AddressSpace_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_StatusARM runs a test to see if a specific instance of AddressSpace_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_StatusARM(subject AddressSpace_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_StatusARM instances for property testing - lazily instantiated by
//AddressSpace_StatusARMGenerator()
var addressSpace_statusARMGenerator gopter.Gen

// AddressSpace_StatusARMGenerator returns a generator of AddressSpace_StatusARM instances for property testing.
func AddressSpace_StatusARMGenerator() gopter.Gen {
	if addressSpace_statusARMGenerator != nil {
		return addressSpace_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_StatusARM(generators)
	addressSpace_statusARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_StatusARM{}), generators)

	return addressSpace_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_StatusARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_StatusARM, BgpSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_StatusARM runs a test to see if a specific instance of BgpSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_StatusARM(subject BgpSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_StatusARM instances for property testing - lazily instantiated by
//BgpSettings_StatusARMGenerator()
var bgpSettings_statusARMGenerator gopter.Gen

// BgpSettings_StatusARMGenerator returns a generator of BgpSettings_StatusARM instances for property testing.
// We first initialize bgpSettings_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_StatusARMGenerator() gopter.Gen {
	if bgpSettings_statusARMGenerator != nil {
		return bgpSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_StatusARM(generators)
	bgpSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_StatusARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_StatusARM(generators)
	bgpSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_StatusARM{}), generators)

	return bgpSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_StatusARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_StatusARM, VirtualNetworkGatewayIPConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_StatusARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfiguration_StatusARM(subject VirtualNetworkGatewayIPConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfiguration_StatusARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewayIPConfiguration_StatusARMGenerator()
var virtualNetworkGatewayIPConfiguration_statusARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfiguration_StatusARMGenerator returns a generator of VirtualNetworkGatewayIPConfiguration_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfiguration_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfiguration_StatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfiguration_statusARMGenerator != nil {
		return virtualNetworkGatewayIPConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM(generators)
	virtualNetworkGatewayIPConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM(generators)
	virtualNetworkGatewayIPConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfiguration_StatusARM{}), generators)

	return virtualNetworkGatewayIPConfiguration_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARMGenerator())
}

func Test_VirtualNetworkGatewaySku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_StatusARM, VirtualNetworkGatewaySku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_StatusARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_StatusARM(subject VirtualNetworkGatewaySku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_StatusARM instances for property testing - lazily instantiated by
//VirtualNetworkGatewaySku_StatusARMGenerator()
var virtualNetworkGatewaySku_statusARMGenerator gopter.Gen

// VirtualNetworkGatewaySku_StatusARMGenerator returns a generator of VirtualNetworkGatewaySku_StatusARM instances for property testing.
func VirtualNetworkGatewaySku_StatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_statusARMGenerator != nil {
		return virtualNetworkGatewaySku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_StatusARM(generators)
	virtualNetworkGatewaySku_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_StatusARM{}), generators)

	return virtualNetworkGatewaySku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_StatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_StatusBasic,
		VirtualNetworkGatewaySku_Name_StatusErGw1AZ,
		VirtualNetworkGatewaySku_Name_StatusErGw2AZ,
		VirtualNetworkGatewaySku_Name_StatusErGw3AZ,
		VirtualNetworkGatewaySku_Name_StatusHighPerformance,
		VirtualNetworkGatewaySku_Name_StatusStandard,
		VirtualNetworkGatewaySku_Name_StatusUltraPerformance,
		VirtualNetworkGatewaySku_Name_StatusVpnGw1,
		VirtualNetworkGatewaySku_Name_StatusVpnGw1AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw2,
		VirtualNetworkGatewaySku_Name_StatusVpnGw2AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw3,
		VirtualNetworkGatewaySku_Name_StatusVpnGw3AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw4,
		VirtualNetworkGatewaySku_Name_StatusVpnGw4AZ,
		VirtualNetworkGatewaySku_Name_StatusVpnGw5,
		VirtualNetworkGatewaySku_Name_StatusVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_StatusBasic,
		VirtualNetworkGatewaySku_Tier_StatusErGw1AZ,
		VirtualNetworkGatewaySku_Tier_StatusErGw2AZ,
		VirtualNetworkGatewaySku_Tier_StatusErGw3AZ,
		VirtualNetworkGatewaySku_Tier_StatusHighPerformance,
		VirtualNetworkGatewaySku_Tier_StatusStandard,
		VirtualNetworkGatewaySku_Tier_StatusUltraPerformance,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw1,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw2,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw3,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw4,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw5,
		VirtualNetworkGatewaySku_Tier_StatusVpnGw5AZ))
}

func Test_VpnClientConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfiguration_StatusARM, VpnClientConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfiguration_StatusARM runs a test to see if a specific instance of VpnClientConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfiguration_StatusARM(subject VpnClientConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfiguration_StatusARM instances for property testing - lazily instantiated by
//VpnClientConfiguration_StatusARMGenerator()
var vpnClientConfiguration_statusARMGenerator gopter.Gen

// VpnClientConfiguration_StatusARMGenerator returns a generator of VpnClientConfiguration_StatusARM instances for property testing.
// We first initialize vpnClientConfiguration_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfiguration_StatusARMGenerator() gopter.Gen {
	if vpnClientConfiguration_statusARMGenerator != nil {
		return vpnClientConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_StatusARM(generators)
	vpnClientConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfiguration_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfiguration_StatusARM(generators)
	vpnClientConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfiguration_StatusARM{}), generators)

	return vpnClientConfiguration_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfiguration_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypes_StatusAAD, VpnClientConfiguration_VpnAuthenticationTypes_StatusCertificate, VpnClientConfiguration_VpnAuthenticationTypes_StatusRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocols_StatusIkeV2, VpnClientConfiguration_VpnClientProtocols_StatusOpenVPN, VpnClientConfiguration_VpnClientProtocols_StatusSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_StatusARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_StatusARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_StatusARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificate_StatusARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificate_StatusARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddress_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_StatusARM, IPConfigurationBgpPeeringAddress_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_StatusARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_StatusARM(subject IPConfigurationBgpPeeringAddress_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_StatusARM instances for property testing - lazily instantiated by
//IPConfigurationBgpPeeringAddress_StatusARMGenerator()
var ipConfigurationBgpPeeringAddress_statusARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_StatusARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_StatusARM instances for property testing.
func IPConfigurationBgpPeeringAddress_StatusARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_statusARMGenerator != nil {
		return ipConfigurationBgpPeeringAddress_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_StatusARM(generators)
	ipConfigurationBgpPeeringAddress_statusARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_StatusARM{}), generators)

	return ipConfigurationBgpPeeringAddress_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_StatusARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_StatusARM, IpsecPolicy_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_StatusARM runs a test to see if a specific instance of IpsecPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_StatusARM(subject IpsecPolicy_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_StatusARM instances for property testing - lazily instantiated by
//IpsecPolicy_StatusARMGenerator()
var ipsecPolicy_statusARMGenerator gopter.Gen

// IpsecPolicy_StatusARMGenerator returns a generator of IpsecPolicy_StatusARM instances for property testing.
func IpsecPolicy_StatusARMGenerator() gopter.Gen {
	if ipsecPolicy_statusARMGenerator != nil {
		return ipsecPolicy_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_StatusARM(generators)
	ipsecPolicy_statusARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_StatusARM{}), generators)

	return ipsecPolicy_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_StatusARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.OneConstOf(
		DhGroup_StatusDHGroup1,
		DhGroup_StatusDHGroup14,
		DhGroup_StatusDHGroup2,
		DhGroup_StatusDHGroup2048,
		DhGroup_StatusDHGroup24,
		DhGroup_StatusECP256,
		DhGroup_StatusECP384,
		DhGroup_StatusNone)
	gens["IkeEncryption"] = gen.OneConstOf(
		IkeEncryption_StatusAES128,
		IkeEncryption_StatusAES192,
		IkeEncryption_StatusAES256,
		IkeEncryption_StatusDES,
		IkeEncryption_StatusDES3,
		IkeEncryption_StatusGCMAES128,
		IkeEncryption_StatusGCMAES256)
	gens["IkeIntegrity"] = gen.OneConstOf(
		IkeIntegrity_StatusGCMAES128,
		IkeIntegrity_StatusGCMAES256,
		IkeIntegrity_StatusMD5,
		IkeIntegrity_StatusSHA1,
		IkeIntegrity_StatusSHA256,
		IkeIntegrity_StatusSHA384)
	gens["IpsecEncryption"] = gen.OneConstOf(
		IpsecEncryption_StatusAES128,
		IpsecEncryption_StatusAES192,
		IpsecEncryption_StatusAES256,
		IpsecEncryption_StatusDES,
		IpsecEncryption_StatusDES3,
		IpsecEncryption_StatusGCMAES128,
		IpsecEncryption_StatusGCMAES192,
		IpsecEncryption_StatusGCMAES256,
		IpsecEncryption_StatusNone)
	gens["IpsecIntegrity"] = gen.OneConstOf(
		IpsecIntegrity_StatusGCMAES128,
		IpsecIntegrity_StatusGCMAES192,
		IpsecIntegrity_StatusGCMAES256,
		IpsecIntegrity_StatusMD5,
		IpsecIntegrity_StatusSHA1,
		IpsecIntegrity_StatusSHA256)
	gens["PfsGroup"] = gen.OneConstOf(
		PfsGroup_StatusECP256,
		PfsGroup_StatusECP384,
		PfsGroup_StatusNone,
		PfsGroup_StatusPFS1,
		PfsGroup_StatusPFS14,
		PfsGroup_StatusPFS2,
		PfsGroup_StatusPFS2048,
		PfsGroup_StatusPFS24,
		PfsGroup_StatusPFSMM)
	gens["SaDataSizeKilobytes"] = gen.Int()
	gens["SaLifeTimeSeconds"] = gen.Int()
}

func Test_RadiusServer_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_StatusARM, RadiusServer_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_StatusARM runs a test to see if a specific instance of RadiusServer_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_StatusARM(subject RadiusServer_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_StatusARM instances for property testing - lazily instantiated by
//RadiusServer_StatusARMGenerator()
var radiusServer_statusARMGenerator gopter.Gen

// RadiusServer_StatusARMGenerator returns a generator of RadiusServer_StatusARM instances for property testing.
func RadiusServer_StatusARMGenerator() gopter.Gen {
	if radiusServer_statusARMGenerator != nil {
		return radiusServer_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_StatusARM(generators)
	radiusServer_statusARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_StatusARM{}), generators)

	return radiusServer_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_StatusARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.AlphaString()
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM, VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing - lazily
//instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_StatusARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_VpnClientRevokedCertificate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificate_StatusARM, VpnClientRevokedCertificate_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificate_StatusARM runs a test to see if a specific instance of VpnClientRevokedCertificate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificate_StatusARM(subject VpnClientRevokedCertificate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificate_StatusARM instances for property testing - lazily instantiated by
//VpnClientRevokedCertificate_StatusARMGenerator()
var vpnClientRevokedCertificate_statusARMGenerator gopter.Gen

// VpnClientRevokedCertificate_StatusARMGenerator returns a generator of VpnClientRevokedCertificate_StatusARM instances for property testing.
// We first initialize vpnClientRevokedCertificate_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificate_StatusARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificate_statusARMGenerator != nil {
		return vpnClientRevokedCertificate_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM(generators)
	vpnClientRevokedCertificate_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM(generators)
	vpnClientRevokedCertificate_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificate_StatusARM{}), generators)

	return vpnClientRevokedCertificate_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificate_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormat_StatusARMGenerator())
}

func Test_VpnClientRootCertificate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificate_StatusARM, VpnClientRootCertificate_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificate_StatusARM runs a test to see if a specific instance of VpnClientRootCertificate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificate_StatusARM(subject VpnClientRootCertificate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificate_StatusARM instances for property testing - lazily instantiated by
//VpnClientRootCertificate_StatusARMGenerator()
var vpnClientRootCertificate_statusARMGenerator gopter.Gen

// VpnClientRootCertificate_StatusARMGenerator returns a generator of VpnClientRootCertificate_StatusARM instances for property testing.
// We first initialize vpnClientRootCertificate_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificate_StatusARMGenerator() gopter.Gen {
	if vpnClientRootCertificate_statusARMGenerator != nil {
		return vpnClientRootCertificate_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_StatusARM(generators)
	vpnClientRootCertificate_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificate_StatusARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificate_StatusARM(generators)
	vpnClientRootCertificate_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificate_StatusARM{}), generators)

	return vpnClientRootCertificate_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificate_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificate_StatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificate_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificate_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = VpnClientRootCertificatePropertiesFormat_StatusARMGenerator()
}

func Test_VpnClientRevokedCertificatePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_StatusARM, VpnClientRevokedCertificatePropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_StatusARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_StatusARM(subject VpnClientRevokedCertificatePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_StatusARM instances for property testing - lazily
//instantiated by VpnClientRevokedCertificatePropertiesFormat_StatusARMGenerator()
var vpnClientRevokedCertificatePropertiesFormat_statusARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormat_StatusARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_StatusARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormat_StatusARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormat_statusARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_StatusARM(generators)
	vpnClientRevokedCertificatePropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_StatusARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_StatusARM, VpnClientRootCertificatePropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_StatusARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_StatusARM(subject VpnClientRootCertificatePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_StatusARM instances for property testing - lazily instantiated
//by VpnClientRootCertificatePropertiesFormat_StatusARMGenerator()
var vpnClientRootCertificatePropertiesFormat_statusARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormat_StatusARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_StatusARM instances for property testing.
func VpnClientRootCertificatePropertiesFormat_StatusARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormat_statusARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_StatusARM(generators)
	vpnClientRootCertificatePropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_StatusARM{}), generators)

	return vpnClientRootCertificatePropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["PublicCertData"] = gen.AlphaString()
}
