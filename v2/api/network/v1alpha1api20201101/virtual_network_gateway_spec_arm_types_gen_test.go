// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_ARM, VirtualNetworkGateway_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_ARM(subject VirtualNetworkGateway_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_Spec_ARMGenerator()
var virtualNetworkGateway_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(generators)
	virtualNetworkGateway_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(generators)
	virtualNetworkGateway_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_ARM{}), generators)

	return virtualNetworkGateway_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGateway_Properties_Spec_ARMGenerator())
}

func Test_VirtualNetworkGateway_Properties_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Properties_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Properties_Spec_ARM, VirtualNetworkGateway_Properties_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Properties_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Properties_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Properties_Spec_ARM(subject VirtualNetworkGateway_Properties_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Properties_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Properties_Spec_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_Properties_Spec_ARMGenerator()
var virtualNetworkGateway_Properties_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Properties_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Properties_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Properties_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Properties_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Properties_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Properties_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM(generators)
	virtualNetworkGateway_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM(generators)
	virtualNetworkGateway_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_Spec_ARM{}), generators)

	return virtualNetworkGateway_Properties_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGateway_Properties_GatewayType_Spec_ExpressRoute,
		VirtualNetworkGateway_Properties_GatewayType_Spec_HyperNet,
		VirtualNetworkGateway_Properties_GatewayType_Spec_LocalGateway,
		VirtualNetworkGateway_Properties_GatewayType_Spec_Vpn))
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGateway_Properties_VpnGatewayGeneration_Spec_Generation1, VirtualNetworkGateway_Properties_VpnGatewayGeneration_Spec_Generation2, VirtualNetworkGateway_Properties_VpnGatewayGeneration_Spec_None))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGateway_Properties_VpnType_Spec_PolicyBased, VirtualNetworkGateway_Properties_VpnType_Spec_RouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettings_ARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpace_ARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySku_ARMGenerator())
	gens["VirtualNetworkExtendedLocation"] = gen.PtrOf(ExtendedLocation_ARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator())
}

func Test_AddressSpace_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpace_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpace_ARM, AddressSpace_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpace_ARM runs a test to see if a specific instance of AddressSpace_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpace_ARM(subject AddressSpace_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpace_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpace_ARM instances for property testing - lazily instantiated by AddressSpace_ARMGenerator()
var addressSpace_ARMGenerator gopter.Gen

// AddressSpace_ARMGenerator returns a generator of AddressSpace_ARM instances for property testing.
func AddressSpace_ARMGenerator() gopter.Gen {
	if addressSpace_ARMGenerator != nil {
		return addressSpace_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpace_ARM(generators)
	addressSpace_ARMGenerator = gen.Struct(reflect.TypeOf(AddressSpace_ARM{}), generators)

	return addressSpace_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpace_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpace_ARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettings_ARM, BgpSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettings_ARM runs a test to see if a specific instance of BgpSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettings_ARM(subject BgpSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettings_ARM instances for property testing - lazily instantiated by BgpSettings_ARMGenerator()
var bgpSettings_ARMGenerator gopter.Gen

// BgpSettings_ARMGenerator returns a generator of BgpSettings_ARM instances for property testing.
// We first initialize bgpSettings_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettings_ARMGenerator() gopter.Gen {
	if bgpSettings_ARMGenerator != nil {
		return bgpSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_ARM(generators)
	bgpSettings_ARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettings_ARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettings_ARM(generators)
	bgpSettings_ARMGenerator = gen.Struct(reflect.TypeOf(BgpSettings_ARM{}), generators)

	return bgpSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettings_ARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettings_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettings_ARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddress_ARMGenerator())
}

func Test_VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM, VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM(subject VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM instances for property testing - lazily
// instantiated by VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator()
var virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM(generators)
	virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM(generators)
	virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM{}), generators)

	return virtualNetworkGateway_Properties_IpConfigurations_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_IpConfigurations_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM, VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM(subject VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM instances for property testing - lazily
// instantiated by VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator()
var virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM(generators)
	virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM(generators)
	virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM{}), generators)

	return virtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnAuthenticationTypes_Spec_AAD, VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnAuthenticationTypes_Spec_Certificate, VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnAuthenticationTypes_Spec_Radius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientProtocols_Spec_IkeV2, VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientProtocols_Spec_OpenVPN, VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientProtocols_Spec_SSTP))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_Spec_ARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServer_ARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpace_ARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicy_ARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator())
}

func Test_VirtualNetworkGatewaySku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySku_ARM, VirtualNetworkGatewaySku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySku_ARM runs a test to see if a specific instance of VirtualNetworkGatewaySku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySku_ARM(subject VirtualNetworkGatewaySku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySku_ARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySku_ARMGenerator()
var virtualNetworkGatewaySku_ARMGenerator gopter.Gen

// VirtualNetworkGatewaySku_ARMGenerator returns a generator of VirtualNetworkGatewaySku_ARM instances for property testing.
func VirtualNetworkGatewaySku_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySku_ARMGenerator != nil {
		return virtualNetworkGatewaySku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_ARM(generators)
	virtualNetworkGatewaySku_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySku_ARM{}), generators)

	return virtualNetworkGatewaySku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySku_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_Basic,
		VirtualNetworkGatewaySku_Name_ErGw1AZ,
		VirtualNetworkGatewaySku_Name_ErGw2AZ,
		VirtualNetworkGatewaySku_Name_ErGw3AZ,
		VirtualNetworkGatewaySku_Name_HighPerformance,
		VirtualNetworkGatewaySku_Name_Standard,
		VirtualNetworkGatewaySku_Name_UltraPerformance,
		VirtualNetworkGatewaySku_Name_VpnGw1,
		VirtualNetworkGatewaySku_Name_VpnGw1AZ,
		VirtualNetworkGatewaySku_Name_VpnGw2,
		VirtualNetworkGatewaySku_Name_VpnGw2AZ,
		VirtualNetworkGatewaySku_Name_VpnGw3,
		VirtualNetworkGatewaySku_Name_VpnGw3AZ,
		VirtualNetworkGatewaySku_Name_VpnGw4,
		VirtualNetworkGatewaySku_Name_VpnGw4AZ,
		VirtualNetworkGatewaySku_Name_VpnGw5,
		VirtualNetworkGatewaySku_Name_VpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_Basic,
		VirtualNetworkGatewaySku_Tier_ErGw1AZ,
		VirtualNetworkGatewaySku_Tier_ErGw2AZ,
		VirtualNetworkGatewaySku_Tier_ErGw3AZ,
		VirtualNetworkGatewaySku_Tier_HighPerformance,
		VirtualNetworkGatewaySku_Tier_Standard,
		VirtualNetworkGatewaySku_Tier_UltraPerformance,
		VirtualNetworkGatewaySku_Tier_VpnGw1,
		VirtualNetworkGatewaySku_Tier_VpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw2,
		VirtualNetworkGatewaySku_Tier_VpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw3,
		VirtualNetworkGatewaySku_Tier_VpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw4,
		VirtualNetworkGatewaySku_Tier_VpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw5,
		VirtualNetworkGatewaySku_Tier_VpnGw5AZ))
}

func Test_IPConfigurationBgpPeeringAddress_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddress_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_ARM, IPConfigurationBgpPeeringAddress_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_ARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddress_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddress_ARM(subject IPConfigurationBgpPeeringAddress_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddress_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddress_ARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddress_ARMGenerator()
var ipConfigurationBgpPeeringAddress_ARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddress_ARMGenerator returns a generator of IPConfigurationBgpPeeringAddress_ARM instances for property testing.
func IPConfigurationBgpPeeringAddress_ARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddress_ARMGenerator != nil {
		return ipConfigurationBgpPeeringAddress_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_ARM(generators)
	ipConfigurationBgpPeeringAddress_ARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddress_ARM{}), generators)

	return ipConfigurationBgpPeeringAddress_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddress_ARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpsecPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicy_ARM, IpsecPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicy_ARM runs a test to see if a specific instance of IpsecPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicy_ARM(subject IpsecPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicy_ARM instances for property testing - lazily instantiated by IpsecPolicy_ARMGenerator()
var ipsecPolicy_ARMGenerator gopter.Gen

// IpsecPolicy_ARMGenerator returns a generator of IpsecPolicy_ARM instances for property testing.
func IpsecPolicy_ARMGenerator() gopter.Gen {
	if ipsecPolicy_ARMGenerator != nil {
		return ipsecPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicy_ARM(generators)
	ipsecPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicy_ARM{}), generators)

	return ipsecPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicy_ARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_DhGroup_DHGroup1,
		IpsecPolicy_DhGroup_DHGroup14,
		IpsecPolicy_DhGroup_DHGroup2,
		IpsecPolicy_DhGroup_DHGroup2048,
		IpsecPolicy_DhGroup_DHGroup24,
		IpsecPolicy_DhGroup_ECP256,
		IpsecPolicy_DhGroup_ECP384,
		IpsecPolicy_DhGroup_None))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IkeEncryption_AES128,
		IpsecPolicy_IkeEncryption_AES192,
		IpsecPolicy_IkeEncryption_AES256,
		IpsecPolicy_IkeEncryption_DES,
		IpsecPolicy_IkeEncryption_DES3,
		IpsecPolicy_IkeEncryption_GCMAES128,
		IpsecPolicy_IkeEncryption_GCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IkeIntegrity_GCMAES128,
		IpsecPolicy_IkeIntegrity_GCMAES256,
		IpsecPolicy_IkeIntegrity_MD5,
		IpsecPolicy_IkeIntegrity_SHA1,
		IpsecPolicy_IkeIntegrity_SHA256,
		IpsecPolicy_IkeIntegrity_SHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IpsecEncryption_AES128,
		IpsecPolicy_IpsecEncryption_AES192,
		IpsecPolicy_IpsecEncryption_AES256,
		IpsecPolicy_IpsecEncryption_DES,
		IpsecPolicy_IpsecEncryption_DES3,
		IpsecPolicy_IpsecEncryption_GCMAES128,
		IpsecPolicy_IpsecEncryption_GCMAES192,
		IpsecPolicy_IpsecEncryption_GCMAES256,
		IpsecPolicy_IpsecEncryption_None))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IpsecIntegrity_GCMAES128,
		IpsecPolicy_IpsecIntegrity_GCMAES192,
		IpsecPolicy_IpsecIntegrity_GCMAES256,
		IpsecPolicy_IpsecIntegrity_MD5,
		IpsecPolicy_IpsecIntegrity_SHA1,
		IpsecPolicy_IpsecIntegrity_SHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_PfsGroup_ECP256,
		IpsecPolicy_PfsGroup_ECP384,
		IpsecPolicy_PfsGroup_None,
		IpsecPolicy_PfsGroup_PFS1,
		IpsecPolicy_PfsGroup_PFS14,
		IpsecPolicy_PfsGroup_PFS2,
		IpsecPolicy_PfsGroup_PFS2048,
		IpsecPolicy_PfsGroup_PFS24,
		IpsecPolicy_PfsGroup_PFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServer_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServer_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServer_ARM, RadiusServer_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServer_ARM runs a test to see if a specific instance of RadiusServer_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServer_ARM(subject RadiusServer_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServer_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServer_ARM instances for property testing - lazily instantiated by RadiusServer_ARMGenerator()
var radiusServer_ARMGenerator gopter.Gen

// RadiusServer_ARMGenerator returns a generator of RadiusServer_ARM instances for property testing.
func RadiusServer_ARMGenerator() gopter.Gen {
	if radiusServer_ARMGenerator != nil {
		return radiusServer_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServer_ARM(generators)
	radiusServer_ARMGenerator = gen.Struct(reflect.TypeOf(RadiusServer_ARM{}), generators)

	return radiusServer_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServer_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServer_ARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM, VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM(subject VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM instances
// for property testing - lazily instantiated by
// VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator()
var virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM(generators)
	virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM(generators)
	virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM{}), generators)

	return virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRevokedCertificates_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM, VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM runs a test to see if a specific instance of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM(subject VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM instances for
// property testing - lazily instantiated by
// VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator()
var virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator gopter.Gen

// VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator returns a generator of VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM instances for property testing.
// We first initialize virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator != nil {
		return virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM(generators)
	virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM(generators)
	virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM{}), generators)

	return virtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Properties_VpnClientConfiguration_VpnClientRootCertificates_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormat_ARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM, VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_PrivateIPAllocationMethod_Dynamic, VirtualNetworkGatewayIPConfigurationPropertiesFormat_PrivateIPAllocationMethod_Static))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResource_ARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_ARM, VpnClientRevokedCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_ARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormat_ARM(subject VpnClientRevokedCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormat_ARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificatePropertiesFormat_ARMGenerator()
var vpnClientRevokedCertificatePropertiesFormat_ARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormat_ARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormat_ARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormat_ARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_ARM(generators)
	vpnClientRevokedCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormat_ARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_ARM, VpnClientRootCertificatePropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_ARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormat_ARM(subject VpnClientRootCertificatePropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormat_ARM instances for property testing - lazily instantiated by
// VpnClientRootCertificatePropertiesFormat_ARMGenerator()
var vpnClientRootCertificatePropertiesFormat_ARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormat_ARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormat_ARM instances for property testing.
func VpnClientRootCertificatePropertiesFormat_ARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormat_ARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_ARM(generators)
	vpnClientRootCertificatePropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormat_ARM{}), generators)

	return vpnClientRootCertificatePropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
