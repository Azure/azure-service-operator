// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_SpecARM, VirtualNetworkGateway_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_SpecARM runs a test to see if a specific instance of VirtualNetworkGateway_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_SpecARM(subject VirtualNetworkGateway_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_SpecARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_SpecARMGenerator()
var virtualNetworkGateway_SpecARMGenerator gopter.Gen

// VirtualNetworkGateway_SpecARMGenerator returns a generator of VirtualNetworkGateway_SpecARM instances for property testing.
// We first initialize virtualNetworkGateway_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_SpecARMGenerator() gopter.Gen {
	if virtualNetworkGateway_SpecARMGenerator != nil {
		return virtualNetworkGateway_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM(generators)
	virtualNetworkGateway_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_SpecARM(generators)
	virtualNetworkGateway_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_SpecARM{}), generators)

	return virtualNetworkGateway_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGateway_Spec_PropertiesARMGenerator())
}

func Test_VirtualNetworkGateway_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_PropertiesARM, VirtualNetworkGateway_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_PropertiesARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_PropertiesARM(subject VirtualNetworkGateway_Spec_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_PropertiesARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_Spec_PropertiesARMGenerator()
var virtualNetworkGateway_Spec_PropertiesARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_PropertiesARMGenerator returns a generator of VirtualNetworkGateway_Spec_PropertiesARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_PropertiesARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_PropertiesARMGenerator != nil {
		return virtualNetworkGateway_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM(generators)
	virtualNetworkGateway_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM(generators)
	virtualNetworkGateway_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_PropertiesARM{}), generators)

	return virtualNetworkGateway_Spec_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGateway_Spec_Properties_GatewayType_ExpressRoute,
		VirtualNetworkGateway_Spec_Properties_GatewayType_HyperNet,
		VirtualNetworkGateway_Spec_Properties_GatewayType_LocalGateway,
		VirtualNetworkGateway_Spec_Properties_GatewayType_Vpn))
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGateway_Spec_Properties_VpnGatewayGeneration_Generation1, VirtualNetworkGateway_Spec_Properties_VpnGatewayGeneration_Generation2, VirtualNetworkGateway_Spec_Properties_VpnGatewayGeneration_None))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGateway_Spec_Properties_VpnType_PolicyBased, VirtualNetworkGateway_Spec_Properties_VpnType_RouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettingsARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpaceARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResourceARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySkuARMGenerator())
	gens["VirtualNetworkExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator())
}

func Test_AddressSpaceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpaceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceARM, AddressSpaceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceARM runs a test to see if a specific instance of AddressSpaceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceARM(subject AddressSpaceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpaceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpaceARM instances for property testing - lazily instantiated by AddressSpaceARMGenerator()
var addressSpaceARMGenerator gopter.Gen

// AddressSpaceARMGenerator returns a generator of AddressSpaceARM instances for property testing.
func AddressSpaceARMGenerator() gopter.Gen {
	if addressSpaceARMGenerator != nil {
		return addressSpaceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceARM(generators)
	addressSpaceARMGenerator = gen.Struct(reflect.TypeOf(AddressSpaceARM{}), generators)

	return addressSpaceARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettingsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettingsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettingsARM, BgpSettingsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettingsARM runs a test to see if a specific instance of BgpSettingsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettingsARM(subject BgpSettingsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettingsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettingsARM instances for property testing - lazily instantiated by BgpSettingsARMGenerator()
var bgpSettingsARMGenerator gopter.Gen

// BgpSettingsARMGenerator returns a generator of BgpSettingsARM instances for property testing.
// We first initialize bgpSettingsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettingsARMGenerator() gopter.Gen {
	if bgpSettingsARMGenerator != nil {
		return bgpSettingsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsARM(generators)
	bgpSettingsARMGenerator = gen.Struct(reflect.TypeOf(BgpSettingsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettingsARM(generators)
	bgpSettingsARMGenerator = gen.Struct(reflect.TypeOf(BgpSettingsARM{}), generators)

	return bgpSettingsARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettingsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettingsARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettingsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettingsARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddressARMGenerator())
}

func Test_VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM, VirtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM(subject VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM instances for property testing - lazily
// instantiated by VirtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator()
var virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator returns a generator of VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator != nil {
		return virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM(generators)
	virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM(generators)
	virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_IpConfigurationsARM{}), generators)

	return virtualNetworkGateway_Spec_Properties_IpConfigurationsARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_IpConfigurationsARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator())
}

func Test_VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM, VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM(subject VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM instances for property testing - lazily
// instantiated by VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator()
var virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator returns a generator of VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator != nil {
		return virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM(generators)
	virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM(generators)
	virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM{}), generators)

	return virtualNetworkGateway_Spec_Properties_VpnClientConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnAuthenticationTypes_AAD, VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnAuthenticationTypes_Certificate, VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnAuthenticationTypes_Radius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientProtocols_IkeV2, VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientProtocols_OpenVPN, VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientProtocols_SSTP))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfigurationARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServerARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpaceARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicyARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator())
}

func Test_VirtualNetworkGatewaySkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySkuARM, VirtualNetworkGatewaySkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySkuARM runs a test to see if a specific instance of VirtualNetworkGatewaySkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySkuARM(subject VirtualNetworkGatewaySkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySkuARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySkuARMGenerator()
var virtualNetworkGatewaySkuARMGenerator gopter.Gen

// VirtualNetworkGatewaySkuARMGenerator returns a generator of VirtualNetworkGatewaySkuARM instances for property testing.
func VirtualNetworkGatewaySkuARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySkuARMGenerator != nil {
		return virtualNetworkGatewaySkuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuARM(generators)
	virtualNetworkGatewaySkuARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySkuARM{}), generators)

	return virtualNetworkGatewaySkuARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Name_Basic,
		VirtualNetworkGatewaySku_Name_ErGw1AZ,
		VirtualNetworkGatewaySku_Name_ErGw2AZ,
		VirtualNetworkGatewaySku_Name_ErGw3AZ,
		VirtualNetworkGatewaySku_Name_HighPerformance,
		VirtualNetworkGatewaySku_Name_Standard,
		VirtualNetworkGatewaySku_Name_UltraPerformance,
		VirtualNetworkGatewaySku_Name_VpnGw1,
		VirtualNetworkGatewaySku_Name_VpnGw1AZ,
		VirtualNetworkGatewaySku_Name_VpnGw2,
		VirtualNetworkGatewaySku_Name_VpnGw2AZ,
		VirtualNetworkGatewaySku_Name_VpnGw3,
		VirtualNetworkGatewaySku_Name_VpnGw3AZ,
		VirtualNetworkGatewaySku_Name_VpnGw4,
		VirtualNetworkGatewaySku_Name_VpnGw4AZ,
		VirtualNetworkGatewaySku_Name_VpnGw5,
		VirtualNetworkGatewaySku_Name_VpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_Tier_Basic,
		VirtualNetworkGatewaySku_Tier_ErGw1AZ,
		VirtualNetworkGatewaySku_Tier_ErGw2AZ,
		VirtualNetworkGatewaySku_Tier_ErGw3AZ,
		VirtualNetworkGatewaySku_Tier_HighPerformance,
		VirtualNetworkGatewaySku_Tier_Standard,
		VirtualNetworkGatewaySku_Tier_UltraPerformance,
		VirtualNetworkGatewaySku_Tier_VpnGw1,
		VirtualNetworkGatewaySku_Tier_VpnGw1AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw2,
		VirtualNetworkGatewaySku_Tier_VpnGw2AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw3,
		VirtualNetworkGatewaySku_Tier_VpnGw3AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw4,
		VirtualNetworkGatewaySku_Tier_VpnGw4AZ,
		VirtualNetworkGatewaySku_Tier_VpnGw5,
		VirtualNetworkGatewaySku_Tier_VpnGw5AZ))
}

func Test_IPConfigurationBgpPeeringAddressARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddressARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddressARM, IPConfigurationBgpPeeringAddressARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddressARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddressARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddressARM(subject IPConfigurationBgpPeeringAddressARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddressARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddressARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddressARMGenerator()
var ipConfigurationBgpPeeringAddressARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddressARMGenerator returns a generator of IPConfigurationBgpPeeringAddressARM instances for property testing.
func IPConfigurationBgpPeeringAddressARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddressARMGenerator != nil {
		return ipConfigurationBgpPeeringAddressARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressARM(generators)
	ipConfigurationBgpPeeringAddressARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddressARM{}), generators)

	return ipConfigurationBgpPeeringAddressARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpsecPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicyARM, IpsecPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicyARM runs a test to see if a specific instance of IpsecPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicyARM(subject IpsecPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicyARM instances for property testing - lazily instantiated by IpsecPolicyARMGenerator()
var ipsecPolicyARMGenerator gopter.Gen

// IpsecPolicyARMGenerator returns a generator of IpsecPolicyARM instances for property testing.
func IpsecPolicyARMGenerator() gopter.Gen {
	if ipsecPolicyARMGenerator != nil {
		return ipsecPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicyARM(generators)
	ipsecPolicyARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicyARM{}), generators)

	return ipsecPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicyARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_DhGroup_DHGroup1,
		IpsecPolicy_DhGroup_DHGroup14,
		IpsecPolicy_DhGroup_DHGroup2,
		IpsecPolicy_DhGroup_DHGroup2048,
		IpsecPolicy_DhGroup_DHGroup24,
		IpsecPolicy_DhGroup_ECP256,
		IpsecPolicy_DhGroup_ECP384,
		IpsecPolicy_DhGroup_None))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IkeEncryption_AES128,
		IpsecPolicy_IkeEncryption_AES192,
		IpsecPolicy_IkeEncryption_AES256,
		IpsecPolicy_IkeEncryption_DES,
		IpsecPolicy_IkeEncryption_DES3,
		IpsecPolicy_IkeEncryption_GCMAES128,
		IpsecPolicy_IkeEncryption_GCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IkeIntegrity_GCMAES128,
		IpsecPolicy_IkeIntegrity_GCMAES256,
		IpsecPolicy_IkeIntegrity_MD5,
		IpsecPolicy_IkeIntegrity_SHA1,
		IpsecPolicy_IkeIntegrity_SHA256,
		IpsecPolicy_IkeIntegrity_SHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IpsecEncryption_AES128,
		IpsecPolicy_IpsecEncryption_AES192,
		IpsecPolicy_IpsecEncryption_AES256,
		IpsecPolicy_IpsecEncryption_DES,
		IpsecPolicy_IpsecEncryption_DES3,
		IpsecPolicy_IpsecEncryption_GCMAES128,
		IpsecPolicy_IpsecEncryption_GCMAES192,
		IpsecPolicy_IpsecEncryption_GCMAES256,
		IpsecPolicy_IpsecEncryption_None))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_IpsecIntegrity_GCMAES128,
		IpsecPolicy_IpsecIntegrity_GCMAES192,
		IpsecPolicy_IpsecIntegrity_GCMAES256,
		IpsecPolicy_IpsecIntegrity_MD5,
		IpsecPolicy_IpsecIntegrity_SHA1,
		IpsecPolicy_IpsecIntegrity_SHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		IpsecPolicy_PfsGroup_ECP256,
		IpsecPolicy_PfsGroup_ECP384,
		IpsecPolicy_PfsGroup_None,
		IpsecPolicy_PfsGroup_PFS1,
		IpsecPolicy_PfsGroup_PFS14,
		IpsecPolicy_PfsGroup_PFS2,
		IpsecPolicy_PfsGroup_PFS2048,
		IpsecPolicy_PfsGroup_PFS24,
		IpsecPolicy_PfsGroup_PFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServerARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServerARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServerARM, RadiusServerARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServerARM runs a test to see if a specific instance of RadiusServerARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServerARM(subject RadiusServerARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServerARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServerARM instances for property testing - lazily instantiated by RadiusServerARMGenerator()
var radiusServerARMGenerator gopter.Gen

// RadiusServerARMGenerator returns a generator of RadiusServerARM instances for property testing.
func RadiusServerARMGenerator() gopter.Gen {
	if radiusServerARMGenerator != nil {
		return radiusServerARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServerARM(generators)
	radiusServerARMGenerator = gen.Struct(reflect.TypeOf(RadiusServerARM{}), generators)

	return radiusServerARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServerARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServerARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM, VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM(subject VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM instances
// for property testing - lazily instantiated by
// VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator()
var virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator returns a generator of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator != nil {
		return virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM(generators)
	virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM(generators)
	virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM{}), generators)

	return virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRevokedCertificatesARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormatARMGenerator())
}

func Test_VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM, VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM runs a test to see if a specific instance of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM(subject VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM instances for
// property testing - lazily instantiated by
// VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator()
var virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator gopter.Gen

// VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator returns a generator of VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM instances for property testing.
// We first initialize virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator() gopter.Gen {
	if virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator != nil {
		return virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM(generators)
	virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM(generators)
	virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM{}), generators)

	return virtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_Spec_Properties_VpnClientConfiguration_VpnClientRootCertificatesARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormatARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM, VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayIPConfigurationPropertiesFormat_PrivateIPAllocationMethod_Dynamic, VirtualNetworkGatewayIPConfigurationPropertiesFormat_PrivateIPAllocationMethod_Static))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResourceARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResourceARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatARM, VpnClientRevokedCertificatePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatARM(subject VpnClientRevokedCertificatePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormatARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificatePropertiesFormatARMGenerator()
var vpnClientRevokedCertificatePropertiesFormatARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormatARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormatARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormatARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormatARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatARM(generators)
	vpnClientRevokedCertificatePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormatARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatARM, VpnClientRootCertificatePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatARM(subject VpnClientRootCertificatePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormatARM instances for property testing - lazily instantiated by
// VpnClientRootCertificatePropertiesFormatARMGenerator()
var vpnClientRootCertificatePropertiesFormatARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormatARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormatARM instances for property testing.
func VpnClientRootCertificatePropertiesFormatARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormatARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatARM(generators)
	vpnClientRootCertificatePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormatARM{}), generators)

	return vpnClientRootCertificatePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
