// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationGatewayBackendAddress_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddress_STATUSARM, ApplicationGatewayBackendAddress_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddress_STATUSARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddress_STATUSARM(subject ApplicationGatewayBackendAddress_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_STATUSARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddress_STATUSARMGenerator()
var applicationGatewayBackendAddress_STATUSARMGenerator gopter.Gen

// ApplicationGatewayBackendAddress_STATUSARMGenerator returns a generator of ApplicationGatewayBackendAddress_STATUSARM instances for property testing.
func ApplicationGatewayBackendAddress_STATUSARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddress_STATUSARMGenerator != nil {
		return applicationGatewayBackendAddress_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_STATUSARM(generators)
	applicationGatewayBackendAddress_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_STATUSARM{}), generators)

	return applicationGatewayBackendAddress_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_STATUSARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPool_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUSARM, ApplicationGatewayBackendAddressPool_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUSARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUSARM(subject ApplicationGatewayBackendAddressPool_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_STATUSARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPool_STATUSARMGenerator()
var applicationGatewayBackendAddressPool_STATUSARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPool_STATUSARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_STATUSARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPool_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPool_STATUSARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPool_STATUSARMGenerator != nil {
		return applicationGatewayBackendAddressPool_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM(generators)
	applicationGatewayBackendAddressPool_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM(generators)
	applicationGatewayBackendAddressPool_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUSARM{}), generators)

	return applicationGatewayBackendAddressPool_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM, ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddress_STATUSARMGenerator())
	gens["BackendIPConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfiguration_STATUSARMGenerator())
}

func Test_ApplicationSecurityGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroup_STATUSARM, ApplicationSecurityGroup_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroup_STATUSARM runs a test to see if a specific instance of ApplicationSecurityGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroup_STATUSARM(subject ApplicationSecurityGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_STATUSARM instances for property testing - lazily instantiated by
// ApplicationSecurityGroup_STATUSARMGenerator()
var applicationSecurityGroup_STATUSARMGenerator gopter.Gen

// ApplicationSecurityGroup_STATUSARMGenerator returns a generator of ApplicationSecurityGroup_STATUSARM instances for property testing.
// We first initialize applicationSecurityGroup_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationSecurityGroup_STATUSARMGenerator() gopter.Gen {
	if applicationSecurityGroup_STATUSARMGenerator != nil {
		return applicationSecurityGroup_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUSARM(generators)
	applicationSecurityGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationSecurityGroup_STATUSARM(generators)
	applicationSecurityGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_STATUSARM{}), generators)

	return applicationSecurityGroup_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationSecurityGroup_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationSecurityGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationSecurityGroupPropertiesFormat_STATUSARMGenerator())
}

func Test_ApplicationSecurityGroupPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroupPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupPropertiesFormat_STATUSARM, ApplicationSecurityGroupPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupPropertiesFormat_STATUSARM runs a test to see if a specific instance of ApplicationSecurityGroupPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupPropertiesFormat_STATUSARM(subject ApplicationSecurityGroupPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroupPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroupPropertiesFormat_STATUSARM instances for property testing - lazily instantiated
// by ApplicationSecurityGroupPropertiesFormat_STATUSARMGenerator()
var applicationSecurityGroupPropertiesFormat_STATUSARMGenerator gopter.Gen

// ApplicationSecurityGroupPropertiesFormat_STATUSARMGenerator returns a generator of ApplicationSecurityGroupPropertiesFormat_STATUSARM instances for property testing.
func ApplicationSecurityGroupPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if applicationSecurityGroupPropertiesFormat_STATUSARMGenerator != nil {
		return applicationSecurityGroupPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupPropertiesFormat_STATUSARM(generators)
	applicationSecurityGroupPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroupPropertiesFormat_STATUSARM{}), generators)

	return applicationSecurityGroupPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

func Test_CustomDnsConfigPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDnsConfigPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDnsConfigPropertiesFormat_STATUSARM, CustomDnsConfigPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDnsConfigPropertiesFormat_STATUSARM runs a test to see if a specific instance of CustomDnsConfigPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDnsConfigPropertiesFormat_STATUSARM(subject CustomDnsConfigPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDnsConfigPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDnsConfigPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// CustomDnsConfigPropertiesFormat_STATUSARMGenerator()
var customDnsConfigPropertiesFormat_STATUSARMGenerator gopter.Gen

// CustomDnsConfigPropertiesFormat_STATUSARMGenerator returns a generator of CustomDnsConfigPropertiesFormat_STATUSARM instances for property testing.
func CustomDnsConfigPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if customDnsConfigPropertiesFormat_STATUSARMGenerator != nil {
		return customDnsConfigPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDnsConfigPropertiesFormat_STATUSARM(generators)
	customDnsConfigPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CustomDnsConfigPropertiesFormat_STATUSARM{}), generators)

	return customDnsConfigPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDnsConfigPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDnsConfigPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_FlowLog_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLog_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLog_STATUSARM, FlowLog_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLog_STATUSARM runs a test to see if a specific instance of FlowLog_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLog_STATUSARM(subject FlowLog_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLog_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLog_STATUSARM instances for property testing - lazily instantiated by FlowLog_STATUSARMGenerator()
var flowLog_STATUSARMGenerator gopter.Gen

// FlowLog_STATUSARMGenerator returns a generator of FlowLog_STATUSARM instances for property testing.
// We first initialize flowLog_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlowLog_STATUSARMGenerator() gopter.Gen {
	if flowLog_STATUSARMGenerator != nil {
		return flowLog_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLog_STATUSARM(generators)
	flowLog_STATUSARMGenerator = gen.Struct(reflect.TypeOf(FlowLog_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLog_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForFlowLog_STATUSARM(generators)
	flowLog_STATUSARMGenerator = gen.Struct(reflect.TypeOf(FlowLog_STATUSARM{}), generators)

	return flowLog_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLog_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLog_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlowLog_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlowLog_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FlowLogPropertiesFormat_STATUSARMGenerator())
}

func Test_FlowLogFormatParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogFormatParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogFormatParameters_STATUSARM, FlowLogFormatParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogFormatParameters_STATUSARM runs a test to see if a specific instance of FlowLogFormatParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogFormatParameters_STATUSARM(subject FlowLogFormatParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogFormatParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogFormatParameters_STATUSARM instances for property testing - lazily instantiated by
// FlowLogFormatParameters_STATUSARMGenerator()
var flowLogFormatParameters_STATUSARMGenerator gopter.Gen

// FlowLogFormatParameters_STATUSARMGenerator returns a generator of FlowLogFormatParameters_STATUSARM instances for property testing.
func FlowLogFormatParameters_STATUSARMGenerator() gopter.Gen {
	if flowLogFormatParameters_STATUSARMGenerator != nil {
		return flowLogFormatParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUSARM(generators)
	flowLogFormatParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(FlowLogFormatParameters_STATUSARM{}), generators)

	return flowLogFormatParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(FlowLogFormatParameters_Type_JSON_STATUS))
	gens["Version"] = gen.PtrOf(gen.Int())
}

func Test_FlowLogPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogPropertiesFormat_STATUSARM, FlowLogPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogPropertiesFormat_STATUSARM runs a test to see if a specific instance of FlowLogPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogPropertiesFormat_STATUSARM(subject FlowLogPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// FlowLogPropertiesFormat_STATUSARMGenerator()
var flowLogPropertiesFormat_STATUSARMGenerator gopter.Gen

// FlowLogPropertiesFormat_STATUSARMGenerator returns a generator of FlowLogPropertiesFormat_STATUSARM instances for property testing.
// We first initialize flowLogPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlowLogPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if flowLogPropertiesFormat_STATUSARMGenerator != nil {
		return flowLogPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM(generators)
	flowLogPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(FlowLogPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM(generators)
	flowLogPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(FlowLogPropertiesFormat_STATUSARM{}), generators)

	return flowLogPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["StorageId"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlowLogPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["FlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsProperties_STATUSARMGenerator())
	gens["Format"] = gen.PtrOf(FlowLogFormatParameters_STATUSARMGenerator())
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicyParameters_STATUSARMGenerator())
}

func Test_NetworkInterface_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterface_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterface_STATUSARM, NetworkInterface_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterface_STATUSARM runs a test to see if a specific instance of NetworkInterface_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterface_STATUSARM(subject NetworkInterface_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterface_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterface_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterface_STATUSARMGenerator()
var networkInterface_STATUSARMGenerator gopter.Gen

// NetworkInterface_STATUSARMGenerator returns a generator of NetworkInterface_STATUSARM instances for property testing.
// We first initialize networkInterface_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterface_STATUSARMGenerator() gopter.Gen {
	if networkInterface_STATUSARMGenerator != nil {
		return networkInterface_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_STATUSARM(generators)
	networkInterface_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterface_STATUSARM(generators)
	networkInterface_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_STATUSARM{}), generators)

	return networkInterface_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterface_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterface_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterface_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterface_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormat_STATUSARMGenerator())
}

func Test_NetworkInterfaceDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettings_STATUSARM, NetworkInterfaceDnsSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettings_STATUSARM runs a test to see if a specific instance of NetworkInterfaceDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettings_STATUSARM(subject NetworkInterfaceDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettings_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterfaceDnsSettings_STATUSARMGenerator()
var networkInterfaceDnsSettings_STATUSARMGenerator gopter.Gen

// NetworkInterfaceDnsSettings_STATUSARMGenerator returns a generator of NetworkInterfaceDnsSettings_STATUSARM instances for property testing.
func NetworkInterfaceDnsSettings_STATUSARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettings_STATUSARMGenerator != nil {
		return networkInterfaceDnsSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_STATUSARM(generators)
	networkInterfaceDnsSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettings_STATUSARM{}), generators)

	return networkInterfaceDnsSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["AppliedDnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["InternalDomainNameSuffix"] = gen.PtrOf(gen.AlphaString())
	gens["InternalFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfiguration_STATUSARM, NetworkInterfaceIPConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfiguration_STATUSARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfiguration_STATUSARM(subject NetworkInterfaceIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterfaceIPConfiguration_STATUSARMGenerator()
var networkInterfaceIPConfiguration_STATUSARMGenerator gopter.Gen

// NetworkInterfaceIPConfiguration_STATUSARMGenerator returns a generator of NetworkInterfaceIPConfiguration_STATUSARM instances for property testing.
// We first initialize networkInterfaceIPConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfiguration_STATUSARMGenerator() gopter.Gen {
	if networkInterfaceIPConfiguration_STATUSARMGenerator != nil {
		return networkInterfaceIPConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM(generators)
	networkInterfaceIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM(generators)
	networkInterfaceIPConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_STATUSARM{}), generators)

	return networkInterfaceIPConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM, NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM instances for property testing
// - lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM, NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_IPv4_STATUS, IPVersion_IPv6_STATUS))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_Dynamic_STATUS, IPAllocationMethod_Static_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPool_STATUSARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_STATUSARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPool_STATUSARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRule_STATUSARMGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_STATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_STATUSARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTap_STATUSARMGenerator())
}

func Test_NetworkInterfacePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormat_STATUSARM, NetworkInterfacePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormat_STATUSARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormat_STATUSARM(subject NetworkInterfacePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterfacePropertiesFormat_STATUSARMGenerator()
var networkInterfacePropertiesFormat_STATUSARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormat_STATUSARMGenerator returns a generator of NetworkInterfacePropertiesFormat_STATUSARM instances for property testing.
// We first initialize networkInterfacePropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormat_STATUSARMGenerator != nil {
		return networkInterfacePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM(generators)
	networkInterfacePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM(generators)
	networkInterfacePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_STATUSARM{}), generators)

	return networkInterfacePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["HostedWorkloads"] = gen.SliceOf(gen.AlphaString())
	gens["MacAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormat_MigrationPhase_Abort_STATUS,
		NetworkInterfacePropertiesFormat_MigrationPhase_Commit_STATUS,
		NetworkInterfacePropertiesFormat_MigrationPhase_Committed_STATUS,
		NetworkInterfacePropertiesFormat_MigrationPhase_None_STATUS,
		NetworkInterfacePropertiesFormat_MigrationPhase_Prepare_STATUS))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormat_NicType_Elastic_STATUS, NetworkInterfacePropertiesFormat_NicType_Standard_STATUS))
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettings_STATUSARMGenerator())
	gens["DscpConfiguration"] = gen.PtrOf(SubResource_STATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfiguration_STATUSARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_STATUSARMGenerator())
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpoint_STATUSARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkService_STATUSARMGenerator())
	gens["TapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfiguration_STATUSARMGenerator())
	gens["VirtualMachine"] = gen.PtrOf(SubResource_STATUSARMGenerator())
}

func Test_NetworkInterfaceTapConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfiguration_STATUSARM, NetworkInterfaceTapConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfiguration_STATUSARM runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfiguration_STATUSARM(subject NetworkInterfaceTapConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterfaceTapConfiguration_STATUSARMGenerator()
var networkInterfaceTapConfiguration_STATUSARMGenerator gopter.Gen

// NetworkInterfaceTapConfiguration_STATUSARMGenerator returns a generator of NetworkInterfaceTapConfiguration_STATUSARM instances for property testing.
// We first initialize networkInterfaceTapConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceTapConfiguration_STATUSARMGenerator() gopter.Gen {
	if networkInterfaceTapConfiguration_STATUSARMGenerator != nil {
		return networkInterfaceTapConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM(generators)
	networkInterfaceTapConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM(generators)
	networkInterfaceTapConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_STATUSARM{}), generators)

	return networkInterfaceTapConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator())
}

func Test_NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM, NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM runs a test to see if a specific instance of NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM(subject NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator()
var networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator gopter.Gen

// NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator returns a generator of NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator != nil {
		return networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM(generators)
	networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM(generators)
	networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM{}), generators)

	return networkInterfaceTapConfigurationPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["VirtualNetworkTap"] = gen.PtrOf(VirtualNetworkTap_STATUSARMGenerator())
}

func Test_NetworkSecurityGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_STATUSARM, NetworkSecurityGroup_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_STATUSARM runs a test to see if a specific instance of NetworkSecurityGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_STATUSARM(subject NetworkSecurityGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_STATUSARM instances for property testing - lazily instantiated by
// NetworkSecurityGroup_STATUSARMGenerator()
var networkSecurityGroup_STATUSARMGenerator gopter.Gen

// NetworkSecurityGroup_STATUSARMGenerator returns a generator of NetworkSecurityGroup_STATUSARM instances for property testing.
// We first initialize networkSecurityGroup_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroup_STATUSARMGenerator() gopter.Gen {
	if networkSecurityGroup_STATUSARMGenerator != nil {
		return networkSecurityGroup_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUSARM(generators)
	networkSecurityGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroup_STATUSARM(generators)
	networkSecurityGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_STATUSARM{}), generators)

	return networkSecurityGroup_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroup_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormat_STATUSARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_STATUSARM, NetworkSecurityGroupPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_STATUSARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_STATUSARM(subject NetworkSecurityGroupPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// NetworkSecurityGroupPropertiesFormat_STATUSARMGenerator()
var networkSecurityGroupPropertiesFormat_STATUSARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormat_STATUSARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_STATUSARM instances for property testing.
// We first initialize networkSecurityGroupPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormat_STATUSARMGenerator != nil {
		return networkSecurityGroupPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM(generators)
	networkSecurityGroupPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM(generators)
	networkSecurityGroupPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_STATUSARM{}), generators)

	return networkSecurityGroupPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DefaultSecurityRules"] = gen.SliceOf(SecurityRule_STATUSARMGenerator())
	gens["FlowLogs"] = gen.SliceOf(FlowLog_STATUSARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_STATUSARMGenerator())
	gens["SecurityRules"] = gen.SliceOf(SecurityRule_STATUSARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_STATUSARMGenerator())
}

func Test_PrivateEndpoint_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpoint_STATUSARM, PrivateEndpoint_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpoint_STATUSARM runs a test to see if a specific instance of PrivateEndpoint_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpoint_STATUSARM(subject PrivateEndpoint_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpoint_STATUSARMGenerator()
var privateEndpoint_STATUSARMGenerator gopter.Gen

// PrivateEndpoint_STATUSARMGenerator returns a generator of PrivateEndpoint_STATUSARM instances for property testing.
// We first initialize privateEndpoint_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpoint_STATUSARMGenerator() gopter.Gen {
	if privateEndpoint_STATUSARMGenerator != nil {
		return privateEndpoint_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUSARM(generators)
	privateEndpoint_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpoint_STATUSARM(generators)
	privateEndpoint_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUSARM{}), generators)

	return privateEndpoint_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpoint_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpoint_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateEndpointProperties_STATUSARMGenerator())
}

func Test_PrivateEndpointConnection_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM, PrivateEndpointConnection_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM(subject PrivateEndpointConnection_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUSARMGenerator()
var privateEndpointConnection_STATUSARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUSARMGenerator returns a generator of PrivateEndpointConnection_STATUSARM instances for property testing.
// We first initialize privateEndpointConnection_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnection_STATUSARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUSARMGenerator != nil {
		return privateEndpointConnection_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(generators)
	privateEndpointConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(generators)
	privateEndpointConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUSARM{}), generators)

	return privateEndpointConnection_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateEndpointConnectionProperties_STATUSARMGenerator())
}

func Test_PrivateEndpointConnectionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUSARM, PrivateEndpointConnectionProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUSARM runs a test to see if a specific instance of PrivateEndpointConnectionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUSARM(subject PrivateEndpointConnectionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionProperties_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointConnectionProperties_STATUSARMGenerator()
var privateEndpointConnectionProperties_STATUSARMGenerator gopter.Gen

// PrivateEndpointConnectionProperties_STATUSARMGenerator returns a generator of PrivateEndpointConnectionProperties_STATUSARM instances for property testing.
// We first initialize privateEndpointConnectionProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionProperties_STATUSARMGenerator() gopter.Gen {
	if privateEndpointConnectionProperties_STATUSARMGenerator != nil {
		return privateEndpointConnectionProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM(generators)
	privateEndpointConnectionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM(generators)
	privateEndpointConnectionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_STATUSARM{}), generators)

	return privateEndpointConnectionProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["LinkIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpoint_STATUSARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_STATUSARMGenerator())
}

func Test_PrivateEndpointProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointProperties_STATUSARM, PrivateEndpointProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointProperties_STATUSARM runs a test to see if a specific instance of PrivateEndpointProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointProperties_STATUSARM(subject PrivateEndpointProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointProperties_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointProperties_STATUSARMGenerator()
var privateEndpointProperties_STATUSARMGenerator gopter.Gen

// PrivateEndpointProperties_STATUSARMGenerator returns a generator of PrivateEndpointProperties_STATUSARM instances for property testing.
// We first initialize privateEndpointProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointProperties_STATUSARMGenerator() gopter.Gen {
	if privateEndpointProperties_STATUSARMGenerator != nil {
		return privateEndpointProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUSARM(generators)
	privateEndpointProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointProperties_STATUSARM(generators)
	privateEndpointProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperties_STATUSARM{}), generators)

	return privateEndpointProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForPrivateEndpointProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CustomDnsConfigs"] = gen.SliceOf(CustomDnsConfigPropertiesFormat_STATUSARMGenerator())
	gens["ManualPrivateLinkServiceConnections"] = gen.SliceOf(PrivateLinkServiceConnection_STATUSARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_STATUSARMGenerator())
	gens["PrivateLinkServiceConnections"] = gen.SliceOf(PrivateLinkServiceConnection_STATUSARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_STATUSARMGenerator())
}

func Test_PrivateLinkService_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkService_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkService_STATUSARM, PrivateLinkService_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkService_STATUSARM runs a test to see if a specific instance of PrivateLinkService_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkService_STATUSARM(subject PrivateLinkService_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkService_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkService_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkService_STATUSARMGenerator()
var privateLinkService_STATUSARMGenerator gopter.Gen

// PrivateLinkService_STATUSARMGenerator returns a generator of PrivateLinkService_STATUSARM instances for property testing.
// We first initialize privateLinkService_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkService_STATUSARMGenerator() gopter.Gen {
	if privateLinkService_STATUSARMGenerator != nil {
		return privateLinkService_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkService_STATUSARM(generators)
	privateLinkService_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkService_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkService_STATUSARM(generators)
	privateLinkService_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_STATUSARM{}), generators)

	return privateLinkService_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkService_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkService_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkService_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkService_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceProperties_STATUSARMGenerator())
}

func Test_PrivateLinkServiceConnection_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnection_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnection_STATUSARM, PrivateLinkServiceConnection_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnection_STATUSARM runs a test to see if a specific instance of PrivateLinkServiceConnection_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnection_STATUSARM(subject PrivateLinkServiceConnection_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnection_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnection_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnection_STATUSARMGenerator()
var privateLinkServiceConnection_STATUSARMGenerator gopter.Gen

// PrivateLinkServiceConnection_STATUSARMGenerator returns a generator of PrivateLinkServiceConnection_STATUSARM instances for property testing.
// We first initialize privateLinkServiceConnection_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceConnection_STATUSARMGenerator() gopter.Gen {
	if privateLinkServiceConnection_STATUSARMGenerator != nil {
		return privateLinkServiceConnection_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM(generators)
	privateLinkServiceConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnection_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM(generators)
	privateLinkServiceConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnection_STATUSARM{}), generators)

	return privateLinkServiceConnection_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceConnectionProperties_STATUSARMGenerator())
}

func Test_PrivateLinkServiceConnectionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_STATUSARM, PrivateLinkServiceConnectionProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_STATUSARM runs a test to see if a specific instance of PrivateLinkServiceConnectionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_STATUSARM(subject PrivateLinkServiceConnectionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionProperties_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionProperties_STATUSARMGenerator()
var privateLinkServiceConnectionProperties_STATUSARMGenerator gopter.Gen

// PrivateLinkServiceConnectionProperties_STATUSARMGenerator returns a generator of PrivateLinkServiceConnectionProperties_STATUSARM instances for property testing.
// We first initialize privateLinkServiceConnectionProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceConnectionProperties_STATUSARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionProperties_STATUSARMGenerator != nil {
		return privateLinkServiceConnectionProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM(generators)
	privateLinkServiceConnectionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM(generators)
	privateLinkServiceConnectionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionProperties_STATUSARM{}), generators)

	return privateLinkServiceConnectionProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["GroupIds"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateLinkServiceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_STATUSARMGenerator())
}

func Test_PrivateLinkServiceConnectionState_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionState_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUSARM, PrivateLinkServiceConnectionState_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUSARM runs a test to see if a specific instance of PrivateLinkServiceConnectionState_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUSARM(subject PrivateLinkServiceConnectionState_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionState_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionState_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionState_STATUSARMGenerator()
var privateLinkServiceConnectionState_STATUSARMGenerator gopter.Gen

// PrivateLinkServiceConnectionState_STATUSARMGenerator returns a generator of PrivateLinkServiceConnectionState_STATUSARM instances for property testing.
func PrivateLinkServiceConnectionState_STATUSARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionState_STATUSARMGenerator != nil {
		return privateLinkServiceConnectionState_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUSARM(generators)
	privateLinkServiceConnectionState_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionState_STATUSARM{}), generators)

	return privateLinkServiceConnectionState_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUSARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceIpConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_STATUSARM, PrivateLinkServiceIpConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_STATUSARM runs a test to see if a specific instance of PrivateLinkServiceIpConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_STATUSARM(subject PrivateLinkServiceIpConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfiguration_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkServiceIpConfiguration_STATUSARMGenerator()
var privateLinkServiceIpConfiguration_STATUSARMGenerator gopter.Gen

// PrivateLinkServiceIpConfiguration_STATUSARMGenerator returns a generator of PrivateLinkServiceIpConfiguration_STATUSARM instances for property testing.
// We first initialize privateLinkServiceIpConfiguration_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfiguration_STATUSARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfiguration_STATUSARMGenerator != nil {
		return privateLinkServiceIpConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM(generators)
	privateLinkServiceIpConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM(generators)
	privateLinkServiceIpConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_STATUSARM{}), generators)

	return privateLinkServiceIpConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceIpConfigurationProperties_STATUSARMGenerator())
}

func Test_PrivateLinkServiceIpConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_STATUSARM, PrivateLinkServiceIpConfigurationProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_STATUSARM runs a test to see if a specific instance of PrivateLinkServiceIpConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_STATUSARM(subject PrivateLinkServiceIpConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfigurationProperties_STATUSARM instances for property testing - lazily
// instantiated by PrivateLinkServiceIpConfigurationProperties_STATUSARMGenerator()
var privateLinkServiceIpConfigurationProperties_STATUSARMGenerator gopter.Gen

// PrivateLinkServiceIpConfigurationProperties_STATUSARMGenerator returns a generator of PrivateLinkServiceIpConfigurationProperties_STATUSARM instances for property testing.
// We first initialize privateLinkServiceIpConfigurationProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfigurationProperties_STATUSARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfigurationProperties_STATUSARMGenerator != nil {
		return privateLinkServiceIpConfigurationProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM(generators)
	privateLinkServiceIpConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM(generators)
	privateLinkServiceIpConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_STATUSARM{}), generators)

	return privateLinkServiceIpConfigurationProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_IPv4_STATUS, IPVersion_IPv6_STATUS))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_Dynamic_STATUS, IPAllocationMethod_Static_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_STATUSARMGenerator())
}

func Test_PrivateLinkServiceProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceProperties_STATUSARM, PrivateLinkServiceProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceProperties_STATUSARM runs a test to see if a specific instance of PrivateLinkServiceProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceProperties_STATUSARM(subject PrivateLinkServiceProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceProperties_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkServiceProperties_STATUSARMGenerator()
var privateLinkServiceProperties_STATUSARMGenerator gopter.Gen

// PrivateLinkServiceProperties_STATUSARMGenerator returns a generator of PrivateLinkServiceProperties_STATUSARM instances for property testing.
// We first initialize privateLinkServiceProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceProperties_STATUSARMGenerator() gopter.Gen {
	if privateLinkServiceProperties_STATUSARMGenerator != nil {
		return privateLinkServiceProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM(generators)
	privateLinkServiceProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM(generators)
	privateLinkServiceProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_STATUSARM{}), generators)

	return privateLinkServiceProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Alias"] = gen.PtrOf(gen.AlphaString())
	gens["EnableProxyProtocol"] = gen.PtrOf(gen.Bool())
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutoApproval"] = gen.PtrOf(ResourceSet_STATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(PrivateLinkServiceIpConfiguration_STATUSARMGenerator())
	gens["LoadBalancerFrontendIpConfigurations"] = gen.SliceOf(FrontendIPConfiguration_STATUSARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_STATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUSARMGenerator())
	gens["Visibility"] = gen.PtrOf(ResourceSet_STATUSARMGenerator())
}

func Test_ResourceSet_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSet_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSet_STATUSARM, ResourceSet_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSet_STATUSARM runs a test to see if a specific instance of ResourceSet_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSet_STATUSARM(subject ResourceSet_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSet_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSet_STATUSARM instances for property testing - lazily instantiated by
// ResourceSet_STATUSARMGenerator()
var resourceSet_STATUSARMGenerator gopter.Gen

// ResourceSet_STATUSARMGenerator returns a generator of ResourceSet_STATUSARM instances for property testing.
func ResourceSet_STATUSARMGenerator() gopter.Gen {
	if resourceSet_STATUSARMGenerator != nil {
		return resourceSet_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSet_STATUSARM(generators)
	resourceSet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceSet_STATUSARM{}), generators)

	return resourceSet_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSet_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSet_STATUSARM(gens map[string]gopter.Gen) {
	gens["Subscriptions"] = gen.SliceOf(gen.AlphaString())
}

func Test_RetentionPolicyParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionPolicyParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionPolicyParameters_STATUSARM, RetentionPolicyParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionPolicyParameters_STATUSARM runs a test to see if a specific instance of RetentionPolicyParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionPolicyParameters_STATUSARM(subject RetentionPolicyParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionPolicyParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionPolicyParameters_STATUSARM instances for property testing - lazily instantiated by
// RetentionPolicyParameters_STATUSARMGenerator()
var retentionPolicyParameters_STATUSARMGenerator gopter.Gen

// RetentionPolicyParameters_STATUSARMGenerator returns a generator of RetentionPolicyParameters_STATUSARM instances for property testing.
func RetentionPolicyParameters_STATUSARMGenerator() gopter.Gen {
	if retentionPolicyParameters_STATUSARMGenerator != nil {
		return retentionPolicyParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUSARM(generators)
	retentionPolicyParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RetentionPolicyParameters_STATUSARM{}), generators)

	return retentionPolicyParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_SecurityRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRule_STATUSARM, SecurityRule_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRule_STATUSARM runs a test to see if a specific instance of SecurityRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRule_STATUSARM(subject SecurityRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_STATUSARM instances for property testing - lazily instantiated by
// SecurityRule_STATUSARMGenerator()
var securityRule_STATUSARMGenerator gopter.Gen

// SecurityRule_STATUSARMGenerator returns a generator of SecurityRule_STATUSARM instances for property testing.
// We first initialize securityRule_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRule_STATUSARMGenerator() gopter.Gen {
	if securityRule_STATUSARMGenerator != nil {
		return securityRule_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_STATUSARM(generators)
	securityRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRule_STATUSARM(generators)
	securityRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_STATUSARM{}), generators)

	return securityRule_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRule_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRule_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SecurityRulePropertiesFormat_STATUSARMGenerator())
}

func Test_SecurityRulePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRulePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRulePropertiesFormat_STATUSARM, SecurityRulePropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRulePropertiesFormat_STATUSARM runs a test to see if a specific instance of SecurityRulePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRulePropertiesFormat_STATUSARM(subject SecurityRulePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRulePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRulePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// SecurityRulePropertiesFormat_STATUSARMGenerator()
var securityRulePropertiesFormat_STATUSARMGenerator gopter.Gen

// SecurityRulePropertiesFormat_STATUSARMGenerator returns a generator of SecurityRulePropertiesFormat_STATUSARM instances for property testing.
// We first initialize securityRulePropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRulePropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if securityRulePropertiesFormat_STATUSARMGenerator != nil {
		return securityRulePropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM(generators)
	securityRulePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM(generators)
	securityRulePropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_STATUSARM{}), generators)

	return securityRulePropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["Access"] = gen.PtrOf(gen.OneConstOf(SecurityRuleAccess_Allow_STATUS, SecurityRuleAccess_Deny_STATUS))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["DestinationPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationPortRanges"] = gen.SliceOf(gen.AlphaString())
	gens["Direction"] = gen.PtrOf(gen.OneConstOf(SecurityRuleDirection_Inbound_STATUS, SecurityRuleDirection_Outbound_STATUS))
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		SecurityRulePropertiesFormat_Protocol_Ah_STATUS,
		SecurityRulePropertiesFormat_Protocol_Esp_STATUS,
		SecurityRulePropertiesFormat_Protocol_Icmp_STATUS,
		SecurityRulePropertiesFormat_Protocol_Star_STATUS,
		SecurityRulePropertiesFormat_Protocol_Tcp_STATUS,
		SecurityRulePropertiesFormat_Protocol_Udp_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["SourceAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["SourceAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["SourcePortRange"] = gen.PtrOf(gen.AlphaString())
	gens["SourcePortRanges"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DestinationApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_STATUSARMGenerator())
	gens["SourceApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_STATUSARMGenerator())
}

func Test_SubResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_STATUSARM, SubResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_STATUSARM runs a test to see if a specific instance of SubResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_STATUSARM(subject SubResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUSARM instances for property testing - lazily instantiated by
// SubResource_STATUSARMGenerator()
var subResource_STATUSARMGenerator gopter.Gen

// SubResource_STATUSARMGenerator returns a generator of SubResource_STATUSARM instances for property testing.
func SubResource_STATUSARMGenerator() gopter.Gen {
	if subResource_STATUSARMGenerator != nil {
		return subResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_STATUSARM(generators)
	subResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUSARM{}), generators)

	return subResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TrafficAnalyticsConfigurationProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsConfigurationProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUSARM, TrafficAnalyticsConfigurationProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUSARM runs a test to see if a specific instance of TrafficAnalyticsConfigurationProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUSARM(subject TrafficAnalyticsConfigurationProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsConfigurationProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsConfigurationProperties_STATUSARM instances for property testing - lazily instantiated
// by TrafficAnalyticsConfigurationProperties_STATUSARMGenerator()
var trafficAnalyticsConfigurationProperties_STATUSARMGenerator gopter.Gen

// TrafficAnalyticsConfigurationProperties_STATUSARMGenerator returns a generator of TrafficAnalyticsConfigurationProperties_STATUSARM instances for property testing.
func TrafficAnalyticsConfigurationProperties_STATUSARMGenerator() gopter.Gen {
	if trafficAnalyticsConfigurationProperties_STATUSARMGenerator != nil {
		return trafficAnalyticsConfigurationProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUSARM(generators)
	trafficAnalyticsConfigurationProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsConfigurationProperties_STATUSARM{}), generators)

	return trafficAnalyticsConfigurationProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["TrafficAnalyticsInterval"] = gen.PtrOf(gen.Int())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceRegion"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_TrafficAnalyticsProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsProperties_STATUSARM, TrafficAnalyticsProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsProperties_STATUSARM runs a test to see if a specific instance of TrafficAnalyticsProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsProperties_STATUSARM(subject TrafficAnalyticsProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsProperties_STATUSARM instances for property testing - lazily instantiated by
// TrafficAnalyticsProperties_STATUSARMGenerator()
var trafficAnalyticsProperties_STATUSARMGenerator gopter.Gen

// TrafficAnalyticsProperties_STATUSARMGenerator returns a generator of TrafficAnalyticsProperties_STATUSARM instances for property testing.
func TrafficAnalyticsProperties_STATUSARMGenerator() gopter.Gen {
	if trafficAnalyticsProperties_STATUSARMGenerator != nil {
		return trafficAnalyticsProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUSARM(generators)
	trafficAnalyticsProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsProperties_STATUSARM{}), generators)

	return trafficAnalyticsProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["NetworkWatcherFlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsConfigurationProperties_STATUSARMGenerator())
}

func Test_VirtualNetworkTap_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTap_STATUSARM, VirtualNetworkTap_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTap_STATUSARM runs a test to see if a specific instance of VirtualNetworkTap_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTap_STATUSARM(subject VirtualNetworkTap_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkTap_STATUSARMGenerator()
var virtualNetworkTap_STATUSARMGenerator gopter.Gen

// VirtualNetworkTap_STATUSARMGenerator returns a generator of VirtualNetworkTap_STATUSARM instances for property testing.
// We first initialize virtualNetworkTap_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTap_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkTap_STATUSARMGenerator != nil {
		return virtualNetworkTap_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUSARM(generators)
	virtualNetworkTap_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTap_STATUSARM(generators)
	virtualNetworkTap_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_STATUSARM{}), generators)

	return virtualNetworkTap_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTap_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTap_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkTapPropertiesFormat_STATUSARMGenerator())
}

func Test_VirtualNetworkTapPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_STATUSARM, VirtualNetworkTapPropertiesFormat_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_STATUSARM runs a test to see if a specific instance of VirtualNetworkTapPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_STATUSARM(subject VirtualNetworkTapPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkTapPropertiesFormat_STATUSARMGenerator()
var virtualNetworkTapPropertiesFormat_STATUSARMGenerator gopter.Gen

// VirtualNetworkTapPropertiesFormat_STATUSARMGenerator returns a generator of VirtualNetworkTapPropertiesFormat_STATUSARM instances for property testing.
// We first initialize virtualNetworkTapPropertiesFormat_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapPropertiesFormat_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkTapPropertiesFormat_STATUSARMGenerator != nil {
		return virtualNetworkTapPropertiesFormat_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM(generators)
	virtualNetworkTapPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM(generators)
	virtualNetworkTapPropertiesFormat_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_STATUSARM{}), generators)

	return virtualNetworkTapPropertiesFormat_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUSARM(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(FrontendIPConfiguration_STATUSARMGenerator())
	gens["DestinationNetworkInterfaceIPConfiguration"] = gen.PtrOf(NetworkInterfaceIPConfiguration_STATUSARMGenerator())
	gens["NetworkInterfaceTapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfiguration_STATUSARMGenerator())
}
