// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApplicationGatewayBackendAddress_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddress_STATUS_ARM, ApplicationGatewayBackendAddress_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddress_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddress_STATUS_ARM(subject ApplicationGatewayBackendAddress_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddress_STATUS_ARMGenerator()
var applicationGatewayBackendAddress_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddress_STATUS_ARMGenerator returns a generator of ApplicationGatewayBackendAddress_STATUS_ARM instances for property testing.
func ApplicationGatewayBackendAddress_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddress_STATUS_ARMGenerator != nil {
		return applicationGatewayBackendAddress_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_STATUS_ARM(generators)
	applicationGatewayBackendAddress_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_STATUS_ARM{}), generators)

	return applicationGatewayBackendAddress_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPool_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUS_ARM, ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPool_STATUS_ARM(subject ApplicationGatewayBackendAddressPool_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator()
var applicationGatewayBackendAddressPool_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_STATUS_ARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPool_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPool_STATUS_ARMGenerator != nil {
		return applicationGatewayBackendAddressPool_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(generators)
	applicationGatewayBackendAddressPool_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(generators)
	applicationGatewayBackendAddressPool_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUS_ARM{}), generators)

	return applicationGatewayBackendAddressPool_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM, ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM instances for property testing - lazily
// instantiated by ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddress_STATUS_ARMGenerator())
	gens["BackendIPConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfiguration_STATUS_ARMGenerator())
}

func Test_ApplicationSecurityGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroup_STATUS_ARM, ApplicationSecurityGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroup_STATUS_ARM runs a test to see if a specific instance of ApplicationSecurityGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroup_STATUS_ARM(subject ApplicationSecurityGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_STATUS_ARM instances for property testing - lazily instantiated by
// ApplicationSecurityGroup_STATUS_ARMGenerator()
var applicationSecurityGroup_STATUS_ARMGenerator gopter.Gen

// ApplicationSecurityGroup_STATUS_ARMGenerator returns a generator of ApplicationSecurityGroup_STATUS_ARM instances for property testing.
// We first initialize applicationSecurityGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationSecurityGroup_STATUS_ARMGenerator() gopter.Gen {
	if applicationSecurityGroup_STATUS_ARMGenerator != nil {
		return applicationSecurityGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM(generators)
	applicationSecurityGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM(generators)
	applicationSecurityGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_STATUS_ARM{}), generators)

	return applicationSecurityGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationSecurityGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator())
}

func Test_ApplicationSecurityGroupPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroupPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupPropertiesFormat_STATUS_ARM, ApplicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of ApplicationSecurityGroupPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupPropertiesFormat_STATUS_ARM(subject ApplicationSecurityGroupPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroupPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroupPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated
// by ApplicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator()
var applicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// ApplicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator returns a generator of ApplicationSecurityGroupPropertiesFormat_STATUS_ARM instances for property testing.
func ApplicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if applicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator != nil {
		return applicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupPropertiesFormat_STATUS_ARM(generators)
	applicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroupPropertiesFormat_STATUS_ARM{}), generators)

	return applicationSecurityGroupPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

func Test_CustomDnsConfigPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDnsConfigPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDnsConfigPropertiesFormat_STATUS_ARM, CustomDnsConfigPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDnsConfigPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of CustomDnsConfigPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDnsConfigPropertiesFormat_STATUS_ARM(subject CustomDnsConfigPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDnsConfigPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDnsConfigPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// CustomDnsConfigPropertiesFormat_STATUS_ARMGenerator()
var customDnsConfigPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// CustomDnsConfigPropertiesFormat_STATUS_ARMGenerator returns a generator of CustomDnsConfigPropertiesFormat_STATUS_ARM instances for property testing.
func CustomDnsConfigPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if customDnsConfigPropertiesFormat_STATUS_ARMGenerator != nil {
		return customDnsConfigPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDnsConfigPropertiesFormat_STATUS_ARM(generators)
	customDnsConfigPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomDnsConfigPropertiesFormat_STATUS_ARM{}), generators)

	return customDnsConfigPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDnsConfigPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDnsConfigPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_FlowLog_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLog_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLog_STATUS_ARM, FlowLog_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLog_STATUS_ARM runs a test to see if a specific instance of FlowLog_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLog_STATUS_ARM(subject FlowLog_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLog_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLog_STATUS_ARM instances for property testing - lazily instantiated by FlowLog_STATUS_ARMGenerator()
var flowLog_STATUS_ARMGenerator gopter.Gen

// FlowLog_STATUS_ARMGenerator returns a generator of FlowLog_STATUS_ARM instances for property testing.
// We first initialize flowLog_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlowLog_STATUS_ARMGenerator() gopter.Gen {
	if flowLog_STATUS_ARMGenerator != nil {
		return flowLog_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLog_STATUS_ARM(generators)
	flowLog_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FlowLog_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLog_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFlowLog_STATUS_ARM(generators)
	flowLog_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FlowLog_STATUS_ARM{}), generators)

	return flowLog_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLog_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLog_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlowLog_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlowLog_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FlowLogPropertiesFormat_STATUS_ARMGenerator())
}

func Test_FlowLogFormatParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogFormatParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogFormatParameters_STATUS_ARM, FlowLogFormatParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogFormatParameters_STATUS_ARM runs a test to see if a specific instance of FlowLogFormatParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogFormatParameters_STATUS_ARM(subject FlowLogFormatParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogFormatParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogFormatParameters_STATUS_ARM instances for property testing - lazily instantiated by
// FlowLogFormatParameters_STATUS_ARMGenerator()
var flowLogFormatParameters_STATUS_ARMGenerator gopter.Gen

// FlowLogFormatParameters_STATUS_ARMGenerator returns a generator of FlowLogFormatParameters_STATUS_ARM instances for property testing.
func FlowLogFormatParameters_STATUS_ARMGenerator() gopter.Gen {
	if flowLogFormatParameters_STATUS_ARMGenerator != nil {
		return flowLogFormatParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUS_ARM(generators)
	flowLogFormatParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FlowLogFormatParameters_STATUS_ARM{}), generators)

	return flowLogFormatParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(FlowLogFormatParameters_Type_STATUS_JSON))
	gens["Version"] = gen.PtrOf(gen.Int())
}

func Test_FlowLogPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogPropertiesFormat_STATUS_ARM, FlowLogPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of FlowLogPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogPropertiesFormat_STATUS_ARM(subject FlowLogPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// FlowLogPropertiesFormat_STATUS_ARMGenerator()
var flowLogPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// FlowLogPropertiesFormat_STATUS_ARMGenerator returns a generator of FlowLogPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize flowLogPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlowLogPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if flowLogPropertiesFormat_STATUS_ARMGenerator != nil {
		return flowLogPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM(generators)
	flowLogPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FlowLogPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM(generators)
	flowLogPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FlowLogPropertiesFormat_STATUS_ARM{}), generators)

	return flowLogPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["StorageId"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlowLogPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsProperties_STATUS_ARMGenerator())
	gens["Format"] = gen.PtrOf(FlowLogFormatParameters_STATUS_ARMGenerator())
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicyParameters_STATUS_ARMGenerator())
}

func Test_NetworkInterface_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterface_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterface_STATUS_ARM, NetworkInterface_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterface_STATUS_ARM runs a test to see if a specific instance of NetworkInterface_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterface_STATUS_ARM(subject NetworkInterface_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterface_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterface_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkInterface_STATUS_ARMGenerator()
var networkInterface_STATUS_ARMGenerator gopter.Gen

// NetworkInterface_STATUS_ARMGenerator returns a generator of NetworkInterface_STATUS_ARM instances for property testing.
// We first initialize networkInterface_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterface_STATUS_ARMGenerator() gopter.Gen {
	if networkInterface_STATUS_ARMGenerator != nil {
		return networkInterface_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_STATUS_ARM(generators)
	networkInterface_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterface_STATUS_ARM(generators)
	networkInterface_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_STATUS_ARM{}), generators)

	return networkInterface_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterface_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterface_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterface_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterface_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormat_STATUS_ARMGenerator())
}

func Test_NetworkInterfaceDnsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettings_STATUS_ARM, NetworkInterfaceDnsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettings_STATUS_ARM runs a test to see if a specific instance of NetworkInterfaceDnsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettings_STATUS_ARM(subject NetworkInterfaceDnsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettings_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkInterfaceDnsSettings_STATUS_ARMGenerator()
var networkInterfaceDnsSettings_STATUS_ARMGenerator gopter.Gen

// NetworkInterfaceDnsSettings_STATUS_ARMGenerator returns a generator of NetworkInterfaceDnsSettings_STATUS_ARM instances for property testing.
func NetworkInterfaceDnsSettings_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettings_STATUS_ARMGenerator != nil {
		return networkInterfaceDnsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_STATUS_ARM(generators)
	networkInterfaceDnsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettings_STATUS_ARM{}), generators)

	return networkInterfaceDnsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AppliedDnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["InternalDomainNameSuffix"] = gen.PtrOf(gen.AlphaString())
	gens["InternalFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfiguration_STATUS_ARM, NetworkInterfaceIPConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfiguration_STATUS_ARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfiguration_STATUS_ARM(subject NetworkInterfaceIPConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkInterfaceIPConfiguration_STATUS_ARMGenerator()
var networkInterfaceIPConfiguration_STATUS_ARMGenerator gopter.Gen

// NetworkInterfaceIPConfiguration_STATUS_ARMGenerator returns a generator of NetworkInterfaceIPConfiguration_STATUS_ARM instances for property testing.
// We first initialize networkInterfaceIPConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfaceIPConfiguration_STATUS_ARMGenerator != nil {
		return networkInterfaceIPConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM(generators)
	networkInterfaceIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM(generators)
	networkInterfaceIPConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_STATUS_ARM{}), generators)

	return networkInterfaceIPConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM, NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM instances for property testing
// - lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM, NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM instances for property testing - lazily
// instantiated by NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_STATUS_IPv4, IPVersion_STATUS_IPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPool_STATUS_ARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_STATUS_ARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPool_STATUS_ARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRule_STATUS_ARMGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUS_ARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_STATUS_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_STATUS_ARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTap_STATUS_ARMGenerator())
}

func Test_NetworkInterfacePropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormat_STATUS_ARM, NetworkInterfacePropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormat_STATUS_ARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormat_STATUS_ARM(subject NetworkInterfacePropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkInterfacePropertiesFormat_STATUS_ARMGenerator()
var networkInterfacePropertiesFormat_STATUS_ARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormat_STATUS_ARMGenerator returns a generator of NetworkInterfacePropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize networkInterfacePropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormat_STATUS_ARMGenerator != nil {
		return networkInterfacePropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM(generators)
	networkInterfacePropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM(generators)
	networkInterfacePropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_STATUS_ARM{}), generators)

	return networkInterfacePropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["HostedWorkloads"] = gen.SliceOf(gen.AlphaString())
	gens["MacAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormat_MigrationPhase_STATUS_Abort,
		NetworkInterfacePropertiesFormat_MigrationPhase_STATUS_Commit,
		NetworkInterfacePropertiesFormat_MigrationPhase_STATUS_Committed,
		NetworkInterfacePropertiesFormat_MigrationPhase_STATUS_None,
		NetworkInterfacePropertiesFormat_MigrationPhase_STATUS_Prepare))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormat_NicType_STATUS_Elastic, NetworkInterfacePropertiesFormat_NicType_STATUS_Standard))
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettings_STATUS_ARMGenerator())
	gens["DscpConfiguration"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfiguration_STATUS_ARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_STATUS_ARMGenerator())
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpoint_STATUS_ARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkService_STATUS_ARMGenerator())
	gens["TapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfiguration_STATUS_ARMGenerator())
	gens["VirtualMachine"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
}

func Test_NetworkInterfaceTapConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfiguration_STATUS_ARM, NetworkInterfaceTapConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfiguration_STATUS_ARM runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfiguration_STATUS_ARM(subject NetworkInterfaceTapConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkInterfaceTapConfiguration_STATUS_ARMGenerator()
var networkInterfaceTapConfiguration_STATUS_ARMGenerator gopter.Gen

// NetworkInterfaceTapConfiguration_STATUS_ARMGenerator returns a generator of NetworkInterfaceTapConfiguration_STATUS_ARM instances for property testing.
// We first initialize networkInterfaceTapConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceTapConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfaceTapConfiguration_STATUS_ARMGenerator != nil {
		return networkInterfaceTapConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM(generators)
	networkInterfaceTapConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM(generators)
	networkInterfaceTapConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_STATUS_ARM{}), generators)

	return networkInterfaceTapConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator())
}

func Test_NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM, NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM(subject NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM instances for property testing - lazily
// instantiated by NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator()
var networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator returns a generator of NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator != nil {
		return networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM(generators)
	networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM(generators)
	networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM{}), generators)

	return networkInterfaceTapConfigurationPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceTapConfigurationPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["VirtualNetworkTap"] = gen.PtrOf(VirtualNetworkTap_STATUS_ARMGenerator())
}

func Test_NetworkSecurityGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_STATUS_ARM, NetworkSecurityGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_STATUS_ARM runs a test to see if a specific instance of NetworkSecurityGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_STATUS_ARM(subject NetworkSecurityGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkSecurityGroup_STATUS_ARMGenerator()
var networkSecurityGroup_STATUS_ARMGenerator gopter.Gen

// NetworkSecurityGroup_STATUS_ARMGenerator returns a generator of NetworkSecurityGroup_STATUS_ARM instances for property testing.
// We first initialize networkSecurityGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroup_STATUS_ARMGenerator() gopter.Gen {
	if networkSecurityGroup_STATUS_ARMGenerator != nil {
		return networkSecurityGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM(generators)
	networkSecurityGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM(generators)
	networkSecurityGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_STATUS_ARM{}), generators)

	return networkSecurityGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormat_STATUS_ARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_STATUS_ARM, NetworkSecurityGroupPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_STATUS_ARM(subject NetworkSecurityGroupPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkSecurityGroupPropertiesFormat_STATUS_ARMGenerator()
var networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormat_STATUS_ARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator != nil {
		return networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM(generators)
	networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM(generators)
	networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_STATUS_ARM{}), generators)

	return networkSecurityGroupPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultSecurityRules"] = gen.SliceOf(SecurityRule_STATUS_ARMGenerator())
	gens["FlowLogs"] = gen.SliceOf(FlowLog_STATUS_ARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_STATUS_ARMGenerator())
	gens["SecurityRules"] = gen.SliceOf(SecurityRule_STATUS_ARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_STATUS_ARMGenerator())
}

func Test_PrivateEndpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpoint_STATUS_ARM, PrivateEndpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpoint_STATUS_ARM runs a test to see if a specific instance of PrivateEndpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpoint_STATUS_ARM(subject PrivateEndpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpoint_STATUS_ARMGenerator()
var privateEndpoint_STATUS_ARMGenerator gopter.Gen

// PrivateEndpoint_STATUS_ARMGenerator returns a generator of PrivateEndpoint_STATUS_ARM instances for property testing.
// We first initialize privateEndpoint_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpoint_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpoint_STATUS_ARMGenerator != nil {
		return privateEndpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(generators)
	privateEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(generators)
	privateEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_ARM{}), generators)

	return privateEndpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateEndpointProperties_STATUS_ARMGenerator())
}

func Test_PrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM, PrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM(subject PrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUS_ARMGenerator()
var privateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_ARM instances for property testing.
// We first initialize privateEndpointConnection_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(generators)
	privateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(generators)
	privateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_ARM{}), generators)

	return privateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateEndpointConnectionProperties_STATUS_ARMGenerator())
}

func Test_PrivateEndpointConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUS_ARM, PrivateEndpointConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUS_ARM(subject PrivateEndpointConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionProperties_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnectionProperties_STATUS_ARMGenerator()
var privateEndpointConnectionProperties_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnectionProperties_STATUS_ARMGenerator returns a generator of PrivateEndpointConnectionProperties_STATUS_ARM instances for property testing.
// We first initialize privateEndpointConnectionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnectionProperties_STATUS_ARMGenerator != nil {
		return privateEndpointConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	privateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	privateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	return privateEndpointConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LinkIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpoint_STATUS_ARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_STATUS_ARMGenerator())
}

func Test_PrivateEndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointProperties_STATUS_ARM, PrivateEndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointProperties_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointProperties_STATUS_ARM(subject PrivateEndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointProperties_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointProperties_STATUS_ARMGenerator()
var privateEndpointProperties_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointProperties_STATUS_ARMGenerator returns a generator of PrivateEndpointProperties_STATUS_ARM instances for property testing.
// We first initialize privateEndpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointProperties_STATUS_ARMGenerator != nil {
		return privateEndpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM(generators)
	privateEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM(generators)
	privateEndpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointProperties_STATUS_ARM{}), generators)

	return privateEndpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomDnsConfigs"] = gen.SliceOf(CustomDnsConfigPropertiesFormat_STATUS_ARMGenerator())
	gens["ManualPrivateLinkServiceConnections"] = gen.SliceOf(PrivateLinkServiceConnection_STATUS_ARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_STATUS_ARMGenerator())
	gens["PrivateLinkServiceConnections"] = gen.SliceOf(PrivateLinkServiceConnection_STATUS_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_STATUS_ARMGenerator())
}

func Test_PrivateLinkService_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkService_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkService_STATUS_ARM, PrivateLinkService_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkService_STATUS_ARM runs a test to see if a specific instance of PrivateLinkService_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkService_STATUS_ARM(subject PrivateLinkService_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkService_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkService_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkService_STATUS_ARMGenerator()
var privateLinkService_STATUS_ARMGenerator gopter.Gen

// PrivateLinkService_STATUS_ARMGenerator returns a generator of PrivateLinkService_STATUS_ARM instances for property testing.
// We first initialize privateLinkService_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkService_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkService_STATUS_ARMGenerator != nil {
		return privateLinkService_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkService_STATUS_ARM(generators)
	privateLinkService_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkService_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkService_STATUS_ARM(generators)
	privateLinkService_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_STATUS_ARM{}), generators)

	return privateLinkService_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkService_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkService_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceProperties_STATUS_ARMGenerator())
}

func Test_PrivateLinkServiceConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnection_STATUS_ARM, PrivateLinkServiceConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnection_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnection_STATUS_ARM(subject PrivateLinkServiceConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnection_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnection_STATUS_ARMGenerator()
var privateLinkServiceConnection_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceConnection_STATUS_ARMGenerator returns a generator of PrivateLinkServiceConnection_STATUS_ARM instances for property testing.
// We first initialize privateLinkServiceConnection_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceConnection_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnection_STATUS_ARMGenerator != nil {
		return privateLinkServiceConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM(generators)
	privateLinkServiceConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnection_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM(generators)
	privateLinkServiceConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnection_STATUS_ARM{}), generators)

	return privateLinkServiceConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceConnectionProperties_STATUS_ARMGenerator())
}

func Test_PrivateLinkServiceConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_STATUS_ARM, PrivateLinkServiceConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionProperties_STATUS_ARM(subject PrivateLinkServiceConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionProperties_STATUS_ARM instances for property testing - lazily instantiated
// by PrivateLinkServiceConnectionProperties_STATUS_ARMGenerator()
var privateLinkServiceConnectionProperties_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceConnectionProperties_STATUS_ARMGenerator returns a generator of PrivateLinkServiceConnectionProperties_STATUS_ARM instances for property testing.
// We first initialize privateLinkServiceConnectionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionProperties_STATUS_ARMGenerator != nil {
		return privateLinkServiceConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM(generators)
	privateLinkServiceConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM(generators)
	privateLinkServiceConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionProperties_STATUS_ARM{}), generators)

	return privateLinkServiceConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupIds"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateLinkServiceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_STATUS_ARMGenerator())
}

func Test_PrivateLinkServiceConnectionState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM, PrivateLinkServiceConnectionState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceConnectionState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM(subject PrivateLinkServiceConnectionState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionState_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionState_STATUS_ARMGenerator()
var privateLinkServiceConnectionState_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceConnectionState_STATUS_ARMGenerator returns a generator of PrivateLinkServiceConnectionState_STATUS_ARM instances for property testing.
func PrivateLinkServiceConnectionState_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionState_STATUS_ARMGenerator != nil {
		return privateLinkServiceConnectionState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM(generators)
	privateLinkServiceConnectionState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionState_STATUS_ARM{}), generators)

	return privateLinkServiceConnectionState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceIpConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_STATUS_ARM, PrivateLinkServiceIpConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceIpConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_STATUS_ARM(subject PrivateLinkServiceIpConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceIpConfiguration_STATUS_ARMGenerator()
var privateLinkServiceIpConfiguration_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceIpConfiguration_STATUS_ARMGenerator returns a generator of PrivateLinkServiceIpConfiguration_STATUS_ARM instances for property testing.
// We first initialize privateLinkServiceIpConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfiguration_STATUS_ARMGenerator != nil {
		return privateLinkServiceIpConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM(generators)
	privateLinkServiceIpConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM(generators)
	privateLinkServiceIpConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_STATUS_ARM{}), generators)

	return privateLinkServiceIpConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator())
}

func Test_PrivateLinkServiceIpConfigurationProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfigurationProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM, PrivateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceIpConfigurationProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM(subject PrivateLinkServiceIpConfigurationProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfigurationProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfigurationProperties_STATUS_ARM instances for property testing - lazily
// instantiated by PrivateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator()
var privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator returns a generator of PrivateLinkServiceIpConfigurationProperties_STATUS_ARM instances for property testing.
// We first initialize privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator != nil {
		return privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM(generators)
	privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM(generators)
	privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_STATUS_ARM{}), generators)

	return privateLinkServiceIpConfigurationProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_STATUS_IPv4, IPVersion_STATUS_IPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_STATUS_ARMGenerator())
}

func Test_PrivateLinkServiceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceProperties_STATUS_ARM, PrivateLinkServiceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceProperties_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceProperties_STATUS_ARM(subject PrivateLinkServiceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceProperties_STATUS_ARMGenerator()
var privateLinkServiceProperties_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceProperties_STATUS_ARMGenerator returns a generator of PrivateLinkServiceProperties_STATUS_ARM instances for property testing.
// We first initialize privateLinkServiceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceProperties_STATUS_ARMGenerator != nil {
		return privateLinkServiceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM(generators)
	privateLinkServiceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM(generators)
	privateLinkServiceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_STATUS_ARM{}), generators)

	return privateLinkServiceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Alias"] = gen.PtrOf(gen.AlphaString())
	gens["EnableProxyProtocol"] = gen.PtrOf(gen.Bool())
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoApproval"] = gen.PtrOf(ResourceSet_STATUS_ARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(PrivateLinkServiceIpConfiguration_STATUS_ARMGenerator())
	gens["LoadBalancerFrontendIpConfigurations"] = gen.SliceOf(FrontendIPConfiguration_STATUS_ARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_ARMGenerator())
	gens["Visibility"] = gen.PtrOf(ResourceSet_STATUS_ARMGenerator())
}

func Test_ResourceSet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSet_STATUS_ARM, ResourceSet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSet_STATUS_ARM runs a test to see if a specific instance of ResourceSet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSet_STATUS_ARM(subject ResourceSet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSet_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceSet_STATUS_ARMGenerator()
var resourceSet_STATUS_ARMGenerator gopter.Gen

// ResourceSet_STATUS_ARMGenerator returns a generator of ResourceSet_STATUS_ARM instances for property testing.
func ResourceSet_STATUS_ARMGenerator() gopter.Gen {
	if resourceSet_STATUS_ARMGenerator != nil {
		return resourceSet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSet_STATUS_ARM(generators)
	resourceSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceSet_STATUS_ARM{}), generators)

	return resourceSet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Subscriptions"] = gen.SliceOf(gen.AlphaString())
}

func Test_RetentionPolicyParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionPolicyParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionPolicyParameters_STATUS_ARM, RetentionPolicyParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionPolicyParameters_STATUS_ARM runs a test to see if a specific instance of RetentionPolicyParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionPolicyParameters_STATUS_ARM(subject RetentionPolicyParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionPolicyParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionPolicyParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RetentionPolicyParameters_STATUS_ARMGenerator()
var retentionPolicyParameters_STATUS_ARMGenerator gopter.Gen

// RetentionPolicyParameters_STATUS_ARMGenerator returns a generator of RetentionPolicyParameters_STATUS_ARM instances for property testing.
func RetentionPolicyParameters_STATUS_ARMGenerator() gopter.Gen {
	if retentionPolicyParameters_STATUS_ARMGenerator != nil {
		return retentionPolicyParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUS_ARM(generators)
	retentionPolicyParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RetentionPolicyParameters_STATUS_ARM{}), generators)

	return retentionPolicyParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_SecurityRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRule_STATUS_ARM, SecurityRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRule_STATUS_ARM runs a test to see if a specific instance of SecurityRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRule_STATUS_ARM(subject SecurityRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_STATUS_ARM instances for property testing - lazily instantiated by
// SecurityRule_STATUS_ARMGenerator()
var securityRule_STATUS_ARMGenerator gopter.Gen

// SecurityRule_STATUS_ARMGenerator returns a generator of SecurityRule_STATUS_ARM instances for property testing.
// We first initialize securityRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRule_STATUS_ARMGenerator() gopter.Gen {
	if securityRule_STATUS_ARMGenerator != nil {
		return securityRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_STATUS_ARM(generators)
	securityRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRule_STATUS_ARM(generators)
	securityRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_STATUS_ARM{}), generators)

	return securityRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SecurityRulePropertiesFormat_STATUS_ARMGenerator())
}

func Test_SecurityRulePropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRulePropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRulePropertiesFormat_STATUS_ARM, SecurityRulePropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRulePropertiesFormat_STATUS_ARM runs a test to see if a specific instance of SecurityRulePropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRulePropertiesFormat_STATUS_ARM(subject SecurityRulePropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRulePropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRulePropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// SecurityRulePropertiesFormat_STATUS_ARMGenerator()
var securityRulePropertiesFormat_STATUS_ARMGenerator gopter.Gen

// SecurityRulePropertiesFormat_STATUS_ARMGenerator returns a generator of SecurityRulePropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize securityRulePropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRulePropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if securityRulePropertiesFormat_STATUS_ARMGenerator != nil {
		return securityRulePropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM(generators)
	securityRulePropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM(generators)
	securityRulePropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_STATUS_ARM{}), generators)

	return securityRulePropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Access"] = gen.PtrOf(gen.OneConstOf(SecurityRuleAccess_STATUS_Allow, SecurityRuleAccess_STATUS_Deny))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["DestinationPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationPortRanges"] = gen.SliceOf(gen.AlphaString())
	gens["Direction"] = gen.PtrOf(gen.OneConstOf(SecurityRuleDirection_STATUS_Inbound, SecurityRuleDirection_STATUS_Outbound))
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		SecurityRulePropertiesFormat_Protocol_STATUS_Ah,
		SecurityRulePropertiesFormat_Protocol_STATUS_Esp,
		SecurityRulePropertiesFormat_Protocol_STATUS_Icmp,
		SecurityRulePropertiesFormat_Protocol_STATUS_Star,
		SecurityRulePropertiesFormat_Protocol_STATUS_Tcp,
		SecurityRulePropertiesFormat_Protocol_STATUS_Udp))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["SourceAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["SourceAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["SourcePortRange"] = gen.PtrOf(gen.AlphaString())
	gens["SourcePortRanges"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DestinationApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_STATUS_ARMGenerator())
	gens["SourceApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_STATUS_ARMGenerator())
}

func Test_SubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_STATUS_ARM, SubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_STATUS_ARM runs a test to see if a specific instance of SubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_STATUS_ARM(subject SubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUS_ARM instances for property testing - lazily instantiated by
// SubResource_STATUS_ARMGenerator()
var subResource_STATUS_ARMGenerator gopter.Gen

// SubResource_STATUS_ARMGenerator returns a generator of SubResource_STATUS_ARM instances for property testing.
func SubResource_STATUS_ARMGenerator() gopter.Gen {
	if subResource_STATUS_ARMGenerator != nil {
		return subResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM(generators)
	subResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUS_ARM{}), generators)

	return subResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_TrafficAnalyticsConfigurationProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsConfigurationProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUS_ARM, TrafficAnalyticsConfigurationProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUS_ARM runs a test to see if a specific instance of TrafficAnalyticsConfigurationProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUS_ARM(subject TrafficAnalyticsConfigurationProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsConfigurationProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsConfigurationProperties_STATUS_ARM instances for property testing - lazily instantiated
// by TrafficAnalyticsConfigurationProperties_STATUS_ARMGenerator()
var trafficAnalyticsConfigurationProperties_STATUS_ARMGenerator gopter.Gen

// TrafficAnalyticsConfigurationProperties_STATUS_ARMGenerator returns a generator of TrafficAnalyticsConfigurationProperties_STATUS_ARM instances for property testing.
func TrafficAnalyticsConfigurationProperties_STATUS_ARMGenerator() gopter.Gen {
	if trafficAnalyticsConfigurationProperties_STATUS_ARMGenerator != nil {
		return trafficAnalyticsConfigurationProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUS_ARM(generators)
	trafficAnalyticsConfigurationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsConfigurationProperties_STATUS_ARM{}), generators)

	return trafficAnalyticsConfigurationProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["TrafficAnalyticsInterval"] = gen.PtrOf(gen.Int())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceRegion"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_TrafficAnalyticsProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsProperties_STATUS_ARM, TrafficAnalyticsProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsProperties_STATUS_ARM runs a test to see if a specific instance of TrafficAnalyticsProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsProperties_STATUS_ARM(subject TrafficAnalyticsProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsProperties_STATUS_ARM instances for property testing - lazily instantiated by
// TrafficAnalyticsProperties_STATUS_ARMGenerator()
var trafficAnalyticsProperties_STATUS_ARMGenerator gopter.Gen

// TrafficAnalyticsProperties_STATUS_ARMGenerator returns a generator of TrafficAnalyticsProperties_STATUS_ARM instances for property testing.
func TrafficAnalyticsProperties_STATUS_ARMGenerator() gopter.Gen {
	if trafficAnalyticsProperties_STATUS_ARMGenerator != nil {
		return trafficAnalyticsProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUS_ARM(generators)
	trafficAnalyticsProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsProperties_STATUS_ARM{}), generators)

	return trafficAnalyticsProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NetworkWatcherFlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsConfigurationProperties_STATUS_ARMGenerator())
}

func Test_VirtualNetworkTap_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTap_STATUS_ARM, VirtualNetworkTap_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTap_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkTap_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTap_STATUS_ARM(subject VirtualNetworkTap_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkTap_STATUS_ARMGenerator()
var virtualNetworkTap_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkTap_STATUS_ARMGenerator returns a generator of VirtualNetworkTap_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkTap_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTap_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkTap_STATUS_ARMGenerator != nil {
		return virtualNetworkTap_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM(generators)
	virtualNetworkTap_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM(generators)
	virtualNetworkTap_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_STATUS_ARM{}), generators)

	return virtualNetworkTap_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTap_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkTapPropertiesFormat_STATUS_ARMGenerator())
}

func Test_VirtualNetworkTapPropertiesFormat_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapPropertiesFormat_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_STATUS_ARM, VirtualNetworkTapPropertiesFormat_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkTapPropertiesFormat_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_STATUS_ARM(subject VirtualNetworkTapPropertiesFormat_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapPropertiesFormat_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapPropertiesFormat_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkTapPropertiesFormat_STATUS_ARMGenerator()
var virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkTapPropertiesFormat_STATUS_ARMGenerator returns a generator of VirtualNetworkTapPropertiesFormat_STATUS_ARM instances for property testing.
// We first initialize virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapPropertiesFormat_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator != nil {
		return virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM(generators)
	virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM(generators)
	virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_STATUS_ARM{}), generators)

	return virtualNetworkTapPropertiesFormat_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(FrontendIPConfiguration_STATUS_ARMGenerator())
	gens["DestinationNetworkInterfaceIPConfiguration"] = gen.PtrOf(NetworkInterfaceIPConfiguration_STATUS_ARMGenerator())
	gens["NetworkInterfaceTapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfiguration_STATUS_ARMGenerator())
}
