// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	alpha20201101s "github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of NetworkSecurityGroupsSecurityRule. Use v1beta20201101.NetworkSecurityGroupsSecurityRule instead
type NetworkSecurityGroupsSecurityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSecurityGroupsSecurityRules_Spec                                   `json:"spec,omitempty"`
	Status            SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NetworkSecurityGroupsSecurityRule{}

// GetConditions returns the conditions of the resource
func (rule *NetworkSecurityGroupsSecurityRule) GetConditions() conditions.Conditions {
	return rule.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (rule *NetworkSecurityGroupsSecurityRule) SetConditions(conditions conditions.Conditions) {
	rule.Status.Conditions = conditions
}

var _ conversion.Convertible = &NetworkSecurityGroupsSecurityRule{}

// ConvertFrom populates our NetworkSecurityGroupsSecurityRule from the provided hub NetworkSecurityGroupsSecurityRule
func (rule *NetworkSecurityGroupsSecurityRule) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20201101s.NetworkSecurityGroupsSecurityRule

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = rule.AssignPropertiesFromNetworkSecurityGroupsSecurityRule(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to rule")
	}

	return nil
}

// ConvertTo populates the provided hub NetworkSecurityGroupsSecurityRule from our NetworkSecurityGroupsSecurityRule
func (rule *NetworkSecurityGroupsSecurityRule) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20201101s.NetworkSecurityGroupsSecurityRule
	err := rule.AssignPropertiesToNetworkSecurityGroupsSecurityRule(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from rule")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-networksecuritygroupssecurityrule,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=networksecuritygroupssecurityrules,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.networksecuritygroupssecurityrules.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &NetworkSecurityGroupsSecurityRule{}

// Default applies defaults to the NetworkSecurityGroupsSecurityRule resource
func (rule *NetworkSecurityGroupsSecurityRule) Default() {
	rule.defaultImpl()
	var temp interface{} = rule
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (rule *NetworkSecurityGroupsSecurityRule) defaultAzureName() {
	if rule.Spec.AzureName == "" {
		rule.Spec.AzureName = rule.Name
	}
}

// defaultImpl applies the code generated defaults to the NetworkSecurityGroupsSecurityRule resource
func (rule *NetworkSecurityGroupsSecurityRule) defaultImpl() { rule.defaultAzureName() }

var _ genruntime.KubernetesResource = &NetworkSecurityGroupsSecurityRule{}

// AzureName returns the Azure name of the resource
func (rule *NetworkSecurityGroupsSecurityRule) AzureName() string {
	return rule.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (rule NetworkSecurityGroupsSecurityRule) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (rule *NetworkSecurityGroupsSecurityRule) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (rule *NetworkSecurityGroupsSecurityRule) GetSpec() genruntime.ConvertibleSpec {
	return &rule.Spec
}

// GetStatus returns the status of this resource
func (rule *NetworkSecurityGroupsSecurityRule) GetStatus() genruntime.ConvertibleStatus {
	return &rule.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/networkSecurityGroups/securityRules"
func (rule *NetworkSecurityGroupsSecurityRule) GetType() string {
	return "Microsoft.Network/networkSecurityGroups/securityRules"
}

// NewEmptyStatus returns a new empty (blank) status
func (rule *NetworkSecurityGroupsSecurityRule) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (rule *NetworkSecurityGroupsSecurityRule) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(rule.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  rule.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (rule *NetworkSecurityGroupsSecurityRule) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded); ok {
		rule.Status = *st
		return nil
	}

	// Convert status to required version
	var st SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	rule.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-networksecuritygroupssecurityrule,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=networksecuritygroupssecurityrules,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.networksecuritygroupssecurityrules.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &NetworkSecurityGroupsSecurityRule{}

// ValidateCreate validates the creation of the resource
func (rule *NetworkSecurityGroupsSecurityRule) ValidateCreate() error {
	validations := rule.createValidations()
	var temp interface{} = rule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (rule *NetworkSecurityGroupsSecurityRule) ValidateDelete() error {
	validations := rule.deleteValidations()
	var temp interface{} = rule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (rule *NetworkSecurityGroupsSecurityRule) ValidateUpdate(old runtime.Object) error {
	validations := rule.updateValidations()
	var temp interface{} = rule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (rule *NetworkSecurityGroupsSecurityRule) createValidations() []func() error {
	return []func() error{rule.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (rule *NetworkSecurityGroupsSecurityRule) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (rule *NetworkSecurityGroupsSecurityRule) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return rule.validateResourceReferences()
		},
		rule.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (rule *NetworkSecurityGroupsSecurityRule) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&rule.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (rule *NetworkSecurityGroupsSecurityRule) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*NetworkSecurityGroupsSecurityRule)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, rule)
}

// AssignPropertiesFromNetworkSecurityGroupsSecurityRule populates our NetworkSecurityGroupsSecurityRule from the provided source NetworkSecurityGroupsSecurityRule
func (rule *NetworkSecurityGroupsSecurityRule) AssignPropertiesFromNetworkSecurityGroupsSecurityRule(source *alpha20201101s.NetworkSecurityGroupsSecurityRule) error {

	// ObjectMeta
	rule.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec NetworkSecurityGroupsSecurityRules_Spec
	err := spec.AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec() to populate field Spec")
	}
	rule.Spec = spec

	// Status
	var status SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
	err = status.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded() to populate field Status")
	}
	rule.Status = status

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupsSecurityRule populates the provided destination NetworkSecurityGroupsSecurityRule from our NetworkSecurityGroupsSecurityRule
func (rule *NetworkSecurityGroupsSecurityRule) AssignPropertiesToNetworkSecurityGroupsSecurityRule(destination *alpha20201101s.NetworkSecurityGroupsSecurityRule) error {

	// ObjectMeta
	destination.ObjectMeta = *rule.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec
	err := rule.Spec.AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
	err = rule.Status.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (rule *NetworkSecurityGroupsSecurityRule) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: rule.Spec.OriginalVersion(),
		Kind:    "NetworkSecurityGroupsSecurityRule",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of NetworkSecurityGroupsSecurityRule. Use v1beta20201101.NetworkSecurityGroupsSecurityRule instead
type NetworkSecurityGroupsSecurityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkSecurityGroupsSecurityRule `json:"items"`
}

type NetworkSecurityGroupsSecurityRules_Spec struct {
	// +kubebuilder:validation:Required
	Access *SecurityRulePropertiesFormatAccess `json:"access,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                            string        `json:"azureName,omitempty"`
	Description                          *string       `json:"description,omitempty"`
	DestinationAddressPrefix             *string       `json:"destinationAddressPrefix,omitempty"`
	DestinationAddressPrefixes           []string      `json:"destinationAddressPrefixes,omitempty"`
	DestinationApplicationSecurityGroups []SubResource `json:"destinationApplicationSecurityGroups,omitempty"`
	DestinationPortRange                 *string       `json:"destinationPortRange,omitempty"`
	DestinationPortRanges                []string      `json:"destinationPortRanges,omitempty"`

	// +kubebuilder:validation:Required
	Direction *SecurityRulePropertiesFormatDirection `json:"direction,omitempty"`
	Location  *string                                `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/NetworkSecurityGroup resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"NetworkSecurityGroup"`

	// +kubebuilder:validation:Required
	Priority *int `json:"priority,omitempty"`

	// +kubebuilder:validation:Required
	Protocol                        *SecurityRulePropertiesFormatProtocol `json:"protocol,omitempty"`
	SourceAddressPrefix             *string                               `json:"sourceAddressPrefix,omitempty"`
	SourceAddressPrefixes           []string                              `json:"sourceAddressPrefixes,omitempty"`
	SourceApplicationSecurityGroups []SubResource                         `json:"sourceApplicationSecurityGroups,omitempty"`
	SourcePortRange                 *string                               `json:"sourcePortRange,omitempty"`
	SourcePortRanges                []string                              `json:"sourcePortRanges,omitempty"`
	Tags                            map[string]string                     `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkSecurityGroupsSecurityRules_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rules *NetworkSecurityGroupsSecurityRules_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rules == nil {
		return nil, nil
	}
	result := &NetworkSecurityGroupsSecurityRules_SpecARM{}

	// Set property ‘Location’:
	if rules.Location != nil {
		location := *rules.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if rules.Access != nil ||
		rules.Description != nil ||
		rules.DestinationAddressPrefix != nil ||
		rules.DestinationAddressPrefixes != nil ||
		rules.DestinationApplicationSecurityGroups != nil ||
		rules.DestinationPortRange != nil ||
		rules.DestinationPortRanges != nil ||
		rules.Direction != nil ||
		rules.Priority != nil ||
		rules.Protocol != nil ||
		rules.SourceAddressPrefix != nil ||
		rules.SourceAddressPrefixes != nil ||
		rules.SourceApplicationSecurityGroups != nil ||
		rules.SourcePortRange != nil ||
		rules.SourcePortRanges != nil {
		result.Properties = &SecurityRulePropertiesFormatARM{}
	}
	if rules.Access != nil {
		access := *rules.Access
		result.Properties.Access = &access
	}
	if rules.Description != nil {
		description := *rules.Description
		result.Properties.Description = &description
	}
	if rules.DestinationAddressPrefix != nil {
		destinationAddressPrefix := *rules.DestinationAddressPrefix
		result.Properties.DestinationAddressPrefix = &destinationAddressPrefix
	}
	for _, item := range rules.DestinationAddressPrefixes {
		result.Properties.DestinationAddressPrefixes = append(result.Properties.DestinationAddressPrefixes, item)
	}
	for _, item := range rules.DestinationApplicationSecurityGroups {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.DestinationApplicationSecurityGroups = append(result.Properties.DestinationApplicationSecurityGroups, *itemARM.(*SubResourceARM))
	}
	if rules.DestinationPortRange != nil {
		destinationPortRange := *rules.DestinationPortRange
		result.Properties.DestinationPortRange = &destinationPortRange
	}
	for _, item := range rules.DestinationPortRanges {
		result.Properties.DestinationPortRanges = append(result.Properties.DestinationPortRanges, item)
	}
	if rules.Direction != nil {
		direction := *rules.Direction
		result.Properties.Direction = &direction
	}
	if rules.Priority != nil {
		priority := *rules.Priority
		result.Properties.Priority = &priority
	}
	if rules.Protocol != nil {
		protocol := *rules.Protocol
		result.Properties.Protocol = &protocol
	}
	if rules.SourceAddressPrefix != nil {
		sourceAddressPrefix := *rules.SourceAddressPrefix
		result.Properties.SourceAddressPrefix = &sourceAddressPrefix
	}
	for _, item := range rules.SourceAddressPrefixes {
		result.Properties.SourceAddressPrefixes = append(result.Properties.SourceAddressPrefixes, item)
	}
	for _, item := range rules.SourceApplicationSecurityGroups {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.SourceApplicationSecurityGroups = append(result.Properties.SourceApplicationSecurityGroups, *itemARM.(*SubResourceARM))
	}
	if rules.SourcePortRange != nil {
		sourcePortRange := *rules.SourcePortRange
		result.Properties.SourcePortRange = &sourcePortRange
	}
	for _, item := range rules.SourcePortRanges {
		result.Properties.SourcePortRanges = append(result.Properties.SourcePortRanges, item)
	}

	// Set property ‘Tags’:
	if rules.Tags != nil {
		result.Tags = make(map[string]string, len(rules.Tags))
		for key, value := range rules.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rules *NetworkSecurityGroupsSecurityRules_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkSecurityGroupsSecurityRules_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rules *NetworkSecurityGroupsSecurityRules_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkSecurityGroupsSecurityRules_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkSecurityGroupsSecurityRules_SpecARM, got %T", armInput)
	}

	// Set property ‘Access’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Access != nil {
			access := *typedInput.Properties.Access
			rules.Access = &access
		}
	}

	// Set property ‘AzureName’:
	rules.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			rules.Description = &description
		}
	}

	// Set property ‘DestinationAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DestinationAddressPrefix != nil {
			destinationAddressPrefix := *typedInput.Properties.DestinationAddressPrefix
			rules.DestinationAddressPrefix = &destinationAddressPrefix
		}
	}

	// Set property ‘DestinationAddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationAddressPrefixes {
			rules.DestinationAddressPrefixes = append(rules.DestinationAddressPrefixes, item)
		}
	}

	// Set property ‘DestinationApplicationSecurityGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationApplicationSecurityGroups {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			rules.DestinationApplicationSecurityGroups = append(rules.DestinationApplicationSecurityGroups, item1)
		}
	}

	// Set property ‘DestinationPortRange’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DestinationPortRange != nil {
			destinationPortRange := *typedInput.Properties.DestinationPortRange
			rules.DestinationPortRange = &destinationPortRange
		}
	}

	// Set property ‘DestinationPortRanges’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationPortRanges {
			rules.DestinationPortRanges = append(rules.DestinationPortRanges, item)
		}
	}

	// Set property ‘Direction’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Direction != nil {
			direction := *typedInput.Properties.Direction
			rules.Direction = &direction
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		rules.Location = &location
	}

	// Set property ‘Owner’:
	rules.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			rules.Priority = &priority
		}
	}

	// Set property ‘Protocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Protocol != nil {
			protocol := *typedInput.Properties.Protocol
			rules.Protocol = &protocol
		}
	}

	// Set property ‘SourceAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceAddressPrefix != nil {
			sourceAddressPrefix := *typedInput.Properties.SourceAddressPrefix
			rules.SourceAddressPrefix = &sourceAddressPrefix
		}
	}

	// Set property ‘SourceAddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourceAddressPrefixes {
			rules.SourceAddressPrefixes = append(rules.SourceAddressPrefixes, item)
		}
	}

	// Set property ‘SourceApplicationSecurityGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourceApplicationSecurityGroups {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			rules.SourceApplicationSecurityGroups = append(rules.SourceApplicationSecurityGroups, item1)
		}
	}

	// Set property ‘SourcePortRange’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourcePortRange != nil {
			sourcePortRange := *typedInput.Properties.SourcePortRange
			rules.SourcePortRange = &sourcePortRange
		}
	}

	// Set property ‘SourcePortRanges’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourcePortRanges {
			rules.SourcePortRanges = append(rules.SourcePortRanges, item)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		rules.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			rules.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NetworkSecurityGroupsSecurityRules_Spec{}

// ConvertSpecFrom populates our NetworkSecurityGroupsSecurityRules_Spec from the provided source
func (rules *NetworkSecurityGroupsSecurityRules_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec)
	if ok {
		// Populate our instance from source
		return rules.AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = rules.AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NetworkSecurityGroupsSecurityRules_Spec
func (rules *NetworkSecurityGroupsSecurityRules_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec)
	if ok {
		// Populate destination from our instance
		return rules.AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec{}
	err := rules.AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec populates our NetworkSecurityGroupsSecurityRules_Spec from the provided source NetworkSecurityGroupsSecurityRules_Spec
func (rules *NetworkSecurityGroupsSecurityRules_Spec) AssignPropertiesFromNetworkSecurityGroupsSecurityRulesSpec(source *alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec) error {

	// Access
	if source.Access != nil {
		access := SecurityRulePropertiesFormatAccess(*source.Access)
		rules.Access = &access
	} else {
		rules.Access = nil
	}

	// AzureName
	rules.AzureName = source.AzureName

	// Description
	rules.Description = genruntime.ClonePointerToString(source.Description)

	// DestinationAddressPrefix
	rules.DestinationAddressPrefix = genruntime.ClonePointerToString(source.DestinationAddressPrefix)

	// DestinationAddressPrefixes
	rules.DestinationAddressPrefixes = genruntime.CloneSliceOfString(source.DestinationAddressPrefixes)

	// DestinationApplicationSecurityGroups
	if source.DestinationApplicationSecurityGroups != nil {
		destinationApplicationSecurityGroupList := make([]SubResource, len(source.DestinationApplicationSecurityGroups))
		for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range source.DestinationApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
			var destinationApplicationSecurityGroup SubResource
			err := destinationApplicationSecurityGroup.AssignPropertiesFromSubResource(&destinationApplicationSecurityGroupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field DestinationApplicationSecurityGroups")
			}
			destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
		}
		rules.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList
	} else {
		rules.DestinationApplicationSecurityGroups = nil
	}

	// DestinationPortRange
	rules.DestinationPortRange = genruntime.ClonePointerToString(source.DestinationPortRange)

	// DestinationPortRanges
	rules.DestinationPortRanges = genruntime.CloneSliceOfString(source.DestinationPortRanges)

	// Direction
	if source.Direction != nil {
		direction := SecurityRulePropertiesFormatDirection(*source.Direction)
		rules.Direction = &direction
	} else {
		rules.Direction = nil
	}

	// Location
	rules.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		rules.Owner = &owner
	} else {
		rules.Owner = nil
	}

	// Priority
	rules.Priority = genruntime.ClonePointerToInt(source.Priority)

	// Protocol
	if source.Protocol != nil {
		protocol := SecurityRulePropertiesFormatProtocol(*source.Protocol)
		rules.Protocol = &protocol
	} else {
		rules.Protocol = nil
	}

	// SourceAddressPrefix
	rules.SourceAddressPrefix = genruntime.ClonePointerToString(source.SourceAddressPrefix)

	// SourceAddressPrefixes
	rules.SourceAddressPrefixes = genruntime.CloneSliceOfString(source.SourceAddressPrefixes)

	// SourceApplicationSecurityGroups
	if source.SourceApplicationSecurityGroups != nil {
		sourceApplicationSecurityGroupList := make([]SubResource, len(source.SourceApplicationSecurityGroups))
		for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range source.SourceApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
			var sourceApplicationSecurityGroup SubResource
			err := sourceApplicationSecurityGroup.AssignPropertiesFromSubResource(&sourceApplicationSecurityGroupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field SourceApplicationSecurityGroups")
			}
			sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
		}
		rules.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList
	} else {
		rules.SourceApplicationSecurityGroups = nil
	}

	// SourcePortRange
	rules.SourcePortRange = genruntime.ClonePointerToString(source.SourcePortRange)

	// SourcePortRanges
	rules.SourcePortRanges = genruntime.CloneSliceOfString(source.SourcePortRanges)

	// Tags
	rules.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec populates the provided destination NetworkSecurityGroupsSecurityRules_Spec from our NetworkSecurityGroupsSecurityRules_Spec
func (rules *NetworkSecurityGroupsSecurityRules_Spec) AssignPropertiesToNetworkSecurityGroupsSecurityRulesSpec(destination *alpha20201101s.NetworkSecurityGroupsSecurityRules_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Access
	if rules.Access != nil {
		access := string(*rules.Access)
		destination.Access = &access
	} else {
		destination.Access = nil
	}

	// AzureName
	destination.AzureName = rules.AzureName

	// Description
	destination.Description = genruntime.ClonePointerToString(rules.Description)

	// DestinationAddressPrefix
	destination.DestinationAddressPrefix = genruntime.ClonePointerToString(rules.DestinationAddressPrefix)

	// DestinationAddressPrefixes
	destination.DestinationAddressPrefixes = genruntime.CloneSliceOfString(rules.DestinationAddressPrefixes)

	// DestinationApplicationSecurityGroups
	if rules.DestinationApplicationSecurityGroups != nil {
		destinationApplicationSecurityGroupList := make([]alpha20201101s.SubResource, len(rules.DestinationApplicationSecurityGroups))
		for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range rules.DestinationApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
			var destinationApplicationSecurityGroup alpha20201101s.SubResource
			err := destinationApplicationSecurityGroupItem.AssignPropertiesToSubResource(&destinationApplicationSecurityGroup)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field DestinationApplicationSecurityGroups")
			}
			destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
		}
		destination.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList
	} else {
		destination.DestinationApplicationSecurityGroups = nil
	}

	// DestinationPortRange
	destination.DestinationPortRange = genruntime.ClonePointerToString(rules.DestinationPortRange)

	// DestinationPortRanges
	destination.DestinationPortRanges = genruntime.CloneSliceOfString(rules.DestinationPortRanges)

	// Direction
	if rules.Direction != nil {
		direction := string(*rules.Direction)
		destination.Direction = &direction
	} else {
		destination.Direction = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(rules.Location)

	// OriginalVersion
	destination.OriginalVersion = rules.OriginalVersion()

	// Owner
	if rules.Owner != nil {
		owner := rules.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(rules.Priority)

	// Protocol
	if rules.Protocol != nil {
		protocol := string(*rules.Protocol)
		destination.Protocol = &protocol
	} else {
		destination.Protocol = nil
	}

	// SourceAddressPrefix
	destination.SourceAddressPrefix = genruntime.ClonePointerToString(rules.SourceAddressPrefix)

	// SourceAddressPrefixes
	destination.SourceAddressPrefixes = genruntime.CloneSliceOfString(rules.SourceAddressPrefixes)

	// SourceApplicationSecurityGroups
	if rules.SourceApplicationSecurityGroups != nil {
		sourceApplicationSecurityGroupList := make([]alpha20201101s.SubResource, len(rules.SourceApplicationSecurityGroups))
		for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range rules.SourceApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
			var sourceApplicationSecurityGroup alpha20201101s.SubResource
			err := sourceApplicationSecurityGroupItem.AssignPropertiesToSubResource(&sourceApplicationSecurityGroup)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field SourceApplicationSecurityGroups")
			}
			sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
		}
		destination.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList
	} else {
		destination.SourceApplicationSecurityGroups = nil
	}

	// SourcePortRange
	destination.SourcePortRange = genruntime.ClonePointerToString(rules.SourcePortRange)

	// SourcePortRanges
	destination.SourcePortRanges = genruntime.CloneSliceOfString(rules.SourcePortRanges)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(rules.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (rules *NetworkSecurityGroupsSecurityRules_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (rules *NetworkSecurityGroupsSecurityRules_Spec) SetAzureName(azureName string) {
	rules.AzureName = azureName
}

// Deprecated version of SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded. Use v1beta20201101.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded instead
type SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded struct {
	Access *SecurityRuleAccess_Status `json:"access,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                           []conditions.Condition                                                                  `json:"conditions,omitempty"`
	Description                          *string                                                                                 `json:"description,omitempty"`
	DestinationAddressPrefix             *string                                                                                 `json:"destinationAddressPrefix,omitempty"`
	DestinationAddressPrefixes           []string                                                                                `json:"destinationAddressPrefixes,omitempty"`
	DestinationApplicationSecurityGroups []ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded `json:"destinationApplicationSecurityGroups,omitempty"`
	DestinationPortRange                 *string                                                                                 `json:"destinationPortRange,omitempty"`
	DestinationPortRanges                []string                                                                                `json:"destinationPortRanges,omitempty"`
	Direction                            *SecurityRuleDirection_Status                                                           `json:"direction,omitempty"`
	Etag                                 *string                                                                                 `json:"etag,omitempty"`
	Id                                   *string                                                                                 `json:"id,omitempty"`
	Name                                 *string                                                                                 `json:"name,omitempty"`
	Priority                             *int                                                                                    `json:"priority,omitempty"`
	Protocol                             *SecurityRulePropertiesFormatStatusProtocol                                             `json:"protocol,omitempty"`
	ProvisioningState                    *ProvisioningState_Status                                                               `json:"provisioningState,omitempty"`
	SourceAddressPrefix                  *string                                                                                 `json:"sourceAddressPrefix,omitempty"`
	SourceAddressPrefixes                []string                                                                                `json:"sourceAddressPrefixes,omitempty"`
	SourceApplicationSecurityGroups      []ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded `json:"sourceApplicationSecurityGroups,omitempty"`
	SourcePortRange                      *string                                                                                 `json:"sourcePortRange,omitempty"`
	SourcePortRanges                     []string                                                                                `json:"sourcePortRanges,omitempty"`
	Type                                 *string                                                                                 `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}

// ConvertStatusFrom populates our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from the provided source
func (embedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return embedded.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = embedded.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (embedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return embedded.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}
	err := embedded.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Access’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Access != nil {
			access := *typedInput.Properties.Access
			embedded.Access = &access
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Description’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			embedded.Description = &description
		}
	}

	// Set property ‘DestinationAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DestinationAddressPrefix != nil {
			destinationAddressPrefix := *typedInput.Properties.DestinationAddressPrefix
			embedded.DestinationAddressPrefix = &destinationAddressPrefix
		}
	}

	// Set property ‘DestinationAddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationAddressPrefixes {
			embedded.DestinationAddressPrefixes = append(embedded.DestinationAddressPrefixes, item)
		}
	}

	// Set property ‘DestinationApplicationSecurityGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationApplicationSecurityGroups {
			var item1 ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.DestinationApplicationSecurityGroups = append(embedded.DestinationApplicationSecurityGroups, item1)
		}
	}

	// Set property ‘DestinationPortRange’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DestinationPortRange != nil {
			destinationPortRange := *typedInput.Properties.DestinationPortRange
			embedded.DestinationPortRange = &destinationPortRange
		}
	}

	// Set property ‘DestinationPortRanges’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DestinationPortRanges {
			embedded.DestinationPortRanges = append(embedded.DestinationPortRanges, item)
		}
	}

	// Set property ‘Direction’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Direction != nil {
			direction := *typedInput.Properties.Direction
			embedded.Direction = &direction
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			embedded.Priority = &priority
		}
	}

	// Set property ‘Protocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Protocol != nil {
			protocol := *typedInput.Properties.Protocol
			embedded.Protocol = &protocol
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘SourceAddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceAddressPrefix != nil {
			sourceAddressPrefix := *typedInput.Properties.SourceAddressPrefix
			embedded.SourceAddressPrefix = &sourceAddressPrefix
		}
	}

	// Set property ‘SourceAddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourceAddressPrefixes {
			embedded.SourceAddressPrefixes = append(embedded.SourceAddressPrefixes, item)
		}
	}

	// Set property ‘SourceApplicationSecurityGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourceApplicationSecurityGroups {
			var item1 ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.SourceApplicationSecurityGroups = append(embedded.SourceApplicationSecurityGroups, item1)
		}
	}

	// Set property ‘SourcePortRange’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourcePortRange != nil {
			sourcePortRange := *typedInput.Properties.SourcePortRange
			embedded.SourcePortRange = &sourcePortRange
		}
	}

	// Set property ‘SourcePortRanges’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SourcePortRanges {
			embedded.SourcePortRanges = append(embedded.SourcePortRanges, item)
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from the provided source SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (embedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(source *alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {

	// Access
	if source.Access != nil {
		access := SecurityRuleAccess_Status(*source.Access)
		embedded.Access = &access
	} else {
		embedded.Access = nil
	}

	// Conditions
	embedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Description
	embedded.Description = genruntime.ClonePointerToString(source.Description)

	// DestinationAddressPrefix
	embedded.DestinationAddressPrefix = genruntime.ClonePointerToString(source.DestinationAddressPrefix)

	// DestinationAddressPrefixes
	embedded.DestinationAddressPrefixes = genruntime.CloneSliceOfString(source.DestinationAddressPrefixes)

	// DestinationApplicationSecurityGroups
	if source.DestinationApplicationSecurityGroups != nil {
		destinationApplicationSecurityGroupList := make([]ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(source.DestinationApplicationSecurityGroups))
		for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range source.DestinationApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
			var destinationApplicationSecurityGroup ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := destinationApplicationSecurityGroup.AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&destinationApplicationSecurityGroupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded() to populate field DestinationApplicationSecurityGroups")
			}
			destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
		}
		embedded.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList
	} else {
		embedded.DestinationApplicationSecurityGroups = nil
	}

	// DestinationPortRange
	embedded.DestinationPortRange = genruntime.ClonePointerToString(source.DestinationPortRange)

	// DestinationPortRanges
	embedded.DestinationPortRanges = genruntime.CloneSliceOfString(source.DestinationPortRanges)

	// Direction
	if source.Direction != nil {
		direction := SecurityRuleDirection_Status(*source.Direction)
		embedded.Direction = &direction
	} else {
		embedded.Direction = nil
	}

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// Priority
	embedded.Priority = genruntime.ClonePointerToInt(source.Priority)

	// Protocol
	if source.Protocol != nil {
		protocol := SecurityRulePropertiesFormatStatusProtocol(*source.Protocol)
		embedded.Protocol = &protocol
	} else {
		embedded.Protocol = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		embedded.ProvisioningState = &provisioningState
	} else {
		embedded.ProvisioningState = nil
	}

	// SourceAddressPrefix
	embedded.SourceAddressPrefix = genruntime.ClonePointerToString(source.SourceAddressPrefix)

	// SourceAddressPrefixes
	embedded.SourceAddressPrefixes = genruntime.CloneSliceOfString(source.SourceAddressPrefixes)

	// SourceApplicationSecurityGroups
	if source.SourceApplicationSecurityGroups != nil {
		sourceApplicationSecurityGroupList := make([]ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(source.SourceApplicationSecurityGroups))
		for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range source.SourceApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
			var sourceApplicationSecurityGroup ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := sourceApplicationSecurityGroup.AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&sourceApplicationSecurityGroupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded() to populate field SourceApplicationSecurityGroups")
			}
			sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
		}
		embedded.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList
	} else {
		embedded.SourceApplicationSecurityGroups = nil
	}

	// SourcePortRange
	embedded.SourcePortRange = genruntime.ClonePointerToString(source.SourcePortRange)

	// SourcePortRanges
	embedded.SourcePortRanges = genruntime.CloneSliceOfString(source.SourcePortRanges)

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates the provided destination SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from our SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (embedded *SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(destination *alpha20201101s.SecurityRule_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Access
	if embedded.Access != nil {
		access := string(*embedded.Access)
		destination.Access = &access
	} else {
		destination.Access = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(embedded.Conditions)

	// Description
	destination.Description = genruntime.ClonePointerToString(embedded.Description)

	// DestinationAddressPrefix
	destination.DestinationAddressPrefix = genruntime.ClonePointerToString(embedded.DestinationAddressPrefix)

	// DestinationAddressPrefixes
	destination.DestinationAddressPrefixes = genruntime.CloneSliceOfString(embedded.DestinationAddressPrefixes)

	// DestinationApplicationSecurityGroups
	if embedded.DestinationApplicationSecurityGroups != nil {
		destinationApplicationSecurityGroupList := make([]alpha20201101s.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(embedded.DestinationApplicationSecurityGroups))
		for destinationApplicationSecurityGroupIndex, destinationApplicationSecurityGroupItem := range embedded.DestinationApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			destinationApplicationSecurityGroupItem := destinationApplicationSecurityGroupItem
			var destinationApplicationSecurityGroup alpha20201101s.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := destinationApplicationSecurityGroupItem.AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&destinationApplicationSecurityGroup)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded() to populate field DestinationApplicationSecurityGroups")
			}
			destinationApplicationSecurityGroupList[destinationApplicationSecurityGroupIndex] = destinationApplicationSecurityGroup
		}
		destination.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroupList
	} else {
		destination.DestinationApplicationSecurityGroups = nil
	}

	// DestinationPortRange
	destination.DestinationPortRange = genruntime.ClonePointerToString(embedded.DestinationPortRange)

	// DestinationPortRanges
	destination.DestinationPortRanges = genruntime.CloneSliceOfString(embedded.DestinationPortRanges)

	// Direction
	if embedded.Direction != nil {
		direction := string(*embedded.Direction)
		destination.Direction = &direction
	} else {
		destination.Direction = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(embedded.Priority)

	// Protocol
	if embedded.Protocol != nil {
		protocol := string(*embedded.Protocol)
		destination.Protocol = &protocol
	} else {
		destination.Protocol = nil
	}

	// ProvisioningState
	if embedded.ProvisioningState != nil {
		provisioningState := string(*embedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SourceAddressPrefix
	destination.SourceAddressPrefix = genruntime.ClonePointerToString(embedded.SourceAddressPrefix)

	// SourceAddressPrefixes
	destination.SourceAddressPrefixes = genruntime.CloneSliceOfString(embedded.SourceAddressPrefixes)

	// SourceApplicationSecurityGroups
	if embedded.SourceApplicationSecurityGroups != nil {
		sourceApplicationSecurityGroupList := make([]alpha20201101s.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded, len(embedded.SourceApplicationSecurityGroups))
		for sourceApplicationSecurityGroupIndex, sourceApplicationSecurityGroupItem := range embedded.SourceApplicationSecurityGroups {
			// Shadow the loop variable to avoid aliasing
			sourceApplicationSecurityGroupItem := sourceApplicationSecurityGroupItem
			var sourceApplicationSecurityGroup alpha20201101s.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
			err := sourceApplicationSecurityGroupItem.AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(&sourceApplicationSecurityGroup)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded() to populate field SourceApplicationSecurityGroups")
			}
			sourceApplicationSecurityGroupList[sourceApplicationSecurityGroupIndex] = sourceApplicationSecurityGroup
		}
		destination.SourceApplicationSecurityGroups = sourceApplicationSecurityGroupList
	} else {
		destination.SourceApplicationSecurityGroups = nil
	}

	// SourcePortRange
	destination.SourcePortRange = genruntime.ClonePointerToString(embedded.SourcePortRange)

	// SourcePortRanges
	destination.SourcePortRanges = genruntime.CloneSliceOfString(embedded.SourcePortRanges)

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded. Use v1beta20201101.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded instead
type ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates our ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from the provided source ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (embedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesFromApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(source *alpha20201101s.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded populates the provided destination ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded from our ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded
func (embedded *ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) AssignPropertiesToApplicationSecurityGroupStatusNetworkSecurityGroupsSecurityRuleSubResourceEmbedded(destination *alpha20201101s.ApplicationSecurityGroup_Status_NetworkSecurityGroupsSecurityRule_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SecurityRuleAccess_Status. Use v1beta20201101.SecurityRuleAccess_Status instead
type SecurityRuleAccess_Status string

const (
	SecurityRuleAccess_Status_Allow = SecurityRuleAccess_Status("Allow")
	SecurityRuleAccess_Status_Deny  = SecurityRuleAccess_Status("Deny")
)

// Deprecated version of SecurityRuleDirection_Status. Use v1beta20201101.SecurityRuleDirection_Status instead
type SecurityRuleDirection_Status string

const (
	SecurityRuleDirection_Status_Inbound  = SecurityRuleDirection_Status("Inbound")
	SecurityRuleDirection_Status_Outbound = SecurityRuleDirection_Status("Outbound")
)

// Deprecated version of SecurityRulePropertiesFormatAccess. Use v1beta20201101.SecurityRulePropertiesFormatAccess instead
// +kubebuilder:validation:Enum={"Allow","Deny"}
type SecurityRulePropertiesFormatAccess string

const (
	SecurityRulePropertiesFormatAccess_Allow = SecurityRulePropertiesFormatAccess("Allow")
	SecurityRulePropertiesFormatAccess_Deny  = SecurityRulePropertiesFormatAccess("Deny")
)

// Deprecated version of SecurityRulePropertiesFormatDirection. Use v1beta20201101.SecurityRulePropertiesFormatDirection
// instead
// +kubebuilder:validation:Enum={"Inbound","Outbound"}
type SecurityRulePropertiesFormatDirection string

const (
	SecurityRulePropertiesFormatDirection_Inbound  = SecurityRulePropertiesFormatDirection("Inbound")
	SecurityRulePropertiesFormatDirection_Outbound = SecurityRulePropertiesFormatDirection("Outbound")
)

// Deprecated version of SecurityRulePropertiesFormatProtocol. Use v1beta20201101.SecurityRulePropertiesFormatProtocol
// instead
// +kubebuilder:validation:Enum={"Ah","Esp","Icmp","*","Tcp","Udp"}
type SecurityRulePropertiesFormatProtocol string

const (
	SecurityRulePropertiesFormatProtocol_Ah   = SecurityRulePropertiesFormatProtocol("Ah")
	SecurityRulePropertiesFormatProtocol_Esp  = SecurityRulePropertiesFormatProtocol("Esp")
	SecurityRulePropertiesFormatProtocol_Icmp = SecurityRulePropertiesFormatProtocol("Icmp")
	SecurityRulePropertiesFormatProtocol_Star = SecurityRulePropertiesFormatProtocol("*")
	SecurityRulePropertiesFormatProtocol_Tcp  = SecurityRulePropertiesFormatProtocol("Tcp")
	SecurityRulePropertiesFormatProtocol_Udp  = SecurityRulePropertiesFormatProtocol("Udp")
)

// Deprecated version of SecurityRulePropertiesFormatStatusProtocol. Use
// v1beta20201101.SecurityRulePropertiesFormatStatusProtocol instead
type SecurityRulePropertiesFormatStatusProtocol string

const (
	SecurityRulePropertiesFormatStatusProtocol_Ah   = SecurityRulePropertiesFormatStatusProtocol("Ah")
	SecurityRulePropertiesFormatStatusProtocol_Esp  = SecurityRulePropertiesFormatStatusProtocol("Esp")
	SecurityRulePropertiesFormatStatusProtocol_Icmp = SecurityRulePropertiesFormatStatusProtocol("Icmp")
	SecurityRulePropertiesFormatStatusProtocol_Star = SecurityRulePropertiesFormatStatusProtocol("*")
	SecurityRulePropertiesFormatStatusProtocol_Tcp  = SecurityRulePropertiesFormatStatusProtocol("Tcp")
	SecurityRulePropertiesFormatStatusProtocol_Udp  = SecurityRulePropertiesFormatStatusProtocol("Udp")
)

func init() {
	SchemeBuilder.Register(&NetworkSecurityGroupsSecurityRule{}, &NetworkSecurityGroupsSecurityRuleList{})
}
