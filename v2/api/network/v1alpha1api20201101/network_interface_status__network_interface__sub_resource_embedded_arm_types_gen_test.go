// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by NetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormatSTATUSARMGenerator())
}

func Test_NetworkInterfacePropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormatSTATUSARM, NetworkInterfacePropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormatSTATUSARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormatSTATUSARM(subject NetworkInterfacePropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterfacePropertiesFormatSTATUSARMGenerator()
var networkInterfacePropertiesFormatSTATUSARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormatSTATUSARMGenerator returns a generator of NetworkInterfacePropertiesFormat_STATUSARM instances for property testing.
// We first initialize networkInterfacePropertiesFormatSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormatSTATUSARMGenerator != nil {
		return networkInterfacePropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM(generators)
	networkInterfacePropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM(generators)
	networkInterfacePropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_STATUSARM{}), generators)

	return networkInterfacePropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["HostedWorkloads"] = gen.SliceOf(gen.AlphaString())
	gens["MacAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormatSTATUSMigrationPhase_Abort,
		NetworkInterfacePropertiesFormatSTATUSMigrationPhase_Commit,
		NetworkInterfacePropertiesFormatSTATUSMigrationPhase_Committed,
		NetworkInterfacePropertiesFormatSTATUSMigrationPhase_None,
		NetworkInterfacePropertiesFormatSTATUSMigrationPhase_Prepare))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormatSTATUSNicType_Elastic, NetworkInterfacePropertiesFormatSTATUSNicType_Standard))
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettingsSTATUSARMGenerator())
	gens["DscpConfiguration"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["TapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["VirtualMachine"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
}

func Test_NetworkInterfaceDnsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettingsSTATUSARM, NetworkInterfaceDnsSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettingsSTATUSARM runs a test to see if a specific instance of NetworkInterfaceDnsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettingsSTATUSARM(subject NetworkInterfaceDnsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettings_STATUSARM instances for property testing - lazily instantiated by
// NetworkInterfaceDnsSettingsSTATUSARMGenerator()
var networkInterfaceDnsSettingsSTATUSARMGenerator gopter.Gen

// NetworkInterfaceDnsSettingsSTATUSARMGenerator returns a generator of NetworkInterfaceDnsSettings_STATUSARM instances for property testing.
func NetworkInterfaceDnsSettingsSTATUSARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettingsSTATUSARMGenerator != nil {
		return networkInterfaceDnsSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsSTATUSARM(generators)
	networkInterfaceDnsSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettings_STATUSARM{}), generators)

	return networkInterfaceDnsSettingsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["AppliedDnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["InternalDomainNameSuffix"] = gen.PtrOf(gen.AlphaString())
	gens["InternalFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by NetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by NetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM, NetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by NetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM, PrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
}

func Test_PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM, PrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by PrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
}

func Test_SubResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceSTATUSARM, SubResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceSTATUSARM runs a test to see if a specific instance of SubResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceSTATUSARM(subject SubResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUSARM instances for property testing - lazily instantiated by
// SubResourceSTATUSARMGenerator()
var subResourceSTATUSARMGenerator gopter.Gen

// SubResourceSTATUSARMGenerator returns a generator of SubResource_STATUSARM instances for property testing.
func SubResourceSTATUSARMGenerator() gopter.Gen {
	if subResourceSTATUSARMGenerator != nil {
		return subResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceSTATUSARM(generators)
	subResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUSARM{}), generators)

	return subResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM instances
// for property testing - lazily instantiated by
// NetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_STATUS_IPv4, IPVersion_STATUS_IPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for
// property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM, ApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by ApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var applicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func ApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return applicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM, BackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by BackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var backendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return backendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	backendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return backendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARM, InboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by InboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var inboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func InboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return inboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	inboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return inboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARM, NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARM(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM instances for property testing
// - lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARM(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_STATUSARM{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM, PublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuSTATUSARMGenerator())
}

func Test_Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetSTATUSNetworkInterfaceSubResourceEmbeddedARM, SubnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by SubnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var subnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func SubnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return subnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	subnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return subnetSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARM, VirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by VirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var virtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func VirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	virtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM
// instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_STATUS_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSTATUSNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddressSTATUSARMGenerator())
}

func Test_ApplicationGatewayBackendAddress_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressSTATUSARM, ApplicationGatewayBackendAddressSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressSTATUSARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressSTATUSARM(subject ApplicationGatewayBackendAddress_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_STATUSARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressSTATUSARMGenerator()
var applicationGatewayBackendAddressSTATUSARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressSTATUSARMGenerator returns a generator of ApplicationGatewayBackendAddress_STATUSARM instances for property testing.
func ApplicationGatewayBackendAddressSTATUSARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressSTATUSARMGenerator != nil {
		return applicationGatewayBackendAddressSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressSTATUSARM(generators)
	applicationGatewayBackendAddressSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_STATUSARM{}), generators)

	return applicationGatewayBackendAddressSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressSTATUSARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
