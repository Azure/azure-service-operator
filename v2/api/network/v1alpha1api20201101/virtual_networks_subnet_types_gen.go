// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/virtualNetwork.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
type VirtualNetworksSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworksSubnet_Spec                              `json:"spec,omitempty"`
	Status            Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetworksSubnet{}

// GetConditions returns the conditions of the resource
func (subnet *VirtualNetworksSubnet) GetConditions() conditions.Conditions {
	return subnet.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (subnet *VirtualNetworksSubnet) SetConditions(conditions conditions.Conditions) {
	subnet.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetworksSubnet{}

// ConvertFrom populates our VirtualNetworksSubnet from the provided hub VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201101storage.VirtualNetworksSubnet)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetworksSubnet but received %T instead", hub)
	}

	return subnet.AssignPropertiesFromVirtualNetworksSubnet(source)
}

// ConvertTo populates the provided hub VirtualNetworksSubnet from our VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201101storage.VirtualNetworksSubnet)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetworksSubnet but received %T instead", hub)
	}

	return subnet.AssignPropertiesToVirtualNetworksSubnet(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-virtualnetworkssubnet,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkssubnets,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworkssubnets.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetworksSubnet{}

// Default applies defaults to the VirtualNetworksSubnet resource
func (subnet *VirtualNetworksSubnet) Default() {
	subnet.defaultImpl()
	var temp interface{} = subnet
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (subnet *VirtualNetworksSubnet) defaultAzureName() {
	if subnet.Spec.AzureName == "" {
		subnet.Spec.AzureName = subnet.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetworksSubnet resource
func (subnet *VirtualNetworksSubnet) defaultImpl() { subnet.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetworksSubnet{}

// AzureName returns the Azure name of the resource
func (subnet *VirtualNetworksSubnet) AzureName() string {
	return subnet.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (subnet VirtualNetworksSubnet) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (subnet *VirtualNetworksSubnet) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (subnet *VirtualNetworksSubnet) GetSpec() genruntime.ConvertibleSpec {
	return &subnet.Spec
}

// GetStatus returns the status of this resource
func (subnet *VirtualNetworksSubnet) GetStatus() genruntime.ConvertibleStatus {
	return &subnet.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/virtualNetworks/subnets"
func (subnet *VirtualNetworksSubnet) GetType() string {
	return "Microsoft.Network/virtualNetworks/subnets"
}

// NewEmptyStatus returns a new empty (blank) status
func (subnet *VirtualNetworksSubnet) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (subnet *VirtualNetworksSubnet) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(subnet.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  subnet.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (subnet *VirtualNetworksSubnet) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded); ok {
		subnet.Status = *st
		return nil
	}

	// Convert status to required version
	var st Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	subnet.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-virtualnetworkssubnet,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworkssubnets,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworkssubnets.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetworksSubnet{}

// ValidateCreate validates the creation of the resource
func (subnet *VirtualNetworksSubnet) ValidateCreate() error {
	validations := subnet.createValidations()
	var temp interface{} = subnet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (subnet *VirtualNetworksSubnet) ValidateDelete() error {
	validations := subnet.deleteValidations()
	var temp interface{} = subnet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (subnet *VirtualNetworksSubnet) ValidateUpdate(old runtime.Object) error {
	validations := subnet.updateValidations()
	var temp interface{} = subnet
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (subnet *VirtualNetworksSubnet) createValidations() []func() error {
	return []func() error{subnet.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (subnet *VirtualNetworksSubnet) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (subnet *VirtualNetworksSubnet) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return subnet.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (subnet *VirtualNetworksSubnet) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&subnet.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualNetworksSubnet populates our VirtualNetworksSubnet from the provided source VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) AssignPropertiesFromVirtualNetworksSubnet(source *v1alpha1api20201101storage.VirtualNetworksSubnet) error {

	// ObjectMeta
	subnet.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworksSubnet_Spec
	err := spec.AssignPropertiesFromVirtualNetworksSubnet_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworksSubnet_Spec() to populate field Spec")
	}
	subnet.Spec = spec

	// Status
	var status Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = status.AssignPropertiesFromSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Status")
	}
	subnet.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSubnet populates the provided destination VirtualNetworksSubnet from our VirtualNetworksSubnet
func (subnet *VirtualNetworksSubnet) AssignPropertiesToVirtualNetworksSubnet(destination *v1alpha1api20201101storage.VirtualNetworksSubnet) error {

	// ObjectMeta
	destination.ObjectMeta = *subnet.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201101storage.VirtualNetworksSubnet_Spec
	err := subnet.Spec.AssignPropertiesToVirtualNetworksSubnet_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworksSubnet_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
	err = subnet.Status.AssignPropertiesToSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (subnet *VirtualNetworksSubnet) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: subnet.Spec.OriginalVersion(),
		Kind:    "VirtualNetworksSubnet",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/virtualNetwork.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
type VirtualNetworksSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetworksSubnet `json:"items"`
}

type Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//AddressPrefix: The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//AddressPrefixes: List of address prefixes for the subnet.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	//ApplicationGatewayIpConfigurations: Application gateway IP configurations of
	//virtual network resource.
	ApplicationGatewayIpConfigurations []ApplicationGatewayIPConfiguration_Status `json:"applicationGatewayIpConfigurations,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Delegations: An array of references to the delegations on the subnet.
	Delegations []Delegation_Status `json:"delegations,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this subnet.
	IpAllocations []SubResource_Status `json:"ipAllocations,omitempty"`

	//IpConfigurationProfiles: Array of IP configuration profiles which reference this
	//subnet.
	IpConfigurationProfiles []IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"ipConfigurationProfiles,omitempty"`

	//IpConfigurations: An array of references to the network interface IP
	//configurations using subnet.
	IpConfigurations []IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"ipConfigurations,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//NatGateway: Nat gateway associated with this subnet.
	NatGateway *SubResource_Status `json:"natGateway,omitempty"`

	//NetworkSecurityGroup: The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"networkSecurityGroup,omitempty"`

	//PrivateEndpointNetworkPolicies: Enable or Disable apply network policies on
	//private end point in the subnet.
	PrivateEndpointNetworkPolicies *string `json:"privateEndpointNetworkPolicies,omitempty"`

	//PrivateEndpoints: An array of references to private endpoints.
	PrivateEndpoints []PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"privateEndpoints,omitempty"`

	//PrivateLinkServiceNetworkPolicies: Enable or Disable apply network policies on
	//private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *string `json:"privateLinkServiceNetworkPolicies,omitempty"`

	//ProvisioningState: The provisioning state of the subnet resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Purpose: A read-only string identifying the intention of use for this subnet
	//based on delegations and other user-defined properties.
	Purpose *string `json:"purpose,omitempty"`

	//ResourceNavigationLinks: An array of references to the external resources using
	//subnet.
	ResourceNavigationLinks []ResourceNavigationLink_Status `json:"resourceNavigationLinks,omitempty"`

	//RouteTable: The reference to the RouteTable resource.
	RouteTable *RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"routeTable,omitempty"`

	//ServiceAssociationLinks: An array of references to services injecting into this
	//subnet.
	ServiceAssociationLinks []ServiceAssociationLink_Status `json:"serviceAssociationLinks,omitempty"`

	//ServiceEndpointPolicies: An array of service endpoint policies.
	ServiceEndpointPolicies []ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"serviceEndpointPolicies,omitempty"`

	//ServiceEndpoints: An array of service endpoints.
	ServiceEndpoints []ServiceEndpointPropertiesFormat_Status `json:"serviceEndpoints,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// ConvertStatusFrom populates our Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source
func (embedded *Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return embedded.AssignPropertiesFromSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = embedded.AssignPropertiesFromSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return embedded.AssignPropertiesToSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}
	err := embedded.AssignPropertiesToSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘AddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressPrefix != nil {
			addressPrefix := *typedInput.Properties.AddressPrefix
			embedded.AddressPrefix = &addressPrefix
		}
	}

	// Set property ‘AddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AddressPrefixes {
			embedded.AddressPrefixes = append(embedded.AddressPrefixes, item)
		}
	}

	// Set property ‘ApplicationGatewayIpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ApplicationGatewayIpConfigurations {
			var item1 ApplicationGatewayIPConfiguration_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ApplicationGatewayIpConfigurations = append(embedded.ApplicationGatewayIpConfigurations, item1)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Delegations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Delegations {
			var item1 Delegation_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.Delegations = append(embedded.Delegations, item1)
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpAllocations = append(embedded.IpAllocations, item1)
		}
	}

	// Set property ‘IpConfigurationProfiles’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurationProfiles {
			var item1 IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpConfigurationProfiles = append(embedded.IpConfigurationProfiles, item1)
		}
	}

	// Set property ‘IpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpConfigurations {
			var item1 IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.IpConfigurations = append(embedded.IpConfigurations, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 SubResource_Status
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			embedded.NatGateway = &natGateway
		}
	}

	// Set property ‘NetworkSecurityGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkSecurityGroup != nil {
			var networkSecurityGroup1 NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := networkSecurityGroup1.PopulateFromARM(owner, *typedInput.Properties.NetworkSecurityGroup)
			if err != nil {
				return err
			}
			networkSecurityGroup := networkSecurityGroup1
			embedded.NetworkSecurityGroup = &networkSecurityGroup
		}
	}

	// Set property ‘PrivateEndpointNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointNetworkPolicies != nil {
			privateEndpointNetworkPolicies := *typedInput.Properties.PrivateEndpointNetworkPolicies
			embedded.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
		}
	}

	// Set property ‘PrivateEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpoints {
			var item1 PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.PrivateEndpoints = append(embedded.PrivateEndpoints, item1)
		}
	}

	// Set property ‘PrivateLinkServiceNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceNetworkPolicies != nil {
			privateLinkServiceNetworkPolicies := *typedInput.Properties.PrivateLinkServiceNetworkPolicies
			embedded.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Purpose’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Purpose != nil {
			purpose := *typedInput.Properties.Purpose
			embedded.Purpose = &purpose
		}
	}

	// Set property ‘ResourceNavigationLinks’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ResourceNavigationLinks {
			var item1 ResourceNavigationLink_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ResourceNavigationLinks = append(embedded.ResourceNavigationLinks, item1)
		}
	}

	// Set property ‘RouteTable’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RouteTable != nil {
			var routeTable1 RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := routeTable1.PopulateFromARM(owner, *typedInput.Properties.RouteTable)
			if err != nil {
				return err
			}
			routeTable := routeTable1
			embedded.RouteTable = &routeTable
		}
	}

	// Set property ‘ServiceAssociationLinks’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceAssociationLinks {
			var item1 ServiceAssociationLink_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ServiceAssociationLinks = append(embedded.ServiceAssociationLinks, item1)
		}
	}

	// Set property ‘ServiceEndpointPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpointPolicies {
			var item1 ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ServiceEndpointPolicies = append(embedded.ServiceEndpointPolicies, item1)
		}
	}

	// Set property ‘ServiceEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpoints {
			var item1 ServiceEndpointPropertiesFormat_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			embedded.ServiceEndpoints = append(embedded.ServiceEndpoints, item1)
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// AddressPrefix
	embedded.AddressPrefix = genruntime.ClonePointerToString(source.AddressPrefix)

	// AddressPrefixes
	embedded.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if source.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]ApplicationGatewayIPConfiguration_Status, len(source.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range source.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration ApplicationGatewayIPConfiguration_Status
			err := applicationGatewayIpConfiguration.AssignPropertiesFromApplicationGatewayIPConfiguration_Status(&applicationGatewayIpConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationGatewayIPConfiguration_Status() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		embedded.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		embedded.ApplicationGatewayIpConfigurations = nil
	}

	// Conditions
	embedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]Delegation_Status, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation Delegation_Status
			err := delegation.AssignPropertiesFromDelegation_Status(&delegationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromDelegation_Status() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		embedded.Delegations = delegationList
	} else {
		embedded.Delegations = nil
	}

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource_Status, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource_Status
			err := ipAllocation.AssignPropertiesFromSubResource_Status(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		embedded.IpAllocations = ipAllocationList
	} else {
		embedded.IpAllocations = nil
	}

	// IpConfigurationProfiles
	if source.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(source.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range source.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
			var ipConfigurationProfile IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationProfile.AssignPropertiesFromIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfigurationProfileItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurationProfiles")
			}
			ipConfigurationProfileList[ipConfigurationProfileIndex] = ipConfigurationProfile
		}
		embedded.IpConfigurationProfiles = ipConfigurationProfileList
	} else {
		embedded.IpConfigurationProfiles = nil
	}

	// IpConfigurations
	if source.IpConfigurations != nil {
		ipConfigurationList := make([]IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(source.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range source.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfiguration.AssignPropertiesFromIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		embedded.IpConfigurations = ipConfigurationList
	} else {
		embedded.IpConfigurations = nil
	}

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource_Status
		err := natGateway.AssignPropertiesFromSubResource_Status(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field NatGateway")
		}
		embedded.NatGateway = &natGateway
	} else {
		embedded.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded
		err := networkSecurityGroup.AssignPropertiesFromNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
		}
		embedded.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		embedded.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	embedded.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(source.PrivateEndpointNetworkPolicies)

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := privateEndpoint.AssignPropertiesFromPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		embedded.PrivateEndpoints = privateEndpointList
	} else {
		embedded.PrivateEndpoints = nil
	}

	// PrivateLinkServiceNetworkPolicies
	embedded.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(source.PrivateLinkServiceNetworkPolicies)

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Purpose
	embedded.Purpose = genruntime.ClonePointerToString(source.Purpose)

	// ResourceNavigationLinks
	if source.ResourceNavigationLinks != nil {
		resourceNavigationLinkList := make([]ResourceNavigationLink_Status, len(source.ResourceNavigationLinks))
		for resourceNavigationLinkIndex, resourceNavigationLinkItem := range source.ResourceNavigationLinks {
			// Shadow the loop variable to avoid aliasing
			resourceNavigationLinkItem := resourceNavigationLinkItem
			var resourceNavigationLink ResourceNavigationLink_Status
			err := resourceNavigationLink.AssignPropertiesFromResourceNavigationLink_Status(&resourceNavigationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceNavigationLink_Status() to populate field ResourceNavigationLinks")
			}
			resourceNavigationLinkList[resourceNavigationLinkIndex] = resourceNavigationLink
		}
		embedded.ResourceNavigationLinks = resourceNavigationLinkList
	} else {
		embedded.ResourceNavigationLinks = nil
	}

	// RouteTable
	if source.RouteTable != nil {
		var routeTable RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded
		err := routeTable.AssignPropertiesFromRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field RouteTable")
		}
		embedded.RouteTable = &routeTable
	} else {
		embedded.RouteTable = nil
	}

	// ServiceAssociationLinks
	if source.ServiceAssociationLinks != nil {
		serviceAssociationLinkList := make([]ServiceAssociationLink_Status, len(source.ServiceAssociationLinks))
		for serviceAssociationLinkIndex, serviceAssociationLinkItem := range source.ServiceAssociationLinks {
			// Shadow the loop variable to avoid aliasing
			serviceAssociationLinkItem := serviceAssociationLinkItem
			var serviceAssociationLink ServiceAssociationLink_Status
			err := serviceAssociationLink.AssignPropertiesFromServiceAssociationLink_Status(&serviceAssociationLinkItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceAssociationLink_Status() to populate field ServiceAssociationLinks")
			}
			serviceAssociationLinkList[serviceAssociationLinkIndex] = serviceAssociationLink
		}
		embedded.ServiceAssociationLinks = serviceAssociationLinkList
	} else {
		embedded.ServiceAssociationLinks = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicy.AssignPropertiesFromServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		embedded.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		embedded.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat_Status, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat_Status
			err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormat_Status(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPropertiesFormat_Status() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		embedded.ServiceEndpoints = serviceEndpointList
	} else {
		embedded.ServiceEndpoints = nil
	}

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded from our Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToSubnet_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefix
	destination.AddressPrefix = genruntime.ClonePointerToString(embedded.AddressPrefix)

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(embedded.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if embedded.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]v1alpha1api20201101storage.ApplicationGatewayIPConfiguration_Status, len(embedded.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range embedded.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration v1alpha1api20201101storage.ApplicationGatewayIPConfiguration_Status
			err := applicationGatewayIpConfigurationItem.AssignPropertiesToApplicationGatewayIPConfiguration_Status(&applicationGatewayIpConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationGatewayIPConfiguration_Status() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		destination.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		destination.ApplicationGatewayIpConfigurations = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(embedded.Conditions)

	// Delegations
	if embedded.Delegations != nil {
		delegationList := make([]v1alpha1api20201101storage.Delegation_Status, len(embedded.Delegations))
		for delegationIndex, delegationItem := range embedded.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			var delegation v1alpha1api20201101storage.Delegation_Status
			err := delegationItem.AssignPropertiesToDelegation_Status(&delegation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToDelegation_Status() to populate field Delegations")
			}
			delegationList[delegationIndex] = delegation
		}
		destination.Delegations = delegationList
	} else {
		destination.Delegations = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// IpAllocations
	if embedded.IpAllocations != nil {
		ipAllocationList := make([]v1alpha1api20201101storage.SubResource_Status, len(embedded.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range embedded.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v1alpha1api20201101storage.SubResource_Status
			err := ipAllocationItem.AssignPropertiesToSubResource_Status(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// IpConfigurationProfiles
	if embedded.IpConfigurationProfiles != nil {
		ipConfigurationProfileList := make([]v1alpha1api20201101storage.IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.IpConfigurationProfiles))
		for ipConfigurationProfileIndex, ipConfigurationProfileItem := range embedded.IpConfigurationProfiles {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationProfileItem := ipConfigurationProfileItem
			var ipConfigurationProfile v1alpha1api20201101storage.IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationProfileItem.AssignPropertiesToIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfigurationProfile)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurationProfiles")
			}
			ipConfigurationProfileList[ipConfigurationProfileIndex] = ipConfigurationProfile
		}
		destination.IpConfigurationProfiles = ipConfigurationProfileList
	} else {
		destination.IpConfigurationProfiles = nil
	}

	// IpConfigurations
	if embedded.IpConfigurations != nil {
		ipConfigurationList := make([]v1alpha1api20201101storage.IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.IpConfigurations))
		for ipConfigurationIndex, ipConfigurationItem := range embedded.IpConfigurations {
			// Shadow the loop variable to avoid aliasing
			ipConfigurationItem := ipConfigurationItem
			var ipConfiguration v1alpha1api20201101storage.IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := ipConfigurationItem.AssignPropertiesToIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(&ipConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field IpConfigurations")
			}
			ipConfigurationList[ipConfigurationIndex] = ipConfiguration
		}
		destination.IpConfigurations = ipConfigurationList
	} else {
		destination.IpConfigurations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// NatGateway
	if embedded.NatGateway != nil {
		var natGateway v1alpha1api20201101storage.SubResource_Status
		err := embedded.NatGateway.AssignPropertiesToSubResource_Status(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if embedded.NetworkSecurityGroup != nil {
		var networkSecurityGroup v1alpha1api20201101storage.NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.NetworkSecurityGroup.AssignPropertiesToNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field NetworkSecurityGroup")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// PrivateEndpointNetworkPolicies
	destination.PrivateEndpointNetworkPolicies = genruntime.ClonePointerToString(embedded.PrivateEndpointNetworkPolicies)

	// PrivateEndpoints
	if embedded.PrivateEndpoints != nil {
		privateEndpointList := make([]v1alpha1api20201101storage.PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range embedded.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v1alpha1api20201101storage.PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := privateEndpointItem.AssignPropertiesToPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PrivateLinkServiceNetworkPolicies
	destination.PrivateLinkServiceNetworkPolicies = genruntime.ClonePointerToString(embedded.PrivateLinkServiceNetworkPolicies)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// Purpose
	destination.Purpose = genruntime.ClonePointerToString(embedded.Purpose)

	// ResourceNavigationLinks
	if embedded.ResourceNavigationLinks != nil {
		resourceNavigationLinkList := make([]v1alpha1api20201101storage.ResourceNavigationLink_Status, len(embedded.ResourceNavigationLinks))
		for resourceNavigationLinkIndex, resourceNavigationLinkItem := range embedded.ResourceNavigationLinks {
			// Shadow the loop variable to avoid aliasing
			resourceNavigationLinkItem := resourceNavigationLinkItem
			var resourceNavigationLink v1alpha1api20201101storage.ResourceNavigationLink_Status
			err := resourceNavigationLinkItem.AssignPropertiesToResourceNavigationLink_Status(&resourceNavigationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceNavigationLink_Status() to populate field ResourceNavigationLinks")
			}
			resourceNavigationLinkList[resourceNavigationLinkIndex] = resourceNavigationLink
		}
		destination.ResourceNavigationLinks = resourceNavigationLinkList
	} else {
		destination.ResourceNavigationLinks = nil
	}

	// RouteTable
	if embedded.RouteTable != nil {
		var routeTable v1alpha1api20201101storage.RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.RouteTable.AssignPropertiesToRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field RouteTable")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceAssociationLinks
	if embedded.ServiceAssociationLinks != nil {
		serviceAssociationLinkList := make([]v1alpha1api20201101storage.ServiceAssociationLink_Status, len(embedded.ServiceAssociationLinks))
		for serviceAssociationLinkIndex, serviceAssociationLinkItem := range embedded.ServiceAssociationLinks {
			// Shadow the loop variable to avoid aliasing
			serviceAssociationLinkItem := serviceAssociationLinkItem
			var serviceAssociationLink v1alpha1api20201101storage.ServiceAssociationLink_Status
			err := serviceAssociationLinkItem.AssignPropertiesToServiceAssociationLink_Status(&serviceAssociationLink)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceAssociationLink_Status() to populate field ServiceAssociationLinks")
			}
			serviceAssociationLinkList[serviceAssociationLinkIndex] = serviceAssociationLink
		}
		destination.ServiceAssociationLinks = serviceAssociationLinkList
	} else {
		destination.ServiceAssociationLinks = nil
	}

	// ServiceEndpointPolicies
	if embedded.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v1alpha1api20201101storage.ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded, len(embedded.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range embedded.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v1alpha1api20201101storage.ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyItem.AssignPropertiesToServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if embedded.ServiceEndpoints != nil {
		serviceEndpointList := make([]v1alpha1api20201101storage.ServiceEndpointPropertiesFormat_Status, len(embedded.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range embedded.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v1alpha1api20201101storage.ServiceEndpointPropertiesFormat_Status
			err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormat_Status(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPropertiesFormat_Status() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworksSubnet_Spec struct {
	//AddressPrefix: The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	//AddressPrefixes: List of address prefixes for the subnet.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`

	//ApplicationGatewayIpConfigurations: Application gateway IP configurations of
	//virtual network resource.
	ApplicationGatewayIpConfigurations []ApplicationGatewayIPConfiguration `json:"applicationGatewayIpConfigurations,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Delegations: An array of references to the delegations on the subnet.
	Delegations []genruntime.ResourceReference `json:"delegations,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this subnet.
	IpAllocations []SubResource `json:"ipAllocations,omitempty"`

	//NatGateway: Nat gateway associated with this subnet.
	NatGateway *SubResource `json:"natGateway,omitempty"`

	//NetworkSecurityGroup: The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroupSpec `json:"networkSecurityGroup,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PrivateEndpointNetworkPolicies: Enable or Disable apply network policies on
	//private end point in the subnet.
	PrivateEndpointNetworkPolicies *SubnetPropertiesFormatPrivateEndpointNetworkPolicies `json:"privateEndpointNetworkPolicies,omitempty"`

	//PrivateLinkServiceNetworkPolicies: Enable or Disable apply network policies on
	//private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *SubnetPropertiesFormatPrivateLinkServiceNetworkPolicies `json:"privateLinkServiceNetworkPolicies,omitempty"`

	//RouteTable: The reference to the RouteTable resource.
	RouteTable *RouteTableSpec `json:"routeTable,omitempty"`

	//ServiceEndpointPolicies: An array of service endpoint policies.
	ServiceEndpointPolicies []ServiceEndpointPolicySpec `json:"serviceEndpointPolicies,omitempty"`

	//ServiceEndpoints: An array of service endpoints.
	ServiceEndpoints []ServiceEndpointPropertiesFormat `json:"serviceEndpoints,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworksSubnet_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (subnet *VirtualNetworksSubnet_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if subnet == nil {
		return nil, nil
	}
	var result VirtualNetworksSubnet_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = subnet.AzureName

	// Set property ‘Id’:
	if subnet.Id != nil {
		id := *subnet.Id
		result.Id = &id
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if subnet.AddressPrefix != nil ||
		subnet.AddressPrefixes != nil ||
		subnet.ApplicationGatewayIpConfigurations != nil ||
		subnet.Delegations != nil ||
		subnet.IpAllocations != nil ||
		subnet.NatGateway != nil ||
		subnet.NetworkSecurityGroup != nil ||
		subnet.PrivateEndpointNetworkPolicies != nil ||
		subnet.PrivateLinkServiceNetworkPolicies != nil ||
		subnet.RouteTable != nil ||
		subnet.ServiceEndpointPolicies != nil ||
		subnet.ServiceEndpoints != nil {
		result.Properties = &SubnetPropertiesFormatARM{}
	}
	if subnet.AddressPrefix != nil {
		addressPrefix := *subnet.AddressPrefix
		result.Properties.AddressPrefix = &addressPrefix
	}
	for _, item := range subnet.AddressPrefixes {
		result.Properties.AddressPrefixes = append(result.Properties.AddressPrefixes, item)
	}
	for _, item := range subnet.ApplicationGatewayIpConfigurations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ApplicationGatewayIpConfigurations = append(result.Properties.ApplicationGatewayIpConfigurations, itemARM.(ApplicationGatewayIPConfigurationARM))
	}
	for _, item := range subnet.Delegations {
		result.Properties.Delegations = append(result.Properties.Delegations, item)
	}
	for _, item := range subnet.IpAllocations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpAllocations = append(result.Properties.IpAllocations, itemARM.(SubResourceARM))
	}
	if subnet.NatGateway != nil {
		natGatewayARM, err := (*subnet.NatGateway).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		natGateway := natGatewayARM.(SubResourceARM)
		result.Properties.NatGateway = &natGateway
	}
	if subnet.NetworkSecurityGroup != nil {
		networkSecurityGroupARM, err := (*subnet.NetworkSecurityGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkSecurityGroup := networkSecurityGroupARM.(NetworkSecurityGroupSpecARM)
		result.Properties.NetworkSecurityGroup = &networkSecurityGroup
	}
	if subnet.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicies := *subnet.PrivateEndpointNetworkPolicies
		result.Properties.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
	}
	if subnet.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicies := *subnet.PrivateLinkServiceNetworkPolicies
		result.Properties.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
	}
	if subnet.RouteTable != nil {
		routeTableARM, err := (*subnet.RouteTable).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		routeTable := routeTableARM.(RouteTableSpecARM)
		result.Properties.RouteTable = &routeTable
	}
	for _, item := range subnet.ServiceEndpointPolicies {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpointPolicies = append(result.Properties.ServiceEndpointPolicies, itemARM.(ServiceEndpointPolicySpecARM))
	}
	for _, item := range subnet.ServiceEndpoints {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpoints = append(result.Properties.ServiceEndpoints, itemARM.(ServiceEndpointPropertiesFormatARM))
	}

	// Set property ‘Type’:
	if subnet.Type != nil {
		typeVar := *subnet.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subnet *VirtualNetworksSubnet_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworksSubnet_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subnet *VirtualNetworksSubnet_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworksSubnet_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworksSubnet_SpecARM, got %T", armInput)
	}

	// Set property ‘AddressPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressPrefix != nil {
			addressPrefix := *typedInput.Properties.AddressPrefix
			subnet.AddressPrefix = &addressPrefix
		}
	}

	// Set property ‘AddressPrefixes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AddressPrefixes {
			subnet.AddressPrefixes = append(subnet.AddressPrefixes, item)
		}
	}

	// Set property ‘ApplicationGatewayIpConfigurations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ApplicationGatewayIpConfigurations {
			var item1 ApplicationGatewayIPConfiguration
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnet.ApplicationGatewayIpConfigurations = append(subnet.ApplicationGatewayIpConfigurations, item1)
		}
	}

	// Set property ‘AzureName’:
	subnet.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Delegations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Delegations {
			subnet.Delegations = append(subnet.Delegations, item)
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subnet.Id = &id
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnet.IpAllocations = append(subnet.IpAllocations, item1)
		}
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 SubResource
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			subnet.NatGateway = &natGateway
		}
	}

	// Set property ‘NetworkSecurityGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkSecurityGroup != nil {
			var networkSecurityGroup1 NetworkSecurityGroupSpec
			err := networkSecurityGroup1.PopulateFromARM(owner, *typedInput.Properties.NetworkSecurityGroup)
			if err != nil {
				return err
			}
			networkSecurityGroup := networkSecurityGroup1
			subnet.NetworkSecurityGroup = &networkSecurityGroup
		}
	}

	// Set property ‘Owner’:
	subnet.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PrivateEndpointNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointNetworkPolicies != nil {
			privateEndpointNetworkPolicies := *typedInput.Properties.PrivateEndpointNetworkPolicies
			subnet.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicies
		}
	}

	// Set property ‘PrivateLinkServiceNetworkPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceNetworkPolicies != nil {
			privateLinkServiceNetworkPolicies := *typedInput.Properties.PrivateLinkServiceNetworkPolicies
			subnet.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicies
		}
	}

	// Set property ‘RouteTable’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RouteTable != nil {
			var routeTable1 RouteTableSpec
			err := routeTable1.PopulateFromARM(owner, *typedInput.Properties.RouteTable)
			if err != nil {
				return err
			}
			routeTable := routeTable1
			subnet.RouteTable = &routeTable
		}
	}

	// Set property ‘ServiceEndpointPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpointPolicies {
			var item1 ServiceEndpointPolicySpec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnet.ServiceEndpointPolicies = append(subnet.ServiceEndpointPolicies, item1)
		}
	}

	// Set property ‘ServiceEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpoints {
			var item1 ServiceEndpointPropertiesFormat
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			subnet.ServiceEndpoints = append(subnet.ServiceEndpoints, item1)
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		subnet.Type = &typeVar
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworksSubnet_Spec{}

// ConvertSpecFrom populates our VirtualNetworksSubnet_Spec from the provided source
func (subnet *VirtualNetworksSubnet_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworksSubnet_Spec)
	if ok {
		// Populate our instance from source
		return subnet.AssignPropertiesFromVirtualNetworksSubnet_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworksSubnet_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = subnet.AssignPropertiesFromVirtualNetworksSubnet_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworksSubnet_Spec
func (subnet *VirtualNetworksSubnet_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworksSubnet_Spec)
	if ok {
		// Populate destination from our instance
		return subnet.AssignPropertiesToVirtualNetworksSubnet_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworksSubnet_Spec{}
	err := subnet.AssignPropertiesToVirtualNetworksSubnet_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworksSubnet_Spec populates our VirtualNetworksSubnet_Spec from the provided source VirtualNetworksSubnet_Spec
func (subnet *VirtualNetworksSubnet_Spec) AssignPropertiesFromVirtualNetworksSubnet_Spec(source *v1alpha1api20201101storage.VirtualNetworksSubnet_Spec) error {

	// AddressPrefix
	subnet.AddressPrefix = genruntime.ClonePointerToString(source.AddressPrefix)

	// AddressPrefixes
	subnet.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if source.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]ApplicationGatewayIPConfiguration, len(source.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range source.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration ApplicationGatewayIPConfiguration
			err := applicationGatewayIpConfiguration.AssignPropertiesFromApplicationGatewayIPConfiguration(&applicationGatewayIpConfigurationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromApplicationGatewayIPConfiguration() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		subnet.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		subnet.ApplicationGatewayIpConfigurations = nil
	}

	// AzureName
	subnet.AzureName = source.AzureName

	// Delegations
	if source.Delegations != nil {
		delegationList := make([]genruntime.ResourceReference, len(source.Delegations))
		for delegationIndex, delegationItem := range source.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			delegationList[delegationIndex] = delegationItem.Copy()
		}
		subnet.Delegations = delegationList
	} else {
		subnet.Delegations = nil
	}

	// Id
	subnet.Id = genruntime.ClonePointerToString(source.Id)

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource
			err := ipAllocation.AssignPropertiesFromSubResource(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		subnet.IpAllocations = ipAllocationList
	} else {
		subnet.IpAllocations = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway SubResource
		err := natGateway.AssignPropertiesFromSubResource(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field NatGateway")
		}
		subnet.NatGateway = &natGateway
	} else {
		subnet.NatGateway = nil
	}

	// NetworkSecurityGroup
	if source.NetworkSecurityGroup != nil {
		var networkSecurityGroup NetworkSecurityGroupSpec
		err := networkSecurityGroup.AssignPropertiesFromNetworkSecurityGroupSpec(source.NetworkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkSecurityGroupSpec() to populate field NetworkSecurityGroup")
		}
		subnet.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		subnet.NetworkSecurityGroup = nil
	}

	// Owner
	subnet.Owner = source.Owner.Copy()

	// PrivateEndpointNetworkPolicies
	if source.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicy := SubnetPropertiesFormatPrivateEndpointNetworkPolicies(*source.PrivateEndpointNetworkPolicies)
		subnet.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicy
	} else {
		subnet.PrivateEndpointNetworkPolicies = nil
	}

	// PrivateLinkServiceNetworkPolicies
	if source.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicy := SubnetPropertiesFormatPrivateLinkServiceNetworkPolicies(*source.PrivateLinkServiceNetworkPolicies)
		subnet.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicy
	} else {
		subnet.PrivateLinkServiceNetworkPolicies = nil
	}

	// RouteTable
	if source.RouteTable != nil {
		var routeTable RouteTableSpec
		err := routeTable.AssignPropertiesFromRouteTableSpec(source.RouteTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRouteTableSpec() to populate field RouteTable")
		}
		subnet.RouteTable = &routeTable
	} else {
		subnet.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if source.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]ServiceEndpointPolicySpec, len(source.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range source.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy ServiceEndpointPolicySpec
			err := serviceEndpointPolicy.AssignPropertiesFromServiceEndpointPolicySpec(&serviceEndpointPolicyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicySpec() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		subnet.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		subnet.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if source.ServiceEndpoints != nil {
		serviceEndpointList := make([]ServiceEndpointPropertiesFormat, len(source.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range source.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint ServiceEndpointPropertiesFormat
			err := serviceEndpoint.AssignPropertiesFromServiceEndpointPropertiesFormat(&serviceEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		subnet.ServiceEndpoints = serviceEndpointList
	} else {
		subnet.ServiceEndpoints = nil
	}

	// Type
	subnet.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworksSubnet_Spec populates the provided destination VirtualNetworksSubnet_Spec from our VirtualNetworksSubnet_Spec
func (subnet *VirtualNetworksSubnet_Spec) AssignPropertiesToVirtualNetworksSubnet_Spec(destination *v1alpha1api20201101storage.VirtualNetworksSubnet_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefix
	destination.AddressPrefix = genruntime.ClonePointerToString(subnet.AddressPrefix)

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(subnet.AddressPrefixes)

	// ApplicationGatewayIpConfigurations
	if subnet.ApplicationGatewayIpConfigurations != nil {
		applicationGatewayIpConfigurationList := make([]v1alpha1api20201101storage.ApplicationGatewayIPConfiguration, len(subnet.ApplicationGatewayIpConfigurations))
		for applicationGatewayIpConfigurationIndex, applicationGatewayIpConfigurationItem := range subnet.ApplicationGatewayIpConfigurations {
			// Shadow the loop variable to avoid aliasing
			applicationGatewayIpConfigurationItem := applicationGatewayIpConfigurationItem
			var applicationGatewayIpConfiguration v1alpha1api20201101storage.ApplicationGatewayIPConfiguration
			err := applicationGatewayIpConfigurationItem.AssignPropertiesToApplicationGatewayIPConfiguration(&applicationGatewayIpConfiguration)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToApplicationGatewayIPConfiguration() to populate field ApplicationGatewayIpConfigurations")
			}
			applicationGatewayIpConfigurationList[applicationGatewayIpConfigurationIndex] = applicationGatewayIpConfiguration
		}
		destination.ApplicationGatewayIpConfigurations = applicationGatewayIpConfigurationList
	} else {
		destination.ApplicationGatewayIpConfigurations = nil
	}

	// AzureName
	destination.AzureName = subnet.AzureName

	// Delegations
	if subnet.Delegations != nil {
		delegationList := make([]genruntime.ResourceReference, len(subnet.Delegations))
		for delegationIndex, delegationItem := range subnet.Delegations {
			// Shadow the loop variable to avoid aliasing
			delegationItem := delegationItem
			delegationList[delegationIndex] = delegationItem.Copy()
		}
		destination.Delegations = delegationList
	} else {
		destination.Delegations = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(subnet.Id)

	// IpAllocations
	if subnet.IpAllocations != nil {
		ipAllocationList := make([]v1alpha1api20201101storage.SubResource, len(subnet.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range subnet.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v1alpha1api20201101storage.SubResource
			err := ipAllocationItem.AssignPropertiesToSubResource(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// NatGateway
	if subnet.NatGateway != nil {
		var natGateway v1alpha1api20201101storage.SubResource
		err := subnet.NatGateway.AssignPropertiesToSubResource(&natGateway)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field NatGateway")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// NetworkSecurityGroup
	if subnet.NetworkSecurityGroup != nil {
		var networkSecurityGroup v1alpha1api20201101storage.NetworkSecurityGroupSpec
		err := subnet.NetworkSecurityGroup.AssignPropertiesToNetworkSecurityGroupSpec(&networkSecurityGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkSecurityGroupSpec() to populate field NetworkSecurityGroup")
		}
		destination.NetworkSecurityGroup = &networkSecurityGroup
	} else {
		destination.NetworkSecurityGroup = nil
	}

	// OriginalVersion
	destination.OriginalVersion = subnet.OriginalVersion()

	// Owner
	destination.Owner = subnet.Owner.Copy()

	// PrivateEndpointNetworkPolicies
	if subnet.PrivateEndpointNetworkPolicies != nil {
		privateEndpointNetworkPolicy := string(*subnet.PrivateEndpointNetworkPolicies)
		destination.PrivateEndpointNetworkPolicies = &privateEndpointNetworkPolicy
	} else {
		destination.PrivateEndpointNetworkPolicies = nil
	}

	// PrivateLinkServiceNetworkPolicies
	if subnet.PrivateLinkServiceNetworkPolicies != nil {
		privateLinkServiceNetworkPolicy := string(*subnet.PrivateLinkServiceNetworkPolicies)
		destination.PrivateLinkServiceNetworkPolicies = &privateLinkServiceNetworkPolicy
	} else {
		destination.PrivateLinkServiceNetworkPolicies = nil
	}

	// RouteTable
	if subnet.RouteTable != nil {
		var routeTable v1alpha1api20201101storage.RouteTableSpec
		err := subnet.RouteTable.AssignPropertiesToRouteTableSpec(&routeTable)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRouteTableSpec() to populate field RouteTable")
		}
		destination.RouteTable = &routeTable
	} else {
		destination.RouteTable = nil
	}

	// ServiceEndpointPolicies
	if subnet.ServiceEndpointPolicies != nil {
		serviceEndpointPolicyList := make([]v1alpha1api20201101storage.ServiceEndpointPolicySpec, len(subnet.ServiceEndpointPolicies))
		for serviceEndpointPolicyIndex, serviceEndpointPolicyItem := range subnet.ServiceEndpointPolicies {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyItem := serviceEndpointPolicyItem
			var serviceEndpointPolicy v1alpha1api20201101storage.ServiceEndpointPolicySpec
			err := serviceEndpointPolicyItem.AssignPropertiesToServiceEndpointPolicySpec(&serviceEndpointPolicy)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicySpec() to populate field ServiceEndpointPolicies")
			}
			serviceEndpointPolicyList[serviceEndpointPolicyIndex] = serviceEndpointPolicy
		}
		destination.ServiceEndpointPolicies = serviceEndpointPolicyList
	} else {
		destination.ServiceEndpointPolicies = nil
	}

	// ServiceEndpoints
	if subnet.ServiceEndpoints != nil {
		serviceEndpointList := make([]v1alpha1api20201101storage.ServiceEndpointPropertiesFormat, len(subnet.ServiceEndpoints))
		for serviceEndpointIndex, serviceEndpointItem := range subnet.ServiceEndpoints {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointItem := serviceEndpointItem
			var serviceEndpoint v1alpha1api20201101storage.ServiceEndpointPropertiesFormat
			err := serviceEndpointItem.AssignPropertiesToServiceEndpointPropertiesFormat(&serviceEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPropertiesFormat() to populate field ServiceEndpoints")
			}
			serviceEndpointList[serviceEndpointIndex] = serviceEndpoint
		}
		destination.ServiceEndpoints = serviceEndpointList
	} else {
		destination.ServiceEndpoints = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(subnet.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (subnet *VirtualNetworksSubnet_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (subnet *VirtualNetworksSubnet_Spec) SetAzureName(azureName string) {
	subnet.AzureName = azureName
}

type ApplicationGatewayIPConfiguration struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: Name of the IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	//Subnet: Reference to the subnet resource. A subnet from where application
	//gateway gets its private address.
	Subnet *SubResource `json:"subnet,omitempty"`
}

var _ genruntime.ARMTransformer = &ApplicationGatewayIPConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *ApplicationGatewayIPConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result ApplicationGatewayIPConfigurationARM

	// Set property ‘Id’:
	if configuration.Id != nil {
		id := *configuration.Id
		result.Id = &id
	}

	// Set property ‘Name’:
	if configuration.Name != nil {
		name := *configuration.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if configuration.Subnet != nil {
		result.Properties = &ApplicationGatewayIPConfigurationPropertiesFormatARM{}
	}
	if configuration.Subnet != nil {
		subnetARM, err := (*configuration.Subnet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		subnet := subnetARM.(SubResourceARM)
		result.Properties.Subnet = &subnet
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *ApplicationGatewayIPConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApplicationGatewayIPConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *ApplicationGatewayIPConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApplicationGatewayIPConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApplicationGatewayIPConfigurationARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		configuration.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromApplicationGatewayIPConfiguration populates our ApplicationGatewayIPConfiguration from the provided source ApplicationGatewayIPConfiguration
func (configuration *ApplicationGatewayIPConfiguration) AssignPropertiesFromApplicationGatewayIPConfiguration(source *v1alpha1api20201101storage.ApplicationGatewayIPConfiguration) error {

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource
		err := subnet.AssignPropertiesFromSubResource(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApplicationGatewayIPConfiguration populates the provided destination ApplicationGatewayIPConfiguration from our ApplicationGatewayIPConfiguration
func (configuration *ApplicationGatewayIPConfiguration) AssignPropertiesToApplicationGatewayIPConfiguration(destination *v1alpha1api20201101storage.ApplicationGatewayIPConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// Subnet
	if configuration.Subnet != nil {
		var subnet v1alpha1api20201101storage.SubResource
		err := configuration.Subnet.AssignPropertiesToSubResource(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ApplicationGatewayIPConfiguration_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: Name of the IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the application gateway IP
	//configuration resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Subnet: Reference to the subnet resource. A subnet from where application
	//gateway gets its private address.
	Subnet *SubResource_Status `json:"subnet,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ApplicationGatewayIPConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *ApplicationGatewayIPConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApplicationGatewayIPConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *ApplicationGatewayIPConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApplicationGatewayIPConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApplicationGatewayIPConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		configuration.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		configuration.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		configuration.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			configuration.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 SubResource_Status
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			configuration.Subnet = &subnet
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		configuration.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromApplicationGatewayIPConfiguration_Status populates our ApplicationGatewayIPConfiguration_Status from the provided source ApplicationGatewayIPConfiguration_Status
func (configuration *ApplicationGatewayIPConfiguration_Status) AssignPropertiesFromApplicationGatewayIPConfiguration_Status(source *v1alpha1api20201101storage.ApplicationGatewayIPConfiguration_Status) error {

	// Etag
	configuration.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	configuration.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	configuration.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	configuration.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Subnet
	if source.Subnet != nil {
		var subnet SubResource_Status
		err := subnet.AssignPropertiesFromSubResource_Status(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field Subnet")
		}
		configuration.Subnet = &subnet
	} else {
		configuration.Subnet = nil
	}

	// Type
	configuration.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToApplicationGatewayIPConfiguration_Status populates the provided destination ApplicationGatewayIPConfiguration_Status from our ApplicationGatewayIPConfiguration_Status
func (configuration *ApplicationGatewayIPConfiguration_Status) AssignPropertiesToApplicationGatewayIPConfiguration_Status(destination *v1alpha1api20201101storage.ApplicationGatewayIPConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(configuration.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(configuration.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(configuration.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(configuration.ProvisioningState)

	// Subnet
	if configuration.Subnet != nil {
		var subnet v1alpha1api20201101storage.SubResource_Status
		err := configuration.Subnet.AssignPropertiesToSubResource_Status(&subnet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field Subnet")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(configuration.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Delegation_Status struct {
	//Actions: The actions permitted to the service upon delegation.
	Actions []string `json:"actions,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a subnet. This name can be
	//used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the service delegation resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ServiceName: The name of the service to whom the subnet should be delegated
	//(e.g. Microsoft.Sql/servers).
	ServiceName *string `json:"serviceName,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &Delegation_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (delegation *Delegation_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Delegation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (delegation *Delegation_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Delegation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Delegation_StatusARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Actions {
			delegation.Actions = append(delegation.Actions, item)
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		delegation.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		delegation.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		delegation.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			delegation.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ServiceName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceName != nil {
			serviceName := *typedInput.Properties.ServiceName
			delegation.ServiceName = &serviceName
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		delegation.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromDelegation_Status populates our Delegation_Status from the provided source Delegation_Status
func (delegation *Delegation_Status) AssignPropertiesFromDelegation_Status(source *v1alpha1api20201101storage.Delegation_Status) error {

	// Actions
	delegation.Actions = genruntime.CloneSliceOfString(source.Actions)

	// Etag
	delegation.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	delegation.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	delegation.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	delegation.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ServiceName
	delegation.ServiceName = genruntime.ClonePointerToString(source.ServiceName)

	// Type
	delegation.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToDelegation_Status populates the provided destination Delegation_Status from our Delegation_Status
func (delegation *Delegation_Status) AssignPropertiesToDelegation_Status(destination *v1alpha1api20201101storage.Delegation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	destination.Actions = genruntime.CloneSliceOfString(delegation.Actions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(delegation.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(delegation.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(delegation.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(delegation.ProvisioningState)

	// ServiceName
	destination.ServiceName = genruntime.ClonePointerToString(delegation.ServiceName)

	// Type
	destination.Type = genruntime.ClonePointerToString(delegation.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the IP configuration profile
	//resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Type: Sub Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		embedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Type
	embedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded from our IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToIPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.IPConfigurationProfile_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// Type
	destination.Type = genruntime.ClonePointerToString(embedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAddress: The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *string `json:"privateIPAllocationMethod,omitempty"`

	//ProvisioningState: The provisioning state of the IP configuration resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//PublicIPAddress: The reference to the public IP resource.
	PublicIPAddress *PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded `json:"publicIPAddress,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		embedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		embedded.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			embedded.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			embedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			embedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddress != nil {
			var publicIPAddress1 PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded
			err := publicIPAddress1.PopulateFromARM(owner, *typedInput.Properties.PublicIPAddress)
			if err != nil {
				return err
			}
			publicIPAddress := publicIPAddress1
			embedded.PublicIPAddress = &publicIPAddress
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Etag
	embedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	embedded.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateIPAddress
	embedded.PrivateIPAddress = genruntime.ClonePointerToString(source.PrivateIPAddress)

	// PrivateIPAllocationMethod
	embedded.PrivateIPAllocationMethod = genruntime.ClonePointerToString(source.PrivateIPAllocationMethod)

	// ProvisioningState
	embedded.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicIPAddress
	if source.PublicIPAddress != nil {
		var publicIPAddress PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded
		err := publicIPAddress.AssignPropertiesFromPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(source.PublicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PublicIPAddress")
		}
		embedded.PublicIPAddress = &publicIPAddress
	} else {
		embedded.PublicIPAddress = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded from our IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToIPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.IPConfiguration_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(embedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(embedded.Name)

	// PrivateIPAddress
	destination.PrivateIPAddress = genruntime.ClonePointerToString(embedded.PrivateIPAddress)

	// PrivateIPAllocationMethod
	destination.PrivateIPAllocationMethod = genruntime.ClonePointerToString(embedded.PrivateIPAllocationMethod)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(embedded.ProvisioningState)

	// PublicIPAddress
	if embedded.PublicIPAddress != nil {
		var publicIPAddress v1alpha1api20201101storage.PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded
		err := embedded.PublicIPAddress.AssignPropertiesToPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(&publicIPAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded() to populate field PublicIPAddress")
		}
		destination.PublicIPAddress = &publicIPAddress
	} else {
		destination.PublicIPAddress = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded from our NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToNetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.NetworkSecurityGroup_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//ExtendedLocation: The extended location of the load balancer.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded from our PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToPrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.PrivateEndpoint_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceNavigationLink_Status struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource navigation link identifier.
	Id *string `json:"id,omitempty"`

	//Link: Link to the external resource.
	Link *string `json:"link,omitempty"`

	//LinkedResourceType: Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`

	//Name: Name of the resource that is unique within a resource group. This name can
	//be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the resource navigation link
	//resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceNavigationLink_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *ResourceNavigationLink_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceNavigationLink_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *ResourceNavigationLink_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceNavigationLink_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceNavigationLink_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		link.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		link.Id = &id
	}

	// Set property ‘Link’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Link != nil {
			link1 := *typedInput.Properties.Link
			link.Link = &link1
		}
	}

	// Set property ‘LinkedResourceType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkedResourceType != nil {
			linkedResourceType := *typedInput.Properties.LinkedResourceType
			link.LinkedResourceType = &linkedResourceType
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		link.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			link.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		link.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceNavigationLink_Status populates our ResourceNavigationLink_Status from the provided source ResourceNavigationLink_Status
func (link *ResourceNavigationLink_Status) AssignPropertiesFromResourceNavigationLink_Status(source *v1alpha1api20201101storage.ResourceNavigationLink_Status) error {

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Link
	link.Link = genruntime.ClonePointerToString(source.Link)

	// LinkedResourceType
	link.LinkedResourceType = genruntime.ClonePointerToString(source.LinkedResourceType)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	link.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToResourceNavigationLink_Status populates the provided destination ResourceNavigationLink_Status from our ResourceNavigationLink_Status
func (link *ResourceNavigationLink_Status) AssignPropertiesToResourceNavigationLink_Status(destination *v1alpha1api20201101storage.ResourceNavigationLink_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Link
	destination.Link = genruntime.ClonePointerToString(link.Link)

	// LinkedResourceType
	destination.LinkedResourceType = genruntime.ClonePointerToString(link.LinkedResourceType)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(link.ProvisioningState)

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RouteTableSpec struct {
	//DisableBgpRoutePropagation: Whether to disable the routes learned by BGP on that
	//route table. True means disable.
	DisableBgpRoutePropagation *bool `json:"disableBgpRoutePropagation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Routes: Collection of routes contained within a route table.
	Routes []genruntime.ResourceReference `json:"routes,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &RouteTableSpec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (table *RouteTableSpec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if table == nil {
		return nil, nil
	}
	var result RouteTableSpecARM

	// Set property ‘Id’:
	if table.Id != nil {
		id := *table.Id
		result.Id = &id
	}

	// Set property ‘Location’:
	if table.Location != nil {
		location := *table.Location
		result.Location = &location
	}

	// Set property ‘Properties’:
	if table.DisableBgpRoutePropagation != nil || table.Routes != nil {
		result.Properties = &RouteTablePropertiesFormatARM{}
	}
	if table.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *table.DisableBgpRoutePropagation
		result.Properties.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	}
	for _, item := range table.Routes {
		result.Properties.Routes = append(result.Properties.Routes, item)
	}

	// Set property ‘Tags’:
	if table.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range table.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (table *RouteTableSpec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RouteTableSpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (table *RouteTableSpec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RouteTableSpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RouteTableSpecARM, got %T", armInput)
	}

	// Set property ‘DisableBgpRoutePropagation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableBgpRoutePropagation != nil {
			disableBgpRoutePropagation := *typedInput.Properties.DisableBgpRoutePropagation
			table.DisableBgpRoutePropagation = &disableBgpRoutePropagation
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		table.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		table.Location = &location
	}

	// Set property ‘Routes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Routes {
			table.Routes = append(table.Routes, item)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		table.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			table.Tags[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromRouteTableSpec populates our RouteTableSpec from the provided source RouteTableSpec
func (table *RouteTableSpec) AssignPropertiesFromRouteTableSpec(source *v1alpha1api20201101storage.RouteTableSpec) error {

	// DisableBgpRoutePropagation
	if source.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *source.DisableBgpRoutePropagation
		table.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		table.DisableBgpRoutePropagation = nil
	}

	// Id
	table.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	table.Location = genruntime.ClonePointerToString(source.Location)

	// Routes
	if source.Routes != nil {
		routeList := make([]genruntime.ResourceReference, len(source.Routes))
		for routeIndex, routeItem := range source.Routes {
			// Shadow the loop variable to avoid aliasing
			routeItem := routeItem
			routeList[routeIndex] = routeItem.Copy()
		}
		table.Routes = routeList
	} else {
		table.Routes = nil
	}

	// Tags
	table.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToRouteTableSpec populates the provided destination RouteTableSpec from our RouteTableSpec
func (table *RouteTableSpec) AssignPropertiesToRouteTableSpec(destination *v1alpha1api20201101storage.RouteTableSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DisableBgpRoutePropagation
	if table.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *table.DisableBgpRoutePropagation
		destination.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		destination.DisableBgpRoutePropagation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(table.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(table.Location)

	// Routes
	if table.Routes != nil {
		routeList := make([]genruntime.ResourceReference, len(table.Routes))
		for routeIndex, routeItem := range table.Routes {
			// Shadow the loop variable to avoid aliasing
			routeItem := routeItem
			routeList[routeIndex] = routeItem.Copy()
		}
		destination.Routes = routeList
	} else {
		destination.Routes = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(table.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded from our RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToRouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.RouteTable_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceAssociationLink_Status struct {
	//AllowDelete: If true, the resource can be deleted.
	AllowDelete *bool `json:"allowDelete,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Link: Link to the external resource.
	Link *string `json:"link,omitempty"`

	//LinkedResourceType: Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`

	//Locations: A list of locations.
	Locations []string `json:"locations,omitempty"`

	//Name: Name of the resource that is unique within a resource group. This name can
	//be used to access the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the service association link
	//resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ServiceAssociationLink_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *ServiceAssociationLink_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceAssociationLink_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *ServiceAssociationLink_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceAssociationLink_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceAssociationLink_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowDelete’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowDelete != nil {
			allowDelete := *typedInput.Properties.AllowDelete
			link.AllowDelete = &allowDelete
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		link.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		link.Id = &id
	}

	// Set property ‘Link’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Link != nil {
			link1 := *typedInput.Properties.Link
			link.Link = &link1
		}
	}

	// Set property ‘LinkedResourceType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkedResourceType != nil {
			linkedResourceType := *typedInput.Properties.LinkedResourceType
			link.LinkedResourceType = &linkedResourceType
		}
	}

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			link.Locations = append(link.Locations, item)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		link.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			link.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		link.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceAssociationLink_Status populates our ServiceAssociationLink_Status from the provided source ServiceAssociationLink_Status
func (link *ServiceAssociationLink_Status) AssignPropertiesFromServiceAssociationLink_Status(source *v1alpha1api20201101storage.ServiceAssociationLink_Status) error {

	// AllowDelete
	if source.AllowDelete != nil {
		allowDelete := *source.AllowDelete
		link.AllowDelete = &allowDelete
	} else {
		link.AllowDelete = nil
	}

	// Etag
	link.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// Link
	link.Link = genruntime.ClonePointerToString(source.Link)

	// LinkedResourceType
	link.LinkedResourceType = genruntime.ClonePointerToString(source.LinkedResourceType)

	// Locations
	link.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	link.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	link.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Type
	link.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToServiceAssociationLink_Status populates the provided destination ServiceAssociationLink_Status from our ServiceAssociationLink_Status
func (link *ServiceAssociationLink_Status) AssignPropertiesToServiceAssociationLink_Status(destination *v1alpha1api20201101storage.ServiceAssociationLink_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowDelete
	if link.AllowDelete != nil {
		allowDelete := *link.AllowDelete
		destination.AllowDelete = &allowDelete
	} else {
		destination.AllowDelete = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(link.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Link
	destination.Link = genruntime.ClonePointerToString(link.Link)

	// LinkedResourceType
	destination.LinkedResourceType = genruntime.ClonePointerToString(link.LinkedResourceType)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(link.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(link.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(link.ProvisioningState)

	// Type
	destination.Type = genruntime.ClonePointerToString(link.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPolicySpec struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//ServiceEndpointPolicyDefinitions: A collection of service endpoint policy
	//definitions of the service endpoint policy.
	ServiceEndpointPolicyDefinitions []ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded `json:"serviceEndpointPolicyDefinitions,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceEndpointPolicySpec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *ServiceEndpointPolicySpec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result ServiceEndpointPolicySpecARM

	// Set property ‘Id’:
	if policy.Id != nil {
		id := *policy.Id
		result.Id = &id
	}

	// Set property ‘Location’:
	if policy.Location != nil {
		location := *policy.Location
		result.Location = &location
	}

	// Set property ‘Properties’:
	if policy.ServiceEndpointPolicyDefinitions != nil {
		result.Properties = &ServiceEndpointPolicyPropertiesFormat_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
	}
	for _, item := range policy.ServiceEndpointPolicyDefinitions {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ServiceEndpointPolicyDefinitions = append(result.Properties.ServiceEndpointPolicyDefinitions, itemARM.(ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedARM))
	}

	// Set property ‘Tags’:
	if policy.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range policy.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ServiceEndpointPolicySpec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPolicySpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ServiceEndpointPolicySpec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPolicySpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPolicySpecARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		policy.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		policy.Location = &location
	}

	// Set property ‘ServiceEndpointPolicyDefinitions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ServiceEndpointPolicyDefinitions {
			var item1 ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			policy.ServiceEndpointPolicyDefinitions = append(policy.ServiceEndpointPolicyDefinitions, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		policy.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			policy.Tags[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPolicySpec populates our ServiceEndpointPolicySpec from the provided source ServiceEndpointPolicySpec
func (policy *ServiceEndpointPolicySpec) AssignPropertiesFromServiceEndpointPolicySpec(source *v1alpha1api20201101storage.ServiceEndpointPolicySpec) error {

	// Id
	policy.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	policy.Location = genruntime.ClonePointerToString(source.Location)

	// ServiceEndpointPolicyDefinitions
	if source.ServiceEndpointPolicyDefinitions != nil {
		serviceEndpointPolicyDefinitionList := make([]ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded, len(source.ServiceEndpointPolicyDefinitions))
		for serviceEndpointPolicyDefinitionIndex, serviceEndpointPolicyDefinitionItem := range source.ServiceEndpointPolicyDefinitions {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyDefinitionItem := serviceEndpointPolicyDefinitionItem
			var serviceEndpointPolicyDefinition ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyDefinition.AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicyDefinitionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicyDefinitions")
			}
			serviceEndpointPolicyDefinitionList[serviceEndpointPolicyDefinitionIndex] = serviceEndpointPolicyDefinition
		}
		policy.ServiceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitionList
	} else {
		policy.ServiceEndpointPolicyDefinitions = nil
	}

	// Tags
	policy.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPolicySpec populates the provided destination ServiceEndpointPolicySpec from our ServiceEndpointPolicySpec
func (policy *ServiceEndpointPolicySpec) AssignPropertiesToServiceEndpointPolicySpec(destination *v1alpha1api20201101storage.ServiceEndpointPolicySpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(policy.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(policy.Location)

	// ServiceEndpointPolicyDefinitions
	if policy.ServiceEndpointPolicyDefinitions != nil {
		serviceEndpointPolicyDefinitionList := make([]v1alpha1api20201101storage.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded, len(policy.ServiceEndpointPolicyDefinitions))
		for serviceEndpointPolicyDefinitionIndex, serviceEndpointPolicyDefinitionItem := range policy.ServiceEndpointPolicyDefinitions {
			// Shadow the loop variable to avoid aliasing
			serviceEndpointPolicyDefinitionItem := serviceEndpointPolicyDefinitionItem
			var serviceEndpointPolicyDefinition v1alpha1api20201101storage.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
			err := serviceEndpointPolicyDefinitionItem.AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(&serviceEndpointPolicyDefinition)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded() to populate field ServiceEndpointPolicyDefinitions")
			}
			serviceEndpointPolicyDefinitionList[serviceEndpointPolicyDefinitionIndex] = serviceEndpointPolicyDefinition
		}
		destination.ServiceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitionList
	} else {
		destination.ServiceEndpointPolicyDefinitions = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(policy.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Kind: Kind of service endpoint policy. This is metadata used for the Azure
	//portal experience.
	Kind *string `json:"kind,omitempty"`
}

var _ genruntime.FromARMConverter = &ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		embedded.Kind = &kind
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	embedded.Kind = genruntime.ClonePointerToString(source.Kind)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded from our ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.ServiceEndpointPolicy_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(embedded.Kind)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPropertiesFormat struct {
	//Locations: A list of locations.
	Locations []string `json:"locations,omitempty"`

	//Service: The type of the endpoint service.
	Service *string `json:"service,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceEndpointPropertiesFormat{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (format *ServiceEndpointPropertiesFormat) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if format == nil {
		return nil, nil
	}
	var result ServiceEndpointPropertiesFormatARM

	// Set property ‘Locations’:
	for _, item := range format.Locations {
		result.Locations = append(result.Locations, item)
	}

	// Set property ‘Service’:
	if format.Service != nil {
		service := *format.Service
		result.Service = &service
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (format *ServiceEndpointPropertiesFormat) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPropertiesFormatARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (format *ServiceEndpointPropertiesFormat) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPropertiesFormatARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPropertiesFormatARM, got %T", armInput)
	}

	// Set property ‘Locations’:
	for _, item := range typedInput.Locations {
		format.Locations = append(format.Locations, item)
	}

	// Set property ‘Service’:
	if typedInput.Service != nil {
		service := *typedInput.Service
		format.Service = &service
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPropertiesFormat populates our ServiceEndpointPropertiesFormat from the provided source ServiceEndpointPropertiesFormat
func (format *ServiceEndpointPropertiesFormat) AssignPropertiesFromServiceEndpointPropertiesFormat(source *v1alpha1api20201101storage.ServiceEndpointPropertiesFormat) error {

	// Locations
	format.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Service
	format.Service = genruntime.ClonePointerToString(source.Service)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPropertiesFormat populates the provided destination ServiceEndpointPropertiesFormat from our ServiceEndpointPropertiesFormat
func (format *ServiceEndpointPropertiesFormat) AssignPropertiesToServiceEndpointPropertiesFormat(destination *v1alpha1api20201101storage.ServiceEndpointPropertiesFormat) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(format.Locations)

	// Service
	destination.Service = genruntime.ClonePointerToString(format.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPropertiesFormat_Status struct {
	//Locations: A list of locations.
	Locations []string `json:"locations,omitempty"`

	//ProvisioningState: The provisioning state of the service endpoint resource.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//Service: The type of the endpoint service.
	Service *string `json:"service,omitempty"`
}

var _ genruntime.FromARMConverter = &ServiceEndpointPropertiesFormat_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (format *ServiceEndpointPropertiesFormat_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPropertiesFormat_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (format *ServiceEndpointPropertiesFormat_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPropertiesFormat_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPropertiesFormat_StatusARM, got %T", armInput)
	}

	// Set property ‘Locations’:
	for _, item := range typedInput.Locations {
		format.Locations = append(format.Locations, item)
	}

	// Set property ‘ProvisioningState’:
	if typedInput.ProvisioningState != nil {
		provisioningState := *typedInput.ProvisioningState
		format.ProvisioningState = &provisioningState
	}

	// Set property ‘Service’:
	if typedInput.Service != nil {
		service := *typedInput.Service
		format.Service = &service
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPropertiesFormat_Status populates our ServiceEndpointPropertiesFormat_Status from the provided source ServiceEndpointPropertiesFormat_Status
func (format *ServiceEndpointPropertiesFormat_Status) AssignPropertiesFromServiceEndpointPropertiesFormat_Status(source *v1alpha1api20201101storage.ServiceEndpointPropertiesFormat_Status) error {

	// Locations
	format.Locations = genruntime.CloneSliceOfString(source.Locations)

	// ProvisioningState
	format.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Service
	format.Service = genruntime.ClonePointerToString(source.Service)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPropertiesFormat_Status populates the provided destination ServiceEndpointPropertiesFormat_Status from our ServiceEndpointPropertiesFormat_Status
func (format *ServiceEndpointPropertiesFormat_Status) AssignPropertiesToServiceEndpointPropertiesFormat_Status(destination *v1alpha1api20201101storage.ServiceEndpointPropertiesFormat_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(format.Locations)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(format.ProvisioningState)

	// Service
	destination.Service = genruntime.ClonePointerToString(format.Service)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type SubnetPropertiesFormatPrivateEndpointNetworkPolicies string

const (
	SubnetPropertiesFormatPrivateEndpointNetworkPoliciesDisabled = SubnetPropertiesFormatPrivateEndpointNetworkPolicies("Disabled")
	SubnetPropertiesFormatPrivateEndpointNetworkPoliciesEnabled  = SubnetPropertiesFormatPrivateEndpointNetworkPolicies("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type SubnetPropertiesFormatPrivateLinkServiceNetworkPolicies string

const (
	SubnetPropertiesFormatPrivateLinkServiceNetworkPoliciesDisabled = SubnetPropertiesFormatPrivateLinkServiceNetworkPolicies("Disabled")
	SubnetPropertiesFormatPrivateLinkServiceNetworkPoliciesEnabled  = SubnetPropertiesFormatPrivateLinkServiceNetworkPolicies("Enabled")
)

type PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Sku: The public IP address SKU.
	Sku *PublicIPAddressSku_Status `json:"sku,omitempty"`

	//Zones: A list of availability zones denoting the IP allocated for the resource
	//needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		embedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		embedded.Sku = &sku
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		embedded.Zones = append(embedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded populates our PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded from the provided source PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		embedded.ExtendedLocation = &extendedLocation
	} else {
		embedded.ExtendedLocation = nil
	}

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku_Status
		err := sku.AssignPropertiesFromPublicIPAddressSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPublicIPAddressSku_Status() to populate field Sku")
		}
		embedded.Sku = &sku
	} else {
		embedded.Sku = nil
	}

	// Zones
	embedded.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded from our PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToPublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.PublicIPAddress_Status_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if embedded.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := embedded.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Sku
	if embedded.Sku != nil {
		var sku v1alpha1api20201101storage.PublicIPAddressSku_Status
		err := embedded.Sku.AssignPropertiesToPublicIPAddressSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPublicIPAddressSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(embedded.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedARM

	// Set property ‘Id’:
	if embedded.Id != nil {
		id := *embedded.Id
		result.Id = &id
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded populates our ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded from the provided source ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesFromServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(source *v1alpha1api20201101storage.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded populates the provided destination ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded from our ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded
func (embedded *ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) AssignPropertiesToServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded(destination *v1alpha1api20201101storage.ServiceEndpointPolicyDefinition_VirtualNetworksSubnet_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&VirtualNetworksSubnet{}, &VirtualNetworksSubnetList{})
}
