// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkInterfaces_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaces_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacesSPECARM, NetworkInterfacesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacesSPECARM runs a test to see if a specific instance of NetworkInterfaces_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacesSPECARM(subject NetworkInterfaces_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaces_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaces_SPECARM instances for property testing - lazily instantiated by
//NetworkInterfacesSPECARMGenerator()
var networkInterfacesSPECARMGenerator gopter.Gen

// NetworkInterfacesSPECARMGenerator returns a generator of NetworkInterfaces_SPECARM instances for property testing.
// We first initialize networkInterfacesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacesSPECARMGenerator() gopter.Gen {
	if networkInterfacesSPECARMGenerator != nil {
		return networkInterfacesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacesSPECARM(generators)
	networkInterfacesSPECARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaces_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacesSPECARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacesSPECARM(generators)
	networkInterfacesSPECARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaces_SPECARM{}), generators)

	return networkInterfacesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfacesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacesSPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormatSpecARMGenerator())
}

func Test_NetworkInterfacePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormatSpecARM, NetworkInterfacePropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormatSpecARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormatSpecARM(subject NetworkInterfacePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//NetworkInterfacePropertiesFormatSpecARMGenerator()
var networkInterfacePropertiesFormatSpecARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormatSpecARMGenerator returns a generator of NetworkInterfacePropertiesFormat_SpecARM instances for property testing.
// We first initialize networkInterfacePropertiesFormatSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormatSpecARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormatSpecARMGenerator != nil {
		return networkInterfacePropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM(generators)
	networkInterfacePropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM(generators)
	networkInterfacePropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_SpecARM{}), generators)

	return networkInterfacePropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormatSpecMigrationPhaseAbort,
		NetworkInterfacePropertiesFormatSpecMigrationPhaseCommit,
		NetworkInterfacePropertiesFormatSpecMigrationPhaseCommitted,
		NetworkInterfacePropertiesFormatSpecMigrationPhaseNone,
		NetworkInterfacePropertiesFormatSpecMigrationPhasePrepare))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormatSpecNicTypeElastic, NetworkInterfacePropertiesFormatSpecNicTypeStandard))
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettingsSpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkServiceSpecARMGenerator())
}

func Test_NetworkInterfaceDnsSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettingsSpecARM, NetworkInterfaceDnsSettingsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettingsSpecARM runs a test to see if a specific instance of NetworkInterfaceDnsSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettingsSpecARM(subject NetworkInterfaceDnsSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettings_SpecARM instances for property testing - lazily instantiated by
//NetworkInterfaceDnsSettingsSpecARMGenerator()
var networkInterfaceDnsSettingsSpecARMGenerator gopter.Gen

// NetworkInterfaceDnsSettingsSpecARMGenerator returns a generator of NetworkInterfaceDnsSettings_SpecARM instances for property testing.
func NetworkInterfaceDnsSettingsSpecARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettingsSpecARMGenerator != nil {
		return networkInterfaceDnsSettingsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsSpecARM(generators)
	networkInterfaceDnsSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettings_SpecARM{}), generators)

	return networkInterfaceDnsSettingsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by NetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM, NetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM(subject NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by NetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_PrivateLinkService_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkService_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceSpecARM, PrivateLinkServiceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceSpecARM runs a test to see if a specific instance of PrivateLinkService_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceSpecARM(subject PrivateLinkService_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkService_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkService_SpecARM instances for property testing - lazily instantiated by
//PrivateLinkServiceSpecARMGenerator()
var privateLinkServiceSpecARMGenerator gopter.Gen

// PrivateLinkServiceSpecARMGenerator returns a generator of PrivateLinkService_SpecARM instances for property testing.
// We first initialize privateLinkServiceSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceSpecARMGenerator() gopter.Gen {
	if privateLinkServiceSpecARMGenerator != nil {
		return privateLinkServiceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM(generators)
	privateLinkServiceSpecARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceSpecARM(generators)
	privateLinkServiceSpecARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_SpecARM{}), generators)

	return privateLinkServiceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceSpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSpecARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances
//for property testing - lazily instantiated by
//NetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPoolSpecARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpecARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressSpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM, NetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(subject NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by
//NetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SecurityRules"] = gen.SliceOf(SecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM, PrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(subject PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by PrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["EnableProxyProtocol"] = gen.PtrOf(gen.Bool())
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServicePropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["AutoApproval"] = gen.PtrOf(ResourceSetSpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(PrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerFrontendIpConfigurations"] = gen.SliceOf(FrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["Visibility"] = gen.PtrOf(ResourceSetSpecARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolSpecARM, ApplicationGatewayBackendAddressPoolSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolSpecARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolSpecARM(subject ApplicationGatewayBackendAddressPool_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_SpecARM instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddressPoolSpecARMGenerator()
var applicationGatewayBackendAddressPoolSpecARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolSpecARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_SpecARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolSpecARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolSpecARMGenerator != nil {
		return applicationGatewayBackendAddressPoolSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM(generators)
	applicationGatewayBackendAddressPoolSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM(generators)
	applicationGatewayBackendAddressPoolSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_SpecARM{}), generators)

	return applicationGatewayBackendAddressPoolSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator())
}

func Test_BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARM, BackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARM(subject BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by BackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var backendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return backendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	backendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return backendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM, FrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(subject FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by FrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARM, InboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARM(subject InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by InboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var inboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func InboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return inboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	inboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return inboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM, PrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(subject PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by PrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ResourceSet_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSet_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSetSpecARM, ResourceSetSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSetSpecARM runs a test to see if a specific instance of ResourceSet_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSetSpecARM(subject ResourceSet_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSet_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSet_SpecARM instances for property testing - lazily instantiated by ResourceSetSpecARMGenerator()
var resourceSetSpecARMGenerator gopter.Gen

// ResourceSetSpecARMGenerator returns a generator of ResourceSet_SpecARM instances for property testing.
func ResourceSetSpecARMGenerator() gopter.Gen {
	if resourceSetSpecARMGenerator != nil {
		return resourceSetSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSetSpecARM(generators)
	resourceSetSpecARMGenerator = gen.Struct(reflect.TypeOf(ResourceSet_SpecARM{}), generators)

	return resourceSetSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSetSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSetSpecARM(gens map[string]gopter.Gen) {
	gens["Subscriptions"] = gen.SliceOf(gen.AlphaString())
}

func Test_SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARM, SecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARM(subject SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var securityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// SecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func SecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if securityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return securityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	securityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return securityRuleSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRuleSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetSpecNetworkInterfaceSubResourceEmbeddedARM, SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetSpecNetworkInterfaceSubResourceEmbeddedARM(subject Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var subnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return subnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	subnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return subnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM, VirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM(subject VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by VirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatSpecARM, ApplicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatSpecARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatSpecARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM instances for property testing - lazily
//instantiated by ApplicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM instances for property testing.
func ApplicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSpecARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormatSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddressSpecARMGenerator())
}

func Test_FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM, FrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(subject FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//FrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressSpecARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceSpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM, PrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(subject PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//PrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationPropertiesSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubnetSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM, VirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(subject VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by VirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator()
var virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(generators)
	virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormatSpecNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(FrontendIPConfigurationSpecNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddress_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressSpecARM, ApplicationGatewayBackendAddressSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressSpecARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressSpecARM(subject ApplicationGatewayBackendAddress_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_SpecARM instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddressSpecARMGenerator()
var applicationGatewayBackendAddressSpecARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressSpecARMGenerator returns a generator of ApplicationGatewayBackendAddress_SpecARM instances for property testing.
func ApplicationGatewayBackendAddressSpecARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressSpecARMGenerator != nil {
		return applicationGatewayBackendAddressSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressSpecARM(generators)
	applicationGatewayBackendAddressSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_SpecARM{}), generators)

	return applicationGatewayBackendAddressSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressSpecARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
