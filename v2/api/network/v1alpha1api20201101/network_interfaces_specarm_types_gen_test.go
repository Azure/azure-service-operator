// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkInterfaces_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaces_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaces_SPECARM, NetworkInterfaces_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaces_SPECARM runs a test to see if a specific instance of NetworkInterfaces_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaces_SPECARM(subject NetworkInterfaces_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaces_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaces_SPECARM instances for property testing - lazily instantiated by
//NetworkInterfaces_SPECARMGenerator()
var networkInterfaces_specarmGenerator gopter.Gen

// NetworkInterfaces_SPECARMGenerator returns a generator of NetworkInterfaces_SPECARM instances for property testing.
// We first initialize networkInterfaces_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaces_SPECARMGenerator() gopter.Gen {
	if networkInterfaces_specarmGenerator != nil {
		return networkInterfaces_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaces_SPECARM(generators)
	networkInterfaces_specarmGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaces_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaces_SPECARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaces_SPECARM(generators)
	networkInterfaces_specarmGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaces_SPECARM{}), generators)

	return networkInterfaces_specarmGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaces_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaces_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaces_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaces_SPECARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormat_SpecARMGenerator())
}

func Test_NetworkInterfacePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormat_SpecARM, NetworkInterfacePropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormat_SpecARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormat_SpecARM(subject NetworkInterfacePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//NetworkInterfacePropertiesFormat_SpecARMGenerator()
var networkInterfacePropertiesFormat_specARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormat_SpecARMGenerator returns a generator of NetworkInterfacePropertiesFormat_SpecARM instances for property testing.
// We first initialize networkInterfacePropertiesFormat_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormat_SpecARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormat_specARMGenerator != nil {
		return networkInterfacePropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM(generators)
	networkInterfacePropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM(generators)
	networkInterfacePropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_SpecARM{}), generators)

	return networkInterfacePropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormat_MigrationPhase_SpecAbort,
		NetworkInterfacePropertiesFormat_MigrationPhase_SpecCommit,
		NetworkInterfacePropertiesFormat_MigrationPhase_SpecCommitted,
		NetworkInterfacePropertiesFormat_MigrationPhase_SpecNone,
		NetworkInterfacePropertiesFormat_MigrationPhase_SpecPrepare))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormat_NicType_SpecElastic, NetworkInterfacePropertiesFormat_NicType_SpecStandard))
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettings_SpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkService_SpecARMGenerator())
}

func Test_NetworkInterfaceDnsSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettings_SpecARM, NetworkInterfaceDnsSettings_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettings_SpecARM runs a test to see if a specific instance of NetworkInterfaceDnsSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettings_SpecARM(subject NetworkInterfaceDnsSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettings_SpecARM instances for property testing - lazily instantiated by
//NetworkInterfaceDnsSettings_SpecARMGenerator()
var networkInterfaceDnsSettings_specARMGenerator gopter.Gen

// NetworkInterfaceDnsSettings_SpecARMGenerator returns a generator of NetworkInterfaceDnsSettings_SpecARM instances for property testing.
func NetworkInterfaceDnsSettings_SpecARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettings_specARMGenerator != nil {
		return networkInterfaceDnsSettings_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_SpecARM(generators)
	networkInterfaceDnsSettings_specARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettings_SpecARM{}), generators)

	return networkInterfaceDnsSettings_specARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettings_SpecARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM, NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(subject NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM, NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM(subject NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroup_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_PrivateLinkService_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkService_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkService_SpecARM, PrivateLinkService_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkService_SpecARM runs a test to see if a specific instance of PrivateLinkService_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkService_SpecARM(subject PrivateLinkService_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkService_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkService_SpecARM instances for property testing - lazily instantiated by
//PrivateLinkService_SpecARMGenerator()
var privateLinkService_specARMGenerator gopter.Gen

// PrivateLinkService_SpecARMGenerator returns a generator of PrivateLinkService_SpecARM instances for property testing.
// We first initialize privateLinkService_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkService_SpecARMGenerator() gopter.Gen {
	if privateLinkService_specARMGenerator != nil {
		return privateLinkService_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkService_SpecARM(generators)
	privateLinkService_specARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkService_SpecARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkService_SpecARM(generators)
	privateLinkService_specARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_SpecARM{}), generators)

	return privateLinkService_specARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkService_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkService_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkService_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkService_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecARMGenerator())
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM, NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances
//for property testing - lazily instantiated by
//NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPool_SpecARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_SpecARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_SpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM, NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(subject NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by
//NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var networkSecurityGroupPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	networkSecurityGroupPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SecurityRules"] = gen.SliceOf(SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM, PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(subject PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing
//- lazily instantiated by PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceProperties_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["EnableProxyProtocol"] = gen.PtrOf(gen.Bool())
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["AutoApproval"] = gen.PtrOf(ResourceSet_SpecARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["LoadBalancerFrontendIpConfigurations"] = gen.SliceOf(FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
	gens["Visibility"] = gen.PtrOf(ResourceSet_SpecARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPool_SpecARM, ApplicationGatewayBackendAddressPool_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPool_SpecARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPool_SpecARM(subject ApplicationGatewayBackendAddressPool_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_SpecARM instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddressPool_SpecARMGenerator()
var applicationGatewayBackendAddressPool_specARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPool_SpecARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_SpecARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPool_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPool_SpecARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPool_specARMGenerator != nil {
		return applicationGatewayBackendAddressPool_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM(generators)
	applicationGatewayBackendAddressPool_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM(generators)
	applicationGatewayBackendAddressPool_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_SpecARM{}), generators)

	return applicationGatewayBackendAddressPool_specARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPool_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARMGenerator())
}

func Test_BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM, BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM(subject BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var backendAddressPool_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPool_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return backendAddressPool_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	backendAddressPool_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return backendAddressPool_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPool_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM, FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(subject FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM, InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM(subject InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var inboundNatRule_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRule_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return inboundNatRule_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	inboundNatRule_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return inboundNatRule_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRule_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM, PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(subject PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by
//PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceIpConfiguration_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_ResourceSet_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSet_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSet_SpecARM, ResourceSet_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSet_SpecARM runs a test to see if a specific instance of ResourceSet_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSet_SpecARM(subject ResourceSet_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSet_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSet_SpecARM instances for property testing - lazily instantiated by
//ResourceSet_SpecARMGenerator()
var resourceSet_specARMGenerator gopter.Gen

// ResourceSet_SpecARMGenerator returns a generator of ResourceSet_SpecARM instances for property testing.
func ResourceSet_SpecARMGenerator() gopter.Gen {
	if resourceSet_specARMGenerator != nil {
		return resourceSet_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSet_SpecARM(generators)
	resourceSet_specARMGenerator = gen.Struct(reflect.TypeOf(ResourceSet_SpecARM{}), generators)

	return resourceSet_specARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSet_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSet_SpecARM(gens map[string]gopter.Gen) {
	gens["Subscriptions"] = gen.SliceOf(gen.AlphaString())
}

func Test_SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM, SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM(subject SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var securityRule_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if securityRule_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return securityRule_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	securityRule_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return securityRule_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRule_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Spec_NetworkInterface_SubResourceEmbeddedARM, Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Spec_NetworkInterface_SubResourceEmbeddedARM(subject Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var subnet_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return subnet_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	subnet_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return subnet_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM, VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM(subject VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTap_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTap_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM, ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM instances for property testing - lazily
//instantiated by ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormat_specARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM instances for property testing.
func ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormat_specARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormat_specARMGenerator
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddress_SpecARMGenerator())
}

func Test_FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM, FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(subject FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return frontendIPConfigurationPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontendIPConfigurationPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddress_SpecARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_SpecARMGenerator())
	gens["Subnet"] = gen.PtrOf(Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM, PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(subject PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for
//property testing - lazily instantiated by
//PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceIpConfigurationProperties_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_SpecIPv4, IPVersion_SpecIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_SpecDynamic, IPAllocationMethod_SpecStatic))
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceIpConfigurationProperties_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM, VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(subject VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by
//VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator()
var virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(generators)
	virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapPropertiesFormat_spec_networkInterface_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DestinationPort"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkTapPropertiesFormat_Spec_NetworkInterface_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["DestinationLoadBalancerFrontEndIPConfiguration"] = gen.PtrOf(FrontendIPConfiguration_Spec_NetworkInterface_SubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddress_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddress_SpecARM, ApplicationGatewayBackendAddress_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddress_SpecARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddress_SpecARM(subject ApplicationGatewayBackendAddress_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_SpecARM instances for property testing - lazily instantiated by
//ApplicationGatewayBackendAddress_SpecARMGenerator()
var applicationGatewayBackendAddress_specARMGenerator gopter.Gen

// ApplicationGatewayBackendAddress_SpecARMGenerator returns a generator of ApplicationGatewayBackendAddress_SpecARM instances for property testing.
func ApplicationGatewayBackendAddress_SpecARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddress_specARMGenerator != nil {
		return applicationGatewayBackendAddress_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_SpecARM(generators)
	applicationGatewayBackendAddress_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_SpecARM{}), generators)

	return applicationGatewayBackendAddress_specARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddress_SpecARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
