// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/virtualNetwork.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}
type VirtualNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualNetworks_SPEC  `json:"spec,omitempty"`
	Status            VirtualNetwork_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &VirtualNetwork{}

// GetConditions returns the conditions of the resource
func (network *VirtualNetwork) GetConditions() conditions.Conditions {
	return network.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (network *VirtualNetwork) SetConditions(conditions conditions.Conditions) {
	network.Status.Conditions = conditions
}

var _ conversion.Convertible = &VirtualNetwork{}

// ConvertFrom populates our VirtualNetwork from the provided hub VirtualNetwork
func (network *VirtualNetwork) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201101storage.VirtualNetwork)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetwork but received %T instead", hub)
	}

	return network.AssignPropertiesFromVirtualNetwork(source)
}

// ConvertTo populates the provided hub VirtualNetwork from our VirtualNetwork
func (network *VirtualNetwork) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201101storage.VirtualNetwork)
	if !ok {
		return fmt.Errorf("expected storage:network/v1alpha1api20201101storage/VirtualNetwork but received %T instead", hub)
	}

	return network.AssignPropertiesToVirtualNetwork(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1alpha1api20201101-virtualnetwork,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworks,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.virtualnetworks.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &VirtualNetwork{}

// Default applies defaults to the VirtualNetwork resource
func (network *VirtualNetwork) Default() {
	network.defaultImpl()
	var temp interface{} = network
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (network *VirtualNetwork) defaultAzureName() {
	if network.Spec.AzureName == "" {
		network.Spec.AzureName = network.Name
	}
}

// defaultImpl applies the code generated defaults to the VirtualNetwork resource
func (network *VirtualNetwork) defaultImpl() { network.defaultAzureName() }

var _ genruntime.KubernetesResource = &VirtualNetwork{}

// AzureName returns the Azure name of the resource
func (network *VirtualNetwork) AzureName() string {
	return network.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-11-01"
func (network VirtualNetwork) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (network *VirtualNetwork) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (network *VirtualNetwork) GetSpec() genruntime.ConvertibleSpec {
	return &network.Spec
}

// GetStatus returns the status of this resource
func (network *VirtualNetwork) GetStatus() genruntime.ConvertibleStatus {
	return &network.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (network *VirtualNetwork) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (network *VirtualNetwork) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &VirtualNetwork_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (network *VirtualNetwork) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(network.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  network.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (network *VirtualNetwork) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*VirtualNetwork_Status); ok {
		network.Status = *st
		return nil
	}

	// Convert status to required version
	var st VirtualNetwork_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	network.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1alpha1api20201101-virtualnetwork,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=virtualnetworks,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.virtualnetworks.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &VirtualNetwork{}

// ValidateCreate validates the creation of the resource
func (network *VirtualNetwork) ValidateCreate() error {
	validations := network.createValidations()
	var temp interface{} = network
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (network *VirtualNetwork) ValidateDelete() error {
	validations := network.deleteValidations()
	var temp interface{} = network
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (network *VirtualNetwork) ValidateUpdate(old runtime.Object) error {
	validations := network.updateValidations()
	var temp interface{} = network
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (network *VirtualNetwork) createValidations() []func() error {
	return []func() error{network.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (network *VirtualNetwork) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (network *VirtualNetwork) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return network.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (network *VirtualNetwork) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&network.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromVirtualNetwork populates our VirtualNetwork from the provided source VirtualNetwork
func (network *VirtualNetwork) AssignPropertiesFromVirtualNetwork(source *v1alpha1api20201101storage.VirtualNetwork) error {

	// ObjectMeta
	network.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec VirtualNetworks_SPEC
	err := spec.AssignPropertiesFromVirtualNetworks_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworks_SPEC() to populate field Spec")
	}
	network.Spec = spec

	// Status
	var status VirtualNetwork_Status
	err = status.AssignPropertiesFromVirtualNetwork_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetwork_Status() to populate field Status")
	}
	network.Status = status

	// No error
	return nil
}

// AssignPropertiesToVirtualNetwork populates the provided destination VirtualNetwork from our VirtualNetwork
func (network *VirtualNetwork) AssignPropertiesToVirtualNetwork(destination *v1alpha1api20201101storage.VirtualNetwork) error {

	// ObjectMeta
	destination.ObjectMeta = *network.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201101storage.VirtualNetworks_SPEC
	err := network.Spec.AssignPropertiesToVirtualNetworks_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworks_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.VirtualNetwork_Status
	err = network.Status.AssignPropertiesToVirtualNetwork_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToVirtualNetwork_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (network *VirtualNetwork) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: network.Spec.OriginalVersion(),
		Kind:    "VirtualNetwork",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /network/resource-manager/Microsoft.Network/stable/2020-11-01/virtualNetwork.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}
type VirtualNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualNetwork `json:"items"`
}

type VirtualNetwork_Status struct {
	//AddressSpace: The AddressSpace that contains an array of IP address ranges that
	//can be used by subnets.
	AddressSpace *AddressSpace_Status `json:"addressSpace,omitempty"`

	//BgpCommunities: Bgp Communities sent over ExpressRoute with each route
	//corresponding to a prefix in this VNET.
	BgpCommunities *VirtualNetworkBgpCommunities_Status `json:"bgpCommunities,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DdosProtectionPlan: The DDoS protection plan associated with the virtual network.
	DdosProtectionPlan *SubResource_Status `json:"ddosProtectionPlan,omitempty"`

	//DhcpOptions: The dhcpOptions that contains an array of DNS servers available to
	//VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions_Status `json:"dhcpOptions,omitempty"`

	//EnableDdosProtection: Indicates if DDoS protection is enabled for all the
	//protected resources in the virtual network. It requires a DDoS protection plan
	//associated with the resource.
	EnableDdosProtection *bool `json:"enableDdosProtection,omitempty"`

	//EnableVmProtection: Indicates if VM protection is enabled for all the subnets in
	//the virtual network.
	EnableVmProtection *bool `json:"enableVmProtection,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//ExtendedLocation: The extended location of the virtual network.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this VNET.
	IpAllocations []SubResource_Status `json:"ipAllocations,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the virtual network resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resourceGuid property of the Virtual Network resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Subnets: A list of subnets in a Virtual Network.
	Subnets []Subnet_Status_VirtualNetwork_SubResourceEmbedded `json:"subnets,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//VirtualNetworkPeerings: A list of peerings in a Virtual Network.
	VirtualNetworkPeerings []VirtualNetworkPeering_Status_SubResourceEmbedded `json:"virtualNetworkPeerings,omitempty"`
}

var _ genruntime.ConvertibleStatus = &VirtualNetwork_Status{}

// ConvertStatusFrom populates our VirtualNetwork_Status from the provided source
func (network *VirtualNetwork_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetwork_Status)
	if ok {
		// Populate our instance from source
		return network.AssignPropertiesFromVirtualNetwork_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetwork_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = network.AssignPropertiesFromVirtualNetwork_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our VirtualNetwork_Status
func (network *VirtualNetwork_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetwork_Status)
	if ok {
		// Populate destination from our instance
		return network.AssignPropertiesToVirtualNetwork_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetwork_Status{}
	err := network.AssignPropertiesToVirtualNetwork_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &VirtualNetwork_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (network *VirtualNetwork_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetwork_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (network *VirtualNetwork_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetwork_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetwork_StatusARM, got %T", armInput)
	}

	// Set property ‘AddressSpace’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressSpace != nil {
			var addressSpace1 AddressSpace_Status
			err := addressSpace1.PopulateFromARM(owner, *typedInput.Properties.AddressSpace)
			if err != nil {
				return err
			}
			addressSpace := addressSpace1
			network.AddressSpace = &addressSpace
		}
	}

	// Set property ‘BgpCommunities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpCommunities != nil {
			var bgpCommunities1 VirtualNetworkBgpCommunities_Status
			err := bgpCommunities1.PopulateFromARM(owner, *typedInput.Properties.BgpCommunities)
			if err != nil {
				return err
			}
			bgpCommunities := bgpCommunities1
			network.BgpCommunities = &bgpCommunities
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DdosProtectionPlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosProtectionPlan != nil {
			var ddosProtectionPlan1 SubResource_Status
			err := ddosProtectionPlan1.PopulateFromARM(owner, *typedInput.Properties.DdosProtectionPlan)
			if err != nil {
				return err
			}
			ddosProtectionPlan := ddosProtectionPlan1
			network.DdosProtectionPlan = &ddosProtectionPlan
		}
	}

	// Set property ‘DhcpOptions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DhcpOptions != nil {
			var dhcpOptions1 DhcpOptions_Status
			err := dhcpOptions1.PopulateFromARM(owner, *typedInput.Properties.DhcpOptions)
			if err != nil {
				return err
			}
			dhcpOptions := dhcpOptions1
			network.DhcpOptions = &dhcpOptions
		}
	}

	// Set property ‘EnableDdosProtection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDdosProtection != nil {
			enableDdosProtection := *typedInput.Properties.EnableDdosProtection
			network.EnableDdosProtection = &enableDdosProtection
		}
	}

	// Set property ‘EnableVmProtection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableVmProtection != nil {
			enableVmProtection := *typedInput.Properties.EnableVmProtection
			network.EnableVmProtection = &enableVmProtection
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		network.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		network.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		network.Id = &id
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			network.IpAllocations = append(network.IpAllocations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		network.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		network.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			network.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			network.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Subnets’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Subnets {
			var item1 Subnet_Status_VirtualNetwork_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			network.Subnets = append(network.Subnets, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		network.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			network.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		network.Type = &typeVar
	}

	// Set property ‘VirtualNetworkPeerings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualNetworkPeerings {
			var item1 VirtualNetworkPeering_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			network.VirtualNetworkPeerings = append(network.VirtualNetworkPeerings, item1)
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetwork_Status populates our VirtualNetwork_Status from the provided source VirtualNetwork_Status
func (network *VirtualNetwork_Status) AssignPropertiesFromVirtualNetwork_Status(source *v1alpha1api20201101storage.VirtualNetwork_Status) error {

	// AddressSpace
	if source.AddressSpace != nil {
		var addressSpace AddressSpace_Status
		err := addressSpace.AssignPropertiesFromAddressSpace_Status(source.AddressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace_Status() to populate field AddressSpace")
		}
		network.AddressSpace = &addressSpace
	} else {
		network.AddressSpace = nil
	}

	// BgpCommunities
	if source.BgpCommunities != nil {
		var bgpCommunity VirtualNetworkBgpCommunities_Status
		err := bgpCommunity.AssignPropertiesFromVirtualNetworkBgpCommunities_Status(source.BgpCommunities)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkBgpCommunities_Status() to populate field BgpCommunities")
		}
		network.BgpCommunities = &bgpCommunity
	} else {
		network.BgpCommunities = nil
	}

	// Conditions
	network.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DdosProtectionPlan
	if source.DdosProtectionPlan != nil {
		var ddosProtectionPlan SubResource_Status
		err := ddosProtectionPlan.AssignPropertiesFromSubResource_Status(source.DdosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field DdosProtectionPlan")
		}
		network.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		network.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if source.DhcpOptions != nil {
		var dhcpOption DhcpOptions_Status
		err := dhcpOption.AssignPropertiesFromDhcpOptions_Status(source.DhcpOptions)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDhcpOptions_Status() to populate field DhcpOptions")
		}
		network.DhcpOptions = &dhcpOption
	} else {
		network.DhcpOptions = nil
	}

	// EnableDdosProtection
	if source.EnableDdosProtection != nil {
		enableDdosProtection := *source.EnableDdosProtection
		network.EnableDdosProtection = &enableDdosProtection
	} else {
		network.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if source.EnableVmProtection != nil {
		enableVmProtection := *source.EnableVmProtection
		network.EnableVmProtection = &enableVmProtection
	} else {
		network.EnableVmProtection = nil
	}

	// Etag
	network.Etag = genruntime.ClonePointerToString(source.Etag)

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Status(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Status() to populate field ExtendedLocation")
		}
		network.ExtendedLocation = &extendedLocation
	} else {
		network.ExtendedLocation = nil
	}

	// Id
	network.Id = genruntime.ClonePointerToString(source.Id)

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource_Status, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource_Status
			err := ipAllocation.AssignPropertiesFromSubResource_Status(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Status() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		network.IpAllocations = ipAllocationList
	} else {
		network.IpAllocations = nil
	}

	// Location
	network.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	network.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		network.ProvisioningState = &provisioningState
	} else {
		network.ProvisioningState = nil
	}

	// ResourceGuid
	network.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Subnets
	if source.Subnets != nil {
		subnetList := make([]Subnet_Status_VirtualNetwork_SubResourceEmbedded, len(source.Subnets))
		for subnetIndex, subnetItem := range source.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet Subnet_Status_VirtualNetwork_SubResourceEmbedded
			err := subnet.AssignPropertiesFromSubnet_Status_VirtualNetwork_SubResourceEmbedded(&subnetItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubnet_Status_VirtualNetwork_SubResourceEmbedded() to populate field Subnets")
			}
			subnetList[subnetIndex] = subnet
		}
		network.Subnets = subnetList
	} else {
		network.Subnets = nil
	}

	// Tags
	network.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	network.Type = genruntime.ClonePointerToString(source.Type)

	// VirtualNetworkPeerings
	if source.VirtualNetworkPeerings != nil {
		virtualNetworkPeeringList := make([]VirtualNetworkPeering_Status_SubResourceEmbedded, len(source.VirtualNetworkPeerings))
		for virtualNetworkPeeringIndex, virtualNetworkPeeringItem := range source.VirtualNetworkPeerings {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkPeeringItem := virtualNetworkPeeringItem
			var virtualNetworkPeering VirtualNetworkPeering_Status_SubResourceEmbedded
			err := virtualNetworkPeering.AssignPropertiesFromVirtualNetworkPeering_Status_SubResourceEmbedded(&virtualNetworkPeeringItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkPeering_Status_SubResourceEmbedded() to populate field VirtualNetworkPeerings")
			}
			virtualNetworkPeeringList[virtualNetworkPeeringIndex] = virtualNetworkPeering
		}
		network.VirtualNetworkPeerings = virtualNetworkPeeringList
	} else {
		network.VirtualNetworkPeerings = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetwork_Status populates the provided destination VirtualNetwork_Status from our VirtualNetwork_Status
func (network *VirtualNetwork_Status) AssignPropertiesToVirtualNetwork_Status(destination *v1alpha1api20201101storage.VirtualNetwork_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressSpace
	if network.AddressSpace != nil {
		var addressSpace v1alpha1api20201101storage.AddressSpace_Status
		err := network.AddressSpace.AssignPropertiesToAddressSpace_Status(&addressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace_Status() to populate field AddressSpace")
		}
		destination.AddressSpace = &addressSpace
	} else {
		destination.AddressSpace = nil
	}

	// BgpCommunities
	if network.BgpCommunities != nil {
		var bgpCommunity v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status
		err := network.BgpCommunities.AssignPropertiesToVirtualNetworkBgpCommunities_Status(&bgpCommunity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkBgpCommunities_Status() to populate field BgpCommunities")
		}
		destination.BgpCommunities = &bgpCommunity
	} else {
		destination.BgpCommunities = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(network.Conditions)

	// DdosProtectionPlan
	if network.DdosProtectionPlan != nil {
		var ddosProtectionPlan v1alpha1api20201101storage.SubResource_Status
		err := network.DdosProtectionPlan.AssignPropertiesToSubResource_Status(&ddosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field DdosProtectionPlan")
		}
		destination.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		destination.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if network.DhcpOptions != nil {
		var dhcpOption v1alpha1api20201101storage.DhcpOptions_Status
		err := network.DhcpOptions.AssignPropertiesToDhcpOptions_Status(&dhcpOption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDhcpOptions_Status() to populate field DhcpOptions")
		}
		destination.DhcpOptions = &dhcpOption
	} else {
		destination.DhcpOptions = nil
	}

	// EnableDdosProtection
	if network.EnableDdosProtection != nil {
		enableDdosProtection := *network.EnableDdosProtection
		destination.EnableDdosProtection = &enableDdosProtection
	} else {
		destination.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if network.EnableVmProtection != nil {
		enableVmProtection := *network.EnableVmProtection
		destination.EnableVmProtection = &enableVmProtection
	} else {
		destination.EnableVmProtection = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(network.Etag)

	// ExtendedLocation
	if network.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := network.ExtendedLocation.AssignPropertiesToExtendedLocation_Status(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Status() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(network.Id)

	// IpAllocations
	if network.IpAllocations != nil {
		ipAllocationList := make([]v1alpha1api20201101storage.SubResource_Status, len(network.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range network.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v1alpha1api20201101storage.SubResource_Status
			err := ipAllocationItem.AssignPropertiesToSubResource_Status(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource_Status() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(network.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(network.Name)

	// ProvisioningState
	if network.ProvisioningState != nil {
		provisioningState := string(*network.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(network.ResourceGuid)

	// Subnets
	if network.Subnets != nil {
		subnetList := make([]v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded, len(network.Subnets))
		for subnetIndex, subnetItem := range network.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded
			err := subnetItem.AssignPropertiesToSubnet_Status_VirtualNetwork_SubResourceEmbedded(&subnet)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubnet_Status_VirtualNetwork_SubResourceEmbedded() to populate field Subnets")
			}
			subnetList[subnetIndex] = subnet
		}
		destination.Subnets = subnetList
	} else {
		destination.Subnets = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(network.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(network.Type)

	// VirtualNetworkPeerings
	if network.VirtualNetworkPeerings != nil {
		virtualNetworkPeeringList := make([]v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded, len(network.VirtualNetworkPeerings))
		for virtualNetworkPeeringIndex, virtualNetworkPeeringItem := range network.VirtualNetworkPeerings {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkPeeringItem := virtualNetworkPeeringItem
			var virtualNetworkPeering v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded
			err := virtualNetworkPeeringItem.AssignPropertiesToVirtualNetworkPeering_Status_SubResourceEmbedded(&virtualNetworkPeering)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkPeering_Status_SubResourceEmbedded() to populate field VirtualNetworkPeerings")
			}
			virtualNetworkPeeringList[virtualNetworkPeeringIndex] = virtualNetworkPeering
		}
		destination.VirtualNetworkPeerings = virtualNetworkPeeringList
	} else {
		destination.VirtualNetworkPeerings = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworks_SPEC struct {
	//AddressSpace: The AddressSpace that contains an array of IP address ranges that
	//can be used by subnets.
	AddressSpace *AddressSpace_Spec `json:"addressSpace,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BgpCommunities: Bgp Communities sent over ExpressRoute with each route
	//corresponding to a prefix in this VNET.
	BgpCommunities *VirtualNetworkBgpCommunities_Spec `json:"bgpCommunities,omitempty"`

	//DdosProtectionPlan: The DDoS protection plan associated with the virtual network.
	DdosProtectionPlan *SubResource_Spec `json:"ddosProtectionPlan,omitempty"`

	//DhcpOptions: The dhcpOptions that contains an array of DNS servers available to
	//VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions_Spec `json:"dhcpOptions,omitempty"`

	//EnableDdosProtection: Indicates if DDoS protection is enabled for all the
	//protected resources in the virtual network. It requires a DDoS protection plan
	//associated with the resource.
	EnableDdosProtection *bool `json:"enableDdosProtection,omitempty"`

	//EnableVmProtection: Indicates if VM protection is enabled for all the subnets in
	//the virtual network.
	EnableVmProtection *bool `json:"enableVmProtection,omitempty"`

	//ExtendedLocation: The extended location of the virtual network.
	ExtendedLocation *ExtendedLocation_Spec `json:"extendedLocation,omitempty"`

	//IpAllocations: Array of IpAllocation which reference this VNET.
	IpAllocations []SubResource_Spec `json:"ipAllocations,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	//Subnets: A list of subnets in a Virtual Network.
	Subnets []Subnet_Spec_VirtualNetwork_SubResourceEmbedded `json:"subnets,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//VirtualNetworkPeerings: A list of peerings in a Virtual Network.
	VirtualNetworkPeerings []VirtualNetworkPeering_Spec `json:"virtualNetworkPeerings,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworks_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *VirtualNetworks_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result VirtualNetworks_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘ExtendedLocation’:
	if spec.ExtendedLocation != nil {
		extendedLocationARM, err := (*spec.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocation_SpecARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if spec.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*spec.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘Location’:
	if spec.Location != nil {
		location := *spec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.AddressSpace != nil ||
		spec.BgpCommunities != nil ||
		spec.DdosProtectionPlan != nil ||
		spec.DhcpOptions != nil ||
		spec.EnableDdosProtection != nil ||
		spec.EnableVmProtection != nil ||
		spec.IpAllocations != nil ||
		spec.Subnets != nil ||
		spec.VirtualNetworkPeerings != nil {
		result.Properties = &VirtualNetworkPropertiesFormat_SpecARM{}
	}
	if spec.AddressSpace != nil {
		addressSpaceARM, err := (*spec.AddressSpace).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		addressSpace := addressSpaceARM.(AddressSpace_SpecARM)
		result.Properties.AddressSpace = &addressSpace
	}
	if spec.BgpCommunities != nil {
		bgpCommunitiesARM, err := (*spec.BgpCommunities).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		bgpCommunities := bgpCommunitiesARM.(VirtualNetworkBgpCommunities_SpecARM)
		result.Properties.BgpCommunities = &bgpCommunities
	}
	if spec.DdosProtectionPlan != nil {
		ddosProtectionPlanARM, err := (*spec.DdosProtectionPlan).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosProtectionPlan := ddosProtectionPlanARM.(SubResource_SpecARM)
		result.Properties.DdosProtectionPlan = &ddosProtectionPlan
	}
	if spec.DhcpOptions != nil {
		dhcpOptionsARM, err := (*spec.DhcpOptions).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		dhcpOptions := dhcpOptionsARM.(DhcpOptions_SpecARM)
		result.Properties.DhcpOptions = &dhcpOptions
	}
	if spec.EnableDdosProtection != nil {
		enableDdosProtection := *spec.EnableDdosProtection
		result.Properties.EnableDdosProtection = &enableDdosProtection
	}
	if spec.EnableVmProtection != nil {
		enableVmProtection := *spec.EnableVmProtection
		result.Properties.EnableVmProtection = &enableVmProtection
	}
	for _, item := range spec.IpAllocations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpAllocations = append(result.Properties.IpAllocations, itemARM.(SubResource_SpecARM))
	}
	for _, item := range spec.Subnets {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Subnets = append(result.Properties.Subnets, itemARM.(Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM))
	}
	for _, item := range spec.VirtualNetworkPeerings {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.VirtualNetworkPeerings = append(result.Properties.VirtualNetworkPeerings, itemARM.(VirtualNetworkPeering_SpecARM))
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *VirtualNetworks_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworks_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *VirtualNetworks_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworks_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworks_SPECARM, got %T", armInput)
	}

	// Set property ‘AddressSpace’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AddressSpace != nil {
			var addressSpace1 AddressSpace_Spec
			err := addressSpace1.PopulateFromARM(owner, *typedInput.Properties.AddressSpace)
			if err != nil {
				return err
			}
			addressSpace := addressSpace1
			spec.AddressSpace = &addressSpace
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BgpCommunities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BgpCommunities != nil {
			var bgpCommunities1 VirtualNetworkBgpCommunities_Spec
			err := bgpCommunities1.PopulateFromARM(owner, *typedInput.Properties.BgpCommunities)
			if err != nil {
				return err
			}
			bgpCommunities := bgpCommunities1
			spec.BgpCommunities = &bgpCommunities
		}
	}

	// Set property ‘DdosProtectionPlan’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosProtectionPlan != nil {
			var ddosProtectionPlan1 SubResource_Spec
			err := ddosProtectionPlan1.PopulateFromARM(owner, *typedInput.Properties.DdosProtectionPlan)
			if err != nil {
				return err
			}
			ddosProtectionPlan := ddosProtectionPlan1
			spec.DdosProtectionPlan = &ddosProtectionPlan
		}
	}

	// Set property ‘DhcpOptions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DhcpOptions != nil {
			var dhcpOptions1 DhcpOptions_Spec
			err := dhcpOptions1.PopulateFromARM(owner, *typedInput.Properties.DhcpOptions)
			if err != nil {
				return err
			}
			dhcpOptions := dhcpOptions1
			spec.DhcpOptions = &dhcpOptions
		}
	}

	// Set property ‘EnableDdosProtection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableDdosProtection != nil {
			enableDdosProtection := *typedInput.Properties.EnableDdosProtection
			spec.EnableDdosProtection = &enableDdosProtection
		}
	}

	// Set property ‘EnableVmProtection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableVmProtection != nil {
			enableVmProtection := *typedInput.Properties.EnableVmProtection
			spec.EnableVmProtection = &enableVmProtection
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Spec
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		spec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘IpAllocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpAllocations {
			var item1 SubResource_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			spec.IpAllocations = append(spec.IpAllocations, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		spec.Location = &location
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// no assignment for property ‘Reference’

	// Set property ‘Subnets’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Subnets {
			var item1 Subnet_Spec_VirtualNetwork_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			spec.Subnets = append(spec.Subnets, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// Set property ‘VirtualNetworkPeerings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualNetworkPeerings {
			var item1 VirtualNetworkPeering_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			spec.VirtualNetworkPeerings = append(spec.VirtualNetworkPeerings, item1)
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &VirtualNetworks_SPEC{}

// ConvertSpecFrom populates our VirtualNetworks_SPEC from the provided source
func (spec *VirtualNetworks_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.VirtualNetworks_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromVirtualNetworks_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.VirtualNetworks_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromVirtualNetworks_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our VirtualNetworks_SPEC
func (spec *VirtualNetworks_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.VirtualNetworks_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToVirtualNetworks_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.VirtualNetworks_SPEC{}
	err := spec.AssignPropertiesToVirtualNetworks_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromVirtualNetworks_SPEC populates our VirtualNetworks_SPEC from the provided source VirtualNetworks_SPEC
func (spec *VirtualNetworks_SPEC) AssignPropertiesFromVirtualNetworks_SPEC(source *v1alpha1api20201101storage.VirtualNetworks_SPEC) error {

	// AddressSpace
	if source.AddressSpace != nil {
		var addressSpace AddressSpace_Spec
		err := addressSpace.AssignPropertiesFromAddressSpace_Spec(source.AddressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAddressSpace_Spec() to populate field AddressSpace")
		}
		spec.AddressSpace = &addressSpace
	} else {
		spec.AddressSpace = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// BgpCommunities
	if source.BgpCommunities != nil {
		var bgpCommunity VirtualNetworkBgpCommunities_Spec
		err := bgpCommunity.AssignPropertiesFromVirtualNetworkBgpCommunities_Spec(source.BgpCommunities)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkBgpCommunities_Spec() to populate field BgpCommunities")
		}
		spec.BgpCommunities = &bgpCommunity
	} else {
		spec.BgpCommunities = nil
	}

	// DdosProtectionPlan
	if source.DdosProtectionPlan != nil {
		var ddosProtectionPlan SubResource_Spec
		err := ddosProtectionPlan.AssignPropertiesFromSubResource_Spec(source.DdosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Spec() to populate field DdosProtectionPlan")
		}
		spec.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		spec.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if source.DhcpOptions != nil {
		var dhcpOption DhcpOptions_Spec
		err := dhcpOption.AssignPropertiesFromDhcpOptions_Spec(source.DhcpOptions)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDhcpOptions_Spec() to populate field DhcpOptions")
		}
		spec.DhcpOptions = &dhcpOption
	} else {
		spec.DhcpOptions = nil
	}

	// EnableDdosProtection
	if source.EnableDdosProtection != nil {
		enableDdosProtection := *source.EnableDdosProtection
		spec.EnableDdosProtection = &enableDdosProtection
	} else {
		spec.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if source.EnableVmProtection != nil {
		enableVmProtection := *source.EnableVmProtection
		spec.EnableVmProtection = &enableVmProtection
	} else {
		spec.EnableVmProtection = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Spec
		err := extendedLocation.AssignPropertiesFromExtendedLocation_Spec(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		spec.ExtendedLocation = &extendedLocation
	} else {
		spec.ExtendedLocation = nil
	}

	// IpAllocations
	if source.IpAllocations != nil {
		ipAllocationList := make([]SubResource_Spec, len(source.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range source.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation SubResource_Spec
			err := ipAllocation.AssignPropertiesFromSubResource_Spec(&ipAllocationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubResource_Spec() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		spec.IpAllocations = ipAllocationList
	} else {
		spec.IpAllocations = nil
	}

	// Location
	spec.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	spec.Owner = source.Owner.Copy()

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		spec.Reference = &reference
	} else {
		spec.Reference = nil
	}

	// Subnets
	if source.Subnets != nil {
		subnetList := make([]Subnet_Spec_VirtualNetwork_SubResourceEmbedded, len(source.Subnets))
		for subnetIndex, subnetItem := range source.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet Subnet_Spec_VirtualNetwork_SubResourceEmbedded
			err := subnet.AssignPropertiesFromSubnet_Spec_VirtualNetwork_SubResourceEmbedded(&subnetItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSubnet_Spec_VirtualNetwork_SubResourceEmbedded() to populate field Subnets")
			}
			subnetList[subnetIndex] = subnet
		}
		spec.Subnets = subnetList
	} else {
		spec.Subnets = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VirtualNetworkPeerings
	if source.VirtualNetworkPeerings != nil {
		virtualNetworkPeeringList := make([]VirtualNetworkPeering_Spec, len(source.VirtualNetworkPeerings))
		for virtualNetworkPeeringIndex, virtualNetworkPeeringItem := range source.VirtualNetworkPeerings {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkPeeringItem := virtualNetworkPeeringItem
			var virtualNetworkPeering VirtualNetworkPeering_Spec
			err := virtualNetworkPeering.AssignPropertiesFromVirtualNetworkPeering_Spec(&virtualNetworkPeeringItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkPeering_Spec() to populate field VirtualNetworkPeerings")
			}
			virtualNetworkPeeringList[virtualNetworkPeeringIndex] = virtualNetworkPeering
		}
		spec.VirtualNetworkPeerings = virtualNetworkPeeringList
	} else {
		spec.VirtualNetworkPeerings = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworks_SPEC populates the provided destination VirtualNetworks_SPEC from our VirtualNetworks_SPEC
func (spec *VirtualNetworks_SPEC) AssignPropertiesToVirtualNetworks_SPEC(destination *v1alpha1api20201101storage.VirtualNetworks_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressSpace
	if spec.AddressSpace != nil {
		var addressSpace v1alpha1api20201101storage.AddressSpace_Spec
		err := spec.AddressSpace.AssignPropertiesToAddressSpace_Spec(&addressSpace)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAddressSpace_Spec() to populate field AddressSpace")
		}
		destination.AddressSpace = &addressSpace
	} else {
		destination.AddressSpace = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// BgpCommunities
	if spec.BgpCommunities != nil {
		var bgpCommunity v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Spec
		err := spec.BgpCommunities.AssignPropertiesToVirtualNetworkBgpCommunities_Spec(&bgpCommunity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkBgpCommunities_Spec() to populate field BgpCommunities")
		}
		destination.BgpCommunities = &bgpCommunity
	} else {
		destination.BgpCommunities = nil
	}

	// DdosProtectionPlan
	if spec.DdosProtectionPlan != nil {
		var ddosProtectionPlan v1alpha1api20201101storage.SubResource_Spec
		err := spec.DdosProtectionPlan.AssignPropertiesToSubResource_Spec(&ddosProtectionPlan)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSubResource_Spec() to populate field DdosProtectionPlan")
		}
		destination.DdosProtectionPlan = &ddosProtectionPlan
	} else {
		destination.DdosProtectionPlan = nil
	}

	// DhcpOptions
	if spec.DhcpOptions != nil {
		var dhcpOption v1alpha1api20201101storage.DhcpOptions_Spec
		err := spec.DhcpOptions.AssignPropertiesToDhcpOptions_Spec(&dhcpOption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDhcpOptions_Spec() to populate field DhcpOptions")
		}
		destination.DhcpOptions = &dhcpOption
	} else {
		destination.DhcpOptions = nil
	}

	// EnableDdosProtection
	if spec.EnableDdosProtection != nil {
		enableDdosProtection := *spec.EnableDdosProtection
		destination.EnableDdosProtection = &enableDdosProtection
	} else {
		destination.EnableDdosProtection = nil
	}

	// EnableVmProtection
	if spec.EnableVmProtection != nil {
		enableVmProtection := *spec.EnableVmProtection
		destination.EnableVmProtection = &enableVmProtection
	} else {
		destination.EnableVmProtection = nil
	}

	// ExtendedLocation
	if spec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Spec
		err := spec.ExtendedLocation.AssignPropertiesToExtendedLocation_Spec(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation_Spec() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// IpAllocations
	if spec.IpAllocations != nil {
		ipAllocationList := make([]v1alpha1api20201101storage.SubResource_Spec, len(spec.IpAllocations))
		for ipAllocationIndex, ipAllocationItem := range spec.IpAllocations {
			// Shadow the loop variable to avoid aliasing
			ipAllocationItem := ipAllocationItem
			var ipAllocation v1alpha1api20201101storage.SubResource_Spec
			err := ipAllocationItem.AssignPropertiesToSubResource_Spec(&ipAllocation)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubResource_Spec() to populate field IpAllocations")
			}
			ipAllocationList[ipAllocationIndex] = ipAllocation
		}
		destination.IpAllocations = ipAllocationList
	} else {
		destination.IpAllocations = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(spec.Location)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// Reference
	if spec.Reference != nil {
		reference := spec.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Subnets
	if spec.Subnets != nil {
		subnetList := make([]v1alpha1api20201101storage.Subnet_Spec_VirtualNetwork_SubResourceEmbedded, len(spec.Subnets))
		for subnetIndex, subnetItem := range spec.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet v1alpha1api20201101storage.Subnet_Spec_VirtualNetwork_SubResourceEmbedded
			err := subnetItem.AssignPropertiesToSubnet_Spec_VirtualNetwork_SubResourceEmbedded(&subnet)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSubnet_Spec_VirtualNetwork_SubResourceEmbedded() to populate field Subnets")
			}
			subnetList[subnetIndex] = subnet
		}
		destination.Subnets = subnetList
	} else {
		destination.Subnets = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// VirtualNetworkPeerings
	if spec.VirtualNetworkPeerings != nil {
		virtualNetworkPeeringList := make([]v1alpha1api20201101storage.VirtualNetworkPeering_Spec, len(spec.VirtualNetworkPeerings))
		for virtualNetworkPeeringIndex, virtualNetworkPeeringItem := range spec.VirtualNetworkPeerings {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkPeeringItem := virtualNetworkPeeringItem
			var virtualNetworkPeering v1alpha1api20201101storage.VirtualNetworkPeering_Spec
			err := virtualNetworkPeeringItem.AssignPropertiesToVirtualNetworkPeering_Spec(&virtualNetworkPeering)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkPeering_Spec() to populate field VirtualNetworkPeerings")
			}
			virtualNetworkPeeringList[virtualNetworkPeeringIndex] = virtualNetworkPeering
		}
		destination.VirtualNetworkPeerings = virtualNetworkPeeringList
	} else {
		destination.VirtualNetworkPeerings = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *VirtualNetworks_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *VirtualNetworks_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type AddressSpace_Spec struct {
	//AddressPrefixes: A list of address blocks reserved for this virtual network in
	//CIDR notation.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`
}

var _ genruntime.ARMTransformer = &AddressSpace_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (space *AddressSpace_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if space == nil {
		return nil, nil
	}
	var result AddressSpace_SpecARM

	// Set property ‘AddressPrefixes’:
	for _, item := range space.AddressPrefixes {
		result.AddressPrefixes = append(result.AddressPrefixes, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (space *AddressSpace_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AddressSpace_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (space *AddressSpace_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AddressSpace_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AddressSpace_SpecARM, got %T", armInput)
	}

	// Set property ‘AddressPrefixes’:
	for _, item := range typedInput.AddressPrefixes {
		space.AddressPrefixes = append(space.AddressPrefixes, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAddressSpace_Spec populates our AddressSpace_Spec from the provided source AddressSpace_Spec
func (space *AddressSpace_Spec) AssignPropertiesFromAddressSpace_Spec(source *v1alpha1api20201101storage.AddressSpace_Spec) error {

	// AddressPrefixes
	space.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// No error
	return nil
}

// AssignPropertiesToAddressSpace_Spec populates the provided destination AddressSpace_Spec from our AddressSpace_Spec
func (space *AddressSpace_Spec) AssignPropertiesToAddressSpace_Spec(destination *v1alpha1api20201101storage.AddressSpace_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(space.AddressPrefixes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AddressSpace_Status struct {
	//AddressPrefixes: A list of address blocks reserved for this virtual network in
	//CIDR notation.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`
}

var _ genruntime.FromARMConverter = &AddressSpace_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (space *AddressSpace_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AddressSpace_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (space *AddressSpace_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AddressSpace_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AddressSpace_StatusARM, got %T", armInput)
	}

	// Set property ‘AddressPrefixes’:
	for _, item := range typedInput.AddressPrefixes {
		space.AddressPrefixes = append(space.AddressPrefixes, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAddressSpace_Status populates our AddressSpace_Status from the provided source AddressSpace_Status
func (space *AddressSpace_Status) AssignPropertiesFromAddressSpace_Status(source *v1alpha1api20201101storage.AddressSpace_Status) error {

	// AddressPrefixes
	space.AddressPrefixes = genruntime.CloneSliceOfString(source.AddressPrefixes)

	// No error
	return nil
}

// AssignPropertiesToAddressSpace_Status populates the provided destination AddressSpace_Status from our AddressSpace_Status
func (space *AddressSpace_Status) AssignPropertiesToAddressSpace_Status(destination *v1alpha1api20201101storage.AddressSpace_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AddressPrefixes
	destination.AddressPrefixes = genruntime.CloneSliceOfString(space.AddressPrefixes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DhcpOptions_Spec struct {
	//DnsServers: The list of DNS servers IP addresses.
	DnsServers []string `json:"dnsServers,omitempty"`
}

var _ genruntime.ARMTransformer = &DhcpOptions_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (options *DhcpOptions_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if options == nil {
		return nil, nil
	}
	var result DhcpOptions_SpecARM

	// Set property ‘DnsServers’:
	for _, item := range options.DnsServers {
		result.DnsServers = append(result.DnsServers, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (options *DhcpOptions_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DhcpOptions_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (options *DhcpOptions_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DhcpOptions_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DhcpOptions_SpecARM, got %T", armInput)
	}

	// Set property ‘DnsServers’:
	for _, item := range typedInput.DnsServers {
		options.DnsServers = append(options.DnsServers, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromDhcpOptions_Spec populates our DhcpOptions_Spec from the provided source DhcpOptions_Spec
func (options *DhcpOptions_Spec) AssignPropertiesFromDhcpOptions_Spec(source *v1alpha1api20201101storage.DhcpOptions_Spec) error {

	// DnsServers
	options.DnsServers = genruntime.CloneSliceOfString(source.DnsServers)

	// No error
	return nil
}

// AssignPropertiesToDhcpOptions_Spec populates the provided destination DhcpOptions_Spec from our DhcpOptions_Spec
func (options *DhcpOptions_Spec) AssignPropertiesToDhcpOptions_Spec(destination *v1alpha1api20201101storage.DhcpOptions_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DnsServers
	destination.DnsServers = genruntime.CloneSliceOfString(options.DnsServers)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DhcpOptions_Status struct {
	//DnsServers: The list of DNS servers IP addresses.
	DnsServers []string `json:"dnsServers,omitempty"`
}

var _ genruntime.FromARMConverter = &DhcpOptions_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (options *DhcpOptions_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DhcpOptions_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (options *DhcpOptions_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DhcpOptions_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DhcpOptions_StatusARM, got %T", armInput)
	}

	// Set property ‘DnsServers’:
	for _, item := range typedInput.DnsServers {
		options.DnsServers = append(options.DnsServers, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromDhcpOptions_Status populates our DhcpOptions_Status from the provided source DhcpOptions_Status
func (options *DhcpOptions_Status) AssignPropertiesFromDhcpOptions_Status(source *v1alpha1api20201101storage.DhcpOptions_Status) error {

	// DnsServers
	options.DnsServers = genruntime.CloneSliceOfString(source.DnsServers)

	// No error
	return nil
}

// AssignPropertiesToDhcpOptions_Status populates the provided destination DhcpOptions_Status from our DhcpOptions_Status
func (options *DhcpOptions_Status) AssignPropertiesToDhcpOptions_Status(destination *v1alpha1api20201101storage.DhcpOptions_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DnsServers
	destination.DnsServers = genruntime.CloneSliceOfString(options.DnsServers)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Subnet_Spec_VirtualNetwork_SubResourceEmbedded struct {
	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &Subnet_Spec_VirtualNetwork_SubResourceEmbedded{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (embedded *Subnet_Spec_VirtualNetwork_SubResourceEmbedded) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if embedded == nil {
		return nil, nil
	}
	var result Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM

	// Set property ‘Id’:
	if embedded.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*embedded.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Subnet_Spec_VirtualNetwork_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Subnet_Spec_VirtualNetwork_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Spec_VirtualNetwork_SubResourceEmbeddedARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromSubnet_Spec_VirtualNetwork_SubResourceEmbedded populates our Subnet_Spec_VirtualNetwork_SubResourceEmbedded from the provided source Subnet_Spec_VirtualNetwork_SubResourceEmbedded
func (embedded *Subnet_Spec_VirtualNetwork_SubResourceEmbedded) AssignPropertiesFromSubnet_Spec_VirtualNetwork_SubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Spec_VirtualNetwork_SubResourceEmbedded) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		embedded.Reference = &reference
	} else {
		embedded.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubnet_Spec_VirtualNetwork_SubResourceEmbedded populates the provided destination Subnet_Spec_VirtualNetwork_SubResourceEmbedded from our Subnet_Spec_VirtualNetwork_SubResourceEmbedded
func (embedded *Subnet_Spec_VirtualNetwork_SubResourceEmbedded) AssignPropertiesToSubnet_Spec_VirtualNetwork_SubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Spec_VirtualNetwork_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if embedded.Reference != nil {
		reference := embedded.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Subnet_Status_VirtualNetwork_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_Status_VirtualNetwork_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_VirtualNetwork_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnet_Status_VirtualNetwork_SubResourceEmbedded populates our Subnet_Status_VirtualNetwork_SubResourceEmbedded from the provided source Subnet_Status_VirtualNetwork_SubResourceEmbedded
func (embedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) AssignPropertiesFromSubnet_Status_VirtualNetwork_SubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubnet_Status_VirtualNetwork_SubResourceEmbedded populates the provided destination Subnet_Status_VirtualNetwork_SubResourceEmbedded from our Subnet_Status_VirtualNetwork_SubResourceEmbedded
func (embedded *Subnet_Status_VirtualNetwork_SubResourceEmbedded) AssignPropertiesToSubnet_Status_VirtualNetwork_SubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_VirtualNetwork_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkBgpCommunities_Spec struct {
	// +kubebuilder:validation:Required
	//VirtualNetworkCommunity: The BGP community associated with the virtual network.
	VirtualNetworkCommunity string `json:"virtualNetworkCommunity"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkBgpCommunities_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (communities *VirtualNetworkBgpCommunities_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if communities == nil {
		return nil, nil
	}
	var result VirtualNetworkBgpCommunities_SpecARM

	// Set property ‘VirtualNetworkCommunity’:
	result.VirtualNetworkCommunity = communities.VirtualNetworkCommunity
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (communities *VirtualNetworkBgpCommunities_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkBgpCommunities_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (communities *VirtualNetworkBgpCommunities_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkBgpCommunities_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkBgpCommunities_SpecARM, got %T", armInput)
	}

	// Set property ‘VirtualNetworkCommunity’:
	communities.VirtualNetworkCommunity = typedInput.VirtualNetworkCommunity

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkBgpCommunities_Spec populates our VirtualNetworkBgpCommunities_Spec from the provided source VirtualNetworkBgpCommunities_Spec
func (communities *VirtualNetworkBgpCommunities_Spec) AssignPropertiesFromVirtualNetworkBgpCommunities_Spec(source *v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Spec) error {

	// VirtualNetworkCommunity
	communities.VirtualNetworkCommunity = genruntime.GetOptionalStringValue(source.VirtualNetworkCommunity)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkBgpCommunities_Spec populates the provided destination VirtualNetworkBgpCommunities_Spec from our VirtualNetworkBgpCommunities_Spec
func (communities *VirtualNetworkBgpCommunities_Spec) AssignPropertiesToVirtualNetworkBgpCommunities_Spec(destination *v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// VirtualNetworkCommunity
	virtualNetworkCommunity := communities.VirtualNetworkCommunity
	destination.VirtualNetworkCommunity = &virtualNetworkCommunity

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkBgpCommunities_Status struct {
	//RegionalCommunity: The BGP community associated with the region of the virtual
	//network.
	RegionalCommunity *string `json:"regionalCommunity,omitempty"`

	// +kubebuilder:validation:Required
	//VirtualNetworkCommunity: The BGP community associated with the virtual network.
	VirtualNetworkCommunity string `json:"virtualNetworkCommunity"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkBgpCommunities_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (communities *VirtualNetworkBgpCommunities_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkBgpCommunities_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (communities *VirtualNetworkBgpCommunities_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkBgpCommunities_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkBgpCommunities_StatusARM, got %T", armInput)
	}

	// Set property ‘RegionalCommunity’:
	if typedInput.RegionalCommunity != nil {
		regionalCommunity := *typedInput.RegionalCommunity
		communities.RegionalCommunity = &regionalCommunity
	}

	// Set property ‘VirtualNetworkCommunity’:
	communities.VirtualNetworkCommunity = typedInput.VirtualNetworkCommunity

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkBgpCommunities_Status populates our VirtualNetworkBgpCommunities_Status from the provided source VirtualNetworkBgpCommunities_Status
func (communities *VirtualNetworkBgpCommunities_Status) AssignPropertiesFromVirtualNetworkBgpCommunities_Status(source *v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status) error {

	// RegionalCommunity
	communities.RegionalCommunity = genruntime.ClonePointerToString(source.RegionalCommunity)

	// VirtualNetworkCommunity
	communities.VirtualNetworkCommunity = genruntime.GetOptionalStringValue(source.VirtualNetworkCommunity)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkBgpCommunities_Status populates the provided destination VirtualNetworkBgpCommunities_Status from our VirtualNetworkBgpCommunities_Status
func (communities *VirtualNetworkBgpCommunities_Status) AssignPropertiesToVirtualNetworkBgpCommunities_Status(destination *v1alpha1api20201101storage.VirtualNetworkBgpCommunities_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RegionalCommunity
	destination.RegionalCommunity = genruntime.ClonePointerToString(communities.RegionalCommunity)

	// VirtualNetworkCommunity
	virtualNetworkCommunity := communities.VirtualNetworkCommunity
	destination.VirtualNetworkCommunity = &virtualNetworkCommunity

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkPeering_Spec struct {
	//Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkPeering_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (peering *VirtualNetworkPeering_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if peering == nil {
		return nil, nil
	}
	var result VirtualNetworkPeering_SpecARM

	// Set property ‘Id’:
	if peering.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*peering.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (peering *VirtualNetworkPeering_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkPeering_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (peering *VirtualNetworkPeering_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(VirtualNetworkPeering_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkPeering_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkPeering_Spec populates our VirtualNetworkPeering_Spec from the provided source VirtualNetworkPeering_Spec
func (peering *VirtualNetworkPeering_Spec) AssignPropertiesFromVirtualNetworkPeering_Spec(source *v1alpha1api20201101storage.VirtualNetworkPeering_Spec) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		peering.Reference = &reference
	} else {
		peering.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkPeering_Spec populates the provided destination VirtualNetworkPeering_Spec from our VirtualNetworkPeering_Spec
func (peering *VirtualNetworkPeering_Spec) AssignPropertiesToVirtualNetworkPeering_Spec(destination *v1alpha1api20201101storage.VirtualNetworkPeering_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if peering.Reference != nil {
		reference := peering.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkPeering_Status_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkPeering_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *VirtualNetworkPeering_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkPeering_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *VirtualNetworkPeering_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkPeering_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkPeering_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkPeering_Status_SubResourceEmbedded populates our VirtualNetworkPeering_Status_SubResourceEmbedded from the provided source VirtualNetworkPeering_Status_SubResourceEmbedded
func (embedded *VirtualNetworkPeering_Status_SubResourceEmbedded) AssignPropertiesFromVirtualNetworkPeering_Status_SubResourceEmbedded(source *v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkPeering_Status_SubResourceEmbedded populates the provided destination VirtualNetworkPeering_Status_SubResourceEmbedded from our VirtualNetworkPeering_Status_SubResourceEmbedded
func (embedded *VirtualNetworkPeering_Status_SubResourceEmbedded) AssignPropertiesToVirtualNetworkPeering_Status_SubResourceEmbedded(destination *v1alpha1api20201101storage.VirtualNetworkPeering_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&VirtualNetwork{}, &VirtualNetworkList{})
}
