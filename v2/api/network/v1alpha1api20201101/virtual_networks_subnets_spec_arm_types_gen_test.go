// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_Subnets_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnets_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnets_SpecARM, VirtualNetworks_Subnets_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnets_SpecARM runs a test to see if a specific instance of VirtualNetworks_Subnets_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnets_SpecARM(subject VirtualNetworks_Subnets_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnets_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnets_SpecARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnets_SpecARMGenerator()
var virtualNetworks_Subnets_SpecARMGenerator gopter.Gen

// VirtualNetworks_Subnets_SpecARMGenerator returns a generator of VirtualNetworks_Subnets_SpecARM instances for property testing.
// We first initialize virtualNetworks_Subnets_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnets_SpecARMGenerator() gopter.Gen {
	if virtualNetworks_Subnets_SpecARMGenerator != nil {
		return virtualNetworks_Subnets_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM(generators)
	virtualNetworks_Subnets_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnets_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM(generators)
	virtualNetworks_Subnets_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnets_SpecARM{}), generators)

	return virtualNetworks_Subnets_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworks_Subnets_Spec_PropertiesARMGenerator())
}

func Test_VirtualNetworks_Subnets_Spec_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnets_Spec_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnets_Spec_PropertiesARM, VirtualNetworks_Subnets_Spec_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnets_Spec_PropertiesARM runs a test to see if a specific instance of VirtualNetworks_Subnets_Spec_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnets_Spec_PropertiesARM(subject VirtualNetworks_Subnets_Spec_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnets_Spec_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnets_Spec_PropertiesARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnets_Spec_PropertiesARMGenerator()
var virtualNetworks_Subnets_Spec_PropertiesARMGenerator gopter.Gen

// VirtualNetworks_Subnets_Spec_PropertiesARMGenerator returns a generator of VirtualNetworks_Subnets_Spec_PropertiesARM instances for property testing.
// We first initialize virtualNetworks_Subnets_Spec_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnets_Spec_PropertiesARMGenerator() gopter.Gen {
	if virtualNetworks_Subnets_Spec_PropertiesARMGenerator != nil {
		return virtualNetworks_Subnets_Spec_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM(generators)
	virtualNetworks_Subnets_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnets_Spec_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM(generators)
	virtualNetworks_Subnets_Spec_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnets_Spec_PropertiesARM{}), generators)

	return virtualNetworks_Subnets_Spec_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_Spec_PropertiesARM(gens map[string]gopter.Gen) {
	gens["Delegations"] = gen.SliceOf(VirtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResourceARMGenerator())
	gens["RouteTable"] = gen.PtrOf(SubResourceARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(SubResourceARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatARMGenerator())
}

func Test_ServiceEndpointPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormatARM, ServiceEndpointPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormatARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormatARM(subject ServiceEndpointPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormatARM instances for property testing - lazily instantiated by
// ServiceEndpointPropertiesFormatARMGenerator()
var serviceEndpointPropertiesFormatARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormatARMGenerator returns a generator of ServiceEndpointPropertiesFormatARM instances for property testing.
func ServiceEndpointPropertiesFormatARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormatARMGenerator != nil {
		return serviceEndpointPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatARM(generators)
	serviceEndpointPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormatARM{}), generators)

	return serviceEndpointPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworks_Subnets_Spec_Properties_DelegationsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnets_Spec_Properties_DelegationsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM, VirtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM runs a test to see if a specific instance of VirtualNetworks_Subnets_Spec_Properties_DelegationsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM(subject VirtualNetworks_Subnets_Spec_Properties_DelegationsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnets_Spec_Properties_DelegationsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnets_Spec_Properties_DelegationsARM instances for property testing - lazily
// instantiated by VirtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator()
var virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator gopter.Gen

// VirtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator returns a generator of VirtualNetworks_Subnets_Spec_Properties_DelegationsARM instances for property testing.
// We first initialize virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator() gopter.Gen {
	if virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator != nil {
		return virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM(generators)
	virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnets_Spec_Properties_DelegationsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM(generators)
	virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnets_Spec_Properties_DelegationsARM{}), generators)

	return virtualNetworks_Subnets_Spec_Properties_DelegationsARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnets_Spec_Properties_DelegationsARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormatARMGenerator())
}

func Test_ServiceDelegationPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormatARM, ServiceDelegationPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormatARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormatARM(subject ServiceDelegationPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormatARM instances for property testing - lazily instantiated by
// ServiceDelegationPropertiesFormatARMGenerator()
var serviceDelegationPropertiesFormatARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormatARMGenerator returns a generator of ServiceDelegationPropertiesFormatARM instances for property testing.
func ServiceDelegationPropertiesFormatARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormatARMGenerator != nil {
		return serviceDelegationPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatARM(generators)
	serviceDelegationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormatARM{}), generators)

	return serviceDelegationPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}
