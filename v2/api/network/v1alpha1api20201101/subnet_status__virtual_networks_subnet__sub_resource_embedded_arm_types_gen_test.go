// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, SubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by SubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return subnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubnetPropertiesFormatSTATUSARMGenerator())
}

func Test_SubnetPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubnetPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetPropertiesFormatSTATUSARM, SubnetPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetPropertiesFormatSTATUSARM runs a test to see if a specific instance of SubnetPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetPropertiesFormatSTATUSARM(subject SubnetPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubnetPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubnetPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// SubnetPropertiesFormatSTATUSARMGenerator()
var subnetPropertiesFormatSTATUSARMGenerator gopter.Gen

// SubnetPropertiesFormatSTATUSARMGenerator returns a generator of SubnetPropertiesFormat_STATUSARM instances for property testing.
// We first initialize subnetPropertiesFormatSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubnetPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if subnetPropertiesFormatSTATUSARMGenerator != nil {
		return subnetPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM(generators)
	subnetPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM(generators)
	subnetPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SubnetPropertiesFormat_STATUSARM{}), generators)

	return subnetPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormatSTATUSPrivateEndpointNetworkPolicies_Disabled, SubnetPropertiesFormatSTATUSPrivateEndpointNetworkPolicies_Enabled))
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.OneConstOf(SubnetPropertiesFormatSTATUSPrivateLinkServiceNetworkPolicies_Disabled, SubnetPropertiesFormatSTATUSPrivateLinkServiceNetworkPolicies_Enabled))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Purpose"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubnetPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayIpConfigurations"] = gen.SliceOf(ApplicationGatewayIPConfigurationSTATUSARMGenerator())
	gens["Delegations"] = gen.SliceOf(DelegationSTATUSARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResourceSTATUSARMGenerator())
	gens["IpConfigurationProfiles"] = gen.SliceOf(IPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(IPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["ResourceNavigationLinks"] = gen.SliceOf(ResourceNavigationLinkSTATUSARMGenerator())
	gens["RouteTable"] = gen.PtrOf(RouteTableSTATUSSubResourceEmbeddedARMGenerator())
	gens["ServiceAssociationLinks"] = gen.SliceOf(ServiceAssociationLinkSTATUSARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(ServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormatSTATUSARMGenerator())
}

func Test_ApplicationGatewayIPConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationSTATUSARM, ApplicationGatewayIPConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationSTATUSARM runs a test to see if a specific instance of ApplicationGatewayIPConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationSTATUSARM(subject ApplicationGatewayIPConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfiguration_STATUSARM instances for property testing - lazily instantiated by
// ApplicationGatewayIPConfigurationSTATUSARMGenerator()
var applicationGatewayIPConfigurationSTATUSARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationSTATUSARMGenerator returns a generator of ApplicationGatewayIPConfiguration_STATUSARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationSTATUSARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationSTATUSARMGenerator != nil {
		return applicationGatewayIPConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM(generators)
	applicationGatewayIPConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM(generators)
	applicationGatewayIPConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfiguration_STATUSARM{}), generators)

	return applicationGatewayIPConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator())
}

func Test_Delegation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Delegation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDelegationSTATUSARM, DelegationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDelegationSTATUSARM runs a test to see if a specific instance of Delegation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDelegationSTATUSARM(subject Delegation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Delegation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Delegation_STATUSARM instances for property testing - lazily instantiated by
// DelegationSTATUSARMGenerator()
var delegationSTATUSARMGenerator gopter.Gen

// DelegationSTATUSARMGenerator returns a generator of Delegation_STATUSARM instances for property testing.
// We first initialize delegationSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DelegationSTATUSARMGenerator() gopter.Gen {
	if delegationSTATUSARMGenerator != nil {
		return delegationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationSTATUSARM(generators)
	delegationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Delegation_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDelegationSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDelegationSTATUSARM(generators)
	delegationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Delegation_STATUSARM{}), generators)

	return delegationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDelegationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDelegationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDelegationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDelegationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormatSTATUSARMGenerator())
}

func Test_IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by IPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by IPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfile_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationProfileSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, NetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing
// - lazily instantiated by NetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var networkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	networkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, PrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by PrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return privateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
}

func Test_ResourceNavigationLink_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLink_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLinkSTATUSARM, ResourceNavigationLinkSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLinkSTATUSARM runs a test to see if a specific instance of ResourceNavigationLink_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLinkSTATUSARM(subject ResourceNavigationLink_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLink_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLink_STATUSARM instances for property testing - lazily instantiated by
// ResourceNavigationLinkSTATUSARMGenerator()
var resourceNavigationLinkSTATUSARMGenerator gopter.Gen

// ResourceNavigationLinkSTATUSARMGenerator returns a generator of ResourceNavigationLink_STATUSARM instances for property testing.
// We first initialize resourceNavigationLinkSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceNavigationLinkSTATUSARMGenerator() gopter.Gen {
	if resourceNavigationLinkSTATUSARMGenerator != nil {
		return resourceNavigationLinkSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkSTATUSARM(generators)
	resourceNavigationLinkSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForResourceNavigationLinkSTATUSARM(generators)
	resourceNavigationLinkSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLink_STATUSARM{}), generators)

	return resourceNavigationLinkSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLinkSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLinkSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForResourceNavigationLinkSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceNavigationLinkSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ResourceNavigationLinkFormatSTATUSARMGenerator())
}

func Test_RouteTable_STATUS_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_STATUS_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableSTATUSSubResourceEmbeddedARM, RouteTableSTATUSSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableSTATUSSubResourceEmbeddedARM runs a test to see if a specific instance of RouteTable_STATUS_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableSTATUSSubResourceEmbeddedARM(subject RouteTable_STATUS_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_STATUS_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_STATUS_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// RouteTableSTATUSSubResourceEmbeddedARMGenerator()
var routeTableSTATUSSubResourceEmbeddedARMGenerator gopter.Gen

// RouteTableSTATUSSubResourceEmbeddedARMGenerator returns a generator of RouteTable_STATUS_SubResourceEmbeddedARM instances for property testing.
func RouteTableSTATUSSubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTableSTATUSSubResourceEmbeddedARMGenerator != nil {
		return routeTableSTATUSSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableSTATUSSubResourceEmbeddedARM(generators)
	routeTableSTATUSSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_STATUS_SubResourceEmbeddedARM{}), generators)

	return routeTableSTATUSSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableSTATUSSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableSTATUSSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceAssociationLink_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLink_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLinkSTATUSARM, ServiceAssociationLinkSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLinkSTATUSARM runs a test to see if a specific instance of ServiceAssociationLink_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLinkSTATUSARM(subject ServiceAssociationLink_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLink_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLink_STATUSARM instances for property testing - lazily instantiated by
// ServiceAssociationLinkSTATUSARMGenerator()
var serviceAssociationLinkSTATUSARMGenerator gopter.Gen

// ServiceAssociationLinkSTATUSARMGenerator returns a generator of ServiceAssociationLink_STATUSARM instances for property testing.
// We first initialize serviceAssociationLinkSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceAssociationLinkSTATUSARMGenerator() gopter.Gen {
	if serviceAssociationLinkSTATUSARMGenerator != nil {
		return serviceAssociationLinkSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkSTATUSARM(generators)
	serviceAssociationLinkSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForServiceAssociationLinkSTATUSARM(generators)
	serviceAssociationLinkSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLink_STATUSARM{}), generators)

	return serviceAssociationLinkSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLinkSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLinkSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServiceAssociationLinkSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceAssociationLinkSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceAssociationLinkPropertiesFormatSTATUSARMGenerator())
}

func Test_ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, ServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing
// - lazily instantiated by ServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var serviceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// ServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func ServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if serviceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return serviceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	serviceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPolicy_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return serviceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPolicySTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceEndpointPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormatSTATUSARM, ServiceEndpointPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormatSTATUSARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormatSTATUSARM(subject ServiceEndpointPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceEndpointPropertiesFormatSTATUSARMGenerator()
var serviceEndpointPropertiesFormatSTATUSARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormatSTATUSARMGenerator returns a generator of ServiceEndpointPropertiesFormat_STATUSARM instances for property testing.
func ServiceEndpointPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormatSTATUSARMGenerator != nil {
		return serviceEndpointPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatSTATUSARM(generators)
	serviceEndpointPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_STATUSARM{}), generators)

	return serviceEndpointPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM, ApplicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM runs a test to see if a specific instance of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM(subject ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing - lazily
// instantiated by ApplicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator()
var applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator gopter.Gen

// ApplicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator returns a generator of ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM instances for property testing.
// We first initialize applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator != nil {
		return applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM(generators)
	applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM(generators)
	applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayIPConfigurationPropertiesFormat_STATUSARM{}), generators)

	return applicationGatewayIPConfigurationPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayIPConfigurationPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(SubResourceSTATUSARMGenerator())
}

func Test_IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
// property testing - lazily instantiated by
// IPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
func IPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationProfilePropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationProfilePropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

func Test_IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, IPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for
// property testing - lazily instantiated by
// IPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_STATUS_Dynamic, IPAllocationMethod_STATUS_Static))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormatSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator())
}

func Test_ResourceNavigationLinkFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceNavigationLinkFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceNavigationLinkFormatSTATUSARM, ResourceNavigationLinkFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceNavigationLinkFormatSTATUSARM runs a test to see if a specific instance of ResourceNavigationLinkFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceNavigationLinkFormatSTATUSARM(subject ResourceNavigationLinkFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceNavigationLinkFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceNavigationLinkFormat_STATUSARM instances for property testing - lazily instantiated by
// ResourceNavigationLinkFormatSTATUSARMGenerator()
var resourceNavigationLinkFormatSTATUSARMGenerator gopter.Gen

// ResourceNavigationLinkFormatSTATUSARMGenerator returns a generator of ResourceNavigationLinkFormat_STATUSARM instances for property testing.
func ResourceNavigationLinkFormatSTATUSARMGenerator() gopter.Gen {
	if resourceNavigationLinkFormatSTATUSARMGenerator != nil {
		return resourceNavigationLinkFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceNavigationLinkFormatSTATUSARM(generators)
	resourceNavigationLinkFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceNavigationLinkFormat_STATUSARM{}), generators)

	return resourceNavigationLinkFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceNavigationLinkFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceNavigationLinkFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

func Test_ServiceAssociationLinkPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceAssociationLinkPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceAssociationLinkPropertiesFormatSTATUSARM, ServiceAssociationLinkPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceAssociationLinkPropertiesFormatSTATUSARM runs a test to see if a specific instance of ServiceAssociationLinkPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceAssociationLinkPropertiesFormatSTATUSARM(subject ServiceAssociationLinkPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceAssociationLinkPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceAssociationLinkPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceAssociationLinkPropertiesFormatSTATUSARMGenerator()
var serviceAssociationLinkPropertiesFormatSTATUSARMGenerator gopter.Gen

// ServiceAssociationLinkPropertiesFormatSTATUSARMGenerator returns a generator of ServiceAssociationLinkPropertiesFormat_STATUSARM instances for property testing.
func ServiceAssociationLinkPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if serviceAssociationLinkPropertiesFormatSTATUSARMGenerator != nil {
		return serviceAssociationLinkPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormatSTATUSARM(generators)
	serviceAssociationLinkPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceAssociationLinkPropertiesFormat_STATUSARM{}), generators)

	return serviceAssociationLinkPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceAssociationLinkPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["AllowDelete"] = gen.PtrOf(gen.Bool())
	gens["Link"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedResourceType"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
}

func Test_ServiceDelegationPropertiesFormat_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormatSTATUSARM, ServiceDelegationPropertiesFormatSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormatSTATUSARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormatSTATUSARM(subject ServiceDelegationPropertiesFormat_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_STATUSARM instances for property testing - lazily instantiated by
// ServiceDelegationPropertiesFormatSTATUSARMGenerator()
var serviceDelegationPropertiesFormatSTATUSARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormatSTATUSARMGenerator returns a generator of ServiceDelegationPropertiesFormat_STATUSARM instances for property testing.
func ServiceDelegationPropertiesFormatSTATUSARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormatSTATUSARMGenerator != nil {
		return serviceDelegationPropertiesFormatSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatSTATUSARM(generators)
	serviceDelegationPropertiesFormatSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_STATUSARM{}), generators)

	return serviceDelegationPropertiesFormatSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormatSTATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM, PublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(subject PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by PublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator()
var publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(generators)
	publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_STATUS_VirtualNetworksSubnet_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressSTATUSVirtualNetworksSubnetSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuSTATUSARMGenerator())
}
