// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(subject NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()
var networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroup_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkSecurityGroupPropertiesFormat_StatusARMGenerator())
}

func Test_NetworkSecurityGroupPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_StatusARM, NetworkSecurityGroupPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_StatusARM runs a test to see if a specific instance of NetworkSecurityGroupPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupPropertiesFormat_StatusARM(subject NetworkSecurityGroupPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//NetworkSecurityGroupPropertiesFormat_StatusARMGenerator()
var networkSecurityGroupPropertiesFormat_statusARMGenerator gopter.Gen

// NetworkSecurityGroupPropertiesFormat_StatusARMGenerator returns a generator of NetworkSecurityGroupPropertiesFormat_StatusARM instances for property testing.
// We first initialize networkSecurityGroupPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if networkSecurityGroupPropertiesFormat_statusARMGenerator != nil {
		return networkSecurityGroupPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM(generators)
	networkSecurityGroupPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM(generators)
	networkSecurityGroupPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupPropertiesFormat_StatusARM{}), generators)

	return networkSecurityGroupPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["DefaultSecurityRules"] = gen.SliceOf(SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator())
	gens["FlowLogs"] = gen.SliceOf(FlowLog_Status_SubResourceEmbeddedARMGenerator())
	gens["NetworkInterfaces"] = gen.SliceOf(NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator())
	gens["SecurityRules"] = gen.SliceOf(SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator())
	gens["Subnets"] = gen.SliceOf(Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator())
}

func Test_FlowLog_Status_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLog_Status_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLog_Status_SubResourceEmbeddedARM, FlowLog_Status_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLog_Status_SubResourceEmbeddedARM runs a test to see if a specific instance of FlowLog_Status_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLog_Status_SubResourceEmbeddedARM(subject FlowLog_Status_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLog_Status_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLog_Status_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
//FlowLog_Status_SubResourceEmbeddedARMGenerator()
var flowLog_status_subResourceEmbeddedARMGenerator gopter.Gen

// FlowLog_Status_SubResourceEmbeddedARMGenerator returns a generator of FlowLog_Status_SubResourceEmbeddedARM instances for property testing.
func FlowLog_Status_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if flowLog_status_subResourceEmbeddedARMGenerator != nil {
		return flowLog_status_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLog_Status_SubResourceEmbeddedARM(generators)
	flowLog_status_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(FlowLog_Status_SubResourceEmbeddedARM{}), generators)

	return flowLog_status_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForFlowLog_Status_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLog_Status_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(subject NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing -
//lazily instantiated by NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()
var networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator returns a generator of NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator != nil {
		return networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	return networkInterface_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
}

func Test_SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM runs a test to see if a specific instance of SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(subject SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()
var securityRule_status_networkSecurityGroup_subResourceEmbeddedARMGenerator gopter.Gen

// SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator returns a generator of SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing.
func SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if securityRule_status_networkSecurityGroup_subResourceEmbeddedARMGenerator != nil {
		return securityRule_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	securityRule_status_networkSecurityGroup_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	return securityRule_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(subject Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator()
var subnet_status_networkSecurityGroup_subResourceEmbeddedARMGenerator gopter.Gen

// Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM instances for property testing.
func Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_status_networkSecurityGroup_subResourceEmbeddedARMGenerator != nil {
		return subnet_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(generators)
	subnet_status_networkSecurityGroup_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}), generators)

	return subnet_status_networkSecurityGroup_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
