// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworks_Subnet_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_ARM, VirtualNetworks_Subnet_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_ARM runs a test to see if a specific instance of VirtualNetworks_Subnet_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_Spec_ARM(subject VirtualNetworks_Subnet_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnet_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnet_Spec_ARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnet_Spec_ARMGenerator()
var virtualNetworks_Subnet_Spec_ARMGenerator gopter.Gen

// VirtualNetworks_Subnet_Spec_ARMGenerator returns a generator of VirtualNetworks_Subnet_Spec_ARM instances for property testing.
// We first initialize virtualNetworks_Subnet_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_Spec_ARMGenerator != nil {
		return virtualNetworks_Subnet_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM(generators)
	virtualNetworks_Subnet_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM(generators)
	virtualNetworks_Subnet_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Spec_ARM{}), generators)

	return virtualNetworks_Subnet_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworks_Subnet_Properties_Spec_ARMGenerator())
}

func Test_VirtualNetworks_Subnet_Properties_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_Properties_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_Properties_Spec_ARM, VirtualNetworks_Subnet_Properties_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_Properties_Spec_ARM runs a test to see if a specific instance of VirtualNetworks_Subnet_Properties_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_Properties_Spec_ARM(subject VirtualNetworks_Subnet_Properties_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnet_Properties_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnet_Properties_Spec_ARM instances for property testing - lazily instantiated by
// VirtualNetworks_Subnet_Properties_Spec_ARMGenerator()
var virtualNetworks_Subnet_Properties_Spec_ARMGenerator gopter.Gen

// VirtualNetworks_Subnet_Properties_Spec_ARMGenerator returns a generator of VirtualNetworks_Subnet_Properties_Spec_ARM instances for property testing.
// We first initialize virtualNetworks_Subnet_Properties_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_Properties_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_Properties_Spec_ARMGenerator != nil {
		return virtualNetworks_Subnet_Properties_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM(generators)
	virtualNetworks_Subnet_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Properties_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM(generators)
	virtualNetworks_Subnet_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Properties_Spec_ARM{}), generators)

	return virtualNetworks_Subnet_Properties_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PrivateEndpointNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceNetworkPolicies"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Delegations"] = gen.SliceOf(VirtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator())
	gens["IpAllocations"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["NatGateway"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["RouteTable"] = gen.PtrOf(SubResource_ARMGenerator())
	gens["ServiceEndpointPolicies"] = gen.SliceOf(SubResource_ARMGenerator())
	gens["ServiceEndpoints"] = gen.SliceOf(ServiceEndpointPropertiesFormat_ARMGenerator())
}

func Test_ServiceEndpointPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceEndpointPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceEndpointPropertiesFormat_ARM, ServiceEndpointPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceEndpointPropertiesFormat_ARM runs a test to see if a specific instance of ServiceEndpointPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceEndpointPropertiesFormat_ARM(subject ServiceEndpointPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceEndpointPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceEndpointPropertiesFormat_ARM instances for property testing - lazily instantiated by
// ServiceEndpointPropertiesFormat_ARMGenerator()
var serviceEndpointPropertiesFormat_ARMGenerator gopter.Gen

// ServiceEndpointPropertiesFormat_ARMGenerator returns a generator of ServiceEndpointPropertiesFormat_ARM instances for property testing.
func ServiceEndpointPropertiesFormat_ARMGenerator() gopter.Gen {
	if serviceEndpointPropertiesFormat_ARMGenerator != nil {
		return serviceEndpointPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_ARM(generators)
	serviceEndpointPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ServiceEndpointPropertiesFormat_ARM{}), generators)

	return serviceEndpointPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceEndpointPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Service"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM, VirtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM runs a test to see if a specific instance of VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM(subject VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM instances for property testing - lazily
// instantiated by VirtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator()
var virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator gopter.Gen

// VirtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator returns a generator of VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM instances for property testing.
// We first initialize virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator() gopter.Gen {
	if virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator != nil {
		return virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM(generators)
	virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM(generators)
	virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworks_Subnet_Properties_Delegations_Spec_ARM{}), generators)

	return virtualNetworks_Subnet_Properties_Delegations_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworks_Subnet_Properties_Delegations_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceDelegationPropertiesFormat_ARMGenerator())
}

func Test_ServiceDelegationPropertiesFormat_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceDelegationPropertiesFormat_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceDelegationPropertiesFormat_ARM, ServiceDelegationPropertiesFormat_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceDelegationPropertiesFormat_ARM runs a test to see if a specific instance of ServiceDelegationPropertiesFormat_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceDelegationPropertiesFormat_ARM(subject ServiceDelegationPropertiesFormat_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceDelegationPropertiesFormat_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceDelegationPropertiesFormat_ARM instances for property testing - lazily instantiated by
// ServiceDelegationPropertiesFormat_ARMGenerator()
var serviceDelegationPropertiesFormat_ARMGenerator gopter.Gen

// ServiceDelegationPropertiesFormat_ARMGenerator returns a generator of ServiceDelegationPropertiesFormat_ARM instances for property testing.
func ServiceDelegationPropertiesFormat_ARMGenerator() gopter.Gen {
	if serviceDelegationPropertiesFormat_ARMGenerator != nil {
		return serviceDelegationPropertiesFormat_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_ARM(generators)
	serviceDelegationPropertiesFormat_ARMGenerator = gen.Struct(reflect.TypeOf(ServiceDelegationPropertiesFormat_ARM{}), generators)

	return serviceDelegationPropertiesFormat_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceDelegationPropertiesFormat_ARM(gens map[string]gopter.Gen) {
	gens["ServiceName"] = gen.PtrOf(gen.AlphaString())
}
