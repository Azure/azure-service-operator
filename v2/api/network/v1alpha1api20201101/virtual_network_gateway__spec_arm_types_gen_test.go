// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualNetworkGateway_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGateway_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGateway_SpecARM, VirtualNetworkGateway_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGateway_SpecARM runs a test to see if a specific instance of VirtualNetworkGateway_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGateway_SpecARM(subject VirtualNetworkGateway_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGateway_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGateway_SpecARM instances for property testing - lazily instantiated by
// VirtualNetworkGateway_SpecARMGenerator()
var virtualNetworkGateway_SpecARMGenerator gopter.Gen

// VirtualNetworkGateway_SpecARMGenerator returns a generator of VirtualNetworkGateway_SpecARM instances for property testing.
// We first initialize virtualNetworkGateway_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGateway_SpecARMGenerator() gopter.Gen {
	if virtualNetworkGateway_SpecARMGenerator != nil {
		return virtualNetworkGateway_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM(generators)
	virtualNetworkGateway_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGateway_SpecARM(generators)
	virtualNetworkGateway_SpecARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGateway_SpecARM{}), generators)

	return virtualNetworkGateway_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGateway_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGateway_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGateway_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayPropertiesFormatARMGenerator())
}

func Test_VirtualNetworkGatewayPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatARM, VirtualNetworkGatewayPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatARM runs a test to see if a specific instance of VirtualNetworkGatewayPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayPropertiesFormatARM(subject VirtualNetworkGatewayPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayPropertiesFormatARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayPropertiesFormatARMGenerator()
var virtualNetworkGatewayPropertiesFormatARMGenerator gopter.Gen

// VirtualNetworkGatewayPropertiesFormatARMGenerator returns a generator of VirtualNetworkGatewayPropertiesFormatARM instances for property testing.
// We first initialize virtualNetworkGatewayPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayPropertiesFormatARMGenerator() gopter.Gen {
	if virtualNetworkGatewayPropertiesFormatARMGenerator != nil {
		return virtualNetworkGatewayPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM(generators)
	virtualNetworkGatewayPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM(generators)
	virtualNetworkGatewayPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayPropertiesFormatARM{}), generators)

	return virtualNetworkGatewayPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ActiveActive"] = gen.PtrOf(gen.Bool())
	gens["EnableBgp"] = gen.PtrOf(gen.Bool())
	gens["EnableDnsForwarding"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateIpAddress"] = gen.PtrOf(gen.Bool())
	gens["GatewayType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_GatewayTypeExpressRoute, VirtualNetworkGatewayPropertiesFormat_GatewayTypeLocalGateway, VirtualNetworkGatewayPropertiesFormat_GatewayTypeVpn))
	gens["InboundDnsForwardingEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["VNetExtendedLocationResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VpnGatewayGeneration"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnGatewayGenerationGeneration1, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGenerationGeneration2, VirtualNetworkGatewayPropertiesFormat_VpnGatewayGenerationNone))
	gens["VpnType"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkGatewayPropertiesFormat_VpnTypePolicyBased, VirtualNetworkGatewayPropertiesFormat_VpnTypeRouteBased))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["BgpSettings"] = gen.PtrOf(BgpSettingsARMGenerator())
	gens["CustomRoutes"] = gen.PtrOf(AddressSpaceARMGenerator())
	gens["GatewayDefaultSite"] = gen.PtrOf(SubResourceARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualNetworkGatewayIPConfigurationARMGenerator())
	gens["Sku"] = gen.PtrOf(VirtualNetworkGatewaySkuARMGenerator())
	gens["VpnClientConfiguration"] = gen.PtrOf(VpnClientConfigurationARMGenerator())
}

func Test_AddressSpaceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AddressSpaceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAddressSpaceARM, AddressSpaceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAddressSpaceARM runs a test to see if a specific instance of AddressSpaceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAddressSpaceARM(subject AddressSpaceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AddressSpaceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AddressSpaceARM instances for property testing - lazily instantiated by AddressSpaceARMGenerator()
var addressSpaceARMGenerator gopter.Gen

// AddressSpaceARMGenerator returns a generator of AddressSpaceARM instances for property testing.
func AddressSpaceARMGenerator() gopter.Gen {
	if addressSpaceARMGenerator != nil {
		return addressSpaceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAddressSpaceARM(generators)
	addressSpaceARMGenerator = gen.Struct(reflect.TypeOf(AddressSpaceARM{}), generators)

	return addressSpaceARMGenerator
}

// AddIndependentPropertyGeneratorsForAddressSpaceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAddressSpaceARM(gens map[string]gopter.Gen) {
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
}

func Test_BgpSettingsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BgpSettingsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBgpSettingsARM, BgpSettingsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBgpSettingsARM runs a test to see if a specific instance of BgpSettingsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBgpSettingsARM(subject BgpSettingsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BgpSettingsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BgpSettingsARM instances for property testing - lazily instantiated by BgpSettingsARMGenerator()
var bgpSettingsARMGenerator gopter.Gen

// BgpSettingsARMGenerator returns a generator of BgpSettingsARM instances for property testing.
// We first initialize bgpSettingsARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BgpSettingsARMGenerator() gopter.Gen {
	if bgpSettingsARMGenerator != nil {
		return bgpSettingsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsARM(generators)
	bgpSettingsARMGenerator = gen.Struct(reflect.TypeOf(BgpSettingsARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBgpSettingsARM(generators)
	AddRelatedPropertyGeneratorsForBgpSettingsARM(generators)
	bgpSettingsARMGenerator = gen.Struct(reflect.TypeOf(BgpSettingsARM{}), generators)

	return bgpSettingsARMGenerator
}

// AddIndependentPropertyGeneratorsForBgpSettingsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBgpSettingsARM(gens map[string]gopter.Gen) {
	gens["Asn"] = gen.PtrOf(gen.UInt32())
	gens["BgpPeeringAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PeerWeight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForBgpSettingsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBgpSettingsARM(gens map[string]gopter.Gen) {
	gens["BgpPeeringAddresses"] = gen.SliceOf(IPConfigurationBgpPeeringAddressARMGenerator())
}

func Test_VirtualNetworkGatewayIPConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationARM, VirtualNetworkGatewayIPConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationARM(subject VirtualNetworkGatewayIPConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewayIPConfigurationARMGenerator()
var virtualNetworkGatewayIPConfigurationARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM(generators)
	virtualNetworkGatewayIPConfigurationARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM(generators)
	virtualNetworkGatewayIPConfigurationARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationARM{}), generators)

	return virtualNetworkGatewayIPConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator())
}

func Test_VirtualNetworkGatewaySkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewaySkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewaySkuARM, VirtualNetworkGatewaySkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewaySkuARM runs a test to see if a specific instance of VirtualNetworkGatewaySkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewaySkuARM(subject VirtualNetworkGatewaySkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewaySkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewaySkuARM instances for property testing - lazily instantiated by
// VirtualNetworkGatewaySkuARMGenerator()
var virtualNetworkGatewaySkuARMGenerator gopter.Gen

// VirtualNetworkGatewaySkuARMGenerator returns a generator of VirtualNetworkGatewaySkuARM instances for property testing.
func VirtualNetworkGatewaySkuARMGenerator() gopter.Gen {
	if virtualNetworkGatewaySkuARMGenerator != nil {
		return virtualNetworkGatewaySkuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuARM(generators)
	virtualNetworkGatewaySkuARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewaySkuARM{}), generators)

	return virtualNetworkGatewaySkuARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewaySkuARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_NameBasic,
		VirtualNetworkGatewaySku_NameErGw1AZ,
		VirtualNetworkGatewaySku_NameErGw2AZ,
		VirtualNetworkGatewaySku_NameErGw3AZ,
		VirtualNetworkGatewaySku_NameHighPerformance,
		VirtualNetworkGatewaySku_NameStandard,
		VirtualNetworkGatewaySku_NameUltraPerformance,
		VirtualNetworkGatewaySku_NameVpnGw1,
		VirtualNetworkGatewaySku_NameVpnGw1AZ,
		VirtualNetworkGatewaySku_NameVpnGw2,
		VirtualNetworkGatewaySku_NameVpnGw2AZ,
		VirtualNetworkGatewaySku_NameVpnGw3,
		VirtualNetworkGatewaySku_NameVpnGw3AZ,
		VirtualNetworkGatewaySku_NameVpnGw4,
		VirtualNetworkGatewaySku_NameVpnGw4AZ,
		VirtualNetworkGatewaySku_NameVpnGw5,
		VirtualNetworkGatewaySku_NameVpnGw5AZ))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkGatewaySku_TierBasic,
		VirtualNetworkGatewaySku_TierErGw1AZ,
		VirtualNetworkGatewaySku_TierErGw2AZ,
		VirtualNetworkGatewaySku_TierErGw3AZ,
		VirtualNetworkGatewaySku_TierHighPerformance,
		VirtualNetworkGatewaySku_TierStandard,
		VirtualNetworkGatewaySku_TierUltraPerformance,
		VirtualNetworkGatewaySku_TierVpnGw1,
		VirtualNetworkGatewaySku_TierVpnGw1AZ,
		VirtualNetworkGatewaySku_TierVpnGw2,
		VirtualNetworkGatewaySku_TierVpnGw2AZ,
		VirtualNetworkGatewaySku_TierVpnGw3,
		VirtualNetworkGatewaySku_TierVpnGw3AZ,
		VirtualNetworkGatewaySku_TierVpnGw4,
		VirtualNetworkGatewaySku_TierVpnGw4AZ,
		VirtualNetworkGatewaySku_TierVpnGw5,
		VirtualNetworkGatewaySku_TierVpnGw5AZ))
}

func Test_VpnClientConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientConfigurationARM, VpnClientConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientConfigurationARM runs a test to see if a specific instance of VpnClientConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientConfigurationARM(subject VpnClientConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientConfigurationARM instances for property testing - lazily instantiated by
// VpnClientConfigurationARMGenerator()
var vpnClientConfigurationARMGenerator gopter.Gen

// VpnClientConfigurationARMGenerator returns a generator of VpnClientConfigurationARM instances for property testing.
// We first initialize vpnClientConfigurationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientConfigurationARMGenerator() gopter.Gen {
	if vpnClientConfigurationARMGenerator != nil {
		return vpnClientConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationARM(generators)
	vpnClientConfigurationARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfigurationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientConfigurationARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientConfigurationARM(generators)
	vpnClientConfigurationARMGenerator = gen.Struct(reflect.TypeOf(VpnClientConfigurationARM{}), generators)

	return vpnClientConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientConfigurationARM(gens map[string]gopter.Gen) {
	gens["AadAudience"] = gen.PtrOf(gen.AlphaString())
	gens["AadIssuer"] = gen.PtrOf(gen.AlphaString())
	gens["AadTenant"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
	gens["VpnAuthenticationTypes"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnAuthenticationTypesAAD, VpnClientConfiguration_VpnAuthenticationTypesCertificate, VpnClientConfiguration_VpnAuthenticationTypesRadius))
	gens["VpnClientProtocols"] = gen.SliceOf(gen.OneConstOf(VpnClientConfiguration_VpnClientProtocolsIkeV2, VpnClientConfiguration_VpnClientProtocolsOpenVPN, VpnClientConfiguration_VpnClientProtocolsSSTP))
}

// AddRelatedPropertyGeneratorsForVpnClientConfigurationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientConfigurationARM(gens map[string]gopter.Gen) {
	gens["RadiusServers"] = gen.SliceOf(RadiusServerARMGenerator())
	gens["VpnClientAddressPool"] = gen.PtrOf(AddressSpaceARMGenerator())
	gens["VpnClientIpsecPolicies"] = gen.SliceOf(IpsecPolicyARMGenerator())
	gens["VpnClientRevokedCertificates"] = gen.SliceOf(VpnClientRevokedCertificateARMGenerator())
	gens["VpnClientRootCertificates"] = gen.SliceOf(VpnClientRootCertificateARMGenerator())
}

func Test_IPConfigurationBgpPeeringAddressARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationBgpPeeringAddressARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationBgpPeeringAddressARM, IPConfigurationBgpPeeringAddressARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationBgpPeeringAddressARM runs a test to see if a specific instance of IPConfigurationBgpPeeringAddressARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationBgpPeeringAddressARM(subject IPConfigurationBgpPeeringAddressARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationBgpPeeringAddressARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationBgpPeeringAddressARM instances for property testing - lazily instantiated by
// IPConfigurationBgpPeeringAddressARMGenerator()
var ipConfigurationBgpPeeringAddressARMGenerator gopter.Gen

// IPConfigurationBgpPeeringAddressARMGenerator returns a generator of IPConfigurationBgpPeeringAddressARM instances for property testing.
func IPConfigurationBgpPeeringAddressARMGenerator() gopter.Gen {
	if ipConfigurationBgpPeeringAddressARMGenerator != nil {
		return ipConfigurationBgpPeeringAddressARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressARM(generators)
	ipConfigurationBgpPeeringAddressARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationBgpPeeringAddressARM{}), generators)

	return ipConfigurationBgpPeeringAddressARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationBgpPeeringAddressARM(gens map[string]gopter.Gen) {
	gens["CustomBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultBgpIpAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["IpconfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["TunnelIpAddresses"] = gen.SliceOf(gen.AlphaString())
}

func Test_IpsecPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpsecPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpsecPolicyARM, IpsecPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpsecPolicyARM runs a test to see if a specific instance of IpsecPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpsecPolicyARM(subject IpsecPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpsecPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpsecPolicyARM instances for property testing - lazily instantiated by IpsecPolicyARMGenerator()
var ipsecPolicyARMGenerator gopter.Gen

// IpsecPolicyARMGenerator returns a generator of IpsecPolicyARM instances for property testing.
func IpsecPolicyARMGenerator() gopter.Gen {
	if ipsecPolicyARMGenerator != nil {
		return ipsecPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpsecPolicyARM(generators)
	ipsecPolicyARMGenerator = gen.Struct(reflect.TypeOf(IpsecPolicyARM{}), generators)

	return ipsecPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForIpsecPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpsecPolicyARM(gens map[string]gopter.Gen) {
	gens["DhGroup"] = gen.PtrOf(gen.OneConstOf(
		DhGroupDHGroup1,
		DhGroupDHGroup14,
		DhGroupDHGroup2,
		DhGroupDHGroup2048,
		DhGroupDHGroup24,
		DhGroupECP256,
		DhGroupECP384,
		DhGroupNone))
	gens["IkeEncryption"] = gen.PtrOf(gen.OneConstOf(
		IkeEncryptionAES128,
		IkeEncryptionAES192,
		IkeEncryptionAES256,
		IkeEncryptionDES,
		IkeEncryptionDES3,
		IkeEncryptionGCMAES128,
		IkeEncryptionGCMAES256))
	gens["IkeIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IkeIntegrityGCMAES128,
		IkeIntegrityGCMAES256,
		IkeIntegrityMD5,
		IkeIntegritySHA1,
		IkeIntegritySHA256,
		IkeIntegritySHA384))
	gens["IpsecEncryption"] = gen.PtrOf(gen.OneConstOf(
		IpsecEncryptionAES128,
		IpsecEncryptionAES192,
		IpsecEncryptionAES256,
		IpsecEncryptionDES,
		IpsecEncryptionDES3,
		IpsecEncryptionGCMAES128,
		IpsecEncryptionGCMAES192,
		IpsecEncryptionGCMAES256,
		IpsecEncryptionNone))
	gens["IpsecIntegrity"] = gen.PtrOf(gen.OneConstOf(
		IpsecIntegrityGCMAES128,
		IpsecIntegrityGCMAES192,
		IpsecIntegrityGCMAES256,
		IpsecIntegrityMD5,
		IpsecIntegritySHA1,
		IpsecIntegritySHA256))
	gens["PfsGroup"] = gen.PtrOf(gen.OneConstOf(
		PfsGroupECP256,
		PfsGroupECP384,
		PfsGroupNone,
		PfsGroupPFS1,
		PfsGroupPFS14,
		PfsGroupPFS2,
		PfsGroupPFS2048,
		PfsGroupPFS24,
		PfsGroupPFSMM))
	gens["SaDataSizeKilobytes"] = gen.PtrOf(gen.Int())
	gens["SaLifeTimeSeconds"] = gen.PtrOf(gen.Int())
}

func Test_RadiusServerARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RadiusServerARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRadiusServerARM, RadiusServerARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRadiusServerARM runs a test to see if a specific instance of RadiusServerARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRadiusServerARM(subject RadiusServerARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RadiusServerARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RadiusServerARM instances for property testing - lazily instantiated by RadiusServerARMGenerator()
var radiusServerARMGenerator gopter.Gen

// RadiusServerARMGenerator returns a generator of RadiusServerARM instances for property testing.
func RadiusServerARMGenerator() gopter.Gen {
	if radiusServerARMGenerator != nil {
		return radiusServerARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRadiusServerARM(generators)
	radiusServerARMGenerator = gen.Struct(reflect.TypeOf(RadiusServerARM{}), generators)

	return radiusServerARMGenerator
}

// AddIndependentPropertyGeneratorsForRadiusServerARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRadiusServerARM(gens map[string]gopter.Gen) {
	gens["RadiusServerAddress"] = gen.PtrOf(gen.AlphaString())
	gens["RadiusServerScore"] = gen.PtrOf(gen.Int())
	gens["RadiusServerSecret"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkGatewayIPConfigurationPropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM, VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM runs a test to see if a specific instance of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(subject VirtualNetworkGatewayIPConfigurationPropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkGatewayIPConfigurationPropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM instances for property testing - lazily
// instantiated by VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator()
var virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator gopter.Gen

// VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator returns a generator of VirtualNetworkGatewayIPConfigurationPropertiesFormatARM instances for property testing.
// We first initialize virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator() gopter.Gen {
	if virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator != nil {
		return virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(generators)
	virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkGatewayIPConfigurationPropertiesFormatARM{}), generators)

	return virtualNetworkGatewayIPConfigurationPropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethodDynamic, IPAllocationMethodStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
}

// AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualNetworkGatewayIPConfigurationPropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["PublicIPAddress"] = gen.PtrOf(SubResourceARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubResourceARMGenerator())
}

func Test_VpnClientRevokedCertificateARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificateARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificateARM, VpnClientRevokedCertificateARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificateARM runs a test to see if a specific instance of VpnClientRevokedCertificateARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificateARM(subject VpnClientRevokedCertificateARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificateARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificateARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificateARMGenerator()
var vpnClientRevokedCertificateARMGenerator gopter.Gen

// VpnClientRevokedCertificateARMGenerator returns a generator of VpnClientRevokedCertificateARM instances for property testing.
// We first initialize vpnClientRevokedCertificateARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRevokedCertificateARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificateARMGenerator != nil {
		return vpnClientRevokedCertificateARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateARM(generators)
	vpnClientRevokedCertificateARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificateARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateARM(generators)
	vpnClientRevokedCertificateARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificateARM{}), generators)

	return vpnClientRevokedCertificateARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificateARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRevokedCertificateARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRevokedCertificatePropertiesFormatARMGenerator())
}

func Test_VpnClientRootCertificateARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificateARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificateARM, VpnClientRootCertificateARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificateARM runs a test to see if a specific instance of VpnClientRootCertificateARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificateARM(subject VpnClientRootCertificateARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificateARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificateARM instances for property testing - lazily instantiated by
// VpnClientRootCertificateARMGenerator()
var vpnClientRootCertificateARMGenerator gopter.Gen

// VpnClientRootCertificateARMGenerator returns a generator of VpnClientRootCertificateARM instances for property testing.
// We first initialize vpnClientRootCertificateARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VpnClientRootCertificateARMGenerator() gopter.Gen {
	if vpnClientRootCertificateARMGenerator != nil {
		return vpnClientRootCertificateARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateARM(generators)
	vpnClientRootCertificateARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificateARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificateARM(generators)
	AddRelatedPropertyGeneratorsForVpnClientRootCertificateARM(generators)
	vpnClientRootCertificateARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificateARM{}), generators)

	return vpnClientRootCertificateARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificateARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificateARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVpnClientRootCertificateARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVpnClientRootCertificateARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VpnClientRootCertificatePropertiesFormatARMGenerator())
}

func Test_VpnClientRevokedCertificatePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRevokedCertificatePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatARM, VpnClientRevokedCertificatePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatARM runs a test to see if a specific instance of VpnClientRevokedCertificatePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRevokedCertificatePropertiesFormatARM(subject VpnClientRevokedCertificatePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRevokedCertificatePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRevokedCertificatePropertiesFormatARM instances for property testing - lazily instantiated by
// VpnClientRevokedCertificatePropertiesFormatARMGenerator()
var vpnClientRevokedCertificatePropertiesFormatARMGenerator gopter.Gen

// VpnClientRevokedCertificatePropertiesFormatARMGenerator returns a generator of VpnClientRevokedCertificatePropertiesFormatARM instances for property testing.
func VpnClientRevokedCertificatePropertiesFormatARMGenerator() gopter.Gen {
	if vpnClientRevokedCertificatePropertiesFormatARMGenerator != nil {
		return vpnClientRevokedCertificatePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatARM(generators)
	vpnClientRevokedCertificatePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRevokedCertificatePropertiesFormatARM{}), generators)

	return vpnClientRevokedCertificatePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRevokedCertificatePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_VpnClientRootCertificatePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VpnClientRootCertificatePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatARM, VpnClientRootCertificatePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatARM runs a test to see if a specific instance of VpnClientRootCertificatePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVpnClientRootCertificatePropertiesFormatARM(subject VpnClientRootCertificatePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VpnClientRootCertificatePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VpnClientRootCertificatePropertiesFormatARM instances for property testing - lazily instantiated by
// VpnClientRootCertificatePropertiesFormatARMGenerator()
var vpnClientRootCertificatePropertiesFormatARMGenerator gopter.Gen

// VpnClientRootCertificatePropertiesFormatARMGenerator returns a generator of VpnClientRootCertificatePropertiesFormatARM instances for property testing.
func VpnClientRootCertificatePropertiesFormatARMGenerator() gopter.Gen {
	if vpnClientRootCertificatePropertiesFormatARMGenerator != nil {
		return vpnClientRootCertificatePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatARM(generators)
	vpnClientRootCertificatePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(VpnClientRootCertificatePropertiesFormatARM{}), generators)

	return vpnClientRootCertificatePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVpnClientRootCertificatePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating))
	gens["PublicCertData"] = gen.PtrOf(gen.AlphaString())
}
