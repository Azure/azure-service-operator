// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkSecurityGroupsSecurityRules_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupsSecurityRules_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupsSecurityRulesSPECARM, NetworkSecurityGroupsSecurityRulesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupsSecurityRulesSPECARM runs a test to see if a specific instance of NetworkSecurityGroupsSecurityRules_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupsSecurityRulesSPECARM(subject NetworkSecurityGroupsSecurityRules_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupsSecurityRules_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupsSecurityRules_SPECARM instances for property testing - lazily instantiated by
//NetworkSecurityGroupsSecurityRulesSPECARMGenerator()
var networkSecurityGroupsSecurityRulesSPECARMGenerator gopter.Gen

// NetworkSecurityGroupsSecurityRulesSPECARMGenerator returns a generator of NetworkSecurityGroupsSecurityRules_SPECARM instances for property testing.
// We first initialize networkSecurityGroupsSecurityRulesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupsSecurityRulesSPECARMGenerator() gopter.Gen {
	if networkSecurityGroupsSecurityRulesSPECARMGenerator != nil {
		return networkSecurityGroupsSecurityRulesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM(generators)
	networkSecurityGroupsSecurityRulesSPECARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupsSecurityRules_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM(generators)
	networkSecurityGroupsSecurityRulesSPECARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupsSecurityRules_SPECARM{}), generators)

	return networkSecurityGroupsSecurityRulesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRulesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SecurityRulePropertiesFormatSpecARMGenerator())
}

func Test_SecurityRulePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRulePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRulePropertiesFormatSpecARM, SecurityRulePropertiesFormatSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRulePropertiesFormatSpecARM runs a test to see if a specific instance of SecurityRulePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRulePropertiesFormatSpecARM(subject SecurityRulePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRulePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRulePropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//SecurityRulePropertiesFormatSpecARMGenerator()
var securityRulePropertiesFormatSpecARMGenerator gopter.Gen

// SecurityRulePropertiesFormatSpecARMGenerator returns a generator of SecurityRulePropertiesFormat_SpecARM instances for property testing.
// We first initialize securityRulePropertiesFormatSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRulePropertiesFormatSpecARMGenerator() gopter.Gen {
	if securityRulePropertiesFormatSpecARMGenerator != nil {
		return securityRulePropertiesFormatSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM(generators)
	securityRulePropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM(generators)
	securityRulePropertiesFormatSpecARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_SpecARM{}), generators)

	return securityRulePropertiesFormatSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["Access"] = gen.OneConstOf(SecurityRuleAccess_SpecAllow, SecurityRuleAccess_SpecDeny)
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["DestinationPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationPortRanges"] = gen.SliceOf(gen.AlphaString())
	gens["Direction"] = gen.OneConstOf(SecurityRuleDirection_SpecInbound, SecurityRuleDirection_SpecOutbound)
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.OneConstOf(
		SecurityRulePropertiesFormatSpecProtocolAh,
		SecurityRulePropertiesFormatSpecProtocolEsp,
		SecurityRulePropertiesFormatSpecProtocolIcmp,
		SecurityRulePropertiesFormatSpecProtocolStar,
		SecurityRulePropertiesFormatSpecProtocolTcp,
		SecurityRulePropertiesFormatSpecProtocolUdp)
	gens["SourceAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["SourceAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["SourcePortRange"] = gen.PtrOf(gen.AlphaString())
	gens["SourcePortRanges"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormatSpecARM(gens map[string]gopter.Gen) {
	gens["DestinationApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpecARMGenerator())
	gens["SourceApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpecARMGenerator())
}

func Test_ApplicationSecurityGroup_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupSpecARM, ApplicationSecurityGroupSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupSpecARM runs a test to see if a specific instance of ApplicationSecurityGroup_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupSpecARM(subject ApplicationSecurityGroup_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_SpecARM instances for property testing - lazily instantiated by
//ApplicationSecurityGroupSpecARMGenerator()
var applicationSecurityGroupSpecARMGenerator gopter.Gen

// ApplicationSecurityGroupSpecARMGenerator returns a generator of ApplicationSecurityGroup_SpecARM instances for property testing.
func ApplicationSecurityGroupSpecARMGenerator() gopter.Gen {
	if applicationSecurityGroupSpecARMGenerator != nil {
		return applicationSecurityGroupSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpecARM(generators)
	applicationSecurityGroupSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_SpecARM{}), generators)

	return applicationSecurityGroupSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}
