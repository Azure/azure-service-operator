// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkSecurityGroupsSecurityRules_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroupsSecurityRules_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupsSecurityRules_SPECARM, NetworkSecurityGroupsSecurityRules_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupsSecurityRules_SPECARM runs a test to see if a specific instance of NetworkSecurityGroupsSecurityRules_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupsSecurityRules_SPECARM(subject NetworkSecurityGroupsSecurityRules_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroupsSecurityRules_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroupsSecurityRules_SPECARM instances for property testing - lazily instantiated by
//NetworkSecurityGroupsSecurityRules_SPECARMGenerator()
var networkSecurityGroupsSecurityRules_specarmGenerator gopter.Gen

// NetworkSecurityGroupsSecurityRules_SPECARMGenerator returns a generator of NetworkSecurityGroupsSecurityRules_SPECARM instances for property testing.
// We first initialize networkSecurityGroupsSecurityRules_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupsSecurityRules_SPECARMGenerator() gopter.Gen {
	if networkSecurityGroupsSecurityRules_specarmGenerator != nil {
		return networkSecurityGroupsSecurityRules_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM(generators)
	networkSecurityGroupsSecurityRules_specarmGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupsSecurityRules_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM(generators)
	networkSecurityGroupsSecurityRules_specarmGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupsSecurityRules_SPECARM{}), generators)

	return networkSecurityGroupsSecurityRules_specarmGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRules_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SecurityRulePropertiesFormat_SpecARMGenerator())
}

func Test_SecurityRulePropertiesFormat_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRulePropertiesFormat_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRulePropertiesFormat_SpecARM, SecurityRulePropertiesFormat_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRulePropertiesFormat_SpecARM runs a test to see if a specific instance of SecurityRulePropertiesFormat_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRulePropertiesFormat_SpecARM(subject SecurityRulePropertiesFormat_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRulePropertiesFormat_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRulePropertiesFormat_SpecARM instances for property testing - lazily instantiated by
//SecurityRulePropertiesFormat_SpecARMGenerator()
var securityRulePropertiesFormat_specARMGenerator gopter.Gen

// SecurityRulePropertiesFormat_SpecARMGenerator returns a generator of SecurityRulePropertiesFormat_SpecARM instances for property testing.
// We first initialize securityRulePropertiesFormat_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRulePropertiesFormat_SpecARMGenerator() gopter.Gen {
	if securityRulePropertiesFormat_specARMGenerator != nil {
		return securityRulePropertiesFormat_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM(generators)
	securityRulePropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM(generators)
	securityRulePropertiesFormat_specARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormat_SpecARM{}), generators)

	return securityRulePropertiesFormat_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["Access"] = gen.OneConstOf(SecurityRuleAccess_SpecAllow, SecurityRuleAccess_SpecDeny)
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["DestinationPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationPortRanges"] = gen.SliceOf(gen.AlphaString())
	gens["Direction"] = gen.OneConstOf(SecurityRuleDirection_SpecInbound, SecurityRuleDirection_SpecOutbound)
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.OneConstOf(
		SecurityRulePropertiesFormat_Protocol_SpecAh,
		SecurityRulePropertiesFormat_Protocol_SpecEsp,
		SecurityRulePropertiesFormat_Protocol_SpecIcmp,
		SecurityRulePropertiesFormat_Protocol_SpecStar,
		SecurityRulePropertiesFormat_Protocol_SpecTcp,
		SecurityRulePropertiesFormat_Protocol_SpecUdp)
	gens["SourceAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["SourceAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["SourcePortRange"] = gen.PtrOf(gen.AlphaString())
	gens["SourcePortRanges"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormat_SpecARM(gens map[string]gopter.Gen) {
	gens["DestinationApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_SpecARMGenerator())
	gens["SourceApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroup_SpecARMGenerator())
}

func Test_ApplicationSecurityGroup_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroup_SpecARM, ApplicationSecurityGroup_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroup_SpecARM runs a test to see if a specific instance of ApplicationSecurityGroup_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroup_SpecARM(subject ApplicationSecurityGroup_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_SpecARM instances for property testing - lazily instantiated by
//ApplicationSecurityGroup_SpecARMGenerator()
var applicationSecurityGroup_specARMGenerator gopter.Gen

// ApplicationSecurityGroup_SpecARMGenerator returns a generator of ApplicationSecurityGroup_SpecARM instances for property testing.
func ApplicationSecurityGroup_SpecARMGenerator() gopter.Gen {
	if applicationSecurityGroup_specARMGenerator != nil {
		return applicationSecurityGroup_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroup_SpecARM(generators)
	applicationSecurityGroup_specARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_SpecARM{}), generators)

	return applicationSecurityGroup_specARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroup_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroup_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}
