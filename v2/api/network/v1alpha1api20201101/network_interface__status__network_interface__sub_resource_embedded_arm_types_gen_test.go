// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by NetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterface_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(NetworkInterfacePropertiesFormatStatusARMGenerator())
}

func Test_NetworkInterfacePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfacePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfacePropertiesFormatStatusARM, NetworkInterfacePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfacePropertiesFormatStatusARM runs a test to see if a specific instance of NetworkInterfacePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfacePropertiesFormatStatusARM(subject NetworkInterfacePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfacePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfacePropertiesFormat_StatusARM instances for property testing - lazily instantiated by
// NetworkInterfacePropertiesFormatStatusARMGenerator()
var networkInterfacePropertiesFormatStatusARMGenerator gopter.Gen

// NetworkInterfacePropertiesFormatStatusARMGenerator returns a generator of NetworkInterfacePropertiesFormat_StatusARM instances for property testing.
// We first initialize networkInterfacePropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfacePropertiesFormatStatusARMGenerator() gopter.Gen {
	if networkInterfacePropertiesFormatStatusARMGenerator != nil {
		return networkInterfacePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM(generators)
	networkInterfacePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM(generators)
	networkInterfacePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfacePropertiesFormat_StatusARM{}), generators)

	return networkInterfacePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["HostedWorkloads"] = gen.SliceOf(gen.AlphaString())
	gens["MacAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.OneConstOf(
		NetworkInterfacePropertiesFormatStatusMigrationPhaseAbort,
		NetworkInterfacePropertiesFormatStatusMigrationPhaseCommit,
		NetworkInterfacePropertiesFormatStatusMigrationPhaseCommitted,
		NetworkInterfacePropertiesFormatStatusMigrationPhaseNone,
		NetworkInterfacePropertiesFormatStatusMigrationPhasePrepare))
	gens["NicType"] = gen.PtrOf(gen.OneConstOf(NetworkInterfacePropertiesFormatStatusNicTypeElastic, NetworkInterfacePropertiesFormatStatusNicTypeStandard))
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfacePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(NetworkInterfaceDnsSettingsStatusARMGenerator())
	gens["DscpConfiguration"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(NetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(NetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateLinkService"] = gen.PtrOf(PrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["TapConfigurations"] = gen.SliceOf(NetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["VirtualMachine"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_NetworkInterfaceDnsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceDnsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceDnsSettingsStatusARM, NetworkInterfaceDnsSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceDnsSettingsStatusARM runs a test to see if a specific instance of NetworkInterfaceDnsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceDnsSettingsStatusARM(subject NetworkInterfaceDnsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceDnsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceDnsSettings_StatusARM instances for property testing - lazily instantiated by
// NetworkInterfaceDnsSettingsStatusARMGenerator()
var networkInterfaceDnsSettingsStatusARMGenerator gopter.Gen

// NetworkInterfaceDnsSettingsStatusARMGenerator returns a generator of NetworkInterfaceDnsSettings_StatusARM instances for property testing.
func NetworkInterfaceDnsSettingsStatusARMGenerator() gopter.Gen {
	if networkInterfaceDnsSettingsStatusARMGenerator != nil {
		return networkInterfaceDnsSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsStatusARM(generators)
	networkInterfaceDnsSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceDnsSettings_StatusARM{}), generators)

	return networkInterfaceDnsSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceDnsSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["AppliedDnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
	gens["InternalDnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["InternalDomainNameSuffix"] = gen.PtrOf(gen.AlphaString())
	gens["InternalFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by NetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM instances for property
// testing - lazily instantiated by NetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceTapConfiguration_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceTapConfigurationStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM, NetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM(subject NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by NetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func NetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM, PrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM(subject PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateEndpointStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
}

func Test_PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM, PrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM(subject PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by PrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkService_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return privateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateLinkServiceStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
}

func Test_SubResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceStatusARM, SubResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceStatusARM runs a test to see if a specific instance of SubResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceStatusARM(subject SubResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_StatusARM instances for property testing - lazily instantiated by
// SubResourceStatusARMGenerator()
var subResourceStatusARMGenerator gopter.Gen

// SubResourceStatusARMGenerator returns a generator of SubResource_StatusARM instances for property testing.
func SubResourceStatusARMGenerator() gopter.Gen {
	if subResourceStatusARMGenerator != nil {
		return subResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceStatusARM(generators)
	subResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(SubResource_StatusARM{}), generators)

	return subResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM, NetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(subject NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM instances
// for property testing - lazily instantiated by
// NetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return networkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(IPVersion_StatusIPv4, IPVersion_StatusIPv6))
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.OneConstOf(IPAllocationMethod_StatusDynamic, IPAllocationMethod_StatusStatic))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkInterfaceIPConfigurationPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(ApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(BackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["LoadBalancerInboundNatRules"] = gen.SliceOf(InboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["PrivateLinkConnectionProperties"] = gen.PtrOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator())
	gens["PublicIPAddress"] = gen.PtrOf(PublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["Subnet"] = gen.PtrOf(SubnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
	gens["VirtualNetworkTaps"] = gen.SliceOf(VirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM instances for
// property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator())
}

func Test_ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM, ApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM(subject ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by ApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var applicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func ApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return applicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroup_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM, BackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(subject BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing -
// lazily instantiated by BackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var backendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// BackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func BackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if backendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return backendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	backendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(BackendAddressPool_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return backendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAddressPoolStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARM, InboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARM(subject InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by InboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var inboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// InboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func InboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if inboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return inboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	inboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(InboundNatRule_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return inboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForInboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInboundNatRuleStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM, NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM runs a test to see if a specific instance of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM(subject NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM instances for property testing
// - lazily instantiated by NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator()
var networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator gopter.Gen

// NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator returns a generator of NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM instances for property testing.
func NetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator() gopter.Gen {
	if networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator != nil {
		return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM(generators)
	networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties_StatusARM{}), generators)

	return networkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkInterfaceIPConfigurationPrivateLinkConnectionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Fqdns"] = gen.SliceOf(gen.AlphaString())
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMemberName"] = gen.PtrOf(gen.AlphaString())
}

func Test_PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM, PublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM(subject PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return publicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSkuStatusARMGenerator())
}

func Test_Subnet_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusNetworkInterfaceSubResourceEmbeddedARM, SubnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusNetworkInterfaceSubResourceEmbeddedARM(subject Subnet_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by SubnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var subnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func SubnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return subnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	subnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return subnetStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARM, VirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARM(subject VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by VirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var virtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// VirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
func VirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if virtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return virtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	virtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkTap_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return virtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkTapStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM, ApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM runs a test to see if a specific instance of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(subject ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM
// instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator()
var applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator returns a generator of ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM instances for property testing.
// We first initialize applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator != nil {
		return applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(generators)
	applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddressPoolPropertiesFormat_Status_NetworkInterface_SubResourceEmbeddedARM{}), generators)

	return applicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApplicationGatewayBackendAddressPoolPropertiesFormatStatusNetworkInterfaceSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["BackendAddresses"] = gen.SliceOf(ApplicationGatewayBackendAddressStatusARMGenerator())
}

func Test_ApplicationGatewayBackendAddress_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationGatewayBackendAddress_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationGatewayBackendAddressStatusARM, ApplicationGatewayBackendAddressStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationGatewayBackendAddressStatusARM runs a test to see if a specific instance of ApplicationGatewayBackendAddress_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationGatewayBackendAddressStatusARM(subject ApplicationGatewayBackendAddress_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationGatewayBackendAddress_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationGatewayBackendAddress_StatusARM instances for property testing - lazily instantiated by
// ApplicationGatewayBackendAddressStatusARMGenerator()
var applicationGatewayBackendAddressStatusARMGenerator gopter.Gen

// ApplicationGatewayBackendAddressStatusARMGenerator returns a generator of ApplicationGatewayBackendAddress_StatusARM instances for property testing.
func ApplicationGatewayBackendAddressStatusARMGenerator() gopter.Gen {
	if applicationGatewayBackendAddressStatusARMGenerator != nil {
		return applicationGatewayBackendAddressStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatusARM(generators)
	applicationGatewayBackendAddressStatusARMGenerator = gen.Struct(reflect.TypeOf(ApplicationGatewayBackendAddress_StatusARM{}), generators)

	return applicationGatewayBackendAddressStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationGatewayBackendAddressStatusARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
}
