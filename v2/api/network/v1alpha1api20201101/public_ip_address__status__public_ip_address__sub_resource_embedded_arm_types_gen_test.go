// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM, PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM runs a test to see if a specific instance of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM(subject PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()
var publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator gopter.Gen

// PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator returns a generator of PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing.
// We first initialize publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator != nil {
		return publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	return publicIPAddress_status_publicIPAddress_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(PublicIPAddressPropertiesFormat_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(PublicIPAddressSku_StatusARMGenerator())
}

func Test_PublicIPAddressPropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressPropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressPropertiesFormat_StatusARM, PublicIPAddressPropertiesFormat_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressPropertiesFormat_StatusARM runs a test to see if a specific instance of PublicIPAddressPropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressPropertiesFormat_StatusARM(subject PublicIPAddressPropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressPropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressPropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//PublicIPAddressPropertiesFormat_StatusARMGenerator()
var publicIPAddressPropertiesFormat_statusARMGenerator gopter.Gen

// PublicIPAddressPropertiesFormat_StatusARMGenerator returns a generator of PublicIPAddressPropertiesFormat_StatusARM instances for property testing.
// We first initialize publicIPAddressPropertiesFormat_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PublicIPAddressPropertiesFormat_StatusARMGenerator() gopter.Gen {
	if publicIPAddressPropertiesFormat_statusARMGenerator != nil {
		return publicIPAddressPropertiesFormat_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM(generators)
	publicIPAddressPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressPropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM(generators)
	AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM(generators)
	publicIPAddressPropertiesFormat_statusARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressPropertiesFormat_StatusARM{}), generators)

	return publicIPAddressPropertiesFormat_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["MigrationPhase"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PublicIPAllocationMethod"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPublicIPAddressPropertiesFormat_StatusARM(gens map[string]gopter.Gen) {
	gens["DdosSettings"] = gen.PtrOf(DdosSettings_StatusARMGenerator())
	gens["DnsSettings"] = gen.PtrOf(PublicIPAddressDnsSettings_StatusARMGenerator())
	gens["IpConfiguration"] = gen.PtrOf(IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator())
	gens["IpTags"] = gen.SliceOf(IpTag_StatusARMGenerator())
	gens["NatGateway"] = gen.PtrOf(NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_PublicIPAddressSku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressSku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressSku_StatusARM, PublicIPAddressSku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressSku_StatusARM runs a test to see if a specific instance of PublicIPAddressSku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressSku_StatusARM(subject PublicIPAddressSku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressSku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressSku_StatusARM instances for property testing - lazily instantiated by
//PublicIPAddressSku_StatusARMGenerator()
var publicIPAddressSku_statusARMGenerator gopter.Gen

// PublicIPAddressSku_StatusARMGenerator returns a generator of PublicIPAddressSku_StatusARM instances for property testing.
func PublicIPAddressSku_StatusARMGenerator() gopter.Gen {
	if publicIPAddressSku_statusARMGenerator != nil {
		return publicIPAddressSku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressSku_StatusARM(generators)
	publicIPAddressSku_statusARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressSku_StatusARM{}), generators)

	return publicIPAddressSku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressSku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressSku_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_DdosSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DdosSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDdosSettings_StatusARM, DdosSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDdosSettings_StatusARM runs a test to see if a specific instance of DdosSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDdosSettings_StatusARM(subject DdosSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DdosSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DdosSettings_StatusARM instances for property testing - lazily instantiated by
//DdosSettings_StatusARMGenerator()
var ddosSettings_statusARMGenerator gopter.Gen

// DdosSettings_StatusARMGenerator returns a generator of DdosSettings_StatusARM instances for property testing.
// We first initialize ddosSettings_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DdosSettings_StatusARMGenerator() gopter.Gen {
	if ddosSettings_statusARMGenerator != nil {
		return ddosSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_StatusARM(generators)
	ddosSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(DdosSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDdosSettings_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDdosSettings_StatusARM(generators)
	ddosSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(DdosSettings_StatusARM{}), generators)

	return ddosSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDdosSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDdosSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["ProtectedIP"] = gen.PtrOf(gen.Bool())
	gens["ProtectionCoverage"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDdosSettings_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDdosSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["DdosCustomPolicy"] = gen.PtrOf(SubResource_StatusARMGenerator())
}

func Test_IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM, IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM(subject IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()
var ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator gopter.Gen

// IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator returns a generator of IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator != nil {
		return ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	return ipConfiguration_status_publicIPAddress_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator())
}

func Test_IpTag_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpTag_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpTag_StatusARM, IpTag_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpTag_StatusARM runs a test to see if a specific instance of IpTag_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpTag_StatusARM(subject IpTag_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpTag_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpTag_StatusARM instances for property testing - lazily instantiated by IpTag_StatusARMGenerator()
var ipTag_statusARMGenerator gopter.Gen

// IpTag_StatusARMGenerator returns a generator of IpTag_StatusARM instances for property testing.
func IpTag_StatusARMGenerator() gopter.Gen {
	if ipTag_statusARMGenerator != nil {
		return ipTag_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpTag_StatusARM(generators)
	ipTag_statusARMGenerator = gen.Struct(reflect.TypeOf(IpTag_StatusARM{}), generators)

	return ipTag_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForIpTag_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpTag_StatusARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM, NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM runs a test to see if a specific instance of NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM(subject NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()
var natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator gopter.Gen

// NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator returns a generator of NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing.
// We first initialize natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator != nil {
		return natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	return natGateway_status_publicIPAddress_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Sku"] = gen.PtrOf(NatGatewaySku_StatusARMGenerator())
}

func Test_PublicIPAddressDnsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PublicIPAddressDnsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPublicIPAddressDnsSettings_StatusARM, PublicIPAddressDnsSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPublicIPAddressDnsSettings_StatusARM runs a test to see if a specific instance of PublicIPAddressDnsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPublicIPAddressDnsSettings_StatusARM(subject PublicIPAddressDnsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PublicIPAddressDnsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PublicIPAddressDnsSettings_StatusARM instances for property testing - lazily instantiated by
//PublicIPAddressDnsSettings_StatusARMGenerator()
var publicIPAddressDnsSettings_statusARMGenerator gopter.Gen

// PublicIPAddressDnsSettings_StatusARMGenerator returns a generator of PublicIPAddressDnsSettings_StatusARM instances for property testing.
func PublicIPAddressDnsSettings_StatusARMGenerator() gopter.Gen {
	if publicIPAddressDnsSettings_statusARMGenerator != nil {
		return publicIPAddressDnsSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_StatusARM(generators)
	publicIPAddressDnsSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(PublicIPAddressDnsSettings_StatusARM{}), generators)

	return publicIPAddressDnsSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPublicIPAddressDnsSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ReverseFqdn"] = gen.PtrOf(gen.AlphaString())
}

func Test_IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM, IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM runs a test to see if a specific instance of IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM(subject IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property
//testing - lazily instantiated by IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()
var ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator gopter.Gen

// IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator returns a generator of IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing.
// We first initialize ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator != nil {
		return ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(IPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	return ipConfigurationPropertiesFormat_status_publicIPAddress_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["PrivateIPAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAllocationMethod"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIPConfigurationPropertiesFormat_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Subnet"] = gen.PtrOf(Subnet_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator())
}

func Test_NatGatewaySku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NatGatewaySku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNatGatewaySku_StatusARM, NatGatewaySku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNatGatewaySku_StatusARM runs a test to see if a specific instance of NatGatewaySku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNatGatewaySku_StatusARM(subject NatGatewaySku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NatGatewaySku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NatGatewaySku_StatusARM instances for property testing - lazily instantiated by
//NatGatewaySku_StatusARMGenerator()
var natGatewaySku_statusARMGenerator gopter.Gen

// NatGatewaySku_StatusARMGenerator returns a generator of NatGatewaySku_StatusARM instances for property testing.
func NatGatewaySku_StatusARMGenerator() gopter.Gen {
	if natGatewaySku_statusARMGenerator != nil {
		return natGatewaySku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNatGatewaySku_StatusARM(generators)
	natGatewaySku_statusARMGenerator = gen.Struct(reflect.TypeOf(NatGatewaySku_StatusARM{}), generators)

	return natGatewaySku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForNatGatewaySku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNatGatewaySku_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnet_Status_PublicIPAddress_SubResourceEmbeddedARM, Subnet_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnet_Status_PublicIPAddress_SubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnet_Status_PublicIPAddress_SubResourceEmbeddedARM(subject Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by Subnet_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator()
var subnet_status_publicIPAddress_subResourceEmbeddedARMGenerator gopter.Gen

// Subnet_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM instances for property testing.
func Subnet_Status_PublicIPAddress_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnet_status_publicIPAddress_subResourceEmbeddedARMGenerator != nil {
		return subnet_status_publicIPAddress_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnet_Status_PublicIPAddress_SubResourceEmbeddedARM(generators)
	subnet_status_publicIPAddress_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM{}), generators)

	return subnet_status_publicIPAddress_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnet_Status_PublicIPAddress_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnet_Status_PublicIPAddress_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
