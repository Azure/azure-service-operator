// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
func Test_NetworkSecurityGroupsSecurityRule_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
========
func Test_NetworkSecurityGroups_SecurityRules_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
		"Round trip of NetworkSecurityGroupsSecurityRule_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroupsSecurityRule_SpecARM, NetworkSecurityGroupsSecurityRule_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroupsSecurityRule_SpecARM runs a test to see if a specific instance of NetworkSecurityGroupsSecurityRule_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroupsSecurityRule_SpecARM(subject NetworkSecurityGroupsSecurityRule_SpecARM) string {
========
		"Round trip of NetworkSecurityGroups_SecurityRules_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkSecurityGroups_SecurityRules_SpecARM, NetworkSecurityGroups_SecurityRules_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkSecurityGroups_SecurityRules_SpecARM runs a test to see if a specific instance of NetworkSecurityGroups_SecurityRules_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkSecurityGroups_SecurityRules_SpecARM(subject NetworkSecurityGroups_SecurityRules_SpecARM) string {
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
	var actual NetworkSecurityGroupsSecurityRule_SpecARM
========
	var actual NetworkSecurityGroups_SecurityRules_SpecARM
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
// Generator of NetworkSecurityGroupsSecurityRule_SpecARM instances for property testing - lazily instantiated by
// NetworkSecurityGroupsSecurityRule_SpecARMGenerator()
var networkSecurityGroupsSecurityRule_SpecARMGenerator gopter.Gen

// NetworkSecurityGroupsSecurityRule_SpecARMGenerator returns a generator of NetworkSecurityGroupsSecurityRule_SpecARM instances for property testing.
// We first initialize networkSecurityGroupsSecurityRule_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroupsSecurityRule_SpecARMGenerator() gopter.Gen {
	if networkSecurityGroupsSecurityRule_SpecARMGenerator != nil {
		return networkSecurityGroupsSecurityRule_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM(generators)
	networkSecurityGroupsSecurityRule_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupsSecurityRule_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM(generators)
	networkSecurityGroupsSecurityRule_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroupsSecurityRule_SpecARM{}), generators)

	return networkSecurityGroupsSecurityRule_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
========
// Generator of NetworkSecurityGroups_SecurityRules_SpecARM instances for property testing - lazily instantiated by
// NetworkSecurityGroups_SecurityRules_SpecARMGenerator()
var networkSecurityGroups_SecurityRules_SpecARMGenerator gopter.Gen

// NetworkSecurityGroups_SecurityRules_SpecARMGenerator returns a generator of NetworkSecurityGroups_SecurityRules_SpecARM instances for property testing.
// We first initialize networkSecurityGroups_SecurityRules_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkSecurityGroups_SecurityRules_SpecARMGenerator() gopter.Gen {
	if networkSecurityGroups_SecurityRules_SpecARMGenerator != nil {
		return networkSecurityGroups_SecurityRules_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM(generators)
	networkSecurityGroups_SecurityRules_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroups_SecurityRules_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM(generators)
	AddRelatedPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM(generators)
	networkSecurityGroups_SecurityRules_SpecARMGenerator = gen.Struct(reflect.TypeOf(NetworkSecurityGroups_SecurityRules_SpecARM{}), generators)

	return networkSecurityGroups_SecurityRules_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
// AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroupsSecurityRule_SpecARM(gens map[string]gopter.Gen) {
========
// AddRelatedPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkSecurityGroups_SecurityRules_SpecARM(gens map[string]gopter.Gen) {
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	gens["Properties"] = gen.PtrOf(SecurityRulePropertiesFormatARMGenerator())
}

func Test_SecurityRulePropertiesFormatARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityRulePropertiesFormatARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityRulePropertiesFormatARM, SecurityRulePropertiesFormatARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityRulePropertiesFormatARM runs a test to see if a specific instance of SecurityRulePropertiesFormatARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityRulePropertiesFormatARM(subject SecurityRulePropertiesFormatARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityRulePropertiesFormatARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityRulePropertiesFormatARM instances for property testing - lazily instantiated by
// SecurityRulePropertiesFormatARMGenerator()
var securityRulePropertiesFormatARMGenerator gopter.Gen

// SecurityRulePropertiesFormatARMGenerator returns a generator of SecurityRulePropertiesFormatARM instances for property testing.
// We first initialize securityRulePropertiesFormatARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityRulePropertiesFormatARMGenerator() gopter.Gen {
	if securityRulePropertiesFormatARMGenerator != nil {
		return securityRulePropertiesFormatARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatARM(generators)
	securityRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormatARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatARM(generators)
	AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormatARM(generators)
	securityRulePropertiesFormatARMGenerator = gen.Struct(reflect.TypeOf(SecurityRulePropertiesFormatARM{}), generators)

	return securityRulePropertiesFormatARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityRulePropertiesFormatARM(gens map[string]gopter.Gen) {
<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
	gens["Access"] = gen.PtrOf(gen.OneConstOf(SecurityRuleAccess_Allow, SecurityRuleAccess_Deny))
========
	gens["Access"] = gen.PtrOf(gen.OneConstOf(SecurityRulePropertiesFormat_Access_Allow, SecurityRulePropertiesFormat_Access_Deny))
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["DestinationPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationPortRanges"] = gen.SliceOf(gen.AlphaString())
<<<<<<<< HEAD:v2/api/network/v1alpha1api20201101/network_security_groups_security_rule__spec_arm_types_gen_test.go
	gens["Direction"] = gen.PtrOf(gen.OneConstOf(SecurityRuleDirection_Inbound, SecurityRuleDirection_Outbound))
========
	gens["Direction"] = gen.PtrOf(gen.OneConstOf(SecurityRulePropertiesFormat_Direction_Inbound, SecurityRulePropertiesFormat_Direction_Outbound))
>>>>>>>> main:v2/api/network/v1alpha1api20201101/network_security_groups_security_rules_spec_arm_types_gen_test.go
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(
		SecurityRulePropertiesFormat_Protocol_Ah,
		SecurityRulePropertiesFormat_Protocol_Esp,
		SecurityRulePropertiesFormat_Protocol_Icmp,
		SecurityRulePropertiesFormat_Protocol_Star,
		SecurityRulePropertiesFormat_Protocol_Tcp,
		SecurityRulePropertiesFormat_Protocol_Udp))
	gens["SourceAddressPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["SourceAddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["SourcePortRange"] = gen.PtrOf(gen.AlphaString())
	gens["SourcePortRanges"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormatARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityRulePropertiesFormatARM(gens map[string]gopter.Gen) {
	gens["DestinationApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpecARMGenerator())
	gens["SourceApplicationSecurityGroups"] = gen.SliceOf(ApplicationSecurityGroupSpecARMGenerator())
}

func Test_ApplicationSecurityGroupSpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApplicationSecurityGroupSpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApplicationSecurityGroupSpecARM, ApplicationSecurityGroupSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApplicationSecurityGroupSpecARM runs a test to see if a specific instance of ApplicationSecurityGroupSpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApplicationSecurityGroupSpecARM(subject ApplicationSecurityGroupSpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApplicationSecurityGroupSpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApplicationSecurityGroupSpecARM instances for property testing - lazily instantiated by
// ApplicationSecurityGroupSpecARMGenerator()
var applicationSecurityGroupSpecARMGenerator gopter.Gen

// ApplicationSecurityGroupSpecARMGenerator returns a generator of ApplicationSecurityGroupSpecARM instances for property testing.
func ApplicationSecurityGroupSpecARMGenerator() gopter.Gen {
	if applicationSecurityGroupSpecARMGenerator != nil {
		return applicationSecurityGroupSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpecARM(generators)
	applicationSecurityGroupSpecARMGenerator = gen.Struct(reflect.TypeOf(ApplicationSecurityGroupSpecARM{}), generators)

	return applicationSecurityGroupSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApplicationSecurityGroupSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}
