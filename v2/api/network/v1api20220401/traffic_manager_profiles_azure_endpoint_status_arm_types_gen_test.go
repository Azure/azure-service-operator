// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EndpointProperties_CustomHeaders_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_CustomHeaders_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_CustomHeaders_STATUS_ARM, EndpointProperties_CustomHeaders_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_CustomHeaders_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_CustomHeaders_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_CustomHeaders_STATUS_ARM(subject EndpointProperties_CustomHeaders_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_CustomHeaders_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_CustomHeaders_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_CustomHeaders_STATUS_ARMGenerator()
var endpointProperties_CustomHeaders_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_CustomHeaders_STATUS_ARMGenerator returns a generator of EndpointProperties_CustomHeaders_STATUS_ARM instances for property testing.
func EndpointProperties_CustomHeaders_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_CustomHeaders_STATUS_ARMGenerator != nil {
		return endpointProperties_CustomHeaders_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_CustomHeaders_STATUS_ARM(generators)
	endpointProperties_CustomHeaders_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_CustomHeaders_STATUS_ARM{}), generators)

	return endpointProperties_CustomHeaders_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_CustomHeaders_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_CustomHeaders_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_EndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUS_ARM, EndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUS_ARM(subject EndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_STATUS_ARMGenerator()
var endpointProperties_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_STATUS_ARMGenerator returns a generator of EndpointProperties_STATUS_ARM instances for property testing.
// We first initialize endpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_STATUS_ARMGenerator != nil {
		return endpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	endpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	endpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_ARM{}), generators)

	return endpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AlwaysServe"] = gen.PtrOf(gen.OneConstOf(EndpointProperties_AlwaysServe_STATUS_ARM_Disabled, EndpointProperties_AlwaysServe_STATUS_ARM_Enabled))
	gens["EndpointLocation"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointMonitorStatus"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_CheckingEndpoint,
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_Degraded,
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_Disabled,
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_Inactive,
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_Online,
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_Stopped,
		EndpointProperties_EndpointMonitorStatus_STATUS_ARM_Unmonitored))
	gens["EndpointStatus"] = gen.PtrOf(gen.OneConstOf(EndpointProperties_EndpointStatus_STATUS_ARM_Disabled, EndpointProperties_EndpointStatus_STATUS_ARM_Enabled))
	gens["GeoMapping"] = gen.SliceOf(gen.AlphaString())
	gens["MinChildEndpoints"] = gen.PtrOf(gen.Int())
	gens["MinChildEndpointsIPv4"] = gen.PtrOf(gen.Int())
	gens["MinChildEndpointsIPv6"] = gen.PtrOf(gen.Int())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomHeaders"] = gen.SliceOf(EndpointProperties_CustomHeaders_STATUS_ARMGenerator())
	gens["Subnets"] = gen.SliceOf(EndpointProperties_Subnets_STATUS_ARMGenerator())
}

func Test_EndpointProperties_Subnets_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_Subnets_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_Subnets_STATUS_ARM, EndpointProperties_Subnets_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_Subnets_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_Subnets_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_Subnets_STATUS_ARM(subject EndpointProperties_Subnets_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_Subnets_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_Subnets_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_Subnets_STATUS_ARMGenerator()
var endpointProperties_Subnets_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_Subnets_STATUS_ARMGenerator returns a generator of EndpointProperties_Subnets_STATUS_ARM instances for property testing.
func EndpointProperties_Subnets_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_Subnets_STATUS_ARMGenerator != nil {
		return endpointProperties_Subnets_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_Subnets_STATUS_ARM(generators)
	endpointProperties_Subnets_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_Subnets_STATUS_ARM{}), generators)

	return endpointProperties_Subnets_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_Subnets_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_Subnets_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["First"] = gen.PtrOf(gen.AlphaString())
	gens["Last"] = gen.PtrOf(gen.AlphaString())
	gens["Scope"] = gen.PtrOf(gen.Int())
}

func Test_TrafficManagerProfilesAzureEndpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficManagerProfilesAzureEndpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficManagerProfilesAzureEndpoint_STATUS_ARM, TrafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficManagerProfilesAzureEndpoint_STATUS_ARM runs a test to see if a specific instance of TrafficManagerProfilesAzureEndpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficManagerProfilesAzureEndpoint_STATUS_ARM(subject TrafficManagerProfilesAzureEndpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficManagerProfilesAzureEndpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficManagerProfilesAzureEndpoint_STATUS_ARM instances for property testing - lazily instantiated by
// TrafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator()
var trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator gopter.Gen

// TrafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator returns a generator of TrafficManagerProfilesAzureEndpoint_STATUS_ARM instances for property testing.
// We first initialize trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TrafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator() gopter.Gen {
	if trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator != nil {
		return trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM(generators)
	trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesAzureEndpoint_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM(generators)
	trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesAzureEndpoint_STATUS_ARM{}), generators)

	return trafficManagerProfilesAzureEndpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficManagerProfilesAzureEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointProperties_STATUS_ARMGenerator())
}
