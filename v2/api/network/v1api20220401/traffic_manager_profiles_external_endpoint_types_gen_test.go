// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220401

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/network/v1api20220401/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_TrafficManagerProfilesExternalEndpoint_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficManagerProfilesExternalEndpoint to hub returns original",
		prop.ForAll(RunResourceConversionTestForTrafficManagerProfilesExternalEndpoint, TrafficManagerProfilesExternalEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForTrafficManagerProfilesExternalEndpoint tests if a specific instance of TrafficManagerProfilesExternalEndpoint round trips to the hub storage version and back losslessly
func RunResourceConversionTestForTrafficManagerProfilesExternalEndpoint(subject TrafficManagerProfilesExternalEndpoint) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.TrafficManagerProfilesExternalEndpoint
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual TrafficManagerProfilesExternalEndpoint
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficManagerProfilesExternalEndpoint_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficManagerProfilesExternalEndpoint to TrafficManagerProfilesExternalEndpoint via AssignProperties_To_TrafficManagerProfilesExternalEndpoint & AssignProperties_From_TrafficManagerProfilesExternalEndpoint returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint, TrafficManagerProfilesExternalEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint tests if a specific instance of TrafficManagerProfilesExternalEndpoint can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint(subject TrafficManagerProfilesExternalEndpoint) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficManagerProfilesExternalEndpoint
	err := copied.AssignProperties_To_TrafficManagerProfilesExternalEndpoint(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficManagerProfilesExternalEndpoint
	err = actual.AssignProperties_From_TrafficManagerProfilesExternalEndpoint(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficManagerProfilesExternalEndpoint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficManagerProfilesExternalEndpoint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint, TrafficManagerProfilesExternalEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint runs a test to see if a specific instance of TrafficManagerProfilesExternalEndpoint round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint(subject TrafficManagerProfilesExternalEndpoint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficManagerProfilesExternalEndpoint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficManagerProfilesExternalEndpoint instances for property testing - lazily instantiated by
// TrafficManagerProfilesExternalEndpointGenerator()
var trafficManagerProfilesExternalEndpointGenerator gopter.Gen

// TrafficManagerProfilesExternalEndpointGenerator returns a generator of TrafficManagerProfilesExternalEndpoint instances for property testing.
func TrafficManagerProfilesExternalEndpointGenerator() gopter.Gen {
	if trafficManagerProfilesExternalEndpointGenerator != nil {
		return trafficManagerProfilesExternalEndpointGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint(generators)
	trafficManagerProfilesExternalEndpointGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesExternalEndpoint{}), generators)

	return trafficManagerProfilesExternalEndpointGenerator
}

// AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint(gens map[string]gopter.Gen) {
	gens["Spec"] = TrafficManagerProfilesExternalEndpoint_SpecGenerator()
	gens["Status"] = TrafficManagerProfilesExternalEndpoint_STATUSGenerator()
}

func Test_TrafficManagerProfilesExternalEndpointOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficManagerProfilesExternalEndpointOperatorSpec to TrafficManagerProfilesExternalEndpointOperatorSpec via AssignProperties_To_TrafficManagerProfilesExternalEndpointOperatorSpec & AssignProperties_From_TrafficManagerProfilesExternalEndpointOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpointOperatorSpec, TrafficManagerProfilesExternalEndpointOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpointOperatorSpec tests if a specific instance of TrafficManagerProfilesExternalEndpointOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpointOperatorSpec(subject TrafficManagerProfilesExternalEndpointOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficManagerProfilesExternalEndpointOperatorSpec
	err := copied.AssignProperties_To_TrafficManagerProfilesExternalEndpointOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficManagerProfilesExternalEndpointOperatorSpec
	err = actual.AssignProperties_From_TrafficManagerProfilesExternalEndpointOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficManagerProfilesExternalEndpointOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficManagerProfilesExternalEndpointOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficManagerProfilesExternalEndpointOperatorSpec, TrafficManagerProfilesExternalEndpointOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficManagerProfilesExternalEndpointOperatorSpec runs a test to see if a specific instance of TrafficManagerProfilesExternalEndpointOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficManagerProfilesExternalEndpointOperatorSpec(subject TrafficManagerProfilesExternalEndpointOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficManagerProfilesExternalEndpointOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficManagerProfilesExternalEndpointOperatorSpec instances for property testing - lazily instantiated
// by TrafficManagerProfilesExternalEndpointOperatorSpecGenerator()
var trafficManagerProfilesExternalEndpointOperatorSpecGenerator gopter.Gen

// TrafficManagerProfilesExternalEndpointOperatorSpecGenerator returns a generator of TrafficManagerProfilesExternalEndpointOperatorSpec instances for property testing.
func TrafficManagerProfilesExternalEndpointOperatorSpecGenerator() gopter.Gen {
	if trafficManagerProfilesExternalEndpointOperatorSpecGenerator != nil {
		return trafficManagerProfilesExternalEndpointOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	trafficManagerProfilesExternalEndpointOperatorSpecGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesExternalEndpointOperatorSpec{}), generators)

	return trafficManagerProfilesExternalEndpointOperatorSpecGenerator
}

func Test_TrafficManagerProfilesExternalEndpoint_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficManagerProfilesExternalEndpoint_STATUS to TrafficManagerProfilesExternalEndpoint_STATUS via AssignProperties_To_TrafficManagerProfilesExternalEndpoint_STATUS & AssignProperties_From_TrafficManagerProfilesExternalEndpoint_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint_STATUS, TrafficManagerProfilesExternalEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint_STATUS tests if a specific instance of TrafficManagerProfilesExternalEndpoint_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint_STATUS(subject TrafficManagerProfilesExternalEndpoint_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficManagerProfilesExternalEndpoint_STATUS
	err := copied.AssignProperties_To_TrafficManagerProfilesExternalEndpoint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficManagerProfilesExternalEndpoint_STATUS
	err = actual.AssignProperties_From_TrafficManagerProfilesExternalEndpoint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficManagerProfilesExternalEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficManagerProfilesExternalEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint_STATUS, TrafficManagerProfilesExternalEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint_STATUS runs a test to see if a specific instance of TrafficManagerProfilesExternalEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint_STATUS(subject TrafficManagerProfilesExternalEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficManagerProfilesExternalEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficManagerProfilesExternalEndpoint_STATUS instances for property testing - lazily instantiated by
// TrafficManagerProfilesExternalEndpoint_STATUSGenerator()
var trafficManagerProfilesExternalEndpoint_STATUSGenerator gopter.Gen

// TrafficManagerProfilesExternalEndpoint_STATUSGenerator returns a generator of TrafficManagerProfilesExternalEndpoint_STATUS instances for property testing.
// We first initialize trafficManagerProfilesExternalEndpoint_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TrafficManagerProfilesExternalEndpoint_STATUSGenerator() gopter.Gen {
	if trafficManagerProfilesExternalEndpoint_STATUSGenerator != nil {
		return trafficManagerProfilesExternalEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS(generators)
	trafficManagerProfilesExternalEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesExternalEndpoint_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS(generators)
	AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS(generators)
	trafficManagerProfilesExternalEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesExternalEndpoint_STATUS{}), generators)

	return trafficManagerProfilesExternalEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["AlwaysServe"] = gen.PtrOf(gen.OneConstOf(EndpointProperties_AlwaysServe_STATUS_Disabled, EndpointProperties_AlwaysServe_STATUS_Enabled))
	gens["EndpointLocation"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointMonitorStatus"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_EndpointMonitorStatus_STATUS_CheckingEndpoint,
		EndpointProperties_EndpointMonitorStatus_STATUS_Degraded,
		EndpointProperties_EndpointMonitorStatus_STATUS_Disabled,
		EndpointProperties_EndpointMonitorStatus_STATUS_Inactive,
		EndpointProperties_EndpointMonitorStatus_STATUS_Online,
		EndpointProperties_EndpointMonitorStatus_STATUS_Stopped,
		EndpointProperties_EndpointMonitorStatus_STATUS_Unmonitored))
	gens["EndpointStatus"] = gen.PtrOf(gen.OneConstOf(EndpointProperties_EndpointStatus_STATUS_Disabled, EndpointProperties_EndpointStatus_STATUS_Enabled))
	gens["GeoMapping"] = gen.SliceOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["MinChildEndpoints"] = gen.PtrOf(gen.Int())
	gens["MinChildEndpointsIPv4"] = gen.PtrOf(gen.Int())
	gens["MinChildEndpointsIPv6"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["CustomHeaders"] = gen.SliceOf(EndpointProperties_CustomHeaders_STATUSGenerator())
	gens["Subnets"] = gen.SliceOf(EndpointProperties_Subnets_STATUSGenerator())
}

func Test_TrafficManagerProfilesExternalEndpoint_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficManagerProfilesExternalEndpoint_Spec to TrafficManagerProfilesExternalEndpoint_Spec via AssignProperties_To_TrafficManagerProfilesExternalEndpoint_Spec & AssignProperties_From_TrafficManagerProfilesExternalEndpoint_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint_Spec, TrafficManagerProfilesExternalEndpoint_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint_Spec tests if a specific instance of TrafficManagerProfilesExternalEndpoint_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficManagerProfilesExternalEndpoint_Spec(subject TrafficManagerProfilesExternalEndpoint_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficManagerProfilesExternalEndpoint_Spec
	err := copied.AssignProperties_To_TrafficManagerProfilesExternalEndpoint_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficManagerProfilesExternalEndpoint_Spec
	err = actual.AssignProperties_From_TrafficManagerProfilesExternalEndpoint_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficManagerProfilesExternalEndpoint_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficManagerProfilesExternalEndpoint_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint_Spec, TrafficManagerProfilesExternalEndpoint_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint_Spec runs a test to see if a specific instance of TrafficManagerProfilesExternalEndpoint_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficManagerProfilesExternalEndpoint_Spec(subject TrafficManagerProfilesExternalEndpoint_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficManagerProfilesExternalEndpoint_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficManagerProfilesExternalEndpoint_Spec instances for property testing - lazily instantiated by
// TrafficManagerProfilesExternalEndpoint_SpecGenerator()
var trafficManagerProfilesExternalEndpoint_SpecGenerator gopter.Gen

// TrafficManagerProfilesExternalEndpoint_SpecGenerator returns a generator of TrafficManagerProfilesExternalEndpoint_Spec instances for property testing.
// We first initialize trafficManagerProfilesExternalEndpoint_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TrafficManagerProfilesExternalEndpoint_SpecGenerator() gopter.Gen {
	if trafficManagerProfilesExternalEndpoint_SpecGenerator != nil {
		return trafficManagerProfilesExternalEndpoint_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec(generators)
	trafficManagerProfilesExternalEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesExternalEndpoint_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec(generators)
	AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec(generators)
	trafficManagerProfilesExternalEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfilesExternalEndpoint_Spec{}), generators)

	return trafficManagerProfilesExternalEndpoint_SpecGenerator
}

// AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["AlwaysServe"] = gen.PtrOf(gen.OneConstOf(EndpointProperties_AlwaysServe_Disabled, EndpointProperties_AlwaysServe_Enabled))
	gens["AzureName"] = gen.AlphaString()
	gens["EndpointLocation"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointMonitorStatus"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_EndpointMonitorStatus_CheckingEndpoint,
		EndpointProperties_EndpointMonitorStatus_Degraded,
		EndpointProperties_EndpointMonitorStatus_Disabled,
		EndpointProperties_EndpointMonitorStatus_Inactive,
		EndpointProperties_EndpointMonitorStatus_Online,
		EndpointProperties_EndpointMonitorStatus_Stopped,
		EndpointProperties_EndpointMonitorStatus_Unmonitored))
	gens["EndpointStatus"] = gen.PtrOf(gen.OneConstOf(EndpointProperties_EndpointStatus_Disabled, EndpointProperties_EndpointStatus_Enabled))
	gens["GeoMapping"] = gen.SliceOf(gen.AlphaString())
	gens["MinChildEndpoints"] = gen.PtrOf(gen.Int())
	gens["MinChildEndpointsIPv4"] = gen.PtrOf(gen.Int())
	gens["MinChildEndpointsIPv6"] = gen.PtrOf(gen.Int())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficManagerProfilesExternalEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["CustomHeaders"] = gen.SliceOf(EndpointProperties_CustomHeadersGenerator())
	gens["OperatorSpec"] = gen.PtrOf(TrafficManagerProfilesExternalEndpointOperatorSpecGenerator())
	gens["Subnets"] = gen.SliceOf(EndpointProperties_SubnetsGenerator())
}
