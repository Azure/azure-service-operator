// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsConfig_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsConfig_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsConfig_STATUS, DnsConfig_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsConfig_STATUS runs a test to see if a specific instance of DnsConfig_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsConfig_STATUS(subject DnsConfig_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsConfig_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsConfig_STATUS instances for property testing - lazily instantiated by DnsConfig_STATUSGenerator()
var dnsConfig_STATUSGenerator gopter.Gen

// DnsConfig_STATUSGenerator returns a generator of DnsConfig_STATUS instances for property testing.
func DnsConfig_STATUSGenerator() gopter.Gen {
	if dnsConfig_STATUSGenerator != nil {
		return dnsConfig_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsConfig_STATUS(generators)
	dnsConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsConfig_STATUS{}), generators)

	return dnsConfig_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDnsConfig_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsConfig_STATUS(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["RelativeName"] = gen.PtrOf(gen.AlphaString())
	gens["Ttl"] = gen.PtrOf(gen.Int())
}

func Test_Endpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Endpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpoint_STATUS, Endpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpoint_STATUS runs a test to see if a specific instance of Endpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpoint_STATUS(subject Endpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Endpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Endpoint_STATUS instances for property testing - lazily instantiated by Endpoint_STATUSGenerator()
var endpoint_STATUSGenerator gopter.Gen

// Endpoint_STATUSGenerator returns a generator of Endpoint_STATUS instances for property testing.
func Endpoint_STATUSGenerator() gopter.Gen {
	if endpoint_STATUSGenerator != nil {
		return endpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpoint_STATUS(generators)
	endpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUS{}), generators)

	return endpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_MonitorConfig_CustomHeaders_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MonitorConfig_CustomHeaders_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMonitorConfig_CustomHeaders_STATUS, MonitorConfig_CustomHeaders_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMonitorConfig_CustomHeaders_STATUS runs a test to see if a specific instance of MonitorConfig_CustomHeaders_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMonitorConfig_CustomHeaders_STATUS(subject MonitorConfig_CustomHeaders_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MonitorConfig_CustomHeaders_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MonitorConfig_CustomHeaders_STATUS instances for property testing - lazily instantiated by
// MonitorConfig_CustomHeaders_STATUSGenerator()
var monitorConfig_CustomHeaders_STATUSGenerator gopter.Gen

// MonitorConfig_CustomHeaders_STATUSGenerator returns a generator of MonitorConfig_CustomHeaders_STATUS instances for property testing.
func MonitorConfig_CustomHeaders_STATUSGenerator() gopter.Gen {
	if monitorConfig_CustomHeaders_STATUSGenerator != nil {
		return monitorConfig_CustomHeaders_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMonitorConfig_CustomHeaders_STATUS(generators)
	monitorConfig_CustomHeaders_STATUSGenerator = gen.Struct(reflect.TypeOf(MonitorConfig_CustomHeaders_STATUS{}), generators)

	return monitorConfig_CustomHeaders_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMonitorConfig_CustomHeaders_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMonitorConfig_CustomHeaders_STATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_MonitorConfig_ExpectedStatusCodeRanges_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MonitorConfig_ExpectedStatusCodeRanges_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMonitorConfig_ExpectedStatusCodeRanges_STATUS, MonitorConfig_ExpectedStatusCodeRanges_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMonitorConfig_ExpectedStatusCodeRanges_STATUS runs a test to see if a specific instance of MonitorConfig_ExpectedStatusCodeRanges_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMonitorConfig_ExpectedStatusCodeRanges_STATUS(subject MonitorConfig_ExpectedStatusCodeRanges_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MonitorConfig_ExpectedStatusCodeRanges_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MonitorConfig_ExpectedStatusCodeRanges_STATUS instances for property testing - lazily instantiated by
// MonitorConfig_ExpectedStatusCodeRanges_STATUSGenerator()
var monitorConfig_ExpectedStatusCodeRanges_STATUSGenerator gopter.Gen

// MonitorConfig_ExpectedStatusCodeRanges_STATUSGenerator returns a generator of MonitorConfig_ExpectedStatusCodeRanges_STATUS instances for property testing.
func MonitorConfig_ExpectedStatusCodeRanges_STATUSGenerator() gopter.Gen {
	if monitorConfig_ExpectedStatusCodeRanges_STATUSGenerator != nil {
		return monitorConfig_ExpectedStatusCodeRanges_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMonitorConfig_ExpectedStatusCodeRanges_STATUS(generators)
	monitorConfig_ExpectedStatusCodeRanges_STATUSGenerator = gen.Struct(reflect.TypeOf(MonitorConfig_ExpectedStatusCodeRanges_STATUS{}), generators)

	return monitorConfig_ExpectedStatusCodeRanges_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMonitorConfig_ExpectedStatusCodeRanges_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMonitorConfig_ExpectedStatusCodeRanges_STATUS(gens map[string]gopter.Gen) {
	gens["Max"] = gen.PtrOf(gen.Int())
	gens["Min"] = gen.PtrOf(gen.Int())
}

func Test_MonitorConfig_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MonitorConfig_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMonitorConfig_STATUS, MonitorConfig_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMonitorConfig_STATUS runs a test to see if a specific instance of MonitorConfig_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMonitorConfig_STATUS(subject MonitorConfig_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MonitorConfig_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MonitorConfig_STATUS instances for property testing - lazily instantiated by
// MonitorConfig_STATUSGenerator()
var monitorConfig_STATUSGenerator gopter.Gen

// MonitorConfig_STATUSGenerator returns a generator of MonitorConfig_STATUS instances for property testing.
// We first initialize monitorConfig_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MonitorConfig_STATUSGenerator() gopter.Gen {
	if monitorConfig_STATUSGenerator != nil {
		return monitorConfig_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMonitorConfig_STATUS(generators)
	monitorConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(MonitorConfig_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMonitorConfig_STATUS(generators)
	AddRelatedPropertyGeneratorsForMonitorConfig_STATUS(generators)
	monitorConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(MonitorConfig_STATUS{}), generators)

	return monitorConfig_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMonitorConfig_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMonitorConfig_STATUS(gens map[string]gopter.Gen) {
	gens["IntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["ProfileMonitorStatus"] = gen.PtrOf(gen.OneConstOf(
		MonitorConfig_ProfileMonitorStatus_STATUS_CheckingEndpoints,
		MonitorConfig_ProfileMonitorStatus_STATUS_Degraded,
		MonitorConfig_ProfileMonitorStatus_STATUS_Disabled,
		MonitorConfig_ProfileMonitorStatus_STATUS_Inactive,
		MonitorConfig_ProfileMonitorStatus_STATUS_Online))
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(MonitorConfig_Protocol_STATUS_HTTP, MonitorConfig_Protocol_STATUS_HTTPS, MonitorConfig_Protocol_STATUS_TCP))
	gens["TimeoutInSeconds"] = gen.PtrOf(gen.Int())
	gens["ToleratedNumberOfFailures"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForMonitorConfig_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMonitorConfig_STATUS(gens map[string]gopter.Gen) {
	gens["CustomHeaders"] = gen.SliceOf(MonitorConfig_CustomHeaders_STATUSGenerator())
	gens["ExpectedStatusCodeRanges"] = gen.SliceOf(MonitorConfig_ExpectedStatusCodeRanges_STATUSGenerator())
}

func Test_ProfileProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProfileProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfileProperties_STATUS, ProfileProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfileProperties_STATUS runs a test to see if a specific instance of ProfileProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForProfileProperties_STATUS(subject ProfileProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProfileProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProfileProperties_STATUS instances for property testing - lazily instantiated by
// ProfileProperties_STATUSGenerator()
var profileProperties_STATUSGenerator gopter.Gen

// ProfileProperties_STATUSGenerator returns a generator of ProfileProperties_STATUS instances for property testing.
// We first initialize profileProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProfileProperties_STATUSGenerator() gopter.Gen {
	if profileProperties_STATUSGenerator != nil {
		return profileProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfileProperties_STATUS(generators)
	profileProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ProfileProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfileProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForProfileProperties_STATUS(generators)
	profileProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ProfileProperties_STATUS{}), generators)

	return profileProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForProfileProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfileProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AllowedEndpointRecordTypes"] = gen.SliceOf(gen.OneConstOf(
		AllowedEndpointRecordType_STATUS_Any,
		AllowedEndpointRecordType_STATUS_DomainName,
		AllowedEndpointRecordType_STATUS_IPv4Address,
		AllowedEndpointRecordType_STATUS_IPv6Address))
	gens["MaxReturn"] = gen.PtrOf(gen.Int())
	gens["ProfileStatus"] = gen.PtrOf(gen.OneConstOf(ProfileProperties_ProfileStatus_STATUS_Disabled, ProfileProperties_ProfileStatus_STATUS_Enabled))
	gens["TrafficRoutingMethod"] = gen.PtrOf(gen.OneConstOf(
		ProfileProperties_TrafficRoutingMethod_STATUS_Geographic,
		ProfileProperties_TrafficRoutingMethod_STATUS_MultiValue,
		ProfileProperties_TrafficRoutingMethod_STATUS_Performance,
		ProfileProperties_TrafficRoutingMethod_STATUS_Priority,
		ProfileProperties_TrafficRoutingMethod_STATUS_Subnet,
		ProfileProperties_TrafficRoutingMethod_STATUS_Weighted))
	gens["TrafficViewEnrollmentStatus"] = gen.PtrOf(gen.OneConstOf(ProfileProperties_TrafficViewEnrollmentStatus_STATUS_Disabled, ProfileProperties_TrafficViewEnrollmentStatus_STATUS_Enabled))
}

// AddRelatedPropertyGeneratorsForProfileProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfileProperties_STATUS(gens map[string]gopter.Gen) {
	gens["DnsConfig"] = gen.PtrOf(DnsConfig_STATUSGenerator())
	gens["Endpoints"] = gen.SliceOf(Endpoint_STATUSGenerator())
	gens["MonitorConfig"] = gen.PtrOf(MonitorConfig_STATUSGenerator())
}

func Test_TrafficManagerProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficManagerProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficManagerProfile_STATUS, TrafficManagerProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficManagerProfile_STATUS runs a test to see if a specific instance of TrafficManagerProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficManagerProfile_STATUS(subject TrafficManagerProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficManagerProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficManagerProfile_STATUS instances for property testing - lazily instantiated by
// TrafficManagerProfile_STATUSGenerator()
var trafficManagerProfile_STATUSGenerator gopter.Gen

// TrafficManagerProfile_STATUSGenerator returns a generator of TrafficManagerProfile_STATUS instances for property testing.
// We first initialize trafficManagerProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TrafficManagerProfile_STATUSGenerator() gopter.Gen {
	if trafficManagerProfile_STATUSGenerator != nil {
		return trafficManagerProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfile_STATUS(generators)
	trafficManagerProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficManagerProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForTrafficManagerProfile_STATUS(generators)
	trafficManagerProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(TrafficManagerProfile_STATUS{}), generators)

	return trafficManagerProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTrafficManagerProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficManagerProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForTrafficManagerProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficManagerProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ProfileProperties_STATUSGenerator())
}
