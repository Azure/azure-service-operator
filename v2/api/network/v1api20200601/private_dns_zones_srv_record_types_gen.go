// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20200601

import (
	"fmt"
	v20200601s "github.com/Azure/azure-service-operator/v2/api/network/v1api20200601/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/privatedns.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/SRV/{relativeRecordSetName}
type PrivateDnsZonesSRVRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrivateDnsZones_SRV_Spec   `json:"spec,omitempty"`
	Status            PrivateDnsZones_SRV_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &PrivateDnsZonesSRVRecord{}

// GetConditions returns the conditions of the resource
func (record *PrivateDnsZonesSRVRecord) GetConditions() conditions.Conditions {
	return record.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (record *PrivateDnsZonesSRVRecord) SetConditions(conditions conditions.Conditions) {
	record.Status.Conditions = conditions
}

var _ conversion.Convertible = &PrivateDnsZonesSRVRecord{}

// ConvertFrom populates our PrivateDnsZonesSRVRecord from the provided hub PrivateDnsZonesSRVRecord
func (record *PrivateDnsZonesSRVRecord) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20200601s.PrivateDnsZonesSRVRecord)
	if !ok {
		return fmt.Errorf("expected network/v1api20200601/storage/PrivateDnsZonesSRVRecord but received %T instead", hub)
	}

	return record.AssignProperties_From_PrivateDnsZonesSRVRecord(source)
}

// ConvertTo populates the provided hub PrivateDnsZonesSRVRecord from our PrivateDnsZonesSRVRecord
func (record *PrivateDnsZonesSRVRecord) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20200601s.PrivateDnsZonesSRVRecord)
	if !ok {
		return fmt.Errorf("expected network/v1api20200601/storage/PrivateDnsZonesSRVRecord but received %T instead", hub)
	}

	return record.AssignProperties_To_PrivateDnsZonesSRVRecord(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1api20200601-privatednszonessrvrecord,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=privatednszonessrvrecords,verbs=create;update,versions=v1api20200601,name=default.v1api20200601.privatednszonessrvrecords.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &PrivateDnsZonesSRVRecord{}

// Default applies defaults to the PrivateDnsZonesSRVRecord resource
func (record *PrivateDnsZonesSRVRecord) Default() {
	record.defaultImpl()
	var temp any = record
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (record *PrivateDnsZonesSRVRecord) defaultAzureName() {
	if record.Spec.AzureName == "" {
		record.Spec.AzureName = record.Name
	}
}

// defaultImpl applies the code generated defaults to the PrivateDnsZonesSRVRecord resource
func (record *PrivateDnsZonesSRVRecord) defaultImpl() { record.defaultAzureName() }

var _ genruntime.ImportableResource = &PrivateDnsZonesSRVRecord{}

// InitializeSpec initializes the spec for this resource from the given status
func (record *PrivateDnsZonesSRVRecord) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*PrivateDnsZones_SRV_STATUS); ok {
		return record.Spec.Initialize_From_PrivateDnsZones_SRV_STATUS(s)
	}

	return fmt.Errorf("expected Status of type PrivateDnsZones_SRV_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &PrivateDnsZonesSRVRecord{}

// AzureName returns the Azure name of the resource
func (record *PrivateDnsZonesSRVRecord) AzureName() string {
	return record.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-06-01"
func (record PrivateDnsZonesSRVRecord) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (record *PrivateDnsZonesSRVRecord) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (record *PrivateDnsZonesSRVRecord) GetSpec() genruntime.ConvertibleSpec {
	return &record.Spec
}

// GetStatus returns the status of this resource
func (record *PrivateDnsZonesSRVRecord) GetStatus() genruntime.ConvertibleStatus {
	return &record.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/privateDnsZones/SRV"
func (record *PrivateDnsZonesSRVRecord) GetType() string {
	return "Microsoft.Network/privateDnsZones/SRV"
}

// NewEmptyStatus returns a new empty (blank) status
func (record *PrivateDnsZonesSRVRecord) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &PrivateDnsZones_SRV_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (record *PrivateDnsZonesSRVRecord) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(record.Spec)
	return record.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (record *PrivateDnsZonesSRVRecord) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*PrivateDnsZones_SRV_STATUS); ok {
		record.Status = *st
		return nil
	}

	// Convert status to required version
	var st PrivateDnsZones_SRV_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	record.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1api20200601-privatednszonessrvrecord,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=privatednszonessrvrecords,verbs=create;update,versions=v1api20200601,name=validate.v1api20200601.privatednszonessrvrecords.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &PrivateDnsZonesSRVRecord{}

// ValidateCreate validates the creation of the resource
func (record *PrivateDnsZonesSRVRecord) ValidateCreate() (admission.Warnings, error) {
	validations := record.createValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (record *PrivateDnsZonesSRVRecord) ValidateDelete() (admission.Warnings, error) {
	validations := record.deleteValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (record *PrivateDnsZonesSRVRecord) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := record.updateValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (record *PrivateDnsZonesSRVRecord) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){record.validateResourceReferences, record.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (record *PrivateDnsZonesSRVRecord) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (record *PrivateDnsZonesSRVRecord) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return record.validateResourceReferences()
		},
		record.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return record.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (record *PrivateDnsZonesSRVRecord) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(record)
}

// validateResourceReferences validates all resource references
func (record *PrivateDnsZonesSRVRecord) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&record.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (record *PrivateDnsZonesSRVRecord) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*PrivateDnsZonesSRVRecord)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, record)
}

// AssignProperties_From_PrivateDnsZonesSRVRecord populates our PrivateDnsZonesSRVRecord from the provided source PrivateDnsZonesSRVRecord
func (record *PrivateDnsZonesSRVRecord) AssignProperties_From_PrivateDnsZonesSRVRecord(source *v20200601s.PrivateDnsZonesSRVRecord) error {

	// ObjectMeta
	record.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec PrivateDnsZones_SRV_Spec
	err := spec.AssignProperties_From_PrivateDnsZones_SRV_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_PrivateDnsZones_SRV_Spec() to populate field Spec")
	}
	record.Spec = spec

	// Status
	var status PrivateDnsZones_SRV_STATUS
	err = status.AssignProperties_From_PrivateDnsZones_SRV_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_PrivateDnsZones_SRV_STATUS() to populate field Status")
	}
	record.Status = status

	// No error
	return nil
}

// AssignProperties_To_PrivateDnsZonesSRVRecord populates the provided destination PrivateDnsZonesSRVRecord from our PrivateDnsZonesSRVRecord
func (record *PrivateDnsZonesSRVRecord) AssignProperties_To_PrivateDnsZonesSRVRecord(destination *v20200601s.PrivateDnsZonesSRVRecord) error {

	// ObjectMeta
	destination.ObjectMeta = *record.ObjectMeta.DeepCopy()

	// Spec
	var spec v20200601s.PrivateDnsZones_SRV_Spec
	err := record.Spec.AssignProperties_To_PrivateDnsZones_SRV_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_PrivateDnsZones_SRV_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20200601s.PrivateDnsZones_SRV_STATUS
	err = record.Status.AssignProperties_To_PrivateDnsZones_SRV_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_PrivateDnsZones_SRV_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (record *PrivateDnsZonesSRVRecord) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: record.Spec.OriginalVersion(),
		Kind:    "PrivateDnsZonesSRVRecord",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/privatedns.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/SRV/{relativeRecordSetName}
type PrivateDnsZonesSRVRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateDnsZonesSRVRecord `json:"items"`
}

type PrivateDnsZones_SRV_Spec struct {
	// ARecords: The list of A records in the record set.
	ARecords []ARecord `json:"aRecords,omitempty"`

	// AaaaRecords: The list of AAAA records in the record set.
	AaaaRecords []AaaaRecord `json:"aaaaRecords,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CnameRecord: The CNAME record in the record set.
	CnameRecord *CnameRecord `json:"cnameRecord,omitempty"`

	// Etag: The ETag of the record set.
	Etag *string `json:"etag,omitempty"`

	// Metadata: The metadata attached to the record set.
	Metadata map[string]string `json:"metadata,omitempty"`

	// MxRecords: The list of MX records in the record set.
	MxRecords []MxRecord `json:"mxRecords,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/PrivateDnsZone resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"PrivateDnsZone"`

	// PtrRecords: The list of PTR records in the record set.
	PtrRecords []PtrRecord `json:"ptrRecords,omitempty"`

	// SoaRecord: The SOA record in the record set.
	SoaRecord *SoaRecord `json:"soaRecord,omitempty"`

	// SrvRecords: The list of SRV records in the record set.
	SrvRecords []SrvRecord `json:"srvRecords,omitempty"`

	// Ttl: The TTL (time-to-live) of the records in the record set.
	Ttl *int `json:"ttl,omitempty"`

	// TxtRecords: The list of TXT records in the record set.
	TxtRecords []TxtRecord `json:"txtRecords,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateDnsZones_SRV_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (zonesSRV *PrivateDnsZones_SRV_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if zonesSRV == nil {
		return nil, nil
	}
	result := &PrivateDnsZones_SRV_Spec_ARM{}

	// Set property "Etag":
	if zonesSRV.Etag != nil {
		etag := *zonesSRV.Etag
		result.Etag = &etag
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if zonesSRV.ARecords != nil ||
		zonesSRV.AaaaRecords != nil ||
		zonesSRV.CnameRecord != nil ||
		zonesSRV.Metadata != nil ||
		zonesSRV.MxRecords != nil ||
		zonesSRV.PtrRecords != nil ||
		zonesSRV.SoaRecord != nil ||
		zonesSRV.SrvRecords != nil ||
		zonesSRV.Ttl != nil ||
		zonesSRV.TxtRecords != nil {
		result.Properties = &RecordSetProperties_ARM{}
	}
	for _, item := range zonesSRV.ARecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ARecords = append(result.Properties.ARecords, *item_ARM.(*ARecord_ARM))
	}
	for _, item := range zonesSRV.AaaaRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.AaaaRecords = append(result.Properties.AaaaRecords, *item_ARM.(*AaaaRecord_ARM))
	}
	if zonesSRV.CnameRecord != nil {
		cnameRecord_ARM, err := (*zonesSRV.CnameRecord).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cnameRecord := *cnameRecord_ARM.(*CnameRecord_ARM)
		result.Properties.CnameRecord = &cnameRecord
	}
	if zonesSRV.Metadata != nil {
		result.Properties.Metadata = make(map[string]string, len(zonesSRV.Metadata))
		for key, value := range zonesSRV.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	for _, item := range zonesSRV.MxRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.MxRecords = append(result.Properties.MxRecords, *item_ARM.(*MxRecord_ARM))
	}
	for _, item := range zonesSRV.PtrRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PtrRecords = append(result.Properties.PtrRecords, *item_ARM.(*PtrRecord_ARM))
	}
	if zonesSRV.SoaRecord != nil {
		soaRecord_ARM, err := (*zonesSRV.SoaRecord).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		soaRecord := *soaRecord_ARM.(*SoaRecord_ARM)
		result.Properties.SoaRecord = &soaRecord
	}
	for _, item := range zonesSRV.SrvRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.SrvRecords = append(result.Properties.SrvRecords, *item_ARM.(*SrvRecord_ARM))
	}
	if zonesSRV.Ttl != nil {
		ttl := *zonesSRV.Ttl
		result.Properties.Ttl = &ttl
	}
	for _, item := range zonesSRV.TxtRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.TxtRecords = append(result.Properties.TxtRecords, *item_ARM.(*TxtRecord_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (zonesSRV *PrivateDnsZones_SRV_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateDnsZones_SRV_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (zonesSRV *PrivateDnsZones_SRV_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateDnsZones_SRV_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateDnsZones_SRV_Spec_ARM, got %T", armInput)
	}

	// Set property "ARecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ARecords {
			var item1 ARecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.ARecords = append(zonesSRV.ARecords, item1)
		}
	}

	// Set property "AaaaRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AaaaRecords {
			var item1 AaaaRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.AaaaRecords = append(zonesSRV.AaaaRecords, item1)
		}
	}

	// Set property "AzureName":
	zonesSRV.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "CnameRecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CnameRecord != nil {
			var cnameRecord1 CnameRecord
			err := cnameRecord1.PopulateFromARM(owner, *typedInput.Properties.CnameRecord)
			if err != nil {
				return err
			}
			cnameRecord := cnameRecord1
			zonesSRV.CnameRecord = &cnameRecord
		}
	}

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		zonesSRV.Etag = &etag
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			zonesSRV.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				zonesSRV.Metadata[key] = value
			}
		}
	}

	// Set property "MxRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.MxRecords {
			var item1 MxRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.MxRecords = append(zonesSRV.MxRecords, item1)
		}
	}

	// Set property "Owner":
	zonesSRV.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "PtrRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PtrRecords {
			var item1 PtrRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.PtrRecords = append(zonesSRV.PtrRecords, item1)
		}
	}

	// Set property "SoaRecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SoaRecord != nil {
			var soaRecord1 SoaRecord
			err := soaRecord1.PopulateFromARM(owner, *typedInput.Properties.SoaRecord)
			if err != nil {
				return err
			}
			soaRecord := soaRecord1
			zonesSRV.SoaRecord = &soaRecord
		}
	}

	// Set property "SrvRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SrvRecords {
			var item1 SrvRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.SrvRecords = append(zonesSRV.SrvRecords, item1)
		}
	}

	// Set property "Ttl":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Ttl != nil {
			ttl := *typedInput.Properties.Ttl
			zonesSRV.Ttl = &ttl
		}
	}

	// Set property "TxtRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TxtRecords {
			var item1 TxtRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.TxtRecords = append(zonesSRV.TxtRecords, item1)
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &PrivateDnsZones_SRV_Spec{}

// ConvertSpecFrom populates our PrivateDnsZones_SRV_Spec from the provided source
func (zonesSRV *PrivateDnsZones_SRV_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20200601s.PrivateDnsZones_SRV_Spec)
	if ok {
		// Populate our instance from source
		return zonesSRV.AssignProperties_From_PrivateDnsZones_SRV_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.PrivateDnsZones_SRV_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = zonesSRV.AssignProperties_From_PrivateDnsZones_SRV_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our PrivateDnsZones_SRV_Spec
func (zonesSRV *PrivateDnsZones_SRV_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20200601s.PrivateDnsZones_SRV_Spec)
	if ok {
		// Populate destination from our instance
		return zonesSRV.AssignProperties_To_PrivateDnsZones_SRV_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.PrivateDnsZones_SRV_Spec{}
	err := zonesSRV.AssignProperties_To_PrivateDnsZones_SRV_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_PrivateDnsZones_SRV_Spec populates our PrivateDnsZones_SRV_Spec from the provided source PrivateDnsZones_SRV_Spec
func (zonesSRV *PrivateDnsZones_SRV_Spec) AssignProperties_From_PrivateDnsZones_SRV_Spec(source *v20200601s.PrivateDnsZones_SRV_Spec) error {

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord
			err := aRecord.AssignProperties_From_ARecord(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ARecord() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		zonesSRV.ARecords = aRecordList
	} else {
		zonesSRV.ARecords = nil
	}

	// AaaaRecords
	if source.AaaaRecords != nil {
		aaaaRecordList := make([]AaaaRecord, len(source.AaaaRecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AaaaRecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord
			err := aaaaRecord.AssignProperties_From_AaaaRecord(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AaaaRecord() to populate field AaaaRecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		zonesSRV.AaaaRecords = aaaaRecordList
	} else {
		zonesSRV.AaaaRecords = nil
	}

	// AzureName
	zonesSRV.AzureName = source.AzureName

	// CnameRecord
	if source.CnameRecord != nil {
		var cnameRecord CnameRecord
		err := cnameRecord.AssignProperties_From_CnameRecord(source.CnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CnameRecord() to populate field CnameRecord")
		}
		zonesSRV.CnameRecord = &cnameRecord
	} else {
		zonesSRV.CnameRecord = nil
	}

	// Etag
	zonesSRV.Etag = genruntime.ClonePointerToString(source.Etag)

	// Metadata
	zonesSRV.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// MxRecords
	if source.MxRecords != nil {
		mxRecordList := make([]MxRecord, len(source.MxRecords))
		for mxRecordIndex, mxRecordItem := range source.MxRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord
			err := mxRecord.AssignProperties_From_MxRecord(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_MxRecord() to populate field MxRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		zonesSRV.MxRecords = mxRecordList
	} else {
		zonesSRV.MxRecords = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		zonesSRV.Owner = &owner
	} else {
		zonesSRV.Owner = nil
	}

	// PtrRecords
	if source.PtrRecords != nil {
		ptrRecordList := make([]PtrRecord, len(source.PtrRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PtrRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord
			err := ptrRecord.AssignProperties_From_PtrRecord(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PtrRecord() to populate field PtrRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		zonesSRV.PtrRecords = ptrRecordList
	} else {
		zonesSRV.PtrRecords = nil
	}

	// SoaRecord
	if source.SoaRecord != nil {
		var soaRecord SoaRecord
		err := soaRecord.AssignProperties_From_SoaRecord(source.SoaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SoaRecord() to populate field SoaRecord")
		}
		zonesSRV.SoaRecord = &soaRecord
	} else {
		zonesSRV.SoaRecord = nil
	}

	// SrvRecords
	if source.SrvRecords != nil {
		srvRecordList := make([]SrvRecord, len(source.SrvRecords))
		for srvRecordIndex, srvRecordItem := range source.SrvRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord
			err := srvRecord.AssignProperties_From_SrvRecord(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SrvRecord() to populate field SrvRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		zonesSRV.SrvRecords = srvRecordList
	} else {
		zonesSRV.SrvRecords = nil
	}

	// Ttl
	zonesSRV.Ttl = genruntime.ClonePointerToInt(source.Ttl)

	// TxtRecords
	if source.TxtRecords != nil {
		txtRecordList := make([]TxtRecord, len(source.TxtRecords))
		for txtRecordIndex, txtRecordItem := range source.TxtRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord
			err := txtRecord.AssignProperties_From_TxtRecord(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TxtRecord() to populate field TxtRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		zonesSRV.TxtRecords = txtRecordList
	} else {
		zonesSRV.TxtRecords = nil
	}

	// No error
	return nil
}

// AssignProperties_To_PrivateDnsZones_SRV_Spec populates the provided destination PrivateDnsZones_SRV_Spec from our PrivateDnsZones_SRV_Spec
func (zonesSRV *PrivateDnsZones_SRV_Spec) AssignProperties_To_PrivateDnsZones_SRV_Spec(destination *v20200601s.PrivateDnsZones_SRV_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ARecords
	if zonesSRV.ARecords != nil {
		aRecordList := make([]v20200601s.ARecord, len(zonesSRV.ARecords))
		for aRecordIndex, aRecordItem := range zonesSRV.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord v20200601s.ARecord
			err := aRecordItem.AssignProperties_To_ARecord(&aRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ARecord() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		destination.ARecords = aRecordList
	} else {
		destination.ARecords = nil
	}

	// AaaaRecords
	if zonesSRV.AaaaRecords != nil {
		aaaaRecordList := make([]v20200601s.AaaaRecord, len(zonesSRV.AaaaRecords))
		for aaaaRecordIndex, aaaaRecordItem := range zonesSRV.AaaaRecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord v20200601s.AaaaRecord
			err := aaaaRecordItem.AssignProperties_To_AaaaRecord(&aaaaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AaaaRecord() to populate field AaaaRecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		destination.AaaaRecords = aaaaRecordList
	} else {
		destination.AaaaRecords = nil
	}

	// AzureName
	destination.AzureName = zonesSRV.AzureName

	// CnameRecord
	if zonesSRV.CnameRecord != nil {
		var cnameRecord v20200601s.CnameRecord
		err := zonesSRV.CnameRecord.AssignProperties_To_CnameRecord(&cnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CnameRecord() to populate field CnameRecord")
		}
		destination.CnameRecord = &cnameRecord
	} else {
		destination.CnameRecord = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(zonesSRV.Etag)

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(zonesSRV.Metadata)

	// MxRecords
	if zonesSRV.MxRecords != nil {
		mxRecordList := make([]v20200601s.MxRecord, len(zonesSRV.MxRecords))
		for mxRecordIndex, mxRecordItem := range zonesSRV.MxRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord v20200601s.MxRecord
			err := mxRecordItem.AssignProperties_To_MxRecord(&mxRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_MxRecord() to populate field MxRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		destination.MxRecords = mxRecordList
	} else {
		destination.MxRecords = nil
	}

	// OriginalVersion
	destination.OriginalVersion = zonesSRV.OriginalVersion()

	// Owner
	if zonesSRV.Owner != nil {
		owner := zonesSRV.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PtrRecords
	if zonesSRV.PtrRecords != nil {
		ptrRecordList := make([]v20200601s.PtrRecord, len(zonesSRV.PtrRecords))
		for ptrRecordIndex, ptrRecordItem := range zonesSRV.PtrRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord v20200601s.PtrRecord
			err := ptrRecordItem.AssignProperties_To_PtrRecord(&ptrRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PtrRecord() to populate field PtrRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		destination.PtrRecords = ptrRecordList
	} else {
		destination.PtrRecords = nil
	}

	// SoaRecord
	if zonesSRV.SoaRecord != nil {
		var soaRecord v20200601s.SoaRecord
		err := zonesSRV.SoaRecord.AssignProperties_To_SoaRecord(&soaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SoaRecord() to populate field SoaRecord")
		}
		destination.SoaRecord = &soaRecord
	} else {
		destination.SoaRecord = nil
	}

	// SrvRecords
	if zonesSRV.SrvRecords != nil {
		srvRecordList := make([]v20200601s.SrvRecord, len(zonesSRV.SrvRecords))
		for srvRecordIndex, srvRecordItem := range zonesSRV.SrvRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord v20200601s.SrvRecord
			err := srvRecordItem.AssignProperties_To_SrvRecord(&srvRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SrvRecord() to populate field SrvRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		destination.SrvRecords = srvRecordList
	} else {
		destination.SrvRecords = nil
	}

	// Ttl
	destination.Ttl = genruntime.ClonePointerToInt(zonesSRV.Ttl)

	// TxtRecords
	if zonesSRV.TxtRecords != nil {
		txtRecordList := make([]v20200601s.TxtRecord, len(zonesSRV.TxtRecords))
		for txtRecordIndex, txtRecordItem := range zonesSRV.TxtRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord v20200601s.TxtRecord
			err := txtRecordItem.AssignProperties_To_TxtRecord(&txtRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TxtRecord() to populate field TxtRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		destination.TxtRecords = txtRecordList
	} else {
		destination.TxtRecords = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_PrivateDnsZones_SRV_STATUS populates our PrivateDnsZones_SRV_Spec from the provided source PrivateDnsZones_SRV_STATUS
func (zonesSRV *PrivateDnsZones_SRV_Spec) Initialize_From_PrivateDnsZones_SRV_STATUS(source *PrivateDnsZones_SRV_STATUS) error {

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord
			err := aRecord.Initialize_From_ARecord_STATUS(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		zonesSRV.ARecords = aRecordList
	} else {
		zonesSRV.ARecords = nil
	}

	// AaaaRecords
	if source.AaaaRecords != nil {
		aaaaRecordList := make([]AaaaRecord, len(source.AaaaRecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AaaaRecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord
			err := aaaaRecord.Initialize_From_AaaaRecord_STATUS(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_AaaaRecord_STATUS() to populate field AaaaRecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		zonesSRV.AaaaRecords = aaaaRecordList
	} else {
		zonesSRV.AaaaRecords = nil
	}

	// CnameRecord
	if source.CnameRecord != nil {
		var cnameRecord CnameRecord
		err := cnameRecord.Initialize_From_CnameRecord_STATUS(source.CnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_CnameRecord_STATUS() to populate field CnameRecord")
		}
		zonesSRV.CnameRecord = &cnameRecord
	} else {
		zonesSRV.CnameRecord = nil
	}

	// Etag
	zonesSRV.Etag = genruntime.ClonePointerToString(source.Etag)

	// Metadata
	zonesSRV.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// MxRecords
	if source.MxRecords != nil {
		mxRecordList := make([]MxRecord, len(source.MxRecords))
		for mxRecordIndex, mxRecordItem := range source.MxRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord
			err := mxRecord.Initialize_From_MxRecord_STATUS(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_MxRecord_STATUS() to populate field MxRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		zonesSRV.MxRecords = mxRecordList
	} else {
		zonesSRV.MxRecords = nil
	}

	// PtrRecords
	if source.PtrRecords != nil {
		ptrRecordList := make([]PtrRecord, len(source.PtrRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PtrRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord
			err := ptrRecord.Initialize_From_PtrRecord_STATUS(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_PtrRecord_STATUS() to populate field PtrRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		zonesSRV.PtrRecords = ptrRecordList
	} else {
		zonesSRV.PtrRecords = nil
	}

	// SoaRecord
	if source.SoaRecord != nil {
		var soaRecord SoaRecord
		err := soaRecord.Initialize_From_SoaRecord_STATUS(source.SoaRecord)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SoaRecord_STATUS() to populate field SoaRecord")
		}
		zonesSRV.SoaRecord = &soaRecord
	} else {
		zonesSRV.SoaRecord = nil
	}

	// SrvRecords
	if source.SrvRecords != nil {
		srvRecordList := make([]SrvRecord, len(source.SrvRecords))
		for srvRecordIndex, srvRecordItem := range source.SrvRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord
			err := srvRecord.Initialize_From_SrvRecord_STATUS(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_SrvRecord_STATUS() to populate field SrvRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		zonesSRV.SrvRecords = srvRecordList
	} else {
		zonesSRV.SrvRecords = nil
	}

	// Ttl
	zonesSRV.Ttl = genruntime.ClonePointerToInt(source.Ttl)

	// TxtRecords
	if source.TxtRecords != nil {
		txtRecordList := make([]TxtRecord, len(source.TxtRecords))
		for txtRecordIndex, txtRecordItem := range source.TxtRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord
			err := txtRecord.Initialize_From_TxtRecord_STATUS(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_TxtRecord_STATUS() to populate field TxtRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		zonesSRV.TxtRecords = txtRecordList
	} else {
		zonesSRV.TxtRecords = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (zonesSRV *PrivateDnsZones_SRV_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (zonesSRV *PrivateDnsZones_SRV_Spec) SetAzureName(azureName string) {
	zonesSRV.AzureName = azureName
}

type PrivateDnsZones_SRV_STATUS struct {
	// ARecords: The list of A records in the record set.
	ARecords []ARecord_STATUS `json:"aRecords,omitempty"`

	// AaaaRecords: The list of AAAA records in the record set.
	AaaaRecords []AaaaRecord_STATUS `json:"aaaaRecords,omitempty"`

	// CnameRecord: The CNAME record in the record set.
	CnameRecord *CnameRecord_STATUS `json:"cnameRecord,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Etag: The ETag of the record set.
	Etag *string `json:"etag,omitempty"`

	// Fqdn: Fully qualified domain name of the record set.
	Fqdn *string `json:"fqdn,omitempty"`

	// Id: Fully qualified resource Id for the resource. Example -
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateDnsZoneName}'.
	Id *string `json:"id,omitempty"`

	// IsAutoRegistered: Is the record set auto-registered in the Private DNS zone through a virtual network link?
	IsAutoRegistered *bool `json:"isAutoRegistered,omitempty"`

	// Metadata: The metadata attached to the record set.
	Metadata map[string]string `json:"metadata,omitempty"`

	// MxRecords: The list of MX records in the record set.
	MxRecords []MxRecord_STATUS `json:"mxRecords,omitempty"`

	// Name: The name of the record set.
	Name *string `json:"name,omitempty"`

	// PtrRecords: The list of PTR records in the record set.
	PtrRecords []PtrRecord_STATUS `json:"ptrRecords,omitempty"`

	// SoaRecord: The SOA record in the record set.
	SoaRecord *SoaRecord_STATUS `json:"soaRecord,omitempty"`

	// SrvRecords: The list of SRV records in the record set.
	SrvRecords []SrvRecord_STATUS `json:"srvRecords,omitempty"`

	// Ttl: The TTL (time-to-live) of the records in the record set.
	Ttl *int `json:"ttl,omitempty"`

	// TxtRecords: The list of TXT records in the record set.
	TxtRecords []TxtRecord_STATUS `json:"txtRecords,omitempty"`

	// Type: The type of the resource. Example - 'Microsoft.Network/privateDnsZones'.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &PrivateDnsZones_SRV_STATUS{}

// ConvertStatusFrom populates our PrivateDnsZones_SRV_STATUS from the provided source
func (zonesSRV *PrivateDnsZones_SRV_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20200601s.PrivateDnsZones_SRV_STATUS)
	if ok {
		// Populate our instance from source
		return zonesSRV.AssignProperties_From_PrivateDnsZones_SRV_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20200601s.PrivateDnsZones_SRV_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = zonesSRV.AssignProperties_From_PrivateDnsZones_SRV_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our PrivateDnsZones_SRV_STATUS
func (zonesSRV *PrivateDnsZones_SRV_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20200601s.PrivateDnsZones_SRV_STATUS)
	if ok {
		// Populate destination from our instance
		return zonesSRV.AssignProperties_To_PrivateDnsZones_SRV_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20200601s.PrivateDnsZones_SRV_STATUS{}
	err := zonesSRV.AssignProperties_To_PrivateDnsZones_SRV_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &PrivateDnsZones_SRV_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (zonesSRV *PrivateDnsZones_SRV_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateDnsZones_SRV_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (zonesSRV *PrivateDnsZones_SRV_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateDnsZones_SRV_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateDnsZones_SRV_STATUS_ARM, got %T", armInput)
	}

	// Set property "ARecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ARecords {
			var item1 ARecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.ARecords = append(zonesSRV.ARecords, item1)
		}
	}

	// Set property "AaaaRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AaaaRecords {
			var item1 AaaaRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.AaaaRecords = append(zonesSRV.AaaaRecords, item1)
		}
	}

	// Set property "CnameRecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CnameRecord != nil {
			var cnameRecord1 CnameRecord_STATUS
			err := cnameRecord1.PopulateFromARM(owner, *typedInput.Properties.CnameRecord)
			if err != nil {
				return err
			}
			cnameRecord := cnameRecord1
			zonesSRV.CnameRecord = &cnameRecord
		}
	}

	// no assignment for property "Conditions"

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		zonesSRV.Etag = &etag
	}

	// Set property "Fqdn":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Fqdn != nil {
			fqdn := *typedInput.Properties.Fqdn
			zonesSRV.Fqdn = &fqdn
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		zonesSRV.Id = &id
	}

	// Set property "IsAutoRegistered":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsAutoRegistered != nil {
			isAutoRegistered := *typedInput.Properties.IsAutoRegistered
			zonesSRV.IsAutoRegistered = &isAutoRegistered
		}
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			zonesSRV.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				zonesSRV.Metadata[key] = value
			}
		}
	}

	// Set property "MxRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.MxRecords {
			var item1 MxRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.MxRecords = append(zonesSRV.MxRecords, item1)
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		zonesSRV.Name = &name
	}

	// Set property "PtrRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PtrRecords {
			var item1 PtrRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.PtrRecords = append(zonesSRV.PtrRecords, item1)
		}
	}

	// Set property "SoaRecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SoaRecord != nil {
			var soaRecord1 SoaRecord_STATUS
			err := soaRecord1.PopulateFromARM(owner, *typedInput.Properties.SoaRecord)
			if err != nil {
				return err
			}
			soaRecord := soaRecord1
			zonesSRV.SoaRecord = &soaRecord
		}
	}

	// Set property "SrvRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SrvRecords {
			var item1 SrvRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.SrvRecords = append(zonesSRV.SrvRecords, item1)
		}
	}

	// Set property "Ttl":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Ttl != nil {
			ttl := *typedInput.Properties.Ttl
			zonesSRV.Ttl = &ttl
		}
	}

	// Set property "TxtRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TxtRecords {
			var item1 TxtRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesSRV.TxtRecords = append(zonesSRV.TxtRecords, item1)
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		zonesSRV.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_PrivateDnsZones_SRV_STATUS populates our PrivateDnsZones_SRV_STATUS from the provided source PrivateDnsZones_SRV_STATUS
func (zonesSRV *PrivateDnsZones_SRV_STATUS) AssignProperties_From_PrivateDnsZones_SRV_STATUS(source *v20200601s.PrivateDnsZones_SRV_STATUS) error {

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord_STATUS, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord_STATUS
			err := aRecord.AssignProperties_From_ARecord_STATUS(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		zonesSRV.ARecords = aRecordList
	} else {
		zonesSRV.ARecords = nil
	}

	// AaaaRecords
	if source.AaaaRecords != nil {
		aaaaRecordList := make([]AaaaRecord_STATUS, len(source.AaaaRecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AaaaRecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord_STATUS
			err := aaaaRecord.AssignProperties_From_AaaaRecord_STATUS(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AaaaRecord_STATUS() to populate field AaaaRecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		zonesSRV.AaaaRecords = aaaaRecordList
	} else {
		zonesSRV.AaaaRecords = nil
	}

	// CnameRecord
	if source.CnameRecord != nil {
		var cnameRecord CnameRecord_STATUS
		err := cnameRecord.AssignProperties_From_CnameRecord_STATUS(source.CnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CnameRecord_STATUS() to populate field CnameRecord")
		}
		zonesSRV.CnameRecord = &cnameRecord
	} else {
		zonesSRV.CnameRecord = nil
	}

	// Conditions
	zonesSRV.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Etag
	zonesSRV.Etag = genruntime.ClonePointerToString(source.Etag)

	// Fqdn
	zonesSRV.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// Id
	zonesSRV.Id = genruntime.ClonePointerToString(source.Id)

	// IsAutoRegistered
	if source.IsAutoRegistered != nil {
		isAutoRegistered := *source.IsAutoRegistered
		zonesSRV.IsAutoRegistered = &isAutoRegistered
	} else {
		zonesSRV.IsAutoRegistered = nil
	}

	// Metadata
	zonesSRV.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// MxRecords
	if source.MxRecords != nil {
		mxRecordList := make([]MxRecord_STATUS, len(source.MxRecords))
		for mxRecordIndex, mxRecordItem := range source.MxRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord_STATUS
			err := mxRecord.AssignProperties_From_MxRecord_STATUS(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_MxRecord_STATUS() to populate field MxRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		zonesSRV.MxRecords = mxRecordList
	} else {
		zonesSRV.MxRecords = nil
	}

	// Name
	zonesSRV.Name = genruntime.ClonePointerToString(source.Name)

	// PtrRecords
	if source.PtrRecords != nil {
		ptrRecordList := make([]PtrRecord_STATUS, len(source.PtrRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PtrRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord_STATUS
			err := ptrRecord.AssignProperties_From_PtrRecord_STATUS(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PtrRecord_STATUS() to populate field PtrRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		zonesSRV.PtrRecords = ptrRecordList
	} else {
		zonesSRV.PtrRecords = nil
	}

	// SoaRecord
	if source.SoaRecord != nil {
		var soaRecord SoaRecord_STATUS
		err := soaRecord.AssignProperties_From_SoaRecord_STATUS(source.SoaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SoaRecord_STATUS() to populate field SoaRecord")
		}
		zonesSRV.SoaRecord = &soaRecord
	} else {
		zonesSRV.SoaRecord = nil
	}

	// SrvRecords
	if source.SrvRecords != nil {
		srvRecordList := make([]SrvRecord_STATUS, len(source.SrvRecords))
		for srvRecordIndex, srvRecordItem := range source.SrvRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord_STATUS
			err := srvRecord.AssignProperties_From_SrvRecord_STATUS(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SrvRecord_STATUS() to populate field SrvRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		zonesSRV.SrvRecords = srvRecordList
	} else {
		zonesSRV.SrvRecords = nil
	}

	// Ttl
	zonesSRV.Ttl = genruntime.ClonePointerToInt(source.Ttl)

	// TxtRecords
	if source.TxtRecords != nil {
		txtRecordList := make([]TxtRecord_STATUS, len(source.TxtRecords))
		for txtRecordIndex, txtRecordItem := range source.TxtRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord_STATUS
			err := txtRecord.AssignProperties_From_TxtRecord_STATUS(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TxtRecord_STATUS() to populate field TxtRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		zonesSRV.TxtRecords = txtRecordList
	} else {
		zonesSRV.TxtRecords = nil
	}

	// Type
	zonesSRV.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_PrivateDnsZones_SRV_STATUS populates the provided destination PrivateDnsZones_SRV_STATUS from our PrivateDnsZones_SRV_STATUS
func (zonesSRV *PrivateDnsZones_SRV_STATUS) AssignProperties_To_PrivateDnsZones_SRV_STATUS(destination *v20200601s.PrivateDnsZones_SRV_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ARecords
	if zonesSRV.ARecords != nil {
		aRecordList := make([]v20200601s.ARecord_STATUS, len(zonesSRV.ARecords))
		for aRecordIndex, aRecordItem := range zonesSRV.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord v20200601s.ARecord_STATUS
			err := aRecordItem.AssignProperties_To_ARecord_STATUS(&aRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		destination.ARecords = aRecordList
	} else {
		destination.ARecords = nil
	}

	// AaaaRecords
	if zonesSRV.AaaaRecords != nil {
		aaaaRecordList := make([]v20200601s.AaaaRecord_STATUS, len(zonesSRV.AaaaRecords))
		for aaaaRecordIndex, aaaaRecordItem := range zonesSRV.AaaaRecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord v20200601s.AaaaRecord_STATUS
			err := aaaaRecordItem.AssignProperties_To_AaaaRecord_STATUS(&aaaaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AaaaRecord_STATUS() to populate field AaaaRecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		destination.AaaaRecords = aaaaRecordList
	} else {
		destination.AaaaRecords = nil
	}

	// CnameRecord
	if zonesSRV.CnameRecord != nil {
		var cnameRecord v20200601s.CnameRecord_STATUS
		err := zonesSRV.CnameRecord.AssignProperties_To_CnameRecord_STATUS(&cnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CnameRecord_STATUS() to populate field CnameRecord")
		}
		destination.CnameRecord = &cnameRecord
	} else {
		destination.CnameRecord = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(zonesSRV.Conditions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(zonesSRV.Etag)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(zonesSRV.Fqdn)

	// Id
	destination.Id = genruntime.ClonePointerToString(zonesSRV.Id)

	// IsAutoRegistered
	if zonesSRV.IsAutoRegistered != nil {
		isAutoRegistered := *zonesSRV.IsAutoRegistered
		destination.IsAutoRegistered = &isAutoRegistered
	} else {
		destination.IsAutoRegistered = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(zonesSRV.Metadata)

	// MxRecords
	if zonesSRV.MxRecords != nil {
		mxRecordList := make([]v20200601s.MxRecord_STATUS, len(zonesSRV.MxRecords))
		for mxRecordIndex, mxRecordItem := range zonesSRV.MxRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord v20200601s.MxRecord_STATUS
			err := mxRecordItem.AssignProperties_To_MxRecord_STATUS(&mxRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_MxRecord_STATUS() to populate field MxRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		destination.MxRecords = mxRecordList
	} else {
		destination.MxRecords = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(zonesSRV.Name)

	// PtrRecords
	if zonesSRV.PtrRecords != nil {
		ptrRecordList := make([]v20200601s.PtrRecord_STATUS, len(zonesSRV.PtrRecords))
		for ptrRecordIndex, ptrRecordItem := range zonesSRV.PtrRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord v20200601s.PtrRecord_STATUS
			err := ptrRecordItem.AssignProperties_To_PtrRecord_STATUS(&ptrRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PtrRecord_STATUS() to populate field PtrRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		destination.PtrRecords = ptrRecordList
	} else {
		destination.PtrRecords = nil
	}

	// SoaRecord
	if zonesSRV.SoaRecord != nil {
		var soaRecord v20200601s.SoaRecord_STATUS
		err := zonesSRV.SoaRecord.AssignProperties_To_SoaRecord_STATUS(&soaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SoaRecord_STATUS() to populate field SoaRecord")
		}
		destination.SoaRecord = &soaRecord
	} else {
		destination.SoaRecord = nil
	}

	// SrvRecords
	if zonesSRV.SrvRecords != nil {
		srvRecordList := make([]v20200601s.SrvRecord_STATUS, len(zonesSRV.SrvRecords))
		for srvRecordIndex, srvRecordItem := range zonesSRV.SrvRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord v20200601s.SrvRecord_STATUS
			err := srvRecordItem.AssignProperties_To_SrvRecord_STATUS(&srvRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SrvRecord_STATUS() to populate field SrvRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		destination.SrvRecords = srvRecordList
	} else {
		destination.SrvRecords = nil
	}

	// Ttl
	destination.Ttl = genruntime.ClonePointerToInt(zonesSRV.Ttl)

	// TxtRecords
	if zonesSRV.TxtRecords != nil {
		txtRecordList := make([]v20200601s.TxtRecord_STATUS, len(zonesSRV.TxtRecords))
		for txtRecordIndex, txtRecordItem := range zonesSRV.TxtRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord v20200601s.TxtRecord_STATUS
			err := txtRecordItem.AssignProperties_To_TxtRecord_STATUS(&txtRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TxtRecord_STATUS() to populate field TxtRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		destination.TxtRecords = txtRecordList
	} else {
		destination.TxtRecords = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(zonesSRV.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&PrivateDnsZonesSRVRecord{}, &PrivateDnsZonesSRVRecordList{})
}
