// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20241001

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/network/v1api20241001/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlowLogFormatParameters_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FlowLogFormatParameters to FlowLogFormatParameters via AssignProperties_To_FlowLogFormatParameters & AssignProperties_From_FlowLogFormatParameters returns original",
		prop.ForAll(RunPropertyAssignmentTestForFlowLogFormatParameters, FlowLogFormatParametersGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFlowLogFormatParameters tests if a specific instance of FlowLogFormatParameters can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForFlowLogFormatParameters(subject FlowLogFormatParameters) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.FlowLogFormatParameters
	err := copied.AssignProperties_To_FlowLogFormatParameters(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FlowLogFormatParameters
	err = actual.AssignProperties_From_FlowLogFormatParameters(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FlowLogFormatParameters_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogFormatParameters via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogFormatParameters, FlowLogFormatParametersGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogFormatParameters runs a test to see if a specific instance of FlowLogFormatParameters round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogFormatParameters(subject FlowLogFormatParameters) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogFormatParameters
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogFormatParameters instances for property testing - lazily instantiated by
// FlowLogFormatParametersGenerator()
var flowLogFormatParametersGenerator gopter.Gen

// FlowLogFormatParametersGenerator returns a generator of FlowLogFormatParameters instances for property testing.
func FlowLogFormatParametersGenerator() gopter.Gen {
	if flowLogFormatParametersGenerator != nil {
		return flowLogFormatParametersGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogFormatParameters(generators)
	flowLogFormatParametersGenerator = gen.Struct(reflect.TypeOf(FlowLogFormatParameters{}), generators)

	return flowLogFormatParametersGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogFormatParameters is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogFormatParameters(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(FlowLogFormatParameters_Type_JSON))
	gens["Version"] = gen.PtrOf(gen.Int())
}

func Test_FlowLogFormatParameters_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FlowLogFormatParameters_STATUS to FlowLogFormatParameters_STATUS via AssignProperties_To_FlowLogFormatParameters_STATUS & AssignProperties_From_FlowLogFormatParameters_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForFlowLogFormatParameters_STATUS, FlowLogFormatParameters_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFlowLogFormatParameters_STATUS tests if a specific instance of FlowLogFormatParameters_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForFlowLogFormatParameters_STATUS(subject FlowLogFormatParameters_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.FlowLogFormatParameters_STATUS
	err := copied.AssignProperties_To_FlowLogFormatParameters_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FlowLogFormatParameters_STATUS
	err = actual.AssignProperties_From_FlowLogFormatParameters_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FlowLogFormatParameters_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlowLogFormatParameters_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlowLogFormatParameters_STATUS, FlowLogFormatParameters_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlowLogFormatParameters_STATUS runs a test to see if a specific instance of FlowLogFormatParameters_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFlowLogFormatParameters_STATUS(subject FlowLogFormatParameters_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlowLogFormatParameters_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlowLogFormatParameters_STATUS instances for property testing - lazily instantiated by
// FlowLogFormatParameters_STATUSGenerator()
var flowLogFormatParameters_STATUSGenerator gopter.Gen

// FlowLogFormatParameters_STATUSGenerator returns a generator of FlowLogFormatParameters_STATUS instances for property testing.
func FlowLogFormatParameters_STATUSGenerator() gopter.Gen {
	if flowLogFormatParameters_STATUSGenerator != nil {
		return flowLogFormatParameters_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUS(generators)
	flowLogFormatParameters_STATUSGenerator = gen.Struct(reflect.TypeOf(FlowLogFormatParameters_STATUS{}), generators)

	return flowLogFormatParameters_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlowLogFormatParameters_STATUS(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(FlowLogFormatParameters_Type_STATUS_JSON))
	gens["Version"] = gen.PtrOf(gen.Int())
}

func Test_ManagedServiceIdentity_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedServiceIdentity to ManagedServiceIdentity via AssignProperties_To_ManagedServiceIdentity & AssignProperties_From_ManagedServiceIdentity returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedServiceIdentity, ManagedServiceIdentityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedServiceIdentity tests if a specific instance of ManagedServiceIdentity can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForManagedServiceIdentity(subject ManagedServiceIdentity) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ManagedServiceIdentity
	err := copied.AssignProperties_To_ManagedServiceIdentity(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedServiceIdentity
	err = actual.AssignProperties_From_ManagedServiceIdentity(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedServiceIdentity_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity, ManagedServiceIdentityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity runs a test to see if a specific instance of ManagedServiceIdentity round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity(subject ManagedServiceIdentity) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity instances for property testing - lazily instantiated by
// ManagedServiceIdentityGenerator()
var managedServiceIdentityGenerator gopter.Gen

// ManagedServiceIdentityGenerator returns a generator of ManagedServiceIdentity instances for property testing.
// We first initialize managedServiceIdentityGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentityGenerator() gopter.Gen {
	if managedServiceIdentityGenerator != nil {
		return managedServiceIdentityGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity(generators)
	managedServiceIdentityGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity(generators)
	managedServiceIdentityGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity{}), generators)

	return managedServiceIdentityGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_None,
		ManagedServiceIdentity_Type_SystemAssigned,
		ManagedServiceIdentity_Type_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(UserAssignedIdentityDetailsGenerator())
}

func Test_ManagedServiceIdentity_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedServiceIdentity_STATUS to ManagedServiceIdentity_STATUS via AssignProperties_To_ManagedServiceIdentity_STATUS & AssignProperties_From_ManagedServiceIdentity_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedServiceIdentity_STATUS, ManagedServiceIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedServiceIdentity_STATUS tests if a specific instance of ManagedServiceIdentity_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForManagedServiceIdentity_STATUS(subject ManagedServiceIdentity_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ManagedServiceIdentity_STATUS
	err := copied.AssignProperties_To_ManagedServiceIdentity_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedServiceIdentity_STATUS
	err = actual.AssignProperties_From_ManagedServiceIdentity_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedServiceIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS, ManagedServiceIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS runs a test to see if a specific instance of ManagedServiceIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS(subject ManagedServiceIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUSGenerator()
var managedServiceIdentity_STATUSGenerator gopter.Gen

// ManagedServiceIdentity_STATUSGenerator returns a generator of ManagedServiceIdentity_STATUS instances for property testing.
// We first initialize managedServiceIdentity_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUSGenerator() gopter.Gen {
	if managedServiceIdentity_STATUSGenerator != nil {
		return managedServiceIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	return managedServiceIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_STATUS_None,
		ManagedServiceIdentity_Type_STATUS_SystemAssigned,
		ManagedServiceIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		ManagedServiceIdentity_UserAssignedIdentities_STATUSGenerator())
}

func Test_ManagedServiceIdentity_UserAssignedIdentities_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedServiceIdentity_UserAssignedIdentities_STATUS to ManagedServiceIdentity_UserAssignedIdentities_STATUS via AssignProperties_To_ManagedServiceIdentity_UserAssignedIdentities_STATUS & AssignProperties_From_ManagedServiceIdentity_UserAssignedIdentities_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedServiceIdentity_UserAssignedIdentities_STATUS, ManagedServiceIdentity_UserAssignedIdentities_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedServiceIdentity_UserAssignedIdentities_STATUS tests if a specific instance of ManagedServiceIdentity_UserAssignedIdentities_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForManagedServiceIdentity_UserAssignedIdentities_STATUS(subject ManagedServiceIdentity_UserAssignedIdentities_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ManagedServiceIdentity_UserAssignedIdentities_STATUS
	err := copied.AssignProperties_To_ManagedServiceIdentity_UserAssignedIdentities_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedServiceIdentity_UserAssignedIdentities_STATUS
	err = actual.AssignProperties_From_ManagedServiceIdentity_UserAssignedIdentities_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedServiceIdentity_UserAssignedIdentities_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_UserAssignedIdentities_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS, ManagedServiceIdentity_UserAssignedIdentities_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS runs a test to see if a specific instance of ManagedServiceIdentity_UserAssignedIdentities_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS(subject ManagedServiceIdentity_UserAssignedIdentities_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_UserAssignedIdentities_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_UserAssignedIdentities_STATUS instances for property testing - lazily
// instantiated by ManagedServiceIdentity_UserAssignedIdentities_STATUSGenerator()
var managedServiceIdentity_UserAssignedIdentities_STATUSGenerator gopter.Gen

// ManagedServiceIdentity_UserAssignedIdentities_STATUSGenerator returns a generator of ManagedServiceIdentity_UserAssignedIdentities_STATUS instances for property testing.
func ManagedServiceIdentity_UserAssignedIdentities_STATUSGenerator() gopter.Gen {
	if managedServiceIdentity_UserAssignedIdentities_STATUSGenerator != nil {
		return managedServiceIdentity_UserAssignedIdentities_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS(generators)
	managedServiceIdentity_UserAssignedIdentities_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_UserAssignedIdentities_STATUS{}), generators)

	return managedServiceIdentity_UserAssignedIdentities_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkWatchersFlowLog_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NetworkWatchersFlowLog to hub returns original",
		prop.ForAll(RunResourceConversionTestForNetworkWatchersFlowLog, NetworkWatchersFlowLogGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForNetworkWatchersFlowLog tests if a specific instance of NetworkWatchersFlowLog round trips to the hub storage version and back losslessly
func RunResourceConversionTestForNetworkWatchersFlowLog(subject NetworkWatchersFlowLog) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.NetworkWatchersFlowLog
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual NetworkWatchersFlowLog
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NetworkWatchersFlowLog_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NetworkWatchersFlowLog to NetworkWatchersFlowLog via AssignProperties_To_NetworkWatchersFlowLog & AssignProperties_From_NetworkWatchersFlowLog returns original",
		prop.ForAll(RunPropertyAssignmentTestForNetworkWatchersFlowLog, NetworkWatchersFlowLogGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNetworkWatchersFlowLog tests if a specific instance of NetworkWatchersFlowLog can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNetworkWatchersFlowLog(subject NetworkWatchersFlowLog) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NetworkWatchersFlowLog
	err := copied.AssignProperties_To_NetworkWatchersFlowLog(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NetworkWatchersFlowLog
	err = actual.AssignProperties_From_NetworkWatchersFlowLog(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NetworkWatchersFlowLog_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkWatchersFlowLog via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkWatchersFlowLog, NetworkWatchersFlowLogGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkWatchersFlowLog runs a test to see if a specific instance of NetworkWatchersFlowLog round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkWatchersFlowLog(subject NetworkWatchersFlowLog) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkWatchersFlowLog
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkWatchersFlowLog instances for property testing - lazily instantiated by
// NetworkWatchersFlowLogGenerator()
var networkWatchersFlowLogGenerator gopter.Gen

// NetworkWatchersFlowLogGenerator returns a generator of NetworkWatchersFlowLog instances for property testing.
func NetworkWatchersFlowLogGenerator() gopter.Gen {
	if networkWatchersFlowLogGenerator != nil {
		return networkWatchersFlowLogGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog(generators)
	networkWatchersFlowLogGenerator = gen.Struct(reflect.TypeOf(NetworkWatchersFlowLog{}), generators)

	return networkWatchersFlowLogGenerator
}

// AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog(gens map[string]gopter.Gen) {
	gens["Spec"] = NetworkWatchersFlowLog_SpecGenerator()
	gens["Status"] = NetworkWatchersFlowLog_STATUSGenerator()
}

func Test_NetworkWatchersFlowLogOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NetworkWatchersFlowLogOperatorSpec to NetworkWatchersFlowLogOperatorSpec via AssignProperties_To_NetworkWatchersFlowLogOperatorSpec & AssignProperties_From_NetworkWatchersFlowLogOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForNetworkWatchersFlowLogOperatorSpec, NetworkWatchersFlowLogOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNetworkWatchersFlowLogOperatorSpec tests if a specific instance of NetworkWatchersFlowLogOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNetworkWatchersFlowLogOperatorSpec(subject NetworkWatchersFlowLogOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NetworkWatchersFlowLogOperatorSpec
	err := copied.AssignProperties_To_NetworkWatchersFlowLogOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NetworkWatchersFlowLogOperatorSpec
	err = actual.AssignProperties_From_NetworkWatchersFlowLogOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NetworkWatchersFlowLogOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkWatchersFlowLogOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkWatchersFlowLogOperatorSpec, NetworkWatchersFlowLogOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkWatchersFlowLogOperatorSpec runs a test to see if a specific instance of NetworkWatchersFlowLogOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkWatchersFlowLogOperatorSpec(subject NetworkWatchersFlowLogOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkWatchersFlowLogOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkWatchersFlowLogOperatorSpec instances for property testing - lazily instantiated by
// NetworkWatchersFlowLogOperatorSpecGenerator()
var networkWatchersFlowLogOperatorSpecGenerator gopter.Gen

// NetworkWatchersFlowLogOperatorSpecGenerator returns a generator of NetworkWatchersFlowLogOperatorSpec instances for property testing.
func NetworkWatchersFlowLogOperatorSpecGenerator() gopter.Gen {
	if networkWatchersFlowLogOperatorSpecGenerator != nil {
		return networkWatchersFlowLogOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	networkWatchersFlowLogOperatorSpecGenerator = gen.Struct(reflect.TypeOf(NetworkWatchersFlowLogOperatorSpec{}), generators)

	return networkWatchersFlowLogOperatorSpecGenerator
}

func Test_NetworkWatchersFlowLog_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NetworkWatchersFlowLog_STATUS to NetworkWatchersFlowLog_STATUS via AssignProperties_To_NetworkWatchersFlowLog_STATUS & AssignProperties_From_NetworkWatchersFlowLog_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForNetworkWatchersFlowLog_STATUS, NetworkWatchersFlowLog_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNetworkWatchersFlowLog_STATUS tests if a specific instance of NetworkWatchersFlowLog_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNetworkWatchersFlowLog_STATUS(subject NetworkWatchersFlowLog_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NetworkWatchersFlowLog_STATUS
	err := copied.AssignProperties_To_NetworkWatchersFlowLog_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NetworkWatchersFlowLog_STATUS
	err = actual.AssignProperties_From_NetworkWatchersFlowLog_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NetworkWatchersFlowLog_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkWatchersFlowLog_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkWatchersFlowLog_STATUS, NetworkWatchersFlowLog_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkWatchersFlowLog_STATUS runs a test to see if a specific instance of NetworkWatchersFlowLog_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkWatchersFlowLog_STATUS(subject NetworkWatchersFlowLog_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkWatchersFlowLog_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkWatchersFlowLog_STATUS instances for property testing - lazily instantiated by
// NetworkWatchersFlowLog_STATUSGenerator()
var networkWatchersFlowLog_STATUSGenerator gopter.Gen

// NetworkWatchersFlowLog_STATUSGenerator returns a generator of NetworkWatchersFlowLog_STATUS instances for property testing.
// We first initialize networkWatchersFlowLog_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkWatchersFlowLog_STATUSGenerator() gopter.Gen {
	if networkWatchersFlowLog_STATUSGenerator != nil {
		return networkWatchersFlowLog_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_STATUS(generators)
	networkWatchersFlowLog_STATUSGenerator = gen.Struct(reflect.TypeOf(NetworkWatchersFlowLog_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_STATUS(generators)
	AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog_STATUS(generators)
	networkWatchersFlowLog_STATUSGenerator = gen.Struct(reflect.TypeOf(NetworkWatchersFlowLog_STATUS{}), generators)

	return networkWatchersFlowLog_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_STATUS(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["EnabledFilteringCriteria"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ApplicationGatewayProvisioningState_STATUS_Deleting,
		ApplicationGatewayProvisioningState_STATUS_Failed,
		ApplicationGatewayProvisioningState_STATUS_Succeeded,
		ApplicationGatewayProvisioningState_STATUS_Updating))
	gens["StorageId"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["TargetResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog_STATUS(gens map[string]gopter.Gen) {
	gens["FlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsProperties_STATUSGenerator())
	gens["Format"] = gen.PtrOf(FlowLogFormatParameters_STATUSGenerator())
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSGenerator())
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicyParameters_STATUSGenerator())
}

func Test_NetworkWatchersFlowLog_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from NetworkWatchersFlowLog_Spec to NetworkWatchersFlowLog_Spec via AssignProperties_To_NetworkWatchersFlowLog_Spec & AssignProperties_From_NetworkWatchersFlowLog_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForNetworkWatchersFlowLog_Spec, NetworkWatchersFlowLog_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNetworkWatchersFlowLog_Spec tests if a specific instance of NetworkWatchersFlowLog_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForNetworkWatchersFlowLog_Spec(subject NetworkWatchersFlowLog_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.NetworkWatchersFlowLog_Spec
	err := copied.AssignProperties_To_NetworkWatchersFlowLog_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual NetworkWatchersFlowLog_Spec
	err = actual.AssignProperties_From_NetworkWatchersFlowLog_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_NetworkWatchersFlowLog_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkWatchersFlowLog_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkWatchersFlowLog_Spec, NetworkWatchersFlowLog_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkWatchersFlowLog_Spec runs a test to see if a specific instance of NetworkWatchersFlowLog_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkWatchersFlowLog_Spec(subject NetworkWatchersFlowLog_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkWatchersFlowLog_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkWatchersFlowLog_Spec instances for property testing - lazily instantiated by
// NetworkWatchersFlowLog_SpecGenerator()
var networkWatchersFlowLog_SpecGenerator gopter.Gen

// NetworkWatchersFlowLog_SpecGenerator returns a generator of NetworkWatchersFlowLog_Spec instances for property testing.
// We first initialize networkWatchersFlowLog_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkWatchersFlowLog_SpecGenerator() gopter.Gen {
	if networkWatchersFlowLog_SpecGenerator != nil {
		return networkWatchersFlowLog_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_Spec(generators)
	networkWatchersFlowLog_SpecGenerator = gen.Struct(reflect.TypeOf(NetworkWatchersFlowLog_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_Spec(generators)
	AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog_Spec(generators)
	networkWatchersFlowLog_SpecGenerator = gen.Struct(reflect.TypeOf(NetworkWatchersFlowLog_Spec{}), generators)

	return networkWatchersFlowLog_SpecGenerator
}

// AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkWatchersFlowLog_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["EnabledFilteringCriteria"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkWatchersFlowLog_Spec(gens map[string]gopter.Gen) {
	gens["FlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsPropertiesGenerator())
	gens["Format"] = gen.PtrOf(FlowLogFormatParametersGenerator())
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentityGenerator())
	gens["OperatorSpec"] = gen.PtrOf(NetworkWatchersFlowLogOperatorSpecGenerator())
	gens["RetentionPolicy"] = gen.PtrOf(RetentionPolicyParametersGenerator())
}

func Test_RetentionPolicyParameters_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RetentionPolicyParameters to RetentionPolicyParameters via AssignProperties_To_RetentionPolicyParameters & AssignProperties_From_RetentionPolicyParameters returns original",
		prop.ForAll(RunPropertyAssignmentTestForRetentionPolicyParameters, RetentionPolicyParametersGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRetentionPolicyParameters tests if a specific instance of RetentionPolicyParameters can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRetentionPolicyParameters(subject RetentionPolicyParameters) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RetentionPolicyParameters
	err := copied.AssignProperties_To_RetentionPolicyParameters(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RetentionPolicyParameters
	err = actual.AssignProperties_From_RetentionPolicyParameters(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RetentionPolicyParameters_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionPolicyParameters via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionPolicyParameters, RetentionPolicyParametersGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionPolicyParameters runs a test to see if a specific instance of RetentionPolicyParameters round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionPolicyParameters(subject RetentionPolicyParameters) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionPolicyParameters
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionPolicyParameters instances for property testing - lazily instantiated by
// RetentionPolicyParametersGenerator()
var retentionPolicyParametersGenerator gopter.Gen

// RetentionPolicyParametersGenerator returns a generator of RetentionPolicyParameters instances for property testing.
func RetentionPolicyParametersGenerator() gopter.Gen {
	if retentionPolicyParametersGenerator != nil {
		return retentionPolicyParametersGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionPolicyParameters(generators)
	retentionPolicyParametersGenerator = gen.Struct(reflect.TypeOf(RetentionPolicyParameters{}), generators)

	return retentionPolicyParametersGenerator
}

// AddIndependentPropertyGeneratorsForRetentionPolicyParameters is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionPolicyParameters(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_RetentionPolicyParameters_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RetentionPolicyParameters_STATUS to RetentionPolicyParameters_STATUS via AssignProperties_To_RetentionPolicyParameters_STATUS & AssignProperties_From_RetentionPolicyParameters_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForRetentionPolicyParameters_STATUS, RetentionPolicyParameters_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRetentionPolicyParameters_STATUS tests if a specific instance of RetentionPolicyParameters_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRetentionPolicyParameters_STATUS(subject RetentionPolicyParameters_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RetentionPolicyParameters_STATUS
	err := copied.AssignProperties_To_RetentionPolicyParameters_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RetentionPolicyParameters_STATUS
	err = actual.AssignProperties_From_RetentionPolicyParameters_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RetentionPolicyParameters_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionPolicyParameters_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionPolicyParameters_STATUS, RetentionPolicyParameters_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionPolicyParameters_STATUS runs a test to see if a specific instance of RetentionPolicyParameters_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionPolicyParameters_STATUS(subject RetentionPolicyParameters_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionPolicyParameters_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionPolicyParameters_STATUS instances for property testing - lazily instantiated by
// RetentionPolicyParameters_STATUSGenerator()
var retentionPolicyParameters_STATUSGenerator gopter.Gen

// RetentionPolicyParameters_STATUSGenerator returns a generator of RetentionPolicyParameters_STATUS instances for property testing.
func RetentionPolicyParameters_STATUSGenerator() gopter.Gen {
	if retentionPolicyParameters_STATUSGenerator != nil {
		return retentionPolicyParameters_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUS(generators)
	retentionPolicyParameters_STATUSGenerator = gen.Struct(reflect.TypeOf(RetentionPolicyParameters_STATUS{}), generators)

	return retentionPolicyParameters_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionPolicyParameters_STATUS(gens map[string]gopter.Gen) {
	gens["Days"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_TrafficAnalyticsConfigurationProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficAnalyticsConfigurationProperties to TrafficAnalyticsConfigurationProperties via AssignProperties_To_TrafficAnalyticsConfigurationProperties & AssignProperties_From_TrafficAnalyticsConfigurationProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficAnalyticsConfigurationProperties, TrafficAnalyticsConfigurationPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficAnalyticsConfigurationProperties tests if a specific instance of TrafficAnalyticsConfigurationProperties can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficAnalyticsConfigurationProperties(subject TrafficAnalyticsConfigurationProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficAnalyticsConfigurationProperties
	err := copied.AssignProperties_To_TrafficAnalyticsConfigurationProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficAnalyticsConfigurationProperties
	err = actual.AssignProperties_From_TrafficAnalyticsConfigurationProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficAnalyticsConfigurationProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsConfigurationProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties, TrafficAnalyticsConfigurationPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties runs a test to see if a specific instance of TrafficAnalyticsConfigurationProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties(subject TrafficAnalyticsConfigurationProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsConfigurationProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsConfigurationProperties instances for property testing - lazily instantiated by
// TrafficAnalyticsConfigurationPropertiesGenerator()
var trafficAnalyticsConfigurationPropertiesGenerator gopter.Gen

// TrafficAnalyticsConfigurationPropertiesGenerator returns a generator of TrafficAnalyticsConfigurationProperties instances for property testing.
func TrafficAnalyticsConfigurationPropertiesGenerator() gopter.Gen {
	if trafficAnalyticsConfigurationPropertiesGenerator != nil {
		return trafficAnalyticsConfigurationPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties(generators)
	trafficAnalyticsConfigurationPropertiesGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsConfigurationProperties{}), generators)

	return trafficAnalyticsConfigurationPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["TrafficAnalyticsInterval"] = gen.PtrOf(gen.Int())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceRegion"] = gen.PtrOf(gen.AlphaString())
}

func Test_TrafficAnalyticsConfigurationProperties_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficAnalyticsConfigurationProperties_STATUS to TrafficAnalyticsConfigurationProperties_STATUS via AssignProperties_To_TrafficAnalyticsConfigurationProperties_STATUS & AssignProperties_From_TrafficAnalyticsConfigurationProperties_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficAnalyticsConfigurationProperties_STATUS, TrafficAnalyticsConfigurationProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficAnalyticsConfigurationProperties_STATUS tests if a specific instance of TrafficAnalyticsConfigurationProperties_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficAnalyticsConfigurationProperties_STATUS(subject TrafficAnalyticsConfigurationProperties_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficAnalyticsConfigurationProperties_STATUS
	err := copied.AssignProperties_To_TrafficAnalyticsConfigurationProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficAnalyticsConfigurationProperties_STATUS
	err = actual.AssignProperties_From_TrafficAnalyticsConfigurationProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficAnalyticsConfigurationProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsConfigurationProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUS, TrafficAnalyticsConfigurationProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUS runs a test to see if a specific instance of TrafficAnalyticsConfigurationProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsConfigurationProperties_STATUS(subject TrafficAnalyticsConfigurationProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsConfigurationProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsConfigurationProperties_STATUS instances for property testing - lazily instantiated by
// TrafficAnalyticsConfigurationProperties_STATUSGenerator()
var trafficAnalyticsConfigurationProperties_STATUSGenerator gopter.Gen

// TrafficAnalyticsConfigurationProperties_STATUSGenerator returns a generator of TrafficAnalyticsConfigurationProperties_STATUS instances for property testing.
func TrafficAnalyticsConfigurationProperties_STATUSGenerator() gopter.Gen {
	if trafficAnalyticsConfigurationProperties_STATUSGenerator != nil {
		return trafficAnalyticsConfigurationProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUS(generators)
	trafficAnalyticsConfigurationProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsConfigurationProperties_STATUS{}), generators)

	return trafficAnalyticsConfigurationProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrafficAnalyticsConfigurationProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["TrafficAnalyticsInterval"] = gen.PtrOf(gen.Int())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceRegion"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_TrafficAnalyticsProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficAnalyticsProperties to TrafficAnalyticsProperties via AssignProperties_To_TrafficAnalyticsProperties & AssignProperties_From_TrafficAnalyticsProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficAnalyticsProperties, TrafficAnalyticsPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficAnalyticsProperties tests if a specific instance of TrafficAnalyticsProperties can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficAnalyticsProperties(subject TrafficAnalyticsProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficAnalyticsProperties
	err := copied.AssignProperties_To_TrafficAnalyticsProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficAnalyticsProperties
	err = actual.AssignProperties_From_TrafficAnalyticsProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficAnalyticsProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsProperties, TrafficAnalyticsPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsProperties runs a test to see if a specific instance of TrafficAnalyticsProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsProperties(subject TrafficAnalyticsProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsProperties instances for property testing - lazily instantiated by
// TrafficAnalyticsPropertiesGenerator()
var trafficAnalyticsPropertiesGenerator gopter.Gen

// TrafficAnalyticsPropertiesGenerator returns a generator of TrafficAnalyticsProperties instances for property testing.
func TrafficAnalyticsPropertiesGenerator() gopter.Gen {
	if trafficAnalyticsPropertiesGenerator != nil {
		return trafficAnalyticsPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties(generators)
	trafficAnalyticsPropertiesGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsProperties{}), generators)

	return trafficAnalyticsPropertiesGenerator
}

// AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties(gens map[string]gopter.Gen) {
	gens["NetworkWatcherFlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsConfigurationPropertiesGenerator())
}

func Test_TrafficAnalyticsProperties_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from TrafficAnalyticsProperties_STATUS to TrafficAnalyticsProperties_STATUS via AssignProperties_To_TrafficAnalyticsProperties_STATUS & AssignProperties_From_TrafficAnalyticsProperties_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForTrafficAnalyticsProperties_STATUS, TrafficAnalyticsProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForTrafficAnalyticsProperties_STATUS tests if a specific instance of TrafficAnalyticsProperties_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForTrafficAnalyticsProperties_STATUS(subject TrafficAnalyticsProperties_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.TrafficAnalyticsProperties_STATUS
	err := copied.AssignProperties_To_TrafficAnalyticsProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual TrafficAnalyticsProperties_STATUS
	err = actual.AssignProperties_From_TrafficAnalyticsProperties_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_TrafficAnalyticsProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrafficAnalyticsProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrafficAnalyticsProperties_STATUS, TrafficAnalyticsProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrafficAnalyticsProperties_STATUS runs a test to see if a specific instance of TrafficAnalyticsProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForTrafficAnalyticsProperties_STATUS(subject TrafficAnalyticsProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrafficAnalyticsProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrafficAnalyticsProperties_STATUS instances for property testing - lazily instantiated by
// TrafficAnalyticsProperties_STATUSGenerator()
var trafficAnalyticsProperties_STATUSGenerator gopter.Gen

// TrafficAnalyticsProperties_STATUSGenerator returns a generator of TrafficAnalyticsProperties_STATUS instances for property testing.
func TrafficAnalyticsProperties_STATUSGenerator() gopter.Gen {
	if trafficAnalyticsProperties_STATUSGenerator != nil {
		return trafficAnalyticsProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUS(generators)
	trafficAnalyticsProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(TrafficAnalyticsProperties_STATUS{}), generators)

	return trafficAnalyticsProperties_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTrafficAnalyticsProperties_STATUS(gens map[string]gopter.Gen) {
	gens["NetworkWatcherFlowAnalyticsConfiguration"] = gen.PtrOf(TrafficAnalyticsConfigurationProperties_STATUSGenerator())
}

func Test_UserAssignedIdentityDetails_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from UserAssignedIdentityDetails to UserAssignedIdentityDetails via AssignProperties_To_UserAssignedIdentityDetails & AssignProperties_From_UserAssignedIdentityDetails returns original",
		prop.ForAll(RunPropertyAssignmentTestForUserAssignedIdentityDetails, UserAssignedIdentityDetailsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForUserAssignedIdentityDetails tests if a specific instance of UserAssignedIdentityDetails can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForUserAssignedIdentityDetails(subject UserAssignedIdentityDetails) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.UserAssignedIdentityDetails
	err := copied.AssignProperties_To_UserAssignedIdentityDetails(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual UserAssignedIdentityDetails
	err = actual.AssignProperties_From_UserAssignedIdentityDetails(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_UserAssignedIdentityDetails_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityDetails via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityDetails, UserAssignedIdentityDetailsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityDetails runs a test to see if a specific instance of UserAssignedIdentityDetails round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityDetails(subject UserAssignedIdentityDetails) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityDetails
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityDetails instances for property testing - lazily instantiated by
// UserAssignedIdentityDetailsGenerator()
var userAssignedIdentityDetailsGenerator gopter.Gen

// UserAssignedIdentityDetailsGenerator returns a generator of UserAssignedIdentityDetails instances for property testing.
func UserAssignedIdentityDetailsGenerator() gopter.Gen {
	if userAssignedIdentityDetailsGenerator != nil {
		return userAssignedIdentityDetailsGenerator
	}

	generators := make(map[string]gopter.Gen)
	userAssignedIdentityDetailsGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityDetails{}), generators)

	return userAssignedIdentityDetailsGenerator
}
