// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20241001

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/network/v1api20241001/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/network/v1api20241001/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,network}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /network/resource-manager/Microsoft.Network/stable/2024-10-01/networkWatcher.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}
type NetworkWatcher struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkWatcher_Spec   `json:"spec,omitempty"`
	Status            NetworkWatcher_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NetworkWatcher{}

// GetConditions returns the conditions of the resource
func (watcher *NetworkWatcher) GetConditions() conditions.Conditions {
	return watcher.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (watcher *NetworkWatcher) SetConditions(conditions conditions.Conditions) {
	watcher.Status.Conditions = conditions
}

var _ conversion.Convertible = &NetworkWatcher{}

// ConvertFrom populates our NetworkWatcher from the provided hub NetworkWatcher
func (watcher *NetworkWatcher) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.NetworkWatcher)
	if !ok {
		return fmt.Errorf("expected network/v1api20241001/storage/NetworkWatcher but received %T instead", hub)
	}

	return watcher.AssignProperties_From_NetworkWatcher(source)
}

// ConvertTo populates the provided hub NetworkWatcher from our NetworkWatcher
func (watcher *NetworkWatcher) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.NetworkWatcher)
	if !ok {
		return fmt.Errorf("expected network/v1api20241001/storage/NetworkWatcher but received %T instead", hub)
	}

	return watcher.AssignProperties_To_NetworkWatcher(destination)
}

var _ configmaps.Exporter = &NetworkWatcher{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (watcher *NetworkWatcher) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if watcher.Spec.OperatorSpec == nil {
		return nil
	}
	return watcher.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &NetworkWatcher{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (watcher *NetworkWatcher) SecretDestinationExpressions() []*core.DestinationExpression {
	if watcher.Spec.OperatorSpec == nil {
		return nil
	}
	return watcher.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &NetworkWatcher{}

// InitializeSpec initializes the spec for this resource from the given status
func (watcher *NetworkWatcher) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*NetworkWatcher_STATUS); ok {
		return watcher.Spec.Initialize_From_NetworkWatcher_STATUS(s)
	}

	return fmt.Errorf("expected Status of type NetworkWatcher_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &NetworkWatcher{}

// AzureName returns the Azure name of the resource
func (watcher *NetworkWatcher) AzureName() string {
	return watcher.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-10-01"
func (watcher NetworkWatcher) GetAPIVersion() string {
	return "2024-10-01"
}

// GetResourceScope returns the scope of the resource
func (watcher *NetworkWatcher) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (watcher *NetworkWatcher) GetSpec() genruntime.ConvertibleSpec {
	return &watcher.Spec
}

// GetStatus returns the status of this resource
func (watcher *NetworkWatcher) GetStatus() genruntime.ConvertibleStatus {
	return &watcher.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (watcher *NetworkWatcher) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/networkWatchers"
func (watcher *NetworkWatcher) GetType() string {
	return "Microsoft.Network/networkWatchers"
}

// NewEmptyStatus returns a new empty (blank) status
func (watcher *NetworkWatcher) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &NetworkWatcher_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (watcher *NetworkWatcher) Owner() *genruntime.ResourceReference {
	if watcher.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(watcher.Spec)
	return watcher.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (watcher *NetworkWatcher) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*NetworkWatcher_STATUS); ok {
		watcher.Status = *st
		return nil
	}

	// Convert status to required version
	var st NetworkWatcher_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	watcher.Status = st
	return nil
}

// AssignProperties_From_NetworkWatcher populates our NetworkWatcher from the provided source NetworkWatcher
func (watcher *NetworkWatcher) AssignProperties_From_NetworkWatcher(source *storage.NetworkWatcher) error {

	// ObjectMeta
	watcher.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec NetworkWatcher_Spec
	err := spec.AssignProperties_From_NetworkWatcher_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_NetworkWatcher_Spec() to populate field Spec")
	}
	watcher.Spec = spec

	// Status
	var status NetworkWatcher_STATUS
	err = status.AssignProperties_From_NetworkWatcher_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_NetworkWatcher_STATUS() to populate field Status")
	}
	watcher.Status = status

	// No error
	return nil
}

// AssignProperties_To_NetworkWatcher populates the provided destination NetworkWatcher from our NetworkWatcher
func (watcher *NetworkWatcher) AssignProperties_To_NetworkWatcher(destination *storage.NetworkWatcher) error {

	// ObjectMeta
	destination.ObjectMeta = *watcher.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.NetworkWatcher_Spec
	err := watcher.Spec.AssignProperties_To_NetworkWatcher_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_NetworkWatcher_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.NetworkWatcher_STATUS
	err = watcher.Status.AssignProperties_To_NetworkWatcher_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_NetworkWatcher_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (watcher *NetworkWatcher) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: watcher.Spec.OriginalVersion(),
		Kind:    "NetworkWatcher",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /network/resource-manager/Microsoft.Network/stable/2024-10-01/networkWatcher.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}
type NetworkWatcherList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkWatcher `json:"items"`
}

// +kubebuilder:validation:Enum={"2024-10-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2024-10-01")

type NetworkWatcher_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *NetworkWatcherOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkWatcher_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (watcher *NetworkWatcher_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if watcher == nil {
		return nil, nil
	}
	result := &arm.NetworkWatcher_Spec{}

	// Set property "Location":
	if watcher.Location != nil {
		location := *watcher.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Tags":
	if watcher.Tags != nil {
		result.Tags = make(map[string]string, len(watcher.Tags))
		for key, value := range watcher.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (watcher *NetworkWatcher_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.NetworkWatcher_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (watcher *NetworkWatcher_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.NetworkWatcher_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.NetworkWatcher_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	watcher.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		watcher.Location = &location
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	watcher.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		watcher.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			watcher.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NetworkWatcher_Spec{}

// ConvertSpecFrom populates our NetworkWatcher_Spec from the provided source
func (watcher *NetworkWatcher_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.NetworkWatcher_Spec)
	if ok {
		// Populate our instance from source
		return watcher.AssignProperties_From_NetworkWatcher_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.NetworkWatcher_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = watcher.AssignProperties_From_NetworkWatcher_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NetworkWatcher_Spec
func (watcher *NetworkWatcher_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.NetworkWatcher_Spec)
	if ok {
		// Populate destination from our instance
		return watcher.AssignProperties_To_NetworkWatcher_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.NetworkWatcher_Spec{}
	err := watcher.AssignProperties_To_NetworkWatcher_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_NetworkWatcher_Spec populates our NetworkWatcher_Spec from the provided source NetworkWatcher_Spec
func (watcher *NetworkWatcher_Spec) AssignProperties_From_NetworkWatcher_Spec(source *storage.NetworkWatcher_Spec) error {

	// AzureName
	watcher.AzureName = source.AzureName

	// Location
	watcher.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec NetworkWatcherOperatorSpec
		err := operatorSpec.AssignProperties_From_NetworkWatcherOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_NetworkWatcherOperatorSpec() to populate field OperatorSpec")
		}
		watcher.OperatorSpec = &operatorSpec
	} else {
		watcher.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		watcher.Owner = &owner
	} else {
		watcher.Owner = nil
	}

	// Tags
	watcher.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_NetworkWatcher_Spec populates the provided destination NetworkWatcher_Spec from our NetworkWatcher_Spec
func (watcher *NetworkWatcher_Spec) AssignProperties_To_NetworkWatcher_Spec(destination *storage.NetworkWatcher_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = watcher.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(watcher.Location)

	// OperatorSpec
	if watcher.OperatorSpec != nil {
		var operatorSpec storage.NetworkWatcherOperatorSpec
		err := watcher.OperatorSpec.AssignProperties_To_NetworkWatcherOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_NetworkWatcherOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = watcher.OriginalVersion()

	// Owner
	if watcher.Owner != nil {
		owner := watcher.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(watcher.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_NetworkWatcher_STATUS populates our NetworkWatcher_Spec from the provided source NetworkWatcher_STATUS
func (watcher *NetworkWatcher_Spec) Initialize_From_NetworkWatcher_STATUS(source *NetworkWatcher_STATUS) error {

	// Location
	watcher.Location = genruntime.ClonePointerToString(source.Location)

	// Tags
	watcher.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (watcher *NetworkWatcher_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (watcher *NetworkWatcher_Spec) SetAzureName(azureName string) { watcher.AzureName = azureName }

// Network watcher in a resource group.
type NetworkWatcher_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the network watcher resource.
	ProvisioningState *NetworkWatcherProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &NetworkWatcher_STATUS{}

// ConvertStatusFrom populates our NetworkWatcher_STATUS from the provided source
func (watcher *NetworkWatcher_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.NetworkWatcher_STATUS)
	if ok {
		// Populate our instance from source
		return watcher.AssignProperties_From_NetworkWatcher_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.NetworkWatcher_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = watcher.AssignProperties_From_NetworkWatcher_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our NetworkWatcher_STATUS
func (watcher *NetworkWatcher_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.NetworkWatcher_STATUS)
	if ok {
		// Populate destination from our instance
		return watcher.AssignProperties_To_NetworkWatcher_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.NetworkWatcher_STATUS{}
	err := watcher.AssignProperties_To_NetworkWatcher_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &NetworkWatcher_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (watcher *NetworkWatcher_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.NetworkWatcher_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (watcher *NetworkWatcher_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.NetworkWatcher_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.NetworkWatcher_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		watcher.Etag = &etag
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		watcher.Id = &id
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		watcher.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		watcher.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := NetworkWatcherProvisioningState_STATUS(temp)
			watcher.ProvisioningState = &provisioningState
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		watcher.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			watcher.Tags[key] = value
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		watcher.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_NetworkWatcher_STATUS populates our NetworkWatcher_STATUS from the provided source NetworkWatcher_STATUS
func (watcher *NetworkWatcher_STATUS) AssignProperties_From_NetworkWatcher_STATUS(source *storage.NetworkWatcher_STATUS) error {

	// Conditions
	watcher.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Etag
	watcher.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	watcher.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	watcher.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	watcher.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, networkWatcherProvisioningState_STATUS_Values)
		watcher.ProvisioningState = &provisioningStateTemp
	} else {
		watcher.ProvisioningState = nil
	}

	// Tags
	watcher.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	watcher.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_NetworkWatcher_STATUS populates the provided destination NetworkWatcher_STATUS from our NetworkWatcher_STATUS
func (watcher *NetworkWatcher_STATUS) AssignProperties_To_NetworkWatcher_STATUS(destination *storage.NetworkWatcher_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(watcher.Conditions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(watcher.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(watcher.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(watcher.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(watcher.Name)

	// ProvisioningState
	if watcher.ProvisioningState != nil {
		provisioningState := string(*watcher.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(watcher.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(watcher.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type NetworkWatcherOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_NetworkWatcherOperatorSpec populates our NetworkWatcherOperatorSpec from the provided source NetworkWatcherOperatorSpec
func (operator *NetworkWatcherOperatorSpec) AssignProperties_From_NetworkWatcherOperatorSpec(source *storage.NetworkWatcherOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NetworkWatcherOperatorSpec populates the provided destination NetworkWatcherOperatorSpec from our NetworkWatcherOperatorSpec
func (operator *NetworkWatcherOperatorSpec) AssignProperties_To_NetworkWatcherOperatorSpec(destination *storage.NetworkWatcherOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The current provisioning state.
type NetworkWatcherProvisioningState_STATUS string

const (
	NetworkWatcherProvisioningState_STATUS_Deleting  = NetworkWatcherProvisioningState_STATUS("Deleting")
	NetworkWatcherProvisioningState_STATUS_Failed    = NetworkWatcherProvisioningState_STATUS("Failed")
	NetworkWatcherProvisioningState_STATUS_Succeeded = NetworkWatcherProvisioningState_STATUS("Succeeded")
	NetworkWatcherProvisioningState_STATUS_Updating  = NetworkWatcherProvisioningState_STATUS("Updating")
)

// Mapping from string to NetworkWatcherProvisioningState_STATUS
var networkWatcherProvisioningState_STATUS_Values = map[string]NetworkWatcherProvisioningState_STATUS{
	"deleting":  NetworkWatcherProvisioningState_STATUS_Deleting,
	"failed":    NetworkWatcherProvisioningState_STATUS_Failed,
	"succeeded": NetworkWatcherProvisioningState_STATUS_Succeeded,
	"updating":  NetworkWatcherProvisioningState_STATUS_Updating,
}

func init() {
	SchemeBuilder.Register(&NetworkWatcher{}, &NetworkWatcherList{})
}
