// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsZonesNSRecord_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsZonesNSRecord via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsZonesNSRecord, DnsZonesNSRecordGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsZonesNSRecord runs a test to see if a specific instance of DnsZonesNSRecord round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsZonesNSRecord(subject DnsZonesNSRecord) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsZonesNSRecord
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsZonesNSRecord instances for property testing - lazily instantiated by DnsZonesNSRecordGenerator()
var dnsZonesNSRecordGenerator gopter.Gen

// DnsZonesNSRecordGenerator returns a generator of DnsZonesNSRecord instances for property testing.
func DnsZonesNSRecordGenerator() gopter.Gen {
	if dnsZonesNSRecordGenerator != nil {
		return dnsZonesNSRecordGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDnsZonesNSRecord(generators)
	dnsZonesNSRecordGenerator = gen.Struct(reflect.TypeOf(DnsZonesNSRecord{}), generators)

	return dnsZonesNSRecordGenerator
}

// AddRelatedPropertyGeneratorsForDnsZonesNSRecord is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsZonesNSRecord(gens map[string]gopter.Gen) {
	gens["Spec"] = DnsZonesNSRecord_SpecGenerator()
	gens["Status"] = DnsZonesNSRecord_STATUSGenerator()
}

func Test_DnsZonesNSRecord_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsZonesNSRecord_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsZonesNSRecord_STATUS, DnsZonesNSRecord_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsZonesNSRecord_STATUS runs a test to see if a specific instance of DnsZonesNSRecord_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsZonesNSRecord_STATUS(subject DnsZonesNSRecord_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsZonesNSRecord_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsZonesNSRecord_STATUS instances for property testing - lazily instantiated by
// DnsZonesNSRecord_STATUSGenerator()
var dnsZonesNSRecord_STATUSGenerator gopter.Gen

// DnsZonesNSRecord_STATUSGenerator returns a generator of DnsZonesNSRecord_STATUS instances for property testing.
// We first initialize dnsZonesNSRecord_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsZonesNSRecord_STATUSGenerator() gopter.Gen {
	if dnsZonesNSRecord_STATUSGenerator != nil {
		return dnsZonesNSRecord_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsZonesNSRecord_STATUS(generators)
	dnsZonesNSRecord_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsZonesNSRecord_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsZonesNSRecord_STATUS(generators)
	AddRelatedPropertyGeneratorsForDnsZonesNSRecord_STATUS(generators)
	dnsZonesNSRecord_STATUSGenerator = gen.Struct(reflect.TypeOf(DnsZonesNSRecord_STATUS{}), generators)

	return dnsZonesNSRecord_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDnsZonesNSRecord_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsZonesNSRecord_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["TTL"] = gen.PtrOf(gen.Int())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsZonesNSRecord_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsZonesNSRecord_STATUS(gens map[string]gopter.Gen) {
	gens["AAAARecords"] = gen.SliceOf(AaaaRecord_STATUSGenerator())
	gens["ARecords"] = gen.SliceOf(ARecord_STATUSGenerator())
	gens["CNAMERecord"] = gen.PtrOf(CnameRecord_STATUSGenerator())
	gens["CaaRecords"] = gen.SliceOf(CaaRecord_STATUSGenerator())
	gens["MXRecords"] = gen.SliceOf(MxRecord_STATUSGenerator())
	gens["NSRecords"] = gen.SliceOf(NsRecord_STATUSGenerator())
	gens["PTRRecords"] = gen.SliceOf(PtrRecord_STATUSGenerator())
	gens["SOARecord"] = gen.PtrOf(SoaRecord_STATUSGenerator())
	gens["SRVRecords"] = gen.SliceOf(SrvRecord_STATUSGenerator())
	gens["TXTRecords"] = gen.SliceOf(TxtRecord_STATUSGenerator())
	gens["TargetResource"] = gen.PtrOf(SubResource_STATUSGenerator())
}

func Test_DnsZonesNSRecord_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsZonesNSRecord_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsZonesNSRecord_Spec, DnsZonesNSRecord_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsZonesNSRecord_Spec runs a test to see if a specific instance of DnsZonesNSRecord_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsZonesNSRecord_Spec(subject DnsZonesNSRecord_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsZonesNSRecord_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsZonesNSRecord_Spec instances for property testing - lazily instantiated by
// DnsZonesNSRecord_SpecGenerator()
var dnsZonesNSRecord_SpecGenerator gopter.Gen

// DnsZonesNSRecord_SpecGenerator returns a generator of DnsZonesNSRecord_Spec instances for property testing.
// We first initialize dnsZonesNSRecord_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsZonesNSRecord_SpecGenerator() gopter.Gen {
	if dnsZonesNSRecord_SpecGenerator != nil {
		return dnsZonesNSRecord_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsZonesNSRecord_Spec(generators)
	dnsZonesNSRecord_SpecGenerator = gen.Struct(reflect.TypeOf(DnsZonesNSRecord_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsZonesNSRecord_Spec(generators)
	AddRelatedPropertyGeneratorsForDnsZonesNSRecord_Spec(generators)
	dnsZonesNSRecord_SpecGenerator = gen.Struct(reflect.TypeOf(DnsZonesNSRecord_Spec{}), generators)

	return dnsZonesNSRecord_SpecGenerator
}

// AddIndependentPropertyGeneratorsForDnsZonesNSRecord_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsZonesNSRecord_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["TTL"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDnsZonesNSRecord_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsZonesNSRecord_Spec(gens map[string]gopter.Gen) {
	gens["AAAARecords"] = gen.SliceOf(AaaaRecordGenerator())
	gens["ARecords"] = gen.SliceOf(ARecordGenerator())
	gens["CNAMERecord"] = gen.PtrOf(CnameRecordGenerator())
	gens["CaaRecords"] = gen.SliceOf(CaaRecordGenerator())
	gens["MXRecords"] = gen.SliceOf(MxRecordGenerator())
	gens["NSRecords"] = gen.SliceOf(NsRecordGenerator())
	gens["PTRRecords"] = gen.SliceOf(PtrRecordGenerator())
	gens["SOARecord"] = gen.PtrOf(SoaRecordGenerator())
	gens["SRVRecords"] = gen.SliceOf(SrvRecordGenerator())
	gens["TXTRecords"] = gen.SliceOf(TxtRecordGenerator())
	gens["TargetResource"] = gen.PtrOf(SubResourceGenerator())
}
