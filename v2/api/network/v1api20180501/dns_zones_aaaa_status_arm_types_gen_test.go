// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20180501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DnsZones_AAAA_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsZones_AAAA_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsZones_AAAA_STATUS_ARM, DnsZones_AAAA_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsZones_AAAA_STATUS_ARM runs a test to see if a specific instance of DnsZones_AAAA_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsZones_AAAA_STATUS_ARM(subject DnsZones_AAAA_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsZones_AAAA_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsZones_AAAA_STATUS_ARM instances for property testing - lazily instantiated by
// DnsZones_AAAA_STATUS_ARMGenerator()
var dnsZones_AAAA_STATUS_ARMGenerator gopter.Gen

// DnsZones_AAAA_STATUS_ARMGenerator returns a generator of DnsZones_AAAA_STATUS_ARM instances for property testing.
// We first initialize dnsZones_AAAA_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DnsZones_AAAA_STATUS_ARMGenerator() gopter.Gen {
	if dnsZones_AAAA_STATUS_ARMGenerator != nil {
		return dnsZones_AAAA_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM(generators)
	dnsZones_AAAA_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DnsZones_AAAA_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM(generators)
	dnsZones_AAAA_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DnsZones_AAAA_STATUS_ARM{}), generators)

	return dnsZones_AAAA_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDnsZones_AAAA_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RecordSetProperties_STATUS_ARMGenerator())
}

func Test_RecordSetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RecordSetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRecordSetProperties_STATUS_ARM, RecordSetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRecordSetProperties_STATUS_ARM runs a test to see if a specific instance of RecordSetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRecordSetProperties_STATUS_ARM(subject RecordSetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RecordSetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RecordSetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RecordSetProperties_STATUS_ARMGenerator()
var recordSetProperties_STATUS_ARMGenerator gopter.Gen

// RecordSetProperties_STATUS_ARMGenerator returns a generator of RecordSetProperties_STATUS_ARM instances for property testing.
// We first initialize recordSetProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RecordSetProperties_STATUS_ARMGenerator() gopter.Gen {
	if recordSetProperties_STATUS_ARMGenerator != nil {
		return recordSetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRecordSetProperties_STATUS_ARM(generators)
	recordSetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RecordSetProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRecordSetProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRecordSetProperties_STATUS_ARM(generators)
	recordSetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RecordSetProperties_STATUS_ARM{}), generators)

	return recordSetProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRecordSetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRecordSetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["TTL"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForRecordSetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRecordSetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AAAARecords"] = gen.SliceOf(AaaaRecord_STATUS_ARMGenerator())
	gens["ARecords"] = gen.SliceOf(ARecord_STATUS_ARMGenerator())
	gens["CNAMERecord"] = gen.PtrOf(CnameRecord_STATUS_ARMGenerator())
	gens["CaaRecords"] = gen.SliceOf(CaaRecord_STATUS_ARMGenerator())
	gens["MXRecords"] = gen.SliceOf(MxRecord_STATUS_ARMGenerator())
	gens["NSRecords"] = gen.SliceOf(NsRecord_STATUS_ARMGenerator())
	gens["PTRRecords"] = gen.SliceOf(PtrRecord_STATUS_ARMGenerator())
	gens["SOARecord"] = gen.PtrOf(SoaRecord_STATUS_ARMGenerator())
	gens["SRVRecords"] = gen.SliceOf(SrvRecord_STATUS_ARMGenerator())
	gens["TXTRecords"] = gen.SliceOf(TxtRecord_STATUS_ARMGenerator())
	gens["TargetResource"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
}

func Test_AaaaRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AaaaRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAaaaRecord_STATUS_ARM, AaaaRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAaaaRecord_STATUS_ARM runs a test to see if a specific instance of AaaaRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAaaaRecord_STATUS_ARM(subject AaaaRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AaaaRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AaaaRecord_STATUS_ARM instances for property testing - lazily instantiated by
// AaaaRecord_STATUS_ARMGenerator()
var aaaaRecord_STATUS_ARMGenerator gopter.Gen

// AaaaRecord_STATUS_ARMGenerator returns a generator of AaaaRecord_STATUS_ARM instances for property testing.
func AaaaRecord_STATUS_ARMGenerator() gopter.Gen {
	if aaaaRecord_STATUS_ARMGenerator != nil {
		return aaaaRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAaaaRecord_STATUS_ARM(generators)
	aaaaRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AaaaRecord_STATUS_ARM{}), generators)

	return aaaaRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAaaaRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAaaaRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ipv6Address"] = gen.PtrOf(gen.AlphaString())
}

func Test_ARecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ARecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForARecord_STATUS_ARM, ARecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForARecord_STATUS_ARM runs a test to see if a specific instance of ARecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForARecord_STATUS_ARM(subject ARecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ARecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ARecord_STATUS_ARM instances for property testing - lazily instantiated by ARecord_STATUS_ARMGenerator()
var aRecord_STATUS_ARMGenerator gopter.Gen

// ARecord_STATUS_ARMGenerator returns a generator of ARecord_STATUS_ARM instances for property testing.
func ARecord_STATUS_ARMGenerator() gopter.Gen {
	if aRecord_STATUS_ARMGenerator != nil {
		return aRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForARecord_STATUS_ARM(generators)
	aRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ARecord_STATUS_ARM{}), generators)

	return aRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForARecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForARecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ipv4Address"] = gen.PtrOf(gen.AlphaString())
}

func Test_CaaRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CaaRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCaaRecord_STATUS_ARM, CaaRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCaaRecord_STATUS_ARM runs a test to see if a specific instance of CaaRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCaaRecord_STATUS_ARM(subject CaaRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CaaRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CaaRecord_STATUS_ARM instances for property testing - lazily instantiated by
// CaaRecord_STATUS_ARMGenerator()
var caaRecord_STATUS_ARMGenerator gopter.Gen

// CaaRecord_STATUS_ARMGenerator returns a generator of CaaRecord_STATUS_ARM instances for property testing.
func CaaRecord_STATUS_ARMGenerator() gopter.Gen {
	if caaRecord_STATUS_ARMGenerator != nil {
		return caaRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCaaRecord_STATUS_ARM(generators)
	caaRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CaaRecord_STATUS_ARM{}), generators)

	return caaRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCaaRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCaaRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Flags"] = gen.PtrOf(gen.Int())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_CnameRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CnameRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCnameRecord_STATUS_ARM, CnameRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCnameRecord_STATUS_ARM runs a test to see if a specific instance of CnameRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCnameRecord_STATUS_ARM(subject CnameRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CnameRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CnameRecord_STATUS_ARM instances for property testing - lazily instantiated by
// CnameRecord_STATUS_ARMGenerator()
var cnameRecord_STATUS_ARMGenerator gopter.Gen

// CnameRecord_STATUS_ARMGenerator returns a generator of CnameRecord_STATUS_ARM instances for property testing.
func CnameRecord_STATUS_ARMGenerator() gopter.Gen {
	if cnameRecord_STATUS_ARMGenerator != nil {
		return cnameRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCnameRecord_STATUS_ARM(generators)
	cnameRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CnameRecord_STATUS_ARM{}), generators)

	return cnameRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCnameRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCnameRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cname"] = gen.PtrOf(gen.AlphaString())
}

func Test_MxRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MxRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMxRecord_STATUS_ARM, MxRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMxRecord_STATUS_ARM runs a test to see if a specific instance of MxRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMxRecord_STATUS_ARM(subject MxRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MxRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MxRecord_STATUS_ARM instances for property testing - lazily instantiated by
// MxRecord_STATUS_ARMGenerator()
var mxRecord_STATUS_ARMGenerator gopter.Gen

// MxRecord_STATUS_ARMGenerator returns a generator of MxRecord_STATUS_ARM instances for property testing.
func MxRecord_STATUS_ARMGenerator() gopter.Gen {
	if mxRecord_STATUS_ARMGenerator != nil {
		return mxRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMxRecord_STATUS_ARM(generators)
	mxRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MxRecord_STATUS_ARM{}), generators)

	return mxRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMxRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMxRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Exchange"] = gen.PtrOf(gen.AlphaString())
	gens["Preference"] = gen.PtrOf(gen.Int())
}

func Test_NsRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NsRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNsRecord_STATUS_ARM, NsRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNsRecord_STATUS_ARM runs a test to see if a specific instance of NsRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNsRecord_STATUS_ARM(subject NsRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NsRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NsRecord_STATUS_ARM instances for property testing - lazily instantiated by
// NsRecord_STATUS_ARMGenerator()
var nsRecord_STATUS_ARMGenerator gopter.Gen

// NsRecord_STATUS_ARMGenerator returns a generator of NsRecord_STATUS_ARM instances for property testing.
func NsRecord_STATUS_ARMGenerator() gopter.Gen {
	if nsRecord_STATUS_ARMGenerator != nil {
		return nsRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNsRecord_STATUS_ARM(generators)
	nsRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NsRecord_STATUS_ARM{}), generators)

	return nsRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNsRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNsRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Nsdname"] = gen.PtrOf(gen.AlphaString())
}

func Test_PtrRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PtrRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPtrRecord_STATUS_ARM, PtrRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPtrRecord_STATUS_ARM runs a test to see if a specific instance of PtrRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPtrRecord_STATUS_ARM(subject PtrRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PtrRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PtrRecord_STATUS_ARM instances for property testing - lazily instantiated by
// PtrRecord_STATUS_ARMGenerator()
var ptrRecord_STATUS_ARMGenerator gopter.Gen

// PtrRecord_STATUS_ARMGenerator returns a generator of PtrRecord_STATUS_ARM instances for property testing.
func PtrRecord_STATUS_ARMGenerator() gopter.Gen {
	if ptrRecord_STATUS_ARMGenerator != nil {
		return ptrRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPtrRecord_STATUS_ARM(generators)
	ptrRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PtrRecord_STATUS_ARM{}), generators)

	return ptrRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPtrRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPtrRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ptrdname"] = gen.PtrOf(gen.AlphaString())
}

func Test_SoaRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SoaRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSoaRecord_STATUS_ARM, SoaRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSoaRecord_STATUS_ARM runs a test to see if a specific instance of SoaRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSoaRecord_STATUS_ARM(subject SoaRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SoaRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SoaRecord_STATUS_ARM instances for property testing - lazily instantiated by
// SoaRecord_STATUS_ARMGenerator()
var soaRecord_STATUS_ARMGenerator gopter.Gen

// SoaRecord_STATUS_ARMGenerator returns a generator of SoaRecord_STATUS_ARM instances for property testing.
func SoaRecord_STATUS_ARMGenerator() gopter.Gen {
	if soaRecord_STATUS_ARMGenerator != nil {
		return soaRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSoaRecord_STATUS_ARM(generators)
	soaRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SoaRecord_STATUS_ARM{}), generators)

	return soaRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSoaRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSoaRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Email"] = gen.PtrOf(gen.AlphaString())
	gens["ExpireTime"] = gen.PtrOf(gen.Int())
	gens["Host"] = gen.PtrOf(gen.AlphaString())
	gens["MinimumTTL"] = gen.PtrOf(gen.Int())
	gens["RefreshTime"] = gen.PtrOf(gen.Int())
	gens["RetryTime"] = gen.PtrOf(gen.Int())
	gens["SerialNumber"] = gen.PtrOf(gen.Int())
}

func Test_SrvRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SrvRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSrvRecord_STATUS_ARM, SrvRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSrvRecord_STATUS_ARM runs a test to see if a specific instance of SrvRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSrvRecord_STATUS_ARM(subject SrvRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SrvRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SrvRecord_STATUS_ARM instances for property testing - lazily instantiated by
// SrvRecord_STATUS_ARMGenerator()
var srvRecord_STATUS_ARMGenerator gopter.Gen

// SrvRecord_STATUS_ARMGenerator returns a generator of SrvRecord_STATUS_ARM instances for property testing.
func SrvRecord_STATUS_ARMGenerator() gopter.Gen {
	if srvRecord_STATUS_ARMGenerator != nil {
		return srvRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSrvRecord_STATUS_ARM(generators)
	srvRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SrvRecord_STATUS_ARM{}), generators)

	return srvRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSrvRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSrvRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_TxtRecord_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TxtRecord_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTxtRecord_STATUS_ARM, TxtRecord_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTxtRecord_STATUS_ARM runs a test to see if a specific instance of TxtRecord_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTxtRecord_STATUS_ARM(subject TxtRecord_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TxtRecord_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TxtRecord_STATUS_ARM instances for property testing - lazily instantiated by
// TxtRecord_STATUS_ARMGenerator()
var txtRecord_STATUS_ARMGenerator gopter.Gen

// TxtRecord_STATUS_ARMGenerator returns a generator of TxtRecord_STATUS_ARM instances for property testing.
func TxtRecord_STATUS_ARMGenerator() gopter.Gen {
	if txtRecord_STATUS_ARMGenerator != nil {
		return txtRecord_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTxtRecord_STATUS_ARM(generators)
	txtRecord_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TxtRecord_STATUS_ARM{}), generators)

	return txtRecord_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTxtRecord_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTxtRecord_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.SliceOf(gen.AlphaString())
}
