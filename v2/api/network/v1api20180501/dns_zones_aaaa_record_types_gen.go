// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20180501

import (
	"fmt"
	v20180501s "github.com/Azure/azure-service-operator/v2/api/network/v1api20180501storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /dns/resource-manager/Microsoft.Network/stable/2018-05-01/dns.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/AAAA/{relativeRecordSetName}
type DnsZonesAAAARecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsZones_AAAA_Spec   `json:"spec,omitempty"`
	Status            DnsZones_AAAA_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &DnsZonesAAAARecord{}

// GetConditions returns the conditions of the resource
func (record *DnsZonesAAAARecord) GetConditions() conditions.Conditions {
	return record.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (record *DnsZonesAAAARecord) SetConditions(conditions conditions.Conditions) {
	record.Status.Conditions = conditions
}

var _ conversion.Convertible = &DnsZonesAAAARecord{}

// ConvertFrom populates our DnsZonesAAAARecord from the provided hub DnsZonesAAAARecord
func (record *DnsZonesAAAARecord) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20180501s.DnsZonesAAAARecord)
	if !ok {
		return fmt.Errorf("expected network/v1api20180501storage/DnsZonesAAAARecord but received %T instead", hub)
	}

	return record.AssignProperties_From_DnsZonesAAAARecord(source)
}

// ConvertTo populates the provided hub DnsZonesAAAARecord from our DnsZonesAAAARecord
func (record *DnsZonesAAAARecord) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20180501s.DnsZonesAAAARecord)
	if !ok {
		return fmt.Errorf("expected network/v1api20180501storage/DnsZonesAAAARecord but received %T instead", hub)
	}

	return record.AssignProperties_To_DnsZonesAAAARecord(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1api20180501-dnszonesaaaarecord,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnszonesaaaarecords,verbs=create;update,versions=v1api20180501,name=default.v1api20180501.dnszonesaaaarecords.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &DnsZonesAAAARecord{}

// Default applies defaults to the DnsZonesAAAARecord resource
func (record *DnsZonesAAAARecord) Default() {
	record.defaultImpl()
	var temp any = record
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (record *DnsZonesAAAARecord) defaultAzureName() {
	if record.Spec.AzureName == "" {
		record.Spec.AzureName = record.Name
	}
}

// defaultImpl applies the code generated defaults to the DnsZonesAAAARecord resource
func (record *DnsZonesAAAARecord) defaultImpl() { record.defaultAzureName() }

var _ genruntime.ImportableResource = &DnsZonesAAAARecord{}

// InitializeSpec initializes the spec for this resource from the given status
func (record *DnsZonesAAAARecord) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*DnsZones_AAAA_STATUS); ok {
		return record.Spec.Initialize_From_DnsZones_AAAA_STATUS(s)
	}

	return fmt.Errorf("expected Status of type DnsZones_AAAA_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &DnsZonesAAAARecord{}

// AzureName returns the Azure name of the resource
func (record *DnsZonesAAAARecord) AzureName() string {
	return record.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-05-01"
func (record DnsZonesAAAARecord) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (record *DnsZonesAAAARecord) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (record *DnsZonesAAAARecord) GetSpec() genruntime.ConvertibleSpec {
	return &record.Spec
}

// GetStatus returns the status of this resource
func (record *DnsZonesAAAARecord) GetStatus() genruntime.ConvertibleStatus {
	return &record.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/dnsZones/AAAA"
func (record *DnsZonesAAAARecord) GetType() string {
	return "Microsoft.Network/dnsZones/AAAA"
}

// NewEmptyStatus returns a new empty (blank) status
func (record *DnsZonesAAAARecord) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DnsZones_AAAA_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (record *DnsZonesAAAARecord) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(record.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  record.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (record *DnsZonesAAAARecord) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DnsZones_AAAA_STATUS); ok {
		record.Status = *st
		return nil
	}

	// Convert status to required version
	var st DnsZones_AAAA_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	record.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1api20180501-dnszonesaaaarecord,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnszonesaaaarecords,verbs=create;update,versions=v1api20180501,name=validate.v1api20180501.dnszonesaaaarecords.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &DnsZonesAAAARecord{}

// ValidateCreate validates the creation of the resource
func (record *DnsZonesAAAARecord) ValidateCreate() (admission.Warnings, error) {
	validations := record.createValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (record *DnsZonesAAAARecord) ValidateDelete() (admission.Warnings, error) {
	validations := record.deleteValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (record *DnsZonesAAAARecord) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := record.updateValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (record *DnsZonesAAAARecord) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){record.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (record *DnsZonesAAAARecord) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (record *DnsZonesAAAARecord) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return record.validateResourceReferences()
		},
		record.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (record *DnsZonesAAAARecord) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&record.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (record *DnsZonesAAAARecord) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*DnsZonesAAAARecord)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, record)
}

// AssignProperties_From_DnsZonesAAAARecord populates our DnsZonesAAAARecord from the provided source DnsZonesAAAARecord
func (record *DnsZonesAAAARecord) AssignProperties_From_DnsZonesAAAARecord(source *v20180501s.DnsZonesAAAARecord) error {

	// ObjectMeta
	record.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DnsZones_AAAA_Spec
	err := spec.AssignProperties_From_DnsZones_AAAA_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsZones_AAAA_Spec() to populate field Spec")
	}
	record.Spec = spec

	// Status
	var status DnsZones_AAAA_STATUS
	err = status.AssignProperties_From_DnsZones_AAAA_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsZones_AAAA_STATUS() to populate field Status")
	}
	record.Status = status

	// No error
	return nil
}

// AssignProperties_To_DnsZonesAAAARecord populates the provided destination DnsZonesAAAARecord from our DnsZonesAAAARecord
func (record *DnsZonesAAAARecord) AssignProperties_To_DnsZonesAAAARecord(destination *v20180501s.DnsZonesAAAARecord) error {

	// ObjectMeta
	destination.ObjectMeta = *record.ObjectMeta.DeepCopy()

	// Spec
	var spec v20180501s.DnsZones_AAAA_Spec
	err := record.Spec.AssignProperties_To_DnsZones_AAAA_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsZones_AAAA_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20180501s.DnsZones_AAAA_STATUS
	err = record.Status.AssignProperties_To_DnsZones_AAAA_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsZones_AAAA_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (record *DnsZonesAAAARecord) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: record.Spec.OriginalVersion(),
		Kind:    "DnsZonesAAAARecord",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /dns/resource-manager/Microsoft.Network/stable/2018-05-01/dns.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/AAAA/{relativeRecordSetName}
type DnsZonesAAAARecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsZonesAAAARecord `json:"items"`
}

type DnsZones_AAAA_Spec struct {
	// AAAARecords: The list of AAAA records in the record set.
	AAAARecords []AaaaRecord `json:"AAAARecords,omitempty"`

	// ARecords: The list of A records in the record set.
	ARecords []ARecord `json:"ARecords,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CNAMERecord: The CNAME record in the  record set.
	CNAMERecord *CnameRecord `json:"CNAMERecord,omitempty"`

	// CaaRecords: The list of CAA records in the record set.
	CaaRecords []CaaRecord `json:"caaRecords,omitempty"`

	// MXRecords: The list of MX records in the record set.
	MXRecords []MxRecord `json:"MXRecords,omitempty"`

	// Metadata: The metadata attached to the record set.
	Metadata map[string]string `json:"metadata,omitempty"`

	// NSRecords: The list of NS records in the record set.
	NSRecords []NsRecord `json:"NSRecords,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/DnsZone resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"DnsZone"`

	// PTRRecords: The list of PTR records in the record set.
	PTRRecords []PtrRecord `json:"PTRRecords,omitempty"`

	// SOARecord: The SOA record in the record set.
	SOARecord *SoaRecord `json:"SOARecord,omitempty"`

	// SRVRecords: The list of SRV records in the record set.
	SRVRecords []SrvRecord `json:"SRVRecords,omitempty"`

	// TTL: The TTL (time-to-live) of the records in the record set.
	TTL *int `json:"TTL,omitempty"`

	// TXTRecords: The list of TXT records in the record set.
	TXTRecords []TxtRecord `json:"TXTRecords,omitempty"`

	// TargetResource: A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResource `json:"targetResource,omitempty"`
}

var _ genruntime.ARMTransformer = &DnsZones_AAAA_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (aaaa *DnsZones_AAAA_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if aaaa == nil {
		return nil, nil
	}
	result := &DnsZones_AAAA_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if aaaa.AAAARecords != nil ||
		aaaa.ARecords != nil ||
		aaaa.CNAMERecord != nil ||
		aaaa.CaaRecords != nil ||
		aaaa.MXRecords != nil ||
		aaaa.Metadata != nil ||
		aaaa.NSRecords != nil ||
		aaaa.PTRRecords != nil ||
		aaaa.SOARecord != nil ||
		aaaa.SRVRecords != nil ||
		aaaa.TTL != nil ||
		aaaa.TXTRecords != nil ||
		aaaa.TargetResource != nil {
		result.Properties = &RecordSetProperties_ARM{}
	}
	for _, item := range aaaa.AAAARecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.AAAARecords = append(result.Properties.AAAARecords, *item_ARM.(*AaaaRecord_ARM))
	}
	for _, item := range aaaa.ARecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ARecords = append(result.Properties.ARecords, *item_ARM.(*ARecord_ARM))
	}
	if aaaa.CNAMERecord != nil {
		cnameRecord_ARM, err := (*aaaa.CNAMERecord).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cnameRecord := *cnameRecord_ARM.(*CnameRecord_ARM)
		result.Properties.CNAMERecord = &cnameRecord
	}
	for _, item := range aaaa.CaaRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.CaaRecords = append(result.Properties.CaaRecords, *item_ARM.(*CaaRecord_ARM))
	}
	for _, item := range aaaa.MXRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.MXRecords = append(result.Properties.MXRecords, *item_ARM.(*MxRecord_ARM))
	}
	if aaaa.Metadata != nil {
		result.Properties.Metadata = make(map[string]string, len(aaaa.Metadata))
		for key, value := range aaaa.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	for _, item := range aaaa.NSRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.NSRecords = append(result.Properties.NSRecords, *item_ARM.(*NsRecord_ARM))
	}
	for _, item := range aaaa.PTRRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PTRRecords = append(result.Properties.PTRRecords, *item_ARM.(*PtrRecord_ARM))
	}
	if aaaa.SOARecord != nil {
		soaRecord_ARM, err := (*aaaa.SOARecord).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		soaRecord := *soaRecord_ARM.(*SoaRecord_ARM)
		result.Properties.SOARecord = &soaRecord
	}
	for _, item := range aaaa.SRVRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.SRVRecords = append(result.Properties.SRVRecords, *item_ARM.(*SrvRecord_ARM))
	}
	if aaaa.TTL != nil {
		ttl := *aaaa.TTL
		result.Properties.TTL = &ttl
	}
	for _, item := range aaaa.TXTRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.TXTRecords = append(result.Properties.TXTRecords, *item_ARM.(*TxtRecord_ARM))
	}
	if aaaa.TargetResource != nil {
		targetResource_ARM, err := (*aaaa.TargetResource).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		targetResource := *targetResource_ARM.(*SubResource_ARM)
		result.Properties.TargetResource = &targetResource
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (aaaa *DnsZones_AAAA_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DnsZones_AAAA_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (aaaa *DnsZones_AAAA_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DnsZones_AAAA_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DnsZones_AAAA_Spec_ARM, got %T", armInput)
	}

	// Set property "AAAARecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AAAARecords {
			var item1 AaaaRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.AAAARecords = append(aaaa.AAAARecords, item1)
		}
	}

	// Set property "ARecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ARecords {
			var item1 ARecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.ARecords = append(aaaa.ARecords, item1)
		}
	}

	// Set property "AzureName":
	aaaa.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "CNAMERecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CNAMERecord != nil {
			var cnameRecord1 CnameRecord
			err := cnameRecord1.PopulateFromARM(owner, *typedInput.Properties.CNAMERecord)
			if err != nil {
				return err
			}
			cnameRecord := cnameRecord1
			aaaa.CNAMERecord = &cnameRecord
		}
	}

	// Set property "CaaRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.CaaRecords {
			var item1 CaaRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.CaaRecords = append(aaaa.CaaRecords, item1)
		}
	}

	// Set property "MXRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.MXRecords {
			var item1 MxRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.MXRecords = append(aaaa.MXRecords, item1)
		}
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			aaaa.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				aaaa.Metadata[key] = value
			}
		}
	}

	// Set property "NSRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NSRecords {
			var item1 NsRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.NSRecords = append(aaaa.NSRecords, item1)
		}
	}

	// Set property "Owner":
	aaaa.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property "PTRRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PTRRecords {
			var item1 PtrRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.PTRRecords = append(aaaa.PTRRecords, item1)
		}
	}

	// Set property "SOARecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SOARecord != nil {
			var soaRecord1 SoaRecord
			err := soaRecord1.PopulateFromARM(owner, *typedInput.Properties.SOARecord)
			if err != nil {
				return err
			}
			soaRecord := soaRecord1
			aaaa.SOARecord = &soaRecord
		}
	}

	// Set property "SRVRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SRVRecords {
			var item1 SrvRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.SRVRecords = append(aaaa.SRVRecords, item1)
		}
	}

	// Set property "TTL":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TTL != nil {
			ttl := *typedInput.Properties.TTL
			aaaa.TTL = &ttl
		}
	}

	// Set property "TXTRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TXTRecords {
			var item1 TxtRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.TXTRecords = append(aaaa.TXTRecords, item1)
		}
	}

	// Set property "TargetResource":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetResource != nil {
			var targetResource1 SubResource
			err := targetResource1.PopulateFromARM(owner, *typedInput.Properties.TargetResource)
			if err != nil {
				return err
			}
			targetResource := targetResource1
			aaaa.TargetResource = &targetResource
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DnsZones_AAAA_Spec{}

// ConvertSpecFrom populates our DnsZones_AAAA_Spec from the provided source
func (aaaa *DnsZones_AAAA_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20180501s.DnsZones_AAAA_Spec)
	if ok {
		// Populate our instance from source
		return aaaa.AssignProperties_From_DnsZones_AAAA_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20180501s.DnsZones_AAAA_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = aaaa.AssignProperties_From_DnsZones_AAAA_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DnsZones_AAAA_Spec
func (aaaa *DnsZones_AAAA_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20180501s.DnsZones_AAAA_Spec)
	if ok {
		// Populate destination from our instance
		return aaaa.AssignProperties_To_DnsZones_AAAA_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20180501s.DnsZones_AAAA_Spec{}
	err := aaaa.AssignProperties_To_DnsZones_AAAA_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_DnsZones_AAAA_Spec populates our DnsZones_AAAA_Spec from the provided source DnsZones_AAAA_Spec
func (aaaa *DnsZones_AAAA_Spec) AssignProperties_From_DnsZones_AAAA_Spec(source *v20180501s.DnsZones_AAAA_Spec) error {

	// AAAARecords
	if source.AAAARecords != nil {
		aaaaRecordList := make([]AaaaRecord, len(source.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord
			err := aaaaRecord.AssignProperties_From_AaaaRecord(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AaaaRecord() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		aaaa.AAAARecords = aaaaRecordList
	} else {
		aaaa.AAAARecords = nil
	}

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord
			err := aRecord.AssignProperties_From_ARecord(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ARecord() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		aaaa.ARecords = aRecordList
	} else {
		aaaa.ARecords = nil
	}

	// AzureName
	aaaa.AzureName = source.AzureName

	// CNAMERecord
	if source.CNAMERecord != nil {
		var cnameRecord CnameRecord
		err := cnameRecord.AssignProperties_From_CnameRecord(source.CNAMERecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CnameRecord() to populate field CNAMERecord")
		}
		aaaa.CNAMERecord = &cnameRecord
	} else {
		aaaa.CNAMERecord = nil
	}

	// CaaRecords
	if source.CaaRecords != nil {
		caaRecordList := make([]CaaRecord, len(source.CaaRecords))
		for caaRecordIndex, caaRecordItem := range source.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord CaaRecord
			err := caaRecord.AssignProperties_From_CaaRecord(&caaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CaaRecord() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		aaaa.CaaRecords = caaRecordList
	} else {
		aaaa.CaaRecords = nil
	}

	// MXRecords
	if source.MXRecords != nil {
		mxRecordList := make([]MxRecord, len(source.MXRecords))
		for mxRecordIndex, mxRecordItem := range source.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord
			err := mxRecord.AssignProperties_From_MxRecord(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_MxRecord() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		aaaa.MXRecords = mxRecordList
	} else {
		aaaa.MXRecords = nil
	}

	// Metadata
	aaaa.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// NSRecords
	if source.NSRecords != nil {
		nsRecordList := make([]NsRecord, len(source.NSRecords))
		for nsRecordIndex, nsRecordItem := range source.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord NsRecord
			err := nsRecord.AssignProperties_From_NsRecord(&nsRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_NsRecord() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		aaaa.NSRecords = nsRecordList
	} else {
		aaaa.NSRecords = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		aaaa.Owner = &owner
	} else {
		aaaa.Owner = nil
	}

	// PTRRecords
	if source.PTRRecords != nil {
		ptrRecordList := make([]PtrRecord, len(source.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord
			err := ptrRecord.AssignProperties_From_PtrRecord(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PtrRecord() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		aaaa.PTRRecords = ptrRecordList
	} else {
		aaaa.PTRRecords = nil
	}

	// SOARecord
	if source.SOARecord != nil {
		var soaRecord SoaRecord
		err := soaRecord.AssignProperties_From_SoaRecord(source.SOARecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SoaRecord() to populate field SOARecord")
		}
		aaaa.SOARecord = &soaRecord
	} else {
		aaaa.SOARecord = nil
	}

	// SRVRecords
	if source.SRVRecords != nil {
		srvRecordList := make([]SrvRecord, len(source.SRVRecords))
		for srvRecordIndex, srvRecordItem := range source.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord
			err := srvRecord.AssignProperties_From_SrvRecord(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SrvRecord() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		aaaa.SRVRecords = srvRecordList
	} else {
		aaaa.SRVRecords = nil
	}

	// TTL
	aaaa.TTL = genruntime.ClonePointerToInt(source.TTL)

	// TXTRecords
	if source.TXTRecords != nil {
		txtRecordList := make([]TxtRecord, len(source.TXTRecords))
		for txtRecordIndex, txtRecordItem := range source.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord
			err := txtRecord.AssignProperties_From_TxtRecord(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TxtRecord() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		aaaa.TXTRecords = txtRecordList
	} else {
		aaaa.TXTRecords = nil
	}

	// TargetResource
	if source.TargetResource != nil {
		var targetResource SubResource
		err := targetResource.AssignProperties_From_SubResource(source.TargetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field TargetResource")
		}
		aaaa.TargetResource = &targetResource
	} else {
		aaaa.TargetResource = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DnsZones_AAAA_Spec populates the provided destination DnsZones_AAAA_Spec from our DnsZones_AAAA_Spec
func (aaaa *DnsZones_AAAA_Spec) AssignProperties_To_DnsZones_AAAA_Spec(destination *v20180501s.DnsZones_AAAA_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AAAARecords
	if aaaa.AAAARecords != nil {
		aaaaRecordList := make([]v20180501s.AaaaRecord, len(aaaa.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range aaaa.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord v20180501s.AaaaRecord
			err := aaaaRecordItem.AssignProperties_To_AaaaRecord(&aaaaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AaaaRecord() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		destination.AAAARecords = aaaaRecordList
	} else {
		destination.AAAARecords = nil
	}

	// ARecords
	if aaaa.ARecords != nil {
		aRecordList := make([]v20180501s.ARecord, len(aaaa.ARecords))
		for aRecordIndex, aRecordItem := range aaaa.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord v20180501s.ARecord
			err := aRecordItem.AssignProperties_To_ARecord(&aRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ARecord() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		destination.ARecords = aRecordList
	} else {
		destination.ARecords = nil
	}

	// AzureName
	destination.AzureName = aaaa.AzureName

	// CNAMERecord
	if aaaa.CNAMERecord != nil {
		var cnameRecord v20180501s.CnameRecord
		err := aaaa.CNAMERecord.AssignProperties_To_CnameRecord(&cnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CnameRecord() to populate field CNAMERecord")
		}
		destination.CNAMERecord = &cnameRecord
	} else {
		destination.CNAMERecord = nil
	}

	// CaaRecords
	if aaaa.CaaRecords != nil {
		caaRecordList := make([]v20180501s.CaaRecord, len(aaaa.CaaRecords))
		for caaRecordIndex, caaRecordItem := range aaaa.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord v20180501s.CaaRecord
			err := caaRecordItem.AssignProperties_To_CaaRecord(&caaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CaaRecord() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		destination.CaaRecords = caaRecordList
	} else {
		destination.CaaRecords = nil
	}

	// MXRecords
	if aaaa.MXRecords != nil {
		mxRecordList := make([]v20180501s.MxRecord, len(aaaa.MXRecords))
		for mxRecordIndex, mxRecordItem := range aaaa.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord v20180501s.MxRecord
			err := mxRecordItem.AssignProperties_To_MxRecord(&mxRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_MxRecord() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		destination.MXRecords = mxRecordList
	} else {
		destination.MXRecords = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(aaaa.Metadata)

	// NSRecords
	if aaaa.NSRecords != nil {
		nsRecordList := make([]v20180501s.NsRecord, len(aaaa.NSRecords))
		for nsRecordIndex, nsRecordItem := range aaaa.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord v20180501s.NsRecord
			err := nsRecordItem.AssignProperties_To_NsRecord(&nsRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_NsRecord() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		destination.NSRecords = nsRecordList
	} else {
		destination.NSRecords = nil
	}

	// OriginalVersion
	destination.OriginalVersion = aaaa.OriginalVersion()

	// Owner
	if aaaa.Owner != nil {
		owner := aaaa.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PTRRecords
	if aaaa.PTRRecords != nil {
		ptrRecordList := make([]v20180501s.PtrRecord, len(aaaa.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range aaaa.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord v20180501s.PtrRecord
			err := ptrRecordItem.AssignProperties_To_PtrRecord(&ptrRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PtrRecord() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		destination.PTRRecords = ptrRecordList
	} else {
		destination.PTRRecords = nil
	}

	// SOARecord
	if aaaa.SOARecord != nil {
		var soaRecord v20180501s.SoaRecord
		err := aaaa.SOARecord.AssignProperties_To_SoaRecord(&soaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SoaRecord() to populate field SOARecord")
		}
		destination.SOARecord = &soaRecord
	} else {
		destination.SOARecord = nil
	}

	// SRVRecords
	if aaaa.SRVRecords != nil {
		srvRecordList := make([]v20180501s.SrvRecord, len(aaaa.SRVRecords))
		for srvRecordIndex, srvRecordItem := range aaaa.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord v20180501s.SrvRecord
			err := srvRecordItem.AssignProperties_To_SrvRecord(&srvRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SrvRecord() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		destination.SRVRecords = srvRecordList
	} else {
		destination.SRVRecords = nil
	}

	// TTL
	destination.TTL = genruntime.ClonePointerToInt(aaaa.TTL)

	// TXTRecords
	if aaaa.TXTRecords != nil {
		txtRecordList := make([]v20180501s.TxtRecord, len(aaaa.TXTRecords))
		for txtRecordIndex, txtRecordItem := range aaaa.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord v20180501s.TxtRecord
			err := txtRecordItem.AssignProperties_To_TxtRecord(&txtRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TxtRecord() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		destination.TXTRecords = txtRecordList
	} else {
		destination.TXTRecords = nil
	}

	// TargetResource
	if aaaa.TargetResource != nil {
		var targetResource v20180501s.SubResource
		err := aaaa.TargetResource.AssignProperties_To_SubResource(&targetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field TargetResource")
		}
		destination.TargetResource = &targetResource
	} else {
		destination.TargetResource = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_DnsZones_AAAA_STATUS populates our DnsZones_AAAA_Spec from the provided source DnsZones_AAAA_STATUS
func (aaaa *DnsZones_AAAA_Spec) Initialize_From_DnsZones_AAAA_STATUS(source *DnsZones_AAAA_STATUS) error {

	// AAAARecords
	if source.AAAARecords != nil {
		aaaaRecordList := make([]AaaaRecord, len(source.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord
			err := aaaaRecord.Initialize_From_AaaaRecord_STATUS(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_AaaaRecord_STATUS() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		aaaa.AAAARecords = aaaaRecordList
	} else {
		aaaa.AAAARecords = nil
	}

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord
			err := aRecord.Initialize_From_ARecord_STATUS(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		aaaa.ARecords = aRecordList
	} else {
		aaaa.ARecords = nil
	}

	// CNAMERecord
	if source.CNAMERecord != nil {
		var cnameRecord CnameRecord
		err := cnameRecord.Initialize_From_CnameRecord_STATUS(source.CNAMERecord)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_CnameRecord_STATUS() to populate field CNAMERecord")
		}
		aaaa.CNAMERecord = &cnameRecord
	} else {
		aaaa.CNAMERecord = nil
	}

	// CaaRecords
	if source.CaaRecords != nil {
		caaRecordList := make([]CaaRecord, len(source.CaaRecords))
		for caaRecordIndex, caaRecordItem := range source.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord CaaRecord
			err := caaRecord.Initialize_From_CaaRecord_STATUS(&caaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_CaaRecord_STATUS() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		aaaa.CaaRecords = caaRecordList
	} else {
		aaaa.CaaRecords = nil
	}

	// MXRecords
	if source.MXRecords != nil {
		mxRecordList := make([]MxRecord, len(source.MXRecords))
		for mxRecordIndex, mxRecordItem := range source.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord
			err := mxRecord.Initialize_From_MxRecord_STATUS(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_MxRecord_STATUS() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		aaaa.MXRecords = mxRecordList
	} else {
		aaaa.MXRecords = nil
	}

	// Metadata
	aaaa.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// NSRecords
	if source.NSRecords != nil {
		nsRecordList := make([]NsRecord, len(source.NSRecords))
		for nsRecordIndex, nsRecordItem := range source.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord NsRecord
			err := nsRecord.Initialize_From_NsRecord_STATUS(&nsRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_NsRecord_STATUS() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		aaaa.NSRecords = nsRecordList
	} else {
		aaaa.NSRecords = nil
	}

	// PTRRecords
	if source.PTRRecords != nil {
		ptrRecordList := make([]PtrRecord, len(source.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord
			err := ptrRecord.Initialize_From_PtrRecord_STATUS(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_PtrRecord_STATUS() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		aaaa.PTRRecords = ptrRecordList
	} else {
		aaaa.PTRRecords = nil
	}

	// SOARecord
	if source.SOARecord != nil {
		var soaRecord SoaRecord
		err := soaRecord.Initialize_From_SoaRecord_STATUS(source.SOARecord)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SoaRecord_STATUS() to populate field SOARecord")
		}
		aaaa.SOARecord = &soaRecord
	} else {
		aaaa.SOARecord = nil
	}

	// SRVRecords
	if source.SRVRecords != nil {
		srvRecordList := make([]SrvRecord, len(source.SRVRecords))
		for srvRecordIndex, srvRecordItem := range source.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord
			err := srvRecord.Initialize_From_SrvRecord_STATUS(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_SrvRecord_STATUS() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		aaaa.SRVRecords = srvRecordList
	} else {
		aaaa.SRVRecords = nil
	}

	// TTL
	aaaa.TTL = genruntime.ClonePointerToInt(source.TTL)

	// TXTRecords
	if source.TXTRecords != nil {
		txtRecordList := make([]TxtRecord, len(source.TXTRecords))
		for txtRecordIndex, txtRecordItem := range source.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord
			err := txtRecord.Initialize_From_TxtRecord_STATUS(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_TxtRecord_STATUS() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		aaaa.TXTRecords = txtRecordList
	} else {
		aaaa.TXTRecords = nil
	}

	// TargetResource
	if source.TargetResource != nil {
		var targetResource SubResource
		err := targetResource.Initialize_From_SubResource_STATUS(source.TargetResource)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SubResource_STATUS() to populate field TargetResource")
		}
		aaaa.TargetResource = &targetResource
	} else {
		aaaa.TargetResource = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (aaaa *DnsZones_AAAA_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (aaaa *DnsZones_AAAA_Spec) SetAzureName(azureName string) { aaaa.AzureName = azureName }

type DnsZones_AAAA_STATUS struct {
	// AAAARecords: The list of AAAA records in the record set.
	AAAARecords []AaaaRecord_STATUS `json:"AAAARecords,omitempty"`

	// ARecords: The list of A records in the record set.
	ARecords []ARecord_STATUS `json:"ARecords,omitempty"`

	// CNAMERecord: The CNAME record in the  record set.
	CNAMERecord *CnameRecord_STATUS `json:"CNAMERecord,omitempty"`

	// CaaRecords: The list of CAA records in the record set.
	CaaRecords []CaaRecord_STATUS `json:"caaRecords,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Etag: The etag of the record set.
	Etag *string `json:"etag,omitempty"`

	// Fqdn: Fully qualified domain name of the record set.
	Fqdn *string `json:"fqdn,omitempty"`

	// Id: The ID of the record set.
	Id *string `json:"id,omitempty"`

	// MXRecords: The list of MX records in the record set.
	MXRecords []MxRecord_STATUS `json:"MXRecords,omitempty"`

	// Metadata: The metadata attached to the record set.
	Metadata map[string]string `json:"metadata,omitempty"`

	// NSRecords: The list of NS records in the record set.
	NSRecords []NsRecord_STATUS `json:"NSRecords,omitempty"`

	// Name: The name of the record set.
	Name *string `json:"name,omitempty"`

	// PTRRecords: The list of PTR records in the record set.
	PTRRecords []PtrRecord_STATUS `json:"PTRRecords,omitempty"`

	// ProvisioningState: provisioning State of the record set.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// SOARecord: The SOA record in the record set.
	SOARecord *SoaRecord_STATUS `json:"SOARecord,omitempty"`

	// SRVRecords: The list of SRV records in the record set.
	SRVRecords []SrvRecord_STATUS `json:"SRVRecords,omitempty"`

	// TTL: The TTL (time-to-live) of the records in the record set.
	TTL *int `json:"TTL,omitempty"`

	// TXTRecords: The list of TXT records in the record set.
	TXTRecords []TxtRecord_STATUS `json:"TXTRecords,omitempty"`

	// TargetResource: A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResource_STATUS `json:"targetResource,omitempty"`

	// Type: The type of the record set.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DnsZones_AAAA_STATUS{}

// ConvertStatusFrom populates our DnsZones_AAAA_STATUS from the provided source
func (aaaa *DnsZones_AAAA_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20180501s.DnsZones_AAAA_STATUS)
	if ok {
		// Populate our instance from source
		return aaaa.AssignProperties_From_DnsZones_AAAA_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20180501s.DnsZones_AAAA_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = aaaa.AssignProperties_From_DnsZones_AAAA_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DnsZones_AAAA_STATUS
func (aaaa *DnsZones_AAAA_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20180501s.DnsZones_AAAA_STATUS)
	if ok {
		// Populate destination from our instance
		return aaaa.AssignProperties_To_DnsZones_AAAA_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20180501s.DnsZones_AAAA_STATUS{}
	err := aaaa.AssignProperties_To_DnsZones_AAAA_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &DnsZones_AAAA_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (aaaa *DnsZones_AAAA_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DnsZones_AAAA_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (aaaa *DnsZones_AAAA_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DnsZones_AAAA_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DnsZones_AAAA_STATUS_ARM, got %T", armInput)
	}

	// Set property "AAAARecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AAAARecords {
			var item1 AaaaRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.AAAARecords = append(aaaa.AAAARecords, item1)
		}
	}

	// Set property "ARecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ARecords {
			var item1 ARecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.ARecords = append(aaaa.ARecords, item1)
		}
	}

	// Set property "CNAMERecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CNAMERecord != nil {
			var cnameRecord1 CnameRecord_STATUS
			err := cnameRecord1.PopulateFromARM(owner, *typedInput.Properties.CNAMERecord)
			if err != nil {
				return err
			}
			cnameRecord := cnameRecord1
			aaaa.CNAMERecord = &cnameRecord
		}
	}

	// Set property "CaaRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.CaaRecords {
			var item1 CaaRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.CaaRecords = append(aaaa.CaaRecords, item1)
		}
	}

	// no assignment for property "Conditions"

	// Set property "Etag":
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		aaaa.Etag = &etag
	}

	// Set property "Fqdn":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Fqdn != nil {
			fqdn := *typedInput.Properties.Fqdn
			aaaa.Fqdn = &fqdn
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		aaaa.Id = &id
	}

	// Set property "MXRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.MXRecords {
			var item1 MxRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.MXRecords = append(aaaa.MXRecords, item1)
		}
	}

	// Set property "Metadata":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			aaaa.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				aaaa.Metadata[key] = value
			}
		}
	}

	// Set property "NSRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NSRecords {
			var item1 NsRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.NSRecords = append(aaaa.NSRecords, item1)
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		aaaa.Name = &name
	}

	// Set property "PTRRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PTRRecords {
			var item1 PtrRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.PTRRecords = append(aaaa.PTRRecords, item1)
		}
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			aaaa.ProvisioningState = &provisioningState
		}
	}

	// Set property "SOARecord":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SOARecord != nil {
			var soaRecord1 SoaRecord_STATUS
			err := soaRecord1.PopulateFromARM(owner, *typedInput.Properties.SOARecord)
			if err != nil {
				return err
			}
			soaRecord := soaRecord1
			aaaa.SOARecord = &soaRecord
		}
	}

	// Set property "SRVRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SRVRecords {
			var item1 SrvRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.SRVRecords = append(aaaa.SRVRecords, item1)
		}
	}

	// Set property "TTL":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TTL != nil {
			ttl := *typedInput.Properties.TTL
			aaaa.TTL = &ttl
		}
	}

	// Set property "TXTRecords":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TXTRecords {
			var item1 TxtRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			aaaa.TXTRecords = append(aaaa.TXTRecords, item1)
		}
	}

	// Set property "TargetResource":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetResource != nil {
			var targetResource1 SubResource_STATUS
			err := targetResource1.PopulateFromARM(owner, *typedInput.Properties.TargetResource)
			if err != nil {
				return err
			}
			targetResource := targetResource1
			aaaa.TargetResource = &targetResource
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		aaaa.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_DnsZones_AAAA_STATUS populates our DnsZones_AAAA_STATUS from the provided source DnsZones_AAAA_STATUS
func (aaaa *DnsZones_AAAA_STATUS) AssignProperties_From_DnsZones_AAAA_STATUS(source *v20180501s.DnsZones_AAAA_STATUS) error {

	// AAAARecords
	if source.AAAARecords != nil {
		aaaaRecordList := make([]AaaaRecord_STATUS, len(source.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord_STATUS
			err := aaaaRecord.AssignProperties_From_AaaaRecord_STATUS(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AaaaRecord_STATUS() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		aaaa.AAAARecords = aaaaRecordList
	} else {
		aaaa.AAAARecords = nil
	}

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord_STATUS, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord_STATUS
			err := aRecord.AssignProperties_From_ARecord_STATUS(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		aaaa.ARecords = aRecordList
	} else {
		aaaa.ARecords = nil
	}

	// CNAMERecord
	if source.CNAMERecord != nil {
		var cnameRecord CnameRecord_STATUS
		err := cnameRecord.AssignProperties_From_CnameRecord_STATUS(source.CNAMERecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CnameRecord_STATUS() to populate field CNAMERecord")
		}
		aaaa.CNAMERecord = &cnameRecord
	} else {
		aaaa.CNAMERecord = nil
	}

	// CaaRecords
	if source.CaaRecords != nil {
		caaRecordList := make([]CaaRecord_STATUS, len(source.CaaRecords))
		for caaRecordIndex, caaRecordItem := range source.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord CaaRecord_STATUS
			err := caaRecord.AssignProperties_From_CaaRecord_STATUS(&caaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CaaRecord_STATUS() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		aaaa.CaaRecords = caaRecordList
	} else {
		aaaa.CaaRecords = nil
	}

	// Conditions
	aaaa.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Etag
	aaaa.Etag = genruntime.ClonePointerToString(source.Etag)

	// Fqdn
	aaaa.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// Id
	aaaa.Id = genruntime.ClonePointerToString(source.Id)

	// MXRecords
	if source.MXRecords != nil {
		mxRecordList := make([]MxRecord_STATUS, len(source.MXRecords))
		for mxRecordIndex, mxRecordItem := range source.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord_STATUS
			err := mxRecord.AssignProperties_From_MxRecord_STATUS(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_MxRecord_STATUS() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		aaaa.MXRecords = mxRecordList
	} else {
		aaaa.MXRecords = nil
	}

	// Metadata
	aaaa.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// NSRecords
	if source.NSRecords != nil {
		nsRecordList := make([]NsRecord_STATUS, len(source.NSRecords))
		for nsRecordIndex, nsRecordItem := range source.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord NsRecord_STATUS
			err := nsRecord.AssignProperties_From_NsRecord_STATUS(&nsRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_NsRecord_STATUS() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		aaaa.NSRecords = nsRecordList
	} else {
		aaaa.NSRecords = nil
	}

	// Name
	aaaa.Name = genruntime.ClonePointerToString(source.Name)

	// PTRRecords
	if source.PTRRecords != nil {
		ptrRecordList := make([]PtrRecord_STATUS, len(source.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord_STATUS
			err := ptrRecord.AssignProperties_From_PtrRecord_STATUS(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PtrRecord_STATUS() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		aaaa.PTRRecords = ptrRecordList
	} else {
		aaaa.PTRRecords = nil
	}

	// ProvisioningState
	aaaa.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// SOARecord
	if source.SOARecord != nil {
		var soaRecord SoaRecord_STATUS
		err := soaRecord.AssignProperties_From_SoaRecord_STATUS(source.SOARecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SoaRecord_STATUS() to populate field SOARecord")
		}
		aaaa.SOARecord = &soaRecord
	} else {
		aaaa.SOARecord = nil
	}

	// SRVRecords
	if source.SRVRecords != nil {
		srvRecordList := make([]SrvRecord_STATUS, len(source.SRVRecords))
		for srvRecordIndex, srvRecordItem := range source.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord_STATUS
			err := srvRecord.AssignProperties_From_SrvRecord_STATUS(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SrvRecord_STATUS() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		aaaa.SRVRecords = srvRecordList
	} else {
		aaaa.SRVRecords = nil
	}

	// TTL
	aaaa.TTL = genruntime.ClonePointerToInt(source.TTL)

	// TXTRecords
	if source.TXTRecords != nil {
		txtRecordList := make([]TxtRecord_STATUS, len(source.TXTRecords))
		for txtRecordIndex, txtRecordItem := range source.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord_STATUS
			err := txtRecord.AssignProperties_From_TxtRecord_STATUS(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TxtRecord_STATUS() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		aaaa.TXTRecords = txtRecordList
	} else {
		aaaa.TXTRecords = nil
	}

	// TargetResource
	if source.TargetResource != nil {
		var targetResource SubResource_STATUS
		err := targetResource.AssignProperties_From_SubResource_STATUS(source.TargetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field TargetResource")
		}
		aaaa.TargetResource = &targetResource
	} else {
		aaaa.TargetResource = nil
	}

	// Type
	aaaa.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_DnsZones_AAAA_STATUS populates the provided destination DnsZones_AAAA_STATUS from our DnsZones_AAAA_STATUS
func (aaaa *DnsZones_AAAA_STATUS) AssignProperties_To_DnsZones_AAAA_STATUS(destination *v20180501s.DnsZones_AAAA_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AAAARecords
	if aaaa.AAAARecords != nil {
		aaaaRecordList := make([]v20180501s.AaaaRecord_STATUS, len(aaaa.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range aaaa.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord v20180501s.AaaaRecord_STATUS
			err := aaaaRecordItem.AssignProperties_To_AaaaRecord_STATUS(&aaaaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AaaaRecord_STATUS() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		destination.AAAARecords = aaaaRecordList
	} else {
		destination.AAAARecords = nil
	}

	// ARecords
	if aaaa.ARecords != nil {
		aRecordList := make([]v20180501s.ARecord_STATUS, len(aaaa.ARecords))
		for aRecordIndex, aRecordItem := range aaaa.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord v20180501s.ARecord_STATUS
			err := aRecordItem.AssignProperties_To_ARecord_STATUS(&aRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		destination.ARecords = aRecordList
	} else {
		destination.ARecords = nil
	}

	// CNAMERecord
	if aaaa.CNAMERecord != nil {
		var cnameRecord v20180501s.CnameRecord_STATUS
		err := aaaa.CNAMERecord.AssignProperties_To_CnameRecord_STATUS(&cnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CnameRecord_STATUS() to populate field CNAMERecord")
		}
		destination.CNAMERecord = &cnameRecord
	} else {
		destination.CNAMERecord = nil
	}

	// CaaRecords
	if aaaa.CaaRecords != nil {
		caaRecordList := make([]v20180501s.CaaRecord_STATUS, len(aaaa.CaaRecords))
		for caaRecordIndex, caaRecordItem := range aaaa.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord v20180501s.CaaRecord_STATUS
			err := caaRecordItem.AssignProperties_To_CaaRecord_STATUS(&caaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CaaRecord_STATUS() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		destination.CaaRecords = caaRecordList
	} else {
		destination.CaaRecords = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(aaaa.Conditions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(aaaa.Etag)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(aaaa.Fqdn)

	// Id
	destination.Id = genruntime.ClonePointerToString(aaaa.Id)

	// MXRecords
	if aaaa.MXRecords != nil {
		mxRecordList := make([]v20180501s.MxRecord_STATUS, len(aaaa.MXRecords))
		for mxRecordIndex, mxRecordItem := range aaaa.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord v20180501s.MxRecord_STATUS
			err := mxRecordItem.AssignProperties_To_MxRecord_STATUS(&mxRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_MxRecord_STATUS() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		destination.MXRecords = mxRecordList
	} else {
		destination.MXRecords = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(aaaa.Metadata)

	// NSRecords
	if aaaa.NSRecords != nil {
		nsRecordList := make([]v20180501s.NsRecord_STATUS, len(aaaa.NSRecords))
		for nsRecordIndex, nsRecordItem := range aaaa.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord v20180501s.NsRecord_STATUS
			err := nsRecordItem.AssignProperties_To_NsRecord_STATUS(&nsRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_NsRecord_STATUS() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		destination.NSRecords = nsRecordList
	} else {
		destination.NSRecords = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(aaaa.Name)

	// PTRRecords
	if aaaa.PTRRecords != nil {
		ptrRecordList := make([]v20180501s.PtrRecord_STATUS, len(aaaa.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range aaaa.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord v20180501s.PtrRecord_STATUS
			err := ptrRecordItem.AssignProperties_To_PtrRecord_STATUS(&ptrRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PtrRecord_STATUS() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		destination.PTRRecords = ptrRecordList
	} else {
		destination.PTRRecords = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(aaaa.ProvisioningState)

	// SOARecord
	if aaaa.SOARecord != nil {
		var soaRecord v20180501s.SoaRecord_STATUS
		err := aaaa.SOARecord.AssignProperties_To_SoaRecord_STATUS(&soaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SoaRecord_STATUS() to populate field SOARecord")
		}
		destination.SOARecord = &soaRecord
	} else {
		destination.SOARecord = nil
	}

	// SRVRecords
	if aaaa.SRVRecords != nil {
		srvRecordList := make([]v20180501s.SrvRecord_STATUS, len(aaaa.SRVRecords))
		for srvRecordIndex, srvRecordItem := range aaaa.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord v20180501s.SrvRecord_STATUS
			err := srvRecordItem.AssignProperties_To_SrvRecord_STATUS(&srvRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SrvRecord_STATUS() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		destination.SRVRecords = srvRecordList
	} else {
		destination.SRVRecords = nil
	}

	// TTL
	destination.TTL = genruntime.ClonePointerToInt(aaaa.TTL)

	// TXTRecords
	if aaaa.TXTRecords != nil {
		txtRecordList := make([]v20180501s.TxtRecord_STATUS, len(aaaa.TXTRecords))
		for txtRecordIndex, txtRecordItem := range aaaa.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord v20180501s.TxtRecord_STATUS
			err := txtRecordItem.AssignProperties_To_TxtRecord_STATUS(&txtRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TxtRecord_STATUS() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		destination.TXTRecords = txtRecordList
	} else {
		destination.TXTRecords = nil
	}

	// TargetResource
	if aaaa.TargetResource != nil {
		var targetResource v20180501s.SubResource_STATUS
		err := aaaa.TargetResource.AssignProperties_To_SubResource_STATUS(&targetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field TargetResource")
		}
		destination.TargetResource = &targetResource
	} else {
		destination.TargetResource = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(aaaa.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An AAAA record.
type AaaaRecord struct {
	// Ipv6Address: The IPv6 address of this AAAA record.
	Ipv6Address *string `json:"ipv6Address,omitempty"`
}

var _ genruntime.ARMTransformer = &AaaaRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *AaaaRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &AaaaRecord_ARM{}

	// Set property "Ipv6Address":
	if record.Ipv6Address != nil {
		ipv6Address := *record.Ipv6Address
		result.Ipv6Address = &ipv6Address
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *AaaaRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AaaaRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *AaaaRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AaaaRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AaaaRecord_ARM, got %T", armInput)
	}

	// Set property "Ipv6Address":
	if typedInput.Ipv6Address != nil {
		ipv6Address := *typedInput.Ipv6Address
		record.Ipv6Address = &ipv6Address
	}

	// No error
	return nil
}

// AssignProperties_From_AaaaRecord populates our AaaaRecord from the provided source AaaaRecord
func (record *AaaaRecord) AssignProperties_From_AaaaRecord(source *v20180501s.AaaaRecord) error {

	// Ipv6Address
	record.Ipv6Address = genruntime.ClonePointerToString(source.Ipv6Address)

	// No error
	return nil
}

// AssignProperties_To_AaaaRecord populates the provided destination AaaaRecord from our AaaaRecord
func (record *AaaaRecord) AssignProperties_To_AaaaRecord(destination *v20180501s.AaaaRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Ipv6Address
	destination.Ipv6Address = genruntime.ClonePointerToString(record.Ipv6Address)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_AaaaRecord_STATUS populates our AaaaRecord from the provided source AaaaRecord_STATUS
func (record *AaaaRecord) Initialize_From_AaaaRecord_STATUS(source *AaaaRecord_STATUS) error {

	// Ipv6Address
	record.Ipv6Address = genruntime.ClonePointerToString(source.Ipv6Address)

	// No error
	return nil
}

// An AAAA record.
type AaaaRecord_STATUS struct {
	// Ipv6Address: The IPv6 address of this AAAA record.
	Ipv6Address *string `json:"ipv6Address,omitempty"`
}

var _ genruntime.FromARMConverter = &AaaaRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *AaaaRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AaaaRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *AaaaRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AaaaRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AaaaRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Ipv6Address":
	if typedInput.Ipv6Address != nil {
		ipv6Address := *typedInput.Ipv6Address
		record.Ipv6Address = &ipv6Address
	}

	// No error
	return nil
}

// AssignProperties_From_AaaaRecord_STATUS populates our AaaaRecord_STATUS from the provided source AaaaRecord_STATUS
func (record *AaaaRecord_STATUS) AssignProperties_From_AaaaRecord_STATUS(source *v20180501s.AaaaRecord_STATUS) error {

	// Ipv6Address
	record.Ipv6Address = genruntime.ClonePointerToString(source.Ipv6Address)

	// No error
	return nil
}

// AssignProperties_To_AaaaRecord_STATUS populates the provided destination AaaaRecord_STATUS from our AaaaRecord_STATUS
func (record *AaaaRecord_STATUS) AssignProperties_To_AaaaRecord_STATUS(destination *v20180501s.AaaaRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Ipv6Address
	destination.Ipv6Address = genruntime.ClonePointerToString(record.Ipv6Address)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An A record.
type ARecord struct {
	// Ipv4Address: The IPv4 address of this A record.
	Ipv4Address *string `json:"ipv4Address,omitempty"`
}

var _ genruntime.ARMTransformer = &ARecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *ARecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &ARecord_ARM{}

	// Set property "Ipv4Address":
	if record.Ipv4Address != nil {
		ipv4Address := *record.Ipv4Address
		result.Ipv4Address = &ipv4Address
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *ARecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ARecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *ARecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ARecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ARecord_ARM, got %T", armInput)
	}

	// Set property "Ipv4Address":
	if typedInput.Ipv4Address != nil {
		ipv4Address := *typedInput.Ipv4Address
		record.Ipv4Address = &ipv4Address
	}

	// No error
	return nil
}

// AssignProperties_From_ARecord populates our ARecord from the provided source ARecord
func (record *ARecord) AssignProperties_From_ARecord(source *v20180501s.ARecord) error {

	// Ipv4Address
	record.Ipv4Address = genruntime.ClonePointerToString(source.Ipv4Address)

	// No error
	return nil
}

// AssignProperties_To_ARecord populates the provided destination ARecord from our ARecord
func (record *ARecord) AssignProperties_To_ARecord(destination *v20180501s.ARecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Ipv4Address
	destination.Ipv4Address = genruntime.ClonePointerToString(record.Ipv4Address)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ARecord_STATUS populates our ARecord from the provided source ARecord_STATUS
func (record *ARecord) Initialize_From_ARecord_STATUS(source *ARecord_STATUS) error {

	// Ipv4Address
	record.Ipv4Address = genruntime.ClonePointerToString(source.Ipv4Address)

	// No error
	return nil
}

// An A record.
type ARecord_STATUS struct {
	// Ipv4Address: The IPv4 address of this A record.
	Ipv4Address *string `json:"ipv4Address,omitempty"`
}

var _ genruntime.FromARMConverter = &ARecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *ARecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ARecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *ARecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ARecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ARecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Ipv4Address":
	if typedInput.Ipv4Address != nil {
		ipv4Address := *typedInput.Ipv4Address
		record.Ipv4Address = &ipv4Address
	}

	// No error
	return nil
}

// AssignProperties_From_ARecord_STATUS populates our ARecord_STATUS from the provided source ARecord_STATUS
func (record *ARecord_STATUS) AssignProperties_From_ARecord_STATUS(source *v20180501s.ARecord_STATUS) error {

	// Ipv4Address
	record.Ipv4Address = genruntime.ClonePointerToString(source.Ipv4Address)

	// No error
	return nil
}

// AssignProperties_To_ARecord_STATUS populates the provided destination ARecord_STATUS from our ARecord_STATUS
func (record *ARecord_STATUS) AssignProperties_To_ARecord_STATUS(destination *v20180501s.ARecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Ipv4Address
	destination.Ipv4Address = genruntime.ClonePointerToString(record.Ipv4Address)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// A CAA record.
type CaaRecord struct {
	// Flags: The flags for this CAA record as an integer between 0 and 255.
	Flags *int `json:"flags,omitempty"`

	// Tag: The tag for this CAA record.
	Tag *string `json:"tag,omitempty"`

	// Value: The value for this CAA record.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &CaaRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *CaaRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &CaaRecord_ARM{}

	// Set property "Flags":
	if record.Flags != nil {
		flags := *record.Flags
		result.Flags = &flags
	}

	// Set property "Tag":
	if record.Tag != nil {
		tag := *record.Tag
		result.Tag = &tag
	}

	// Set property "Value":
	if record.Value != nil {
		value := *record.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *CaaRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CaaRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *CaaRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CaaRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CaaRecord_ARM, got %T", armInput)
	}

	// Set property "Flags":
	if typedInput.Flags != nil {
		flags := *typedInput.Flags
		record.Flags = &flags
	}

	// Set property "Tag":
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		record.Tag = &tag
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		record.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_CaaRecord populates our CaaRecord from the provided source CaaRecord
func (record *CaaRecord) AssignProperties_From_CaaRecord(source *v20180501s.CaaRecord) error {

	// Flags
	record.Flags = genruntime.ClonePointerToInt(source.Flags)

	// Tag
	record.Tag = genruntime.ClonePointerToString(source.Tag)

	// Value
	record.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_CaaRecord populates the provided destination CaaRecord from our CaaRecord
func (record *CaaRecord) AssignProperties_To_CaaRecord(destination *v20180501s.CaaRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Flags
	destination.Flags = genruntime.ClonePointerToInt(record.Flags)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(record.Tag)

	// Value
	destination.Value = genruntime.ClonePointerToString(record.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_CaaRecord_STATUS populates our CaaRecord from the provided source CaaRecord_STATUS
func (record *CaaRecord) Initialize_From_CaaRecord_STATUS(source *CaaRecord_STATUS) error {

	// Flags
	record.Flags = genruntime.ClonePointerToInt(source.Flags)

	// Tag
	record.Tag = genruntime.ClonePointerToString(source.Tag)

	// Value
	record.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// A CAA record.
type CaaRecord_STATUS struct {
	// Flags: The flags for this CAA record as an integer between 0 and 255.
	Flags *int `json:"flags,omitempty"`

	// Tag: The tag for this CAA record.
	Tag *string `json:"tag,omitempty"`

	// Value: The value for this CAA record.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &CaaRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *CaaRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CaaRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *CaaRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CaaRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CaaRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Flags":
	if typedInput.Flags != nil {
		flags := *typedInput.Flags
		record.Flags = &flags
	}

	// Set property "Tag":
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		record.Tag = &tag
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		record.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_CaaRecord_STATUS populates our CaaRecord_STATUS from the provided source CaaRecord_STATUS
func (record *CaaRecord_STATUS) AssignProperties_From_CaaRecord_STATUS(source *v20180501s.CaaRecord_STATUS) error {

	// Flags
	record.Flags = genruntime.ClonePointerToInt(source.Flags)

	// Tag
	record.Tag = genruntime.ClonePointerToString(source.Tag)

	// Value
	record.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_CaaRecord_STATUS populates the provided destination CaaRecord_STATUS from our CaaRecord_STATUS
func (record *CaaRecord_STATUS) AssignProperties_To_CaaRecord_STATUS(destination *v20180501s.CaaRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Flags
	destination.Flags = genruntime.ClonePointerToInt(record.Flags)

	// Tag
	destination.Tag = genruntime.ClonePointerToString(record.Tag)

	// Value
	destination.Value = genruntime.ClonePointerToString(record.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// A CNAME record.
type CnameRecord struct {
	// Cname: The canonical name for this CNAME record.
	Cname *string `json:"cname,omitempty"`
}

var _ genruntime.ARMTransformer = &CnameRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *CnameRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &CnameRecord_ARM{}

	// Set property "Cname":
	if record.Cname != nil {
		cname := *record.Cname
		result.Cname = &cname
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *CnameRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CnameRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *CnameRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CnameRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CnameRecord_ARM, got %T", armInput)
	}

	// Set property "Cname":
	if typedInput.Cname != nil {
		cname := *typedInput.Cname
		record.Cname = &cname
	}

	// No error
	return nil
}

// AssignProperties_From_CnameRecord populates our CnameRecord from the provided source CnameRecord
func (record *CnameRecord) AssignProperties_From_CnameRecord(source *v20180501s.CnameRecord) error {

	// Cname
	record.Cname = genruntime.ClonePointerToString(source.Cname)

	// No error
	return nil
}

// AssignProperties_To_CnameRecord populates the provided destination CnameRecord from our CnameRecord
func (record *CnameRecord) AssignProperties_To_CnameRecord(destination *v20180501s.CnameRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Cname
	destination.Cname = genruntime.ClonePointerToString(record.Cname)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_CnameRecord_STATUS populates our CnameRecord from the provided source CnameRecord_STATUS
func (record *CnameRecord) Initialize_From_CnameRecord_STATUS(source *CnameRecord_STATUS) error {

	// Cname
	record.Cname = genruntime.ClonePointerToString(source.Cname)

	// No error
	return nil
}

// A CNAME record.
type CnameRecord_STATUS struct {
	// Cname: The canonical name for this CNAME record.
	Cname *string `json:"cname,omitempty"`
}

var _ genruntime.FromARMConverter = &CnameRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *CnameRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CnameRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *CnameRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CnameRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CnameRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Cname":
	if typedInput.Cname != nil {
		cname := *typedInput.Cname
		record.Cname = &cname
	}

	// No error
	return nil
}

// AssignProperties_From_CnameRecord_STATUS populates our CnameRecord_STATUS from the provided source CnameRecord_STATUS
func (record *CnameRecord_STATUS) AssignProperties_From_CnameRecord_STATUS(source *v20180501s.CnameRecord_STATUS) error {

	// Cname
	record.Cname = genruntime.ClonePointerToString(source.Cname)

	// No error
	return nil
}

// AssignProperties_To_CnameRecord_STATUS populates the provided destination CnameRecord_STATUS from our CnameRecord_STATUS
func (record *CnameRecord_STATUS) AssignProperties_To_CnameRecord_STATUS(destination *v20180501s.CnameRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Cname
	destination.Cname = genruntime.ClonePointerToString(record.Cname)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An MX record.
type MxRecord struct {
	// Exchange: The domain name of the mail host for this MX record.
	Exchange *string `json:"exchange,omitempty"`

	// Preference: The preference value for this MX record.
	Preference *int `json:"preference,omitempty"`
}

var _ genruntime.ARMTransformer = &MxRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *MxRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &MxRecord_ARM{}

	// Set property "Exchange":
	if record.Exchange != nil {
		exchange := *record.Exchange
		result.Exchange = &exchange
	}

	// Set property "Preference":
	if record.Preference != nil {
		preference := *record.Preference
		result.Preference = &preference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *MxRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MxRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *MxRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MxRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MxRecord_ARM, got %T", armInput)
	}

	// Set property "Exchange":
	if typedInput.Exchange != nil {
		exchange := *typedInput.Exchange
		record.Exchange = &exchange
	}

	// Set property "Preference":
	if typedInput.Preference != nil {
		preference := *typedInput.Preference
		record.Preference = &preference
	}

	// No error
	return nil
}

// AssignProperties_From_MxRecord populates our MxRecord from the provided source MxRecord
func (record *MxRecord) AssignProperties_From_MxRecord(source *v20180501s.MxRecord) error {

	// Exchange
	record.Exchange = genruntime.ClonePointerToString(source.Exchange)

	// Preference
	record.Preference = genruntime.ClonePointerToInt(source.Preference)

	// No error
	return nil
}

// AssignProperties_To_MxRecord populates the provided destination MxRecord from our MxRecord
func (record *MxRecord) AssignProperties_To_MxRecord(destination *v20180501s.MxRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Exchange
	destination.Exchange = genruntime.ClonePointerToString(record.Exchange)

	// Preference
	destination.Preference = genruntime.ClonePointerToInt(record.Preference)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_MxRecord_STATUS populates our MxRecord from the provided source MxRecord_STATUS
func (record *MxRecord) Initialize_From_MxRecord_STATUS(source *MxRecord_STATUS) error {

	// Exchange
	record.Exchange = genruntime.ClonePointerToString(source.Exchange)

	// Preference
	record.Preference = genruntime.ClonePointerToInt(source.Preference)

	// No error
	return nil
}

// An MX record.
type MxRecord_STATUS struct {
	// Exchange: The domain name of the mail host for this MX record.
	Exchange *string `json:"exchange,omitempty"`

	// Preference: The preference value for this MX record.
	Preference *int `json:"preference,omitempty"`
}

var _ genruntime.FromARMConverter = &MxRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *MxRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MxRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *MxRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MxRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MxRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Exchange":
	if typedInput.Exchange != nil {
		exchange := *typedInput.Exchange
		record.Exchange = &exchange
	}

	// Set property "Preference":
	if typedInput.Preference != nil {
		preference := *typedInput.Preference
		record.Preference = &preference
	}

	// No error
	return nil
}

// AssignProperties_From_MxRecord_STATUS populates our MxRecord_STATUS from the provided source MxRecord_STATUS
func (record *MxRecord_STATUS) AssignProperties_From_MxRecord_STATUS(source *v20180501s.MxRecord_STATUS) error {

	// Exchange
	record.Exchange = genruntime.ClonePointerToString(source.Exchange)

	// Preference
	record.Preference = genruntime.ClonePointerToInt(source.Preference)

	// No error
	return nil
}

// AssignProperties_To_MxRecord_STATUS populates the provided destination MxRecord_STATUS from our MxRecord_STATUS
func (record *MxRecord_STATUS) AssignProperties_To_MxRecord_STATUS(destination *v20180501s.MxRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Exchange
	destination.Exchange = genruntime.ClonePointerToString(record.Exchange)

	// Preference
	destination.Preference = genruntime.ClonePointerToInt(record.Preference)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An NS record.
type NsRecord struct {
	// Nsdname: The name server name for this NS record.
	Nsdname *string `json:"nsdname,omitempty"`
}

var _ genruntime.ARMTransformer = &NsRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *NsRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &NsRecord_ARM{}

	// Set property "Nsdname":
	if record.Nsdname != nil {
		nsdname := *record.Nsdname
		result.Nsdname = &nsdname
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *NsRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NsRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *NsRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NsRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NsRecord_ARM, got %T", armInput)
	}

	// Set property "Nsdname":
	if typedInput.Nsdname != nil {
		nsdname := *typedInput.Nsdname
		record.Nsdname = &nsdname
	}

	// No error
	return nil
}

// AssignProperties_From_NsRecord populates our NsRecord from the provided source NsRecord
func (record *NsRecord) AssignProperties_From_NsRecord(source *v20180501s.NsRecord) error {

	// Nsdname
	record.Nsdname = genruntime.ClonePointerToString(source.Nsdname)

	// No error
	return nil
}

// AssignProperties_To_NsRecord populates the provided destination NsRecord from our NsRecord
func (record *NsRecord) AssignProperties_To_NsRecord(destination *v20180501s.NsRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Nsdname
	destination.Nsdname = genruntime.ClonePointerToString(record.Nsdname)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_NsRecord_STATUS populates our NsRecord from the provided source NsRecord_STATUS
func (record *NsRecord) Initialize_From_NsRecord_STATUS(source *NsRecord_STATUS) error {

	// Nsdname
	record.Nsdname = genruntime.ClonePointerToString(source.Nsdname)

	// No error
	return nil
}

// An NS record.
type NsRecord_STATUS struct {
	// Nsdname: The name server name for this NS record.
	Nsdname *string `json:"nsdname,omitempty"`
}

var _ genruntime.FromARMConverter = &NsRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *NsRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NsRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *NsRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NsRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NsRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Nsdname":
	if typedInput.Nsdname != nil {
		nsdname := *typedInput.Nsdname
		record.Nsdname = &nsdname
	}

	// No error
	return nil
}

// AssignProperties_From_NsRecord_STATUS populates our NsRecord_STATUS from the provided source NsRecord_STATUS
func (record *NsRecord_STATUS) AssignProperties_From_NsRecord_STATUS(source *v20180501s.NsRecord_STATUS) error {

	// Nsdname
	record.Nsdname = genruntime.ClonePointerToString(source.Nsdname)

	// No error
	return nil
}

// AssignProperties_To_NsRecord_STATUS populates the provided destination NsRecord_STATUS from our NsRecord_STATUS
func (record *NsRecord_STATUS) AssignProperties_To_NsRecord_STATUS(destination *v20180501s.NsRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Nsdname
	destination.Nsdname = genruntime.ClonePointerToString(record.Nsdname)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// A PTR record.
type PtrRecord struct {
	// Ptrdname: The PTR target domain name for this PTR record.
	Ptrdname *string `json:"ptrdname,omitempty"`
}

var _ genruntime.ARMTransformer = &PtrRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *PtrRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &PtrRecord_ARM{}

	// Set property "Ptrdname":
	if record.Ptrdname != nil {
		ptrdname := *record.Ptrdname
		result.Ptrdname = &ptrdname
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *PtrRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PtrRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *PtrRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PtrRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PtrRecord_ARM, got %T", armInput)
	}

	// Set property "Ptrdname":
	if typedInput.Ptrdname != nil {
		ptrdname := *typedInput.Ptrdname
		record.Ptrdname = &ptrdname
	}

	// No error
	return nil
}

// AssignProperties_From_PtrRecord populates our PtrRecord from the provided source PtrRecord
func (record *PtrRecord) AssignProperties_From_PtrRecord(source *v20180501s.PtrRecord) error {

	// Ptrdname
	record.Ptrdname = genruntime.ClonePointerToString(source.Ptrdname)

	// No error
	return nil
}

// AssignProperties_To_PtrRecord populates the provided destination PtrRecord from our PtrRecord
func (record *PtrRecord) AssignProperties_To_PtrRecord(destination *v20180501s.PtrRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Ptrdname
	destination.Ptrdname = genruntime.ClonePointerToString(record.Ptrdname)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_PtrRecord_STATUS populates our PtrRecord from the provided source PtrRecord_STATUS
func (record *PtrRecord) Initialize_From_PtrRecord_STATUS(source *PtrRecord_STATUS) error {

	// Ptrdname
	record.Ptrdname = genruntime.ClonePointerToString(source.Ptrdname)

	// No error
	return nil
}

// A PTR record.
type PtrRecord_STATUS struct {
	// Ptrdname: The PTR target domain name for this PTR record.
	Ptrdname *string `json:"ptrdname,omitempty"`
}

var _ genruntime.FromARMConverter = &PtrRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *PtrRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PtrRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *PtrRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PtrRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PtrRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Ptrdname":
	if typedInput.Ptrdname != nil {
		ptrdname := *typedInput.Ptrdname
		record.Ptrdname = &ptrdname
	}

	// No error
	return nil
}

// AssignProperties_From_PtrRecord_STATUS populates our PtrRecord_STATUS from the provided source PtrRecord_STATUS
func (record *PtrRecord_STATUS) AssignProperties_From_PtrRecord_STATUS(source *v20180501s.PtrRecord_STATUS) error {

	// Ptrdname
	record.Ptrdname = genruntime.ClonePointerToString(source.Ptrdname)

	// No error
	return nil
}

// AssignProperties_To_PtrRecord_STATUS populates the provided destination PtrRecord_STATUS from our PtrRecord_STATUS
func (record *PtrRecord_STATUS) AssignProperties_To_PtrRecord_STATUS(destination *v20180501s.PtrRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Ptrdname
	destination.Ptrdname = genruntime.ClonePointerToString(record.Ptrdname)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An SOA record.
type SoaRecord struct {
	// Email: The email contact for this SOA record.
	Email *string `json:"email,omitempty"`

	// ExpireTime: The expire time for this SOA record.
	ExpireTime *int `json:"expireTime,omitempty"`

	// Host: The domain name of the authoritative name server for this SOA record.
	Host *string `json:"host,omitempty"`

	// MinimumTTL: The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTTL *int `json:"minimumTTL,omitempty"`

	// RefreshTime: The refresh value for this SOA record.
	RefreshTime *int `json:"refreshTime,omitempty"`

	// RetryTime: The retry time for this SOA record.
	RetryTime *int `json:"retryTime,omitempty"`

	// SerialNumber: The serial number for this SOA record.
	SerialNumber *int `json:"serialNumber,omitempty"`
}

var _ genruntime.ARMTransformer = &SoaRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *SoaRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &SoaRecord_ARM{}

	// Set property "Email":
	if record.Email != nil {
		email := *record.Email
		result.Email = &email
	}

	// Set property "ExpireTime":
	if record.ExpireTime != nil {
		expireTime := *record.ExpireTime
		result.ExpireTime = &expireTime
	}

	// Set property "Host":
	if record.Host != nil {
		host := *record.Host
		result.Host = &host
	}

	// Set property "MinimumTTL":
	if record.MinimumTTL != nil {
		minimumTTL := *record.MinimumTTL
		result.MinimumTTL = &minimumTTL
	}

	// Set property "RefreshTime":
	if record.RefreshTime != nil {
		refreshTime := *record.RefreshTime
		result.RefreshTime = &refreshTime
	}

	// Set property "RetryTime":
	if record.RetryTime != nil {
		retryTime := *record.RetryTime
		result.RetryTime = &retryTime
	}

	// Set property "SerialNumber":
	if record.SerialNumber != nil {
		serialNumber := *record.SerialNumber
		result.SerialNumber = &serialNumber
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *SoaRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SoaRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *SoaRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SoaRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SoaRecord_ARM, got %T", armInput)
	}

	// Set property "Email":
	if typedInput.Email != nil {
		email := *typedInput.Email
		record.Email = &email
	}

	// Set property "ExpireTime":
	if typedInput.ExpireTime != nil {
		expireTime := *typedInput.ExpireTime
		record.ExpireTime = &expireTime
	}

	// Set property "Host":
	if typedInput.Host != nil {
		host := *typedInput.Host
		record.Host = &host
	}

	// Set property "MinimumTTL":
	if typedInput.MinimumTTL != nil {
		minimumTTL := *typedInput.MinimumTTL
		record.MinimumTTL = &minimumTTL
	}

	// Set property "RefreshTime":
	if typedInput.RefreshTime != nil {
		refreshTime := *typedInput.RefreshTime
		record.RefreshTime = &refreshTime
	}

	// Set property "RetryTime":
	if typedInput.RetryTime != nil {
		retryTime := *typedInput.RetryTime
		record.RetryTime = &retryTime
	}

	// Set property "SerialNumber":
	if typedInput.SerialNumber != nil {
		serialNumber := *typedInput.SerialNumber
		record.SerialNumber = &serialNumber
	}

	// No error
	return nil
}

// AssignProperties_From_SoaRecord populates our SoaRecord from the provided source SoaRecord
func (record *SoaRecord) AssignProperties_From_SoaRecord(source *v20180501s.SoaRecord) error {

	// Email
	record.Email = genruntime.ClonePointerToString(source.Email)

	// ExpireTime
	record.ExpireTime = genruntime.ClonePointerToInt(source.ExpireTime)

	// Host
	record.Host = genruntime.ClonePointerToString(source.Host)

	// MinimumTTL
	record.MinimumTTL = genruntime.ClonePointerToInt(source.MinimumTTL)

	// RefreshTime
	record.RefreshTime = genruntime.ClonePointerToInt(source.RefreshTime)

	// RetryTime
	record.RetryTime = genruntime.ClonePointerToInt(source.RetryTime)

	// SerialNumber
	record.SerialNumber = genruntime.ClonePointerToInt(source.SerialNumber)

	// No error
	return nil
}

// AssignProperties_To_SoaRecord populates the provided destination SoaRecord from our SoaRecord
func (record *SoaRecord) AssignProperties_To_SoaRecord(destination *v20180501s.SoaRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Email
	destination.Email = genruntime.ClonePointerToString(record.Email)

	// ExpireTime
	destination.ExpireTime = genruntime.ClonePointerToInt(record.ExpireTime)

	// Host
	destination.Host = genruntime.ClonePointerToString(record.Host)

	// MinimumTTL
	destination.MinimumTTL = genruntime.ClonePointerToInt(record.MinimumTTL)

	// RefreshTime
	destination.RefreshTime = genruntime.ClonePointerToInt(record.RefreshTime)

	// RetryTime
	destination.RetryTime = genruntime.ClonePointerToInt(record.RetryTime)

	// SerialNumber
	destination.SerialNumber = genruntime.ClonePointerToInt(record.SerialNumber)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SoaRecord_STATUS populates our SoaRecord from the provided source SoaRecord_STATUS
func (record *SoaRecord) Initialize_From_SoaRecord_STATUS(source *SoaRecord_STATUS) error {

	// Email
	record.Email = genruntime.ClonePointerToString(source.Email)

	// ExpireTime
	record.ExpireTime = genruntime.ClonePointerToInt(source.ExpireTime)

	// Host
	record.Host = genruntime.ClonePointerToString(source.Host)

	// MinimumTTL
	record.MinimumTTL = genruntime.ClonePointerToInt(source.MinimumTTL)

	// RefreshTime
	record.RefreshTime = genruntime.ClonePointerToInt(source.RefreshTime)

	// RetryTime
	record.RetryTime = genruntime.ClonePointerToInt(source.RetryTime)

	// SerialNumber
	record.SerialNumber = genruntime.ClonePointerToInt(source.SerialNumber)

	// No error
	return nil
}

// An SOA record.
type SoaRecord_STATUS struct {
	// Email: The email contact for this SOA record.
	Email *string `json:"email,omitempty"`

	// ExpireTime: The expire time for this SOA record.
	ExpireTime *int `json:"expireTime,omitempty"`

	// Host: The domain name of the authoritative name server for this SOA record.
	Host *string `json:"host,omitempty"`

	// MinimumTTL: The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTTL *int `json:"minimumTTL,omitempty"`

	// RefreshTime: The refresh value for this SOA record.
	RefreshTime *int `json:"refreshTime,omitempty"`

	// RetryTime: The retry time for this SOA record.
	RetryTime *int `json:"retryTime,omitempty"`

	// SerialNumber: The serial number for this SOA record.
	SerialNumber *int `json:"serialNumber,omitempty"`
}

var _ genruntime.FromARMConverter = &SoaRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *SoaRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SoaRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *SoaRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SoaRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SoaRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Email":
	if typedInput.Email != nil {
		email := *typedInput.Email
		record.Email = &email
	}

	// Set property "ExpireTime":
	if typedInput.ExpireTime != nil {
		expireTime := *typedInput.ExpireTime
		record.ExpireTime = &expireTime
	}

	// Set property "Host":
	if typedInput.Host != nil {
		host := *typedInput.Host
		record.Host = &host
	}

	// Set property "MinimumTTL":
	if typedInput.MinimumTTL != nil {
		minimumTTL := *typedInput.MinimumTTL
		record.MinimumTTL = &minimumTTL
	}

	// Set property "RefreshTime":
	if typedInput.RefreshTime != nil {
		refreshTime := *typedInput.RefreshTime
		record.RefreshTime = &refreshTime
	}

	// Set property "RetryTime":
	if typedInput.RetryTime != nil {
		retryTime := *typedInput.RetryTime
		record.RetryTime = &retryTime
	}

	// Set property "SerialNumber":
	if typedInput.SerialNumber != nil {
		serialNumber := *typedInput.SerialNumber
		record.SerialNumber = &serialNumber
	}

	// No error
	return nil
}

// AssignProperties_From_SoaRecord_STATUS populates our SoaRecord_STATUS from the provided source SoaRecord_STATUS
func (record *SoaRecord_STATUS) AssignProperties_From_SoaRecord_STATUS(source *v20180501s.SoaRecord_STATUS) error {

	// Email
	record.Email = genruntime.ClonePointerToString(source.Email)

	// ExpireTime
	record.ExpireTime = genruntime.ClonePointerToInt(source.ExpireTime)

	// Host
	record.Host = genruntime.ClonePointerToString(source.Host)

	// MinimumTTL
	record.MinimumTTL = genruntime.ClonePointerToInt(source.MinimumTTL)

	// RefreshTime
	record.RefreshTime = genruntime.ClonePointerToInt(source.RefreshTime)

	// RetryTime
	record.RetryTime = genruntime.ClonePointerToInt(source.RetryTime)

	// SerialNumber
	record.SerialNumber = genruntime.ClonePointerToInt(source.SerialNumber)

	// No error
	return nil
}

// AssignProperties_To_SoaRecord_STATUS populates the provided destination SoaRecord_STATUS from our SoaRecord_STATUS
func (record *SoaRecord_STATUS) AssignProperties_To_SoaRecord_STATUS(destination *v20180501s.SoaRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Email
	destination.Email = genruntime.ClonePointerToString(record.Email)

	// ExpireTime
	destination.ExpireTime = genruntime.ClonePointerToInt(record.ExpireTime)

	// Host
	destination.Host = genruntime.ClonePointerToString(record.Host)

	// MinimumTTL
	destination.MinimumTTL = genruntime.ClonePointerToInt(record.MinimumTTL)

	// RefreshTime
	destination.RefreshTime = genruntime.ClonePointerToInt(record.RefreshTime)

	// RetryTime
	destination.RetryTime = genruntime.ClonePointerToInt(record.RetryTime)

	// SerialNumber
	destination.SerialNumber = genruntime.ClonePointerToInt(record.SerialNumber)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An SRV record.
type SrvRecord struct {
	// Port: The port value for this SRV record.
	Port *int `json:"port,omitempty"`

	// Priority: The priority value for this SRV record.
	Priority *int `json:"priority,omitempty"`

	// Target: The target domain name for this SRV record.
	Target *string `json:"target,omitempty"`

	// Weight: The weight value for this SRV record.
	Weight *int `json:"weight,omitempty"`
}

var _ genruntime.ARMTransformer = &SrvRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *SrvRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &SrvRecord_ARM{}

	// Set property "Port":
	if record.Port != nil {
		port := *record.Port
		result.Port = &port
	}

	// Set property "Priority":
	if record.Priority != nil {
		priority := *record.Priority
		result.Priority = &priority
	}

	// Set property "Target":
	if record.Target != nil {
		target := *record.Target
		result.Target = &target
	}

	// Set property "Weight":
	if record.Weight != nil {
		weight := *record.Weight
		result.Weight = &weight
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *SrvRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SrvRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *SrvRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SrvRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SrvRecord_ARM, got %T", armInput)
	}

	// Set property "Port":
	if typedInput.Port != nil {
		port := *typedInput.Port
		record.Port = &port
	}

	// Set property "Priority":
	if typedInput.Priority != nil {
		priority := *typedInput.Priority
		record.Priority = &priority
	}

	// Set property "Target":
	if typedInput.Target != nil {
		target := *typedInput.Target
		record.Target = &target
	}

	// Set property "Weight":
	if typedInput.Weight != nil {
		weight := *typedInput.Weight
		record.Weight = &weight
	}

	// No error
	return nil
}

// AssignProperties_From_SrvRecord populates our SrvRecord from the provided source SrvRecord
func (record *SrvRecord) AssignProperties_From_SrvRecord(source *v20180501s.SrvRecord) error {

	// Port
	record.Port = genruntime.ClonePointerToInt(source.Port)

	// Priority
	record.Priority = genruntime.ClonePointerToInt(source.Priority)

	// Target
	record.Target = genruntime.ClonePointerToString(source.Target)

	// Weight
	record.Weight = genruntime.ClonePointerToInt(source.Weight)

	// No error
	return nil
}

// AssignProperties_To_SrvRecord populates the provided destination SrvRecord from our SrvRecord
func (record *SrvRecord) AssignProperties_To_SrvRecord(destination *v20180501s.SrvRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Port
	destination.Port = genruntime.ClonePointerToInt(record.Port)

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(record.Priority)

	// Target
	destination.Target = genruntime.ClonePointerToString(record.Target)

	// Weight
	destination.Weight = genruntime.ClonePointerToInt(record.Weight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SrvRecord_STATUS populates our SrvRecord from the provided source SrvRecord_STATUS
func (record *SrvRecord) Initialize_From_SrvRecord_STATUS(source *SrvRecord_STATUS) error {

	// Port
	record.Port = genruntime.ClonePointerToInt(source.Port)

	// Priority
	record.Priority = genruntime.ClonePointerToInt(source.Priority)

	// Target
	record.Target = genruntime.ClonePointerToString(source.Target)

	// Weight
	record.Weight = genruntime.ClonePointerToInt(source.Weight)

	// No error
	return nil
}

// An SRV record.
type SrvRecord_STATUS struct {
	// Port: The port value for this SRV record.
	Port *int `json:"port,omitempty"`

	// Priority: The priority value for this SRV record.
	Priority *int `json:"priority,omitempty"`

	// Target: The target domain name for this SRV record.
	Target *string `json:"target,omitempty"`

	// Weight: The weight value for this SRV record.
	Weight *int `json:"weight,omitempty"`
}

var _ genruntime.FromARMConverter = &SrvRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *SrvRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SrvRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *SrvRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SrvRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SrvRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Port":
	if typedInput.Port != nil {
		port := *typedInput.Port
		record.Port = &port
	}

	// Set property "Priority":
	if typedInput.Priority != nil {
		priority := *typedInput.Priority
		record.Priority = &priority
	}

	// Set property "Target":
	if typedInput.Target != nil {
		target := *typedInput.Target
		record.Target = &target
	}

	// Set property "Weight":
	if typedInput.Weight != nil {
		weight := *typedInput.Weight
		record.Weight = &weight
	}

	// No error
	return nil
}

// AssignProperties_From_SrvRecord_STATUS populates our SrvRecord_STATUS from the provided source SrvRecord_STATUS
func (record *SrvRecord_STATUS) AssignProperties_From_SrvRecord_STATUS(source *v20180501s.SrvRecord_STATUS) error {

	// Port
	record.Port = genruntime.ClonePointerToInt(source.Port)

	// Priority
	record.Priority = genruntime.ClonePointerToInt(source.Priority)

	// Target
	record.Target = genruntime.ClonePointerToString(source.Target)

	// Weight
	record.Weight = genruntime.ClonePointerToInt(source.Weight)

	// No error
	return nil
}

// AssignProperties_To_SrvRecord_STATUS populates the provided destination SrvRecord_STATUS from our SrvRecord_STATUS
func (record *SrvRecord_STATUS) AssignProperties_To_SrvRecord_STATUS(destination *v20180501s.SrvRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Port
	destination.Port = genruntime.ClonePointerToInt(record.Port)

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(record.Priority)

	// Target
	destination.Target = genruntime.ClonePointerToString(record.Target)

	// Weight
	destination.Weight = genruntime.ClonePointerToInt(record.Weight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// A TXT record.
type TxtRecord struct {
	// Value: The text value of this TXT record.
	Value []string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &TxtRecord{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (record *TxtRecord) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if record == nil {
		return nil, nil
	}
	result := &TxtRecord_ARM{}

	// Set property "Value":
	for _, item := range record.Value {
		result.Value = append(result.Value, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *TxtRecord) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TxtRecord_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *TxtRecord) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TxtRecord_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TxtRecord_ARM, got %T", armInput)
	}

	// Set property "Value":
	for _, item := range typedInput.Value {
		record.Value = append(record.Value, item)
	}

	// No error
	return nil
}

// AssignProperties_From_TxtRecord populates our TxtRecord from the provided source TxtRecord
func (record *TxtRecord) AssignProperties_From_TxtRecord(source *v20180501s.TxtRecord) error {

	// Value
	record.Value = genruntime.CloneSliceOfString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_TxtRecord populates the provided destination TxtRecord from our TxtRecord
func (record *TxtRecord) AssignProperties_To_TxtRecord(destination *v20180501s.TxtRecord) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Value
	destination.Value = genruntime.CloneSliceOfString(record.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_TxtRecord_STATUS populates our TxtRecord from the provided source TxtRecord_STATUS
func (record *TxtRecord) Initialize_From_TxtRecord_STATUS(source *TxtRecord_STATUS) error {

	// Value
	record.Value = genruntime.CloneSliceOfString(source.Value)

	// No error
	return nil
}

// A TXT record.
type TxtRecord_STATUS struct {
	// Value: The text value of this TXT record.
	Value []string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &TxtRecord_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (record *TxtRecord_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TxtRecord_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (record *TxtRecord_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TxtRecord_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TxtRecord_STATUS_ARM, got %T", armInput)
	}

	// Set property "Value":
	for _, item := range typedInput.Value {
		record.Value = append(record.Value, item)
	}

	// No error
	return nil
}

// AssignProperties_From_TxtRecord_STATUS populates our TxtRecord_STATUS from the provided source TxtRecord_STATUS
func (record *TxtRecord_STATUS) AssignProperties_From_TxtRecord_STATUS(source *v20180501s.TxtRecord_STATUS) error {

	// Value
	record.Value = genruntime.CloneSliceOfString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_TxtRecord_STATUS populates the provided destination TxtRecord_STATUS from our TxtRecord_STATUS
func (record *TxtRecord_STATUS) AssignProperties_To_TxtRecord_STATUS(destination *v20180501s.TxtRecord_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Value
	destination.Value = genruntime.CloneSliceOfString(record.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&DnsZonesAAAARecord{}, &DnsZonesAAAARecordList{})
}
