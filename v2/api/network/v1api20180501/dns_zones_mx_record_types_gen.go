// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20180501

import (
	"fmt"
	v1api20180501s "github.com/Azure/azure-service-operator/v2/api/network/v1api20180501storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /dns/resource-manager/Microsoft.Network/stable/2018-05-01/dns.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/MX/{relativeRecordSetName}
type DnsZonesMXRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsZones_MX_Spec   `json:"spec,omitempty"`
	Status            DnsZones_MX_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &DnsZonesMXRecord{}

// GetConditions returns the conditions of the resource
func (record *DnsZonesMXRecord) GetConditions() conditions.Conditions {
	return record.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (record *DnsZonesMXRecord) SetConditions(conditions conditions.Conditions) {
	record.Status.Conditions = conditions
}

var _ conversion.Convertible = &DnsZonesMXRecord{}

// ConvertFrom populates our DnsZonesMXRecord from the provided hub DnsZonesMXRecord
func (record *DnsZonesMXRecord) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1api20180501s.DnsZonesMXRecord)
	if !ok {
		return fmt.Errorf("expected network/v1api20180501storage/DnsZonesMXRecord but received %T instead", hub)
	}

	return record.AssignProperties_From_DnsZonesMXRecord(source)
}

// ConvertTo populates the provided hub DnsZonesMXRecord from our DnsZonesMXRecord
func (record *DnsZonesMXRecord) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1api20180501s.DnsZonesMXRecord)
	if !ok {
		return fmt.Errorf("expected network/v1api20180501storage/DnsZonesMXRecord but received %T instead", hub)
	}

	return record.AssignProperties_To_DnsZonesMXRecord(destination)
}

// +kubebuilder:webhook:path=/mutate-network-azure-com-v1api20180501-dnszonesmxrecord,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnszonesmxrecords,verbs=create;update,versions=v1api20180501,name=default.v1api20180501.dnszonesmxrecords.network.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &DnsZonesMXRecord{}

// Default applies defaults to the DnsZonesMXRecord resource
func (record *DnsZonesMXRecord) Default() {
	record.defaultImpl()
	var temp any = record
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (record *DnsZonesMXRecord) defaultAzureName() {
	if record.Spec.AzureName == "" {
		record.Spec.AzureName = record.Name
	}
}

// defaultImpl applies the code generated defaults to the DnsZonesMXRecord resource
func (record *DnsZonesMXRecord) defaultImpl() { record.defaultAzureName() }

var _ genruntime.ImportableResource = &DnsZonesMXRecord{}

// InitializeSpec initializes the spec for this resource from the given status
func (record *DnsZonesMXRecord) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*DnsZones_MX_STATUS); ok {
		return record.Spec.Initialize_From_DnsZones_MX_STATUS(s)
	}

	return fmt.Errorf("expected Status of type DnsZones_MX_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &DnsZonesMXRecord{}

// AzureName returns the Azure name of the resource
func (record *DnsZonesMXRecord) AzureName() string {
	return record.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2018-05-01"
func (record DnsZonesMXRecord) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (record *DnsZonesMXRecord) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (record *DnsZonesMXRecord) GetSpec() genruntime.ConvertibleSpec {
	return &record.Spec
}

// GetStatus returns the status of this resource
func (record *DnsZonesMXRecord) GetStatus() genruntime.ConvertibleStatus {
	return &record.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/dnsZones/MX"
func (record *DnsZonesMXRecord) GetType() string {
	return "Microsoft.Network/dnsZones/MX"
}

// NewEmptyStatus returns a new empty (blank) status
func (record *DnsZonesMXRecord) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DnsZones_MX_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (record *DnsZonesMXRecord) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(record.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  record.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (record *DnsZonesMXRecord) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DnsZones_MX_STATUS); ok {
		record.Status = *st
		return nil
	}

	// Convert status to required version
	var st DnsZones_MX_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	record.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-azure-com-v1api20180501-dnszonesmxrecord,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.azure.com,resources=dnszonesmxrecords,verbs=create;update,versions=v1api20180501,name=validate.v1api20180501.dnszonesmxrecords.network.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &DnsZonesMXRecord{}

// ValidateCreate validates the creation of the resource
func (record *DnsZonesMXRecord) ValidateCreate() error {
	validations := record.createValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (record *DnsZonesMXRecord) ValidateDelete() error {
	validations := record.deleteValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (record *DnsZonesMXRecord) ValidateUpdate(old runtime.Object) error {
	validations := record.updateValidations()
	var temp any = record
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (record *DnsZonesMXRecord) createValidations() []func() error {
	return []func() error{record.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (record *DnsZonesMXRecord) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (record *DnsZonesMXRecord) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return record.validateResourceReferences()
		},
		record.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (record *DnsZonesMXRecord) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&record.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (record *DnsZonesMXRecord) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*DnsZonesMXRecord)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, record)
}

// AssignProperties_From_DnsZonesMXRecord populates our DnsZonesMXRecord from the provided source DnsZonesMXRecord
func (record *DnsZonesMXRecord) AssignProperties_From_DnsZonesMXRecord(source *v1api20180501s.DnsZonesMXRecord) error {

	// ObjectMeta
	record.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DnsZones_MX_Spec
	err := spec.AssignProperties_From_DnsZones_MX_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsZones_MX_Spec() to populate field Spec")
	}
	record.Spec = spec

	// Status
	var status DnsZones_MX_STATUS
	err = status.AssignProperties_From_DnsZones_MX_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DnsZones_MX_STATUS() to populate field Status")
	}
	record.Status = status

	// No error
	return nil
}

// AssignProperties_To_DnsZonesMXRecord populates the provided destination DnsZonesMXRecord from our DnsZonesMXRecord
func (record *DnsZonesMXRecord) AssignProperties_To_DnsZonesMXRecord(destination *v1api20180501s.DnsZonesMXRecord) error {

	// ObjectMeta
	destination.ObjectMeta = *record.ObjectMeta.DeepCopy()

	// Spec
	var spec v1api20180501s.DnsZones_MX_Spec
	err := record.Spec.AssignProperties_To_DnsZones_MX_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsZones_MX_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1api20180501s.DnsZones_MX_STATUS
	err = record.Status.AssignProperties_To_DnsZones_MX_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DnsZones_MX_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (record *DnsZonesMXRecord) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: record.Spec.OriginalVersion(),
		Kind:    "DnsZonesMXRecord",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /dns/resource-manager/Microsoft.Network/stable/2018-05-01/dns.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/MX/{relativeRecordSetName}
type DnsZonesMXRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsZonesMXRecord `json:"items"`
}

type DnsZones_MX_Spec struct {
	// AAAARecords: The list of AAAA records in the record set.
	AAAARecords []AaaaRecord `json:"AAAARecords,omitempty"`

	// ARecords: The list of A records in the record set.
	ARecords []ARecord `json:"ARecords,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CNAMERecord: The CNAME record in the  record set.
	CNAMERecord *CnameRecord `json:"CNAMERecord,omitempty"`

	// CaaRecords: The list of CAA records in the record set.
	CaaRecords []CaaRecord `json:"caaRecords,omitempty"`

	// MXRecords: The list of MX records in the record set.
	MXRecords []MxRecord `json:"MXRecords,omitempty"`

	// Metadata: The metadata attached to the record set.
	Metadata map[string]string `json:"metadata,omitempty"`

	// NSRecords: The list of NS records in the record set.
	NSRecords []NsRecord `json:"NSRecords,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.azure.com/DnsZone resource
	Owner *genruntime.KnownResourceReference `group:"network.azure.com" json:"owner,omitempty" kind:"DnsZone"`

	// PTRRecords: The list of PTR records in the record set.
	PTRRecords []PtrRecord `json:"PTRRecords,omitempty"`

	// SOARecord: The SOA record in the record set.
	SOARecord *SoaRecord `json:"SOARecord,omitempty"`

	// SRVRecords: The list of SRV records in the record set.
	SRVRecords []SrvRecord `json:"SRVRecords,omitempty"`

	// TTL: The TTL (time-to-live) of the records in the record set.
	TTL *int `json:"TTL,omitempty"`

	// TXTRecords: The list of TXT records in the record set.
	TXTRecords []TxtRecord `json:"TXTRecords,omitempty"`

	// TargetResource: A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResource `json:"targetResource,omitempty"`
}

var _ genruntime.ARMTransformer = &DnsZones_MX_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (zonesMX *DnsZones_MX_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if zonesMX == nil {
		return nil, nil
	}
	result := &DnsZones_MX_Spec_ARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if zonesMX.AAAARecords != nil ||
		zonesMX.ARecords != nil ||
		zonesMX.CNAMERecord != nil ||
		zonesMX.CaaRecords != nil ||
		zonesMX.MXRecords != nil ||
		zonesMX.Metadata != nil ||
		zonesMX.NSRecords != nil ||
		zonesMX.PTRRecords != nil ||
		zonesMX.SOARecord != nil ||
		zonesMX.SRVRecords != nil ||
		zonesMX.TTL != nil ||
		zonesMX.TXTRecords != nil ||
		zonesMX.TargetResource != nil {
		result.Properties = &RecordSetProperties_ARM{}
	}
	for _, item := range zonesMX.AAAARecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.AAAARecords = append(result.Properties.AAAARecords, *item_ARM.(*AaaaRecord_ARM))
	}
	for _, item := range zonesMX.ARecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ARecords = append(result.Properties.ARecords, *item_ARM.(*ARecord_ARM))
	}
	if zonesMX.CNAMERecord != nil {
		cnameRecord_ARM, err := (*zonesMX.CNAMERecord).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cnameRecord := *cnameRecord_ARM.(*CnameRecord_ARM)
		result.Properties.CNAMERecord = &cnameRecord
	}
	for _, item := range zonesMX.CaaRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.CaaRecords = append(result.Properties.CaaRecords, *item_ARM.(*CaaRecord_ARM))
	}
	for _, item := range zonesMX.MXRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.MXRecords = append(result.Properties.MXRecords, *item_ARM.(*MxRecord_ARM))
	}
	if zonesMX.Metadata != nil {
		result.Properties.Metadata = make(map[string]string, len(zonesMX.Metadata))
		for key, value := range zonesMX.Metadata {
			result.Properties.Metadata[key] = value
		}
	}
	for _, item := range zonesMX.NSRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.NSRecords = append(result.Properties.NSRecords, *item_ARM.(*NsRecord_ARM))
	}
	for _, item := range zonesMX.PTRRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.PTRRecords = append(result.Properties.PTRRecords, *item_ARM.(*PtrRecord_ARM))
	}
	if zonesMX.SOARecord != nil {
		soaRecord_ARM, err := (*zonesMX.SOARecord).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		soaRecord := *soaRecord_ARM.(*SoaRecord_ARM)
		result.Properties.SOARecord = &soaRecord
	}
	for _, item := range zonesMX.SRVRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.SRVRecords = append(result.Properties.SRVRecords, *item_ARM.(*SrvRecord_ARM))
	}
	if zonesMX.TTL != nil {
		ttl := *zonesMX.TTL
		result.Properties.TTL = &ttl
	}
	for _, item := range zonesMX.TXTRecords {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.TXTRecords = append(result.Properties.TXTRecords, *item_ARM.(*TxtRecord_ARM))
	}
	if zonesMX.TargetResource != nil {
		targetResource_ARM, err := (*zonesMX.TargetResource).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		targetResource := *targetResource_ARM.(*SubResource_ARM)
		result.Properties.TargetResource = &targetResource
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (zonesMX *DnsZones_MX_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DnsZones_MX_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (zonesMX *DnsZones_MX_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DnsZones_MX_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DnsZones_MX_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AAAARecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AAAARecords {
			var item1 AaaaRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.AAAARecords = append(zonesMX.AAAARecords, item1)
		}
	}

	// Set property ‘ARecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ARecords {
			var item1 ARecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.ARecords = append(zonesMX.ARecords, item1)
		}
	}

	// Set property ‘AzureName’:
	zonesMX.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CNAMERecord’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CNAMERecord != nil {
			var cnameRecord1 CnameRecord
			err := cnameRecord1.PopulateFromARM(owner, *typedInput.Properties.CNAMERecord)
			if err != nil {
				return err
			}
			cnameRecord := cnameRecord1
			zonesMX.CNAMERecord = &cnameRecord
		}
	}

	// Set property ‘CaaRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.CaaRecords {
			var item1 CaaRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.CaaRecords = append(zonesMX.CaaRecords, item1)
		}
	}

	// Set property ‘MXRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.MXRecords {
			var item1 MxRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.MXRecords = append(zonesMX.MXRecords, item1)
		}
	}

	// Set property ‘Metadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			zonesMX.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				zonesMX.Metadata[key] = value
			}
		}
	}

	// Set property ‘NSRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NSRecords {
			var item1 NsRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.NSRecords = append(zonesMX.NSRecords, item1)
		}
	}

	// Set property ‘Owner’:
	zonesMX.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘PTRRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PTRRecords {
			var item1 PtrRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.PTRRecords = append(zonesMX.PTRRecords, item1)
		}
	}

	// Set property ‘SOARecord’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SOARecord != nil {
			var soaRecord1 SoaRecord
			err := soaRecord1.PopulateFromARM(owner, *typedInput.Properties.SOARecord)
			if err != nil {
				return err
			}
			soaRecord := soaRecord1
			zonesMX.SOARecord = &soaRecord
		}
	}

	// Set property ‘SRVRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SRVRecords {
			var item1 SrvRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.SRVRecords = append(zonesMX.SRVRecords, item1)
		}
	}

	// Set property ‘TTL’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TTL != nil {
			ttl := *typedInput.Properties.TTL
			zonesMX.TTL = &ttl
		}
	}

	// Set property ‘TXTRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TXTRecords {
			var item1 TxtRecord
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.TXTRecords = append(zonesMX.TXTRecords, item1)
		}
	}

	// Set property ‘TargetResource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetResource != nil {
			var targetResource1 SubResource
			err := targetResource1.PopulateFromARM(owner, *typedInput.Properties.TargetResource)
			if err != nil {
				return err
			}
			targetResource := targetResource1
			zonesMX.TargetResource = &targetResource
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DnsZones_MX_Spec{}

// ConvertSpecFrom populates our DnsZones_MX_Spec from the provided source
func (zonesMX *DnsZones_MX_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1api20180501s.DnsZones_MX_Spec)
	if ok {
		// Populate our instance from source
		return zonesMX.AssignProperties_From_DnsZones_MX_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1api20180501s.DnsZones_MX_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = zonesMX.AssignProperties_From_DnsZones_MX_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DnsZones_MX_Spec
func (zonesMX *DnsZones_MX_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1api20180501s.DnsZones_MX_Spec)
	if ok {
		// Populate destination from our instance
		return zonesMX.AssignProperties_To_DnsZones_MX_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20180501s.DnsZones_MX_Spec{}
	err := zonesMX.AssignProperties_To_DnsZones_MX_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_DnsZones_MX_Spec populates our DnsZones_MX_Spec from the provided source DnsZones_MX_Spec
func (zonesMX *DnsZones_MX_Spec) AssignProperties_From_DnsZones_MX_Spec(source *v1api20180501s.DnsZones_MX_Spec) error {

	// AAAARecords
	if source.AAAARecords != nil {
		aaaaRecordList := make([]AaaaRecord, len(source.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord
			err := aaaaRecord.AssignProperties_From_AaaaRecord(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AaaaRecord() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		zonesMX.AAAARecords = aaaaRecordList
	} else {
		zonesMX.AAAARecords = nil
	}

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord
			err := aRecord.AssignProperties_From_ARecord(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ARecord() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		zonesMX.ARecords = aRecordList
	} else {
		zonesMX.ARecords = nil
	}

	// AzureName
	zonesMX.AzureName = source.AzureName

	// CNAMERecord
	if source.CNAMERecord != nil {
		var cnameRecord CnameRecord
		err := cnameRecord.AssignProperties_From_CnameRecord(source.CNAMERecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CnameRecord() to populate field CNAMERecord")
		}
		zonesMX.CNAMERecord = &cnameRecord
	} else {
		zonesMX.CNAMERecord = nil
	}

	// CaaRecords
	if source.CaaRecords != nil {
		caaRecordList := make([]CaaRecord, len(source.CaaRecords))
		for caaRecordIndex, caaRecordItem := range source.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord CaaRecord
			err := caaRecord.AssignProperties_From_CaaRecord(&caaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CaaRecord() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		zonesMX.CaaRecords = caaRecordList
	} else {
		zonesMX.CaaRecords = nil
	}

	// MXRecords
	if source.MXRecords != nil {
		mxRecordList := make([]MxRecord, len(source.MXRecords))
		for mxRecordIndex, mxRecordItem := range source.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord
			err := mxRecord.AssignProperties_From_MxRecord(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_MxRecord() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		zonesMX.MXRecords = mxRecordList
	} else {
		zonesMX.MXRecords = nil
	}

	// Metadata
	zonesMX.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// NSRecords
	if source.NSRecords != nil {
		nsRecordList := make([]NsRecord, len(source.NSRecords))
		for nsRecordIndex, nsRecordItem := range source.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord NsRecord
			err := nsRecord.AssignProperties_From_NsRecord(&nsRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_NsRecord() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		zonesMX.NSRecords = nsRecordList
	} else {
		zonesMX.NSRecords = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		zonesMX.Owner = &owner
	} else {
		zonesMX.Owner = nil
	}

	// PTRRecords
	if source.PTRRecords != nil {
		ptrRecordList := make([]PtrRecord, len(source.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord
			err := ptrRecord.AssignProperties_From_PtrRecord(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PtrRecord() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		zonesMX.PTRRecords = ptrRecordList
	} else {
		zonesMX.PTRRecords = nil
	}

	// SOARecord
	if source.SOARecord != nil {
		var soaRecord SoaRecord
		err := soaRecord.AssignProperties_From_SoaRecord(source.SOARecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SoaRecord() to populate field SOARecord")
		}
		zonesMX.SOARecord = &soaRecord
	} else {
		zonesMX.SOARecord = nil
	}

	// SRVRecords
	if source.SRVRecords != nil {
		srvRecordList := make([]SrvRecord, len(source.SRVRecords))
		for srvRecordIndex, srvRecordItem := range source.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord
			err := srvRecord.AssignProperties_From_SrvRecord(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SrvRecord() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		zonesMX.SRVRecords = srvRecordList
	} else {
		zonesMX.SRVRecords = nil
	}

	// TTL
	zonesMX.TTL = genruntime.ClonePointerToInt(source.TTL)

	// TXTRecords
	if source.TXTRecords != nil {
		txtRecordList := make([]TxtRecord, len(source.TXTRecords))
		for txtRecordIndex, txtRecordItem := range source.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord
			err := txtRecord.AssignProperties_From_TxtRecord(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TxtRecord() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		zonesMX.TXTRecords = txtRecordList
	} else {
		zonesMX.TXTRecords = nil
	}

	// TargetResource
	if source.TargetResource != nil {
		var targetResource SubResource
		err := targetResource.AssignProperties_From_SubResource(source.TargetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource() to populate field TargetResource")
		}
		zonesMX.TargetResource = &targetResource
	} else {
		zonesMX.TargetResource = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DnsZones_MX_Spec populates the provided destination DnsZones_MX_Spec from our DnsZones_MX_Spec
func (zonesMX *DnsZones_MX_Spec) AssignProperties_To_DnsZones_MX_Spec(destination *v1api20180501s.DnsZones_MX_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AAAARecords
	if zonesMX.AAAARecords != nil {
		aaaaRecordList := make([]v1api20180501s.AaaaRecord, len(zonesMX.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range zonesMX.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord v1api20180501s.AaaaRecord
			err := aaaaRecordItem.AssignProperties_To_AaaaRecord(&aaaaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AaaaRecord() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		destination.AAAARecords = aaaaRecordList
	} else {
		destination.AAAARecords = nil
	}

	// ARecords
	if zonesMX.ARecords != nil {
		aRecordList := make([]v1api20180501s.ARecord, len(zonesMX.ARecords))
		for aRecordIndex, aRecordItem := range zonesMX.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord v1api20180501s.ARecord
			err := aRecordItem.AssignProperties_To_ARecord(&aRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ARecord() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		destination.ARecords = aRecordList
	} else {
		destination.ARecords = nil
	}

	// AzureName
	destination.AzureName = zonesMX.AzureName

	// CNAMERecord
	if zonesMX.CNAMERecord != nil {
		var cnameRecord v1api20180501s.CnameRecord
		err := zonesMX.CNAMERecord.AssignProperties_To_CnameRecord(&cnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CnameRecord() to populate field CNAMERecord")
		}
		destination.CNAMERecord = &cnameRecord
	} else {
		destination.CNAMERecord = nil
	}

	// CaaRecords
	if zonesMX.CaaRecords != nil {
		caaRecordList := make([]v1api20180501s.CaaRecord, len(zonesMX.CaaRecords))
		for caaRecordIndex, caaRecordItem := range zonesMX.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord v1api20180501s.CaaRecord
			err := caaRecordItem.AssignProperties_To_CaaRecord(&caaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CaaRecord() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		destination.CaaRecords = caaRecordList
	} else {
		destination.CaaRecords = nil
	}

	// MXRecords
	if zonesMX.MXRecords != nil {
		mxRecordList := make([]v1api20180501s.MxRecord, len(zonesMX.MXRecords))
		for mxRecordIndex, mxRecordItem := range zonesMX.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord v1api20180501s.MxRecord
			err := mxRecordItem.AssignProperties_To_MxRecord(&mxRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_MxRecord() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		destination.MXRecords = mxRecordList
	} else {
		destination.MXRecords = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(zonesMX.Metadata)

	// NSRecords
	if zonesMX.NSRecords != nil {
		nsRecordList := make([]v1api20180501s.NsRecord, len(zonesMX.NSRecords))
		for nsRecordIndex, nsRecordItem := range zonesMX.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord v1api20180501s.NsRecord
			err := nsRecordItem.AssignProperties_To_NsRecord(&nsRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_NsRecord() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		destination.NSRecords = nsRecordList
	} else {
		destination.NSRecords = nil
	}

	// OriginalVersion
	destination.OriginalVersion = zonesMX.OriginalVersion()

	// Owner
	if zonesMX.Owner != nil {
		owner := zonesMX.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PTRRecords
	if zonesMX.PTRRecords != nil {
		ptrRecordList := make([]v1api20180501s.PtrRecord, len(zonesMX.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range zonesMX.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord v1api20180501s.PtrRecord
			err := ptrRecordItem.AssignProperties_To_PtrRecord(&ptrRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PtrRecord() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		destination.PTRRecords = ptrRecordList
	} else {
		destination.PTRRecords = nil
	}

	// SOARecord
	if zonesMX.SOARecord != nil {
		var soaRecord v1api20180501s.SoaRecord
		err := zonesMX.SOARecord.AssignProperties_To_SoaRecord(&soaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SoaRecord() to populate field SOARecord")
		}
		destination.SOARecord = &soaRecord
	} else {
		destination.SOARecord = nil
	}

	// SRVRecords
	if zonesMX.SRVRecords != nil {
		srvRecordList := make([]v1api20180501s.SrvRecord, len(zonesMX.SRVRecords))
		for srvRecordIndex, srvRecordItem := range zonesMX.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord v1api20180501s.SrvRecord
			err := srvRecordItem.AssignProperties_To_SrvRecord(&srvRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SrvRecord() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		destination.SRVRecords = srvRecordList
	} else {
		destination.SRVRecords = nil
	}

	// TTL
	destination.TTL = genruntime.ClonePointerToInt(zonesMX.TTL)

	// TXTRecords
	if zonesMX.TXTRecords != nil {
		txtRecordList := make([]v1api20180501s.TxtRecord, len(zonesMX.TXTRecords))
		for txtRecordIndex, txtRecordItem := range zonesMX.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord v1api20180501s.TxtRecord
			err := txtRecordItem.AssignProperties_To_TxtRecord(&txtRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TxtRecord() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		destination.TXTRecords = txtRecordList
	} else {
		destination.TXTRecords = nil
	}

	// TargetResource
	if zonesMX.TargetResource != nil {
		var targetResource v1api20180501s.SubResource
		err := zonesMX.TargetResource.AssignProperties_To_SubResource(&targetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource() to populate field TargetResource")
		}
		destination.TargetResource = &targetResource
	} else {
		destination.TargetResource = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_DnsZones_MX_STATUS populates our DnsZones_MX_Spec from the provided source DnsZones_MX_STATUS
func (zonesMX *DnsZones_MX_Spec) Initialize_From_DnsZones_MX_STATUS(source *DnsZones_MX_STATUS) error {

	// AAAARecords
	if source.AAAARecords != nil {
		aaaaRecordList := make([]AaaaRecord, len(source.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord
			err := aaaaRecord.Initialize_From_AaaaRecord_STATUS(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_AaaaRecord_STATUS() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		zonesMX.AAAARecords = aaaaRecordList
	} else {
		zonesMX.AAAARecords = nil
	}

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord
			err := aRecord.Initialize_From_ARecord_STATUS(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		zonesMX.ARecords = aRecordList
	} else {
		zonesMX.ARecords = nil
	}

	// CNAMERecord
	if source.CNAMERecord != nil {
		var cnameRecord CnameRecord
		err := cnameRecord.Initialize_From_CnameRecord_STATUS(source.CNAMERecord)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_CnameRecord_STATUS() to populate field CNAMERecord")
		}
		zonesMX.CNAMERecord = &cnameRecord
	} else {
		zonesMX.CNAMERecord = nil
	}

	// CaaRecords
	if source.CaaRecords != nil {
		caaRecordList := make([]CaaRecord, len(source.CaaRecords))
		for caaRecordIndex, caaRecordItem := range source.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord CaaRecord
			err := caaRecord.Initialize_From_CaaRecord_STATUS(&caaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_CaaRecord_STATUS() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		zonesMX.CaaRecords = caaRecordList
	} else {
		zonesMX.CaaRecords = nil
	}

	// MXRecords
	if source.MXRecords != nil {
		mxRecordList := make([]MxRecord, len(source.MXRecords))
		for mxRecordIndex, mxRecordItem := range source.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord
			err := mxRecord.Initialize_From_MxRecord_STATUS(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_MxRecord_STATUS() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		zonesMX.MXRecords = mxRecordList
	} else {
		zonesMX.MXRecords = nil
	}

	// Metadata
	zonesMX.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// NSRecords
	if source.NSRecords != nil {
		nsRecordList := make([]NsRecord, len(source.NSRecords))
		for nsRecordIndex, nsRecordItem := range source.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord NsRecord
			err := nsRecord.Initialize_From_NsRecord_STATUS(&nsRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_NsRecord_STATUS() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		zonesMX.NSRecords = nsRecordList
	} else {
		zonesMX.NSRecords = nil
	}

	// PTRRecords
	if source.PTRRecords != nil {
		ptrRecordList := make([]PtrRecord, len(source.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord
			err := ptrRecord.Initialize_From_PtrRecord_STATUS(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_PtrRecord_STATUS() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		zonesMX.PTRRecords = ptrRecordList
	} else {
		zonesMX.PTRRecords = nil
	}

	// SOARecord
	if source.SOARecord != nil {
		var soaRecord SoaRecord
		err := soaRecord.Initialize_From_SoaRecord_STATUS(source.SOARecord)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SoaRecord_STATUS() to populate field SOARecord")
		}
		zonesMX.SOARecord = &soaRecord
	} else {
		zonesMX.SOARecord = nil
	}

	// SRVRecords
	if source.SRVRecords != nil {
		srvRecordList := make([]SrvRecord, len(source.SRVRecords))
		for srvRecordIndex, srvRecordItem := range source.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord
			err := srvRecord.Initialize_From_SrvRecord_STATUS(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_SrvRecord_STATUS() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		zonesMX.SRVRecords = srvRecordList
	} else {
		zonesMX.SRVRecords = nil
	}

	// TTL
	zonesMX.TTL = genruntime.ClonePointerToInt(source.TTL)

	// TXTRecords
	if source.TXTRecords != nil {
		txtRecordList := make([]TxtRecord, len(source.TXTRecords))
		for txtRecordIndex, txtRecordItem := range source.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord
			err := txtRecord.Initialize_From_TxtRecord_STATUS(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_TxtRecord_STATUS() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		zonesMX.TXTRecords = txtRecordList
	} else {
		zonesMX.TXTRecords = nil
	}

	// TargetResource
	if source.TargetResource != nil {
		var targetResource SubResource
		err := targetResource.Initialize_From_SubResource_STATUS(source.TargetResource)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SubResource_STATUS() to populate field TargetResource")
		}
		zonesMX.TargetResource = &targetResource
	} else {
		zonesMX.TargetResource = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (zonesMX *DnsZones_MX_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (zonesMX *DnsZones_MX_Spec) SetAzureName(azureName string) { zonesMX.AzureName = azureName }

type DnsZones_MX_STATUS struct {
	// AAAARecords: The list of AAAA records in the record set.
	AAAARecords []AaaaRecord_STATUS `json:"AAAARecords,omitempty"`

	// ARecords: The list of A records in the record set.
	ARecords []ARecord_STATUS `json:"ARecords,omitempty"`

	// CNAMERecord: The CNAME record in the  record set.
	CNAMERecord *CnameRecord_STATUS `json:"CNAMERecord,omitempty"`

	// CaaRecords: The list of CAA records in the record set.
	CaaRecords []CaaRecord_STATUS `json:"caaRecords,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Etag: The etag of the record set.
	Etag *string `json:"etag,omitempty"`

	// Fqdn: Fully qualified domain name of the record set.
	Fqdn *string `json:"fqdn,omitempty"`

	// Id: The ID of the record set.
	Id *string `json:"id,omitempty"`

	// MXRecords: The list of MX records in the record set.
	MXRecords []MxRecord_STATUS `json:"MXRecords,omitempty"`

	// Metadata: The metadata attached to the record set.
	Metadata map[string]string `json:"metadata,omitempty"`

	// NSRecords: The list of NS records in the record set.
	NSRecords []NsRecord_STATUS `json:"NSRecords,omitempty"`

	// Name: The name of the record set.
	Name *string `json:"name,omitempty"`

	// PTRRecords: The list of PTR records in the record set.
	PTRRecords []PtrRecord_STATUS `json:"PTRRecords,omitempty"`

	// ProvisioningState: provisioning State of the record set.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// SOARecord: The SOA record in the record set.
	SOARecord *SoaRecord_STATUS `json:"SOARecord,omitempty"`

	// SRVRecords: The list of SRV records in the record set.
	SRVRecords []SrvRecord_STATUS `json:"SRVRecords,omitempty"`

	// TTL: The TTL (time-to-live) of the records in the record set.
	TTL *int `json:"TTL,omitempty"`

	// TXTRecords: The list of TXT records in the record set.
	TXTRecords []TxtRecord_STATUS `json:"TXTRecords,omitempty"`

	// TargetResource: A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResource_STATUS `json:"targetResource,omitempty"`

	// Type: The type of the record set.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DnsZones_MX_STATUS{}

// ConvertStatusFrom populates our DnsZones_MX_STATUS from the provided source
func (zonesMX *DnsZones_MX_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1api20180501s.DnsZones_MX_STATUS)
	if ok {
		// Populate our instance from source
		return zonesMX.AssignProperties_From_DnsZones_MX_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v1api20180501s.DnsZones_MX_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = zonesMX.AssignProperties_From_DnsZones_MX_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DnsZones_MX_STATUS
func (zonesMX *DnsZones_MX_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1api20180501s.DnsZones_MX_STATUS)
	if ok {
		// Populate destination from our instance
		return zonesMX.AssignProperties_To_DnsZones_MX_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v1api20180501s.DnsZones_MX_STATUS{}
	err := zonesMX.AssignProperties_To_DnsZones_MX_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &DnsZones_MX_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (zonesMX *DnsZones_MX_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DnsZones_MX_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (zonesMX *DnsZones_MX_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DnsZones_MX_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DnsZones_MX_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AAAARecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AAAARecords {
			var item1 AaaaRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.AAAARecords = append(zonesMX.AAAARecords, item1)
		}
	}

	// Set property ‘ARecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ARecords {
			var item1 ARecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.ARecords = append(zonesMX.ARecords, item1)
		}
	}

	// Set property ‘CNAMERecord’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CNAMERecord != nil {
			var cnameRecord1 CnameRecord_STATUS
			err := cnameRecord1.PopulateFromARM(owner, *typedInput.Properties.CNAMERecord)
			if err != nil {
				return err
			}
			cnameRecord := cnameRecord1
			zonesMX.CNAMERecord = &cnameRecord
		}
	}

	// Set property ‘CaaRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.CaaRecords {
			var item1 CaaRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.CaaRecords = append(zonesMX.CaaRecords, item1)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		zonesMX.Etag = &etag
	}

	// Set property ‘Fqdn’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Fqdn != nil {
			fqdn := *typedInput.Properties.Fqdn
			zonesMX.Fqdn = &fqdn
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		zonesMX.Id = &id
	}

	// Set property ‘MXRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.MXRecords {
			var item1 MxRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.MXRecords = append(zonesMX.MXRecords, item1)
		}
	}

	// Set property ‘Metadata’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Metadata != nil {
			zonesMX.Metadata = make(map[string]string, len(typedInput.Properties.Metadata))
			for key, value := range typedInput.Properties.Metadata {
				zonesMX.Metadata[key] = value
			}
		}
	}

	// Set property ‘NSRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NSRecords {
			var item1 NsRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.NSRecords = append(zonesMX.NSRecords, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		zonesMX.Name = &name
	}

	// Set property ‘PTRRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PTRRecords {
			var item1 PtrRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.PTRRecords = append(zonesMX.PTRRecords, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			zonesMX.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘SOARecord’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SOARecord != nil {
			var soaRecord1 SoaRecord_STATUS
			err := soaRecord1.PopulateFromARM(owner, *typedInput.Properties.SOARecord)
			if err != nil {
				return err
			}
			soaRecord := soaRecord1
			zonesMX.SOARecord = &soaRecord
		}
	}

	// Set property ‘SRVRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SRVRecords {
			var item1 SrvRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.SRVRecords = append(zonesMX.SRVRecords, item1)
		}
	}

	// Set property ‘TTL’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TTL != nil {
			ttl := *typedInput.Properties.TTL
			zonesMX.TTL = &ttl
		}
	}

	// Set property ‘TXTRecords’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.TXTRecords {
			var item1 TxtRecord_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			zonesMX.TXTRecords = append(zonesMX.TXTRecords, item1)
		}
	}

	// Set property ‘TargetResource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetResource != nil {
			var targetResource1 SubResource_STATUS
			err := targetResource1.PopulateFromARM(owner, *typedInput.Properties.TargetResource)
			if err != nil {
				return err
			}
			targetResource := targetResource1
			zonesMX.TargetResource = &targetResource
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		zonesMX.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_DnsZones_MX_STATUS populates our DnsZones_MX_STATUS from the provided source DnsZones_MX_STATUS
func (zonesMX *DnsZones_MX_STATUS) AssignProperties_From_DnsZones_MX_STATUS(source *v1api20180501s.DnsZones_MX_STATUS) error {

	// AAAARecords
	if source.AAAARecords != nil {
		aaaaRecordList := make([]AaaaRecord_STATUS, len(source.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range source.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord AaaaRecord_STATUS
			err := aaaaRecord.AssignProperties_From_AaaaRecord_STATUS(&aaaaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_AaaaRecord_STATUS() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		zonesMX.AAAARecords = aaaaRecordList
	} else {
		zonesMX.AAAARecords = nil
	}

	// ARecords
	if source.ARecords != nil {
		aRecordList := make([]ARecord_STATUS, len(source.ARecords))
		for aRecordIndex, aRecordItem := range source.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord ARecord_STATUS
			err := aRecord.AssignProperties_From_ARecord_STATUS(&aRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		zonesMX.ARecords = aRecordList
	} else {
		zonesMX.ARecords = nil
	}

	// CNAMERecord
	if source.CNAMERecord != nil {
		var cnameRecord CnameRecord_STATUS
		err := cnameRecord.AssignProperties_From_CnameRecord_STATUS(source.CNAMERecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CnameRecord_STATUS() to populate field CNAMERecord")
		}
		zonesMX.CNAMERecord = &cnameRecord
	} else {
		zonesMX.CNAMERecord = nil
	}

	// CaaRecords
	if source.CaaRecords != nil {
		caaRecordList := make([]CaaRecord_STATUS, len(source.CaaRecords))
		for caaRecordIndex, caaRecordItem := range source.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord CaaRecord_STATUS
			err := caaRecord.AssignProperties_From_CaaRecord_STATUS(&caaRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CaaRecord_STATUS() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		zonesMX.CaaRecords = caaRecordList
	} else {
		zonesMX.CaaRecords = nil
	}

	// Conditions
	zonesMX.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Etag
	zonesMX.Etag = genruntime.ClonePointerToString(source.Etag)

	// Fqdn
	zonesMX.Fqdn = genruntime.ClonePointerToString(source.Fqdn)

	// Id
	zonesMX.Id = genruntime.ClonePointerToString(source.Id)

	// MXRecords
	if source.MXRecords != nil {
		mxRecordList := make([]MxRecord_STATUS, len(source.MXRecords))
		for mxRecordIndex, mxRecordItem := range source.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord MxRecord_STATUS
			err := mxRecord.AssignProperties_From_MxRecord_STATUS(&mxRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_MxRecord_STATUS() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		zonesMX.MXRecords = mxRecordList
	} else {
		zonesMX.MXRecords = nil
	}

	// Metadata
	zonesMX.Metadata = genruntime.CloneMapOfStringToString(source.Metadata)

	// NSRecords
	if source.NSRecords != nil {
		nsRecordList := make([]NsRecord_STATUS, len(source.NSRecords))
		for nsRecordIndex, nsRecordItem := range source.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord NsRecord_STATUS
			err := nsRecord.AssignProperties_From_NsRecord_STATUS(&nsRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_NsRecord_STATUS() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		zonesMX.NSRecords = nsRecordList
	} else {
		zonesMX.NSRecords = nil
	}

	// Name
	zonesMX.Name = genruntime.ClonePointerToString(source.Name)

	// PTRRecords
	if source.PTRRecords != nil {
		ptrRecordList := make([]PtrRecord_STATUS, len(source.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range source.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord PtrRecord_STATUS
			err := ptrRecord.AssignProperties_From_PtrRecord_STATUS(&ptrRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PtrRecord_STATUS() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		zonesMX.PTRRecords = ptrRecordList
	} else {
		zonesMX.PTRRecords = nil
	}

	// ProvisioningState
	zonesMX.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// SOARecord
	if source.SOARecord != nil {
		var soaRecord SoaRecord_STATUS
		err := soaRecord.AssignProperties_From_SoaRecord_STATUS(source.SOARecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SoaRecord_STATUS() to populate field SOARecord")
		}
		zonesMX.SOARecord = &soaRecord
	} else {
		zonesMX.SOARecord = nil
	}

	// SRVRecords
	if source.SRVRecords != nil {
		srvRecordList := make([]SrvRecord_STATUS, len(source.SRVRecords))
		for srvRecordIndex, srvRecordItem := range source.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord SrvRecord_STATUS
			err := srvRecord.AssignProperties_From_SrvRecord_STATUS(&srvRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SrvRecord_STATUS() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		zonesMX.SRVRecords = srvRecordList
	} else {
		zonesMX.SRVRecords = nil
	}

	// TTL
	zonesMX.TTL = genruntime.ClonePointerToInt(source.TTL)

	// TXTRecords
	if source.TXTRecords != nil {
		txtRecordList := make([]TxtRecord_STATUS, len(source.TXTRecords))
		for txtRecordIndex, txtRecordItem := range source.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord TxtRecord_STATUS
			err := txtRecord.AssignProperties_From_TxtRecord_STATUS(&txtRecordItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_TxtRecord_STATUS() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		zonesMX.TXTRecords = txtRecordList
	} else {
		zonesMX.TXTRecords = nil
	}

	// TargetResource
	if source.TargetResource != nil {
		var targetResource SubResource_STATUS
		err := targetResource.AssignProperties_From_SubResource_STATUS(source.TargetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubResource_STATUS() to populate field TargetResource")
		}
		zonesMX.TargetResource = &targetResource
	} else {
		zonesMX.TargetResource = nil
	}

	// Type
	zonesMX.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_DnsZones_MX_STATUS populates the provided destination DnsZones_MX_STATUS from our DnsZones_MX_STATUS
func (zonesMX *DnsZones_MX_STATUS) AssignProperties_To_DnsZones_MX_STATUS(destination *v1api20180501s.DnsZones_MX_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AAAARecords
	if zonesMX.AAAARecords != nil {
		aaaaRecordList := make([]v1api20180501s.AaaaRecord_STATUS, len(zonesMX.AAAARecords))
		for aaaaRecordIndex, aaaaRecordItem := range zonesMX.AAAARecords {
			// Shadow the loop variable to avoid aliasing
			aaaaRecordItem := aaaaRecordItem
			var aaaaRecord v1api20180501s.AaaaRecord_STATUS
			err := aaaaRecordItem.AssignProperties_To_AaaaRecord_STATUS(&aaaaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_AaaaRecord_STATUS() to populate field AAAARecords")
			}
			aaaaRecordList[aaaaRecordIndex] = aaaaRecord
		}
		destination.AAAARecords = aaaaRecordList
	} else {
		destination.AAAARecords = nil
	}

	// ARecords
	if zonesMX.ARecords != nil {
		aRecordList := make([]v1api20180501s.ARecord_STATUS, len(zonesMX.ARecords))
		for aRecordIndex, aRecordItem := range zonesMX.ARecords {
			// Shadow the loop variable to avoid aliasing
			aRecordItem := aRecordItem
			var aRecord v1api20180501s.ARecord_STATUS
			err := aRecordItem.AssignProperties_To_ARecord_STATUS(&aRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ARecord_STATUS() to populate field ARecords")
			}
			aRecordList[aRecordIndex] = aRecord
		}
		destination.ARecords = aRecordList
	} else {
		destination.ARecords = nil
	}

	// CNAMERecord
	if zonesMX.CNAMERecord != nil {
		var cnameRecord v1api20180501s.CnameRecord_STATUS
		err := zonesMX.CNAMERecord.AssignProperties_To_CnameRecord_STATUS(&cnameRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CnameRecord_STATUS() to populate field CNAMERecord")
		}
		destination.CNAMERecord = &cnameRecord
	} else {
		destination.CNAMERecord = nil
	}

	// CaaRecords
	if zonesMX.CaaRecords != nil {
		caaRecordList := make([]v1api20180501s.CaaRecord_STATUS, len(zonesMX.CaaRecords))
		for caaRecordIndex, caaRecordItem := range zonesMX.CaaRecords {
			// Shadow the loop variable to avoid aliasing
			caaRecordItem := caaRecordItem
			var caaRecord v1api20180501s.CaaRecord_STATUS
			err := caaRecordItem.AssignProperties_To_CaaRecord_STATUS(&caaRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CaaRecord_STATUS() to populate field CaaRecords")
			}
			caaRecordList[caaRecordIndex] = caaRecord
		}
		destination.CaaRecords = caaRecordList
	} else {
		destination.CaaRecords = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(zonesMX.Conditions)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(zonesMX.Etag)

	// Fqdn
	destination.Fqdn = genruntime.ClonePointerToString(zonesMX.Fqdn)

	// Id
	destination.Id = genruntime.ClonePointerToString(zonesMX.Id)

	// MXRecords
	if zonesMX.MXRecords != nil {
		mxRecordList := make([]v1api20180501s.MxRecord_STATUS, len(zonesMX.MXRecords))
		for mxRecordIndex, mxRecordItem := range zonesMX.MXRecords {
			// Shadow the loop variable to avoid aliasing
			mxRecordItem := mxRecordItem
			var mxRecord v1api20180501s.MxRecord_STATUS
			err := mxRecordItem.AssignProperties_To_MxRecord_STATUS(&mxRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_MxRecord_STATUS() to populate field MXRecords")
			}
			mxRecordList[mxRecordIndex] = mxRecord
		}
		destination.MXRecords = mxRecordList
	} else {
		destination.MXRecords = nil
	}

	// Metadata
	destination.Metadata = genruntime.CloneMapOfStringToString(zonesMX.Metadata)

	// NSRecords
	if zonesMX.NSRecords != nil {
		nsRecordList := make([]v1api20180501s.NsRecord_STATUS, len(zonesMX.NSRecords))
		for nsRecordIndex, nsRecordItem := range zonesMX.NSRecords {
			// Shadow the loop variable to avoid aliasing
			nsRecordItem := nsRecordItem
			var nsRecord v1api20180501s.NsRecord_STATUS
			err := nsRecordItem.AssignProperties_To_NsRecord_STATUS(&nsRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_NsRecord_STATUS() to populate field NSRecords")
			}
			nsRecordList[nsRecordIndex] = nsRecord
		}
		destination.NSRecords = nsRecordList
	} else {
		destination.NSRecords = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(zonesMX.Name)

	// PTRRecords
	if zonesMX.PTRRecords != nil {
		ptrRecordList := make([]v1api20180501s.PtrRecord_STATUS, len(zonesMX.PTRRecords))
		for ptrRecordIndex, ptrRecordItem := range zonesMX.PTRRecords {
			// Shadow the loop variable to avoid aliasing
			ptrRecordItem := ptrRecordItem
			var ptrRecord v1api20180501s.PtrRecord_STATUS
			err := ptrRecordItem.AssignProperties_To_PtrRecord_STATUS(&ptrRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PtrRecord_STATUS() to populate field PTRRecords")
			}
			ptrRecordList[ptrRecordIndex] = ptrRecord
		}
		destination.PTRRecords = ptrRecordList
	} else {
		destination.PTRRecords = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(zonesMX.ProvisioningState)

	// SOARecord
	if zonesMX.SOARecord != nil {
		var soaRecord v1api20180501s.SoaRecord_STATUS
		err := zonesMX.SOARecord.AssignProperties_To_SoaRecord_STATUS(&soaRecord)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SoaRecord_STATUS() to populate field SOARecord")
		}
		destination.SOARecord = &soaRecord
	} else {
		destination.SOARecord = nil
	}

	// SRVRecords
	if zonesMX.SRVRecords != nil {
		srvRecordList := make([]v1api20180501s.SrvRecord_STATUS, len(zonesMX.SRVRecords))
		for srvRecordIndex, srvRecordItem := range zonesMX.SRVRecords {
			// Shadow the loop variable to avoid aliasing
			srvRecordItem := srvRecordItem
			var srvRecord v1api20180501s.SrvRecord_STATUS
			err := srvRecordItem.AssignProperties_To_SrvRecord_STATUS(&srvRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SrvRecord_STATUS() to populate field SRVRecords")
			}
			srvRecordList[srvRecordIndex] = srvRecord
		}
		destination.SRVRecords = srvRecordList
	} else {
		destination.SRVRecords = nil
	}

	// TTL
	destination.TTL = genruntime.ClonePointerToInt(zonesMX.TTL)

	// TXTRecords
	if zonesMX.TXTRecords != nil {
		txtRecordList := make([]v1api20180501s.TxtRecord_STATUS, len(zonesMX.TXTRecords))
		for txtRecordIndex, txtRecordItem := range zonesMX.TXTRecords {
			// Shadow the loop variable to avoid aliasing
			txtRecordItem := txtRecordItem
			var txtRecord v1api20180501s.TxtRecord_STATUS
			err := txtRecordItem.AssignProperties_To_TxtRecord_STATUS(&txtRecord)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_TxtRecord_STATUS() to populate field TXTRecords")
			}
			txtRecordList[txtRecordIndex] = txtRecord
		}
		destination.TXTRecords = txtRecordList
	} else {
		destination.TXTRecords = nil
	}

	// TargetResource
	if zonesMX.TargetResource != nil {
		var targetResource v1api20180501s.SubResource_STATUS
		err := zonesMX.TargetResource.AssignProperties_To_SubResource_STATUS(&targetResource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubResource_STATUS() to populate field TargetResource")
		}
		destination.TargetResource = &targetResource
	} else {
		destination.TargetResource = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(zonesMX.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&DnsZonesMXRecord{}, &DnsZonesMXRecordList{})
}
