// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateDnsZonesTXTRecord_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZonesTXTRecord via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesTXTRecord, PrivateDnsZonesTXTRecordGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesTXTRecord runs a test to see if a specific instance of PrivateDnsZonesTXTRecord round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesTXTRecord(subject PrivateDnsZonesTXTRecord) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZonesTXTRecord
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZonesTXTRecord instances for property testing - lazily instantiated by
// PrivateDnsZonesTXTRecordGenerator()
var privateDnsZonesTXTRecordGenerator gopter.Gen

// PrivateDnsZonesTXTRecordGenerator returns a generator of PrivateDnsZonesTXTRecord instances for property testing.
func PrivateDnsZonesTXTRecordGenerator() gopter.Gen {
	if privateDnsZonesTXTRecordGenerator != nil {
		return privateDnsZonesTXTRecordGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord(generators)
	privateDnsZonesTXTRecordGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesTXTRecord{}), generators)

	return privateDnsZonesTXTRecordGenerator
}

// AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord(gens map[string]gopter.Gen) {
	gens["Spec"] = PrivateDnsZonesTXTRecord_SpecGenerator()
	gens["Status"] = PrivateDnsZonesTXTRecord_STATUSGenerator()
}

func Test_PrivateDnsZonesTXTRecordOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZonesTXTRecordOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesTXTRecordOperatorSpec, PrivateDnsZonesTXTRecordOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesTXTRecordOperatorSpec runs a test to see if a specific instance of PrivateDnsZonesTXTRecordOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesTXTRecordOperatorSpec(subject PrivateDnsZonesTXTRecordOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZonesTXTRecordOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZonesTXTRecordOperatorSpec instances for property testing - lazily instantiated by
// PrivateDnsZonesTXTRecordOperatorSpecGenerator()
var privateDnsZonesTXTRecordOperatorSpecGenerator gopter.Gen

// PrivateDnsZonesTXTRecordOperatorSpecGenerator returns a generator of PrivateDnsZonesTXTRecordOperatorSpec instances for property testing.
func PrivateDnsZonesTXTRecordOperatorSpecGenerator() gopter.Gen {
	if privateDnsZonesTXTRecordOperatorSpecGenerator != nil {
		return privateDnsZonesTXTRecordOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	privateDnsZonesTXTRecordOperatorSpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesTXTRecordOperatorSpec{}), generators)

	return privateDnsZonesTXTRecordOperatorSpecGenerator
}

func Test_PrivateDnsZonesTXTRecord_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZonesTXTRecord_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesTXTRecord_STATUS, PrivateDnsZonesTXTRecord_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesTXTRecord_STATUS runs a test to see if a specific instance of PrivateDnsZonesTXTRecord_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesTXTRecord_STATUS(subject PrivateDnsZonesTXTRecord_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZonesTXTRecord_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZonesTXTRecord_STATUS instances for property testing - lazily instantiated by
// PrivateDnsZonesTXTRecord_STATUSGenerator()
var privateDnsZonesTXTRecord_STATUSGenerator gopter.Gen

// PrivateDnsZonesTXTRecord_STATUSGenerator returns a generator of PrivateDnsZonesTXTRecord_STATUS instances for property testing.
// We first initialize privateDnsZonesTXTRecord_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateDnsZonesTXTRecord_STATUSGenerator() gopter.Gen {
	if privateDnsZonesTXTRecord_STATUSGenerator != nil {
		return privateDnsZonesTXTRecord_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS(generators)
	privateDnsZonesTXTRecord_STATUSGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesTXTRecord_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS(generators)
	AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS(generators)
	privateDnsZonesTXTRecord_STATUSGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesTXTRecord_STATUS{}), generators)

	return privateDnsZonesTXTRecord_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsAutoRegistered"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Ttl"] = gen.PtrOf(gen.Int())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord_STATUS(gens map[string]gopter.Gen) {
	gens["ARecords"] = gen.SliceOf(ARecord_STATUSGenerator())
	gens["AaaaRecords"] = gen.SliceOf(AaaaRecord_STATUSGenerator())
	gens["CnameRecord"] = gen.PtrOf(CnameRecord_STATUSGenerator())
	gens["MxRecords"] = gen.SliceOf(MxRecord_STATUSGenerator())
	gens["PtrRecords"] = gen.SliceOf(PtrRecord_STATUSGenerator())
	gens["SoaRecord"] = gen.PtrOf(SoaRecord_STATUSGenerator())
	gens["SrvRecords"] = gen.SliceOf(SrvRecord_STATUSGenerator())
	gens["TxtRecords"] = gen.SliceOf(TxtRecord_STATUSGenerator())
}

func Test_PrivateDnsZonesTXTRecord_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZonesTXTRecord_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesTXTRecord_Spec, PrivateDnsZonesTXTRecord_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesTXTRecord_Spec runs a test to see if a specific instance of PrivateDnsZonesTXTRecord_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesTXTRecord_Spec(subject PrivateDnsZonesTXTRecord_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZonesTXTRecord_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZonesTXTRecord_Spec instances for property testing - lazily instantiated by
// PrivateDnsZonesTXTRecord_SpecGenerator()
var privateDnsZonesTXTRecord_SpecGenerator gopter.Gen

// PrivateDnsZonesTXTRecord_SpecGenerator returns a generator of PrivateDnsZonesTXTRecord_Spec instances for property testing.
// We first initialize privateDnsZonesTXTRecord_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateDnsZonesTXTRecord_SpecGenerator() gopter.Gen {
	if privateDnsZonesTXTRecord_SpecGenerator != nil {
		return privateDnsZonesTXTRecord_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec(generators)
	privateDnsZonesTXTRecord_SpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesTXTRecord_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec(generators)
	AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec(generators)
	privateDnsZonesTXTRecord_SpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZonesTXTRecord_Spec{}), generators)

	return privateDnsZonesTXTRecord_SpecGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Ttl"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZonesTXTRecord_Spec(gens map[string]gopter.Gen) {
	gens["ARecords"] = gen.SliceOf(ARecordGenerator())
	gens["AaaaRecords"] = gen.SliceOf(AaaaRecordGenerator())
	gens["CnameRecord"] = gen.PtrOf(CnameRecordGenerator())
	gens["MxRecords"] = gen.SliceOf(MxRecordGenerator())
	gens["OperatorSpec"] = gen.PtrOf(PrivateDnsZonesTXTRecordOperatorSpecGenerator())
	gens["PtrRecords"] = gen.SliceOf(PtrRecordGenerator())
	gens["SoaRecord"] = gen.PtrOf(SoaRecordGenerator())
	gens["SrvRecords"] = gen.SliceOf(SrvRecordGenerator())
	gens["TxtRecords"] = gen.SliceOf(TxtRecordGenerator())
}
