// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180901storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateDnsZone_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZone via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZone, PrivateDnsZoneGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZone runs a test to see if a specific instance of PrivateDnsZone round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZone(subject PrivateDnsZone) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZone
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZone instances for property testing - lazily instantiated by PrivateDnsZoneGenerator()
var privateDnsZoneGenerator gopter.Gen

// PrivateDnsZoneGenerator returns a generator of PrivateDnsZone instances for property testing.
func PrivateDnsZoneGenerator() gopter.Gen {
	if privateDnsZoneGenerator != nil {
		return privateDnsZoneGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPrivateDnsZone(generators)
	privateDnsZoneGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZone{}), generators)

	return privateDnsZoneGenerator
}

// AddRelatedPropertyGeneratorsForPrivateDnsZone is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZone(gens map[string]gopter.Gen) {
	gens["Spec"] = PrivateDnsZonesSpecGenerator()
	gens["Status"] = PrivateZoneStatusGenerator()
}

func Test_PrivateDnsZones_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZones_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesSpec, PrivateDnsZonesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesSpec runs a test to see if a specific instance of PrivateDnsZones_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesSpec(subject PrivateDnsZones_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZones_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZones_Spec instances for property testing - lazily instantiated by
// PrivateDnsZonesSpecGenerator()
var privateDnsZonesSpecGenerator gopter.Gen

// PrivateDnsZonesSpecGenerator returns a generator of PrivateDnsZones_Spec instances for property testing.
func PrivateDnsZonesSpecGenerator() gopter.Gen {
	if privateDnsZonesSpecGenerator != nil {
		return privateDnsZonesSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZonesSpec(generators)
	privateDnsZonesSpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZones_Spec{}), generators)

	return privateDnsZonesSpecGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZonesSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZonesSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_PrivateZone_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateZone_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateZoneStatus, PrivateZoneStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateZoneStatus runs a test to see if a specific instance of PrivateZone_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateZoneStatus(subject PrivateZone_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateZone_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateZone_Status instances for property testing - lazily instantiated by PrivateZoneStatusGenerator()
var privateZoneStatusGenerator gopter.Gen

// PrivateZoneStatusGenerator returns a generator of PrivateZone_Status instances for property testing.
func PrivateZoneStatusGenerator() gopter.Gen {
	if privateZoneStatusGenerator != nil {
		return privateZoneStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateZoneStatus(generators)
	privateZoneStatusGenerator = gen.Struct(reflect.TypeOf(PrivateZone_Status{}), generators)

	return privateZoneStatusGenerator
}

// AddIndependentPropertyGeneratorsForPrivateZoneStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateZoneStatus(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["NumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}
