// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180901

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateDnsZone_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZone_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZone_STATUSARM, PrivateDnsZone_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZone_STATUSARM runs a test to see if a specific instance of PrivateDnsZone_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZone_STATUSARM(subject PrivateDnsZone_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZone_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZone_STATUSARM instances for property testing - lazily instantiated by
// PrivateDnsZone_STATUSARMGenerator()
var privateDnsZone_STATUSARMGenerator gopter.Gen

// PrivateDnsZone_STATUSARMGenerator returns a generator of PrivateDnsZone_STATUSARM instances for property testing.
// We first initialize privateDnsZone_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateDnsZone_STATUSARMGenerator() gopter.Gen {
	if privateDnsZone_STATUSARMGenerator != nil {
		return privateDnsZone_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZone_STATUSARM(generators)
	privateDnsZone_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZone_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZone_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateDnsZone_STATUSARM(generators)
	privateDnsZone_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZone_STATUSARM{}), generators)

	return privateDnsZone_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZone_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZone_STATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateDnsZone_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZone_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateZoneProperties_STATUSARMGenerator())
}

func Test_PrivateZoneProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateZoneProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateZoneProperties_STATUSARM, PrivateZoneProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateZoneProperties_STATUSARM runs a test to see if a specific instance of PrivateZoneProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateZoneProperties_STATUSARM(subject PrivateZoneProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateZoneProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateZoneProperties_STATUSARM instances for property testing - lazily instantiated by
// PrivateZoneProperties_STATUSARMGenerator()
var privateZoneProperties_STATUSARMGenerator gopter.Gen

// PrivateZoneProperties_STATUSARMGenerator returns a generator of PrivateZoneProperties_STATUSARM instances for property testing.
func PrivateZoneProperties_STATUSARMGenerator() gopter.Gen {
	if privateZoneProperties_STATUSARMGenerator != nil {
		return privateZoneProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateZoneProperties_STATUSARM(generators)
	privateZoneProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateZoneProperties_STATUSARM{}), generators)

	return privateZoneProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateZoneProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateZoneProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["MaxNumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["NumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		PrivateZoneProperties_ProvisioningState_Canceled_STATUS,
		PrivateZoneProperties_ProvisioningState_Creating_STATUS,
		PrivateZoneProperties_ProvisioningState_Deleting_STATUS,
		PrivateZoneProperties_ProvisioningState_Failed_STATUS,
		PrivateZoneProperties_ProvisioningState_Succeeded_STATUS,
		PrivateZoneProperties_ProvisioningState_Updating_STATUS))
}
