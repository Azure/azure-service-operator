// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180901

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateZone_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateZone_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateZoneSTATUSARM, PrivateZoneSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateZoneSTATUSARM runs a test to see if a specific instance of PrivateZone_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateZoneSTATUSARM(subject PrivateZone_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateZone_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateZone_STATUSARM instances for property testing - lazily instantiated by
// PrivateZoneSTATUSARMGenerator()
var privateZoneSTATUSARMGenerator gopter.Gen

// PrivateZoneSTATUSARMGenerator returns a generator of PrivateZone_STATUSARM instances for property testing.
// We first initialize privateZoneSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateZoneSTATUSARMGenerator() gopter.Gen {
	if privateZoneSTATUSARMGenerator != nil {
		return privateZoneSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateZoneSTATUSARM(generators)
	privateZoneSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateZone_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateZoneSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForPrivateZoneSTATUSARM(generators)
	privateZoneSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateZone_STATUSARM{}), generators)

	return privateZoneSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateZoneSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateZoneSTATUSARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateZoneSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateZoneSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateZonePropertiesSTATUSARMGenerator())
}

func Test_PrivateZoneProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateZoneProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateZonePropertiesSTATUSARM, PrivateZonePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateZonePropertiesSTATUSARM runs a test to see if a specific instance of PrivateZoneProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateZonePropertiesSTATUSARM(subject PrivateZoneProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateZoneProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateZoneProperties_STATUSARM instances for property testing - lazily instantiated by
// PrivateZonePropertiesSTATUSARMGenerator()
var privateZonePropertiesSTATUSARMGenerator gopter.Gen

// PrivateZonePropertiesSTATUSARMGenerator returns a generator of PrivateZoneProperties_STATUSARM instances for property testing.
func PrivateZonePropertiesSTATUSARMGenerator() gopter.Gen {
	if privateZonePropertiesSTATUSARMGenerator != nil {
		return privateZonePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateZonePropertiesSTATUSARM(generators)
	privateZonePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateZoneProperties_STATUSARM{}), generators)

	return privateZonePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateZonePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateZonePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["MaxNumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["NumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		PrivateZonePropertiesSTATUSProvisioningState_Canceled,
		PrivateZonePropertiesSTATUSProvisioningState_Creating,
		PrivateZonePropertiesSTATUSProvisioningState_Deleting,
		PrivateZonePropertiesSTATUSProvisioningState_Failed,
		PrivateZonePropertiesSTATUSProvisioningState_Succeeded,
		PrivateZonePropertiesSTATUSProvisioningState_Updating))
}
