// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20180901

import (
	"encoding/json"
	v20180901s "github.com/Azure/azure-service-operator/v2/api/network/v1beta20180901storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrivateDnsZone_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZone to hub returns original",
		prop.ForAll(RunResourceConversionTestForPrivateDnsZone, PrivateDnsZoneGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForPrivateDnsZone tests if a specific instance of PrivateDnsZone round trips to the hub storage version and back losslessly
func RunResourceConversionTestForPrivateDnsZone(subject PrivateDnsZone) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20180901s.PrivateDnsZone
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual PrivateDnsZone
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZone_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZone to PrivateDnsZone via AssignPropertiesToPrivateDnsZone & AssignPropertiesFromPrivateDnsZone returns original",
		prop.ForAll(RunPropertyAssignmentTestForPrivateDnsZone, PrivateDnsZoneGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPrivateDnsZone tests if a specific instance of PrivateDnsZone can be assigned to v1beta20180901storage and back losslessly
func RunPropertyAssignmentTestForPrivateDnsZone(subject PrivateDnsZone) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20180901s.PrivateDnsZone
	err := copied.AssignPropertiesToPrivateDnsZone(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PrivateDnsZone
	err = actual.AssignPropertiesFromPrivateDnsZone(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZone_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZone via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZone, PrivateDnsZoneGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZone runs a test to see if a specific instance of PrivateDnsZone round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZone(subject PrivateDnsZone) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZone
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZone instances for property testing - lazily instantiated by PrivateDnsZoneGenerator()
var privateDnsZoneGenerator gopter.Gen

// PrivateDnsZoneGenerator returns a generator of PrivateDnsZone instances for property testing.
func PrivateDnsZoneGenerator() gopter.Gen {
	if privateDnsZoneGenerator != nil {
		return privateDnsZoneGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPrivateDnsZone(generators)
	privateDnsZoneGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZone{}), generators)

	return privateDnsZoneGenerator
}

// AddRelatedPropertyGeneratorsForPrivateDnsZone is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateDnsZone(gens map[string]gopter.Gen) {
	gens["Spec"] = PrivateDnsZonesSpecGenerator()
	gens["Status"] = PrivateZoneSTATUSGenerator()
}

func Test_PrivateDnsZones_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateDnsZones_Spec to PrivateDnsZones_Spec via AssignPropertiesToPrivateDnsZonesSpec & AssignPropertiesFromPrivateDnsZonesSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForPrivateDnsZonesSpec, PrivateDnsZonesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPrivateDnsZonesSpec tests if a specific instance of PrivateDnsZones_Spec can be assigned to v1beta20180901storage and back losslessly
func RunPropertyAssignmentTestForPrivateDnsZonesSpec(subject PrivateDnsZones_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20180901s.PrivateDnsZones_Spec
	err := copied.AssignPropertiesToPrivateDnsZonesSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PrivateDnsZones_Spec
	err = actual.AssignPropertiesFromPrivateDnsZonesSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateDnsZones_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateDnsZones_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateDnsZonesSpec, PrivateDnsZonesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateDnsZonesSpec runs a test to see if a specific instance of PrivateDnsZones_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateDnsZonesSpec(subject PrivateDnsZones_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateDnsZones_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateDnsZones_Spec instances for property testing - lazily instantiated by
// PrivateDnsZonesSpecGenerator()
var privateDnsZonesSpecGenerator gopter.Gen

// PrivateDnsZonesSpecGenerator returns a generator of PrivateDnsZones_Spec instances for property testing.
func PrivateDnsZonesSpecGenerator() gopter.Gen {
	if privateDnsZonesSpecGenerator != nil {
		return privateDnsZonesSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateDnsZonesSpec(generators)
	privateDnsZonesSpecGenerator = gen.Struct(reflect.TypeOf(PrivateDnsZones_Spec{}), generators)

	return privateDnsZonesSpecGenerator
}

// AddIndependentPropertyGeneratorsForPrivateDnsZonesSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateDnsZonesSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_PrivateZone_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PrivateZone_STATUS to PrivateZone_STATUS via AssignPropertiesToPrivateZoneSTATUS & AssignPropertiesFromPrivateZoneSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForPrivateZoneSTATUS, PrivateZoneSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPrivateZoneSTATUS tests if a specific instance of PrivateZone_STATUS can be assigned to v1beta20180901storage and back losslessly
func RunPropertyAssignmentTestForPrivateZoneSTATUS(subject PrivateZone_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20180901s.PrivateZone_STATUS
	err := copied.AssignPropertiesToPrivateZoneSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PrivateZone_STATUS
	err = actual.AssignPropertiesFromPrivateZoneSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PrivateZone_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateZone_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateZoneSTATUS, PrivateZoneSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateZoneSTATUS runs a test to see if a specific instance of PrivateZone_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateZoneSTATUS(subject PrivateZone_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateZone_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateZone_STATUS instances for property testing - lazily instantiated by PrivateZoneSTATUSGenerator()
var privateZoneSTATUSGenerator gopter.Gen

// PrivateZoneSTATUSGenerator returns a generator of PrivateZone_STATUS instances for property testing.
func PrivateZoneSTATUSGenerator() gopter.Gen {
	if privateZoneSTATUSGenerator != nil {
		return privateZoneSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateZoneSTATUS(generators)
	privateZoneSTATUSGenerator = gen.Struct(reflect.TypeOf(PrivateZone_STATUS{}), generators)

	return privateZoneSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivateZoneSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateZoneSTATUS(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["MaxNumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["NumberOfRecordSets"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinks"] = gen.PtrOf(gen.Int())
	gens["NumberOfVirtualNetworkLinksWithRegistration"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		PrivateZonePropertiesSTATUSProvisioningState_Canceled,
		PrivateZonePropertiesSTATUSProvisioningState_Creating,
		PrivateZonePropertiesSTATUSProvisioningState_Deleting,
		PrivateZonePropertiesSTATUSProvisioningState_Failed,
		PrivateZonePropertiesSTATUSProvisioningState_Succeeded,
		PrivateZonePropertiesSTATUSProvisioningState_Updating))
}
