// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230815

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Clusters_Database_Spec_ARM struct {
	Name string `json:"name,omitempty"`

	// ReadOnlyFollowing: Mutually exclusive with all other properties
	ReadOnlyFollowing *ReadOnlyFollowingDatabase_ARM `json:"readOnlyFollowing,omitempty"`

	// ReadWrite: Mutually exclusive with all other properties
	ReadWrite *ReadWriteDatabase_ARM `json:"readWrite,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Clusters_Database_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-08-15"
func (database Clusters_Database_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (database *Clusters_Database_Spec_ARM) GetName() string {
	return database.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Kusto/clusters/databases"
func (database *Clusters_Database_Spec_ARM) GetType() string {
	return "Microsoft.Kusto/clusters/databases"
}

type ReadOnlyFollowingDatabase_ARM struct {
	// Kind: Kind of the database
	Kind *ReadOnlyFollowingDatabase_Kind_ARM `json:"kind,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Properties: The database properties.
	Properties *ReadOnlyFollowingDatabaseProperties_ARM `json:"properties,omitempty"`
}

type ReadWriteDatabase_ARM struct {
	// Kind: Kind of the database
	Kind *ReadWriteDatabase_Kind_ARM `json:"kind,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Properties: The database properties.
	Properties *ReadWriteDatabaseProperties_ARM `json:"properties,omitempty"`
}

// +kubebuilder:validation:Enum={"ReadOnlyFollowing"}
type ReadOnlyFollowingDatabase_Kind_ARM string

const ReadOnlyFollowingDatabase_Kind_ARM_ReadOnlyFollowing = ReadOnlyFollowingDatabase_Kind_ARM("ReadOnlyFollowing")

// Mapping from string to ReadOnlyFollowingDatabase_Kind_ARM
var readOnlyFollowingDatabase_Kind_ARM_Values = map[string]ReadOnlyFollowingDatabase_Kind_ARM{
	"readonlyfollowing": ReadOnlyFollowingDatabase_Kind_ARM_ReadOnlyFollowing,
}

// Class representing the Kusto database properties.
type ReadOnlyFollowingDatabaseProperties_ARM struct {
	// DatabaseShareOrigin: The origin of the following setup.
	DatabaseShareOrigin *DatabaseShareOrigin_ARM `json:"databaseShareOrigin,omitempty"`

	// HotCachePeriod: The time the data should be kept in cache for fast queries in TimeSpan.
	HotCachePeriod *string `json:"hotCachePeriod,omitempty"`
}

// +kubebuilder:validation:Enum={"ReadWrite"}
type ReadWriteDatabase_Kind_ARM string

const ReadWriteDatabase_Kind_ARM_ReadWrite = ReadWriteDatabase_Kind_ARM("ReadWrite")

// Mapping from string to ReadWriteDatabase_Kind_ARM
var readWriteDatabase_Kind_ARM_Values = map[string]ReadWriteDatabase_Kind_ARM{
	"readwrite": ReadWriteDatabase_Kind_ARM_ReadWrite,
}

// Class representing the Kusto database properties.
type ReadWriteDatabaseProperties_ARM struct {
	// HotCachePeriod: The time the data should be kept in cache for fast queries in TimeSpan.
	HotCachePeriod *string `json:"hotCachePeriod,omitempty"`

	// KeyVaultProperties: KeyVault properties for the database encryption.
	KeyVaultProperties *KeyVaultProperties_ARM `json:"keyVaultProperties,omitempty"`

	// SoftDeletePeriod: The time the data should be kept before it stops being accessible to queries in TimeSpan.
	SoftDeletePeriod *string `json:"softDeletePeriod,omitempty"`
}

// The origin of the following setup.
// +kubebuilder:validation:Enum={"DataShare","Direct","Other"}
type DatabaseShareOrigin_ARM string

const (
	DatabaseShareOrigin_ARM_DataShare = DatabaseShareOrigin_ARM("DataShare")
	DatabaseShareOrigin_ARM_Direct    = DatabaseShareOrigin_ARM("Direct")
	DatabaseShareOrigin_ARM_Other     = DatabaseShareOrigin_ARM("Other")
)

// Mapping from string to DatabaseShareOrigin_ARM
var databaseShareOrigin_ARM_Values = map[string]DatabaseShareOrigin_ARM{
	"datashare": DatabaseShareOrigin_ARM_DataShare,
	"direct":    DatabaseShareOrigin_ARM_Direct,
	"other":     DatabaseShareOrigin_ARM_Other,
}
