// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=kusto.azure.com,resources=databases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=kusto.azure.com,resources={databases/status,databases/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20230815.Database
// Generator information:
// - Generated from: /azure-kusto/resource-manager/Microsoft.Kusto/stable/2023-08-15/kusto.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}
type Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Clusters_Database_Spec `json:"spec,omitempty"`
	Status            Database_STATUS        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Database{}

// GetConditions returns the conditions of the resource
func (database *Database) GetConditions() conditions.Conditions {
	return database.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (database *Database) SetConditions(conditions conditions.Conditions) {
	database.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &Database{}

// AzureName returns the Azure name of the resource
func (database *Database) AzureName() string {
	return database.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-08-15"
func (database Database) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (database *Database) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (database *Database) GetSpec() genruntime.ConvertibleSpec {
	return &database.Spec
}

// GetStatus returns the status of this resource
func (database *Database) GetStatus() genruntime.ConvertibleStatus {
	return &database.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (database *Database) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Kusto/clusters/databases"
func (database *Database) GetType() string {
	return "Microsoft.Kusto/clusters/databases"
}

// NewEmptyStatus returns a new empty (blank) status
func (database *Database) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Database_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (database *Database) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(database.Spec)
	return database.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (database *Database) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Database_STATUS); ok {
		database.Status = *st
		return nil
	}

	// Convert status to required version
	var st Database_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	database.Status = st
	return nil
}

// Hub marks that this Database is the hub type for conversion
func (database *Database) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (database *Database) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: database.Spec.OriginalVersion,
		Kind:    "Database",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20230815.Database
// Generator information:
// - Generated from: /azure-kusto/resource-manager/Microsoft.Kusto/stable/2023-08-15/kusto.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}
type DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Database `json:"items"`
}

// Storage version of v1api20230815.Clusters_Database_Spec
type Clusters_Database_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string `json:"azureName,omitempty"`
	OriginalVersion string `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a kusto.azure.com/Cluster resource
	Owner             *genruntime.KnownResourceReference `group:"kusto.azure.com" json:"owner,omitempty" kind:"Cluster"`
	PropertyBag       genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	ReadOnlyFollowing *ReadOnlyFollowingDatabase         `json:"readOnlyFollowing,omitempty"`
	ReadWrite         *ReadWriteDatabase                 `json:"readWrite,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Clusters_Database_Spec{}

// ConvertSpecFrom populates our Clusters_Database_Spec from the provided source
func (database *Clusters_Database_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(database)
}

// ConvertSpecTo populates the provided destination from our Clusters_Database_Spec
func (database *Clusters_Database_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(database)
}

// Storage version of v1api20230815.Database_STATUS
type Database_STATUS struct {
	Conditions        []conditions.Condition            `json:"conditions,omitempty"`
	PropertyBag       genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	ReadOnlyFollowing *ReadOnlyFollowingDatabase_STATUS `json:"readOnlyFollowing,omitempty"`
	ReadWrite         *ReadWriteDatabase_STATUS         `json:"readWrite,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Database_STATUS{}

// ConvertStatusFrom populates our Database_STATUS from the provided source
func (database *Database_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(database)
}

// ConvertStatusTo populates the provided destination from our Database_STATUS
func (database *Database_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(database)
}

// Storage version of v1api20230815.ReadOnlyFollowingDatabase
type ReadOnlyFollowingDatabase struct {
	DatabaseShareOrigin *string                `json:"databaseShareOrigin,omitempty"`
	HotCachePeriod      *string                `json:"hotCachePeriod,omitempty"`
	Kind                *string                `json:"kind,omitempty"`
	Location            *string                `json:"location,omitempty"`
	PropertyBag         genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20230815.ReadOnlyFollowingDatabase_STATUS
type ReadOnlyFollowingDatabase_STATUS struct {
	AttachedDatabaseConfigurationName *string                             `json:"attachedDatabaseConfigurationName,omitempty"`
	DatabaseShareOrigin               *string                             `json:"databaseShareOrigin,omitempty"`
	HotCachePeriod                    *string                             `json:"hotCachePeriod,omitempty"`
	Id                                *string                             `json:"id,omitempty"`
	Kind                              *string                             `json:"kind,omitempty"`
	LeaderClusterResourceId           *string                             `json:"leaderClusterResourceId,omitempty"`
	Location                          *string                             `json:"location,omitempty"`
	Name                              *string                             `json:"name,omitempty"`
	OriginalDatabaseName              *string                             `json:"originalDatabaseName,omitempty"`
	PrincipalsModificationKind        *string                             `json:"principalsModificationKind,omitempty"`
	PropertyBag                       genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
	ProvisioningState                 *string                             `json:"provisioningState,omitempty"`
	SoftDeletePeriod                  *string                             `json:"softDeletePeriod,omitempty"`
	Statistics                        *DatabaseStatistics_STATUS          `json:"statistics,omitempty"`
	SuspensionDetails                 *SuspensionDetails_STATUS           `json:"suspensionDetails,omitempty"`
	TableLevelSharingProperties       *TableLevelSharingProperties_STATUS `json:"tableLevelSharingProperties,omitempty"`
	Type                              *string                             `json:"type,omitempty"`
}

// Storage version of v1api20230815.ReadWriteDatabase
type ReadWriteDatabase struct {
	HotCachePeriod     *string                `json:"hotCachePeriod,omitempty"`
	KeyVaultProperties *KeyVaultProperties    `json:"keyVaultProperties,omitempty"`
	Kind               *string                `json:"kind,omitempty"`
	Location           *string                `json:"location,omitempty"`
	PropertyBag        genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SoftDeletePeriod   *string                `json:"softDeletePeriod,omitempty"`
}

// Storage version of v1api20230815.ReadWriteDatabase_STATUS
type ReadWriteDatabase_STATUS struct {
	HotCachePeriod     *string                    `json:"hotCachePeriod,omitempty"`
	Id                 *string                    `json:"id,omitempty"`
	IsFollowed         *bool                      `json:"isFollowed,omitempty"`
	KeyVaultProperties *KeyVaultProperties_STATUS `json:"keyVaultProperties,omitempty"`
	Kind               *string                    `json:"kind,omitempty"`
	Location           *string                    `json:"location,omitempty"`
	Name               *string                    `json:"name,omitempty"`
	PropertyBag        genruntime.PropertyBag     `json:"$propertyBag,omitempty"`
	ProvisioningState  *string                    `json:"provisioningState,omitempty"`
	SoftDeletePeriod   *string                    `json:"softDeletePeriod,omitempty"`
	Statistics         *DatabaseStatistics_STATUS `json:"statistics,omitempty"`
	SuspensionDetails  *SuspensionDetails_STATUS  `json:"suspensionDetails,omitempty"`
	Type               *string                    `json:"type,omitempty"`
}

// Storage version of v1api20230815.DatabaseStatistics_STATUS
// A class that contains database statistics information.
type DatabaseStatistics_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Size        *float64               `json:"size,omitempty"`
}

// Storage version of v1api20230815.SuspensionDetails_STATUS
// The database suspension details. If the database is suspended, this object contains information related to the
// database's suspension state.
type SuspensionDetails_STATUS struct {
	PropertyBag         genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SuspensionStartDate *string                `json:"suspensionStartDate,omitempty"`
}

// Storage version of v1api20230815.TableLevelSharingProperties_STATUS
// Tables that will be included and excluded in the follower database
type TableLevelSharingProperties_STATUS struct {
	ExternalTablesToExclude    []string               `json:"externalTablesToExclude,omitempty"`
	ExternalTablesToInclude    []string               `json:"externalTablesToInclude,omitempty"`
	FunctionsToExclude         []string               `json:"functionsToExclude,omitempty"`
	FunctionsToInclude         []string               `json:"functionsToInclude,omitempty"`
	MaterializedViewsToExclude []string               `json:"materializedViewsToExclude,omitempty"`
	MaterializedViewsToInclude []string               `json:"materializedViewsToInclude,omitempty"`
	PropertyBag                genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	TablesToExclude            []string               `json:"tablesToExclude,omitempty"`
	TablesToInclude            []string               `json:"tablesToInclude,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Database{}, &DatabaseList{})
}
