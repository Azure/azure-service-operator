// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230815

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AcceptedAudiences_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AcceptedAudiences_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAcceptedAudiences_ARM, AcceptedAudiences_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAcceptedAudiences_ARM runs a test to see if a specific instance of AcceptedAudiences_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAcceptedAudiences_ARM(subject AcceptedAudiences_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AcceptedAudiences_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AcceptedAudiences_ARM instances for property testing - lazily instantiated by
// AcceptedAudiences_ARMGenerator()
var acceptedAudiences_ARMGenerator gopter.Gen

// AcceptedAudiences_ARMGenerator returns a generator of AcceptedAudiences_ARM instances for property testing.
func AcceptedAudiences_ARMGenerator() gopter.Gen {
	if acceptedAudiences_ARMGenerator != nil {
		return acceptedAudiences_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAcceptedAudiences_ARM(generators)
	acceptedAudiences_ARMGenerator = gen.Struct(reflect.TypeOf(AcceptedAudiences_ARM{}), generators)

	return acceptedAudiences_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAcceptedAudiences_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAcceptedAudiences_ARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_AzureSku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureSku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureSku_ARM, AzureSku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureSku_ARM runs a test to see if a specific instance of AzureSku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureSku_ARM(subject AzureSku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureSku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureSku_ARM instances for property testing - lazily instantiated by AzureSku_ARMGenerator()
var azureSku_ARMGenerator gopter.Gen

// AzureSku_ARMGenerator returns a generator of AzureSku_ARM instances for property testing.
func AzureSku_ARMGenerator() gopter.Gen {
	if azureSku_ARMGenerator != nil {
		return azureSku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureSku_ARM(generators)
	azureSku_ARMGenerator = gen.Struct(reflect.TypeOf(AzureSku_ARM{}), generators)

	return azureSku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureSku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureSku_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		AzureSku_Name_ARM_DevNoSLA_Standard_D11_V2,
		AzureSku_Name_ARM_DevNoSLA_Standard_E2A_V4,
		AzureSku_Name_ARM_Standard_D11_V2,
		AzureSku_Name_ARM_Standard_D12_V2,
		AzureSku_Name_ARM_Standard_D13_V2,
		AzureSku_Name_ARM_Standard_D14_V2,
		AzureSku_Name_ARM_Standard_D16D_V5,
		AzureSku_Name_ARM_Standard_D32D_V4,
		AzureSku_Name_ARM_Standard_D32D_V5,
		AzureSku_Name_ARM_Standard_DS13_V21TB_PS,
		AzureSku_Name_ARM_Standard_DS13_V22TB_PS,
		AzureSku_Name_ARM_Standard_DS14_V23TB_PS,
		AzureSku_Name_ARM_Standard_DS14_V24TB_PS,
		AzureSku_Name_ARM_Standard_E16A_V4,
		AzureSku_Name_ARM_Standard_E16Ads_V5,
		AzureSku_Name_ARM_Standard_E16As_V43TB_PS,
		AzureSku_Name_ARM_Standard_E16As_V44TB_PS,
		AzureSku_Name_ARM_Standard_E16As_V53TB_PS,
		AzureSku_Name_ARM_Standard_E16As_V54TB_PS,
		AzureSku_Name_ARM_Standard_E16D_V4,
		AzureSku_Name_ARM_Standard_E16D_V5,
		AzureSku_Name_ARM_Standard_E16S_V43TB_PS,
		AzureSku_Name_ARM_Standard_E16S_V44TB_PS,
		AzureSku_Name_ARM_Standard_E16S_V53TB_PS,
		AzureSku_Name_ARM_Standard_E16S_V54TB_PS,
		AzureSku_Name_ARM_Standard_E2A_V4,
		AzureSku_Name_ARM_Standard_E2Ads_V5,
		AzureSku_Name_ARM_Standard_E2D_V4,
		AzureSku_Name_ARM_Standard_E2D_V5,
		AzureSku_Name_ARM_Standard_E4A_V4,
		AzureSku_Name_ARM_Standard_E4Ads_V5,
		AzureSku_Name_ARM_Standard_E4D_V4,
		AzureSku_Name_ARM_Standard_E4D_V5,
		AzureSku_Name_ARM_Standard_E64I_V3,
		AzureSku_Name_ARM_Standard_E80Ids_V4,
		AzureSku_Name_ARM_Standard_E8A_V4,
		AzureSku_Name_ARM_Standard_E8Ads_V5,
		AzureSku_Name_ARM_Standard_E8As_V41TB_PS,
		AzureSku_Name_ARM_Standard_E8As_V42TB_PS,
		AzureSku_Name_ARM_Standard_E8As_V51TB_PS,
		AzureSku_Name_ARM_Standard_E8As_V52TB_PS,
		AzureSku_Name_ARM_Standard_E8D_V4,
		AzureSku_Name_ARM_Standard_E8D_V5,
		AzureSku_Name_ARM_Standard_E8S_V41TB_PS,
		AzureSku_Name_ARM_Standard_E8S_V42TB_PS,
		AzureSku_Name_ARM_Standard_E8S_V51TB_PS,
		AzureSku_Name_ARM_Standard_E8S_V52TB_PS,
		AzureSku_Name_ARM_Standard_EC16Ads_V5,
		AzureSku_Name_ARM_Standard_EC16As_V53TB_PS,
		AzureSku_Name_ARM_Standard_EC16As_V54TB_PS,
		AzureSku_Name_ARM_Standard_EC8Ads_V5,
		AzureSku_Name_ARM_Standard_EC8As_V51TB_PS,
		AzureSku_Name_ARM_Standard_EC8As_V52TB_PS,
		AzureSku_Name_ARM_Standard_L16As_V3,
		AzureSku_Name_ARM_Standard_L16S,
		AzureSku_Name_ARM_Standard_L16S_V2,
		AzureSku_Name_ARM_Standard_L16S_V3,
		AzureSku_Name_ARM_Standard_L32As_V3,
		AzureSku_Name_ARM_Standard_L32S_V3,
		AzureSku_Name_ARM_Standard_L4S,
		AzureSku_Name_ARM_Standard_L8As_V3,
		AzureSku_Name_ARM_Standard_L8S,
		AzureSku_Name_ARM_Standard_L8S_V2,
		AzureSku_Name_ARM_Standard_L8S_V3))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(AzureSku_Tier_ARM_Basic, AzureSku_Tier_ARM_Standard))
}

func Test_ClusterProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterProperties_ARM, ClusterProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterProperties_ARM runs a test to see if a specific instance of ClusterProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterProperties_ARM(subject ClusterProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterProperties_ARM instances for property testing - lazily instantiated by
// ClusterProperties_ARMGenerator()
var clusterProperties_ARMGenerator gopter.Gen

// ClusterProperties_ARMGenerator returns a generator of ClusterProperties_ARM instances for property testing.
// We first initialize clusterProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ClusterProperties_ARMGenerator() gopter.Gen {
	if clusterProperties_ARMGenerator != nil {
		return clusterProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_ARM(generators)
	clusterProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForClusterProperties_ARM(generators)
	clusterProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_ARM{}), generators)

	return clusterProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterProperties_ARM(gens map[string]gopter.Gen) {
	gens["AllowedFqdnList"] = gen.SliceOf(gen.AlphaString())
	gens["AllowedIpRangeList"] = gen.SliceOf(gen.AlphaString())
	gens["EnableAutoStop"] = gen.PtrOf(gen.Bool())
	gens["EnableDiskEncryption"] = gen.PtrOf(gen.Bool())
	gens["EnableDoubleEncryption"] = gen.PtrOf(gen.Bool())
	gens["EnablePurge"] = gen.PtrOf(gen.Bool())
	gens["EnableStreamingIngest"] = gen.PtrOf(gen.Bool())
	gens["EngineType"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_EngineType_ARM_V2, ClusterProperties_EngineType_ARM_V3))
	gens["PublicIPType"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_PublicIPType_ARM_DualStack, ClusterProperties_PublicIPType_ARM_IPv4))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_PublicNetworkAccess_ARM_Disabled, ClusterProperties_PublicNetworkAccess_ARM_Enabled))
	gens["RestrictOutboundNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_RestrictOutboundNetworkAccess_ARM_Disabled, ClusterProperties_RestrictOutboundNetworkAccess_ARM_Enabled))
	gens["VirtualClusterGraduationProperties"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForClusterProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForClusterProperties_ARM(gens map[string]gopter.Gen) {
	gens["AcceptedAudiences"] = gen.SliceOf(AcceptedAudiences_ARMGenerator())
	gens["KeyVaultProperties"] = gen.PtrOf(KeyVaultProperties_ARMGenerator())
	gens["LanguageExtensions"] = gen.PtrOf(LanguageExtensionsList_ARMGenerator())
	gens["OptimizedAutoscale"] = gen.PtrOf(OptimizedAutoscale_ARMGenerator())
	gens["TrustedExternalTenants"] = gen.SliceOf(TrustedExternalTenant_ARMGenerator())
	gens["VirtualNetworkConfiguration"] = gen.PtrOf(VirtualNetworkConfiguration_ARMGenerator())
}

func Test_Cluster_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Cluster_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCluster_Spec_ARM, Cluster_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCluster_Spec_ARM runs a test to see if a specific instance of Cluster_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCluster_Spec_ARM(subject Cluster_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Cluster_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Cluster_Spec_ARM instances for property testing - lazily instantiated by Cluster_Spec_ARMGenerator()
var cluster_Spec_ARMGenerator gopter.Gen

// Cluster_Spec_ARMGenerator returns a generator of Cluster_Spec_ARM instances for property testing.
// We first initialize cluster_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Cluster_Spec_ARMGenerator() gopter.Gen {
	if cluster_Spec_ARMGenerator != nil {
		return cluster_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCluster_Spec_ARM(generators)
	cluster_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Cluster_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCluster_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForCluster_Spec_ARM(generators)
	cluster_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Cluster_Spec_ARM{}), generators)

	return cluster_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCluster_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCluster_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCluster_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCluster_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(Identity_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ClusterProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(AzureSku_ARMGenerator())
}

func Test_Identity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Identity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIdentity_ARM, Identity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIdentity_ARM runs a test to see if a specific instance of Identity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIdentity_ARM(subject Identity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Identity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Identity_ARM instances for property testing - lazily instantiated by Identity_ARMGenerator()
var identity_ARMGenerator gopter.Gen

// Identity_ARMGenerator returns a generator of Identity_ARM instances for property testing.
// We first initialize identity_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Identity_ARMGenerator() gopter.Gen {
	if identity_ARMGenerator != nil {
		return identity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentity_ARM(generators)
	identity_ARMGenerator = gen.Struct(reflect.TypeOf(Identity_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentity_ARM(generators)
	AddRelatedPropertyGeneratorsForIdentity_ARM(generators)
	identity_ARMGenerator = gen.Struct(reflect.TypeOf(Identity_ARM{}), generators)

	return identity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		Identity_Type_ARM_None,
		Identity_Type_ARM_SystemAssigned,
		Identity_Type_ARM_SystemAssignedUserAssigned,
		Identity_Type_ARM_UserAssigned))
}

// AddRelatedPropertyGeneratorsForIdentity_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIdentity_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentityDetails_ARMGenerator())
}

func Test_KeyVaultProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultProperties_ARM, KeyVaultProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultProperties_ARM runs a test to see if a specific instance of KeyVaultProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultProperties_ARM(subject KeyVaultProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultProperties_ARM instances for property testing - lazily instantiated by
// KeyVaultProperties_ARMGenerator()
var keyVaultProperties_ARMGenerator gopter.Gen

// KeyVaultProperties_ARMGenerator returns a generator of KeyVaultProperties_ARM instances for property testing.
func KeyVaultProperties_ARMGenerator() gopter.Gen {
	if keyVaultProperties_ARMGenerator != nil {
		return keyVaultProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultProperties_ARM(generators)
	keyVaultProperties_ARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultProperties_ARM{}), generators)

	return keyVaultProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultProperties_ARM(gens map[string]gopter.Gen) {
	gens["KeyName"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultUri"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVersion"] = gen.PtrOf(gen.AlphaString())
	gens["UserIdentity"] = gen.PtrOf(gen.AlphaString())
}

func Test_LanguageExtension_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LanguageExtension_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLanguageExtension_ARM, LanguageExtension_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLanguageExtension_ARM runs a test to see if a specific instance of LanguageExtension_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLanguageExtension_ARM(subject LanguageExtension_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LanguageExtension_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LanguageExtension_ARM instances for property testing - lazily instantiated by
// LanguageExtension_ARMGenerator()
var languageExtension_ARMGenerator gopter.Gen

// LanguageExtension_ARMGenerator returns a generator of LanguageExtension_ARM instances for property testing.
func LanguageExtension_ARMGenerator() gopter.Gen {
	if languageExtension_ARMGenerator != nil {
		return languageExtension_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLanguageExtension_ARM(generators)
	languageExtension_ARMGenerator = gen.Struct(reflect.TypeOf(LanguageExtension_ARM{}), generators)

	return languageExtension_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLanguageExtension_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLanguageExtension_ARM(gens map[string]gopter.Gen) {
	gens["LanguageExtensionCustomImageName"] = gen.PtrOf(gen.AlphaString())
	gens["LanguageExtensionImageName"] = gen.PtrOf(gen.OneConstOf(
		LanguageExtensionImageName_ARM_Python3_10_8,
		LanguageExtensionImageName_ARM_Python3_10_8_DL,
		LanguageExtensionImageName_ARM_Python3_6_5,
		LanguageExtensionImageName_ARM_PythonCustomImage,
		LanguageExtensionImageName_ARM_R))
	gens["LanguageExtensionName"] = gen.PtrOf(gen.OneConstOf(LanguageExtensionName_ARM_PYTHON, LanguageExtensionName_ARM_R))
}

func Test_LanguageExtensionsList_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LanguageExtensionsList_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLanguageExtensionsList_ARM, LanguageExtensionsList_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLanguageExtensionsList_ARM runs a test to see if a specific instance of LanguageExtensionsList_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLanguageExtensionsList_ARM(subject LanguageExtensionsList_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LanguageExtensionsList_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LanguageExtensionsList_ARM instances for property testing - lazily instantiated by
// LanguageExtensionsList_ARMGenerator()
var languageExtensionsList_ARMGenerator gopter.Gen

// LanguageExtensionsList_ARMGenerator returns a generator of LanguageExtensionsList_ARM instances for property testing.
func LanguageExtensionsList_ARMGenerator() gopter.Gen {
	if languageExtensionsList_ARMGenerator != nil {
		return languageExtensionsList_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForLanguageExtensionsList_ARM(generators)
	languageExtensionsList_ARMGenerator = gen.Struct(reflect.TypeOf(LanguageExtensionsList_ARM{}), generators)

	return languageExtensionsList_ARMGenerator
}

// AddRelatedPropertyGeneratorsForLanguageExtensionsList_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLanguageExtensionsList_ARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.SliceOf(LanguageExtension_ARMGenerator())
}

func Test_OptimizedAutoscale_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OptimizedAutoscale_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOptimizedAutoscale_ARM, OptimizedAutoscale_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOptimizedAutoscale_ARM runs a test to see if a specific instance of OptimizedAutoscale_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOptimizedAutoscale_ARM(subject OptimizedAutoscale_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OptimizedAutoscale_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OptimizedAutoscale_ARM instances for property testing - lazily instantiated by
// OptimizedAutoscale_ARMGenerator()
var optimizedAutoscale_ARMGenerator gopter.Gen

// OptimizedAutoscale_ARMGenerator returns a generator of OptimizedAutoscale_ARM instances for property testing.
func OptimizedAutoscale_ARMGenerator() gopter.Gen {
	if optimizedAutoscale_ARMGenerator != nil {
		return optimizedAutoscale_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptimizedAutoscale_ARM(generators)
	optimizedAutoscale_ARMGenerator = gen.Struct(reflect.TypeOf(OptimizedAutoscale_ARM{}), generators)

	return optimizedAutoscale_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOptimizedAutoscale_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOptimizedAutoscale_ARM(gens map[string]gopter.Gen) {
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.Int())
}

func Test_TrustedExternalTenant_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TrustedExternalTenant_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTrustedExternalTenant_ARM, TrustedExternalTenant_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTrustedExternalTenant_ARM runs a test to see if a specific instance of TrustedExternalTenant_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTrustedExternalTenant_ARM(subject TrustedExternalTenant_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TrustedExternalTenant_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TrustedExternalTenant_ARM instances for property testing - lazily instantiated by
// TrustedExternalTenant_ARMGenerator()
var trustedExternalTenant_ARMGenerator gopter.Gen

// TrustedExternalTenant_ARMGenerator returns a generator of TrustedExternalTenant_ARM instances for property testing.
func TrustedExternalTenant_ARMGenerator() gopter.Gen {
	if trustedExternalTenant_ARMGenerator != nil {
		return trustedExternalTenant_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTrustedExternalTenant_ARM(generators)
	trustedExternalTenant_ARMGenerator = gen.Struct(reflect.TypeOf(TrustedExternalTenant_ARM{}), generators)

	return trustedExternalTenant_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTrustedExternalTenant_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTrustedExternalTenant_ARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentityDetails_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityDetails_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityDetails_ARM, UserAssignedIdentityDetails_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityDetails_ARM runs a test to see if a specific instance of UserAssignedIdentityDetails_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityDetails_ARM(subject UserAssignedIdentityDetails_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityDetails_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityDetails_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentityDetails_ARMGenerator()
var userAssignedIdentityDetails_ARMGenerator gopter.Gen

// UserAssignedIdentityDetails_ARMGenerator returns a generator of UserAssignedIdentityDetails_ARM instances for property testing.
func UserAssignedIdentityDetails_ARMGenerator() gopter.Gen {
	if userAssignedIdentityDetails_ARMGenerator != nil {
		return userAssignedIdentityDetails_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	userAssignedIdentityDetails_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityDetails_ARM{}), generators)

	return userAssignedIdentityDetails_ARMGenerator
}

func Test_VirtualNetworkConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkConfiguration_ARM, VirtualNetworkConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkConfiguration_ARM runs a test to see if a specific instance of VirtualNetworkConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkConfiguration_ARM(subject VirtualNetworkConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkConfiguration_ARM instances for property testing - lazily instantiated by
// VirtualNetworkConfiguration_ARMGenerator()
var virtualNetworkConfiguration_ARMGenerator gopter.Gen

// VirtualNetworkConfiguration_ARMGenerator returns a generator of VirtualNetworkConfiguration_ARM instances for property testing.
func VirtualNetworkConfiguration_ARMGenerator() gopter.Gen {
	if virtualNetworkConfiguration_ARMGenerator != nil {
		return virtualNetworkConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkConfiguration_ARM(generators)
	virtualNetworkConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkConfiguration_ARM{}), generators)

	return virtualNetworkConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["DataManagementPublicIpId"] = gen.PtrOf(gen.AlphaString())
	gens["EnginePublicIpId"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(VirtualNetworkConfiguration_State_ARM_Disabled, VirtualNetworkConfiguration_State_ARM_Enabled))
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
}
