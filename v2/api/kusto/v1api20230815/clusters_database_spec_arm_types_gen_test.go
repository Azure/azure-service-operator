// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230815

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Clusters_Database_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Clusters_Database_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusters_Database_Spec_ARM, Clusters_Database_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusters_Database_Spec_ARM runs a test to see if a specific instance of Clusters_Database_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusters_Database_Spec_ARM(subject Clusters_Database_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Clusters_Database_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Clusters_Database_Spec_ARM instances for property testing - lazily instantiated by
// Clusters_Database_Spec_ARMGenerator()
var clusters_Database_Spec_ARMGenerator gopter.Gen

// Clusters_Database_Spec_ARMGenerator returns a generator of Clusters_Database_Spec_ARM instances for property testing.
// We first initialize clusters_Database_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Clusters_Database_Spec_ARMGenerator() gopter.Gen {
	if clusters_Database_Spec_ARMGenerator != nil {
		return clusters_Database_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusters_Database_Spec_ARM(generators)
	clusters_Database_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Clusters_Database_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusters_Database_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForClusters_Database_Spec_ARM(generators)
	clusters_Database_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Clusters_Database_Spec_ARM{}), generators)

	return clusters_Database_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForClusters_Database_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusters_Database_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForClusters_Database_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForClusters_Database_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ReadOnlyFollowing"] = gen.PtrOf(ReadOnlyFollowingDatabase_ARMGenerator())
	gens["ReadWrite"] = gen.PtrOf(ReadWriteDatabase_ARMGenerator())
}

func Test_ReadOnlyFollowingDatabaseProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ReadOnlyFollowingDatabaseProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForReadOnlyFollowingDatabaseProperties_ARM, ReadOnlyFollowingDatabaseProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForReadOnlyFollowingDatabaseProperties_ARM runs a test to see if a specific instance of ReadOnlyFollowingDatabaseProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForReadOnlyFollowingDatabaseProperties_ARM(subject ReadOnlyFollowingDatabaseProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ReadOnlyFollowingDatabaseProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ReadOnlyFollowingDatabaseProperties_ARM instances for property testing - lazily instantiated by
// ReadOnlyFollowingDatabaseProperties_ARMGenerator()
var readOnlyFollowingDatabaseProperties_ARMGenerator gopter.Gen

// ReadOnlyFollowingDatabaseProperties_ARMGenerator returns a generator of ReadOnlyFollowingDatabaseProperties_ARM instances for property testing.
func ReadOnlyFollowingDatabaseProperties_ARMGenerator() gopter.Gen {
	if readOnlyFollowingDatabaseProperties_ARMGenerator != nil {
		return readOnlyFollowingDatabaseProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabaseProperties_ARM(generators)
	readOnlyFollowingDatabaseProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ReadOnlyFollowingDatabaseProperties_ARM{}), generators)

	return readOnlyFollowingDatabaseProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabaseProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabaseProperties_ARM(gens map[string]gopter.Gen) {
	gens["DatabaseShareOrigin"] = gen.PtrOf(gen.OneConstOf(DatabaseShareOrigin_ARM_DataShare, DatabaseShareOrigin_ARM_Direct, DatabaseShareOrigin_ARM_Other))
	gens["HotCachePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ReadOnlyFollowingDatabase_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ReadOnlyFollowingDatabase_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForReadOnlyFollowingDatabase_ARM, ReadOnlyFollowingDatabase_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForReadOnlyFollowingDatabase_ARM runs a test to see if a specific instance of ReadOnlyFollowingDatabase_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForReadOnlyFollowingDatabase_ARM(subject ReadOnlyFollowingDatabase_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ReadOnlyFollowingDatabase_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ReadOnlyFollowingDatabase_ARM instances for property testing - lazily instantiated by
// ReadOnlyFollowingDatabase_ARMGenerator()
var readOnlyFollowingDatabase_ARMGenerator gopter.Gen

// ReadOnlyFollowingDatabase_ARMGenerator returns a generator of ReadOnlyFollowingDatabase_ARM instances for property testing.
// We first initialize readOnlyFollowingDatabase_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ReadOnlyFollowingDatabase_ARMGenerator() gopter.Gen {
	if readOnlyFollowingDatabase_ARMGenerator != nil {
		return readOnlyFollowingDatabase_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabase_ARM(generators)
	readOnlyFollowingDatabase_ARMGenerator = gen.Struct(reflect.TypeOf(ReadOnlyFollowingDatabase_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabase_ARM(generators)
	AddRelatedPropertyGeneratorsForReadOnlyFollowingDatabase_ARM(generators)
	readOnlyFollowingDatabase_ARMGenerator = gen.Struct(reflect.TypeOf(ReadOnlyFollowingDatabase_ARM{}), generators)

	return readOnlyFollowingDatabase_ARMGenerator
}

// AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabase_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForReadOnlyFollowingDatabase_ARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(ReadOnlyFollowingDatabase_Kind_ARM_ReadOnlyFollowing))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForReadOnlyFollowingDatabase_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForReadOnlyFollowingDatabase_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ReadOnlyFollowingDatabaseProperties_ARMGenerator())
}

func Test_ReadWriteDatabaseProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ReadWriteDatabaseProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForReadWriteDatabaseProperties_ARM, ReadWriteDatabaseProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForReadWriteDatabaseProperties_ARM runs a test to see if a specific instance of ReadWriteDatabaseProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForReadWriteDatabaseProperties_ARM(subject ReadWriteDatabaseProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ReadWriteDatabaseProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ReadWriteDatabaseProperties_ARM instances for property testing - lazily instantiated by
// ReadWriteDatabaseProperties_ARMGenerator()
var readWriteDatabaseProperties_ARMGenerator gopter.Gen

// ReadWriteDatabaseProperties_ARMGenerator returns a generator of ReadWriteDatabaseProperties_ARM instances for property testing.
// We first initialize readWriteDatabaseProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ReadWriteDatabaseProperties_ARMGenerator() gopter.Gen {
	if readWriteDatabaseProperties_ARMGenerator != nil {
		return readWriteDatabaseProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadWriteDatabaseProperties_ARM(generators)
	readWriteDatabaseProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ReadWriteDatabaseProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadWriteDatabaseProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForReadWriteDatabaseProperties_ARM(generators)
	readWriteDatabaseProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ReadWriteDatabaseProperties_ARM{}), generators)

	return readWriteDatabaseProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForReadWriteDatabaseProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForReadWriteDatabaseProperties_ARM(gens map[string]gopter.Gen) {
	gens["HotCachePeriod"] = gen.PtrOf(gen.AlphaString())
	gens["SoftDeletePeriod"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForReadWriteDatabaseProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForReadWriteDatabaseProperties_ARM(gens map[string]gopter.Gen) {
	gens["KeyVaultProperties"] = gen.PtrOf(KeyVaultProperties_ARMGenerator())
}

func Test_ReadWriteDatabase_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ReadWriteDatabase_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForReadWriteDatabase_ARM, ReadWriteDatabase_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForReadWriteDatabase_ARM runs a test to see if a specific instance of ReadWriteDatabase_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForReadWriteDatabase_ARM(subject ReadWriteDatabase_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ReadWriteDatabase_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ReadWriteDatabase_ARM instances for property testing - lazily instantiated by
// ReadWriteDatabase_ARMGenerator()
var readWriteDatabase_ARMGenerator gopter.Gen

// ReadWriteDatabase_ARMGenerator returns a generator of ReadWriteDatabase_ARM instances for property testing.
// We first initialize readWriteDatabase_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ReadWriteDatabase_ARMGenerator() gopter.Gen {
	if readWriteDatabase_ARMGenerator != nil {
		return readWriteDatabase_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadWriteDatabase_ARM(generators)
	readWriteDatabase_ARMGenerator = gen.Struct(reflect.TypeOf(ReadWriteDatabase_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForReadWriteDatabase_ARM(generators)
	AddRelatedPropertyGeneratorsForReadWriteDatabase_ARM(generators)
	readWriteDatabase_ARMGenerator = gen.Struct(reflect.TypeOf(ReadWriteDatabase_ARM{}), generators)

	return readWriteDatabase_ARMGenerator
}

// AddIndependentPropertyGeneratorsForReadWriteDatabase_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForReadWriteDatabase_ARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(ReadWriteDatabase_Kind_ARM_ReadWrite))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForReadWriteDatabase_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForReadWriteDatabase_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ReadWriteDatabaseProperties_ARMGenerator())
}
