// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisFirewallRules_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRules_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRules_SPECARM, RedisFirewallRules_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRules_SPECARM runs a test to see if a specific instance of RedisFirewallRules_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRules_SPECARM(subject RedisFirewallRules_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRules_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRules_SPECARM instances for property testing - lazily instantiated by
//RedisFirewallRules_SPECARMGenerator()
var redisFirewallRules_specarmGenerator gopter.Gen

// RedisFirewallRules_SPECARMGenerator returns a generator of RedisFirewallRules_SPECARM instances for property testing.
// We first initialize redisFirewallRules_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisFirewallRules_SPECARMGenerator() gopter.Gen {
	if redisFirewallRules_specarmGenerator != nil {
		return redisFirewallRules_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRules_SPECARM(generators)
	redisFirewallRules_specarmGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRules_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRules_SPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisFirewallRules_SPECARM(generators)
	redisFirewallRules_specarmGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRules_SPECARM{}), generators)

	return redisFirewallRules_specarmGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRules_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRules_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisFirewallRules_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisFirewallRules_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RedisFirewallRuleProperties_SpecARMGenerator()
}

func Test_RedisFirewallRuleProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRuleProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRuleProperties_SpecARM, RedisFirewallRuleProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRuleProperties_SpecARM runs a test to see if a specific instance of RedisFirewallRuleProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRuleProperties_SpecARM(subject RedisFirewallRuleProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRuleProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRuleProperties_SpecARM instances for property testing - lazily instantiated by
//RedisFirewallRuleProperties_SpecARMGenerator()
var redisFirewallRuleProperties_specARMGenerator gopter.Gen

// RedisFirewallRuleProperties_SpecARMGenerator returns a generator of RedisFirewallRuleProperties_SpecARM instances for property testing.
func RedisFirewallRuleProperties_SpecARMGenerator() gopter.Gen {
	if redisFirewallRuleProperties_specARMGenerator != nil {
		return redisFirewallRuleProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRuleProperties_SpecARM(generators)
	redisFirewallRuleProperties_specARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRuleProperties_SpecARM{}), generators)

	return redisFirewallRuleProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRuleProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRuleProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["EndIP"] = gen.AlphaString()
	gens["StartIP"] = gen.AlphaString()
}
