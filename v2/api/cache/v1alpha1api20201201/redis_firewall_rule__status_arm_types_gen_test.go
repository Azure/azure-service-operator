// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisFirewallRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRuleStatusARM, RedisFirewallRuleStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRuleStatusARM runs a test to see if a specific instance of RedisFirewallRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRuleStatusARM(subject RedisFirewallRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRule_StatusARM instances for property testing - lazily instantiated by
//RedisFirewallRuleStatusARMGenerator()
var redisFirewallRuleStatusARMGenerator gopter.Gen

// RedisFirewallRuleStatusARMGenerator returns a generator of RedisFirewallRule_StatusARM instances for property testing.
// We first initialize redisFirewallRuleStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisFirewallRuleStatusARMGenerator() gopter.Gen {
	if redisFirewallRuleStatusARMGenerator != nil {
		return redisFirewallRuleStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRuleStatusARM(generators)
	redisFirewallRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRule_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRuleStatusARM(generators)
	AddRelatedPropertyGeneratorsForRedisFirewallRuleStatusARM(generators)
	redisFirewallRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRule_StatusARM{}), generators)

	return redisFirewallRuleStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRuleStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisFirewallRuleStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisFirewallRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisFirewallRulePropertiesStatusARMGenerator())
}

func Test_RedisFirewallRuleProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRuleProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRulePropertiesStatusARM, RedisFirewallRulePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRulePropertiesStatusARM runs a test to see if a specific instance of RedisFirewallRuleProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRulePropertiesStatusARM(subject RedisFirewallRuleProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRuleProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRuleProperties_StatusARM instances for property testing - lazily instantiated by
//RedisFirewallRulePropertiesStatusARMGenerator()
var redisFirewallRulePropertiesStatusARMGenerator gopter.Gen

// RedisFirewallRulePropertiesStatusARMGenerator returns a generator of RedisFirewallRuleProperties_StatusARM instances for property testing.
func RedisFirewallRulePropertiesStatusARMGenerator() gopter.Gen {
	if redisFirewallRulePropertiesStatusARMGenerator != nil {
		return redisFirewallRulePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesStatusARM(generators)
	redisFirewallRulePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRuleProperties_StatusARM{}), generators)

	return redisFirewallRulePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["EndIP"] = gen.AlphaString()
	gens["StartIP"] = gen.AlphaString()
}
