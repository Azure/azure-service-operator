// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisLinkedServers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServers_SPECARM, RedisLinkedServers_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServers_SPECARM runs a test to see if a specific instance of RedisLinkedServers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServers_SPECARM(subject RedisLinkedServers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServers_SPECARM instances for property testing - lazily instantiated by
//RedisLinkedServers_SPECARMGenerator()
var redisLinkedServers_specarmGenerator gopter.Gen

// RedisLinkedServers_SPECARMGenerator returns a generator of RedisLinkedServers_SPECARM instances for property testing.
// We first initialize redisLinkedServers_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisLinkedServers_SPECARMGenerator() gopter.Gen {
	if redisLinkedServers_specarmGenerator != nil {
		return redisLinkedServers_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServers_SPECARM(generators)
	redisLinkedServers_specarmGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServers_SPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisLinkedServers_SPECARM(generators)
	redisLinkedServers_specarmGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServers_SPECARM{}), generators)

	return redisLinkedServers_specarmGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServers_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServers_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisLinkedServers_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisLinkedServers_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RedisLinkedServerCreateProperties_SpecARMGenerator()
}

func Test_RedisLinkedServerCreateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerCreateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerCreateProperties_SpecARM, RedisLinkedServerCreateProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerCreateProperties_SpecARM runs a test to see if a specific instance of RedisLinkedServerCreateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerCreateProperties_SpecARM(subject RedisLinkedServerCreateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerCreateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerCreateProperties_SpecARM instances for property testing - lazily instantiated by
//RedisLinkedServerCreateProperties_SpecARMGenerator()
var redisLinkedServerCreateProperties_specARMGenerator gopter.Gen

// RedisLinkedServerCreateProperties_SpecARMGenerator returns a generator of RedisLinkedServerCreateProperties_SpecARM instances for property testing.
func RedisLinkedServerCreateProperties_SpecARMGenerator() gopter.Gen {
	if redisLinkedServerCreateProperties_specARMGenerator != nil {
		return redisLinkedServerCreateProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServerCreateProperties_SpecARM(generators)
	redisLinkedServerCreateProperties_specARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerCreateProperties_SpecARM{}), generators)

	return redisLinkedServerCreateProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServerCreateProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServerCreateProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["LinkedRedisCacheId"] = gen.AlphaString()
	gens["LinkedRedisCacheLocation"] = gen.AlphaString()
	gens["ServerRole"] = gen.OneConstOf(RedisLinkedServerCreateProperties_ServerRole_SpecPrimary, RedisLinkedServerCreateProperties_ServerRole_SpecSecondary)
}
