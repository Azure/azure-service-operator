// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisLinkedServers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServersSPECARM, RedisLinkedServersSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServersSPECARM runs a test to see if a specific instance of RedisLinkedServers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServersSPECARM(subject RedisLinkedServers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServers_SPECARM instances for property testing - lazily instantiated by
//RedisLinkedServersSPECARMGenerator()
var redisLinkedServersSPECARMGenerator gopter.Gen

// RedisLinkedServersSPECARMGenerator returns a generator of RedisLinkedServers_SPECARM instances for property testing.
// We first initialize redisLinkedServersSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisLinkedServersSPECARMGenerator() gopter.Gen {
	if redisLinkedServersSPECARMGenerator != nil {
		return redisLinkedServersSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServersSPECARM(generators)
	redisLinkedServersSPECARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServersSPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisLinkedServersSPECARM(generators)
	redisLinkedServersSPECARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServers_SPECARM{}), generators)

	return redisLinkedServersSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServersSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServersSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisLinkedServersSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisLinkedServersSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RedisLinkedServerCreatePropertiesSpecARMGenerator()
}

func Test_RedisLinkedServerCreateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerCreateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerCreatePropertiesSpecARM, RedisLinkedServerCreatePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerCreatePropertiesSpecARM runs a test to see if a specific instance of RedisLinkedServerCreateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerCreatePropertiesSpecARM(subject RedisLinkedServerCreateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerCreateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerCreateProperties_SpecARM instances for property testing - lazily instantiated by
//RedisLinkedServerCreatePropertiesSpecARMGenerator()
var redisLinkedServerCreatePropertiesSpecARMGenerator gopter.Gen

// RedisLinkedServerCreatePropertiesSpecARMGenerator returns a generator of RedisLinkedServerCreateProperties_SpecARM instances for property testing.
func RedisLinkedServerCreatePropertiesSpecARMGenerator() gopter.Gen {
	if redisLinkedServerCreatePropertiesSpecARMGenerator != nil {
		return redisLinkedServerCreatePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServerCreatePropertiesSpecARM(generators)
	redisLinkedServerCreatePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerCreateProperties_SpecARM{}), generators)

	return redisLinkedServerCreatePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServerCreatePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServerCreatePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["LinkedRedisCacheId"] = gen.AlphaString()
	gens["LinkedRedisCacheLocation"] = gen.AlphaString()
	gens["ServerRole"] = gen.OneConstOf(RedisLinkedServerCreatePropertiesSpecServerRolePrimary, RedisLinkedServerCreatePropertiesSpecServerRoleSecondary)
}
