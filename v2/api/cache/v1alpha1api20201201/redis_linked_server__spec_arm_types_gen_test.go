// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisLinkedServer_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServer_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServer_SpecARM, RedisLinkedServer_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServer_SpecARM runs a test to see if a specific instance of RedisLinkedServer_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServer_SpecARM(subject RedisLinkedServer_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServer_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServer_SpecARM instances for property testing - lazily instantiated by
//RedisLinkedServer_SpecARMGenerator()
var redisLinkedServer_specARMGenerator gopter.Gen

// RedisLinkedServer_SpecARMGenerator returns a generator of RedisLinkedServer_SpecARM instances for property testing.
// We first initialize redisLinkedServer_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisLinkedServer_SpecARMGenerator() gopter.Gen {
	if redisLinkedServer_specARMGenerator != nil {
		return redisLinkedServer_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServer_SpecARM(generators)
	redisLinkedServer_specARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServer_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServer_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRedisLinkedServer_SpecARM(generators)
	redisLinkedServer_specARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServer_SpecARM{}), generators)

	return redisLinkedServer_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServer_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServer_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisLinkedServer_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisLinkedServer_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RedisLinkedServerPropertiesARMGenerator()
}

func Test_RedisLinkedServerPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerPropertiesARM, RedisLinkedServerPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerPropertiesARM runs a test to see if a specific instance of RedisLinkedServerPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerPropertiesARM(subject RedisLinkedServerPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerPropertiesARM instances for property testing - lazily instantiated by
//RedisLinkedServerPropertiesARMGenerator()
var redisLinkedServerPropertiesARMGenerator gopter.Gen

// RedisLinkedServerPropertiesARMGenerator returns a generator of RedisLinkedServerPropertiesARM instances for property testing.
func RedisLinkedServerPropertiesARMGenerator() gopter.Gen {
	if redisLinkedServerPropertiesARMGenerator != nil {
		return redisLinkedServerPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServerPropertiesARM(generators)
	redisLinkedServerPropertiesARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerPropertiesARM{}), generators)

	return redisLinkedServerPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServerPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServerPropertiesARM(gens map[string]gopter.Gen) {
	gens["LinkedRedisCacheId"] = gen.AlphaString()
	gens["LinkedRedisCacheLocation"] = gen.AlphaString()
	gens["ServerRole"] = gen.OneConstOf(RedisLinkedServerPropertiesServerRolePrimary, RedisLinkedServerPropertiesServerRoleSecondary)
}
