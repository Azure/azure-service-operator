// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisLinkedServerCreateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerCreateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerCreateParametersStatusARM, RedisLinkedServerCreateParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerCreateParametersStatusARM runs a test to see if a specific instance of RedisLinkedServerCreateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerCreateParametersStatusARM(subject RedisLinkedServerCreateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerCreateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerCreateParameters_StatusARM instances for property testing - lazily instantiated by
//RedisLinkedServerCreateParametersStatusARMGenerator()
var redisLinkedServerCreateParametersStatusARMGenerator gopter.Gen

// RedisLinkedServerCreateParametersStatusARMGenerator returns a generator of RedisLinkedServerCreateParameters_StatusARM instances for property testing.
func RedisLinkedServerCreateParametersStatusARMGenerator() gopter.Gen {
	if redisLinkedServerCreateParametersStatusARMGenerator != nil {
		return redisLinkedServerCreateParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRedisLinkedServerCreateParametersStatusARM(generators)
	redisLinkedServerCreateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerCreateParameters_StatusARM{}), generators)

	return redisLinkedServerCreateParametersStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForRedisLinkedServerCreateParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisLinkedServerCreateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisLinkedServerCreatePropertiesStatusARMGenerator())
}

func Test_RedisLinkedServerCreateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerCreateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerCreatePropertiesStatusARM, RedisLinkedServerCreatePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerCreatePropertiesStatusARM runs a test to see if a specific instance of RedisLinkedServerCreateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerCreatePropertiesStatusARM(subject RedisLinkedServerCreateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerCreateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerCreateProperties_StatusARM instances for property testing - lazily instantiated by
//RedisLinkedServerCreatePropertiesStatusARMGenerator()
var redisLinkedServerCreatePropertiesStatusARMGenerator gopter.Gen

// RedisLinkedServerCreatePropertiesStatusARMGenerator returns a generator of RedisLinkedServerCreateProperties_StatusARM instances for property testing.
func RedisLinkedServerCreatePropertiesStatusARMGenerator() gopter.Gen {
	if redisLinkedServerCreatePropertiesStatusARMGenerator != nil {
		return redisLinkedServerCreatePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServerCreatePropertiesStatusARM(generators)
	redisLinkedServerCreatePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerCreateProperties_StatusARM{}), generators)

	return redisLinkedServerCreatePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServerCreatePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServerCreatePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["LinkedRedisCacheId"] = gen.AlphaString()
	gens["LinkedRedisCacheLocation"] = gen.AlphaString()
	gens["ServerRole"] = gen.OneConstOf(RedisLinkedServerCreatePropertiesStatusServerRolePrimary, RedisLinkedServerCreatePropertiesStatusServerRoleSecondary)
}
