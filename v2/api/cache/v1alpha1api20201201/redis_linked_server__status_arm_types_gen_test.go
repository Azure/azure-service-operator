// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisLinkedServer_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServer_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServer_StatusARM, RedisLinkedServer_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServer_StatusARM runs a test to see if a specific instance of RedisLinkedServer_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServer_StatusARM(subject RedisLinkedServer_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServer_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServer_StatusARM instances for property testing - lazily instantiated by
//RedisLinkedServer_StatusARMGenerator()
var redisLinkedServer_statusARMGenerator gopter.Gen

// RedisLinkedServer_StatusARMGenerator returns a generator of RedisLinkedServer_StatusARM instances for property testing.
func RedisLinkedServer_StatusARMGenerator() gopter.Gen {
	if redisLinkedServer_statusARMGenerator != nil {
		return redisLinkedServer_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRedisLinkedServer_StatusARM(generators)
	redisLinkedServer_statusARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServer_StatusARM{}), generators)

	return redisLinkedServer_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForRedisLinkedServer_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisLinkedServer_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisLinkedServerProperties_StatusARMGenerator())
}

func Test_RedisLinkedServerProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerProperties_StatusARM, RedisLinkedServerProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerProperties_StatusARM runs a test to see if a specific instance of RedisLinkedServerProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerProperties_StatusARM(subject RedisLinkedServerProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerProperties_StatusARM instances for property testing - lazily instantiated by
//RedisLinkedServerProperties_StatusARMGenerator()
var redisLinkedServerProperties_statusARMGenerator gopter.Gen

// RedisLinkedServerProperties_StatusARMGenerator returns a generator of RedisLinkedServerProperties_StatusARM instances for property testing.
func RedisLinkedServerProperties_StatusARMGenerator() gopter.Gen {
	if redisLinkedServerProperties_statusARMGenerator != nil {
		return redisLinkedServerProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServerProperties_StatusARM(generators)
	redisLinkedServerProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerProperties_StatusARM{}), generators)

	return redisLinkedServerProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServerProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServerProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["LinkedRedisCacheId"] = gen.AlphaString()
	gens["LinkedRedisCacheLocation"] = gen.AlphaString()
	gens["ServerRole"] = gen.AlphaString()
}
