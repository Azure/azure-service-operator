// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisPatchSchedule_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisPatchSchedule to hub returns original",
		prop.ForAll(RunResourceConversionTestForRedisPatchSchedule, RedisPatchScheduleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForRedisPatchSchedule tests if a specific instance of RedisPatchSchedule round trips to the hub storage version and back losslessly
func RunResourceConversionTestForRedisPatchSchedule(subject RedisPatchSchedule) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20201201storage.RedisPatchSchedule
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual RedisPatchSchedule
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisPatchSchedule_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisPatchSchedule to RedisPatchSchedule via AssignPropertiesToRedisPatchSchedule & AssignPropertiesFromRedisPatchSchedule returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisPatchSchedule, RedisPatchScheduleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisPatchSchedule tests if a specific instance of RedisPatchSchedule can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForRedisPatchSchedule(subject RedisPatchSchedule) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.RedisPatchSchedule
	err := copied.AssignPropertiesToRedisPatchSchedule(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisPatchSchedule
	err = actual.AssignPropertiesFromRedisPatchSchedule(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisPatchSchedule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchSchedule, RedisPatchScheduleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchSchedule runs a test to see if a specific instance of RedisPatchSchedule round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchSchedule(subject RedisPatchSchedule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedule instances for property testing - lazily instantiated by RedisPatchScheduleGenerator()
var redisPatchScheduleGenerator gopter.Gen

// RedisPatchScheduleGenerator returns a generator of RedisPatchSchedule instances for property testing.
func RedisPatchScheduleGenerator() gopter.Gen {
	if redisPatchScheduleGenerator != nil {
		return redisPatchScheduleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRedisPatchSchedule(generators)
	redisPatchScheduleGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule{}), generators)

	return redisPatchScheduleGenerator
}

// AddRelatedPropertyGeneratorsForRedisPatchSchedule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchSchedule(gens map[string]gopter.Gen) {
	gens["Spec"] = RedisPatchSchedules_SPECGenerator()
	gens["Status"] = RedisPatchSchedule_StatusGenerator()
}

func Test_RedisPatchSchedule_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisPatchSchedule_Status to RedisPatchSchedule_Status via AssignPropertiesToRedisPatchSchedule_Status & AssignPropertiesFromRedisPatchSchedule_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisPatchSchedule_Status, RedisPatchSchedule_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisPatchSchedule_Status tests if a specific instance of RedisPatchSchedule_Status can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForRedisPatchSchedule_Status(subject RedisPatchSchedule_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.RedisPatchSchedule_Status
	err := copied.AssignPropertiesToRedisPatchSchedule_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisPatchSchedule_Status
	err = actual.AssignPropertiesFromRedisPatchSchedule_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisPatchSchedule_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedule_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchSchedule_Status, RedisPatchSchedule_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchSchedule_Status runs a test to see if a specific instance of RedisPatchSchedule_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchSchedule_Status(subject RedisPatchSchedule_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedule_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedule_Status instances for property testing - lazily instantiated by
//RedisPatchSchedule_StatusGenerator()
var redisPatchSchedule_statusGenerator gopter.Gen

// RedisPatchSchedule_StatusGenerator returns a generator of RedisPatchSchedule_Status instances for property testing.
// We first initialize redisPatchSchedule_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisPatchSchedule_StatusGenerator() gopter.Gen {
	if redisPatchSchedule_statusGenerator != nil {
		return redisPatchSchedule_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedule_Status(generators)
	redisPatchSchedule_statusGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedule_Status(generators)
	AddRelatedPropertyGeneratorsForRedisPatchSchedule_Status(generators)
	redisPatchSchedule_statusGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule_Status{}), generators)

	return redisPatchSchedule_statusGenerator
}

// AddIndependentPropertyGeneratorsForRedisPatchSchedule_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisPatchSchedule_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisPatchSchedule_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchSchedule_Status(gens map[string]gopter.Gen) {
	gens["ScheduleEntries"] = gen.SliceOf(ScheduleEntry_StatusGenerator())
}

func Test_RedisPatchSchedules_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisPatchSchedules_SPEC to RedisPatchSchedules_SPEC via AssignPropertiesToRedisPatchSchedules_SPEC & AssignPropertiesFromRedisPatchSchedules_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisPatchSchedules_SPEC, RedisPatchSchedules_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisPatchSchedules_SPEC tests if a specific instance of RedisPatchSchedules_SPEC can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForRedisPatchSchedules_SPEC(subject RedisPatchSchedules_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.RedisPatchSchedules_SPEC
	err := copied.AssignPropertiesToRedisPatchSchedules_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisPatchSchedules_SPEC
	err = actual.AssignPropertiesFromRedisPatchSchedules_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisPatchSchedules_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedules_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchSchedules_SPEC, RedisPatchSchedules_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchSchedules_SPEC runs a test to see if a specific instance of RedisPatchSchedules_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchSchedules_SPEC(subject RedisPatchSchedules_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedules_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedules_SPEC instances for property testing - lazily instantiated by
//RedisPatchSchedules_SPECGenerator()
var redisPatchSchedules_specGenerator gopter.Gen

// RedisPatchSchedules_SPECGenerator returns a generator of RedisPatchSchedules_SPEC instances for property testing.
// We first initialize redisPatchSchedules_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisPatchSchedules_SPECGenerator() gopter.Gen {
	if redisPatchSchedules_specGenerator != nil {
		return redisPatchSchedules_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPEC(generators)
	redisPatchSchedules_specGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedules_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPEC(generators)
	AddRelatedPropertyGeneratorsForRedisPatchSchedules_SPEC(generators)
	redisPatchSchedules_specGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedules_SPEC{}), generators)

	return redisPatchSchedules_specGenerator
}

// AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisPatchSchedules_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchSchedules_SPEC(gens map[string]gopter.Gen) {
	gens["ScheduleEntries"] = gen.SliceOf(ScheduleEntry_SpecGenerator())
}

func Test_ScheduleEntry_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScheduleEntry_Spec to ScheduleEntry_Spec via AssignPropertiesToScheduleEntry_Spec & AssignPropertiesFromScheduleEntry_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForScheduleEntry_Spec, ScheduleEntry_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScheduleEntry_Spec tests if a specific instance of ScheduleEntry_Spec can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForScheduleEntry_Spec(subject ScheduleEntry_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.ScheduleEntry_Spec
	err := copied.AssignPropertiesToScheduleEntry_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScheduleEntry_Spec
	err = actual.AssignPropertiesFromScheduleEntry_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScheduleEntry_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntry_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntry_Spec, ScheduleEntry_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntry_Spec runs a test to see if a specific instance of ScheduleEntry_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntry_Spec(subject ScheduleEntry_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntry_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntry_Spec instances for property testing - lazily instantiated by ScheduleEntry_SpecGenerator()
var scheduleEntry_specGenerator gopter.Gen

// ScheduleEntry_SpecGenerator returns a generator of ScheduleEntry_Spec instances for property testing.
func ScheduleEntry_SpecGenerator() gopter.Gen {
	if scheduleEntry_specGenerator != nil {
		return scheduleEntry_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleEntry_Spec(generators)
	scheduleEntry_specGenerator = gen.Struct(reflect.TypeOf(ScheduleEntry_Spec{}), generators)

	return scheduleEntry_specGenerator
}

// AddIndependentPropertyGeneratorsForScheduleEntry_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleEntry_Spec(gens map[string]gopter.Gen) {
	gens["DayOfWeek"] = gen.OneConstOf(
		ScheduleEntry_DayOfWeek_SpecEveryday,
		ScheduleEntry_DayOfWeek_SpecFriday,
		ScheduleEntry_DayOfWeek_SpecMonday,
		ScheduleEntry_DayOfWeek_SpecSaturday,
		ScheduleEntry_DayOfWeek_SpecSunday,
		ScheduleEntry_DayOfWeek_SpecThursday,
		ScheduleEntry_DayOfWeek_SpecTuesday,
		ScheduleEntry_DayOfWeek_SpecWednesday,
		ScheduleEntry_DayOfWeek_SpecWeekend)
	gens["MaintenanceWindow"] = gen.PtrOf(gen.AlphaString())
	gens["StartHourUtc"] = gen.Int()
}

func Test_ScheduleEntry_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScheduleEntry_Status to ScheduleEntry_Status via AssignPropertiesToScheduleEntry_Status & AssignPropertiesFromScheduleEntry_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForScheduleEntry_Status, ScheduleEntry_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScheduleEntry_Status tests if a specific instance of ScheduleEntry_Status can be assigned to v1alpha1api20201201storage and back losslessly
func RunPropertyAssignmentTestForScheduleEntry_Status(subject ScheduleEntry_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20201201storage.ScheduleEntry_Status
	err := copied.AssignPropertiesToScheduleEntry_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScheduleEntry_Status
	err = actual.AssignPropertiesFromScheduleEntry_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScheduleEntry_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntry_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntry_Status, ScheduleEntry_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntry_Status runs a test to see if a specific instance of ScheduleEntry_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntry_Status(subject ScheduleEntry_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntry_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntry_Status instances for property testing - lazily instantiated by
//ScheduleEntry_StatusGenerator()
var scheduleEntry_statusGenerator gopter.Gen

// ScheduleEntry_StatusGenerator returns a generator of ScheduleEntry_Status instances for property testing.
func ScheduleEntry_StatusGenerator() gopter.Gen {
	if scheduleEntry_statusGenerator != nil {
		return scheduleEntry_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleEntry_Status(generators)
	scheduleEntry_statusGenerator = gen.Struct(reflect.TypeOf(ScheduleEntry_Status{}), generators)

	return scheduleEntry_statusGenerator
}

// AddIndependentPropertyGeneratorsForScheduleEntry_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleEntry_Status(gens map[string]gopter.Gen) {
	gens["DayOfWeek"] = gen.OneConstOf(
		ScheduleEntry_DayOfWeek_StatusEveryday,
		ScheduleEntry_DayOfWeek_StatusFriday,
		ScheduleEntry_DayOfWeek_StatusMonday,
		ScheduleEntry_DayOfWeek_StatusSaturday,
		ScheduleEntry_DayOfWeek_StatusSunday,
		ScheduleEntry_DayOfWeek_StatusThursday,
		ScheduleEntry_DayOfWeek_StatusTuesday,
		ScheduleEntry_DayOfWeek_StatusWednesday,
		ScheduleEntry_DayOfWeek_StatusWeekend)
	gens["MaintenanceWindow"] = gen.PtrOf(gen.AlphaString())
	gens["StartHourUtc"] = gen.Int()
}
