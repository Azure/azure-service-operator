// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisFirewallRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRuleSTATUSARM, RedisFirewallRuleSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRuleSTATUSARM runs a test to see if a specific instance of RedisFirewallRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRuleSTATUSARM(subject RedisFirewallRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRule_STATUSARM instances for property testing - lazily instantiated by
// RedisFirewallRuleSTATUSARMGenerator()
var redisFirewallRuleSTATUSARMGenerator gopter.Gen

// RedisFirewallRuleSTATUSARMGenerator returns a generator of RedisFirewallRule_STATUSARM instances for property testing.
// We first initialize redisFirewallRuleSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisFirewallRuleSTATUSARMGenerator() gopter.Gen {
	if redisFirewallRuleSTATUSARMGenerator != nil {
		return redisFirewallRuleSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRuleSTATUSARM(generators)
	redisFirewallRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRuleSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForRedisFirewallRuleSTATUSARM(generators)
	redisFirewallRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRule_STATUSARM{}), generators)

	return redisFirewallRuleSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRuleSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisFirewallRuleSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisFirewallRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisFirewallRulePropertiesSTATUSARMGenerator())
}

func Test_RedisFirewallRuleProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRuleProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRulePropertiesSTATUSARM, RedisFirewallRulePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRulePropertiesSTATUSARM runs a test to see if a specific instance of RedisFirewallRuleProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRulePropertiesSTATUSARM(subject RedisFirewallRuleProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRuleProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRuleProperties_STATUSARM instances for property testing - lazily instantiated by
// RedisFirewallRulePropertiesSTATUSARMGenerator()
var redisFirewallRulePropertiesSTATUSARMGenerator gopter.Gen

// RedisFirewallRulePropertiesSTATUSARMGenerator returns a generator of RedisFirewallRuleProperties_STATUSARM instances for property testing.
func RedisFirewallRulePropertiesSTATUSARMGenerator() gopter.Gen {
	if redisFirewallRulePropertiesSTATUSARMGenerator != nil {
		return redisFirewallRulePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesSTATUSARM(generators)
	redisFirewallRulePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRuleProperties_STATUSARM{}), generators)

	return redisFirewallRulePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["EndIP"] = gen.PtrOf(gen.AlphaString())
	gens["StartIP"] = gen.PtrOf(gen.AlphaString())
}
