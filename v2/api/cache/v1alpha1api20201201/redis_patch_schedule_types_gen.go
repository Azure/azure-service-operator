// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /redis/resource-manager/Microsoft.Cache/stable/2020-12-01/redis.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/patchSchedules/{default}
type RedisPatchSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisPatchSchedules_SPEC  `json:"spec,omitempty"`
	Status            RedisPatchSchedule_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RedisPatchSchedule{}

// GetConditions returns the conditions of the resource
func (schedule *RedisPatchSchedule) GetConditions() conditions.Conditions {
	return schedule.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (schedule *RedisPatchSchedule) SetConditions(conditions conditions.Conditions) {
	schedule.Status.Conditions = conditions
}

var _ conversion.Convertible = &RedisPatchSchedule{}

// ConvertFrom populates our RedisPatchSchedule from the provided hub RedisPatchSchedule
func (schedule *RedisPatchSchedule) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201201storage.RedisPatchSchedule)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/RedisPatchSchedule but received %T instead", hub)
	}

	return schedule.AssignPropertiesFromRedisPatchSchedule(source)
}

// ConvertTo populates the provided hub RedisPatchSchedule from our RedisPatchSchedule
func (schedule *RedisPatchSchedule) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201201storage.RedisPatchSchedule)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/RedisPatchSchedule but received %T instead", hub)
	}

	return schedule.AssignPropertiesToRedisPatchSchedule(destination)
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20201201-redispatchschedule,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redispatchschedules,verbs=create;update,versions=v1alpha1api20201201,name=default.v1alpha1api20201201.redispatchschedules.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &RedisPatchSchedule{}

// Default applies defaults to the RedisPatchSchedule resource
func (schedule *RedisPatchSchedule) Default() {
	schedule.defaultImpl()
	var temp interface{} = schedule
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (schedule *RedisPatchSchedule) defaultAzureName() {
	if schedule.Spec.AzureName == "" {
		schedule.Spec.AzureName = schedule.Name
	}
}

// defaultImpl applies the code generated defaults to the RedisPatchSchedule resource
func (schedule *RedisPatchSchedule) defaultImpl() { schedule.defaultAzureName() }

var _ genruntime.KubernetesResource = &RedisPatchSchedule{}

// AzureName returns the Azure name of the resource
func (schedule *RedisPatchSchedule) AzureName() string {
	return schedule.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (schedule RedisPatchSchedule) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (schedule *RedisPatchSchedule) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (schedule *RedisPatchSchedule) GetSpec() genruntime.ConvertibleSpec {
	return &schedule.Spec
}

// GetStatus returns the status of this resource
func (schedule *RedisPatchSchedule) GetStatus() genruntime.ConvertibleStatus {
	return &schedule.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (schedule *RedisPatchSchedule) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (schedule *RedisPatchSchedule) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RedisPatchSchedule_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (schedule *RedisPatchSchedule) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(schedule.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  schedule.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (schedule *RedisPatchSchedule) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RedisPatchSchedule_Status); ok {
		schedule.Status = *st
		return nil
	}

	// Convert status to required version
	var st RedisPatchSchedule_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	schedule.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20201201-redispatchschedule,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redispatchschedules,verbs=create;update,versions=v1alpha1api20201201,name=validate.v1alpha1api20201201.redispatchschedules.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &RedisPatchSchedule{}

// ValidateCreate validates the creation of the resource
func (schedule *RedisPatchSchedule) ValidateCreate() error {
	validations := schedule.createValidations()
	var temp interface{} = schedule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (schedule *RedisPatchSchedule) ValidateDelete() error {
	validations := schedule.deleteValidations()
	var temp interface{} = schedule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (schedule *RedisPatchSchedule) ValidateUpdate(old runtime.Object) error {
	validations := schedule.updateValidations()
	var temp interface{} = schedule
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (schedule *RedisPatchSchedule) createValidations() []func() error {
	return []func() error{schedule.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (schedule *RedisPatchSchedule) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (schedule *RedisPatchSchedule) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return schedule.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (schedule *RedisPatchSchedule) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&schedule.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRedisPatchSchedule populates our RedisPatchSchedule from the provided source RedisPatchSchedule
func (schedule *RedisPatchSchedule) AssignPropertiesFromRedisPatchSchedule(source *v1alpha1api20201201storage.RedisPatchSchedule) error {

	// ObjectMeta
	schedule.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec RedisPatchSchedules_SPEC
	err := spec.AssignPropertiesFromRedisPatchSchedules_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedisPatchSchedules_SPEC() to populate field Spec")
	}
	schedule.Spec = spec

	// Status
	var status RedisPatchSchedule_Status
	err = status.AssignPropertiesFromRedisPatchSchedule_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedisPatchSchedule_Status() to populate field Status")
	}
	schedule.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedisPatchSchedule populates the provided destination RedisPatchSchedule from our RedisPatchSchedule
func (schedule *RedisPatchSchedule) AssignPropertiesToRedisPatchSchedule(destination *v1alpha1api20201201storage.RedisPatchSchedule) error {

	// ObjectMeta
	destination.ObjectMeta = *schedule.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201201storage.RedisPatchSchedules_SPEC
	err := schedule.Spec.AssignPropertiesToRedisPatchSchedules_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedisPatchSchedules_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201201storage.RedisPatchSchedule_Status
	err = schedule.Status.AssignPropertiesToRedisPatchSchedule_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedisPatchSchedule_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (schedule *RedisPatchSchedule) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: schedule.Spec.OriginalVersion(),
		Kind:    "RedisPatchSchedule",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /redis/resource-manager/Microsoft.Cache/stable/2020-12-01/redis.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/patchSchedules/{default}
type RedisPatchScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisPatchSchedule `json:"items"`
}

type RedisPatchSchedule_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//ScheduleEntries: List of patch schedules for a Redis cache.
	ScheduleEntries []ScheduleEntry_Status `json:"scheduleEntries,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RedisPatchSchedule_Status{}

// ConvertStatusFrom populates our RedisPatchSchedule_Status from the provided source
func (schedule *RedisPatchSchedule_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201201storage.RedisPatchSchedule_Status)
	if ok {
		// Populate our instance from source
		return schedule.AssignPropertiesFromRedisPatchSchedule_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.RedisPatchSchedule_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = schedule.AssignPropertiesFromRedisPatchSchedule_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RedisPatchSchedule_Status
func (schedule *RedisPatchSchedule_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201201storage.RedisPatchSchedule_Status)
	if ok {
		// Populate destination from our instance
		return schedule.AssignPropertiesToRedisPatchSchedule_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.RedisPatchSchedule_Status{}
	err := schedule.AssignPropertiesToRedisPatchSchedule_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RedisPatchSchedule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schedule *RedisPatchSchedule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisPatchSchedule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schedule *RedisPatchSchedule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisPatchSchedule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisPatchSchedule_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		schedule.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		schedule.Name = &name
	}

	// Set property ‘ScheduleEntries’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ScheduleEntries {
			var item1 ScheduleEntry_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			schedule.ScheduleEntries = append(schedule.ScheduleEntries, item1)
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		schedule.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisPatchSchedule_Status populates our RedisPatchSchedule_Status from the provided source RedisPatchSchedule_Status
func (schedule *RedisPatchSchedule_Status) AssignPropertiesFromRedisPatchSchedule_Status(source *v1alpha1api20201201storage.RedisPatchSchedule_Status) error {

	// Conditions
	schedule.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	schedule.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	schedule.Name = genruntime.ClonePointerToString(source.Name)

	// ScheduleEntries
	if source.ScheduleEntries != nil {
		scheduleEntryList := make([]ScheduleEntry_Status, len(source.ScheduleEntries))
		for scheduleEntryIndex, scheduleEntryItem := range source.ScheduleEntries {
			// Shadow the loop variable to avoid aliasing
			scheduleEntryItem := scheduleEntryItem
			var scheduleEntry ScheduleEntry_Status
			err := scheduleEntry.AssignPropertiesFromScheduleEntry_Status(&scheduleEntryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromScheduleEntry_Status() to populate field ScheduleEntries")
			}
			scheduleEntryList[scheduleEntryIndex] = scheduleEntry
		}
		schedule.ScheduleEntries = scheduleEntryList
	} else {
		schedule.ScheduleEntries = nil
	}

	// Type
	schedule.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToRedisPatchSchedule_Status populates the provided destination RedisPatchSchedule_Status from our RedisPatchSchedule_Status
func (schedule *RedisPatchSchedule_Status) AssignPropertiesToRedisPatchSchedule_Status(destination *v1alpha1api20201201storage.RedisPatchSchedule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(schedule.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(schedule.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(schedule.Name)

	// ScheduleEntries
	if schedule.ScheduleEntries != nil {
		scheduleEntryList := make([]v1alpha1api20201201storage.ScheduleEntry_Status, len(schedule.ScheduleEntries))
		for scheduleEntryIndex, scheduleEntryItem := range schedule.ScheduleEntries {
			// Shadow the loop variable to avoid aliasing
			scheduleEntryItem := scheduleEntryItem
			var scheduleEntry v1alpha1api20201201storage.ScheduleEntry_Status
			err := scheduleEntryItem.AssignPropertiesToScheduleEntry_Status(&scheduleEntry)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToScheduleEntry_Status() to populate field ScheduleEntries")
			}
			scheduleEntryList[scheduleEntryIndex] = scheduleEntry
		}
		destination.ScheduleEntries = scheduleEntryList
	} else {
		destination.ScheduleEntries = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(schedule.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RedisPatchSchedules_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	//ScheduleEntries: List of patch schedules for a Redis cache.
	ScheduleEntries []ScheduleEntry_Spec `json:"scheduleEntries"`
}

var _ genruntime.ARMTransformer = &RedisPatchSchedules_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *RedisPatchSchedules_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result RedisPatchSchedules_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	for _, item := range spec.ScheduleEntries {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.ScheduleEntries = append(result.Properties.ScheduleEntries, itemARM.(ScheduleEntry_SpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *RedisPatchSchedules_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisPatchSchedules_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *RedisPatchSchedules_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisPatchSchedules_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisPatchSchedules_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ScheduleEntries’:
	// copying flattened property:
	for _, item := range typedInput.Properties.ScheduleEntries {
		var item1 ScheduleEntry_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.ScheduleEntries = append(spec.ScheduleEntries, item1)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RedisPatchSchedules_SPEC{}

// ConvertSpecFrom populates our RedisPatchSchedules_SPEC from the provided source
func (spec *RedisPatchSchedules_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201201storage.RedisPatchSchedules_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromRedisPatchSchedules_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.RedisPatchSchedules_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromRedisPatchSchedules_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RedisPatchSchedules_SPEC
func (spec *RedisPatchSchedules_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201201storage.RedisPatchSchedules_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToRedisPatchSchedules_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.RedisPatchSchedules_SPEC{}
	err := spec.AssignPropertiesToRedisPatchSchedules_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedisPatchSchedules_SPEC populates our RedisPatchSchedules_SPEC from the provided source RedisPatchSchedules_SPEC
func (spec *RedisPatchSchedules_SPEC) AssignPropertiesFromRedisPatchSchedules_SPEC(source *v1alpha1api20201201storage.RedisPatchSchedules_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// Owner
	spec.Owner = source.Owner.Copy()

	// ScheduleEntries
	if source.ScheduleEntries != nil {
		scheduleEntryList := make([]ScheduleEntry_Spec, len(source.ScheduleEntries))
		for scheduleEntryIndex, scheduleEntryItem := range source.ScheduleEntries {
			// Shadow the loop variable to avoid aliasing
			scheduleEntryItem := scheduleEntryItem
			var scheduleEntry ScheduleEntry_Spec
			err := scheduleEntry.AssignPropertiesFromScheduleEntry_Spec(&scheduleEntryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromScheduleEntry_Spec() to populate field ScheduleEntries")
			}
			scheduleEntryList[scheduleEntryIndex] = scheduleEntry
		}
		spec.ScheduleEntries = scheduleEntryList
	} else {
		spec.ScheduleEntries = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisPatchSchedules_SPEC populates the provided destination RedisPatchSchedules_SPEC from our RedisPatchSchedules_SPEC
func (spec *RedisPatchSchedules_SPEC) AssignPropertiesToRedisPatchSchedules_SPEC(destination *v1alpha1api20201201storage.RedisPatchSchedules_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// ScheduleEntries
	if spec.ScheduleEntries != nil {
		scheduleEntryList := make([]v1alpha1api20201201storage.ScheduleEntry_Spec, len(spec.ScheduleEntries))
		for scheduleEntryIndex, scheduleEntryItem := range spec.ScheduleEntries {
			// Shadow the loop variable to avoid aliasing
			scheduleEntryItem := scheduleEntryItem
			var scheduleEntry v1alpha1api20201201storage.ScheduleEntry_Spec
			err := scheduleEntryItem.AssignPropertiesToScheduleEntry_Spec(&scheduleEntry)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToScheduleEntry_Spec() to populate field ScheduleEntries")
			}
			scheduleEntryList[scheduleEntryIndex] = scheduleEntry
		}
		destination.ScheduleEntries = scheduleEntryList
	} else {
		destination.ScheduleEntries = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *RedisPatchSchedules_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *RedisPatchSchedules_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type ScheduleEntry_Spec struct {
	// +kubebuilder:validation:Required
	//DayOfWeek: Day of the week when a cache can be patched.
	DayOfWeek ScheduleEntry_DayOfWeek_Spec `json:"dayOfWeek"`

	//MaintenanceWindow: ISO8601 timespan specifying how much time cache patching can
	//take.
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty"`

	// +kubebuilder:validation:Required
	//StartHourUtc: Start hour after which cache patching can start.
	StartHourUtc int `json:"startHourUtc"`
}

var _ genruntime.ARMTransformer = &ScheduleEntry_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (entry *ScheduleEntry_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if entry == nil {
		return nil, nil
	}
	var result ScheduleEntry_SpecARM

	// Set property ‘DayOfWeek’:
	result.DayOfWeek = entry.DayOfWeek

	// Set property ‘MaintenanceWindow’:
	if entry.MaintenanceWindow != nil {
		maintenanceWindow := *entry.MaintenanceWindow
		result.MaintenanceWindow = &maintenanceWindow
	}

	// Set property ‘StartHourUtc’:
	result.StartHourUtc = entry.StartHourUtc
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (entry *ScheduleEntry_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ScheduleEntry_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (entry *ScheduleEntry_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ScheduleEntry_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ScheduleEntry_SpecARM, got %T", armInput)
	}

	// Set property ‘DayOfWeek’:
	entry.DayOfWeek = typedInput.DayOfWeek

	// Set property ‘MaintenanceWindow’:
	if typedInput.MaintenanceWindow != nil {
		maintenanceWindow := *typedInput.MaintenanceWindow
		entry.MaintenanceWindow = &maintenanceWindow
	}

	// Set property ‘StartHourUtc’:
	entry.StartHourUtc = typedInput.StartHourUtc

	// No error
	return nil
}

// AssignPropertiesFromScheduleEntry_Spec populates our ScheduleEntry_Spec from the provided source ScheduleEntry_Spec
func (entry *ScheduleEntry_Spec) AssignPropertiesFromScheduleEntry_Spec(source *v1alpha1api20201201storage.ScheduleEntry_Spec) error {

	// DayOfWeek
	if source.DayOfWeek != nil {
		entry.DayOfWeek = ScheduleEntry_DayOfWeek_Spec(*source.DayOfWeek)
	} else {
		entry.DayOfWeek = ""
	}

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		maintenanceWindow := *source.MaintenanceWindow
		entry.MaintenanceWindow = &maintenanceWindow
	} else {
		entry.MaintenanceWindow = nil
	}

	// StartHourUtc
	entry.StartHourUtc = genruntime.GetOptionalIntValue(source.StartHourUtc)

	// No error
	return nil
}

// AssignPropertiesToScheduleEntry_Spec populates the provided destination ScheduleEntry_Spec from our ScheduleEntry_Spec
func (entry *ScheduleEntry_Spec) AssignPropertiesToScheduleEntry_Spec(destination *v1alpha1api20201201storage.ScheduleEntry_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DayOfWeek
	dayOfWeek := string(entry.DayOfWeek)
	destination.DayOfWeek = &dayOfWeek

	// MaintenanceWindow
	if entry.MaintenanceWindow != nil {
		maintenanceWindow := *entry.MaintenanceWindow
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// StartHourUtc
	startHourUtc := entry.StartHourUtc
	destination.StartHourUtc = &startHourUtc

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ScheduleEntry_Status struct {
	// +kubebuilder:validation:Required
	//DayOfWeek: Day of the week when a cache can be patched.
	DayOfWeek ScheduleEntry_DayOfWeek_Status `json:"dayOfWeek"`

	//MaintenanceWindow: ISO8601 timespan specifying how much time cache patching can
	//take.
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty"`

	// +kubebuilder:validation:Required
	//StartHourUtc: Start hour after which cache patching can start.
	StartHourUtc int `json:"startHourUtc"`
}

var _ genruntime.FromARMConverter = &ScheduleEntry_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (entry *ScheduleEntry_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ScheduleEntry_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (entry *ScheduleEntry_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ScheduleEntry_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ScheduleEntry_StatusARM, got %T", armInput)
	}

	// Set property ‘DayOfWeek’:
	entry.DayOfWeek = typedInput.DayOfWeek

	// Set property ‘MaintenanceWindow’:
	if typedInput.MaintenanceWindow != nil {
		maintenanceWindow := *typedInput.MaintenanceWindow
		entry.MaintenanceWindow = &maintenanceWindow
	}

	// Set property ‘StartHourUtc’:
	entry.StartHourUtc = typedInput.StartHourUtc

	// No error
	return nil
}

// AssignPropertiesFromScheduleEntry_Status populates our ScheduleEntry_Status from the provided source ScheduleEntry_Status
func (entry *ScheduleEntry_Status) AssignPropertiesFromScheduleEntry_Status(source *v1alpha1api20201201storage.ScheduleEntry_Status) error {

	// DayOfWeek
	if source.DayOfWeek != nil {
		entry.DayOfWeek = ScheduleEntry_DayOfWeek_Status(*source.DayOfWeek)
	} else {
		entry.DayOfWeek = ""
	}

	// MaintenanceWindow
	entry.MaintenanceWindow = genruntime.ClonePointerToString(source.MaintenanceWindow)

	// StartHourUtc
	entry.StartHourUtc = genruntime.GetOptionalIntValue(source.StartHourUtc)

	// No error
	return nil
}

// AssignPropertiesToScheduleEntry_Status populates the provided destination ScheduleEntry_Status from our ScheduleEntry_Status
func (entry *ScheduleEntry_Status) AssignPropertiesToScheduleEntry_Status(destination *v1alpha1api20201201storage.ScheduleEntry_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DayOfWeek
	dayOfWeek := string(entry.DayOfWeek)
	destination.DayOfWeek = &dayOfWeek

	// MaintenanceWindow
	destination.MaintenanceWindow = genruntime.ClonePointerToString(entry.MaintenanceWindow)

	// StartHourUtc
	startHourUtc := entry.StartHourUtc
	destination.StartHourUtc = &startHourUtc

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Everyday","Friday","Monday","Saturday","Sunday","Thursday","Tuesday","Wednesday","Weekend"}
type ScheduleEntry_DayOfWeek_Spec string

const (
	ScheduleEntry_DayOfWeek_SpecEveryday  = ScheduleEntry_DayOfWeek_Spec("Everyday")
	ScheduleEntry_DayOfWeek_SpecFriday    = ScheduleEntry_DayOfWeek_Spec("Friday")
	ScheduleEntry_DayOfWeek_SpecMonday    = ScheduleEntry_DayOfWeek_Spec("Monday")
	ScheduleEntry_DayOfWeek_SpecSaturday  = ScheduleEntry_DayOfWeek_Spec("Saturday")
	ScheduleEntry_DayOfWeek_SpecSunday    = ScheduleEntry_DayOfWeek_Spec("Sunday")
	ScheduleEntry_DayOfWeek_SpecThursday  = ScheduleEntry_DayOfWeek_Spec("Thursday")
	ScheduleEntry_DayOfWeek_SpecTuesday   = ScheduleEntry_DayOfWeek_Spec("Tuesday")
	ScheduleEntry_DayOfWeek_SpecWednesday = ScheduleEntry_DayOfWeek_Spec("Wednesday")
	ScheduleEntry_DayOfWeek_SpecWeekend   = ScheduleEntry_DayOfWeek_Spec("Weekend")
)

type ScheduleEntry_DayOfWeek_Status string

const (
	ScheduleEntry_DayOfWeek_StatusEveryday  = ScheduleEntry_DayOfWeek_Status("Everyday")
	ScheduleEntry_DayOfWeek_StatusFriday    = ScheduleEntry_DayOfWeek_Status("Friday")
	ScheduleEntry_DayOfWeek_StatusMonday    = ScheduleEntry_DayOfWeek_Status("Monday")
	ScheduleEntry_DayOfWeek_StatusSaturday  = ScheduleEntry_DayOfWeek_Status("Saturday")
	ScheduleEntry_DayOfWeek_StatusSunday    = ScheduleEntry_DayOfWeek_Status("Sunday")
	ScheduleEntry_DayOfWeek_StatusThursday  = ScheduleEntry_DayOfWeek_Status("Thursday")
	ScheduleEntry_DayOfWeek_StatusTuesday   = ScheduleEntry_DayOfWeek_Status("Tuesday")
	ScheduleEntry_DayOfWeek_StatusWednesday = ScheduleEntry_DayOfWeek_Status("Wednesday")
	ScheduleEntry_DayOfWeek_StatusWeekend   = ScheduleEntry_DayOfWeek_Status("Weekend")
)

func init() {
	SchemeBuilder.Register(&RedisPatchSchedule{}, &RedisPatchScheduleList{})
}
