// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Cache.json#/resourceDefinitions/redis_linkedServers
type RedisLinkedServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisLinkedServers_Spec                `json:"spec,omitempty"`
	Status            RedisLinkedServerWithProperties_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RedisLinkedServer{}

// GetConditions returns the conditions of the resource
func (redisLinkedServer *RedisLinkedServer) GetConditions() conditions.Conditions {
	return redisLinkedServer.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redisLinkedServer *RedisLinkedServer) SetConditions(conditions conditions.Conditions) {
	redisLinkedServer.Status.Conditions = conditions
}

var _ conversion.Convertible = &RedisLinkedServer{}

// ConvertFrom populates our RedisLinkedServer from the provided hub RedisLinkedServer
func (redisLinkedServer *RedisLinkedServer) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201201storage.RedisLinkedServer)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/RedisLinkedServer but received %T instead", hub)
	}

	return redisLinkedServer.AssignPropertiesFromRedisLinkedServer(source)
}

// ConvertTo populates the provided hub RedisLinkedServer from our RedisLinkedServer
func (redisLinkedServer *RedisLinkedServer) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201201storage.RedisLinkedServer)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/RedisLinkedServer but received %T instead", hub)
	}

	return redisLinkedServer.AssignPropertiesToRedisLinkedServer(destination)
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20201201-redislinkedserver,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redislinkedservers,verbs=create;update,versions=v1alpha1api20201201,name=default.v1alpha1api20201201.redislinkedservers.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &RedisLinkedServer{}

// Default applies defaults to the RedisLinkedServer resource
func (redisLinkedServer *RedisLinkedServer) Default() {
	redisLinkedServer.defaultImpl()
	var temp interface{} = redisLinkedServer
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (redisLinkedServer *RedisLinkedServer) defaultAzureName() {
	if redisLinkedServer.Spec.AzureName == "" {
		redisLinkedServer.Spec.AzureName = redisLinkedServer.Name
	}
}

// defaultImpl applies the code generated defaults to the RedisLinkedServer resource
func (redisLinkedServer *RedisLinkedServer) defaultImpl() { redisLinkedServer.defaultAzureName() }

var _ genruntime.KubernetesResource = &RedisLinkedServer{}

// AzureName returns the Azure name of the resource
func (redisLinkedServer *RedisLinkedServer) AzureName() string {
	return redisLinkedServer.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (redisLinkedServer RedisLinkedServer) GetAPIVersion() string {
	return "2020-12-01"
}

// GetResourceKind returns the kind of the resource
func (redisLinkedServer *RedisLinkedServer) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (redisLinkedServer *RedisLinkedServer) GetSpec() genruntime.ConvertibleSpec {
	return &redisLinkedServer.Spec
}

// GetStatus returns the status of this resource
func (redisLinkedServer *RedisLinkedServer) GetStatus() genruntime.ConvertibleStatus {
	return &redisLinkedServer.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redis/linkedServers"
func (redisLinkedServer *RedisLinkedServer) GetType() string {
	return "Microsoft.Cache/redis/linkedServers"
}

// NewEmptyStatus returns a new empty (blank) status
func (redisLinkedServer *RedisLinkedServer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RedisLinkedServerWithProperties_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (redisLinkedServer *RedisLinkedServer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redisLinkedServer.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redisLinkedServer.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redisLinkedServer *RedisLinkedServer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RedisLinkedServerWithProperties_Status); ok {
		redisLinkedServer.Status = *st
		return nil
	}

	// Convert status to required version
	var st RedisLinkedServerWithProperties_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redisLinkedServer.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20201201-redislinkedserver,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redislinkedservers,verbs=create;update,versions=v1alpha1api20201201,name=validate.v1alpha1api20201201.redislinkedservers.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &RedisLinkedServer{}

// ValidateCreate validates the creation of the resource
func (redisLinkedServer *RedisLinkedServer) ValidateCreate() error {
	validations := redisLinkedServer.createValidations()
	var temp interface{} = redisLinkedServer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (redisLinkedServer *RedisLinkedServer) ValidateDelete() error {
	validations := redisLinkedServer.deleteValidations()
	var temp interface{} = redisLinkedServer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (redisLinkedServer *RedisLinkedServer) ValidateUpdate(old runtime.Object) error {
	validations := redisLinkedServer.updateValidations()
	var temp interface{} = redisLinkedServer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (redisLinkedServer *RedisLinkedServer) createValidations() []func() error {
	return []func() error{redisLinkedServer.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (redisLinkedServer *RedisLinkedServer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (redisLinkedServer *RedisLinkedServer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return redisLinkedServer.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (redisLinkedServer *RedisLinkedServer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&redisLinkedServer.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRedisLinkedServer populates our RedisLinkedServer from the provided source RedisLinkedServer
func (redisLinkedServer *RedisLinkedServer) AssignPropertiesFromRedisLinkedServer(source *v1alpha1api20201201storage.RedisLinkedServer) error {

	// ObjectMeta
	redisLinkedServer.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec RedisLinkedServers_Spec
	err := spec.AssignPropertiesFromRedisLinkedServersSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromRedisLinkedServersSpec()")
	}
	redisLinkedServer.Spec = spec

	// Status
	var status RedisLinkedServerWithProperties_Status
	err = status.AssignPropertiesFromRedisLinkedServerWithPropertiesStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromRedisLinkedServerWithPropertiesStatus()")
	}
	redisLinkedServer.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedisLinkedServer populates the provided destination RedisLinkedServer from our RedisLinkedServer
func (redisLinkedServer *RedisLinkedServer) AssignPropertiesToRedisLinkedServer(destination *v1alpha1api20201201storage.RedisLinkedServer) error {

	// ObjectMeta
	destination.ObjectMeta = *redisLinkedServer.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201201storage.RedisLinkedServers_Spec
	err := redisLinkedServer.Spec.AssignPropertiesToRedisLinkedServersSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToRedisLinkedServersSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status
	err = redisLinkedServer.Status.AssignPropertiesToRedisLinkedServerWithPropertiesStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToRedisLinkedServerWithPropertiesStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redisLinkedServer *RedisLinkedServer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redisLinkedServer.Spec.OriginalVersion(),
		Kind:    "RedisLinkedServer",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Cache.json#/resourceDefinitions/redis_linkedServers
type RedisLinkedServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisLinkedServer `json:"items"`
}

type RedisLinkedServerWithProperties_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//LinkedRedisCacheId: Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId *string `json:"linkedRedisCacheId,omitempty"`

	//LinkedRedisCacheLocation: Location of the linked redis cache.
	LinkedRedisCacheLocation *string `json:"linkedRedisCacheLocation,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//ProvisioningState: Terminal state of the link between primary and secondary
	//redis cache.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ServerRole: Role of the linked server.
	ServerRole *RedisLinkedServerPropertiesStatusServerRole `json:"serverRole,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RedisLinkedServerWithProperties_Status{}

// ConvertStatusFrom populates our RedisLinkedServerWithProperties_Status from the provided source
func (redisLinkedServerWithPropertiesStatus *RedisLinkedServerWithProperties_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status)
	if ok {
		// Populate our instance from source
		return redisLinkedServerWithPropertiesStatus.AssignPropertiesFromRedisLinkedServerWithPropertiesStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = redisLinkedServerWithPropertiesStatus.AssignPropertiesFromRedisLinkedServerWithPropertiesStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RedisLinkedServerWithProperties_Status
func (redisLinkedServerWithPropertiesStatus *RedisLinkedServerWithProperties_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status)
	if ok {
		// Populate destination from our instance
		return redisLinkedServerWithPropertiesStatus.AssignPropertiesToRedisLinkedServerWithPropertiesStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status{}
	err := redisLinkedServerWithPropertiesStatus.AssignPropertiesToRedisLinkedServerWithPropertiesStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RedisLinkedServerWithProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisLinkedServerWithPropertiesStatus *RedisLinkedServerWithProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisLinkedServerWithProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisLinkedServerWithPropertiesStatus *RedisLinkedServerWithProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisLinkedServerWithProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisLinkedServerWithProperties_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		redisLinkedServerWithPropertiesStatus.Id = &id
	}

	// Set property ‘LinkedRedisCacheId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		redisLinkedServerWithPropertiesStatus.LinkedRedisCacheId = &typedInput.Properties.LinkedRedisCacheId
	}

	// Set property ‘LinkedRedisCacheLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		redisLinkedServerWithPropertiesStatus.LinkedRedisCacheLocation = &typedInput.Properties.LinkedRedisCacheLocation
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		redisLinkedServerWithPropertiesStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			redisLinkedServerWithPropertiesStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ServerRole’:
	// copying flattened property:
	if typedInput.Properties != nil {
		redisLinkedServerWithPropertiesStatus.ServerRole = &typedInput.Properties.ServerRole
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		redisLinkedServerWithPropertiesStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisLinkedServerWithPropertiesStatus populates our RedisLinkedServerWithProperties_Status from the provided source RedisLinkedServerWithProperties_Status
func (redisLinkedServerWithPropertiesStatus *RedisLinkedServerWithProperties_Status) AssignPropertiesFromRedisLinkedServerWithPropertiesStatus(source *v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status) error {

	// Conditions
	redisLinkedServerWithPropertiesStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	redisLinkedServerWithPropertiesStatus.Id = genruntime.ClonePointerToString(source.Id)

	// LinkedRedisCacheId
	redisLinkedServerWithPropertiesStatus.LinkedRedisCacheId = genruntime.ClonePointerToString(source.LinkedRedisCacheId)

	// LinkedRedisCacheLocation
	redisLinkedServerWithPropertiesStatus.LinkedRedisCacheLocation = genruntime.ClonePointerToString(source.LinkedRedisCacheLocation)

	// Name
	redisLinkedServerWithPropertiesStatus.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	redisLinkedServerWithPropertiesStatus.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ServerRole
	if source.ServerRole != nil {
		serverRole := RedisLinkedServerPropertiesStatusServerRole(*source.ServerRole)
		redisLinkedServerWithPropertiesStatus.ServerRole = &serverRole
	} else {
		redisLinkedServerWithPropertiesStatus.ServerRole = nil
	}

	// Type
	redisLinkedServerWithPropertiesStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToRedisLinkedServerWithPropertiesStatus populates the provided destination RedisLinkedServerWithProperties_Status from our RedisLinkedServerWithProperties_Status
func (redisLinkedServerWithPropertiesStatus *RedisLinkedServerWithProperties_Status) AssignPropertiesToRedisLinkedServerWithPropertiesStatus(destination *v1alpha1api20201201storage.RedisLinkedServerWithProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(redisLinkedServerWithPropertiesStatus.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(redisLinkedServerWithPropertiesStatus.Id)

	// LinkedRedisCacheId
	destination.LinkedRedisCacheId = genruntime.ClonePointerToString(redisLinkedServerWithPropertiesStatus.LinkedRedisCacheId)

	// LinkedRedisCacheLocation
	destination.LinkedRedisCacheLocation = genruntime.ClonePointerToString(redisLinkedServerWithPropertiesStatus.LinkedRedisCacheLocation)

	// Name
	destination.Name = genruntime.ClonePointerToString(redisLinkedServerWithPropertiesStatus.Name)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(redisLinkedServerWithPropertiesStatus.ProvisioningState)

	// ServerRole
	if redisLinkedServerWithPropertiesStatus.ServerRole != nil {
		serverRole := string(*redisLinkedServerWithPropertiesStatus.ServerRole)
		destination.ServerRole = &serverRole
	} else {
		destination.ServerRole = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(redisLinkedServerWithPropertiesStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-12-01"}
type RedisLinkedServersSpecAPIVersion string

const RedisLinkedServersSpecAPIVersion20201201 = RedisLinkedServersSpecAPIVersion("2020-12-01")

type RedisLinkedServers_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	// +kubebuilder:validation:Required
	//LinkedRedisCacheLocation: Location of the linked redis cache.
	LinkedRedisCacheLocation string `json:"linkedRedisCacheLocation"`

	// +kubebuilder:validation:Required
	//LinkedRedisCacheReference: Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheReference genruntime.ResourceReference `armReference:"LinkedRedisCacheId" json:"linkedRedisCacheReference"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"cache.azure.com" json:"owner" kind:"Redis"`

	// +kubebuilder:validation:Required
	//ServerRole: Role of the linked server.
	ServerRole RedisLinkedServerCreatePropertiesServerRole `json:"serverRole"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &RedisLinkedServers_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (redisLinkedServersSpec *RedisLinkedServers_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if redisLinkedServersSpec == nil {
		return nil, nil
	}
	var result RedisLinkedServers_SpecARM

	// Set property ‘Location’:
	if redisLinkedServersSpec.Location != nil {
		location := *redisLinkedServersSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	result.Properties.LinkedRedisCacheLocation = redisLinkedServersSpec.LinkedRedisCacheLocation
	linkedRedisCacheIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(redisLinkedServersSpec.LinkedRedisCacheReference)
	if err != nil {
		return nil, err
	}
	result.Properties.LinkedRedisCacheId = linkedRedisCacheIdARMID
	result.Properties.ServerRole = redisLinkedServersSpec.ServerRole

	// Set property ‘Tags’:
	if redisLinkedServersSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range redisLinkedServersSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisLinkedServersSpec *RedisLinkedServers_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisLinkedServers_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisLinkedServersSpec *RedisLinkedServers_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisLinkedServers_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisLinkedServers_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	redisLinkedServersSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘LinkedRedisCacheLocation’:
	// copying flattened property:
	redisLinkedServersSpec.LinkedRedisCacheLocation = typedInput.Properties.LinkedRedisCacheLocation

	// no assignment for property ‘LinkedRedisCacheReference’

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		redisLinkedServersSpec.Location = &location
	}

	// Set property ‘Owner’:
	redisLinkedServersSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ServerRole’:
	// copying flattened property:
	redisLinkedServersSpec.ServerRole = typedInput.Properties.ServerRole

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redisLinkedServersSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			redisLinkedServersSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RedisLinkedServers_Spec{}

// ConvertSpecFrom populates our RedisLinkedServers_Spec from the provided source
func (redisLinkedServersSpec *RedisLinkedServers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201201storage.RedisLinkedServers_Spec)
	if ok {
		// Populate our instance from source
		return redisLinkedServersSpec.AssignPropertiesFromRedisLinkedServersSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.RedisLinkedServers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redisLinkedServersSpec.AssignPropertiesFromRedisLinkedServersSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RedisLinkedServers_Spec
func (redisLinkedServersSpec *RedisLinkedServers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201201storage.RedisLinkedServers_Spec)
	if ok {
		// Populate destination from our instance
		return redisLinkedServersSpec.AssignPropertiesToRedisLinkedServersSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.RedisLinkedServers_Spec{}
	err := redisLinkedServersSpec.AssignPropertiesToRedisLinkedServersSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedisLinkedServersSpec populates our RedisLinkedServers_Spec from the provided source RedisLinkedServers_Spec
func (redisLinkedServersSpec *RedisLinkedServers_Spec) AssignPropertiesFromRedisLinkedServersSpec(source *v1alpha1api20201201storage.RedisLinkedServers_Spec) error {

	// AzureName
	redisLinkedServersSpec.AzureName = source.AzureName

	// LinkedRedisCacheLocation
	redisLinkedServersSpec.LinkedRedisCacheLocation = genruntime.GetOptionalStringValue(source.LinkedRedisCacheLocation)

	// LinkedRedisCacheReference
	redisLinkedServersSpec.LinkedRedisCacheReference = source.LinkedRedisCacheReference.Copy()

	// Location
	redisLinkedServersSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	redisLinkedServersSpec.Owner = source.Owner.Copy()

	// ServerRole
	if source.ServerRole != nil {
		redisLinkedServersSpec.ServerRole = RedisLinkedServerCreatePropertiesServerRole(*source.ServerRole)
	} else {
		redisLinkedServersSpec.ServerRole = ""
	}

	// Tags
	redisLinkedServersSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToRedisLinkedServersSpec populates the provided destination RedisLinkedServers_Spec from our RedisLinkedServers_Spec
func (redisLinkedServersSpec *RedisLinkedServers_Spec) AssignPropertiesToRedisLinkedServersSpec(destination *v1alpha1api20201201storage.RedisLinkedServers_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = redisLinkedServersSpec.AzureName

	// LinkedRedisCacheLocation
	linkedRedisCacheLocation := redisLinkedServersSpec.LinkedRedisCacheLocation
	destination.LinkedRedisCacheLocation = &linkedRedisCacheLocation

	// LinkedRedisCacheReference
	destination.LinkedRedisCacheReference = redisLinkedServersSpec.LinkedRedisCacheReference.Copy()

	// Location
	destination.Location = genruntime.ClonePointerToString(redisLinkedServersSpec.Location)

	// OriginalVersion
	destination.OriginalVersion = redisLinkedServersSpec.OriginalVersion()

	// Owner
	destination.Owner = redisLinkedServersSpec.Owner.Copy()

	// ServerRole
	serverRole := string(redisLinkedServersSpec.ServerRole)
	destination.ServerRole = &serverRole

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redisLinkedServersSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (redisLinkedServersSpec *RedisLinkedServers_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (redisLinkedServersSpec *RedisLinkedServers_Spec) SetAzureName(azureName string) {
	redisLinkedServersSpec.AzureName = azureName
}

// +kubebuilder:validation:Enum={"Primary","Secondary"}
type RedisLinkedServerCreatePropertiesServerRole string

const (
	RedisLinkedServerCreatePropertiesServerRolePrimary   = RedisLinkedServerCreatePropertiesServerRole("Primary")
	RedisLinkedServerCreatePropertiesServerRoleSecondary = RedisLinkedServerCreatePropertiesServerRole("Secondary")
)

type RedisLinkedServerPropertiesStatusServerRole string

const (
	RedisLinkedServerPropertiesStatusServerRolePrimary   = RedisLinkedServerPropertiesStatusServerRole("Primary")
	RedisLinkedServerPropertiesStatusServerRoleSecondary = RedisLinkedServerPropertiesStatusServerRole("Secondary")
)

func init() {
	SchemeBuilder.Register(&RedisLinkedServer{}, &RedisLinkedServerList{})
}
