// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisPatchSchedules_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedules_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchSchedulesSPECARM, RedisPatchSchedulesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchSchedulesSPECARM runs a test to see if a specific instance of RedisPatchSchedules_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchSchedulesSPECARM(subject RedisPatchSchedules_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedules_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedules_SPECARM instances for property testing - lazily instantiated by
//RedisPatchSchedulesSPECARMGenerator()
var redisPatchSchedulesSPECARMGenerator gopter.Gen

// RedisPatchSchedulesSPECARMGenerator returns a generator of RedisPatchSchedules_SPECARM instances for property testing.
// We first initialize redisPatchSchedulesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisPatchSchedulesSPECARMGenerator() gopter.Gen {
	if redisPatchSchedulesSPECARMGenerator != nil {
		return redisPatchSchedulesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedulesSPECARM(generators)
	redisPatchSchedulesSPECARMGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedules_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedulesSPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisPatchSchedulesSPECARM(generators)
	redisPatchSchedulesSPECARMGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedules_SPECARM{}), generators)

	return redisPatchSchedulesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisPatchSchedulesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisPatchSchedulesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisPatchSchedulesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchSchedulesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = ScheduleEntriesSpecARMGenerator()
}

func Test_ScheduleEntries_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntries_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntriesSpecARM, ScheduleEntriesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntriesSpecARM runs a test to see if a specific instance of ScheduleEntries_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntriesSpecARM(subject ScheduleEntries_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntries_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntries_SpecARM instances for property testing - lazily instantiated by
//ScheduleEntriesSpecARMGenerator()
var scheduleEntriesSpecARMGenerator gopter.Gen

// ScheduleEntriesSpecARMGenerator returns a generator of ScheduleEntries_SpecARM instances for property testing.
func ScheduleEntriesSpecARMGenerator() gopter.Gen {
	if scheduleEntriesSpecARMGenerator != nil {
		return scheduleEntriesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduleEntriesSpecARM(generators)
	scheduleEntriesSpecARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntries_SpecARM{}), generators)

	return scheduleEntriesSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduleEntriesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduleEntriesSpecARM(gens map[string]gopter.Gen) {
	gens["ScheduleEntries"] = gen.SliceOf(ScheduleEntrySpecARMGenerator())
}

func Test_ScheduleEntry_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntry_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntrySpecARM, ScheduleEntrySpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntrySpecARM runs a test to see if a specific instance of ScheduleEntry_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntrySpecARM(subject ScheduleEntry_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntry_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntry_SpecARM instances for property testing - lazily instantiated by
//ScheduleEntrySpecARMGenerator()
var scheduleEntrySpecARMGenerator gopter.Gen

// ScheduleEntrySpecARMGenerator returns a generator of ScheduleEntry_SpecARM instances for property testing.
func ScheduleEntrySpecARMGenerator() gopter.Gen {
	if scheduleEntrySpecARMGenerator != nil {
		return scheduleEntrySpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleEntrySpecARM(generators)
	scheduleEntrySpecARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntry_SpecARM{}), generators)

	return scheduleEntrySpecARMGenerator
}

// AddIndependentPropertyGeneratorsForScheduleEntrySpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleEntrySpecARM(gens map[string]gopter.Gen) {
	gens["DayOfWeek"] = gen.OneConstOf(
		ScheduleEntrySpecDayOfWeekEveryday,
		ScheduleEntrySpecDayOfWeekFriday,
		ScheduleEntrySpecDayOfWeekMonday,
		ScheduleEntrySpecDayOfWeekSaturday,
		ScheduleEntrySpecDayOfWeekSunday,
		ScheduleEntrySpecDayOfWeekThursday,
		ScheduleEntrySpecDayOfWeekTuesday,
		ScheduleEntrySpecDayOfWeekWednesday,
		ScheduleEntrySpecDayOfWeekWeekend)
	gens["MaintenanceWindow"] = gen.PtrOf(gen.AlphaString())
	gens["StartHourUtc"] = gen.Int()
}
