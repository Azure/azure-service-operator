// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisPatchSchedules_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedules_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchSchedules_SPECARM, RedisPatchSchedules_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchSchedules_SPECARM runs a test to see if a specific instance of RedisPatchSchedules_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchSchedules_SPECARM(subject RedisPatchSchedules_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedules_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedules_SPECARM instances for property testing - lazily instantiated by
//RedisPatchSchedules_SPECARMGenerator()
var redisPatchSchedules_specarmGenerator gopter.Gen

// RedisPatchSchedules_SPECARMGenerator returns a generator of RedisPatchSchedules_SPECARM instances for property testing.
// We first initialize redisPatchSchedules_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisPatchSchedules_SPECARMGenerator() gopter.Gen {
	if redisPatchSchedules_specarmGenerator != nil {
		return redisPatchSchedules_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPECARM(generators)
	redisPatchSchedules_specarmGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedules_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisPatchSchedules_SPECARM(generators)
	redisPatchSchedules_specarmGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedules_SPECARM{}), generators)

	return redisPatchSchedules_specarmGenerator
}

// AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisPatchSchedules_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisPatchSchedules_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchSchedules_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = ScheduleEntries_SpecARMGenerator()
}

func Test_ScheduleEntries_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntries_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntries_SpecARM, ScheduleEntries_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntries_SpecARM runs a test to see if a specific instance of ScheduleEntries_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntries_SpecARM(subject ScheduleEntries_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntries_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntries_SpecARM instances for property testing - lazily instantiated by
//ScheduleEntries_SpecARMGenerator()
var scheduleEntries_specARMGenerator gopter.Gen

// ScheduleEntries_SpecARMGenerator returns a generator of ScheduleEntries_SpecARM instances for property testing.
func ScheduleEntries_SpecARMGenerator() gopter.Gen {
	if scheduleEntries_specARMGenerator != nil {
		return scheduleEntries_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduleEntries_SpecARM(generators)
	scheduleEntries_specARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntries_SpecARM{}), generators)

	return scheduleEntries_specARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduleEntries_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduleEntries_SpecARM(gens map[string]gopter.Gen) {
	gens["ScheduleEntries"] = gen.SliceOf(ScheduleEntry_SpecARMGenerator())
}

func Test_ScheduleEntry_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntry_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntry_SpecARM, ScheduleEntry_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntry_SpecARM runs a test to see if a specific instance of ScheduleEntry_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntry_SpecARM(subject ScheduleEntry_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntry_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntry_SpecARM instances for property testing - lazily instantiated by
//ScheduleEntry_SpecARMGenerator()
var scheduleEntry_specARMGenerator gopter.Gen

// ScheduleEntry_SpecARMGenerator returns a generator of ScheduleEntry_SpecARM instances for property testing.
func ScheduleEntry_SpecARMGenerator() gopter.Gen {
	if scheduleEntry_specARMGenerator != nil {
		return scheduleEntry_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleEntry_SpecARM(generators)
	scheduleEntry_specARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntry_SpecARM{}), generators)

	return scheduleEntry_specARMGenerator
}

// AddIndependentPropertyGeneratorsForScheduleEntry_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleEntry_SpecARM(gens map[string]gopter.Gen) {
	gens["DayOfWeek"] = gen.OneConstOf(
		ScheduleEntry_DayOfWeek_SpecEveryday,
		ScheduleEntry_DayOfWeek_SpecFriday,
		ScheduleEntry_DayOfWeek_SpecMonday,
		ScheduleEntry_DayOfWeek_SpecSaturday,
		ScheduleEntry_DayOfWeek_SpecSunday,
		ScheduleEntry_DayOfWeek_SpecThursday,
		ScheduleEntry_DayOfWeek_SpecTuesday,
		ScheduleEntry_DayOfWeek_SpecWednesday,
		ScheduleEntry_DayOfWeek_SpecWeekend)
	gens["MaintenanceWindow"] = gen.PtrOf(gen.AlphaString())
	gens["StartHourUtc"] = gen.Int()
}
