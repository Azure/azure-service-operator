// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /redis/resource-manager/Microsoft.Cache/stable/2020-12-01/redis.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Redis_Spec   `json:"spec,omitempty"`
	Status            Redis_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Redis{}

// GetConditions returns the conditions of the resource
func (redis *Redis) GetConditions() conditions.Conditions {
	return redis.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redis *Redis) SetConditions(conditions conditions.Conditions) {
	redis.Status.Conditions = conditions
}

var _ conversion.Convertible = &Redis{}

// ConvertFrom populates our Redis from the provided hub Redis
func (redis *Redis) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201201storage.Redis)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesFromRedis(source)
}

// ConvertTo populates the provided hub Redis from our Redis
func (redis *Redis) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201201storage.Redis)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesToRedis(destination)
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20201201-redis,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redis,verbs=create;update,versions=v1alpha1api20201201,name=default.v1alpha1api20201201.redis.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Redis{}

// Default applies defaults to the Redis resource
func (redis *Redis) Default() {
	redis.defaultImpl()
	var temp interface{} = redis
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (redis *Redis) defaultAzureName() {
	if redis.Spec.AzureName == "" {
		redis.Spec.AzureName = redis.Name
	}
}

// defaultImpl applies the code generated defaults to the Redis resource
func (redis *Redis) defaultImpl() { redis.defaultAzureName() }

var _ genruntime.KubernetesResource = &Redis{}

// AzureName returns the Azure name of the resource
func (redis *Redis) AzureName() string {
	return redis.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (redis Redis) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (redis *Redis) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (redis *Redis) GetSpec() genruntime.ConvertibleSpec {
	return &redis.Spec
}

// GetStatus returns the status of this resource
func (redis *Redis) GetStatus() genruntime.ConvertibleStatus {
	return &redis.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redis"
func (redis *Redis) GetType() string {
	return "Microsoft.Cache/redis"
}

// NewEmptyStatus returns a new empty (blank) status
func (redis *Redis) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Redis_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (redis *Redis) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redis.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redis.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redis *Redis) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Redis_Status); ok {
		redis.Status = *st
		return nil
	}

	// Convert status to required version
	var st Redis_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redis.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20201201-redis,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redis,verbs=create;update,versions=v1alpha1api20201201,name=validate.v1alpha1api20201201.redis.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Redis{}

// ValidateCreate validates the creation of the resource
func (redis *Redis) ValidateCreate() error {
	validations := redis.createValidations()
	var temp interface{} = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (redis *Redis) ValidateDelete() error {
	validations := redis.deleteValidations()
	var temp interface{} = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (redis *Redis) ValidateUpdate(old runtime.Object) error {
	validations := redis.updateValidations()
	var temp interface{} = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (redis *Redis) createValidations() []func() error {
	return []func() error{redis.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (redis *Redis) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (redis *Redis) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return redis.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (redis *Redis) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&redis.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRedis populates our Redis from the provided source Redis
func (redis *Redis) AssignPropertiesFromRedis(source *v1alpha1api20201201storage.Redis) error {

	// ObjectMeta
	redis.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Redis_Spec
	err := spec.AssignPropertiesFromRedis_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedis_Spec() to populate field Spec")
	}
	redis.Spec = spec

	// Status
	var status Redis_Status
	err = status.AssignPropertiesFromRedis_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedis_Status() to populate field Status")
	}
	redis.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedis populates the provided destination Redis from our Redis
func (redis *Redis) AssignPropertiesToRedis(destination *v1alpha1api20201201storage.Redis) error {

	// ObjectMeta
	destination.ObjectMeta = *redis.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201201storage.Redis_Spec
	err := redis.Spec.AssignPropertiesToRedis_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedis_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201201storage.Redis_Status
	err = redis.Status.AssignPropertiesToRedis_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedis_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redis *Redis) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redis.Spec.OriginalVersion(),
		Kind:    "Redis",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /redis/resource-manager/Microsoft.Cache/stable/2020-12-01/redis.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

// +kubebuilder:validation:Enum={"2020-12-01"}
type APIVersion string

const APIVersionValue = APIVersion("2020-12-01")

type Redis_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The geo-location where the resource lives
	Location string `json:"location"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *RedisPropertiesMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *RedisPropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration *RedisPropertiesRedisConfiguration `json:"redisConfiguration,omitempty"`

	//RedisVersion: Redis version. Only major version will be used in PUT/PATCH
	//request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per primary.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	//ReplicasPerPrimary: The number of replicas to be created per primary.
	ReplicasPerPrimary *int `json:"replicasPerPrimary,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: The SKU of the Redis cache to deploy.
	Sku Sku `json:"sku"`

	// +kubebuilder:validation:Pattern="^\\d+\\.\\d+\\.\\d+\\.\\d+$"
	//StaticIP: Static IP address. Optionally, may be specified when deploying a Redis
	//cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	// +kubebuilder:validation:Pattern="^/subscriptions/[^/]*/resourceGroups/[^/]*/providers/Microsoft.(ClassicNetwork|Network)/virtualNetworks/[^/]*/subnets/[^/]*$"
	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &Redis_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (redis *Redis_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if redis == nil {
		return nil, nil
	}
	var result Redis_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = redis.AzureName

	// Set property ‘Location’:
	result.Location = redis.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		result.Properties.EnableNonSslPort = &enableNonSslPort
	}
	if redis.MinimumTlsVersion != nil {
		minimumTlsVersion := *redis.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if redis.PublicNetworkAccess != nil {
		publicNetworkAccess := *redis.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if redis.RedisConfiguration != nil {
		redisConfigurationARM, err := (*redis.RedisConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		redisConfiguration := redisConfigurationARM.(RedisPropertiesRedisConfigurationARM)
		result.Properties.RedisConfiguration = &redisConfiguration
	}
	if redis.RedisVersion != nil {
		redisVersion := *redis.RedisVersion
		result.Properties.RedisVersion = &redisVersion
	}
	if redis.ReplicasPerMaster != nil {
		replicasPerMaster := *redis.ReplicasPerMaster
		result.Properties.ReplicasPerMaster = &replicasPerMaster
	}
	if redis.ReplicasPerPrimary != nil {
		replicasPerPrimary := *redis.ReplicasPerPrimary
		result.Properties.ReplicasPerPrimary = &replicasPerPrimary
	}
	if redis.ShardCount != nil {
		shardCount := *redis.ShardCount
		result.Properties.ShardCount = &shardCount
	}
	skuARM, err := redis.Sku.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Sku = skuARM.(SkuARM)
	if redis.StaticIP != nil {
		staticIP := *redis.StaticIP
		result.Properties.StaticIP = &staticIP
	}
	if redis.SubnetId != nil {
		subnetId := *redis.SubnetId
		result.Properties.SubnetId = &subnetId
	}
	if redis.TenantSettings != nil {
		result.Properties.TenantSettings = make(map[string]string)
		for key, value := range redis.TenantSettings {
			result.Properties.TenantSettings[key] = value
		}
	}

	// Set property ‘Tags’:
	if redis.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range redis.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range redis.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redis *Redis_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Redis_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redis *Redis_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Redis_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Redis_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	redis.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘EnableNonSslPort’:
	// copying flattened property:
	if typedInput.Properties.EnableNonSslPort != nil {
		enableNonSslPort := *typedInput.Properties.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	}

	// Set property ‘Location’:
	redis.Location = typedInput.Location

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties.MinimumTlsVersion != nil {
		minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
		redis.MinimumTlsVersion = &minimumTlsVersion
	}

	// Set property ‘Owner’:
	redis.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		redis.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘RedisConfiguration’:
	// copying flattened property:
	if typedInput.Properties.RedisConfiguration != nil {
		var redisConfiguration1 RedisPropertiesRedisConfiguration
		err := redisConfiguration1.PopulateFromARM(owner, *typedInput.Properties.RedisConfiguration)
		if err != nil {
			return err
		}
		redisConfiguration := redisConfiguration1
		redis.RedisConfiguration = &redisConfiguration
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties.RedisVersion != nil {
		redisVersion := *typedInput.Properties.RedisVersion
		redis.RedisVersion = &redisVersion
	}

	// Set property ‘ReplicasPerMaster’:
	// copying flattened property:
	if typedInput.Properties.ReplicasPerMaster != nil {
		replicasPerMaster := *typedInput.Properties.ReplicasPerMaster
		redis.ReplicasPerMaster = &replicasPerMaster
	}

	// Set property ‘ReplicasPerPrimary’:
	// copying flattened property:
	if typedInput.Properties.ReplicasPerPrimary != nil {
		replicasPerPrimary := *typedInput.Properties.ReplicasPerPrimary
		redis.ReplicasPerPrimary = &replicasPerPrimary
	}

	// Set property ‘ShardCount’:
	// copying flattened property:
	if typedInput.Properties.ShardCount != nil {
		shardCount := *typedInput.Properties.ShardCount
		redis.ShardCount = &shardCount
	}

	// Set property ‘Sku’:
	// copying flattened property:
	var sku Sku
	err := sku.PopulateFromARM(owner, typedInput.Properties.Sku)
	if err != nil {
		return err
	}
	redis.Sku = sku

	// Set property ‘StaticIP’:
	// copying flattened property:
	if typedInput.Properties.StaticIP != nil {
		staticIP := *typedInput.Properties.StaticIP
		redis.StaticIP = &staticIP
	}

	// Set property ‘SubnetId’:
	// copying flattened property:
	if typedInput.Properties.SubnetId != nil {
		subnetId := *typedInput.Properties.SubnetId
		redis.SubnetId = &subnetId
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redis.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			redis.Tags[key] = value
		}
	}

	// Set property ‘TenantSettings’:
	// copying flattened property:
	if typedInput.Properties.TenantSettings != nil {
		redis.TenantSettings = make(map[string]string)
		for key, value := range typedInput.Properties.TenantSettings {
			redis.TenantSettings[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redis.Zones = append(redis.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Redis_Spec{}

// ConvertSpecFrom populates our Redis_Spec from the provided source
func (redis *Redis_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201201storage.Redis_Spec)
	if ok {
		// Populate our instance from source
		return redis.AssignPropertiesFromRedis_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.Redis_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redis.AssignPropertiesFromRedis_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Redis_Spec
func (redis *Redis_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201201storage.Redis_Spec)
	if ok {
		// Populate destination from our instance
		return redis.AssignPropertiesToRedis_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.Redis_Spec{}
	err := redis.AssignPropertiesToRedis_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedis_Spec populates our Redis_Spec from the provided source Redis_Spec
func (redis *Redis_Spec) AssignPropertiesFromRedis_Spec(source *v1alpha1api20201201storage.Redis_Spec) error {

	// AzureName
	redis.AzureName = source.AzureName

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// Location
	redis.Location = genruntime.GetOptionalStringValue(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := RedisPropertiesMinimumTlsVersion(*source.MinimumTlsVersion)
		redis.MinimumTlsVersion = &minimumTlsVersion
	} else {
		redis.MinimumTlsVersion = nil
	}

	// Owner
	redis.Owner = source.Owner.Copy()

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RedisPropertiesPublicNetworkAccess(*source.PublicNetworkAccess)
		redis.PublicNetworkAccess = &publicNetworkAccess
	} else {
		redis.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	if source.RedisConfiguration != nil {
		var redisConfiguration RedisPropertiesRedisConfiguration
		err := redisConfiguration.AssignPropertiesFromRedisPropertiesRedisConfiguration(source.RedisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRedisPropertiesRedisConfiguration() to populate field RedisConfiguration")
		}
		redis.RedisConfiguration = &redisConfiguration
	} else {
		redis.RedisConfiguration = nil
	}

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		redis.Sku = sku
	} else {
		redis.Sku = Sku{}
	}

	// StaticIP
	if source.StaticIP != nil {
		staticIP := *source.StaticIP
		redis.StaticIP = &staticIP
	} else {
		redis.StaticIP = nil
	}

	// SubnetId
	if source.SubnetId != nil {
		subnetId := *source.SubnetId
		redis.SubnetId = &subnetId
	} else {
		redis.SubnetId = nil
	}

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToRedis_Spec populates the provided destination Redis_Spec from our Redis_Spec
func (redis *Redis_Spec) AssignPropertiesToRedis_Spec(destination *v1alpha1api20201201storage.Redis_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = redis.AzureName

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	location := redis.Location
	destination.Location = &location

	// MinimumTlsVersion
	if redis.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*redis.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// OriginalVersion
	destination.OriginalVersion = redis.OriginalVersion()

	// Owner
	destination.Owner = redis.Owner.Copy()

	// PublicNetworkAccess
	if redis.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*redis.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	if redis.RedisConfiguration != nil {
		var redisConfiguration v1alpha1api20201201storage.RedisPropertiesRedisConfiguration
		err := redis.RedisConfiguration.AssignPropertiesToRedisPropertiesRedisConfiguration(&redisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRedisPropertiesRedisConfiguration() to populate field RedisConfiguration")
		}
		destination.RedisConfiguration = &redisConfiguration
	} else {
		destination.RedisConfiguration = nil
	}

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	var sku v1alpha1api20201201storage.Sku
	err := redis.Sku.AssignPropertiesToSku(&sku)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
	}
	destination.Sku = &sku

	// StaticIP
	if redis.StaticIP != nil {
		staticIP := *redis.StaticIP
		destination.StaticIP = &staticIP
	} else {
		destination.StaticIP = nil
	}

	// SubnetId
	if redis.SubnetId != nil {
		subnetId := *redis.SubnetId
		destination.SubnetId = &subnetId
	} else {
		destination.SubnetId = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (redis *Redis_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (redis *Redis_Spec) SetAzureName(azureName string) { redis.AzureName = azureName }

type Redis_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *string `json:"minimumTlsVersion,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration map[string]string `json:"redisConfiguration,omitempty"`

	//RedisVersion: Redis version. Only major version will be used in PUT/PATCH
	//request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per primary.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	//ReplicasPerPrimary: The number of replicas to be created per primary.
	ReplicasPerPrimary *int `json:"replicasPerPrimary,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	//Sku: The SKU of the Redis cache to deploy.
	Sku *Sku_Status `json:"sku,omitempty"`

	//StaticIP: Static IP address. Optionally, may be specified when deploying a Redis
	//cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Redis_Status{}

// ConvertStatusFrom populates our Redis_Status from the provided source
func (redis *Redis_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201201storage.Redis_Status)
	if ok {
		// Populate our instance from source
		return redis.AssignPropertiesFromRedis_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.Redis_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = redis.AssignPropertiesFromRedis_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Redis_Status
func (redis *Redis_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201201storage.Redis_Status)
	if ok {
		// Populate destination from our instance
		return redis.AssignPropertiesToRedis_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.Redis_Status{}
	err := redis.AssignPropertiesToRedis_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Redis_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redis *Redis_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Redis_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redis *Redis_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Redis_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Redis_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘EnableNonSslPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNonSslPort != nil {
			enableNonSslPort := *typedInput.Properties.EnableNonSslPort
			redis.EnableNonSslPort = &enableNonSslPort
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		redis.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			redis.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			redis.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘RedisConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisConfiguration != nil {
			redis.RedisConfiguration = make(map[string]string)
			for key, value := range typedInput.Properties.RedisConfiguration {
				redis.RedisConfiguration[key] = value
			}
		}
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisVersion != nil {
			redisVersion := *typedInput.Properties.RedisVersion
			redis.RedisVersion = &redisVersion
		}
	}

	// Set property ‘ReplicasPerMaster’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerMaster != nil {
			replicasPerMaster := *typedInput.Properties.ReplicasPerMaster
			redis.ReplicasPerMaster = &replicasPerMaster
		}
	}

	// Set property ‘ReplicasPerPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerPrimary != nil {
			replicasPerPrimary := *typedInput.Properties.ReplicasPerPrimary
			redis.ReplicasPerPrimary = &replicasPerPrimary
		}
	}

	// Set property ‘ShardCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShardCount != nil {
			shardCount := *typedInput.Properties.ShardCount
			redis.ShardCount = &shardCount
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp Sku_Status
		var temp1 Sku_Status
		err := temp1.PopulateFromARM(owner, typedInput.Properties.Sku)
		if err != nil {
			return err
		}
		temp = temp1
		redis.Sku = &temp
	}

	// Set property ‘StaticIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StaticIP != nil {
			staticIP := *typedInput.Properties.StaticIP
			redis.StaticIP = &staticIP
		}
	}

	// Set property ‘SubnetId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubnetId != nil {
			subnetId := *typedInput.Properties.SubnetId
			redis.SubnetId = &subnetId
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redis.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			redis.Tags[key] = value
		}
	}

	// Set property ‘TenantSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TenantSettings != nil {
			redis.TenantSettings = make(map[string]string)
			for key, value := range typedInput.Properties.TenantSettings {
				redis.TenantSettings[key] = value
			}
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redis.Zones = append(redis.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromRedis_Status populates our Redis_Status from the provided source Redis_Status
func (redis *Redis_Status) AssignPropertiesFromRedis_Status(source *v1alpha1api20201201storage.Redis_Status) error {

	// Conditions
	redis.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// Location
	redis.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	redis.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// PublicNetworkAccess
	redis.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// RedisConfiguration
	redis.RedisConfiguration = genruntime.CloneMapOfStringToString(source.RedisConfiguration)

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_Status() to populate field Sku")
		}
		redis.Sku = &sku
	} else {
		redis.Sku = nil
	}

	// StaticIP
	redis.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetId
	redis.SubnetId = genruntime.ClonePointerToString(source.SubnetId)

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToRedis_Status populates the provided destination Redis_Status from our Redis_Status
func (redis *Redis_Status) AssignPropertiesToRedis_Status(destination *v1alpha1api20201201storage.Redis_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(redis.Conditions)

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redis.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(redis.MinimumTlsVersion)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(redis.PublicNetworkAccess)

	// RedisConfiguration
	destination.RedisConfiguration = genruntime.CloneMapOfStringToString(redis.RedisConfiguration)

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	if redis.Sku != nil {
		var sku v1alpha1api20201201storage.Sku_Status
		err := redis.Sku.AssignPropertiesToSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(redis.StaticIP)

	// SubnetId
	destination.SubnetId = genruntime.ClonePointerToString(redis.SubnetId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"1.0","1.1","1.2"}
type RedisPropertiesMinimumTlsVersion string

const (
	RedisPropertiesMinimumTlsVersion10 = RedisPropertiesMinimumTlsVersion("1.0")
	RedisPropertiesMinimumTlsVersion11 = RedisPropertiesMinimumTlsVersion("1.1")
	RedisPropertiesMinimumTlsVersion12 = RedisPropertiesMinimumTlsVersion("1.2")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RedisPropertiesPublicNetworkAccess string

const (
	RedisPropertiesPublicNetworkAccessDisabled = RedisPropertiesPublicNetworkAccess("Disabled")
	RedisPropertiesPublicNetworkAccessEnabled  = RedisPropertiesPublicNetworkAccess("Enabled")
)

type RedisPropertiesRedisConfiguration struct {
	AdditionalProperties map[string]string `json:"additionalProperties"`

	//AofStorageConnectionString0: First storage account connection string
	AofStorageConnectionString0 *string `json:"aof-storage-connection-string-0,omitempty"`

	//AofStorageConnectionString1: Second storage account connection string
	AofStorageConnectionString1 *string `json:"aof-storage-connection-string-1,omitempty"`

	//MaxfragmentationmemoryReserved: Value in megabytes reserved for fragmentation
	//per shard
	MaxfragmentationmemoryReserved *string `json:"maxfragmentationmemory-reserved,omitempty"`

	//MaxmemoryDelta: Value in megabytes reserved for non-cache usage per shard e.g.
	//failover.
	MaxmemoryDelta *string `json:"maxmemory-delta,omitempty"`

	//MaxmemoryPolicy: The eviction strategy used when your data won't fit within its
	//memory limit.
	MaxmemoryPolicy *string `json:"maxmemory-policy,omitempty"`

	//MaxmemoryReserved: Value in megabytes reserved for non-cache usage per shard
	//e.g. failover.
	MaxmemoryReserved *string `json:"maxmemory-reserved,omitempty"`

	//RdbBackupEnabled: Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `json:"rdb-backup-enabled,omitempty"`

	//RdbBackupFrequency: Specifies the frequency for creating rdb backup
	RdbBackupFrequency *string `json:"rdb-backup-frequency,omitempty"`

	//RdbBackupMaxSnapshotCount: Specifies the maximum number of snapshots for rdb
	//backup
	RdbBackupMaxSnapshotCount *string `json:"rdb-backup-max-snapshot-count,omitempty"`

	//RdbStorageConnectionString: The storage account connection string for storing
	//rdb file
	RdbStorageConnectionString *string `json:"rdb-storage-connection-string,omitempty"`
}

var _ genruntime.ARMTransformer = &RedisPropertiesRedisConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *RedisPropertiesRedisConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result RedisPropertiesRedisConfigurationARM

	// Set property ‘AdditionalProperties’:
	if configuration.AdditionalProperties != nil {
		result.AdditionalProperties = make(map[string]string)
		for key, value := range configuration.AdditionalProperties {
			result.AdditionalProperties[key] = value
		}
	}

	// Set property ‘AofStorageConnectionString0’:
	if configuration.AofStorageConnectionString0 != nil {
		aofStorageConnectionString0 := *configuration.AofStorageConnectionString0
		result.AofStorageConnectionString0 = &aofStorageConnectionString0
	}

	// Set property ‘AofStorageConnectionString1’:
	if configuration.AofStorageConnectionString1 != nil {
		aofStorageConnectionString1 := *configuration.AofStorageConnectionString1
		result.AofStorageConnectionString1 = &aofStorageConnectionString1
	}

	// Set property ‘MaxfragmentationmemoryReserved’:
	if configuration.MaxfragmentationmemoryReserved != nil {
		maxfragmentationmemoryReserved := *configuration.MaxfragmentationmemoryReserved
		result.MaxfragmentationmemoryReserved = &maxfragmentationmemoryReserved
	}

	// Set property ‘MaxmemoryDelta’:
	if configuration.MaxmemoryDelta != nil {
		maxmemoryDelta := *configuration.MaxmemoryDelta
		result.MaxmemoryDelta = &maxmemoryDelta
	}

	// Set property ‘MaxmemoryPolicy’:
	if configuration.MaxmemoryPolicy != nil {
		maxmemoryPolicy := *configuration.MaxmemoryPolicy
		result.MaxmemoryPolicy = &maxmemoryPolicy
	}

	// Set property ‘MaxmemoryReserved’:
	if configuration.MaxmemoryReserved != nil {
		maxmemoryReserved := *configuration.MaxmemoryReserved
		result.MaxmemoryReserved = &maxmemoryReserved
	}

	// Set property ‘RdbBackupEnabled’:
	if configuration.RdbBackupEnabled != nil {
		rdbBackupEnabled := *configuration.RdbBackupEnabled
		result.RdbBackupEnabled = &rdbBackupEnabled
	}

	// Set property ‘RdbBackupFrequency’:
	if configuration.RdbBackupFrequency != nil {
		rdbBackupFrequency := *configuration.RdbBackupFrequency
		result.RdbBackupFrequency = &rdbBackupFrequency
	}

	// Set property ‘RdbBackupMaxSnapshotCount’:
	if configuration.RdbBackupMaxSnapshotCount != nil {
		rdbBackupMaxSnapshotCount := *configuration.RdbBackupMaxSnapshotCount
		result.RdbBackupMaxSnapshotCount = &rdbBackupMaxSnapshotCount
	}

	// Set property ‘RdbStorageConnectionString’:
	if configuration.RdbStorageConnectionString != nil {
		rdbStorageConnectionString := *configuration.RdbStorageConnectionString
		result.RdbStorageConnectionString = &rdbStorageConnectionString
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *RedisPropertiesRedisConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisPropertiesRedisConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *RedisPropertiesRedisConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisPropertiesRedisConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisPropertiesRedisConfigurationARM, got %T", armInput)
	}

	// Set property ‘AdditionalProperties’:
	if typedInput.AdditionalProperties != nil {
		configuration.AdditionalProperties = make(map[string]string)
		for key, value := range typedInput.AdditionalProperties {
			configuration.AdditionalProperties[key] = value
		}
	}

	// Set property ‘AofStorageConnectionString0’:
	if typedInput.AofStorageConnectionString0 != nil {
		aofStorageConnectionString0 := *typedInput.AofStorageConnectionString0
		configuration.AofStorageConnectionString0 = &aofStorageConnectionString0
	}

	// Set property ‘AofStorageConnectionString1’:
	if typedInput.AofStorageConnectionString1 != nil {
		aofStorageConnectionString1 := *typedInput.AofStorageConnectionString1
		configuration.AofStorageConnectionString1 = &aofStorageConnectionString1
	}

	// Set property ‘MaxfragmentationmemoryReserved’:
	if typedInput.MaxfragmentationmemoryReserved != nil {
		maxfragmentationmemoryReserved := *typedInput.MaxfragmentationmemoryReserved
		configuration.MaxfragmentationmemoryReserved = &maxfragmentationmemoryReserved
	}

	// Set property ‘MaxmemoryDelta’:
	if typedInput.MaxmemoryDelta != nil {
		maxmemoryDelta := *typedInput.MaxmemoryDelta
		configuration.MaxmemoryDelta = &maxmemoryDelta
	}

	// Set property ‘MaxmemoryPolicy’:
	if typedInput.MaxmemoryPolicy != nil {
		maxmemoryPolicy := *typedInput.MaxmemoryPolicy
		configuration.MaxmemoryPolicy = &maxmemoryPolicy
	}

	// Set property ‘MaxmemoryReserved’:
	if typedInput.MaxmemoryReserved != nil {
		maxmemoryReserved := *typedInput.MaxmemoryReserved
		configuration.MaxmemoryReserved = &maxmemoryReserved
	}

	// Set property ‘RdbBackupEnabled’:
	if typedInput.RdbBackupEnabled != nil {
		rdbBackupEnabled := *typedInput.RdbBackupEnabled
		configuration.RdbBackupEnabled = &rdbBackupEnabled
	}

	// Set property ‘RdbBackupFrequency’:
	if typedInput.RdbBackupFrequency != nil {
		rdbBackupFrequency := *typedInput.RdbBackupFrequency
		configuration.RdbBackupFrequency = &rdbBackupFrequency
	}

	// Set property ‘RdbBackupMaxSnapshotCount’:
	if typedInput.RdbBackupMaxSnapshotCount != nil {
		rdbBackupMaxSnapshotCount := *typedInput.RdbBackupMaxSnapshotCount
		configuration.RdbBackupMaxSnapshotCount = &rdbBackupMaxSnapshotCount
	}

	// Set property ‘RdbStorageConnectionString’:
	if typedInput.RdbStorageConnectionString != nil {
		rdbStorageConnectionString := *typedInput.RdbStorageConnectionString
		configuration.RdbStorageConnectionString = &rdbStorageConnectionString
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisPropertiesRedisConfiguration populates our RedisPropertiesRedisConfiguration from the provided source RedisPropertiesRedisConfiguration
func (configuration *RedisPropertiesRedisConfiguration) AssignPropertiesFromRedisPropertiesRedisConfiguration(source *v1alpha1api20201201storage.RedisPropertiesRedisConfiguration) error {

	// AdditionalProperties
	configuration.AdditionalProperties = genruntime.CloneMapOfStringToString(source.AdditionalProperties)

	// AofStorageConnectionString0
	configuration.AofStorageConnectionString0 = genruntime.ClonePointerToString(source.AofStorageConnectionString0)

	// AofStorageConnectionString1
	configuration.AofStorageConnectionString1 = genruntime.ClonePointerToString(source.AofStorageConnectionString1)

	// MaxfragmentationmemoryReserved
	configuration.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(source.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	configuration.MaxmemoryDelta = genruntime.ClonePointerToString(source.MaxmemoryDelta)

	// MaxmemoryPolicy
	configuration.MaxmemoryPolicy = genruntime.ClonePointerToString(source.MaxmemoryPolicy)

	// MaxmemoryReserved
	configuration.MaxmemoryReserved = genruntime.ClonePointerToString(source.MaxmemoryReserved)

	// RdbBackupEnabled
	configuration.RdbBackupEnabled = genruntime.ClonePointerToString(source.RdbBackupEnabled)

	// RdbBackupFrequency
	configuration.RdbBackupFrequency = genruntime.ClonePointerToString(source.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	configuration.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(source.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	configuration.RdbStorageConnectionString = genruntime.ClonePointerToString(source.RdbStorageConnectionString)

	// No error
	return nil
}

// AssignPropertiesToRedisPropertiesRedisConfiguration populates the provided destination RedisPropertiesRedisConfiguration from our RedisPropertiesRedisConfiguration
func (configuration *RedisPropertiesRedisConfiguration) AssignPropertiesToRedisPropertiesRedisConfiguration(destination *v1alpha1api20201201storage.RedisPropertiesRedisConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalProperties
	destination.AdditionalProperties = genruntime.CloneMapOfStringToString(configuration.AdditionalProperties)

	// AofStorageConnectionString0
	destination.AofStorageConnectionString0 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString0)

	// AofStorageConnectionString1
	destination.AofStorageConnectionString1 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString1)

	// MaxfragmentationmemoryReserved
	destination.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(configuration.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	destination.MaxmemoryDelta = genruntime.ClonePointerToString(configuration.MaxmemoryDelta)

	// MaxmemoryPolicy
	destination.MaxmemoryPolicy = genruntime.ClonePointerToString(configuration.MaxmemoryPolicy)

	// MaxmemoryReserved
	destination.MaxmemoryReserved = genruntime.ClonePointerToString(configuration.MaxmemoryReserved)

	// RdbBackupEnabled
	destination.RdbBackupEnabled = genruntime.ClonePointerToString(configuration.RdbBackupEnabled)

	// RdbBackupFrequency
	destination.RdbBackupFrequency = genruntime.ClonePointerToString(configuration.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	destination.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(configuration.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	destination.RdbStorageConnectionString = genruntime.ClonePointerToString(configuration.RdbStorageConnectionString)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family SkuFamily `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name SkuName `json:"name"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Capacity’:
	result.Capacity = sku.Capacity

	// Set property ‘Family’:
	result.Family = sku.Family

	// Set property ‘Name’:
	result.Name = sku.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	sku.Capacity = typedInput.Capacity

	// Set property ‘Family’:
	sku.Family = typedInput.Family

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20201201storage.Sku) error {

	// Capacity
	sku.Capacity = genruntime.GetOptionalIntValue(source.Capacity)

	// Family
	if source.Family != nil {
		sku.Family = SkuFamily(*source.Family)
	} else {
		sku.Family = ""
	}

	// Name
	if source.Name != nil {
		sku.Name = SkuName(*source.Name)
	} else {
		sku.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20201201storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	capacity := sku.Capacity
	destination.Capacity = &capacity

	// Family
	family := string(sku.Family)
	destination.Family = &family

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family string `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name string `json:"name"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	sku.Capacity = typedInput.Capacity

	// Set property ‘Family’:
	sku.Family = typedInput.Family

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSku_Status populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSku_Status(source *v1alpha1api20201201storage.Sku_Status) error {

	// Capacity
	sku.Capacity = genruntime.GetOptionalIntValue(source.Capacity)

	// Family
	sku.Family = genruntime.GetOptionalStringValue(source.Family)

	// Name
	sku.Name = genruntime.GetOptionalStringValue(source.Name)

	// No error
	return nil
}

// AssignPropertiesToSku_Status populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSku_Status(destination *v1alpha1api20201201storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	capacity := sku.Capacity
	destination.Capacity = &capacity

	// Family
	family := sku.Family
	destination.Family = &family

	// Name
	name := sku.Name
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"C","P"}
type SkuFamily string

const (
	SkuFamilyC = SkuFamily("C")
	SkuFamilyP = SkuFamily("P")
)

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SkuName string

const (
	SkuNameBasic    = SkuName("Basic")
	SkuNamePremium  = SkuName("Premium")
	SkuNameStandard = SkuName("Standard")
)

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
