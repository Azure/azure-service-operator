// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"fmt"
	alpha20201201s "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of Redis. Use v1beta20201201.Redis instead
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Redis_Spec   `json:"spec,omitempty"`
	Status            Redis_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Redis{}

// GetConditions returns the conditions of the resource
func (redis *Redis) GetConditions() conditions.Conditions {
	return redis.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redis *Redis) SetConditions(conditions conditions.Conditions) {
	redis.Status.Conditions = conditions
}

var _ conversion.Convertible = &Redis{}

// ConvertFrom populates our Redis from the provided hub Redis
func (redis *Redis) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20201201s.Redis

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = redis.AssignProperties_From_Redis(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to redis")
	}

	return nil
}

// ConvertTo populates the provided hub Redis from our Redis
func (redis *Redis) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20201201s.Redis
	err := redis.AssignProperties_To_Redis(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from redis")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20201201-redis,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redis,verbs=create;update,versions=v1alpha1api20201201,name=default.v1alpha1api20201201.redis.cache.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Redis{}

// Default applies defaults to the Redis resource
func (redis *Redis) Default() {
	redis.defaultImpl()
	var temp any = redis
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (redis *Redis) defaultAzureName() {
	if redis.Spec.AzureName == "" {
		redis.Spec.AzureName = redis.Name
	}
}

// defaultImpl applies the code generated defaults to the Redis resource
func (redis *Redis) defaultImpl() { redis.defaultAzureName() }

var _ genruntime.KubernetesResource = &Redis{}

// AzureName returns the Azure name of the resource
func (redis *Redis) AzureName() string {
	return redis.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (redis Redis) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (redis *Redis) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (redis *Redis) GetSpec() genruntime.ConvertibleSpec {
	return &redis.Spec
}

// GetStatus returns the status of this resource
func (redis *Redis) GetStatus() genruntime.ConvertibleStatus {
	return &redis.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redis"
func (redis *Redis) GetType() string {
	return "Microsoft.Cache/redis"
}

// NewEmptyStatus returns a new empty (blank) status
func (redis *Redis) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Redis_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (redis *Redis) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redis.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redis.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redis *Redis) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Redis_STATUS); ok {
		redis.Status = *st
		return nil
	}

	// Convert status to required version
	var st Redis_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redis.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20201201-redis,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redis,verbs=create;update,versions=v1alpha1api20201201,name=validate.v1alpha1api20201201.redis.cache.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Redis{}

// ValidateCreate validates the creation of the resource
func (redis *Redis) ValidateCreate() error {
	validations := redis.createValidations()
	var temp any = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (redis *Redis) ValidateDelete() error {
	validations := redis.deleteValidations()
	var temp any = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (redis *Redis) ValidateUpdate(old runtime.Object) error {
	validations := redis.updateValidations()
	var temp any = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (redis *Redis) createValidations() []func() error {
	return []func() error{redis.validateResourceReferences, redis.validateSecretDestinations}
}

// deleteValidations validates the deletion of the resource
func (redis *Redis) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (redis *Redis) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return redis.validateResourceReferences()
		},
		redis.validateWriteOnceProperties,
		func(old runtime.Object) error {
			return redis.validateSecretDestinations()
		},
	}
}

// validateResourceReferences validates all resource references
func (redis *Redis) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&redis.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (redis *Redis) validateSecretDestinations() error {
	if redis.Spec.OperatorSpec == nil {
		return nil
	}
	if redis.Spec.OperatorSpec.Secrets == nil {
		return nil
	}
	toValidate := []*genruntime.SecretDestination{
		redis.Spec.OperatorSpec.Secrets.HostName,
		redis.Spec.OperatorSpec.Secrets.Port,
		redis.Spec.OperatorSpec.Secrets.PrimaryKey,
		redis.Spec.OperatorSpec.Secrets.SSLPort,
		redis.Spec.OperatorSpec.Secrets.SecondaryKey,
	}
	return genruntime.ValidateSecretDestinations(toValidate)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (redis *Redis) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Redis)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, redis)
}

// AssignProperties_From_Redis populates our Redis from the provided source Redis
func (redis *Redis) AssignProperties_From_Redis(source *alpha20201201s.Redis) error {

	// ObjectMeta
	redis.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Redis_Spec
	err := spec.AssignProperties_From_Redis_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Redis_Spec() to populate field Spec")
	}
	redis.Spec = spec

	// Status
	var status Redis_STATUS
	err = status.AssignProperties_From_Redis_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Redis_STATUS() to populate field Status")
	}
	redis.Status = status

	// No error
	return nil
}

// AssignProperties_To_Redis populates the provided destination Redis from our Redis
func (redis *Redis) AssignProperties_To_Redis(destination *alpha20201201s.Redis) error {

	// ObjectMeta
	destination.ObjectMeta = *redis.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20201201s.Redis_Spec
	err := redis.Spec.AssignProperties_To_Redis_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Redis_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20201201s.Redis_STATUS
	err = redis.Status.AssignProperties_To_Redis_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Redis_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redis *Redis) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redis.Spec.OriginalVersion(),
		Kind:    "Redis",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of Redis. Use v1beta20201201.Redis instead
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

// Deprecated version of APIVersion. Use v1beta20201201.APIVersion instead
// +kubebuilder:validation:Enum={"2020-12-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-12-01")

type Redis_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName        string `json:"azureName,omitempty"`
	EnableNonSslPort *bool  `json:"enableNonSslPort,omitempty"`

	// +kubebuilder:validation:Required
	Location          *string                                  `json:"location,omitempty"`
	MinimumTlsVersion *RedisCreateProperties_MinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *RedisOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference         `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PublicNetworkAccess *RedisCreateProperties_PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`
	RedisConfiguration  *RedisCreateProperties_RedisConfiguration  `json:"redisConfiguration,omitempty"`
	RedisVersion        *string                                    `json:"redisVersion,omitempty"`
	ReplicasPerMaster   *int                                       `json:"replicasPerMaster,omitempty"`
	ReplicasPerPrimary  *int                                       `json:"replicasPerPrimary,omitempty"`
	ShardCount          *int                                       `json:"shardCount,omitempty"`

	// +kubebuilder:validation:Required
	Sku *Sku `json:"sku,omitempty"`

	// +kubebuilder:validation:Pattern="^\\d+\\.\\d+\\.\\d+\\.\\d+$"
	StaticIP        *string                       `json:"staticIP,omitempty"`
	SubnetReference *genruntime.ResourceReference `armReference:"SubnetId" json:"subnetReference,omitempty"`
	Tags            map[string]string             `json:"tags,omitempty"`
	TenantSettings  map[string]string             `json:"tenantSettings,omitempty"`
	Zones           []string                      `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &Redis_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (redis *Redis_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if redis == nil {
		return nil, nil
	}
	result := &Redis_Spec_ARM{}

	// Set property ‘Location’:
	if redis.Location != nil {
		location := *redis.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if redis.EnableNonSslPort != nil ||
		redis.MinimumTlsVersion != nil ||
		redis.PublicNetworkAccess != nil ||
		redis.RedisConfiguration != nil ||
		redis.RedisVersion != nil ||
		redis.ReplicasPerMaster != nil ||
		redis.ReplicasPerPrimary != nil ||
		redis.ShardCount != nil ||
		redis.Sku != nil ||
		redis.StaticIP != nil ||
		redis.SubnetReference != nil ||
		redis.TenantSettings != nil {
		result.Properties = &RedisCreateProperties_ARM{}
	}
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		result.Properties.EnableNonSslPort = &enableNonSslPort
	}
	if redis.MinimumTlsVersion != nil {
		minimumTlsVersion := *redis.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if redis.PublicNetworkAccess != nil {
		publicNetworkAccess := *redis.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if redis.RedisConfiguration != nil {
		redisConfiguration_ARM, err := (*redis.RedisConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		redisConfiguration := *redisConfiguration_ARM.(*RedisCreateProperties_RedisConfiguration_ARM)
		result.Properties.RedisConfiguration = &redisConfiguration
	}
	if redis.RedisVersion != nil {
		redisVersion := *redis.RedisVersion
		result.Properties.RedisVersion = &redisVersion
	}
	if redis.ReplicasPerMaster != nil {
		replicasPerMaster := *redis.ReplicasPerMaster
		result.Properties.ReplicasPerMaster = &replicasPerMaster
	}
	if redis.ReplicasPerPrimary != nil {
		replicasPerPrimary := *redis.ReplicasPerPrimary
		result.Properties.ReplicasPerPrimary = &replicasPerPrimary
	}
	if redis.ShardCount != nil {
		shardCount := *redis.ShardCount
		result.Properties.ShardCount = &shardCount
	}
	if redis.Sku != nil {
		sku_ARM, err := (*redis.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *sku_ARM.(*Sku_ARM)
		result.Properties.Sku = &sku
	}
	if redis.StaticIP != nil {
		staticIP := *redis.StaticIP
		result.Properties.StaticIP = &staticIP
	}
	if redis.SubnetReference != nil {
		subnetIdARMID, err := resolved.ResolvedReferences.Lookup(*redis.SubnetReference)
		if err != nil {
			return nil, err
		}
		subnetId := subnetIdARMID
		result.Properties.SubnetId = &subnetId
	}
	if redis.TenantSettings != nil {
		result.Properties.TenantSettings = make(map[string]string, len(redis.TenantSettings))
		for key, value := range redis.TenantSettings {
			result.Properties.TenantSettings[key] = value
		}
	}

	// Set property ‘Tags’:
	if redis.Tags != nil {
		result.Tags = make(map[string]string, len(redis.Tags))
		for key, value := range redis.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range redis.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redis *Redis_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Redis_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redis *Redis_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Redis_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Redis_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	redis.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘EnableNonSslPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNonSslPort != nil {
			enableNonSslPort := *typedInput.Properties.EnableNonSslPort
			redis.EnableNonSslPort = &enableNonSslPort
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		redis.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			redis.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// no assignment for property ‘OperatorSpec’

	// Set property ‘Owner’:
	redis.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			redis.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘RedisConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisConfiguration != nil {
			var redisConfiguration1 RedisCreateProperties_RedisConfiguration
			err := redisConfiguration1.PopulateFromARM(owner, *typedInput.Properties.RedisConfiguration)
			if err != nil {
				return err
			}
			redisConfiguration := redisConfiguration1
			redis.RedisConfiguration = &redisConfiguration
		}
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisVersion != nil {
			redisVersion := *typedInput.Properties.RedisVersion
			redis.RedisVersion = &redisVersion
		}
	}

	// Set property ‘ReplicasPerMaster’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerMaster != nil {
			replicasPerMaster := *typedInput.Properties.ReplicasPerMaster
			redis.ReplicasPerMaster = &replicasPerMaster
		}
	}

	// Set property ‘ReplicasPerPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerPrimary != nil {
			replicasPerPrimary := *typedInput.Properties.ReplicasPerPrimary
			redis.ReplicasPerPrimary = &replicasPerPrimary
		}
	}

	// Set property ‘ShardCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShardCount != nil {
			shardCount := *typedInput.Properties.ShardCount
			redis.ShardCount = &shardCount
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 Sku
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			redis.Sku = &sku
		}
	}

	// Set property ‘StaticIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StaticIP != nil {
			staticIP := *typedInput.Properties.StaticIP
			redis.StaticIP = &staticIP
		}
	}

	// no assignment for property ‘SubnetReference’

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redis.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			redis.Tags[key] = value
		}
	}

	// Set property ‘TenantSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TenantSettings != nil {
			redis.TenantSettings = make(map[string]string, len(typedInput.Properties.TenantSettings))
			for key, value := range typedInput.Properties.TenantSettings {
				redis.TenantSettings[key] = value
			}
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redis.Zones = append(redis.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Redis_Spec{}

// ConvertSpecFrom populates our Redis_Spec from the provided source
func (redis *Redis_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20201201s.Redis_Spec)
	if ok {
		// Populate our instance from source
		return redis.AssignProperties_From_Redis_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20201201s.Redis_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redis.AssignProperties_From_Redis_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Redis_Spec
func (redis *Redis_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20201201s.Redis_Spec)
	if ok {
		// Populate destination from our instance
		return redis.AssignProperties_To_Redis_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201201s.Redis_Spec{}
	err := redis.AssignProperties_To_Redis_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Redis_Spec populates our Redis_Spec from the provided source Redis_Spec
func (redis *Redis_Spec) AssignProperties_From_Redis_Spec(source *alpha20201201s.Redis_Spec) error {

	// AzureName
	redis.AzureName = source.AzureName

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// Location
	redis.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := RedisCreateProperties_MinimumTlsVersion(*source.MinimumTlsVersion)
		redis.MinimumTlsVersion = &minimumTlsVersion
	} else {
		redis.MinimumTlsVersion = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec RedisOperatorSpec
		err := operatorSpec.AssignProperties_From_RedisOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RedisOperatorSpec() to populate field OperatorSpec")
		}
		redis.OperatorSpec = &operatorSpec
	} else {
		redis.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		redis.Owner = &owner
	} else {
		redis.Owner = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RedisCreateProperties_PublicNetworkAccess(*source.PublicNetworkAccess)
		redis.PublicNetworkAccess = &publicNetworkAccess
	} else {
		redis.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	if source.RedisConfiguration != nil {
		var redisConfiguration RedisCreateProperties_RedisConfiguration
		err := redisConfiguration.AssignProperties_From_RedisCreateProperties_RedisConfiguration(source.RedisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RedisCreateProperties_RedisConfiguration() to populate field RedisConfiguration")
		}
		redis.RedisConfiguration = &redisConfiguration
	} else {
		redis.RedisConfiguration = nil
	}

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignProperties_From_Sku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku() to populate field Sku")
		}
		redis.Sku = &sku
	} else {
		redis.Sku = nil
	}

	// StaticIP
	if source.StaticIP != nil {
		staticIP := *source.StaticIP
		redis.StaticIP = &staticIP
	} else {
		redis.StaticIP = nil
	}

	// SubnetReference
	if source.SubnetReference != nil {
		subnetReference := source.SubnetReference.Copy()
		redis.SubnetReference = &subnetReference
	} else {
		redis.SubnetReference = nil
	}

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_Redis_Spec populates the provided destination Redis_Spec from our Redis_Spec
func (redis *Redis_Spec) AssignProperties_To_Redis_Spec(destination *alpha20201201s.Redis_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = redis.AzureName

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redis.Location)

	// MinimumTlsVersion
	if redis.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*redis.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// OperatorSpec
	if redis.OperatorSpec != nil {
		var operatorSpec alpha20201201s.RedisOperatorSpec
		err := redis.OperatorSpec.AssignProperties_To_RedisOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RedisOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = redis.OriginalVersion()

	// Owner
	if redis.Owner != nil {
		owner := redis.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	if redis.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*redis.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	if redis.RedisConfiguration != nil {
		var redisConfiguration alpha20201201s.RedisCreateProperties_RedisConfiguration
		err := redis.RedisConfiguration.AssignProperties_To_RedisCreateProperties_RedisConfiguration(&redisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RedisCreateProperties_RedisConfiguration() to populate field RedisConfiguration")
		}
		destination.RedisConfiguration = &redisConfiguration
	} else {
		destination.RedisConfiguration = nil
	}

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	if redis.Sku != nil {
		var sku alpha20201201s.Sku
		err := redis.Sku.AssignProperties_To_Sku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StaticIP
	if redis.StaticIP != nil {
		staticIP := *redis.StaticIP
		destination.StaticIP = &staticIP
	} else {
		destination.StaticIP = nil
	}

	// SubnetReference
	if redis.SubnetReference != nil {
		subnetReference := redis.SubnetReference.Copy()
		destination.SubnetReference = &subnetReference
	} else {
		destination.SubnetReference = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (redis *Redis_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (redis *Redis_Spec) SetAzureName(azureName string) { redis.AzureName = azureName }

// Deprecated version of Redis_STATUS. Use v1beta20201201.Redis_STATUS instead
type Redis_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions                 []conditions.Condition                      `json:"conditions,omitempty"`
	EnableNonSslPort           *bool                                       `json:"enableNonSslPort,omitempty"`
	HostName                   *string                                     `json:"hostName,omitempty"`
	Id                         *string                                     `json:"id,omitempty"`
	Instances                  []RedisInstanceDetails_STATUS               `json:"instances,omitempty"`
	LinkedServers              []RedisLinkedServer_STATUS                  `json:"linkedServers,omitempty"`
	Location                   *string                                     `json:"location,omitempty"`
	MinimumTlsVersion          *RedisProperties_MinimumTlsVersion_STATUS   `json:"minimumTlsVersion,omitempty"`
	Name                       *string                                     `json:"name,omitempty"`
	Port                       *int                                        `json:"port,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS          `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *RedisProperties_ProvisioningState_STATUS   `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *RedisProperties_PublicNetworkAccess_STATUS `json:"publicNetworkAccess,omitempty"`
	RedisConfiguration         *RedisProperties_RedisConfiguration_STATUS  `json:"redisConfiguration,omitempty"`
	RedisVersion               *string                                     `json:"redisVersion,omitempty"`
	ReplicasPerMaster          *int                                        `json:"replicasPerMaster,omitempty"`
	ReplicasPerPrimary         *int                                        `json:"replicasPerPrimary,omitempty"`
	ShardCount                 *int                                        `json:"shardCount,omitempty"`
	Sku                        *Sku_STATUS                                 `json:"sku,omitempty"`
	SslPort                    *int                                        `json:"sslPort,omitempty"`
	StaticIP                   *string                                     `json:"staticIP,omitempty"`
	SubnetId                   *string                                     `json:"subnetId,omitempty"`
	Tags                       map[string]string                           `json:"tags,omitempty"`
	TenantSettings             map[string]string                           `json:"tenantSettings,omitempty"`
	Type                       *string                                     `json:"type,omitempty"`
	Zones                      []string                                    `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Redis_STATUS{}

// ConvertStatusFrom populates our Redis_STATUS from the provided source
func (redis *Redis_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20201201s.Redis_STATUS)
	if ok {
		// Populate our instance from source
		return redis.AssignProperties_From_Redis_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20201201s.Redis_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = redis.AssignProperties_From_Redis_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Redis_STATUS
func (redis *Redis_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20201201s.Redis_STATUS)
	if ok {
		// Populate destination from our instance
		return redis.AssignProperties_To_Redis_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20201201s.Redis_STATUS{}
	err := redis.AssignProperties_To_Redis_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Redis_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redis *Redis_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Redis_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redis *Redis_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Redis_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Redis_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘EnableNonSslPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNonSslPort != nil {
			enableNonSslPort := *typedInput.Properties.EnableNonSslPort
			redis.EnableNonSslPort = &enableNonSslPort
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			redis.HostName = &hostName
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		redis.Id = &id
	}

	// Set property ‘Instances’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Instances {
			var item1 RedisInstanceDetails_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			redis.Instances = append(redis.Instances, item1)
		}
	}

	// Set property ‘LinkedServers’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.LinkedServers {
			var item1 RedisLinkedServer_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			redis.LinkedServers = append(redis.LinkedServers, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		redis.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			redis.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		redis.Name = &name
	}

	// Set property ‘Port’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Port != nil {
			port := *typedInput.Properties.Port
			redis.Port = &port
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			redis.PrivateEndpointConnections = append(redis.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			redis.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			redis.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘RedisConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisConfiguration != nil {
			var redisConfiguration1 RedisProperties_RedisConfiguration_STATUS
			err := redisConfiguration1.PopulateFromARM(owner, *typedInput.Properties.RedisConfiguration)
			if err != nil {
				return err
			}
			redisConfiguration := redisConfiguration1
			redis.RedisConfiguration = &redisConfiguration
		}
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisVersion != nil {
			redisVersion := *typedInput.Properties.RedisVersion
			redis.RedisVersion = &redisVersion
		}
	}

	// Set property ‘ReplicasPerMaster’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerMaster != nil {
			replicasPerMaster := *typedInput.Properties.ReplicasPerMaster
			redis.ReplicasPerMaster = &replicasPerMaster
		}
	}

	// Set property ‘ReplicasPerPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerPrimary != nil {
			replicasPerPrimary := *typedInput.Properties.ReplicasPerPrimary
			redis.ReplicasPerPrimary = &replicasPerPrimary
		}
	}

	// Set property ‘ShardCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShardCount != nil {
			shardCount := *typedInput.Properties.ShardCount
			redis.ShardCount = &shardCount
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Sku != nil {
			var sku1 Sku_STATUS
			err := sku1.PopulateFromARM(owner, *typedInput.Properties.Sku)
			if err != nil {
				return err
			}
			sku := sku1
			redis.Sku = &sku
		}
	}

	// Set property ‘SslPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SslPort != nil {
			sslPort := *typedInput.Properties.SslPort
			redis.SslPort = &sslPort
		}
	}

	// Set property ‘StaticIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StaticIP != nil {
			staticIP := *typedInput.Properties.StaticIP
			redis.StaticIP = &staticIP
		}
	}

	// Set property ‘SubnetId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubnetId != nil {
			subnetId := *typedInput.Properties.SubnetId
			redis.SubnetId = &subnetId
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redis.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			redis.Tags[key] = value
		}
	}

	// Set property ‘TenantSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TenantSettings != nil {
			redis.TenantSettings = make(map[string]string, len(typedInput.Properties.TenantSettings))
			for key, value := range typedInput.Properties.TenantSettings {
				redis.TenantSettings[key] = value
			}
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		redis.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redis.Zones = append(redis.Zones, item)
	}

	// No error
	return nil
}

// AssignProperties_From_Redis_STATUS populates our Redis_STATUS from the provided source Redis_STATUS
func (redis *Redis_STATUS) AssignProperties_From_Redis_STATUS(source *alpha20201201s.Redis_STATUS) error {

	// Conditions
	redis.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// HostName
	redis.HostName = genruntime.ClonePointerToString(source.HostName)

	// Id
	redis.Id = genruntime.ClonePointerToString(source.Id)

	// Instances
	if source.Instances != nil {
		instanceList := make([]RedisInstanceDetails_STATUS, len(source.Instances))
		for instanceIndex, instanceItem := range source.Instances {
			// Shadow the loop variable to avoid aliasing
			instanceItem := instanceItem
			var instance RedisInstanceDetails_STATUS
			err := instance.AssignProperties_From_RedisInstanceDetails_STATUS(&instanceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_RedisInstanceDetails_STATUS() to populate field Instances")
			}
			instanceList[instanceIndex] = instance
		}
		redis.Instances = instanceList
	} else {
		redis.Instances = nil
	}

	// LinkedServers
	if source.LinkedServers != nil {
		linkedServerList := make([]RedisLinkedServer_STATUS, len(source.LinkedServers))
		for linkedServerIndex, linkedServerItem := range source.LinkedServers {
			// Shadow the loop variable to avoid aliasing
			linkedServerItem := linkedServerItem
			var linkedServer RedisLinkedServer_STATUS
			err := linkedServer.AssignProperties_From_RedisLinkedServer_STATUS(&linkedServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_RedisLinkedServer_STATUS() to populate field LinkedServers")
			}
			linkedServerList[linkedServerIndex] = linkedServer
		}
		redis.LinkedServers = linkedServerList
	} else {
		redis.LinkedServers = nil
	}

	// Location
	redis.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := RedisProperties_MinimumTlsVersion_STATUS(*source.MinimumTlsVersion)
		redis.MinimumTlsVersion = &minimumTlsVersion
	} else {
		redis.MinimumTlsVersion = nil
	}

	// Name
	redis.Name = genruntime.ClonePointerToString(source.Name)

	// Port
	redis.Port = genruntime.ClonePointerToInt(source.Port)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS
			err := privateEndpointConnection.AssignProperties_From_PrivateEndpointConnection_STATUS(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateEndpointConnection_STATUS() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		redis.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		redis.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := RedisProperties_ProvisioningState_STATUS(*source.ProvisioningState)
		redis.ProvisioningState = &provisioningState
	} else {
		redis.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RedisProperties_PublicNetworkAccess_STATUS(*source.PublicNetworkAccess)
		redis.PublicNetworkAccess = &publicNetworkAccess
	} else {
		redis.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	if source.RedisConfiguration != nil {
		var redisConfiguration RedisProperties_RedisConfiguration_STATUS
		err := redisConfiguration.AssignProperties_From_RedisProperties_RedisConfiguration_STATUS(source.RedisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RedisProperties_RedisConfiguration_STATUS() to populate field RedisConfiguration")
		}
		redis.RedisConfiguration = &redisConfiguration
	} else {
		redis.RedisConfiguration = nil
	}

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
		}
		redis.Sku = &sku
	} else {
		redis.Sku = nil
	}

	// SslPort
	redis.SslPort = genruntime.ClonePointerToInt(source.SslPort)

	// StaticIP
	redis.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetId
	redis.SubnetId = genruntime.ClonePointerToString(source.SubnetId)

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Type
	redis.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignProperties_To_Redis_STATUS populates the provided destination Redis_STATUS from our Redis_STATUS
func (redis *Redis_STATUS) AssignProperties_To_Redis_STATUS(destination *alpha20201201s.Redis_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(redis.Conditions)

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(redis.HostName)

	// Id
	destination.Id = genruntime.ClonePointerToString(redis.Id)

	// Instances
	if redis.Instances != nil {
		instanceList := make([]alpha20201201s.RedisInstanceDetails_STATUS, len(redis.Instances))
		for instanceIndex, instanceItem := range redis.Instances {
			// Shadow the loop variable to avoid aliasing
			instanceItem := instanceItem
			var instance alpha20201201s.RedisInstanceDetails_STATUS
			err := instanceItem.AssignProperties_To_RedisInstanceDetails_STATUS(&instance)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_RedisInstanceDetails_STATUS() to populate field Instances")
			}
			instanceList[instanceIndex] = instance
		}
		destination.Instances = instanceList
	} else {
		destination.Instances = nil
	}

	// LinkedServers
	if redis.LinkedServers != nil {
		linkedServerList := make([]alpha20201201s.RedisLinkedServer_STATUS, len(redis.LinkedServers))
		for linkedServerIndex, linkedServerItem := range redis.LinkedServers {
			// Shadow the loop variable to avoid aliasing
			linkedServerItem := linkedServerItem
			var linkedServer alpha20201201s.RedisLinkedServer_STATUS
			err := linkedServerItem.AssignProperties_To_RedisLinkedServer_STATUS(&linkedServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_RedisLinkedServer_STATUS() to populate field LinkedServers")
			}
			linkedServerList[linkedServerIndex] = linkedServer
		}
		destination.LinkedServers = linkedServerList
	} else {
		destination.LinkedServers = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redis.Location)

	// MinimumTlsVersion
	if redis.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*redis.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(redis.Name)

	// Port
	destination.Port = genruntime.ClonePointerToInt(redis.Port)

	// PrivateEndpointConnections
	if redis.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]alpha20201201s.PrivateEndpointConnection_STATUS, len(redis.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range redis.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection alpha20201201s.PrivateEndpointConnection_STATUS
			err := privateEndpointConnectionItem.AssignProperties_To_PrivateEndpointConnection_STATUS(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateEndpointConnection_STATUS() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if redis.ProvisioningState != nil {
		provisioningState := string(*redis.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if redis.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*redis.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	if redis.RedisConfiguration != nil {
		var redisConfiguration alpha20201201s.RedisProperties_RedisConfiguration_STATUS
		err := redis.RedisConfiguration.AssignProperties_To_RedisProperties_RedisConfiguration_STATUS(&redisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RedisProperties_RedisConfiguration_STATUS() to populate field RedisConfiguration")
		}
		destination.RedisConfiguration = &redisConfiguration
	} else {
		destination.RedisConfiguration = nil
	}

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	if redis.Sku != nil {
		var sku alpha20201201s.Sku_STATUS
		err := redis.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SslPort
	destination.SslPort = genruntime.ClonePointerToInt(redis.SslPort)

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(redis.StaticIP)

	// SubnetId
	destination.SubnetId = genruntime.ClonePointerToString(redis.SubnetId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Type
	destination.Type = genruntime.ClonePointerToString(redis.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpointConnection_STATUS. Use v1beta20201201.PrivateEndpointConnection_STATUS instead
type PrivateEndpointConnection_STATUS struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (connection *PrivateEndpointConnection_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (connection *PrivateEndpointConnection_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		connection.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_PrivateEndpointConnection_STATUS populates our PrivateEndpointConnection_STATUS from the provided source PrivateEndpointConnection_STATUS
func (connection *PrivateEndpointConnection_STATUS) AssignProperties_From_PrivateEndpointConnection_STATUS(source *alpha20201201s.PrivateEndpointConnection_STATUS) error {

	// Id
	connection.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_PrivateEndpointConnection_STATUS populates the provided destination PrivateEndpointConnection_STATUS from our PrivateEndpointConnection_STATUS
func (connection *PrivateEndpointConnection_STATUS) AssignProperties_To_PrivateEndpointConnection_STATUS(destination *alpha20201201s.PrivateEndpointConnection_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(connection.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RedisCreateProperties_MinimumTlsVersion. Use
// v1beta20201201.RedisCreateProperties_MinimumTlsVersion instead
// +kubebuilder:validation:Enum={"1.0","1.1","1.2"}
type RedisCreateProperties_MinimumTlsVersion string

const (
	RedisCreateProperties_MinimumTlsVersion_10 = RedisCreateProperties_MinimumTlsVersion("1.0")
	RedisCreateProperties_MinimumTlsVersion_11 = RedisCreateProperties_MinimumTlsVersion("1.1")
	RedisCreateProperties_MinimumTlsVersion_12 = RedisCreateProperties_MinimumTlsVersion("1.2")
)

// Deprecated version of RedisCreateProperties_PublicNetworkAccess. Use
// v1beta20201201.RedisCreateProperties_PublicNetworkAccess instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RedisCreateProperties_PublicNetworkAccess string

const (
	RedisCreateProperties_PublicNetworkAccess_Disabled = RedisCreateProperties_PublicNetworkAccess("Disabled")
	RedisCreateProperties_PublicNetworkAccess_Enabled  = RedisCreateProperties_PublicNetworkAccess("Enabled")
)

// Deprecated version of RedisCreateProperties_RedisConfiguration. Use v1beta20201201.RedisCreateProperties_RedisConfiguration instead
type RedisCreateProperties_RedisConfiguration struct {
	AdditionalProperties           map[string]string `json:"additionalProperties,omitempty"`
	AofBackupEnabled               *string           `json:"aof-backup-enabled,omitempty"`
	AofStorageConnectionString0    *string           `json:"aof-storage-connection-string-0,omitempty"`
	AofStorageConnectionString1    *string           `json:"aof-storage-connection-string-1,omitempty"`
	Authnotrequired                *string           `json:"authnotrequired,omitempty"`
	MaxfragmentationmemoryReserved *string           `json:"maxfragmentationmemory-reserved,omitempty"`
	MaxmemoryDelta                 *string           `json:"maxmemory-delta,omitempty"`
	MaxmemoryPolicy                *string           `json:"maxmemory-policy,omitempty"`
	MaxmemoryReserved              *string           `json:"maxmemory-reserved,omitempty"`
	RdbBackupEnabled               *string           `json:"rdb-backup-enabled,omitempty"`
	RdbBackupFrequency             *string           `json:"rdb-backup-frequency,omitempty"`
	RdbBackupMaxSnapshotCount      *string           `json:"rdb-backup-max-snapshot-count,omitempty"`
	RdbStorageConnectionString     *string           `json:"rdb-storage-connection-string,omitempty"`
}

var _ genruntime.ARMTransformer = &RedisCreateProperties_RedisConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *RedisCreateProperties_RedisConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	result := &RedisCreateProperties_RedisConfiguration_ARM{}

	// Set property ‘AdditionalProperties’:
	if configuration.AdditionalProperties != nil {
		result.AdditionalProperties = make(map[string]string, len(configuration.AdditionalProperties))
		for key, value := range configuration.AdditionalProperties {
			result.AdditionalProperties[key] = value
		}
	}

	// Set property ‘AofBackupEnabled’:
	if configuration.AofBackupEnabled != nil {
		aofBackupEnabled := *configuration.AofBackupEnabled
		result.AofBackupEnabled = &aofBackupEnabled
	}

	// Set property ‘AofStorageConnectionString0’:
	if configuration.AofStorageConnectionString0 != nil {
		aofStorageConnectionString0 := *configuration.AofStorageConnectionString0
		result.AofStorageConnectionString0 = &aofStorageConnectionString0
	}

	// Set property ‘AofStorageConnectionString1’:
	if configuration.AofStorageConnectionString1 != nil {
		aofStorageConnectionString1 := *configuration.AofStorageConnectionString1
		result.AofStorageConnectionString1 = &aofStorageConnectionString1
	}

	// Set property ‘Authnotrequired’:
	if configuration.Authnotrequired != nil {
		authnotrequired := *configuration.Authnotrequired
		result.Authnotrequired = &authnotrequired
	}

	// Set property ‘MaxfragmentationmemoryReserved’:
	if configuration.MaxfragmentationmemoryReserved != nil {
		maxfragmentationmemoryReserved := *configuration.MaxfragmentationmemoryReserved
		result.MaxfragmentationmemoryReserved = &maxfragmentationmemoryReserved
	}

	// Set property ‘MaxmemoryDelta’:
	if configuration.MaxmemoryDelta != nil {
		maxmemoryDelta := *configuration.MaxmemoryDelta
		result.MaxmemoryDelta = &maxmemoryDelta
	}

	// Set property ‘MaxmemoryPolicy’:
	if configuration.MaxmemoryPolicy != nil {
		maxmemoryPolicy := *configuration.MaxmemoryPolicy
		result.MaxmemoryPolicy = &maxmemoryPolicy
	}

	// Set property ‘MaxmemoryReserved’:
	if configuration.MaxmemoryReserved != nil {
		maxmemoryReserved := *configuration.MaxmemoryReserved
		result.MaxmemoryReserved = &maxmemoryReserved
	}

	// Set property ‘RdbBackupEnabled’:
	if configuration.RdbBackupEnabled != nil {
		rdbBackupEnabled := *configuration.RdbBackupEnabled
		result.RdbBackupEnabled = &rdbBackupEnabled
	}

	// Set property ‘RdbBackupFrequency’:
	if configuration.RdbBackupFrequency != nil {
		rdbBackupFrequency := *configuration.RdbBackupFrequency
		result.RdbBackupFrequency = &rdbBackupFrequency
	}

	// Set property ‘RdbBackupMaxSnapshotCount’:
	if configuration.RdbBackupMaxSnapshotCount != nil {
		rdbBackupMaxSnapshotCount := *configuration.RdbBackupMaxSnapshotCount
		result.RdbBackupMaxSnapshotCount = &rdbBackupMaxSnapshotCount
	}

	// Set property ‘RdbStorageConnectionString’:
	if configuration.RdbStorageConnectionString != nil {
		rdbStorageConnectionString := *configuration.RdbStorageConnectionString
		result.RdbStorageConnectionString = &rdbStorageConnectionString
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *RedisCreateProperties_RedisConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisCreateProperties_RedisConfiguration_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *RedisCreateProperties_RedisConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisCreateProperties_RedisConfiguration_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisCreateProperties_RedisConfiguration_ARM, got %T", armInput)
	}

	// Set property ‘AdditionalProperties’:
	if typedInput.AdditionalProperties != nil {
		configuration.AdditionalProperties = make(map[string]string, len(typedInput.AdditionalProperties))
		for key, value := range typedInput.AdditionalProperties {
			configuration.AdditionalProperties[key] = value
		}
	}

	// Set property ‘AofBackupEnabled’:
	if typedInput.AofBackupEnabled != nil {
		aofBackupEnabled := *typedInput.AofBackupEnabled
		configuration.AofBackupEnabled = &aofBackupEnabled
	}

	// Set property ‘AofStorageConnectionString0’:
	if typedInput.AofStorageConnectionString0 != nil {
		aofStorageConnectionString0 := *typedInput.AofStorageConnectionString0
		configuration.AofStorageConnectionString0 = &aofStorageConnectionString0
	}

	// Set property ‘AofStorageConnectionString1’:
	if typedInput.AofStorageConnectionString1 != nil {
		aofStorageConnectionString1 := *typedInput.AofStorageConnectionString1
		configuration.AofStorageConnectionString1 = &aofStorageConnectionString1
	}

	// Set property ‘Authnotrequired’:
	if typedInput.Authnotrequired != nil {
		authnotrequired := *typedInput.Authnotrequired
		configuration.Authnotrequired = &authnotrequired
	}

	// Set property ‘MaxfragmentationmemoryReserved’:
	if typedInput.MaxfragmentationmemoryReserved != nil {
		maxfragmentationmemoryReserved := *typedInput.MaxfragmentationmemoryReserved
		configuration.MaxfragmentationmemoryReserved = &maxfragmentationmemoryReserved
	}

	// Set property ‘MaxmemoryDelta’:
	if typedInput.MaxmemoryDelta != nil {
		maxmemoryDelta := *typedInput.MaxmemoryDelta
		configuration.MaxmemoryDelta = &maxmemoryDelta
	}

	// Set property ‘MaxmemoryPolicy’:
	if typedInput.MaxmemoryPolicy != nil {
		maxmemoryPolicy := *typedInput.MaxmemoryPolicy
		configuration.MaxmemoryPolicy = &maxmemoryPolicy
	}

	// Set property ‘MaxmemoryReserved’:
	if typedInput.MaxmemoryReserved != nil {
		maxmemoryReserved := *typedInput.MaxmemoryReserved
		configuration.MaxmemoryReserved = &maxmemoryReserved
	}

	// Set property ‘RdbBackupEnabled’:
	if typedInput.RdbBackupEnabled != nil {
		rdbBackupEnabled := *typedInput.RdbBackupEnabled
		configuration.RdbBackupEnabled = &rdbBackupEnabled
	}

	// Set property ‘RdbBackupFrequency’:
	if typedInput.RdbBackupFrequency != nil {
		rdbBackupFrequency := *typedInput.RdbBackupFrequency
		configuration.RdbBackupFrequency = &rdbBackupFrequency
	}

	// Set property ‘RdbBackupMaxSnapshotCount’:
	if typedInput.RdbBackupMaxSnapshotCount != nil {
		rdbBackupMaxSnapshotCount := *typedInput.RdbBackupMaxSnapshotCount
		configuration.RdbBackupMaxSnapshotCount = &rdbBackupMaxSnapshotCount
	}

	// Set property ‘RdbStorageConnectionString’:
	if typedInput.RdbStorageConnectionString != nil {
		rdbStorageConnectionString := *typedInput.RdbStorageConnectionString
		configuration.RdbStorageConnectionString = &rdbStorageConnectionString
	}

	// No error
	return nil
}

// AssignProperties_From_RedisCreateProperties_RedisConfiguration populates our RedisCreateProperties_RedisConfiguration from the provided source RedisCreateProperties_RedisConfiguration
func (configuration *RedisCreateProperties_RedisConfiguration) AssignProperties_From_RedisCreateProperties_RedisConfiguration(source *alpha20201201s.RedisCreateProperties_RedisConfiguration) error {

	// AdditionalProperties
	configuration.AdditionalProperties = genruntime.CloneMapOfStringToString(source.AdditionalProperties)

	// AofBackupEnabled
	configuration.AofBackupEnabled = genruntime.ClonePointerToString(source.AofBackupEnabled)

	// AofStorageConnectionString0
	configuration.AofStorageConnectionString0 = genruntime.ClonePointerToString(source.AofStorageConnectionString0)

	// AofStorageConnectionString1
	configuration.AofStorageConnectionString1 = genruntime.ClonePointerToString(source.AofStorageConnectionString1)

	// Authnotrequired
	configuration.Authnotrequired = genruntime.ClonePointerToString(source.Authnotrequired)

	// MaxfragmentationmemoryReserved
	configuration.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(source.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	configuration.MaxmemoryDelta = genruntime.ClonePointerToString(source.MaxmemoryDelta)

	// MaxmemoryPolicy
	configuration.MaxmemoryPolicy = genruntime.ClonePointerToString(source.MaxmemoryPolicy)

	// MaxmemoryReserved
	configuration.MaxmemoryReserved = genruntime.ClonePointerToString(source.MaxmemoryReserved)

	// RdbBackupEnabled
	configuration.RdbBackupEnabled = genruntime.ClonePointerToString(source.RdbBackupEnabled)

	// RdbBackupFrequency
	configuration.RdbBackupFrequency = genruntime.ClonePointerToString(source.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	configuration.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(source.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	configuration.RdbStorageConnectionString = genruntime.ClonePointerToString(source.RdbStorageConnectionString)

	// No error
	return nil
}

// AssignProperties_To_RedisCreateProperties_RedisConfiguration populates the provided destination RedisCreateProperties_RedisConfiguration from our RedisCreateProperties_RedisConfiguration
func (configuration *RedisCreateProperties_RedisConfiguration) AssignProperties_To_RedisCreateProperties_RedisConfiguration(destination *alpha20201201s.RedisCreateProperties_RedisConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalProperties
	destination.AdditionalProperties = genruntime.CloneMapOfStringToString(configuration.AdditionalProperties)

	// AofBackupEnabled
	destination.AofBackupEnabled = genruntime.ClonePointerToString(configuration.AofBackupEnabled)

	// AofStorageConnectionString0
	destination.AofStorageConnectionString0 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString0)

	// AofStorageConnectionString1
	destination.AofStorageConnectionString1 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString1)

	// Authnotrequired
	destination.Authnotrequired = genruntime.ClonePointerToString(configuration.Authnotrequired)

	// MaxfragmentationmemoryReserved
	destination.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(configuration.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	destination.MaxmemoryDelta = genruntime.ClonePointerToString(configuration.MaxmemoryDelta)

	// MaxmemoryPolicy
	destination.MaxmemoryPolicy = genruntime.ClonePointerToString(configuration.MaxmemoryPolicy)

	// MaxmemoryReserved
	destination.MaxmemoryReserved = genruntime.ClonePointerToString(configuration.MaxmemoryReserved)

	// RdbBackupEnabled
	destination.RdbBackupEnabled = genruntime.ClonePointerToString(configuration.RdbBackupEnabled)

	// RdbBackupFrequency
	destination.RdbBackupFrequency = genruntime.ClonePointerToString(configuration.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	destination.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(configuration.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	destination.RdbStorageConnectionString = genruntime.ClonePointerToString(configuration.RdbStorageConnectionString)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RedisInstanceDetails_STATUS. Use v1beta20201201.RedisInstanceDetails_STATUS instead
type RedisInstanceDetails_STATUS struct {
	IsMaster   *bool   `json:"isMaster,omitempty"`
	IsPrimary  *bool   `json:"isPrimary,omitempty"`
	NonSslPort *int    `json:"nonSslPort,omitempty"`
	ShardId    *int    `json:"shardId,omitempty"`
	SslPort    *int    `json:"sslPort,omitempty"`
	Zone       *string `json:"zone,omitempty"`
}

var _ genruntime.FromARMConverter = &RedisInstanceDetails_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (details *RedisInstanceDetails_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisInstanceDetails_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (details *RedisInstanceDetails_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisInstanceDetails_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisInstanceDetails_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘IsMaster’:
	if typedInput.IsMaster != nil {
		isMaster := *typedInput.IsMaster
		details.IsMaster = &isMaster
	}

	// Set property ‘IsPrimary’:
	if typedInput.IsPrimary != nil {
		isPrimary := *typedInput.IsPrimary
		details.IsPrimary = &isPrimary
	}

	// Set property ‘NonSslPort’:
	if typedInput.NonSslPort != nil {
		nonSslPort := *typedInput.NonSslPort
		details.NonSslPort = &nonSslPort
	}

	// Set property ‘ShardId’:
	if typedInput.ShardId != nil {
		shardId := *typedInput.ShardId
		details.ShardId = &shardId
	}

	// Set property ‘SslPort’:
	if typedInput.SslPort != nil {
		sslPort := *typedInput.SslPort
		details.SslPort = &sslPort
	}

	// Set property ‘Zone’:
	if typedInput.Zone != nil {
		zone := *typedInput.Zone
		details.Zone = &zone
	}

	// No error
	return nil
}

// AssignProperties_From_RedisInstanceDetails_STATUS populates our RedisInstanceDetails_STATUS from the provided source RedisInstanceDetails_STATUS
func (details *RedisInstanceDetails_STATUS) AssignProperties_From_RedisInstanceDetails_STATUS(source *alpha20201201s.RedisInstanceDetails_STATUS) error {

	// IsMaster
	if source.IsMaster != nil {
		isMaster := *source.IsMaster
		details.IsMaster = &isMaster
	} else {
		details.IsMaster = nil
	}

	// IsPrimary
	if source.IsPrimary != nil {
		isPrimary := *source.IsPrimary
		details.IsPrimary = &isPrimary
	} else {
		details.IsPrimary = nil
	}

	// NonSslPort
	details.NonSslPort = genruntime.ClonePointerToInt(source.NonSslPort)

	// ShardId
	details.ShardId = genruntime.ClonePointerToInt(source.ShardId)

	// SslPort
	details.SslPort = genruntime.ClonePointerToInt(source.SslPort)

	// Zone
	details.Zone = genruntime.ClonePointerToString(source.Zone)

	// No error
	return nil
}

// AssignProperties_To_RedisInstanceDetails_STATUS populates the provided destination RedisInstanceDetails_STATUS from our RedisInstanceDetails_STATUS
func (details *RedisInstanceDetails_STATUS) AssignProperties_To_RedisInstanceDetails_STATUS(destination *alpha20201201s.RedisInstanceDetails_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IsMaster
	if details.IsMaster != nil {
		isMaster := *details.IsMaster
		destination.IsMaster = &isMaster
	} else {
		destination.IsMaster = nil
	}

	// IsPrimary
	if details.IsPrimary != nil {
		isPrimary := *details.IsPrimary
		destination.IsPrimary = &isPrimary
	} else {
		destination.IsPrimary = nil
	}

	// NonSslPort
	destination.NonSslPort = genruntime.ClonePointerToInt(details.NonSslPort)

	// ShardId
	destination.ShardId = genruntime.ClonePointerToInt(details.ShardId)

	// SslPort
	destination.SslPort = genruntime.ClonePointerToInt(details.SslPort)

	// Zone
	destination.Zone = genruntime.ClonePointerToString(details.Zone)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RedisLinkedServer_STATUS. Use v1beta20201201.RedisLinkedServer_STATUS instead
type RedisLinkedServer_STATUS struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &RedisLinkedServer_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *RedisLinkedServer_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisLinkedServer_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *RedisLinkedServer_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisLinkedServer_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisLinkedServer_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		server.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_RedisLinkedServer_STATUS populates our RedisLinkedServer_STATUS from the provided source RedisLinkedServer_STATUS
func (server *RedisLinkedServer_STATUS) AssignProperties_From_RedisLinkedServer_STATUS(source *alpha20201201s.RedisLinkedServer_STATUS) error {

	// Id
	server.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_RedisLinkedServer_STATUS populates the provided destination RedisLinkedServer_STATUS from our RedisLinkedServer_STATUS
func (server *RedisLinkedServer_STATUS) AssignProperties_To_RedisLinkedServer_STATUS(destination *alpha20201201s.RedisLinkedServer_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(server.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type RedisOperatorSpec struct {
	// Secrets: configures where to place Azure generated secrets.
	Secrets *RedisOperatorSecrets `json:"secrets,omitempty"`
}

// AssignProperties_From_RedisOperatorSpec populates our RedisOperatorSpec from the provided source RedisOperatorSpec
func (operator *RedisOperatorSpec) AssignProperties_From_RedisOperatorSpec(source *alpha20201201s.RedisOperatorSpec) error {

	// Secrets
	if source.Secrets != nil {
		var secret RedisOperatorSecrets
		err := secret.AssignProperties_From_RedisOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RedisOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RedisOperatorSpec populates the provided destination RedisOperatorSpec from our RedisOperatorSpec
func (operator *RedisOperatorSpec) AssignProperties_To_RedisOperatorSpec(destination *alpha20201201s.RedisOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Secrets
	if operator.Secrets != nil {
		var secret alpha20201201s.RedisOperatorSecrets
		err := operator.Secrets.AssignProperties_To_RedisOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RedisOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RedisProperties_MinimumTlsVersion_STATUS. Use
// v1beta20201201.RedisProperties_MinimumTlsVersion_STATUS instead
type RedisProperties_MinimumTlsVersion_STATUS string

const (
	RedisProperties_MinimumTlsVersion_STATUS_10 = RedisProperties_MinimumTlsVersion_STATUS("1.0")
	RedisProperties_MinimumTlsVersion_STATUS_11 = RedisProperties_MinimumTlsVersion_STATUS("1.1")
	RedisProperties_MinimumTlsVersion_STATUS_12 = RedisProperties_MinimumTlsVersion_STATUS("1.2")
)

// Deprecated version of RedisProperties_ProvisioningState_STATUS. Use
// v1beta20201201.RedisProperties_ProvisioningState_STATUS instead
type RedisProperties_ProvisioningState_STATUS string

const (
	RedisProperties_ProvisioningState_STATUS_Creating               = RedisProperties_ProvisioningState_STATUS("Creating")
	RedisProperties_ProvisioningState_STATUS_Deleting               = RedisProperties_ProvisioningState_STATUS("Deleting")
	RedisProperties_ProvisioningState_STATUS_Disabled               = RedisProperties_ProvisioningState_STATUS("Disabled")
	RedisProperties_ProvisioningState_STATUS_Failed                 = RedisProperties_ProvisioningState_STATUS("Failed")
	RedisProperties_ProvisioningState_STATUS_Linking                = RedisProperties_ProvisioningState_STATUS("Linking")
	RedisProperties_ProvisioningState_STATUS_Provisioning           = RedisProperties_ProvisioningState_STATUS("Provisioning")
	RedisProperties_ProvisioningState_STATUS_RecoveringScaleFailure = RedisProperties_ProvisioningState_STATUS("RecoveringScaleFailure")
	RedisProperties_ProvisioningState_STATUS_Scaling                = RedisProperties_ProvisioningState_STATUS("Scaling")
	RedisProperties_ProvisioningState_STATUS_Succeeded              = RedisProperties_ProvisioningState_STATUS("Succeeded")
	RedisProperties_ProvisioningState_STATUS_Unlinking              = RedisProperties_ProvisioningState_STATUS("Unlinking")
	RedisProperties_ProvisioningState_STATUS_Unprovisioning         = RedisProperties_ProvisioningState_STATUS("Unprovisioning")
	RedisProperties_ProvisioningState_STATUS_Updating               = RedisProperties_ProvisioningState_STATUS("Updating")
)

// Deprecated version of RedisProperties_PublicNetworkAccess_STATUS. Use
// v1beta20201201.RedisProperties_PublicNetworkAccess_STATUS instead
type RedisProperties_PublicNetworkAccess_STATUS string

const (
	RedisProperties_PublicNetworkAccess_STATUS_Disabled = RedisProperties_PublicNetworkAccess_STATUS("Disabled")
	RedisProperties_PublicNetworkAccess_STATUS_Enabled  = RedisProperties_PublicNetworkAccess_STATUS("Enabled")
)

// Deprecated version of RedisProperties_RedisConfiguration_STATUS. Use v1beta20201201.RedisProperties_RedisConfiguration_STATUS instead
type RedisProperties_RedisConfiguration_STATUS struct {
	AdditionalProperties           map[string]string `json:"additionalProperties,omitempty"`
	AofBackupEnabled               *string           `json:"aof-backup-enabled,omitempty"`
	AofStorageConnectionString0    *string           `json:"aof-storage-connection-string-0,omitempty"`
	AofStorageConnectionString1    *string           `json:"aof-storage-connection-string-1,omitempty"`
	Authnotrequired                *string           `json:"authnotrequired,omitempty"`
	Maxclients                     *string           `json:"maxclients,omitempty"`
	MaxfragmentationmemoryReserved *string           `json:"maxfragmentationmemory-reserved,omitempty"`
	MaxmemoryDelta                 *string           `json:"maxmemory-delta,omitempty"`
	MaxmemoryPolicy                *string           `json:"maxmemory-policy,omitempty"`
	MaxmemoryReserved              *string           `json:"maxmemory-reserved,omitempty"`
	RdbBackupEnabled               *string           `json:"rdb-backup-enabled,omitempty"`
	RdbBackupFrequency             *string           `json:"rdb-backup-frequency,omitempty"`
	RdbBackupMaxSnapshotCount      *string           `json:"rdb-backup-max-snapshot-count,omitempty"`
	RdbStorageConnectionString     *string           `json:"rdb-storage-connection-string,omitempty"`
	ZonalConfiguration             *string           `json:"zonal-configuration,omitempty"`
}

var _ genruntime.FromARMConverter = &RedisProperties_RedisConfiguration_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *RedisProperties_RedisConfiguration_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisProperties_RedisConfiguration_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *RedisProperties_RedisConfiguration_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisProperties_RedisConfiguration_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisProperties_RedisConfiguration_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AdditionalProperties’:
	if typedInput.AdditionalProperties != nil {
		configuration.AdditionalProperties = make(map[string]string, len(typedInput.AdditionalProperties))
		for key, value := range typedInput.AdditionalProperties {
			configuration.AdditionalProperties[key] = value
		}
	}

	// Set property ‘AofBackupEnabled’:
	if typedInput.AofBackupEnabled != nil {
		aofBackupEnabled := *typedInput.AofBackupEnabled
		configuration.AofBackupEnabled = &aofBackupEnabled
	}

	// Set property ‘AofStorageConnectionString0’:
	if typedInput.AofStorageConnectionString0 != nil {
		aofStorageConnectionString0 := *typedInput.AofStorageConnectionString0
		configuration.AofStorageConnectionString0 = &aofStorageConnectionString0
	}

	// Set property ‘AofStorageConnectionString1’:
	if typedInput.AofStorageConnectionString1 != nil {
		aofStorageConnectionString1 := *typedInput.AofStorageConnectionString1
		configuration.AofStorageConnectionString1 = &aofStorageConnectionString1
	}

	// Set property ‘Authnotrequired’:
	if typedInput.Authnotrequired != nil {
		authnotrequired := *typedInput.Authnotrequired
		configuration.Authnotrequired = &authnotrequired
	}

	// Set property ‘Maxclients’:
	if typedInput.Maxclients != nil {
		maxclients := *typedInput.Maxclients
		configuration.Maxclients = &maxclients
	}

	// Set property ‘MaxfragmentationmemoryReserved’:
	if typedInput.MaxfragmentationmemoryReserved != nil {
		maxfragmentationmemoryReserved := *typedInput.MaxfragmentationmemoryReserved
		configuration.MaxfragmentationmemoryReserved = &maxfragmentationmemoryReserved
	}

	// Set property ‘MaxmemoryDelta’:
	if typedInput.MaxmemoryDelta != nil {
		maxmemoryDelta := *typedInput.MaxmemoryDelta
		configuration.MaxmemoryDelta = &maxmemoryDelta
	}

	// Set property ‘MaxmemoryPolicy’:
	if typedInput.MaxmemoryPolicy != nil {
		maxmemoryPolicy := *typedInput.MaxmemoryPolicy
		configuration.MaxmemoryPolicy = &maxmemoryPolicy
	}

	// Set property ‘MaxmemoryReserved’:
	if typedInput.MaxmemoryReserved != nil {
		maxmemoryReserved := *typedInput.MaxmemoryReserved
		configuration.MaxmemoryReserved = &maxmemoryReserved
	}

	// Set property ‘RdbBackupEnabled’:
	if typedInput.RdbBackupEnabled != nil {
		rdbBackupEnabled := *typedInput.RdbBackupEnabled
		configuration.RdbBackupEnabled = &rdbBackupEnabled
	}

	// Set property ‘RdbBackupFrequency’:
	if typedInput.RdbBackupFrequency != nil {
		rdbBackupFrequency := *typedInput.RdbBackupFrequency
		configuration.RdbBackupFrequency = &rdbBackupFrequency
	}

	// Set property ‘RdbBackupMaxSnapshotCount’:
	if typedInput.RdbBackupMaxSnapshotCount != nil {
		rdbBackupMaxSnapshotCount := *typedInput.RdbBackupMaxSnapshotCount
		configuration.RdbBackupMaxSnapshotCount = &rdbBackupMaxSnapshotCount
	}

	// Set property ‘RdbStorageConnectionString’:
	if typedInput.RdbStorageConnectionString != nil {
		rdbStorageConnectionString := *typedInput.RdbStorageConnectionString
		configuration.RdbStorageConnectionString = &rdbStorageConnectionString
	}

	// Set property ‘ZonalConfiguration’:
	if typedInput.ZonalConfiguration != nil {
		zonalConfiguration := *typedInput.ZonalConfiguration
		configuration.ZonalConfiguration = &zonalConfiguration
	}

	// No error
	return nil
}

// AssignProperties_From_RedisProperties_RedisConfiguration_STATUS populates our RedisProperties_RedisConfiguration_STATUS from the provided source RedisProperties_RedisConfiguration_STATUS
func (configuration *RedisProperties_RedisConfiguration_STATUS) AssignProperties_From_RedisProperties_RedisConfiguration_STATUS(source *alpha20201201s.RedisProperties_RedisConfiguration_STATUS) error {

	// AdditionalProperties
	configuration.AdditionalProperties = genruntime.CloneMapOfStringToString(source.AdditionalProperties)

	// AofBackupEnabled
	configuration.AofBackupEnabled = genruntime.ClonePointerToString(source.AofBackupEnabled)

	// AofStorageConnectionString0
	configuration.AofStorageConnectionString0 = genruntime.ClonePointerToString(source.AofStorageConnectionString0)

	// AofStorageConnectionString1
	configuration.AofStorageConnectionString1 = genruntime.ClonePointerToString(source.AofStorageConnectionString1)

	// Authnotrequired
	configuration.Authnotrequired = genruntime.ClonePointerToString(source.Authnotrequired)

	// Maxclients
	configuration.Maxclients = genruntime.ClonePointerToString(source.Maxclients)

	// MaxfragmentationmemoryReserved
	configuration.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(source.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	configuration.MaxmemoryDelta = genruntime.ClonePointerToString(source.MaxmemoryDelta)

	// MaxmemoryPolicy
	configuration.MaxmemoryPolicy = genruntime.ClonePointerToString(source.MaxmemoryPolicy)

	// MaxmemoryReserved
	configuration.MaxmemoryReserved = genruntime.ClonePointerToString(source.MaxmemoryReserved)

	// RdbBackupEnabled
	configuration.RdbBackupEnabled = genruntime.ClonePointerToString(source.RdbBackupEnabled)

	// RdbBackupFrequency
	configuration.RdbBackupFrequency = genruntime.ClonePointerToString(source.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	configuration.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(source.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	configuration.RdbStorageConnectionString = genruntime.ClonePointerToString(source.RdbStorageConnectionString)

	// ZonalConfiguration
	configuration.ZonalConfiguration = genruntime.ClonePointerToString(source.ZonalConfiguration)

	// No error
	return nil
}

// AssignProperties_To_RedisProperties_RedisConfiguration_STATUS populates the provided destination RedisProperties_RedisConfiguration_STATUS from our RedisProperties_RedisConfiguration_STATUS
func (configuration *RedisProperties_RedisConfiguration_STATUS) AssignProperties_To_RedisProperties_RedisConfiguration_STATUS(destination *alpha20201201s.RedisProperties_RedisConfiguration_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdditionalProperties
	destination.AdditionalProperties = genruntime.CloneMapOfStringToString(configuration.AdditionalProperties)

	// AofBackupEnabled
	destination.AofBackupEnabled = genruntime.ClonePointerToString(configuration.AofBackupEnabled)

	// AofStorageConnectionString0
	destination.AofStorageConnectionString0 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString0)

	// AofStorageConnectionString1
	destination.AofStorageConnectionString1 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString1)

	// Authnotrequired
	destination.Authnotrequired = genruntime.ClonePointerToString(configuration.Authnotrequired)

	// Maxclients
	destination.Maxclients = genruntime.ClonePointerToString(configuration.Maxclients)

	// MaxfragmentationmemoryReserved
	destination.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(configuration.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	destination.MaxmemoryDelta = genruntime.ClonePointerToString(configuration.MaxmemoryDelta)

	// MaxmemoryPolicy
	destination.MaxmemoryPolicy = genruntime.ClonePointerToString(configuration.MaxmemoryPolicy)

	// MaxmemoryReserved
	destination.MaxmemoryReserved = genruntime.ClonePointerToString(configuration.MaxmemoryReserved)

	// RdbBackupEnabled
	destination.RdbBackupEnabled = genruntime.ClonePointerToString(configuration.RdbBackupEnabled)

	// RdbBackupFrequency
	destination.RdbBackupFrequency = genruntime.ClonePointerToString(configuration.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	destination.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(configuration.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	destination.RdbStorageConnectionString = genruntime.ClonePointerToString(configuration.RdbStorageConnectionString)

	// ZonalConfiguration
	destination.ZonalConfiguration = genruntime.ClonePointerToString(configuration.ZonalConfiguration)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku. Use v1beta20201201.Sku instead
type Sku struct {
	// +kubebuilder:validation:Required
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	Family *Sku_Family `json:"family,omitempty"`

	// +kubebuilder:validation:Required
	Name *Sku_Name `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &Sku_ARM{}

	// Set property ‘Capacity’:
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Family’:
	if sku.Family != nil {
		family := *sku.Family
		result.Family = &family
	}

	// Set property ‘Name’:
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_ARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Family’:
	if typedInput.Family != nil {
		family := *typedInput.Family
		sku.Family = &family
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_Sku populates our Sku from the provided source Sku
func (sku *Sku) AssignProperties_From_Sku(source *alpha20201201s.Sku) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	if source.Family != nil {
		family := Sku_Family(*source.Family)
		sku.Family = &family
	} else {
		sku.Family = nil
	}

	// Name
	if source.Name != nil {
		name := Sku_Name(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Sku populates the provided destination Sku from our Sku
func (sku *Sku) AssignProperties_To_Sku(destination *alpha20201201s.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Family
	if sku.Family != nil {
		family := string(*sku.Family)
		destination.Family = &family
	} else {
		destination.Family = nil
	}

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku_STATUS. Use v1beta20201201.Sku_STATUS instead
type Sku_STATUS struct {
	Capacity *int               `json:"capacity,omitempty"`
	Family   *Sku_Family_STATUS `json:"family,omitempty"`
	Name     *Sku_Name_STATUS   `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Family’:
	if typedInput.Family != nil {
		family := *typedInput.Family
		sku.Family = &family
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_Sku_STATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignProperties_From_Sku_STATUS(source *alpha20201201s.Sku_STATUS) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	if source.Family != nil {
		family := Sku_Family_STATUS(*source.Family)
		sku.Family = &family
	} else {
		sku.Family = nil
	}

	// Name
	if source.Name != nil {
		name := Sku_Name_STATUS(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Sku_STATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignProperties_To_Sku_STATUS(destination *alpha20201201s.Sku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Family
	if sku.Family != nil {
		family := string(*sku.Family)
		destination.Family = &family
	} else {
		destination.Family = nil
	}

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RedisOperatorSecrets struct {
	// HostName: indicates where the HostName secret should be placed. If omitted, the secret will not be retrieved from Azure.
	HostName *genruntime.SecretDestination `json:"hostName,omitempty"`

	// Port: indicates where the Port secret should be placed. If omitted, the secret will not be retrieved from Azure.
	Port *genruntime.SecretDestination `json:"port,omitempty"`

	// PrimaryKey: indicates where the PrimaryKey secret should be placed. If omitted, the secret will not be retrieved from
	// Azure.
	PrimaryKey *genruntime.SecretDestination `json:"primaryKey,omitempty"`

	// SSLPort: indicates where the SSLPort secret should be placed. If omitted, the secret will not be retrieved from Azure.
	SSLPort *genruntime.SecretDestination `json:"sslPort,omitempty"`

	// SecondaryKey: indicates where the SecondaryKey secret should be placed. If omitted, the secret will not be retrieved
	// from Azure.
	SecondaryKey *genruntime.SecretDestination `json:"secondaryKey,omitempty"`
}

// AssignProperties_From_RedisOperatorSecrets populates our RedisOperatorSecrets from the provided source RedisOperatorSecrets
func (secrets *RedisOperatorSecrets) AssignProperties_From_RedisOperatorSecrets(source *alpha20201201s.RedisOperatorSecrets) error {

	// HostName
	if source.HostName != nil {
		hostName := source.HostName.Copy()
		secrets.HostName = &hostName
	} else {
		secrets.HostName = nil
	}

	// Port
	if source.Port != nil {
		port := source.Port.Copy()
		secrets.Port = &port
	} else {
		secrets.Port = nil
	}

	// PrimaryKey
	if source.PrimaryKey != nil {
		primaryKey := source.PrimaryKey.Copy()
		secrets.PrimaryKey = &primaryKey
	} else {
		secrets.PrimaryKey = nil
	}

	// SSLPort
	if source.SSLPort != nil {
		sslPort := source.SSLPort.Copy()
		secrets.SSLPort = &sslPort
	} else {
		secrets.SSLPort = nil
	}

	// SecondaryKey
	if source.SecondaryKey != nil {
		secondaryKey := source.SecondaryKey.Copy()
		secrets.SecondaryKey = &secondaryKey
	} else {
		secrets.SecondaryKey = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RedisOperatorSecrets populates the provided destination RedisOperatorSecrets from our RedisOperatorSecrets
func (secrets *RedisOperatorSecrets) AssignProperties_To_RedisOperatorSecrets(destination *alpha20201201s.RedisOperatorSecrets) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HostName
	if secrets.HostName != nil {
		hostName := secrets.HostName.Copy()
		destination.HostName = &hostName
	} else {
		destination.HostName = nil
	}

	// Port
	if secrets.Port != nil {
		port := secrets.Port.Copy()
		destination.Port = &port
	} else {
		destination.Port = nil
	}

	// PrimaryKey
	if secrets.PrimaryKey != nil {
		primaryKey := secrets.PrimaryKey.Copy()
		destination.PrimaryKey = &primaryKey
	} else {
		destination.PrimaryKey = nil
	}

	// SSLPort
	if secrets.SSLPort != nil {
		sslPort := secrets.SSLPort.Copy()
		destination.SSLPort = &sslPort
	} else {
		destination.SSLPort = nil
	}

	// SecondaryKey
	if secrets.SecondaryKey != nil {
		secondaryKey := secrets.SecondaryKey.Copy()
		destination.SecondaryKey = &secondaryKey
	} else {
		destination.SecondaryKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku_Family. Use v1beta20201201.Sku_Family instead
// +kubebuilder:validation:Enum={"C","P"}
type Sku_Family string

const (
	Sku_Family_C = Sku_Family("C")
	Sku_Family_P = Sku_Family("P")
)

// Deprecated version of Sku_Family_STATUS. Use v1beta20201201.Sku_Family_STATUS instead
type Sku_Family_STATUS string

const (
	Sku_Family_STATUS_C = Sku_Family_STATUS("C")
	Sku_Family_STATUS_P = Sku_Family_STATUS("P")
)

// Deprecated version of Sku_Name. Use v1beta20201201.Sku_Name instead
// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type Sku_Name string

const (
	Sku_Name_Basic    = Sku_Name("Basic")
	Sku_Name_Premium  = Sku_Name("Premium")
	Sku_Name_Standard = Sku_Name("Standard")
)

// Deprecated version of Sku_Name_STATUS. Use v1beta20201201.Sku_Name_STATUS instead
type Sku_Name_STATUS string

const (
	Sku_Name_STATUS_Basic    = Sku_Name_STATUS("Basic")
	Sku_Name_STATUS_Premium  = Sku_Name_STATUS("Premium")
	Sku_Name_STATUS_Standard = Sku_Name_STATUS("Standard")
)

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
