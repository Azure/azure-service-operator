// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20201201storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Cache.json#/resourceDefinitions/redis
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Redis_Spec           `json:"spec,omitempty"`
	Status            RedisResource_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Redis{}

// GetConditions returns the conditions of the resource
func (redis *Redis) GetConditions() conditions.Conditions {
	return redis.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redis *Redis) SetConditions(conditions conditions.Conditions) {
	redis.Status.Conditions = conditions
}

var _ conversion.Convertible = &Redis{}

// ConvertFrom populates our Redis from the provided hub Redis
func (redis *Redis) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20201201storage.Redis)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesFromRedis(source)
}

// ConvertTo populates the provided hub Redis from our Redis
func (redis *Redis) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20201201storage.Redis)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesToRedis(destination)
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20201201-redis,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redis,verbs=create;update,versions=v1alpha1api20201201,name=default.v1alpha1api20201201.redis.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Redis{}

// Default applies defaults to the Redis resource
func (redis *Redis) Default() {
	redis.defaultImpl()
	var temp interface{} = redis
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (redis *Redis) defaultAzureName() {
	if redis.Spec.AzureName == "" {
		redis.Spec.AzureName = redis.Name
	}
}

// defaultImpl applies the code generated defaults to the Redis resource
func (redis *Redis) defaultImpl() { redis.defaultAzureName() }

var _ genruntime.KubernetesResource = &Redis{}

// AzureName returns the Azure name of the resource
func (redis *Redis) AzureName() string {
	return redis.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (redis Redis) GetAPIVersion() string {
	return "2020-12-01"
}

// GetResourceKind returns the kind of the resource
func (redis *Redis) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (redis *Redis) GetSpec() genruntime.ConvertibleSpec {
	return &redis.Spec
}

// GetStatus returns the status of this resource
func (redis *Redis) GetStatus() genruntime.ConvertibleStatus {
	return &redis.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redis"
func (redis *Redis) GetType() string {
	return "Microsoft.Cache/redis"
}

// NewEmptyStatus returns a new empty (blank) status
func (redis *Redis) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RedisResource_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (redis *Redis) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redis.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redis.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redis *Redis) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RedisResource_Status); ok {
		redis.Status = *st
		return nil
	}

	// Convert status to required version
	var st RedisResource_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redis.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20201201-redis,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redis,verbs=create;update,versions=v1alpha1api20201201,name=validate.v1alpha1api20201201.redis.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Redis{}

// ValidateCreate validates the creation of the resource
func (redis *Redis) ValidateCreate() error {
	validations := redis.createValidations()
	var temp interface{} = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (redis *Redis) ValidateDelete() error {
	validations := redis.deleteValidations()
	var temp interface{} = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (redis *Redis) ValidateUpdate(old runtime.Object) error {
	validations := redis.updateValidations()
	var temp interface{} = redis
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (redis *Redis) createValidations() []func() error {
	return []func() error{redis.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (redis *Redis) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (redis *Redis) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return redis.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (redis *Redis) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&redis.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRedis populates our Redis from the provided source Redis
func (redis *Redis) AssignPropertiesFromRedis(source *v1alpha1api20201201storage.Redis) error {

	// ObjectMeta
	redis.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Redis_Spec
	err := spec.AssignPropertiesFromRedisSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromRedisSpec()")
	}
	redis.Spec = spec

	// Status
	var status RedisResource_Status
	err = status.AssignPropertiesFromRedisResourceStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromRedisResourceStatus()")
	}
	redis.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedis populates the provided destination Redis from our Redis
func (redis *Redis) AssignPropertiesToRedis(destination *v1alpha1api20201201storage.Redis) error {

	// ObjectMeta
	destination.ObjectMeta = *redis.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20201201storage.Redis_Spec
	err := redis.Spec.AssignPropertiesToRedisSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToRedisSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201201storage.RedisResource_Status
	err = redis.Status.AssignPropertiesToRedisResourceStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToRedisResourceStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redis *Redis) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redis.Spec.OriginalVersion(),
		Kind:    "Redis",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Cache.json#/resourceDefinitions/redis
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

type RedisResource_Status struct {
	//AccessKeys: The keys of the Redis cache - not set if this object is not the
	//response to Create or Update redis cache
	AccessKeys *RedisAccessKeys_Status `json:"accessKeys,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	//HostName: Redis host name.
	HostName *string `json:"hostName,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Instances: List of the Redis instances associated with the cache
	Instances []RedisInstanceDetails_Status `json:"instances,omitempty"`

	//LinkedServers: List of the linked servers associated with the cache
	LinkedServers []RedisLinkedServer_Status `json:"linkedServers,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *RedisPropertiesStatusMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//Port: Redis non-SSL port.
	Port *int `json:"port,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connection associated with
	//the specified redis cache
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Redis instance provisioning status.
	ProvisioningState *RedisPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'
	PublicNetworkAccess *RedisPropertiesStatusPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration map[string]string `json:"redisConfiguration,omitempty"`

	//RedisVersion: Redis version. Only major version will be used in PUT/PATCH
	//request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per primary.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	//ReplicasPerPrimary: The number of replicas to be created per primary.
	ReplicasPerPrimary *int `json:"replicasPerPrimary,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	//Sku: The SKU of the Redis cache to deploy.
	Sku *Sku_Status `json:"sku,omitempty"`

	//SslPort: Redis SSL port.
	SslPort *int `json:"sslPort,omitempty"`

	//StaticIP: Static IP address. Optionally, may be specified when deploying a Redis
	//cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	//SubnetId: The full resource ID of a subnet in a virtual network to deploy the
	//Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RedisResource_Status{}

// ConvertStatusFrom populates our RedisResource_Status from the provided source
func (redisResourceStatus *RedisResource_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201201storage.RedisResource_Status)
	if ok {
		// Populate our instance from source
		return redisResourceStatus.AssignPropertiesFromRedisResourceStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.RedisResource_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = redisResourceStatus.AssignPropertiesFromRedisResourceStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RedisResource_Status
func (redisResourceStatus *RedisResource_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201201storage.RedisResource_Status)
	if ok {
		// Populate destination from our instance
		return redisResourceStatus.AssignPropertiesToRedisResourceStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.RedisResource_Status{}
	err := redisResourceStatus.AssignPropertiesToRedisResourceStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RedisResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisResourceStatus *RedisResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisResourceStatus *RedisResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisResource_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessKeys’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessKeys != nil {
			var accessKeys1 RedisAccessKeys_Status
			err := accessKeys1.PopulateFromARM(owner, *typedInput.Properties.AccessKeys)
			if err != nil {
				return err
			}
			accessKeys := accessKeys1
			redisResourceStatus.AccessKeys = &accessKeys
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘EnableNonSslPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNonSslPort != nil {
			enableNonSslPort := *typedInput.Properties.EnableNonSslPort
			redisResourceStatus.EnableNonSslPort = &enableNonSslPort
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			redisResourceStatus.HostName = &hostName
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		redisResourceStatus.Id = &id
	}

	// Set property ‘Instances’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Instances {
			var item1 RedisInstanceDetails_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			redisResourceStatus.Instances = append(redisResourceStatus.Instances, item1)
		}
	}

	// Set property ‘LinkedServers’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.LinkedServers {
			var item1 RedisLinkedServer_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			redisResourceStatus.LinkedServers = append(redisResourceStatus.LinkedServers, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		redisResourceStatus.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			redisResourceStatus.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		redisResourceStatus.Name = &name
	}

	// Set property ‘Port’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Port != nil {
			port := *typedInput.Properties.Port
			redisResourceStatus.Port = &port
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			redisResourceStatus.PrivateEndpointConnections = append(redisResourceStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			redisResourceStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			redisResourceStatus.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘RedisConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisConfiguration != nil {
			redisResourceStatus.RedisConfiguration = make(map[string]string)
			for key, value := range typedInput.Properties.RedisConfiguration {
				redisResourceStatus.RedisConfiguration[key] = value
			}
		}
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisVersion != nil {
			redisVersion := *typedInput.Properties.RedisVersion
			redisResourceStatus.RedisVersion = &redisVersion
		}
	}

	// Set property ‘ReplicasPerMaster’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerMaster != nil {
			replicasPerMaster := *typedInput.Properties.ReplicasPerMaster
			redisResourceStatus.ReplicasPerMaster = &replicasPerMaster
		}
	}

	// Set property ‘ReplicasPerPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicasPerPrimary != nil {
			replicasPerPrimary := *typedInput.Properties.ReplicasPerPrimary
			redisResourceStatus.ReplicasPerPrimary = &replicasPerPrimary
		}
	}

	// Set property ‘ShardCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ShardCount != nil {
			shardCount := *typedInput.Properties.ShardCount
			redisResourceStatus.ShardCount = &shardCount
		}
	}

	// Set property ‘Sku’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp Sku_Status
		var temp1 Sku_Status
		err := temp1.PopulateFromARM(owner, typedInput.Properties.Sku)
		if err != nil {
			return err
		}
		temp = temp1
		redisResourceStatus.Sku = &temp
	}

	// Set property ‘SslPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SslPort != nil {
			sslPort := *typedInput.Properties.SslPort
			redisResourceStatus.SslPort = &sslPort
		}
	}

	// Set property ‘StaticIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StaticIP != nil {
			staticIP := *typedInput.Properties.StaticIP
			redisResourceStatus.StaticIP = &staticIP
		}
	}

	// Set property ‘SubnetId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubnetId != nil {
			subnetId := *typedInput.Properties.SubnetId
			redisResourceStatus.SubnetId = &subnetId
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redisResourceStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			redisResourceStatus.Tags[key] = value
		}
	}

	// Set property ‘TenantSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TenantSettings != nil {
			redisResourceStatus.TenantSettings = make(map[string]string)
			for key, value := range typedInput.Properties.TenantSettings {
				redisResourceStatus.TenantSettings[key] = value
			}
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		redisResourceStatus.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redisResourceStatus.Zones = append(redisResourceStatus.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisResourceStatus populates our RedisResource_Status from the provided source RedisResource_Status
func (redisResourceStatus *RedisResource_Status) AssignPropertiesFromRedisResourceStatus(source *v1alpha1api20201201storage.RedisResource_Status) error {

	// AccessKeys
	if source.AccessKeys != nil {
		var accessKey RedisAccessKeys_Status
		err := accessKey.AssignPropertiesFromRedisAccessKeysStatus(source.AccessKeys)
		if err != nil {
			return errors.Wrap(err, "populating AccessKeys from AccessKeys, calling AssignPropertiesFromRedisAccessKeysStatus()")
		}
		redisResourceStatus.AccessKeys = &accessKey
	} else {
		redisResourceStatus.AccessKeys = nil
	}

	// Conditions
	redisResourceStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redisResourceStatus.EnableNonSslPort = &enableNonSslPort
	} else {
		redisResourceStatus.EnableNonSslPort = nil
	}

	// HostName
	redisResourceStatus.HostName = genruntime.ClonePointerToString(source.HostName)

	// Id
	redisResourceStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Instances
	if source.Instances != nil {
		instanceList := make([]RedisInstanceDetails_Status, len(source.Instances))
		for instanceIndex, instanceItem := range source.Instances {
			// Shadow the loop variable to avoid aliasing
			instanceItem := instanceItem
			var instance RedisInstanceDetails_Status
			err := instance.AssignPropertiesFromRedisInstanceDetailsStatus(&instanceItem)
			if err != nil {
				return errors.Wrap(err, "populating Instances from Instances, calling AssignPropertiesFromRedisInstanceDetailsStatus()")
			}
			instanceList[instanceIndex] = instance
		}
		redisResourceStatus.Instances = instanceList
	} else {
		redisResourceStatus.Instances = nil
	}

	// LinkedServers
	if source.LinkedServers != nil {
		linkedServerList := make([]RedisLinkedServer_Status, len(source.LinkedServers))
		for linkedServerIndex, linkedServerItem := range source.LinkedServers {
			// Shadow the loop variable to avoid aliasing
			linkedServerItem := linkedServerItem
			var linkedServer RedisLinkedServer_Status
			err := linkedServer.AssignPropertiesFromRedisLinkedServerStatus(&linkedServerItem)
			if err != nil {
				return errors.Wrap(err, "populating LinkedServers from LinkedServers, calling AssignPropertiesFromRedisLinkedServerStatus()")
			}
			linkedServerList[linkedServerIndex] = linkedServer
		}
		redisResourceStatus.LinkedServers = linkedServerList
	} else {
		redisResourceStatus.LinkedServers = nil
	}

	// Location
	redisResourceStatus.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := RedisPropertiesStatusMinimumTlsVersion(*source.MinimumTlsVersion)
		redisResourceStatus.MinimumTlsVersion = &minimumTlsVersion
	} else {
		redisResourceStatus.MinimumTlsVersion = nil
	}

	// Name
	redisResourceStatus.Name = genruntime.ClonePointerToString(source.Name)

	// Port
	redisResourceStatus.Port = genruntime.ClonePointerToInt(source.Port)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		redisResourceStatus.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		redisResourceStatus.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := RedisPropertiesStatusProvisioningState(*source.ProvisioningState)
		redisResourceStatus.ProvisioningState = &provisioningState
	} else {
		redisResourceStatus.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RedisPropertiesStatusPublicNetworkAccess(*source.PublicNetworkAccess)
		redisResourceStatus.PublicNetworkAccess = &publicNetworkAccess
	} else {
		redisResourceStatus.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	redisResourceStatus.RedisConfiguration = genruntime.CloneMapOfStringToString(source.RedisConfiguration)

	// RedisVersion
	redisResourceStatus.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redisResourceStatus.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redisResourceStatus.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redisResourceStatus.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromSkuStatus()")
		}
		redisResourceStatus.Sku = &sku
	} else {
		redisResourceStatus.Sku = nil
	}

	// SslPort
	redisResourceStatus.SslPort = genruntime.ClonePointerToInt(source.SslPort)

	// StaticIP
	redisResourceStatus.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetId
	redisResourceStatus.SubnetId = genruntime.ClonePointerToString(source.SubnetId)

	// Tags
	redisResourceStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redisResourceStatus.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Type
	redisResourceStatus.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	redisResourceStatus.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToRedisResourceStatus populates the provided destination RedisResource_Status from our RedisResource_Status
func (redisResourceStatus *RedisResource_Status) AssignPropertiesToRedisResourceStatus(destination *v1alpha1api20201201storage.RedisResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessKeys
	if redisResourceStatus.AccessKeys != nil {
		var accessKey v1alpha1api20201201storage.RedisAccessKeys_Status
		err := (*redisResourceStatus.AccessKeys).AssignPropertiesToRedisAccessKeysStatus(&accessKey)
		if err != nil {
			return errors.Wrap(err, "populating AccessKeys from AccessKeys, calling AssignPropertiesToRedisAccessKeysStatus()")
		}
		destination.AccessKeys = &accessKey
	} else {
		destination.AccessKeys = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(redisResourceStatus.Conditions)

	// EnableNonSslPort
	if redisResourceStatus.EnableNonSslPort != nil {
		enableNonSslPort := *redisResourceStatus.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(redisResourceStatus.HostName)

	// Id
	destination.Id = genruntime.ClonePointerToString(redisResourceStatus.Id)

	// Instances
	if redisResourceStatus.Instances != nil {
		instanceList := make([]v1alpha1api20201201storage.RedisInstanceDetails_Status, len(redisResourceStatus.Instances))
		for instanceIndex, instanceItem := range redisResourceStatus.Instances {
			// Shadow the loop variable to avoid aliasing
			instanceItem := instanceItem
			var instance v1alpha1api20201201storage.RedisInstanceDetails_Status
			err := instanceItem.AssignPropertiesToRedisInstanceDetailsStatus(&instance)
			if err != nil {
				return errors.Wrap(err, "populating Instances from Instances, calling AssignPropertiesToRedisInstanceDetailsStatus()")
			}
			instanceList[instanceIndex] = instance
		}
		destination.Instances = instanceList
	} else {
		destination.Instances = nil
	}

	// LinkedServers
	if redisResourceStatus.LinkedServers != nil {
		linkedServerList := make([]v1alpha1api20201201storage.RedisLinkedServer_Status, len(redisResourceStatus.LinkedServers))
		for linkedServerIndex, linkedServerItem := range redisResourceStatus.LinkedServers {
			// Shadow the loop variable to avoid aliasing
			linkedServerItem := linkedServerItem
			var linkedServer v1alpha1api20201201storage.RedisLinkedServer_Status
			err := linkedServerItem.AssignPropertiesToRedisLinkedServerStatus(&linkedServer)
			if err != nil {
				return errors.Wrap(err, "populating LinkedServers from LinkedServers, calling AssignPropertiesToRedisLinkedServerStatus()")
			}
			linkedServerList[linkedServerIndex] = linkedServer
		}
		destination.LinkedServers = linkedServerList
	} else {
		destination.LinkedServers = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redisResourceStatus.Location)

	// MinimumTlsVersion
	if redisResourceStatus.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*redisResourceStatus.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(redisResourceStatus.Name)

	// Port
	destination.Port = genruntime.ClonePointerToInt(redisResourceStatus.Port)

	// PrivateEndpointConnections
	if redisResourceStatus.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20201201storage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(redisResourceStatus.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range redisResourceStatus.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20201201storage.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if redisResourceStatus.ProvisioningState != nil {
		provisioningState := string(*redisResourceStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if redisResourceStatus.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*redisResourceStatus.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	destination.RedisConfiguration = genruntime.CloneMapOfStringToString(redisResourceStatus.RedisConfiguration)

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redisResourceStatus.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redisResourceStatus.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redisResourceStatus.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redisResourceStatus.ShardCount)

	// Sku
	if redisResourceStatus.Sku != nil {
		var sku v1alpha1api20201201storage.Sku_Status
		err := (*redisResourceStatus.Sku).AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToSkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SslPort
	destination.SslPort = genruntime.ClonePointerToInt(redisResourceStatus.SslPort)

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(redisResourceStatus.StaticIP)

	// SubnetId
	destination.SubnetId = genruntime.ClonePointerToString(redisResourceStatus.SubnetId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redisResourceStatus.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redisResourceStatus.TenantSettings)

	// Type
	destination.Type = genruntime.ClonePointerToString(redisResourceStatus.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redisResourceStatus.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-12-01"}
type RedisSpecAPIVersion string

const RedisSpecAPIVersion20201201 = RedisSpecAPIVersion("2020-12-01")

type Redis_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is
	//enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	//Location: The geo-location where the resource lives
	Location string `json:"location,omitempty"`

	//MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or
	//higher) to connect (e,g, '1.0', '1.1', '1.2').
	MinimumTlsVersion *RedisCreatePropertiesMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicNetworkAccess: Whether or not public endpoint access is allowed for this
	//cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If
	//'Disabled', private endpoints are the exclusive access method. Default value is
	//'Enabled'.
	PublicNetworkAccess *RedisCreatePropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//RedisConfiguration: All Redis Settings. Few possible keys:
	//rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	//etc.
	RedisConfiguration map[string]string `json:"redisConfiguration,omitempty"`

	//RedisVersion: Redis version. Only major version will be used in PUT/PATCH
	//request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	//ReplicasPerMaster: The number of replicas to be created per primary.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	//ReplicasPerPrimary: The number of replicas to be created per primary.
	ReplicasPerPrimary *int `json:"replicasPerPrimary,omitempty"`

	//ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: SKU parameters supplied to the create Redis operation.
	Sku Sku `json:"sku"`

	// +kubebuilder:validation:Pattern="^\\d+\\.\\d+\\.\\d+\\.\\d+$"
	//StaticIP: Static IP address. Optionally, may be specified when deploying a Redis
	//cache inside an existing Azure Virtual Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	//SubnetReference: The full resource ID of a subnet in a virtual network to deploy
	//the Redis cache in. Example format:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetReference *genruntime.ResourceReference `armReference:"SubnetId" json:"subnetReference,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`

	//Zones: A list of availability zones denoting where the resource needs to come
	//from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &Redis_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (redisSpec *Redis_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if redisSpec == nil {
		return nil, nil
	}
	var result Redis_SpecARM

	// Set property ‘Location’:
	result.Location = redisSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if redisSpec.EnableNonSslPort != nil {
		enableNonSslPort := *redisSpec.EnableNonSslPort
		result.Properties.EnableNonSslPort = &enableNonSslPort
	}
	if redisSpec.MinimumTlsVersion != nil {
		minimumTlsVersion := *redisSpec.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if redisSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := *redisSpec.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if redisSpec.RedisConfiguration != nil {
		result.Properties.RedisConfiguration = make(map[string]string)
		for key, value := range redisSpec.RedisConfiguration {
			result.Properties.RedisConfiguration[key] = value
		}
	}
	if redisSpec.RedisVersion != nil {
		redisVersion := *redisSpec.RedisVersion
		result.Properties.RedisVersion = &redisVersion
	}
	if redisSpec.ReplicasPerMaster != nil {
		replicasPerMaster := *redisSpec.ReplicasPerMaster
		result.Properties.ReplicasPerMaster = &replicasPerMaster
	}
	if redisSpec.ReplicasPerPrimary != nil {
		replicasPerPrimary := *redisSpec.ReplicasPerPrimary
		result.Properties.ReplicasPerPrimary = &replicasPerPrimary
	}
	if redisSpec.ShardCount != nil {
		shardCount := *redisSpec.ShardCount
		result.Properties.ShardCount = &shardCount
	}
	skuARM, err := redisSpec.Sku.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Sku = skuARM.(SkuARM)
	if redisSpec.StaticIP != nil {
		staticIP := *redisSpec.StaticIP
		result.Properties.StaticIP = &staticIP
	}
	if redisSpec.SubnetReference != nil {
		subnetIdARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*redisSpec.SubnetReference)
		if err != nil {
			return nil, err
		}
		subnetId := subnetIdARMID
		result.Properties.SubnetId = &subnetId
	}
	if redisSpec.TenantSettings != nil {
		result.Properties.TenantSettings = make(map[string]string)
		for key, value := range redisSpec.TenantSettings {
			result.Properties.TenantSettings[key] = value
		}
	}

	// Set property ‘Tags’:
	if redisSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range redisSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range redisSpec.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisSpec *Redis_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Redis_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisSpec *Redis_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Redis_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Redis_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	redisSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘EnableNonSslPort’:
	// copying flattened property:
	if typedInput.Properties.EnableNonSslPort != nil {
		enableNonSslPort := *typedInput.Properties.EnableNonSslPort
		redisSpec.EnableNonSslPort = &enableNonSslPort
	}

	// Set property ‘Location’:
	redisSpec.Location = typedInput.Location

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties.MinimumTlsVersion != nil {
		minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
		redisSpec.MinimumTlsVersion = &minimumTlsVersion
	}

	// Set property ‘Owner’:
	redisSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		redisSpec.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘RedisConfiguration’:
	// copying flattened property:
	if typedInput.Properties.RedisConfiguration != nil {
		redisSpec.RedisConfiguration = make(map[string]string)
		for key, value := range typedInput.Properties.RedisConfiguration {
			redisSpec.RedisConfiguration[key] = value
		}
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties.RedisVersion != nil {
		redisVersion := *typedInput.Properties.RedisVersion
		redisSpec.RedisVersion = &redisVersion
	}

	// Set property ‘ReplicasPerMaster’:
	// copying flattened property:
	if typedInput.Properties.ReplicasPerMaster != nil {
		replicasPerMaster := *typedInput.Properties.ReplicasPerMaster
		redisSpec.ReplicasPerMaster = &replicasPerMaster
	}

	// Set property ‘ReplicasPerPrimary’:
	// copying flattened property:
	if typedInput.Properties.ReplicasPerPrimary != nil {
		replicasPerPrimary := *typedInput.Properties.ReplicasPerPrimary
		redisSpec.ReplicasPerPrimary = &replicasPerPrimary
	}

	// Set property ‘ShardCount’:
	// copying flattened property:
	if typedInput.Properties.ShardCount != nil {
		shardCount := *typedInput.Properties.ShardCount
		redisSpec.ShardCount = &shardCount
	}

	// Set property ‘Sku’:
	// copying flattened property:
	var sku Sku
	err := sku.PopulateFromARM(owner, typedInput.Properties.Sku)
	if err != nil {
		return err
	}
	redisSpec.Sku = sku

	// Set property ‘StaticIP’:
	// copying flattened property:
	if typedInput.Properties.StaticIP != nil {
		staticIP := *typedInput.Properties.StaticIP
		redisSpec.StaticIP = &staticIP
	}

	// no assignment for property ‘SubnetReference’

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redisSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			redisSpec.Tags[key] = value
		}
	}

	// Set property ‘TenantSettings’:
	// copying flattened property:
	if typedInput.Properties.TenantSettings != nil {
		redisSpec.TenantSettings = make(map[string]string)
		for key, value := range typedInput.Properties.TenantSettings {
			redisSpec.TenantSettings[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redisSpec.Zones = append(redisSpec.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Redis_Spec{}

// ConvertSpecFrom populates our Redis_Spec from the provided source
func (redisSpec *Redis_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201201storage.Redis_Spec)
	if ok {
		// Populate our instance from source
		return redisSpec.AssignPropertiesFromRedisSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201201storage.Redis_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redisSpec.AssignPropertiesFromRedisSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Redis_Spec
func (redisSpec *Redis_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201201storage.Redis_Spec)
	if ok {
		// Populate destination from our instance
		return redisSpec.AssignPropertiesToRedisSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201201storage.Redis_Spec{}
	err := redisSpec.AssignPropertiesToRedisSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedisSpec populates our Redis_Spec from the provided source Redis_Spec
func (redisSpec *Redis_Spec) AssignPropertiesFromRedisSpec(source *v1alpha1api20201201storage.Redis_Spec) error {

	// AzureName
	redisSpec.AzureName = source.AzureName

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redisSpec.EnableNonSslPort = &enableNonSslPort
	} else {
		redisSpec.EnableNonSslPort = nil
	}

	// Location
	redisSpec.Location = genruntime.GetOptionalStringValue(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := RedisCreatePropertiesMinimumTlsVersion(*source.MinimumTlsVersion)
		redisSpec.MinimumTlsVersion = &minimumTlsVersion
	} else {
		redisSpec.MinimumTlsVersion = nil
	}

	// Owner
	redisSpec.Owner = source.Owner.Copy()

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RedisCreatePropertiesPublicNetworkAccess(*source.PublicNetworkAccess)
		redisSpec.PublicNetworkAccess = &publicNetworkAccess
	} else {
		redisSpec.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	redisSpec.RedisConfiguration = genruntime.CloneMapOfStringToString(source.RedisConfiguration)

	// RedisVersion
	redisSpec.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redisSpec.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redisSpec.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redisSpec.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromSku()")
		}
		redisSpec.Sku = sku
	} else {
		redisSpec.Sku = Sku{}
	}

	// StaticIP
	if source.StaticIP != nil {
		staticIP := *source.StaticIP
		redisSpec.StaticIP = &staticIP
	} else {
		redisSpec.StaticIP = nil
	}

	// SubnetReference
	if source.SubnetReference != nil {
		subnetReference := source.SubnetReference.Copy()
		redisSpec.SubnetReference = &subnetReference
	} else {
		redisSpec.SubnetReference = nil
	}

	// Tags
	redisSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redisSpec.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redisSpec.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToRedisSpec populates the provided destination Redis_Spec from our Redis_Spec
func (redisSpec *Redis_Spec) AssignPropertiesToRedisSpec(destination *v1alpha1api20201201storage.Redis_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = redisSpec.AzureName

	// EnableNonSslPort
	if redisSpec.EnableNonSslPort != nil {
		enableNonSslPort := *redisSpec.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	location := redisSpec.Location
	destination.Location = &location

	// MinimumTlsVersion
	if redisSpec.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*redisSpec.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// OriginalVersion
	destination.OriginalVersion = redisSpec.OriginalVersion()

	// Owner
	destination.Owner = redisSpec.Owner.Copy()

	// PublicNetworkAccess
	if redisSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*redisSpec.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// RedisConfiguration
	destination.RedisConfiguration = genruntime.CloneMapOfStringToString(redisSpec.RedisConfiguration)

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redisSpec.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redisSpec.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redisSpec.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redisSpec.ShardCount)

	// Sku
	var sku v1alpha1api20201201storage.Sku
	err := redisSpec.Sku.AssignPropertiesToSku(&sku)
	if err != nil {
		return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToSku()")
	}
	destination.Sku = &sku

	// StaticIP
	if redisSpec.StaticIP != nil {
		staticIP := *redisSpec.StaticIP
		destination.StaticIP = &staticIP
	} else {
		destination.StaticIP = nil
	}

	// SubnetReference
	if redisSpec.SubnetReference != nil {
		subnetReference := redisSpec.SubnetReference.Copy()
		destination.SubnetReference = &subnetReference
	} else {
		destination.SubnetReference = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redisSpec.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redisSpec.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redisSpec.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (redisSpec *Redis_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (redisSpec *Redis_Spec) SetAzureName(azureName string) { redisSpec.AzureName = azureName }

type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v1alpha1api20201201storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	privateEndpointConnectionStatusSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v1alpha1api20201201storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(privateEndpointConnectionStatusSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RedisAccessKeys_Status struct {
	//PrimaryKey: The current primary key that clients can use to authenticate with
	//Redis cache.
	PrimaryKey *string `json:"primaryKey,omitempty"`

	//SecondaryKey: The current secondary key that clients can use to authenticate
	//with Redis cache.
	SecondaryKey *string `json:"secondaryKey,omitempty"`
}

var _ genruntime.FromARMConverter = &RedisAccessKeys_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisAccessKeysStatus *RedisAccessKeys_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisAccessKeys_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisAccessKeysStatus *RedisAccessKeys_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisAccessKeys_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisAccessKeys_StatusARM, got %T", armInput)
	}

	// Set property ‘PrimaryKey’:
	if typedInput.PrimaryKey != nil {
		primaryKey := *typedInput.PrimaryKey
		redisAccessKeysStatus.PrimaryKey = &primaryKey
	}

	// Set property ‘SecondaryKey’:
	if typedInput.SecondaryKey != nil {
		secondaryKey := *typedInput.SecondaryKey
		redisAccessKeysStatus.SecondaryKey = &secondaryKey
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisAccessKeysStatus populates our RedisAccessKeys_Status from the provided source RedisAccessKeys_Status
func (redisAccessKeysStatus *RedisAccessKeys_Status) AssignPropertiesFromRedisAccessKeysStatus(source *v1alpha1api20201201storage.RedisAccessKeys_Status) error {

	// PrimaryKey
	redisAccessKeysStatus.PrimaryKey = genruntime.ClonePointerToString(source.PrimaryKey)

	// SecondaryKey
	redisAccessKeysStatus.SecondaryKey = genruntime.ClonePointerToString(source.SecondaryKey)

	// No error
	return nil
}

// AssignPropertiesToRedisAccessKeysStatus populates the provided destination RedisAccessKeys_Status from our RedisAccessKeys_Status
func (redisAccessKeysStatus *RedisAccessKeys_Status) AssignPropertiesToRedisAccessKeysStatus(destination *v1alpha1api20201201storage.RedisAccessKeys_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrimaryKey
	destination.PrimaryKey = genruntime.ClonePointerToString(redisAccessKeysStatus.PrimaryKey)

	// SecondaryKey
	destination.SecondaryKey = genruntime.ClonePointerToString(redisAccessKeysStatus.SecondaryKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"1.0","1.1","1.2"}
type RedisCreatePropertiesMinimumTlsVersion string

const (
	RedisCreatePropertiesMinimumTlsVersion10 = RedisCreatePropertiesMinimumTlsVersion("1.0")
	RedisCreatePropertiesMinimumTlsVersion11 = RedisCreatePropertiesMinimumTlsVersion("1.1")
	RedisCreatePropertiesMinimumTlsVersion12 = RedisCreatePropertiesMinimumTlsVersion("1.2")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RedisCreatePropertiesPublicNetworkAccess string

const (
	RedisCreatePropertiesPublicNetworkAccessDisabled = RedisCreatePropertiesPublicNetworkAccess("Disabled")
	RedisCreatePropertiesPublicNetworkAccessEnabled  = RedisCreatePropertiesPublicNetworkAccess("Enabled")
)

type RedisInstanceDetails_Status struct {
	//IsMaster: Specifies whether the instance is a primary node.
	IsMaster *bool `json:"isMaster,omitempty"`

	//IsPrimary: Specifies whether the instance is a primary node.
	IsPrimary *bool `json:"isPrimary,omitempty"`

	//NonSslPort: If enableNonSslPort is true, provides Redis instance Non-SSL port.
	NonSslPort *int `json:"nonSslPort,omitempty"`

	//ShardId: If clustering is enabled, the Shard ID of Redis Instance
	ShardId *int `json:"shardId,omitempty"`

	//SslPort: Redis instance SSL port.
	SslPort *int `json:"sslPort,omitempty"`

	//Zone: If the Cache uses availability zones, specifies availability zone where
	//this instance is located.
	Zone *string `json:"zone,omitempty"`
}

var _ genruntime.FromARMConverter = &RedisInstanceDetails_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisInstanceDetailsStatus *RedisInstanceDetails_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisInstanceDetails_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisInstanceDetailsStatus *RedisInstanceDetails_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisInstanceDetails_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisInstanceDetails_StatusARM, got %T", armInput)
	}

	// Set property ‘IsMaster’:
	if typedInput.IsMaster != nil {
		isMaster := *typedInput.IsMaster
		redisInstanceDetailsStatus.IsMaster = &isMaster
	}

	// Set property ‘IsPrimary’:
	if typedInput.IsPrimary != nil {
		isPrimary := *typedInput.IsPrimary
		redisInstanceDetailsStatus.IsPrimary = &isPrimary
	}

	// Set property ‘NonSslPort’:
	if typedInput.NonSslPort != nil {
		nonSslPort := *typedInput.NonSslPort
		redisInstanceDetailsStatus.NonSslPort = &nonSslPort
	}

	// Set property ‘ShardId’:
	if typedInput.ShardId != nil {
		shardId := *typedInput.ShardId
		redisInstanceDetailsStatus.ShardId = &shardId
	}

	// Set property ‘SslPort’:
	if typedInput.SslPort != nil {
		sslPort := *typedInput.SslPort
		redisInstanceDetailsStatus.SslPort = &sslPort
	}

	// Set property ‘Zone’:
	if typedInput.Zone != nil {
		zone := *typedInput.Zone
		redisInstanceDetailsStatus.Zone = &zone
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisInstanceDetailsStatus populates our RedisInstanceDetails_Status from the provided source RedisInstanceDetails_Status
func (redisInstanceDetailsStatus *RedisInstanceDetails_Status) AssignPropertiesFromRedisInstanceDetailsStatus(source *v1alpha1api20201201storage.RedisInstanceDetails_Status) error {

	// IsMaster
	if source.IsMaster != nil {
		isMaster := *source.IsMaster
		redisInstanceDetailsStatus.IsMaster = &isMaster
	} else {
		redisInstanceDetailsStatus.IsMaster = nil
	}

	// IsPrimary
	if source.IsPrimary != nil {
		isPrimary := *source.IsPrimary
		redisInstanceDetailsStatus.IsPrimary = &isPrimary
	} else {
		redisInstanceDetailsStatus.IsPrimary = nil
	}

	// NonSslPort
	redisInstanceDetailsStatus.NonSslPort = genruntime.ClonePointerToInt(source.NonSslPort)

	// ShardId
	redisInstanceDetailsStatus.ShardId = genruntime.ClonePointerToInt(source.ShardId)

	// SslPort
	redisInstanceDetailsStatus.SslPort = genruntime.ClonePointerToInt(source.SslPort)

	// Zone
	redisInstanceDetailsStatus.Zone = genruntime.ClonePointerToString(source.Zone)

	// No error
	return nil
}

// AssignPropertiesToRedisInstanceDetailsStatus populates the provided destination RedisInstanceDetails_Status from our RedisInstanceDetails_Status
func (redisInstanceDetailsStatus *RedisInstanceDetails_Status) AssignPropertiesToRedisInstanceDetailsStatus(destination *v1alpha1api20201201storage.RedisInstanceDetails_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IsMaster
	if redisInstanceDetailsStatus.IsMaster != nil {
		isMaster := *redisInstanceDetailsStatus.IsMaster
		destination.IsMaster = &isMaster
	} else {
		destination.IsMaster = nil
	}

	// IsPrimary
	if redisInstanceDetailsStatus.IsPrimary != nil {
		isPrimary := *redisInstanceDetailsStatus.IsPrimary
		destination.IsPrimary = &isPrimary
	} else {
		destination.IsPrimary = nil
	}

	// NonSslPort
	destination.NonSslPort = genruntime.ClonePointerToInt(redisInstanceDetailsStatus.NonSslPort)

	// ShardId
	destination.ShardId = genruntime.ClonePointerToInt(redisInstanceDetailsStatus.ShardId)

	// SslPort
	destination.SslPort = genruntime.ClonePointerToInt(redisInstanceDetailsStatus.SslPort)

	// Zone
	destination.Zone = genruntime.ClonePointerToString(redisInstanceDetailsStatus.Zone)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RedisLinkedServer_Status struct {
	//Id: Linked server Id.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &RedisLinkedServer_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisLinkedServerStatus *RedisLinkedServer_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisLinkedServer_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisLinkedServerStatus *RedisLinkedServer_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisLinkedServer_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisLinkedServer_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		redisLinkedServerStatus.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromRedisLinkedServerStatus populates our RedisLinkedServer_Status from the provided source RedisLinkedServer_Status
func (redisLinkedServerStatus *RedisLinkedServer_Status) AssignPropertiesFromRedisLinkedServerStatus(source *v1alpha1api20201201storage.RedisLinkedServer_Status) error {

	// Id
	redisLinkedServerStatus.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToRedisLinkedServerStatus populates the provided destination RedisLinkedServer_Status from our RedisLinkedServer_Status
func (redisLinkedServerStatus *RedisLinkedServer_Status) AssignPropertiesToRedisLinkedServerStatus(destination *v1alpha1api20201201storage.RedisLinkedServer_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(redisLinkedServerStatus.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RedisPropertiesStatusMinimumTlsVersion string

const (
	RedisPropertiesStatusMinimumTlsVersion10 = RedisPropertiesStatusMinimumTlsVersion("1.0")
	RedisPropertiesStatusMinimumTlsVersion11 = RedisPropertiesStatusMinimumTlsVersion("1.1")
	RedisPropertiesStatusMinimumTlsVersion12 = RedisPropertiesStatusMinimumTlsVersion("1.2")
)

type RedisPropertiesStatusProvisioningState string

const (
	RedisPropertiesStatusProvisioningStateCreating               = RedisPropertiesStatusProvisioningState("Creating")
	RedisPropertiesStatusProvisioningStateDeleting               = RedisPropertiesStatusProvisioningState("Deleting")
	RedisPropertiesStatusProvisioningStateDisabled               = RedisPropertiesStatusProvisioningState("Disabled")
	RedisPropertiesStatusProvisioningStateFailed                 = RedisPropertiesStatusProvisioningState("Failed")
	RedisPropertiesStatusProvisioningStateLinking                = RedisPropertiesStatusProvisioningState("Linking")
	RedisPropertiesStatusProvisioningStateProvisioning           = RedisPropertiesStatusProvisioningState("Provisioning")
	RedisPropertiesStatusProvisioningStateRecoveringScaleFailure = RedisPropertiesStatusProvisioningState("RecoveringScaleFailure")
	RedisPropertiesStatusProvisioningStateScaling                = RedisPropertiesStatusProvisioningState("Scaling")
	RedisPropertiesStatusProvisioningStateSucceeded              = RedisPropertiesStatusProvisioningState("Succeeded")
	RedisPropertiesStatusProvisioningStateUnlinking              = RedisPropertiesStatusProvisioningState("Unlinking")
	RedisPropertiesStatusProvisioningStateUnprovisioning         = RedisPropertiesStatusProvisioningState("Unprovisioning")
	RedisPropertiesStatusProvisioningStateUpdating               = RedisPropertiesStatusProvisioningState("Updating")
)

type RedisPropertiesStatusPublicNetworkAccess string

const (
	RedisPropertiesStatusPublicNetworkAccessDisabled = RedisPropertiesStatusPublicNetworkAccess("Disabled")
	RedisPropertiesStatusPublicNetworkAccessEnabled  = RedisPropertiesStatusPublicNetworkAccess("Enabled")
)

//Generated from: https://schema.management.azure.com/schemas/2020-12-01/Microsoft.Cache.json#/definitions/Sku
type Sku struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family SkuFamily `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard,
	//Premium).
	Name SkuName `json:"name"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Capacity’:
	result.Capacity = sku.Capacity

	// Set property ‘Family’:
	result.Family = sku.Family

	// Set property ‘Name’:
	result.Name = sku.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	sku.Capacity = typedInput.Capacity

	// Set property ‘Family’:
	sku.Family = typedInput.Family

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20201201storage.Sku) error {

	// Capacity
	sku.Capacity = genruntime.GetOptionalIntValue(source.Capacity)

	// Family
	if source.Family != nil {
		sku.Family = SkuFamily(*source.Family)
	} else {
		sku.Family = ""
	}

	// Name
	if source.Name != nil {
		sku.Name = SkuName(*source.Name)
	} else {
		sku.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20201201storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	capacity := sku.Capacity
	destination.Capacity = &capacity

	// Family
	family := string(sku.Family)
	destination.Family = &family

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Capacity: The size of the Redis cache to deploy. Valid values: for C
	//(Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	//4).
	Capacity int `json:"capacity"`

	// +kubebuilder:validation:Required
	//Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P =
	//Premium).
	Family SkuStatusFamily `json:"family"`

	// +kubebuilder:validation:Required
	//Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name SkuStatusName `json:"name"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (skuStatus *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (skuStatus *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	skuStatus.Capacity = typedInput.Capacity

	// Set property ‘Family’:
	skuStatus.Family = typedInput.Family

	// Set property ‘Name’:
	skuStatus.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesFromSkuStatus(source *v1alpha1api20201201storage.Sku_Status) error {

	// Capacity
	skuStatus.Capacity = genruntime.GetOptionalIntValue(source.Capacity)

	// Family
	if source.Family != nil {
		skuStatus.Family = SkuStatusFamily(*source.Family)
	} else {
		skuStatus.Family = ""
	}

	// Name
	if source.Name != nil {
		skuStatus.Name = SkuStatusName(*source.Name)
	} else {
		skuStatus.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesToSkuStatus(destination *v1alpha1api20201201storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	capacity := skuStatus.Capacity
	destination.Capacity = &capacity

	// Family
	family := string(skuStatus.Family)
	destination.Family = &family

	// Name
	name := string(skuStatus.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"C","P"}
type SkuFamily string

const (
	SkuFamilyC = SkuFamily("C")
	SkuFamilyP = SkuFamily("P")
)

// +kubebuilder:validation:Enum={"Basic","Premium","Standard"}
type SkuName string

const (
	SkuNameBasic    = SkuName("Basic")
	SkuNamePremium  = SkuName("Premium")
	SkuNameStandard = SkuName("Standard")
)

type SkuStatusFamily string

const (
	SkuStatusFamilyC = SkuStatusFamily("C")
	SkuStatusFamilyP = SkuStatusFamily("P")
)

type SkuStatusName string

const (
	SkuStatusNameBasic    = SkuStatusName("Basic")
	SkuStatusNamePremium  = SkuStatusName("Premium")
	SkuStatusNameStandard = SkuStatusName("Standard")
)

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
