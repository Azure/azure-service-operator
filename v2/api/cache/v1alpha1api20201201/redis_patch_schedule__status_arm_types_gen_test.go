// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisPatchSchedule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchSchedule_StatusARM, RedisPatchSchedule_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchSchedule_StatusARM runs a test to see if a specific instance of RedisPatchSchedule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchSchedule_StatusARM(subject RedisPatchSchedule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedule_StatusARM instances for property testing - lazily instantiated by
//RedisPatchSchedule_StatusARMGenerator()
var redisPatchSchedule_statusARMGenerator gopter.Gen

// RedisPatchSchedule_StatusARMGenerator returns a generator of RedisPatchSchedule_StatusARM instances for property testing.
// We first initialize redisPatchSchedule_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisPatchSchedule_StatusARMGenerator() gopter.Gen {
	if redisPatchSchedule_statusARMGenerator != nil {
		return redisPatchSchedule_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedule_StatusARM(generators)
	redisPatchSchedule_statusARMGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchSchedule_StatusARM(generators)
	AddRelatedPropertyGeneratorsForRedisPatchSchedule_StatusARM(generators)
	redisPatchSchedule_statusARMGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule_StatusARM{}), generators)

	return redisPatchSchedule_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisPatchSchedule_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisPatchSchedule_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisPatchSchedule_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchSchedule_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ScheduleEntries_StatusARMGenerator())
}

func Test_ScheduleEntries_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntries_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntries_StatusARM, ScheduleEntries_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntries_StatusARM runs a test to see if a specific instance of ScheduleEntries_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntries_StatusARM(subject ScheduleEntries_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntries_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntries_StatusARM instances for property testing - lazily instantiated by
//ScheduleEntries_StatusARMGenerator()
var scheduleEntries_statusARMGenerator gopter.Gen

// ScheduleEntries_StatusARMGenerator returns a generator of ScheduleEntries_StatusARM instances for property testing.
func ScheduleEntries_StatusARMGenerator() gopter.Gen {
	if scheduleEntries_statusARMGenerator != nil {
		return scheduleEntries_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduleEntries_StatusARM(generators)
	scheduleEntries_statusARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntries_StatusARM{}), generators)

	return scheduleEntries_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduleEntries_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduleEntries_StatusARM(gens map[string]gopter.Gen) {
	gens["ScheduleEntries"] = gen.SliceOf(ScheduleEntry_StatusARMGenerator())
}

func Test_ScheduleEntry_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntry_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntry_StatusARM, ScheduleEntry_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntry_StatusARM runs a test to see if a specific instance of ScheduleEntry_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntry_StatusARM(subject ScheduleEntry_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntry_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntry_StatusARM instances for property testing - lazily instantiated by
//ScheduleEntry_StatusARMGenerator()
var scheduleEntry_statusARMGenerator gopter.Gen

// ScheduleEntry_StatusARMGenerator returns a generator of ScheduleEntry_StatusARM instances for property testing.
func ScheduleEntry_StatusARMGenerator() gopter.Gen {
	if scheduleEntry_statusARMGenerator != nil {
		return scheduleEntry_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleEntry_StatusARM(generators)
	scheduleEntry_statusARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntry_StatusARM{}), generators)

	return scheduleEntry_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForScheduleEntry_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleEntry_StatusARM(gens map[string]gopter.Gen) {
	gens["DayOfWeek"] = gen.AlphaString()
	gens["MaintenanceWindow"] = gen.PtrOf(gen.AlphaString())
	gens["StartHourUtc"] = gen.Int()
}
