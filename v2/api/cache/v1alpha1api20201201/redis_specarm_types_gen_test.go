// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Redis_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Redis_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisSPECARM, RedisSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisSPECARM runs a test to see if a specific instance of Redis_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisSPECARM(subject Redis_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Redis_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Redis_SPECARM instances for property testing - lazily instantiated by RedisSPECARMGenerator()
var redisSPECARMGenerator gopter.Gen

// RedisSPECARMGenerator returns a generator of Redis_SPECARM instances for property testing.
// We first initialize redisSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisSPECARMGenerator() gopter.Gen {
	if redisSPECARMGenerator != nil {
		return redisSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisSPECARM(generators)
	redisSPECARMGenerator = gen.Struct(reflect.TypeOf(Redis_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisSPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisSPECARM(generators)
	redisSPECARMGenerator = gen.Struct(reflect.TypeOf(Redis_SPECARM{}), generators)

	return redisSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RedisCreatePropertiesSpecARMGenerator()
}

func Test_RedisCreateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisCreateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisCreatePropertiesSpecARM, RedisCreatePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisCreatePropertiesSpecARM runs a test to see if a specific instance of RedisCreateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisCreatePropertiesSpecARM(subject RedisCreateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisCreateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisCreateProperties_SpecARM instances for property testing - lazily instantiated by
//RedisCreatePropertiesSpecARMGenerator()
var redisCreatePropertiesSpecARMGenerator gopter.Gen

// RedisCreatePropertiesSpecARMGenerator returns a generator of RedisCreateProperties_SpecARM instances for property testing.
// We first initialize redisCreatePropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisCreatePropertiesSpecARMGenerator() gopter.Gen {
	if redisCreatePropertiesSpecARMGenerator != nil {
		return redisCreatePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecARM(generators)
	redisCreatePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(RedisCreateProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForRedisCreatePropertiesSpecARM(generators)
	redisCreatePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(RedisCreateProperties_SpecARM{}), generators)

	return redisCreatePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["EnableNonSslPort"] = gen.PtrOf(gen.Bool())
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(RedisCreatePropertiesSpecMinimumTlsVersion10, RedisCreatePropertiesSpecMinimumTlsVersion11, RedisCreatePropertiesSpecMinimumTlsVersion12))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(RedisCreatePropertiesSpecPublicNetworkAccessDisabled, RedisCreatePropertiesSpecPublicNetworkAccessEnabled))
	gens["RedisVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicasPerMaster"] = gen.PtrOf(gen.Int())
	gens["ReplicasPerPrimary"] = gen.PtrOf(gen.Int())
	gens["ShardCount"] = gen.PtrOf(gen.Int())
	gens["StaticIP"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantSettings"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisCreatePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisCreatePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["RedisConfiguration"] = gen.PtrOf(RedisCreatePropertiesSpecRedisConfigurationARMGenerator())
	gens["Sku"] = SkuSpecARMGenerator()
}

func Test_RedisCreateProperties_Spec_RedisConfigurationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisCreateProperties_Spec_RedisConfigurationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisCreatePropertiesSpecRedisConfigurationARM, RedisCreatePropertiesSpecRedisConfigurationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisCreatePropertiesSpecRedisConfigurationARM runs a test to see if a specific instance of RedisCreateProperties_Spec_RedisConfigurationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisCreatePropertiesSpecRedisConfigurationARM(subject RedisCreateProperties_Spec_RedisConfigurationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisCreateProperties_Spec_RedisConfigurationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisCreateProperties_Spec_RedisConfigurationARM instances for property testing - lazily instantiated by
//RedisCreatePropertiesSpecRedisConfigurationARMGenerator()
var redisCreatePropertiesSpecRedisConfigurationARMGenerator gopter.Gen

// RedisCreatePropertiesSpecRedisConfigurationARMGenerator returns a generator of RedisCreateProperties_Spec_RedisConfigurationARM instances for property testing.
func RedisCreatePropertiesSpecRedisConfigurationARMGenerator() gopter.Gen {
	if redisCreatePropertiesSpecRedisConfigurationARMGenerator != nil {
		return redisCreatePropertiesSpecRedisConfigurationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecRedisConfigurationARM(generators)
	redisCreatePropertiesSpecRedisConfigurationARMGenerator = gen.Struct(reflect.TypeOf(RedisCreateProperties_Spec_RedisConfigurationARM{}), generators)

	return redisCreatePropertiesSpecRedisConfigurationARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecRedisConfigurationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisCreatePropertiesSpecRedisConfigurationARM(gens map[string]gopter.Gen) {
	gens["AofStorageConnectionString0"] = gen.PtrOf(gen.AlphaString())
	gens["AofStorageConnectionString1"] = gen.PtrOf(gen.AlphaString())
	gens["MaxfragmentationmemoryReserved"] = gen.PtrOf(gen.AlphaString())
	gens["MaxmemoryDelta"] = gen.PtrOf(gen.AlphaString())
	gens["MaxmemoryPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["MaxmemoryReserved"] = gen.PtrOf(gen.AlphaString())
	gens["RdbBackupEnabled"] = gen.PtrOf(gen.AlphaString())
	gens["RdbBackupFrequency"] = gen.PtrOf(gen.AlphaString())
	gens["RdbBackupMaxSnapshotCount"] = gen.PtrOf(gen.AlphaString())
	gens["RdbStorageConnectionString"] = gen.PtrOf(gen.AlphaString())
	gens["additionalProperties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_Sku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuSpecARM, SkuSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuSpecARM runs a test to see if a specific instance of Sku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuSpecARM(subject Sku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_SpecARM instances for property testing - lazily instantiated by SkuSpecARMGenerator()
var skuSpecARMGenerator gopter.Gen

// SkuSpecARMGenerator returns a generator of Sku_SpecARM instances for property testing.
func SkuSpecARMGenerator() gopter.Gen {
	if skuSpecARMGenerator != nil {
		return skuSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuSpecARM(generators)
	skuSpecARMGenerator = gen.Struct(reflect.TypeOf(Sku_SpecARM{}), generators)

	return skuSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuSpecARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.Int()
	gens["Family"] = gen.OneConstOf(SkuSpecFamilyC, SkuSpecFamilyP)
	gens["Name"] = gen.OneConstOf(SkuSpecNameBasic, SkuSpecNamePremium, SkuSpecNameStandard)
}
