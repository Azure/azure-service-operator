// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Redis_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Redis_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedis_SPECARM, Redis_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedis_SPECARM runs a test to see if a specific instance of Redis_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedis_SPECARM(subject Redis_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Redis_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Redis_SPECARM instances for property testing - lazily instantiated by Redis_SPECARMGenerator()
var redis_specarmGenerator gopter.Gen

// Redis_SPECARMGenerator returns a generator of Redis_SPECARM instances for property testing.
// We first initialize redis_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Redis_SPECARMGenerator() gopter.Gen {
	if redis_specarmGenerator != nil {
		return redis_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedis_SPECARM(generators)
	redis_specarmGenerator = gen.Struct(reflect.TypeOf(Redis_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedis_SPECARM(generators)
	AddRelatedPropertyGeneratorsForRedis_SPECARM(generators)
	redis_specarmGenerator = gen.Struct(reflect.TypeOf(Redis_SPECARM{}), generators)

	return redis_specarmGenerator
}

// AddIndependentPropertyGeneratorsForRedis_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedis_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedis_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedis_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = RedisProperties_SpecARMGenerator()
}

func Test_RedisProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisProperties_SpecARM, RedisProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisProperties_SpecARM runs a test to see if a specific instance of RedisProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisProperties_SpecARM(subject RedisProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisProperties_SpecARM instances for property testing - lazily instantiated by
//RedisProperties_SpecARMGenerator()
var redisProperties_specARMGenerator gopter.Gen

// RedisProperties_SpecARMGenerator returns a generator of RedisProperties_SpecARM instances for property testing.
// We first initialize redisProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisProperties_SpecARMGenerator() gopter.Gen {
	if redisProperties_specARMGenerator != nil {
		return redisProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisProperties_SpecARM(generators)
	redisProperties_specARMGenerator = gen.Struct(reflect.TypeOf(RedisProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRedisProperties_SpecARM(generators)
	redisProperties_specARMGenerator = gen.Struct(reflect.TypeOf(RedisProperties_SpecARM{}), generators)

	return redisProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["EnableNonSslPort"] = gen.PtrOf(gen.Bool())
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(RedisProperties_MinimumTlsVersion_Spec10, RedisProperties_MinimumTlsVersion_Spec11, RedisProperties_MinimumTlsVersion_Spec12))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(RedisProperties_PublicNetworkAccess_SpecDisabled, RedisProperties_PublicNetworkAccess_SpecEnabled))
	gens["RedisVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicasPerMaster"] = gen.PtrOf(gen.Int())
	gens["ReplicasPerPrimary"] = gen.PtrOf(gen.Int())
	gens["ShardCount"] = gen.PtrOf(gen.Int())
	gens["StaticIP"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantSettings"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["RedisConfiguration"] = gen.PtrOf(RedisProperties_RedisConfiguration_SpecARMGenerator())
	gens["Sku"] = Sku_SpecARMGenerator()
}

func Test_RedisProperties_RedisConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisProperties_RedisConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisProperties_RedisConfiguration_SpecARM, RedisProperties_RedisConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisProperties_RedisConfiguration_SpecARM runs a test to see if a specific instance of RedisProperties_RedisConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisProperties_RedisConfiguration_SpecARM(subject RedisProperties_RedisConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisProperties_RedisConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisProperties_RedisConfiguration_SpecARM instances for property testing - lazily instantiated by
//RedisProperties_RedisConfiguration_SpecARMGenerator()
var redisProperties_redisConfiguration_specARMGenerator gopter.Gen

// RedisProperties_RedisConfiguration_SpecARMGenerator returns a generator of RedisProperties_RedisConfiguration_SpecARM instances for property testing.
func RedisProperties_RedisConfiguration_SpecARMGenerator() gopter.Gen {
	if redisProperties_redisConfiguration_specARMGenerator != nil {
		return redisProperties_redisConfiguration_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisProperties_RedisConfiguration_SpecARM(generators)
	redisProperties_redisConfiguration_specARMGenerator = gen.Struct(reflect.TypeOf(RedisProperties_RedisConfiguration_SpecARM{}), generators)

	return redisProperties_redisConfiguration_specARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisProperties_RedisConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisProperties_RedisConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["AdditionalProperties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["AofStorageConnectionString0"] = gen.PtrOf(gen.AlphaString())
	gens["AofStorageConnectionString1"] = gen.PtrOf(gen.AlphaString())
	gens["MaxfragmentationmemoryReserved"] = gen.PtrOf(gen.AlphaString())
	gens["MaxmemoryDelta"] = gen.PtrOf(gen.AlphaString())
	gens["MaxmemoryPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["MaxmemoryReserved"] = gen.PtrOf(gen.AlphaString())
	gens["RdbBackupEnabled"] = gen.PtrOf(gen.AlphaString())
	gens["RdbBackupFrequency"] = gen.PtrOf(gen.AlphaString())
	gens["RdbBackupMaxSnapshotCount"] = gen.PtrOf(gen.AlphaString())
	gens["RdbStorageConnectionString"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_SpecARM, Sku_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_SpecARM runs a test to see if a specific instance of Sku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_SpecARM(subject Sku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_SpecARM instances for property testing - lazily instantiated by Sku_SpecARMGenerator()
var sku_specARMGenerator gopter.Gen

// Sku_SpecARMGenerator returns a generator of Sku_SpecARM instances for property testing.
func Sku_SpecARMGenerator() gopter.Gen {
	if sku_specARMGenerator != nil {
		return sku_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_SpecARM(generators)
	sku_specARMGenerator = gen.Struct(reflect.TypeOf(Sku_SpecARM{}), generators)

	return sku_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_SpecARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.Int()
	gens["Family"] = gen.OneConstOf(Sku_Family_SpecC, Sku_Family_SpecP)
	gens["Name"] = gen.OneConstOf(Sku_Name_SpecBasic, Sku_Name_SpecPremium, Sku_Name_SpecStandard)
}
