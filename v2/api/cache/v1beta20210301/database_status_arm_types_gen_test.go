// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Database_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Database_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabase_STATUSARM, Database_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabase_STATUSARM runs a test to see if a specific instance of Database_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabase_STATUSARM(subject Database_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Database_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Database_STATUSARM instances for property testing - lazily instantiated by Database_STATUSARMGenerator()
var database_STATUSARMGenerator gopter.Gen

// Database_STATUSARMGenerator returns a generator of Database_STATUSARM instances for property testing.
// We first initialize database_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Database_STATUSARMGenerator() gopter.Gen {
	if database_STATUSARMGenerator != nil {
		return database_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabase_STATUSARM(generators)
	database_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Database_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabase_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabase_STATUSARM(generators)
	database_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Database_STATUSARM{}), generators)

	return database_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabase_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabase_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabase_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabase_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabaseProperties_STATUSARMGenerator())
}

func Test_DatabaseProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseProperties_STATUSARM, DatabaseProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseProperties_STATUSARM runs a test to see if a specific instance of DatabaseProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseProperties_STATUSARM(subject DatabaseProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_STATUSARM instances for property testing - lazily instantiated by
// DatabaseProperties_STATUSARMGenerator()
var databaseProperties_STATUSARMGenerator gopter.Gen

// DatabaseProperties_STATUSARMGenerator returns a generator of DatabaseProperties_STATUSARM instances for property testing.
// We first initialize databaseProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseProperties_STATUSARMGenerator() gopter.Gen {
	if databaseProperties_STATUSARMGenerator != nil {
		return databaseProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_STATUSARM(generators)
	databaseProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseProperties_STATUSARM(generators)
	databaseProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_STATUSARM{}), generators)

	return databaseProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ClientProtocol"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_STATUS_ClientProtocol_Encrypted, DatabaseProperties_STATUS_ClientProtocol_Plaintext))
	gens["ClusteringPolicy"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_STATUS_ClusteringPolicy_EnterpriseCluster, DatabaseProperties_STATUS_ClusteringPolicy_OSSCluster))
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_STATUS_EvictionPolicy_AllKeysLFU,
		DatabaseProperties_STATUS_EvictionPolicy_AllKeysLRU,
		DatabaseProperties_STATUS_EvictionPolicy_AllKeysRandom,
		DatabaseProperties_STATUS_EvictionPolicy_NoEviction,
		DatabaseProperties_STATUS_EvictionPolicy_VolatileLFU,
		DatabaseProperties_STATUS_EvictionPolicy_VolatileLRU,
		DatabaseProperties_STATUS_EvictionPolicy_VolatileRandom,
		DatabaseProperties_STATUS_EvictionPolicy_VolatileTTL))
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Creating,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ResourceState_STATUS_CreateFailed,
		ResourceState_STATUS_Creating,
		ResourceState_STATUS_DeleteFailed,
		ResourceState_STATUS_Deleting,
		ResourceState_STATUS_DisableFailed,
		ResourceState_STATUS_Disabled,
		ResourceState_STATUS_Disabling,
		ResourceState_STATUS_EnableFailed,
		ResourceState_STATUS_Enabling,
		ResourceState_STATUS_Running,
		ResourceState_STATUS_UpdateFailed,
		ResourceState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForDatabaseProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Modules"] = gen.SliceOf(Module_STATUSARMGenerator())
	gens["Persistence"] = gen.PtrOf(Persistence_STATUSARMGenerator())
}

func Test_Module_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Module_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForModule_STATUSARM, Module_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForModule_STATUSARM runs a test to see if a specific instance of Module_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForModule_STATUSARM(subject Module_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Module_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Module_STATUSARM instances for property testing - lazily instantiated by Module_STATUSARMGenerator()
var module_STATUSARMGenerator gopter.Gen

// Module_STATUSARMGenerator returns a generator of Module_STATUSARM instances for property testing.
func Module_STATUSARMGenerator() gopter.Gen {
	if module_STATUSARMGenerator != nil {
		return module_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForModule_STATUSARM(generators)
	module_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Module_STATUSARM{}), generators)

	return module_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForModule_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForModule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Args"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_Persistence_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Persistence_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPersistence_STATUSARM, Persistence_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPersistence_STATUSARM runs a test to see if a specific instance of Persistence_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPersistence_STATUSARM(subject Persistence_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Persistence_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Persistence_STATUSARM instances for property testing - lazily instantiated by
// Persistence_STATUSARMGenerator()
var persistence_STATUSARMGenerator gopter.Gen

// Persistence_STATUSARMGenerator returns a generator of Persistence_STATUSARM instances for property testing.
func Persistence_STATUSARMGenerator() gopter.Gen {
	if persistence_STATUSARMGenerator != nil {
		return persistence_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPersistence_STATUSARM(generators)
	persistence_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Persistence_STATUSARM{}), generators)

	return persistence_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPersistence_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPersistence_STATUSARM(gens map[string]gopter.Gen) {
	gens["AofEnabled"] = gen.PtrOf(gen.Bool())
	gens["AofFrequency"] = gen.PtrOf(gen.OneConstOf(Persistence_STATUS_AofFrequency_1S, Persistence_STATUS_AofFrequency_Always))
	gens["RdbEnabled"] = gen.PtrOf(gen.Bool())
	gens["RdbFrequency"] = gen.PtrOf(gen.OneConstOf(Persistence_STATUS_RdbFrequency_12H, Persistence_STATUS_RdbFrequency_1H, Persistence_STATUS_RdbFrequency_6H))
}
