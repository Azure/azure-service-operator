// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisEnterprise_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisEnterprise_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisEnterpriseSpecARM, RedisEnterpriseSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisEnterpriseSpecARM runs a test to see if a specific instance of RedisEnterprise_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisEnterpriseSpecARM(subject RedisEnterprise_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisEnterprise_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisEnterprise_SpecARM instances for property testing - lazily instantiated by
// RedisEnterpriseSpecARMGenerator()
var redisEnterpriseSpecARMGenerator gopter.Gen

// RedisEnterpriseSpecARMGenerator returns a generator of RedisEnterprise_SpecARM instances for property testing.
// We first initialize redisEnterpriseSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisEnterpriseSpecARMGenerator() gopter.Gen {
	if redisEnterpriseSpecARMGenerator != nil {
		return redisEnterpriseSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterpriseSpecARM(generators)
	redisEnterpriseSpecARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterpriseSpecARM(generators)
	AddRelatedPropertyGeneratorsForRedisEnterpriseSpecARM(generators)
	redisEnterpriseSpecARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_SpecARM{}), generators)

	return redisEnterpriseSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisEnterpriseSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisEnterpriseSpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisEnterpriseSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisEnterpriseSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ClusterPropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuARMGenerator())
}

func Test_ClusterPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterPropertiesARM, ClusterPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterPropertiesARM runs a test to see if a specific instance of ClusterPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterPropertiesARM(subject ClusterPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterPropertiesARM instances for property testing - lazily instantiated by
// ClusterPropertiesARMGenerator()
var clusterPropertiesARMGenerator gopter.Gen

// ClusterPropertiesARMGenerator returns a generator of ClusterPropertiesARM instances for property testing.
func ClusterPropertiesARMGenerator() gopter.Gen {
	if clusterPropertiesARMGenerator != nil {
		return clusterPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterPropertiesARM(generators)
	clusterPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ClusterPropertiesARM{}), generators)

	return clusterPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterPropertiesARM(gens map[string]gopter.Gen) {
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(ClusterPropertiesMinimumTlsVersion_10, ClusterPropertiesMinimumTlsVersion_11, ClusterPropertiesMinimumTlsVersion_12))
}

func Test_SkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuARM, SkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuARM runs a test to see if a specific instance of SkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuARM(subject SkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuARM instances for property testing - lazily instantiated by SkuARMGenerator()
var skuARMGenerator gopter.Gen

// SkuARMGenerator returns a generator of SkuARM instances for property testing.
func SkuARMGenerator() gopter.Gen {
	if skuARMGenerator != nil {
		return skuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuARM(generators)
	skuARMGenerator = gen.Struct(reflect.TypeOf(SkuARM{}), generators)

	return skuARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		SkuName_EnterpriseE10,
		SkuName_EnterpriseE100,
		SkuName_EnterpriseE20,
		SkuName_EnterpriseE50,
		SkuName_EnterpriseFlashF1500,
		SkuName_EnterpriseFlashF300,
		SkuName_EnterpriseFlashF700))
}
