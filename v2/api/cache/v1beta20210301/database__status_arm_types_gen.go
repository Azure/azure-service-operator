// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210301

type Database_StatusARM struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: Other properties of the database.
	Properties *DatabaseProperties_StatusARM `json:"properties,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

type DatabaseProperties_StatusARM struct {
	// ClientProtocol: Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is
	// TLS-encrypted.
	ClientProtocol *DatabasePropertiesStatusClientProtocol `json:"clientProtocol,omitempty"`

	// ClusteringPolicy: Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy *DatabasePropertiesStatusClusteringPolicy `json:"clusteringPolicy,omitempty"`

	// EvictionPolicy: Redis eviction policy - default is VolatileLRU
	EvictionPolicy *DatabasePropertiesStatusEvictionPolicy `json:"evictionPolicy,omitempty"`

	// Modules: Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules []Module_StatusARM `json:"modules,omitempty"`

	// Persistence: Persistence settings
	Persistence *Persistence_StatusARM `json:"persistence,omitempty"`

	// Port: TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port *int `json:"port,omitempty"`

	// ProvisioningState: Current provisioning status of the database
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	// ResourceState: Current resource status of the database
	ResourceState *ResourceState_Status `json:"resourceState,omitempty"`
}

type DatabasePropertiesStatusClientProtocol string

const (
	DatabasePropertiesStatusClientProtocol_Encrypted = DatabasePropertiesStatusClientProtocol("Encrypted")
	DatabasePropertiesStatusClientProtocol_Plaintext = DatabasePropertiesStatusClientProtocol("Plaintext")
)

type DatabasePropertiesStatusClusteringPolicy string

const (
	DatabasePropertiesStatusClusteringPolicy_EnterpriseCluster = DatabasePropertiesStatusClusteringPolicy("EnterpriseCluster")
	DatabasePropertiesStatusClusteringPolicy_OSSCluster        = DatabasePropertiesStatusClusteringPolicy("OSSCluster")
)

type DatabasePropertiesStatusEvictionPolicy string

const (
	DatabasePropertiesStatusEvictionPolicy_AllKeysLFU     = DatabasePropertiesStatusEvictionPolicy("AllKeysLFU")
	DatabasePropertiesStatusEvictionPolicy_AllKeysLRU     = DatabasePropertiesStatusEvictionPolicy("AllKeysLRU")
	DatabasePropertiesStatusEvictionPolicy_AllKeysRandom  = DatabasePropertiesStatusEvictionPolicy("AllKeysRandom")
	DatabasePropertiesStatusEvictionPolicy_NoEviction     = DatabasePropertiesStatusEvictionPolicy("NoEviction")
	DatabasePropertiesStatusEvictionPolicy_VolatileLFU    = DatabasePropertiesStatusEvictionPolicy("VolatileLFU")
	DatabasePropertiesStatusEvictionPolicy_VolatileLRU    = DatabasePropertiesStatusEvictionPolicy("VolatileLRU")
	DatabasePropertiesStatusEvictionPolicy_VolatileRandom = DatabasePropertiesStatusEvictionPolicy("VolatileRandom")
	DatabasePropertiesStatusEvictionPolicy_VolatileTTL    = DatabasePropertiesStatusEvictionPolicy("VolatileTTL")
)

type Module_StatusARM struct {
	// Args: Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE 400'.
	Args *string `json:"args,omitempty"`

	// Name: The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name *string `json:"name,omitempty"`

	// Version: The version of the module, e.g. '1.0'.
	Version *string `json:"version,omitempty"`
}

type Persistence_StatusARM struct {
	// AofEnabled: Sets whether AOF is enabled.
	AofEnabled *bool `json:"aofEnabled,omitempty"`

	// AofFrequency: Sets the frequency at which data is written to disk.
	AofFrequency *PersistenceStatusAofFrequency `json:"aofFrequency,omitempty"`

	// RdbEnabled: Sets whether RDB is enabled.
	RdbEnabled *bool `json:"rdbEnabled,omitempty"`

	// RdbFrequency: Sets the frequency at which a snapshot of the database is created.
	RdbFrequency *PersistenceStatusRdbFrequency `json:"rdbFrequency,omitempty"`
}

type PersistenceStatusAofFrequency string

const (
	PersistenceStatusAofFrequency_1S     = PersistenceStatusAofFrequency("1s")
	PersistenceStatusAofFrequency_Always = PersistenceStatusAofFrequency("always")
)

type PersistenceStatusRdbFrequency string

const (
	PersistenceStatusRdbFrequency_12H = PersistenceStatusRdbFrequency("12h")
	PersistenceStatusRdbFrequency_1H  = PersistenceStatusRdbFrequency("1h")
	PersistenceStatusRdbFrequency_6H  = PersistenceStatusRdbFrequency("6h")
)
