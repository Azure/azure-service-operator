// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230401

type Redis_STATUS_ARM struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Identity: The identity of the resource.
	Identity *ManagedServiceIdentity_STATUS_ARM `json:"identity,omitempty"`

	// Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: Redis cache properties.
	Properties *RedisProperties_STATUS_ARM `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	// Zones: A list of availability zones denoting where the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity_STATUS_ARM struct {
	// PrincipalId: The service principal ID of the system assigned identity. This property will only be provided for a system
	// assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The tenant ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	TenantId *string `json:"tenantId,omitempty"`

	// Type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type                   *ManagedServiceIdentityType_STATUS_ARM     `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentity_STATUS_ARM `json:"userAssignedIdentities,omitempty"`
}

// Properties of the redis cache.
type RedisProperties_STATUS_ARM struct {
	// EnableNonSslPort: Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort *bool `json:"enableNonSslPort,omitempty"`

	// HostName: Redis host name.
	HostName *string `json:"hostName,omitempty"`

	// Instances: List of the Redis instances associated with the cache
	Instances []RedisInstanceDetails_STATUS_ARM `json:"instances,omitempty"`

	// LinkedServers: List of the linked servers associated with the cache
	LinkedServers []RedisLinkedServer_STATUS_ARM `json:"linkedServers,omitempty"`

	// MinimumTlsVersion: Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
	// '1.2')
	MinimumTlsVersion *RedisProperties_MinimumTlsVersion_STATUS_ARM `json:"minimumTlsVersion,omitempty"`

	// Port: Redis non-SSL port.
	Port *int `json:"port,omitempty"`

	// PrivateEndpointConnections: List of private endpoint connection associated with the specified redis cache
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_ARM `json:"privateEndpointConnections,omitempty"`

	// ProvisioningState: Redis instance provisioning status.
	ProvisioningState *RedisProperties_ProvisioningState_STATUS_ARM `json:"provisioningState,omitempty"`

	// PublicNetworkAccess: Whether or not public endpoint access is allowed for this cache.  Value is optional, but if passed
	// in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is
	// 'Enabled'. Note: This setting is important for caches with private endpoints. It has *no effect* on caches that are
	// joined to, or injected into, a virtual network subnet.
	PublicNetworkAccess *RedisProperties_PublicNetworkAccess_STATUS_ARM `json:"publicNetworkAccess,omitempty"`

	// RedisConfiguration: All Redis Settings. Few possible keys:
	// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	// etc.
	RedisConfiguration *RedisProperties_RedisConfiguration_STATUS_ARM `json:"redisConfiguration,omitempty"`

	// RedisVersion: Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest'
	// which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value
	// is 'latest'.
	RedisVersion *string `json:"redisVersion,omitempty"`

	// ReplicasPerMaster: The number of replicas to be created per primary.
	ReplicasPerMaster *int `json:"replicasPerMaster,omitempty"`

	// ReplicasPerPrimary: The number of replicas to be created per primary.
	ReplicasPerPrimary *int `json:"replicasPerPrimary,omitempty"`

	// ShardCount: The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `json:"shardCount,omitempty"`

	// Sku: The SKU of the Redis cache to deploy.
	Sku *Sku_STATUS_ARM `json:"sku,omitempty"`

	// SslPort: Redis SSL port.
	SslPort *int `json:"sslPort,omitempty"`

	// StaticIP: Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual
	// Network; auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	// SubnetId: The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `json:"subnetId,omitempty"`

	// TenantSettings: A dictionary of tenant settings
	TenantSettings map[string]string `json:"tenantSettings,omitempty"`
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType_STATUS_ARM string

const (
	ManagedServiceIdentityType_STATUS_ARM_None                       = ManagedServiceIdentityType_STATUS_ARM("None")
	ManagedServiceIdentityType_STATUS_ARM_SystemAssigned             = ManagedServiceIdentityType_STATUS_ARM("SystemAssigned")
	ManagedServiceIdentityType_STATUS_ARM_SystemAssignedUserAssigned = ManagedServiceIdentityType_STATUS_ARM("SystemAssigned, UserAssigned")
	ManagedServiceIdentityType_STATUS_ARM_UserAssigned               = ManagedServiceIdentityType_STATUS_ARM("UserAssigned")
)

// Mapping from string to ManagedServiceIdentityType_STATUS_ARM
var managedServiceIdentityType_STATUS_ARM_Values = map[string]ManagedServiceIdentityType_STATUS_ARM{
	"none":                         ManagedServiceIdentityType_STATUS_ARM_None,
	"systemassigned":               ManagedServiceIdentityType_STATUS_ARM_SystemAssigned,
	"systemassigned, userassigned": ManagedServiceIdentityType_STATUS_ARM_SystemAssignedUserAssigned,
	"userassigned":                 ManagedServiceIdentityType_STATUS_ARM_UserAssigned,
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnection_STATUS_ARM struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

// Details of single instance of redis.
type RedisInstanceDetails_STATUS_ARM struct {
	// IsMaster: Specifies whether the instance is a primary node.
	IsMaster *bool `json:"isMaster,omitempty"`

	// IsPrimary: Specifies whether the instance is a primary node.
	IsPrimary *bool `json:"isPrimary,omitempty"`

	// NonSslPort: If enableNonSslPort is true, provides Redis instance Non-SSL port.
	NonSslPort *int `json:"nonSslPort,omitempty"`

	// ShardId: If clustering is enabled, the Shard ID of Redis Instance
	ShardId *int `json:"shardId,omitempty"`

	// SslPort: Redis instance SSL port.
	SslPort *int `json:"sslPort,omitempty"`

	// Zone: If the Cache uses availability zones, specifies availability zone where this instance is located.
	Zone *string `json:"zone,omitempty"`
}

// Linked server Id
type RedisLinkedServer_STATUS_ARM struct {
	// Id: Linked server Id.
	Id *string `json:"id,omitempty"`
}

type RedisProperties_MinimumTlsVersion_STATUS_ARM string

const (
	RedisProperties_MinimumTlsVersion_STATUS_ARM_10 = RedisProperties_MinimumTlsVersion_STATUS_ARM("1.0")
	RedisProperties_MinimumTlsVersion_STATUS_ARM_11 = RedisProperties_MinimumTlsVersion_STATUS_ARM("1.1")
	RedisProperties_MinimumTlsVersion_STATUS_ARM_12 = RedisProperties_MinimumTlsVersion_STATUS_ARM("1.2")
)

// Mapping from string to RedisProperties_MinimumTlsVersion_STATUS_ARM
var redisProperties_MinimumTlsVersion_STATUS_ARM_Values = map[string]RedisProperties_MinimumTlsVersion_STATUS_ARM{
	"1.0": RedisProperties_MinimumTlsVersion_STATUS_ARM_10,
	"1.1": RedisProperties_MinimumTlsVersion_STATUS_ARM_11,
	"1.2": RedisProperties_MinimumTlsVersion_STATUS_ARM_12,
}

type RedisProperties_ProvisioningState_STATUS_ARM string

const (
	RedisProperties_ProvisioningState_STATUS_ARM_Creating               = RedisProperties_ProvisioningState_STATUS_ARM("Creating")
	RedisProperties_ProvisioningState_STATUS_ARM_Deleting               = RedisProperties_ProvisioningState_STATUS_ARM("Deleting")
	RedisProperties_ProvisioningState_STATUS_ARM_Disabled               = RedisProperties_ProvisioningState_STATUS_ARM("Disabled")
	RedisProperties_ProvisioningState_STATUS_ARM_Failed                 = RedisProperties_ProvisioningState_STATUS_ARM("Failed")
	RedisProperties_ProvisioningState_STATUS_ARM_Linking                = RedisProperties_ProvisioningState_STATUS_ARM("Linking")
	RedisProperties_ProvisioningState_STATUS_ARM_Provisioning           = RedisProperties_ProvisioningState_STATUS_ARM("Provisioning")
	RedisProperties_ProvisioningState_STATUS_ARM_RecoveringScaleFailure = RedisProperties_ProvisioningState_STATUS_ARM("RecoveringScaleFailure")
	RedisProperties_ProvisioningState_STATUS_ARM_Scaling                = RedisProperties_ProvisioningState_STATUS_ARM("Scaling")
	RedisProperties_ProvisioningState_STATUS_ARM_Succeeded              = RedisProperties_ProvisioningState_STATUS_ARM("Succeeded")
	RedisProperties_ProvisioningState_STATUS_ARM_Unlinking              = RedisProperties_ProvisioningState_STATUS_ARM("Unlinking")
	RedisProperties_ProvisioningState_STATUS_ARM_Unprovisioning         = RedisProperties_ProvisioningState_STATUS_ARM("Unprovisioning")
	RedisProperties_ProvisioningState_STATUS_ARM_Updating               = RedisProperties_ProvisioningState_STATUS_ARM("Updating")
)

// Mapping from string to RedisProperties_ProvisioningState_STATUS_ARM
var redisProperties_ProvisioningState_STATUS_ARM_Values = map[string]RedisProperties_ProvisioningState_STATUS_ARM{
	"creating":               RedisProperties_ProvisioningState_STATUS_ARM_Creating,
	"deleting":               RedisProperties_ProvisioningState_STATUS_ARM_Deleting,
	"disabled":               RedisProperties_ProvisioningState_STATUS_ARM_Disabled,
	"failed":                 RedisProperties_ProvisioningState_STATUS_ARM_Failed,
	"linking":                RedisProperties_ProvisioningState_STATUS_ARM_Linking,
	"provisioning":           RedisProperties_ProvisioningState_STATUS_ARM_Provisioning,
	"recoveringscalefailure": RedisProperties_ProvisioningState_STATUS_ARM_RecoveringScaleFailure,
	"scaling":                RedisProperties_ProvisioningState_STATUS_ARM_Scaling,
	"succeeded":              RedisProperties_ProvisioningState_STATUS_ARM_Succeeded,
	"unlinking":              RedisProperties_ProvisioningState_STATUS_ARM_Unlinking,
	"unprovisioning":         RedisProperties_ProvisioningState_STATUS_ARM_Unprovisioning,
	"updating":               RedisProperties_ProvisioningState_STATUS_ARM_Updating,
}

type RedisProperties_PublicNetworkAccess_STATUS_ARM string

const (
	RedisProperties_PublicNetworkAccess_STATUS_ARM_Disabled = RedisProperties_PublicNetworkAccess_STATUS_ARM("Disabled")
	RedisProperties_PublicNetworkAccess_STATUS_ARM_Enabled  = RedisProperties_PublicNetworkAccess_STATUS_ARM("Enabled")
)

// Mapping from string to RedisProperties_PublicNetworkAccess_STATUS_ARM
var redisProperties_PublicNetworkAccess_STATUS_ARM_Values = map[string]RedisProperties_PublicNetworkAccess_STATUS_ARM{
	"disabled": RedisProperties_PublicNetworkAccess_STATUS_ARM_Disabled,
	"enabled":  RedisProperties_PublicNetworkAccess_STATUS_ARM_Enabled,
}

type RedisProperties_RedisConfiguration_STATUS_ARM struct {
	// AofBackupEnabled: Specifies whether the aof backup is enabled
	AofBackupEnabled *string `json:"aof-backup-enabled,omitempty"`

	// AofStorageConnectionString0: First storage account connection string
	AofStorageConnectionString0 *string `json:"aof-storage-connection-string-0,omitempty"`

	// AofStorageConnectionString1: Second storage account connection string
	AofStorageConnectionString1 *string `json:"aof-storage-connection-string-1,omitempty"`

	// Authnotrequired: Specifies whether the authentication is disabled. Setting this property is highly discouraged from
	// security point of view.
	Authnotrequired *string `json:"authnotrequired,omitempty"`

	// Maxclients: The max clients config
	Maxclients *string `json:"maxclients,omitempty"`

	// MaxfragmentationmemoryReserved: Value in megabytes reserved for fragmentation per shard
	MaxfragmentationmemoryReserved *string `json:"maxfragmentationmemory-reserved,omitempty"`

	// MaxmemoryDelta: Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryDelta *string `json:"maxmemory-delta,omitempty"`

	// MaxmemoryPolicy: The eviction strategy used when your data won't fit within its memory limit.
	MaxmemoryPolicy *string `json:"maxmemory-policy,omitempty"`

	// MaxmemoryReserved: Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryReserved *string `json:"maxmemory-reserved,omitempty"`

	// PreferredDataArchiveAuthMethod: Preferred auth method to communicate to storage account used for data archive, specify
	// SAS or ManagedIdentity, default value is SAS
	PreferredDataArchiveAuthMethod *string `json:"preferred-data-archive-auth-method,omitempty"`

	// PreferredDataPersistenceAuthMethod: Preferred auth method to communicate to storage account used for data persistence,
	// specify SAS or ManagedIdentity, default value is SAS
	PreferredDataPersistenceAuthMethod *string `json:"preferred-data-persistence-auth-method,omitempty"`

	// RdbBackupEnabled: Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `json:"rdb-backup-enabled,omitempty"`

	// RdbBackupFrequency: Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720,
	// 1440)
	RdbBackupFrequency *string `json:"rdb-backup-frequency,omitempty"`

	// RdbBackupMaxSnapshotCount: Specifies the maximum number of snapshots for rdb backup
	RdbBackupMaxSnapshotCount *string `json:"rdb-backup-max-snapshot-count,omitempty"`

	// RdbStorageConnectionString: The storage account connection string for storing rdb file
	RdbStorageConnectionString *string `json:"rdb-storage-connection-string,omitempty"`

	// StorageSubscriptionId: SubscriptionId of the storage account for persistence (aof/rdb) using ManagedIdentity.
	StorageSubscriptionId *string `json:"storage-subscription-id,omitempty"`

	// ZonalConfiguration: Zonal Configuration
	ZonalConfiguration *string `json:"zonal-configuration,omitempty"`
}

// SKU parameters supplied to the create Redis operation.
type Sku_STATUS_ARM struct {
	// Capacity: The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for
	// P (Premium) family (1, 2, 3, 4).
	Capacity *int `json:"capacity,omitempty"`

	// Family: The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family *Sku_Family_STATUS_ARM `json:"family,omitempty"`

	// Name: The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name *Sku_Name_STATUS_ARM `json:"name,omitempty"`
}

// User assigned identity properties
type UserAssignedIdentity_STATUS_ARM struct {
	// ClientId: The client ID of the assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: The principal ID of the assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

type Sku_Family_STATUS_ARM string

const (
	Sku_Family_STATUS_ARM_C = Sku_Family_STATUS_ARM("C")
	Sku_Family_STATUS_ARM_P = Sku_Family_STATUS_ARM("P")
)

// Mapping from string to Sku_Family_STATUS_ARM
var sku_Family_STATUS_ARM_Values = map[string]Sku_Family_STATUS_ARM{
	"c": Sku_Family_STATUS_ARM_C,
	"p": Sku_Family_STATUS_ARM_P,
}

type Sku_Name_STATUS_ARM string

const (
	Sku_Name_STATUS_ARM_Basic    = Sku_Name_STATUS_ARM("Basic")
	Sku_Name_STATUS_ARM_Premium  = Sku_Name_STATUS_ARM("Premium")
	Sku_Name_STATUS_ARM_Standard = Sku_Name_STATUS_ARM("Standard")
)

// Mapping from string to Sku_Name_STATUS_ARM
var sku_Name_STATUS_ARM_Values = map[string]Sku_Name_STATUS_ARM{
	"basic":    Sku_Name_STATUS_ARM_Basic,
	"premium":  Sku_Name_STATUS_ARM_Premium,
	"standard": Sku_Name_STATUS_ARM_Standard,
}
