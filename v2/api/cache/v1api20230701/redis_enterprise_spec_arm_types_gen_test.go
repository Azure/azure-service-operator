// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ClusterProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterProperties_ARM, ClusterProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterProperties_ARM runs a test to see if a specific instance of ClusterProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterProperties_ARM(subject ClusterProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterProperties_ARM instances for property testing - lazily instantiated by
// ClusterProperties_ARMGenerator()
var clusterProperties_ARMGenerator gopter.Gen

// ClusterProperties_ARMGenerator returns a generator of ClusterProperties_ARM instances for property testing.
func ClusterProperties_ARMGenerator() gopter.Gen {
	if clusterProperties_ARMGenerator != nil {
		return clusterProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_ARM(generators)
	clusterProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_ARM{}), generators)

	return clusterProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterProperties_ARM(gens map[string]gopter.Gen) {
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_MinimumTlsVersion_10, ClusterProperties_MinimumTlsVersion_11, ClusterProperties_MinimumTlsVersion_12))
}

func Test_RedisEnterprise_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisEnterprise_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisEnterprise_Spec_ARM, RedisEnterprise_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisEnterprise_Spec_ARM runs a test to see if a specific instance of RedisEnterprise_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisEnterprise_Spec_ARM(subject RedisEnterprise_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisEnterprise_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisEnterprise_Spec_ARM instances for property testing - lazily instantiated by
// RedisEnterprise_Spec_ARMGenerator()
var redisEnterprise_Spec_ARMGenerator gopter.Gen

// RedisEnterprise_Spec_ARMGenerator returns a generator of RedisEnterprise_Spec_ARM instances for property testing.
// We first initialize redisEnterprise_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisEnterprise_Spec_ARMGenerator() gopter.Gen {
	if redisEnterprise_Spec_ARMGenerator != nil {
		return redisEnterprise_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_Spec_ARM(generators)
	redisEnterprise_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForRedisEnterprise_Spec_ARM(generators)
	redisEnterprise_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_Spec_ARM{}), generators)

	return redisEnterprise_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisEnterprise_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisEnterprise_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisEnterprise_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisEnterprise_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ClusterProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
}

func Test_Sku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_ARM, Sku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_ARM runs a test to see if a specific instance of Sku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_ARM(subject Sku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_ARM instances for property testing - lazily instantiated by Sku_ARMGenerator()
var sku_ARMGenerator gopter.Gen

// Sku_ARMGenerator returns a generator of Sku_ARM instances for property testing.
func Sku_ARMGenerator() gopter.Gen {
	if sku_ARMGenerator != nil {
		return sku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_ARM(generators)
	sku_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_ARM{}), generators)

	return sku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		Sku_Name_EnterpriseFlash_F1500,
		Sku_Name_EnterpriseFlash_F300,
		Sku_Name_EnterpriseFlash_F700,
		Sku_Name_Enterprise_E10,
		Sku_Name_Enterprise_E100,
		Sku_Name_Enterprise_E20,
		Sku_Name_Enterprise_E50))
}
