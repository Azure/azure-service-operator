// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230701

type RedisEnterprise_Database_STATUS_ARM struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: Other properties of the database.
	Properties *DatabaseProperties_STATUS_ARM `json:"properties,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

// Properties of RedisEnterprise databases, as opposed to general resource properties like location, tags
type DatabaseProperties_STATUS_ARM struct {
	// ClientProtocol: Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is
	// TLS-encrypted.
	ClientProtocol *DatabaseProperties_ClientProtocol_STATUS_ARM `json:"clientProtocol,omitempty"`

	// ClusteringPolicy: Clustering policy - default is OSSCluster. Specified at create time.
	ClusteringPolicy *DatabaseProperties_ClusteringPolicy_STATUS_ARM `json:"clusteringPolicy,omitempty"`

	// EvictionPolicy: Redis eviction policy - default is VolatileLRU
	EvictionPolicy *DatabaseProperties_EvictionPolicy_STATUS_ARM `json:"evictionPolicy,omitempty"`

	// GeoReplication: Optional set of properties to configure geo replication for this database.
	GeoReplication *DatabaseProperties_GeoReplication_STATUS_ARM `json:"geoReplication,omitempty"`

	// Modules: Optional set of redis modules to enable in this database - modules can only be added at creation time.
	Modules []Module_STATUS_ARM `json:"modules,omitempty"`

	// Persistence: Persistence settings
	Persistence *Persistence_STATUS_ARM `json:"persistence,omitempty"`

	// Port: TCP port of the database endpoint. Specified at create time. Defaults to an available port.
	Port *int `json:"port,omitempty"`

	// ProvisioningState: Current provisioning status of the database
	ProvisioningState *ProvisioningState_STATUS_ARM `json:"provisioningState,omitempty"`

	// ResourceState: Current resource status of the database
	ResourceState *ResourceState_STATUS_ARM `json:"resourceState,omitempty"`
}

type DatabaseProperties_ClientProtocol_STATUS_ARM string

const (
	DatabaseProperties_ClientProtocol_STATUS_ARM_Encrypted = DatabaseProperties_ClientProtocol_STATUS_ARM("Encrypted")
	DatabaseProperties_ClientProtocol_STATUS_ARM_Plaintext = DatabaseProperties_ClientProtocol_STATUS_ARM("Plaintext")
)

// Mapping from string to DatabaseProperties_ClientProtocol_STATUS_ARM
var databaseProperties_ClientProtocol_STATUS_ARM_Values = map[string]DatabaseProperties_ClientProtocol_STATUS_ARM{
	"encrypted": DatabaseProperties_ClientProtocol_STATUS_ARM_Encrypted,
	"plaintext": DatabaseProperties_ClientProtocol_STATUS_ARM_Plaintext,
}

type DatabaseProperties_ClusteringPolicy_STATUS_ARM string

const (
	DatabaseProperties_ClusteringPolicy_STATUS_ARM_EnterpriseCluster = DatabaseProperties_ClusteringPolicy_STATUS_ARM("EnterpriseCluster")
	DatabaseProperties_ClusteringPolicy_STATUS_ARM_OSSCluster        = DatabaseProperties_ClusteringPolicy_STATUS_ARM("OSSCluster")
)

// Mapping from string to DatabaseProperties_ClusteringPolicy_STATUS_ARM
var databaseProperties_ClusteringPolicy_STATUS_ARM_Values = map[string]DatabaseProperties_ClusteringPolicy_STATUS_ARM{
	"enterprisecluster": DatabaseProperties_ClusteringPolicy_STATUS_ARM_EnterpriseCluster,
	"osscluster":        DatabaseProperties_ClusteringPolicy_STATUS_ARM_OSSCluster,
}

type DatabaseProperties_EvictionPolicy_STATUS_ARM string

const (
	DatabaseProperties_EvictionPolicy_STATUS_ARM_AllKeysLFU     = DatabaseProperties_EvictionPolicy_STATUS_ARM("AllKeysLFU")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_AllKeysLRU     = DatabaseProperties_EvictionPolicy_STATUS_ARM("AllKeysLRU")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_AllKeysRandom  = DatabaseProperties_EvictionPolicy_STATUS_ARM("AllKeysRandom")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_NoEviction     = DatabaseProperties_EvictionPolicy_STATUS_ARM("NoEviction")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileLFU    = DatabaseProperties_EvictionPolicy_STATUS_ARM("VolatileLFU")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileLRU    = DatabaseProperties_EvictionPolicy_STATUS_ARM("VolatileLRU")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileRandom = DatabaseProperties_EvictionPolicy_STATUS_ARM("VolatileRandom")
	DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileTTL    = DatabaseProperties_EvictionPolicy_STATUS_ARM("VolatileTTL")
)

// Mapping from string to DatabaseProperties_EvictionPolicy_STATUS_ARM
var databaseProperties_EvictionPolicy_STATUS_ARM_Values = map[string]DatabaseProperties_EvictionPolicy_STATUS_ARM{
	"allkeyslfu":     DatabaseProperties_EvictionPolicy_STATUS_ARM_AllKeysLFU,
	"allkeyslru":     DatabaseProperties_EvictionPolicy_STATUS_ARM_AllKeysLRU,
	"allkeysrandom":  DatabaseProperties_EvictionPolicy_STATUS_ARM_AllKeysRandom,
	"noeviction":     DatabaseProperties_EvictionPolicy_STATUS_ARM_NoEviction,
	"volatilelfu":    DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileLFU,
	"volatilelru":    DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileLRU,
	"volatilerandom": DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileRandom,
	"volatilettl":    DatabaseProperties_EvictionPolicy_STATUS_ARM_VolatileTTL,
}

type DatabaseProperties_GeoReplication_STATUS_ARM struct {
	// GroupNickname: Name for the group of linked database resources
	GroupNickname *string `json:"groupNickname,omitempty"`

	// LinkedDatabases: List of database resources to link with this database
	LinkedDatabases []LinkedDatabase_STATUS_ARM `json:"linkedDatabases,omitempty"`
}

// Specifies configuration of a redis module
type Module_STATUS_ARM struct {
	// Args: Configuration options for the module, e.g. 'ERROR_RATE 0.01 INITIAL_SIZE 400'.
	Args *string `json:"args,omitempty"`

	// Name: The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name *string `json:"name,omitempty"`

	// Version: The version of the module, e.g. '1.0'.
	Version *string `json:"version,omitempty"`
}

// Persistence-related configuration for the RedisEnterprise database
type Persistence_STATUS_ARM struct {
	// AofEnabled: Sets whether AOF is enabled.
	AofEnabled *bool `json:"aofEnabled,omitempty"`

	// AofFrequency: Sets the frequency at which data is written to disk.
	AofFrequency *Persistence_AofFrequency_STATUS_ARM `json:"aofFrequency,omitempty"`

	// RdbEnabled: Sets whether RDB is enabled.
	RdbEnabled *bool `json:"rdbEnabled,omitempty"`

	// RdbFrequency: Sets the frequency at which a snapshot of the database is created.
	RdbFrequency *Persistence_RdbFrequency_STATUS_ARM `json:"rdbFrequency,omitempty"`
}

// Current provisioning status
type ProvisioningState_STATUS_ARM string

const (
	ProvisioningState_STATUS_ARM_Canceled  = ProvisioningState_STATUS_ARM("Canceled")
	ProvisioningState_STATUS_ARM_Creating  = ProvisioningState_STATUS_ARM("Creating")
	ProvisioningState_STATUS_ARM_Deleting  = ProvisioningState_STATUS_ARM("Deleting")
	ProvisioningState_STATUS_ARM_Failed    = ProvisioningState_STATUS_ARM("Failed")
	ProvisioningState_STATUS_ARM_Succeeded = ProvisioningState_STATUS_ARM("Succeeded")
	ProvisioningState_STATUS_ARM_Updating  = ProvisioningState_STATUS_ARM("Updating")
)

// Mapping from string to ProvisioningState_STATUS_ARM
var provisioningState_STATUS_ARM_Values = map[string]ProvisioningState_STATUS_ARM{
	"canceled":  ProvisioningState_STATUS_ARM_Canceled,
	"creating":  ProvisioningState_STATUS_ARM_Creating,
	"deleting":  ProvisioningState_STATUS_ARM_Deleting,
	"failed":    ProvisioningState_STATUS_ARM_Failed,
	"succeeded": ProvisioningState_STATUS_ARM_Succeeded,
	"updating":  ProvisioningState_STATUS_ARM_Updating,
}

// Current resource status
type ResourceState_STATUS_ARM string

const (
	ResourceState_STATUS_ARM_CreateFailed  = ResourceState_STATUS_ARM("CreateFailed")
	ResourceState_STATUS_ARM_Creating      = ResourceState_STATUS_ARM("Creating")
	ResourceState_STATUS_ARM_DeleteFailed  = ResourceState_STATUS_ARM("DeleteFailed")
	ResourceState_STATUS_ARM_Deleting      = ResourceState_STATUS_ARM("Deleting")
	ResourceState_STATUS_ARM_DisableFailed = ResourceState_STATUS_ARM("DisableFailed")
	ResourceState_STATUS_ARM_Disabled      = ResourceState_STATUS_ARM("Disabled")
	ResourceState_STATUS_ARM_Disabling     = ResourceState_STATUS_ARM("Disabling")
	ResourceState_STATUS_ARM_EnableFailed  = ResourceState_STATUS_ARM("EnableFailed")
	ResourceState_STATUS_ARM_Enabling      = ResourceState_STATUS_ARM("Enabling")
	ResourceState_STATUS_ARM_Running       = ResourceState_STATUS_ARM("Running")
	ResourceState_STATUS_ARM_UpdateFailed  = ResourceState_STATUS_ARM("UpdateFailed")
	ResourceState_STATUS_ARM_Updating      = ResourceState_STATUS_ARM("Updating")
)

// Mapping from string to ResourceState_STATUS_ARM
var resourceState_STATUS_ARM_Values = map[string]ResourceState_STATUS_ARM{
	"createfailed":  ResourceState_STATUS_ARM_CreateFailed,
	"creating":      ResourceState_STATUS_ARM_Creating,
	"deletefailed":  ResourceState_STATUS_ARM_DeleteFailed,
	"deleting":      ResourceState_STATUS_ARM_Deleting,
	"disablefailed": ResourceState_STATUS_ARM_DisableFailed,
	"disabled":      ResourceState_STATUS_ARM_Disabled,
	"disabling":     ResourceState_STATUS_ARM_Disabling,
	"enablefailed":  ResourceState_STATUS_ARM_EnableFailed,
	"enabling":      ResourceState_STATUS_ARM_Enabling,
	"running":       ResourceState_STATUS_ARM_Running,
	"updatefailed":  ResourceState_STATUS_ARM_UpdateFailed,
	"updating":      ResourceState_STATUS_ARM_Updating,
}

// Specifies details of a linked database resource.
type LinkedDatabase_STATUS_ARM struct {
	// Id: Resource ID of a database resource to link with this database.
	Id *string `json:"id,omitempty"`

	// State: State of the link between the database resources.
	State *LinkedDatabase_State_STATUS_ARM `json:"state,omitempty"`
}

type Persistence_AofFrequency_STATUS_ARM string

const (
	Persistence_AofFrequency_STATUS_ARM_1S     = Persistence_AofFrequency_STATUS_ARM("1s")
	Persistence_AofFrequency_STATUS_ARM_Always = Persistence_AofFrequency_STATUS_ARM("always")
)

// Mapping from string to Persistence_AofFrequency_STATUS_ARM
var persistence_AofFrequency_STATUS_ARM_Values = map[string]Persistence_AofFrequency_STATUS_ARM{
	"1s":     Persistence_AofFrequency_STATUS_ARM_1S,
	"always": Persistence_AofFrequency_STATUS_ARM_Always,
}

type Persistence_RdbFrequency_STATUS_ARM string

const (
	Persistence_RdbFrequency_STATUS_ARM_12H = Persistence_RdbFrequency_STATUS_ARM("12h")
	Persistence_RdbFrequency_STATUS_ARM_1H  = Persistence_RdbFrequency_STATUS_ARM("1h")
	Persistence_RdbFrequency_STATUS_ARM_6H  = Persistence_RdbFrequency_STATUS_ARM("6h")
)

// Mapping from string to Persistence_RdbFrequency_STATUS_ARM
var persistence_RdbFrequency_STATUS_ARM_Values = map[string]Persistence_RdbFrequency_STATUS_ARM{
	"12h": Persistence_RdbFrequency_STATUS_ARM_12H,
	"1h":  Persistence_RdbFrequency_STATUS_ARM_1H,
	"6h":  Persistence_RdbFrequency_STATUS_ARM_6H,
}

type LinkedDatabase_State_STATUS_ARM string

const (
	LinkedDatabase_State_STATUS_ARM_LinkFailed   = LinkedDatabase_State_STATUS_ARM("LinkFailed")
	LinkedDatabase_State_STATUS_ARM_Linked       = LinkedDatabase_State_STATUS_ARM("Linked")
	LinkedDatabase_State_STATUS_ARM_Linking      = LinkedDatabase_State_STATUS_ARM("Linking")
	LinkedDatabase_State_STATUS_ARM_UnlinkFailed = LinkedDatabase_State_STATUS_ARM("UnlinkFailed")
	LinkedDatabase_State_STATUS_ARM_Unlinking    = LinkedDatabase_State_STATUS_ARM("Unlinking")
)

// Mapping from string to LinkedDatabase_State_STATUS_ARM
var linkedDatabase_State_STATUS_ARM_Values = map[string]LinkedDatabase_State_STATUS_ARM{
	"linkfailed":   LinkedDatabase_State_STATUS_ARM_LinkFailed,
	"linked":       LinkedDatabase_State_STATUS_ARM_Linked,
	"linking":      LinkedDatabase_State_STATUS_ARM_Linking,
	"unlinkfailed": LinkedDatabase_State_STATUS_ARM_UnlinkFailed,
	"unlinking":    LinkedDatabase_State_STATUS_ARM_Unlinking,
}
