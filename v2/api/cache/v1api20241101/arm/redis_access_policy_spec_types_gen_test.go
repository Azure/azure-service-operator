// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisAccessPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisAccessPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisAccessPolicy_Spec, RedisAccessPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisAccessPolicy_Spec runs a test to see if a specific instance of RedisAccessPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisAccessPolicy_Spec(subject RedisAccessPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisAccessPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisAccessPolicy_Spec instances for property testing - lazily instantiated by
// RedisAccessPolicy_SpecGenerator()
var redisAccessPolicy_SpecGenerator gopter.Gen

// RedisAccessPolicy_SpecGenerator returns a generator of RedisAccessPolicy_Spec instances for property testing.
// We first initialize redisAccessPolicy_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisAccessPolicy_SpecGenerator() gopter.Gen {
	if redisAccessPolicy_SpecGenerator != nil {
		return redisAccessPolicy_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessPolicy_Spec(generators)
	redisAccessPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicy_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessPolicy_Spec(generators)
	AddRelatedPropertyGeneratorsForRedisAccessPolicy_Spec(generators)
	redisAccessPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicy_Spec{}), generators)

	return redisAccessPolicy_SpecGenerator
}

// AddIndependentPropertyGeneratorsForRedisAccessPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisAccessPolicy_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisAccessPolicy_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisAccessPolicy_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisCacheAccessPolicyPropertiesGenerator())
}

func Test_RedisCacheAccessPolicyProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisCacheAccessPolicyProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisCacheAccessPolicyProperties, RedisCacheAccessPolicyPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisCacheAccessPolicyProperties runs a test to see if a specific instance of RedisCacheAccessPolicyProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisCacheAccessPolicyProperties(subject RedisCacheAccessPolicyProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisCacheAccessPolicyProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisCacheAccessPolicyProperties instances for property testing - lazily instantiated by
// RedisCacheAccessPolicyPropertiesGenerator()
var redisCacheAccessPolicyPropertiesGenerator gopter.Gen

// RedisCacheAccessPolicyPropertiesGenerator returns a generator of RedisCacheAccessPolicyProperties instances for property testing.
func RedisCacheAccessPolicyPropertiesGenerator() gopter.Gen {
	if redisCacheAccessPolicyPropertiesGenerator != nil {
		return redisCacheAccessPolicyPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisCacheAccessPolicyProperties(generators)
	redisCacheAccessPolicyPropertiesGenerator = gen.Struct(reflect.TypeOf(RedisCacheAccessPolicyProperties{}), generators)

	return redisCacheAccessPolicyPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForRedisCacheAccessPolicyProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisCacheAccessPolicyProperties(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.PtrOf(gen.AlphaString())
}
