// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20241101

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/cache/v1api20241101/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisAccessPolicyAssignment_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisAccessPolicyAssignment to hub returns original",
		prop.ForAll(RunResourceConversionTestForRedisAccessPolicyAssignment, RedisAccessPolicyAssignmentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForRedisAccessPolicyAssignment tests if a specific instance of RedisAccessPolicyAssignment round trips to the hub storage version and back losslessly
func RunResourceConversionTestForRedisAccessPolicyAssignment(subject RedisAccessPolicyAssignment) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.RedisAccessPolicyAssignment
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual RedisAccessPolicyAssignment
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisAccessPolicyAssignment_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisAccessPolicyAssignment to RedisAccessPolicyAssignment via AssignProperties_To_RedisAccessPolicyAssignment & AssignProperties_From_RedisAccessPolicyAssignment returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisAccessPolicyAssignment, RedisAccessPolicyAssignmentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisAccessPolicyAssignment tests if a specific instance of RedisAccessPolicyAssignment can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRedisAccessPolicyAssignment(subject RedisAccessPolicyAssignment) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RedisAccessPolicyAssignment
	err := copied.AssignProperties_To_RedisAccessPolicyAssignment(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisAccessPolicyAssignment
	err = actual.AssignProperties_From_RedisAccessPolicyAssignment(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisAccessPolicyAssignment_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisAccessPolicyAssignment via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisAccessPolicyAssignment, RedisAccessPolicyAssignmentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisAccessPolicyAssignment runs a test to see if a specific instance of RedisAccessPolicyAssignment round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisAccessPolicyAssignment(subject RedisAccessPolicyAssignment) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisAccessPolicyAssignment
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisAccessPolicyAssignment instances for property testing - lazily instantiated by
// RedisAccessPolicyAssignmentGenerator()
var redisAccessPolicyAssignmentGenerator gopter.Gen

// RedisAccessPolicyAssignmentGenerator returns a generator of RedisAccessPolicyAssignment instances for property testing.
func RedisAccessPolicyAssignmentGenerator() gopter.Gen {
	if redisAccessPolicyAssignmentGenerator != nil {
		return redisAccessPolicyAssignmentGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment(generators)
	redisAccessPolicyAssignmentGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicyAssignment{}), generators)

	return redisAccessPolicyAssignmentGenerator
}

// AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment(gens map[string]gopter.Gen) {
	gens["Spec"] = RedisAccessPolicyAssignment_SpecGenerator()
	gens["Status"] = RedisAccessPolicyAssignment_STATUSGenerator()
}

func Test_RedisAccessPolicyAssignmentOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisAccessPolicyAssignmentOperatorSpec to RedisAccessPolicyAssignmentOperatorSpec via AssignProperties_To_RedisAccessPolicyAssignmentOperatorSpec & AssignProperties_From_RedisAccessPolicyAssignmentOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisAccessPolicyAssignmentOperatorSpec, RedisAccessPolicyAssignmentOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisAccessPolicyAssignmentOperatorSpec tests if a specific instance of RedisAccessPolicyAssignmentOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRedisAccessPolicyAssignmentOperatorSpec(subject RedisAccessPolicyAssignmentOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RedisAccessPolicyAssignmentOperatorSpec
	err := copied.AssignProperties_To_RedisAccessPolicyAssignmentOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisAccessPolicyAssignmentOperatorSpec
	err = actual.AssignProperties_From_RedisAccessPolicyAssignmentOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisAccessPolicyAssignmentOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisAccessPolicyAssignmentOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisAccessPolicyAssignmentOperatorSpec, RedisAccessPolicyAssignmentOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisAccessPolicyAssignmentOperatorSpec runs a test to see if a specific instance of RedisAccessPolicyAssignmentOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisAccessPolicyAssignmentOperatorSpec(subject RedisAccessPolicyAssignmentOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisAccessPolicyAssignmentOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisAccessPolicyAssignmentOperatorSpec instances for property testing - lazily instantiated by
// RedisAccessPolicyAssignmentOperatorSpecGenerator()
var redisAccessPolicyAssignmentOperatorSpecGenerator gopter.Gen

// RedisAccessPolicyAssignmentOperatorSpecGenerator returns a generator of RedisAccessPolicyAssignmentOperatorSpec instances for property testing.
func RedisAccessPolicyAssignmentOperatorSpecGenerator() gopter.Gen {
	if redisAccessPolicyAssignmentOperatorSpecGenerator != nil {
		return redisAccessPolicyAssignmentOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	redisAccessPolicyAssignmentOperatorSpecGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicyAssignmentOperatorSpec{}), generators)

	return redisAccessPolicyAssignmentOperatorSpecGenerator
}

func Test_RedisAccessPolicyAssignment_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisAccessPolicyAssignment_STATUS to RedisAccessPolicyAssignment_STATUS via AssignProperties_To_RedisAccessPolicyAssignment_STATUS & AssignProperties_From_RedisAccessPolicyAssignment_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisAccessPolicyAssignment_STATUS, RedisAccessPolicyAssignment_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisAccessPolicyAssignment_STATUS tests if a specific instance of RedisAccessPolicyAssignment_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRedisAccessPolicyAssignment_STATUS(subject RedisAccessPolicyAssignment_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RedisAccessPolicyAssignment_STATUS
	err := copied.AssignProperties_To_RedisAccessPolicyAssignment_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisAccessPolicyAssignment_STATUS
	err = actual.AssignProperties_From_RedisAccessPolicyAssignment_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisAccessPolicyAssignment_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisAccessPolicyAssignment_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisAccessPolicyAssignment_STATUS, RedisAccessPolicyAssignment_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisAccessPolicyAssignment_STATUS runs a test to see if a specific instance of RedisAccessPolicyAssignment_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisAccessPolicyAssignment_STATUS(subject RedisAccessPolicyAssignment_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisAccessPolicyAssignment_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisAccessPolicyAssignment_STATUS instances for property testing - lazily instantiated by
// RedisAccessPolicyAssignment_STATUSGenerator()
var redisAccessPolicyAssignment_STATUSGenerator gopter.Gen

// RedisAccessPolicyAssignment_STATUSGenerator returns a generator of RedisAccessPolicyAssignment_STATUS instances for property testing.
// We first initialize redisAccessPolicyAssignment_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisAccessPolicyAssignment_STATUSGenerator() gopter.Gen {
	if redisAccessPolicyAssignment_STATUSGenerator != nil {
		return redisAccessPolicyAssignment_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS(generators)
	redisAccessPolicyAssignment_STATUSGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicyAssignment_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS(generators)
	AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS(generators)
	redisAccessPolicyAssignment_STATUSGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicyAssignment_STATUS{}), generators)

	return redisAccessPolicyAssignment_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS(gens map[string]gopter.Gen) {
	gens["AccessPolicyName"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectIdAlias"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AccessPolicyAssignmentProvisioningState_STATUS_Canceled,
		AccessPolicyAssignmentProvisioningState_STATUS_Deleted,
		AccessPolicyAssignmentProvisioningState_STATUS_Deleting,
		AccessPolicyAssignmentProvisioningState_STATUS_Failed,
		AccessPolicyAssignmentProvisioningState_STATUS_Succeeded,
		AccessPolicyAssignmentProvisioningState_STATUS_Updating))
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_RedisAccessPolicyAssignment_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RedisAccessPolicyAssignment_Spec to RedisAccessPolicyAssignment_Spec via AssignProperties_To_RedisAccessPolicyAssignment_Spec & AssignProperties_From_RedisAccessPolicyAssignment_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForRedisAccessPolicyAssignment_Spec, RedisAccessPolicyAssignment_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRedisAccessPolicyAssignment_Spec tests if a specific instance of RedisAccessPolicyAssignment_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRedisAccessPolicyAssignment_Spec(subject RedisAccessPolicyAssignment_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RedisAccessPolicyAssignment_Spec
	err := copied.AssignProperties_To_RedisAccessPolicyAssignment_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RedisAccessPolicyAssignment_Spec
	err = actual.AssignProperties_From_RedisAccessPolicyAssignment_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RedisAccessPolicyAssignment_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisAccessPolicyAssignment_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisAccessPolicyAssignment_Spec, RedisAccessPolicyAssignment_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisAccessPolicyAssignment_Spec runs a test to see if a specific instance of RedisAccessPolicyAssignment_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisAccessPolicyAssignment_Spec(subject RedisAccessPolicyAssignment_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisAccessPolicyAssignment_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisAccessPolicyAssignment_Spec instances for property testing - lazily instantiated by
// RedisAccessPolicyAssignment_SpecGenerator()
var redisAccessPolicyAssignment_SpecGenerator gopter.Gen

// RedisAccessPolicyAssignment_SpecGenerator returns a generator of RedisAccessPolicyAssignment_Spec instances for property testing.
// We first initialize redisAccessPolicyAssignment_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisAccessPolicyAssignment_SpecGenerator() gopter.Gen {
	if redisAccessPolicyAssignment_SpecGenerator != nil {
		return redisAccessPolicyAssignment_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_Spec(generators)
	redisAccessPolicyAssignment_SpecGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicyAssignment_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_Spec(generators)
	AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment_Spec(generators)
	redisAccessPolicyAssignment_SpecGenerator = gen.Struct(reflect.TypeOf(RedisAccessPolicyAssignment_Spec{}), generators)

	return redisAccessPolicyAssignment_SpecGenerator
}

// AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisAccessPolicyAssignment_Spec(gens map[string]gopter.Gen) {
	gens["AccessPolicyName"] = gen.PtrOf(gen.AlphaString())
	gens["AzureName"] = gen.AlphaString()
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectIdAlias"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisAccessPolicyAssignment_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(RedisAccessPolicyAssignmentOperatorSpecGenerator())
}
