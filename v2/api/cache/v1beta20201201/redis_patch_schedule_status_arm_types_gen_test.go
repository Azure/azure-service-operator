// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisPatchSchedule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisPatchSchedule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisPatchScheduleSTATUSARM, RedisPatchScheduleSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisPatchScheduleSTATUSARM runs a test to see if a specific instance of RedisPatchSchedule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisPatchScheduleSTATUSARM(subject RedisPatchSchedule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisPatchSchedule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisPatchSchedule_STATUSARM instances for property testing - lazily instantiated by
// RedisPatchScheduleSTATUSARMGenerator()
var redisPatchScheduleSTATUSARMGenerator gopter.Gen

// RedisPatchScheduleSTATUSARMGenerator returns a generator of RedisPatchSchedule_STATUSARM instances for property testing.
// We first initialize redisPatchScheduleSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisPatchScheduleSTATUSARMGenerator() gopter.Gen {
	if redisPatchScheduleSTATUSARMGenerator != nil {
		return redisPatchScheduleSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchScheduleSTATUSARM(generators)
	redisPatchScheduleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisPatchScheduleSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForRedisPatchScheduleSTATUSARM(generators)
	redisPatchScheduleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisPatchSchedule_STATUSARM{}), generators)

	return redisPatchScheduleSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisPatchScheduleSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisPatchScheduleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisPatchScheduleSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisPatchScheduleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ScheduleEntriesSTATUSARMGenerator())
}

func Test_ScheduleEntries_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntries_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntriesSTATUSARM, ScheduleEntriesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntriesSTATUSARM runs a test to see if a specific instance of ScheduleEntries_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntriesSTATUSARM(subject ScheduleEntries_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntries_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntries_STATUSARM instances for property testing - lazily instantiated by
// ScheduleEntriesSTATUSARMGenerator()
var scheduleEntriesSTATUSARMGenerator gopter.Gen

// ScheduleEntriesSTATUSARMGenerator returns a generator of ScheduleEntries_STATUSARM instances for property testing.
func ScheduleEntriesSTATUSARMGenerator() gopter.Gen {
	if scheduleEntriesSTATUSARMGenerator != nil {
		return scheduleEntriesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduleEntriesSTATUSARM(generators)
	scheduleEntriesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntries_STATUSARM{}), generators)

	return scheduleEntriesSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduleEntriesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduleEntriesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ScheduleEntries"] = gen.SliceOf(ScheduleEntrySTATUSARMGenerator())
}

func Test_ScheduleEntry_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleEntry_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleEntrySTATUSARM, ScheduleEntrySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleEntrySTATUSARM runs a test to see if a specific instance of ScheduleEntry_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleEntrySTATUSARM(subject ScheduleEntry_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleEntry_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleEntry_STATUSARM instances for property testing - lazily instantiated by
// ScheduleEntrySTATUSARMGenerator()
var scheduleEntrySTATUSARMGenerator gopter.Gen

// ScheduleEntrySTATUSARMGenerator returns a generator of ScheduleEntry_STATUSARM instances for property testing.
func ScheduleEntrySTATUSARMGenerator() gopter.Gen {
	if scheduleEntrySTATUSARMGenerator != nil {
		return scheduleEntrySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleEntrySTATUSARM(generators)
	scheduleEntrySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ScheduleEntry_STATUSARM{}), generators)

	return scheduleEntrySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForScheduleEntrySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleEntrySTATUSARM(gens map[string]gopter.Gen) {
	gens["DayOfWeek"] = gen.PtrOf(gen.OneConstOf(
		ScheduleEntrySTATUSDayOfWeek_Everyday,
		ScheduleEntrySTATUSDayOfWeek_Friday,
		ScheduleEntrySTATUSDayOfWeek_Monday,
		ScheduleEntrySTATUSDayOfWeek_Saturday,
		ScheduleEntrySTATUSDayOfWeek_Sunday,
		ScheduleEntrySTATUSDayOfWeek_Thursday,
		ScheduleEntrySTATUSDayOfWeek_Tuesday,
		ScheduleEntrySTATUSDayOfWeek_Wednesday,
		ScheduleEntrySTATUSDayOfWeek_Weekend))
	gens["MaintenanceWindow"] = gen.PtrOf(gen.AlphaString())
	gens["StartHourUtc"] = gen.PtrOf(gen.Int())
}
