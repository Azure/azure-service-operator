// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Redis_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Redis_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedis_STATUSARM, Redis_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedis_STATUSARM runs a test to see if a specific instance of Redis_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedis_STATUSARM(subject Redis_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Redis_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Redis_STATUSARM instances for property testing - lazily instantiated by Redis_STATUSARMGenerator()
var redis_STATUSARMGenerator gopter.Gen

// Redis_STATUSARMGenerator returns a generator of Redis_STATUSARM instances for property testing.
// We first initialize redis_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Redis_STATUSARMGenerator() gopter.Gen {
	if redis_STATUSARMGenerator != nil {
		return redis_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedis_STATUSARM(generators)
	redis_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Redis_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedis_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForRedis_STATUSARM(generators)
	redis_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Redis_STATUSARM{}), generators)

	return redis_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedis_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedis_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedis_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedis_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisProperties_STATUSARMGenerator())
}

func Test_RedisProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisProperties_STATUSARM, RedisProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisProperties_STATUSARM runs a test to see if a specific instance of RedisProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisProperties_STATUSARM(subject RedisProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisProperties_STATUSARM instances for property testing - lazily instantiated by
// RedisProperties_STATUSARMGenerator()
var redisProperties_STATUSARMGenerator gopter.Gen

// RedisProperties_STATUSARMGenerator returns a generator of RedisProperties_STATUSARM instances for property testing.
// We first initialize redisProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisProperties_STATUSARMGenerator() gopter.Gen {
	if redisProperties_STATUSARMGenerator != nil {
		return redisProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisProperties_STATUSARM(generators)
	redisProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForRedisProperties_STATUSARM(generators)
	redisProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisProperties_STATUSARM{}), generators)

	return redisProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnableNonSslPort"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(RedisProperties_MinimumTlsVersion_10_STATUS, RedisProperties_MinimumTlsVersion_11_STATUS, RedisProperties_MinimumTlsVersion_12_STATUS))
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		RedisProperties_ProvisioningState_Creating_STATUS,
		RedisProperties_ProvisioningState_Deleting_STATUS,
		RedisProperties_ProvisioningState_Disabled_STATUS,
		RedisProperties_ProvisioningState_Failed_STATUS,
		RedisProperties_ProvisioningState_Linking_STATUS,
		RedisProperties_ProvisioningState_Provisioning_STATUS,
		RedisProperties_ProvisioningState_RecoveringScaleFailure_STATUS,
		RedisProperties_ProvisioningState_Scaling_STATUS,
		RedisProperties_ProvisioningState_Succeeded_STATUS,
		RedisProperties_ProvisioningState_Unlinking_STATUS,
		RedisProperties_ProvisioningState_Unprovisioning_STATUS,
		RedisProperties_ProvisioningState_Updating_STATUS))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(RedisProperties_PublicNetworkAccess_Disabled_STATUS, RedisProperties_PublicNetworkAccess_Enabled_STATUS))
	gens["RedisConfiguration"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["RedisVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicasPerMaster"] = gen.PtrOf(gen.Int())
	gens["ReplicasPerPrimary"] = gen.PtrOf(gen.Int())
	gens["ShardCount"] = gen.PtrOf(gen.Int())
	gens["SslPort"] = gen.PtrOf(gen.Int())
	gens["StaticIP"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantSettings"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AccessKeys"] = gen.PtrOf(RedisAccessKeys_STATUSARMGenerator())
	gens["Instances"] = gen.SliceOf(RedisInstanceDetails_STATUSARMGenerator())
	gens["LinkedServers"] = gen.SliceOf(RedisLinkedServer_STATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSARMGenerator())
}

func Test_PrivateEndpointConnection_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM, PrivateEndpointConnection_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM(subject PrivateEndpointConnection_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUSARMGenerator()
var privateEndpointConnection_STATUSARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUSARMGenerator returns a generator of PrivateEndpointConnection_STATUSARM instances for property testing.
func PrivateEndpointConnection_STATUSARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUSARMGenerator != nil {
		return privateEndpointConnection_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(generators)
	privateEndpointConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUSARM{}), generators)

	return privateEndpointConnection_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_RedisAccessKeys_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisAccessKeys_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisAccessKeys_STATUSARM, RedisAccessKeys_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisAccessKeys_STATUSARM runs a test to see if a specific instance of RedisAccessKeys_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisAccessKeys_STATUSARM(subject RedisAccessKeys_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisAccessKeys_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisAccessKeys_STATUSARM instances for property testing - lazily instantiated by
// RedisAccessKeys_STATUSARMGenerator()
var redisAccessKeys_STATUSARMGenerator gopter.Gen

// RedisAccessKeys_STATUSARMGenerator returns a generator of RedisAccessKeys_STATUSARM instances for property testing.
func RedisAccessKeys_STATUSARMGenerator() gopter.Gen {
	if redisAccessKeys_STATUSARMGenerator != nil {
		return redisAccessKeys_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisAccessKeys_STATUSARM(generators)
	redisAccessKeys_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisAccessKeys_STATUSARM{}), generators)

	return redisAccessKeys_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisAccessKeys_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisAccessKeys_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrimaryKey"] = gen.PtrOf(gen.AlphaString())
	gens["SecondaryKey"] = gen.PtrOf(gen.AlphaString())
}

func Test_RedisInstanceDetails_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisInstanceDetails_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisInstanceDetails_STATUSARM, RedisInstanceDetails_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisInstanceDetails_STATUSARM runs a test to see if a specific instance of RedisInstanceDetails_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisInstanceDetails_STATUSARM(subject RedisInstanceDetails_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisInstanceDetails_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisInstanceDetails_STATUSARM instances for property testing - lazily instantiated by
// RedisInstanceDetails_STATUSARMGenerator()
var redisInstanceDetails_STATUSARMGenerator gopter.Gen

// RedisInstanceDetails_STATUSARMGenerator returns a generator of RedisInstanceDetails_STATUSARM instances for property testing.
func RedisInstanceDetails_STATUSARMGenerator() gopter.Gen {
	if redisInstanceDetails_STATUSARMGenerator != nil {
		return redisInstanceDetails_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisInstanceDetails_STATUSARM(generators)
	redisInstanceDetails_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisInstanceDetails_STATUSARM{}), generators)

	return redisInstanceDetails_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisInstanceDetails_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisInstanceDetails_STATUSARM(gens map[string]gopter.Gen) {
	gens["IsMaster"] = gen.PtrOf(gen.Bool())
	gens["IsPrimary"] = gen.PtrOf(gen.Bool())
	gens["NonSslPort"] = gen.PtrOf(gen.Int())
	gens["ShardId"] = gen.PtrOf(gen.Int())
	gens["SslPort"] = gen.PtrOf(gen.Int())
	gens["Zone"] = gen.PtrOf(gen.AlphaString())
}

func Test_RedisLinkedServer_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServer_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServer_STATUSARM, RedisLinkedServer_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServer_STATUSARM runs a test to see if a specific instance of RedisLinkedServer_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServer_STATUSARM(subject RedisLinkedServer_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServer_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServer_STATUSARM instances for property testing - lazily instantiated by
// RedisLinkedServer_STATUSARMGenerator()
var redisLinkedServer_STATUSARMGenerator gopter.Gen

// RedisLinkedServer_STATUSARMGenerator returns a generator of RedisLinkedServer_STATUSARM instances for property testing.
func RedisLinkedServer_STATUSARMGenerator() gopter.Gen {
	if redisLinkedServer_STATUSARMGenerator != nil {
		return redisLinkedServer_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServer_STATUSARM(generators)
	redisLinkedServer_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServer_STATUSARM{}), generators)

	return redisLinkedServer_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServer_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServer_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUSARM, Sku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by Sku_STATUSARMGenerator()
var sku_STATUSARMGenerator gopter.Gen

// Sku_STATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func Sku_STATUSARMGenerator() gopter.Gen {
	if sku_STATUSARMGenerator != nil {
		return sku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUSARM(generators)
	sku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return sku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.OneConstOf(Sku_Family_C_STATUS, Sku_Family_P_STATUS))
	gens["Name"] = gen.PtrOf(gen.OneConstOf(Sku_Name_Basic_STATUS, Sku_Name_Premium_STATUS, Sku_Name_Standard_STATUS))
}
