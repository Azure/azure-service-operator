// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisLinkedServer_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServer_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServer_STATUSARM, RedisLinkedServer_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServer_STATUSARM runs a test to see if a specific instance of RedisLinkedServer_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServer_STATUSARM(subject RedisLinkedServer_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServer_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServer_STATUSARM instances for property testing - lazily instantiated by
// RedisLinkedServer_STATUSARMGenerator()
var redisLinkedServer_STATUSARMGenerator gopter.Gen

// RedisLinkedServer_STATUSARMGenerator returns a generator of RedisLinkedServer_STATUSARM instances for property testing.
func RedisLinkedServer_STATUSARMGenerator() gopter.Gen {
	if redisLinkedServer_STATUSARMGenerator != nil {
		return redisLinkedServer_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRedisLinkedServer_STATUSARM(generators)
	redisLinkedServer_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServer_STATUSARM{}), generators)

	return redisLinkedServer_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForRedisLinkedServer_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisLinkedServer_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisLinkedServerCreateProperties_STATUSARMGenerator())
}

func Test_RedisLinkedServerCreateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisLinkedServerCreateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisLinkedServerCreateProperties_STATUSARM, RedisLinkedServerCreateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisLinkedServerCreateProperties_STATUSARM runs a test to see if a specific instance of RedisLinkedServerCreateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisLinkedServerCreateProperties_STATUSARM(subject RedisLinkedServerCreateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisLinkedServerCreateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisLinkedServerCreateProperties_STATUSARM instances for property testing - lazily instantiated by
// RedisLinkedServerCreateProperties_STATUSARMGenerator()
var redisLinkedServerCreateProperties_STATUSARMGenerator gopter.Gen

// RedisLinkedServerCreateProperties_STATUSARMGenerator returns a generator of RedisLinkedServerCreateProperties_STATUSARM instances for property testing.
func RedisLinkedServerCreateProperties_STATUSARMGenerator() gopter.Gen {
	if redisLinkedServerCreateProperties_STATUSARMGenerator != nil {
		return redisLinkedServerCreateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisLinkedServerCreateProperties_STATUSARM(generators)
	redisLinkedServerCreateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisLinkedServerCreateProperties_STATUSARM{}), generators)

	return redisLinkedServerCreateProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisLinkedServerCreateProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisLinkedServerCreateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["LinkedRedisCacheId"] = gen.PtrOf(gen.AlphaString())
	gens["LinkedRedisCacheLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ServerRole"] = gen.PtrOf(gen.OneConstOf(RedisLinkedServerCreateProperties_ServerRole_Primary_STATUS, RedisLinkedServerCreateProperties_ServerRole_Secondary_STATUS))
}
