// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Redis_FirewallRules_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Redis_FirewallRules_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedis_FirewallRules_SpecARM, Redis_FirewallRules_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedis_FirewallRules_SpecARM runs a test to see if a specific instance of Redis_FirewallRules_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedis_FirewallRules_SpecARM(subject Redis_FirewallRules_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Redis_FirewallRules_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Redis_FirewallRules_SpecARM instances for property testing - lazily instantiated by
// Redis_FirewallRules_SpecARMGenerator()
var redis_FirewallRules_SpecARMGenerator gopter.Gen

// Redis_FirewallRules_SpecARMGenerator returns a generator of Redis_FirewallRules_SpecARM instances for property testing.
// We first initialize redis_FirewallRules_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Redis_FirewallRules_SpecARMGenerator() gopter.Gen {
	if redis_FirewallRules_SpecARMGenerator != nil {
		return redis_FirewallRules_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedis_FirewallRules_SpecARM(generators)
	redis_FirewallRules_SpecARMGenerator = gen.Struct(reflect.TypeOf(Redis_FirewallRules_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedis_FirewallRules_SpecARM(generators)
	AddRelatedPropertyGeneratorsForRedis_FirewallRules_SpecARM(generators)
	redis_FirewallRules_SpecARMGenerator = gen.Struct(reflect.TypeOf(Redis_FirewallRules_SpecARM{}), generators)

	return redis_FirewallRules_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForRedis_FirewallRules_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedis_FirewallRules_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedis_FirewallRules_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedis_FirewallRules_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RedisFirewallRulePropertiesARMGenerator())
}

func Test_RedisFirewallRulePropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisFirewallRulePropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisFirewallRulePropertiesARM, RedisFirewallRulePropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisFirewallRulePropertiesARM runs a test to see if a specific instance of RedisFirewallRulePropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisFirewallRulePropertiesARM(subject RedisFirewallRulePropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisFirewallRulePropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisFirewallRulePropertiesARM instances for property testing - lazily instantiated by
// RedisFirewallRulePropertiesARMGenerator()
var redisFirewallRulePropertiesARMGenerator gopter.Gen

// RedisFirewallRulePropertiesARMGenerator returns a generator of RedisFirewallRulePropertiesARM instances for property testing.
func RedisFirewallRulePropertiesARMGenerator() gopter.Gen {
	if redisFirewallRulePropertiesARMGenerator != nil {
		return redisFirewallRulePropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesARM(generators)
	redisFirewallRulePropertiesARMGenerator = gen.Struct(reflect.TypeOf(RedisFirewallRulePropertiesARM{}), generators)

	return redisFirewallRulePropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisFirewallRulePropertiesARM(gens map[string]gopter.Gen) {
	gens["EndIP"] = gen.PtrOf(gen.AlphaString())
	gens["StartIP"] = gen.PtrOf(gen.AlphaString())
}
