// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201storage

import (
	"fmt"
	alpha20210301s "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	v20201201s "github.com/Azure/azure-service-operator/v2/api/cache/v1beta20201201storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20201201.Redis
// Deprecated version of Redis. Use v1beta20201201.Redis instead
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Redis_Spec   `json:"spec,omitempty"`
	Status            Redis_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Redis{}

// GetConditions returns the conditions of the resource
func (redis *Redis) GetConditions() conditions.Conditions {
	return redis.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redis *Redis) SetConditions(conditions conditions.Conditions) {
	redis.Status.Conditions = conditions
}

var _ conversion.Convertible = &Redis{}

// ConvertFrom populates our Redis from the provided hub Redis
func (redis *Redis) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20201201s.Redis)
	if !ok {
		return fmt.Errorf("expected cache/v1beta20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesFromRedis(source)
}

// ConvertTo populates the provided hub Redis from our Redis
func (redis *Redis) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20201201s.Redis)
	if !ok {
		return fmt.Errorf("expected cache/v1beta20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesToRedis(destination)
}

var _ genruntime.KubernetesResource = &Redis{}

// AzureName returns the Azure name of the resource
func (redis *Redis) AzureName() string {
	return redis.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "20201201"
func (redis Redis) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (redis *Redis) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (redis *Redis) GetSpec() genruntime.ConvertibleSpec {
	return &redis.Spec
}

// GetStatus returns the status of this resource
func (redis *Redis) GetStatus() genruntime.ConvertibleStatus {
	return &redis.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (redis *Redis) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (redis *Redis) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Redis_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (redis *Redis) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redis.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redis.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redis *Redis) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Redis_STATUS); ok {
		redis.Status = *st
		return nil
	}

	// Convert status to required version
	var st Redis_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redis.Status = st
	return nil
}

// AssignPropertiesFromRedis populates our Redis from the provided source Redis
func (redis *Redis) AssignPropertiesFromRedis(source *v20201201s.Redis) error {

	// ObjectMeta
	redis.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Redis_Spec
	err := spec.AssignPropertiesFromRedis_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedis_Spec() to populate field Spec")
	}
	redis.Spec = spec

	// Status
	var status Redis_STATUS
	err = status.AssignPropertiesFromRedis_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedis_STATUS() to populate field Status")
	}
	redis.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedis populates the provided destination Redis from our Redis
func (redis *Redis) AssignPropertiesToRedis(destination *v20201201s.Redis) error {

	// ObjectMeta
	destination.ObjectMeta = *redis.ObjectMeta.DeepCopy()

	// Spec
	var spec v20201201s.Redis_Spec
	err := redis.Spec.AssignPropertiesToRedis_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedis_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20201201s.Redis_STATUS
	err = redis.Status.AssignPropertiesToRedis_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedis_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redis *Redis) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redis.Spec.OriginalVersion,
		Kind:    "Redis",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20201201.Redis
// Deprecated version of Redis. Use v1beta20201201.Redis instead
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

// Storage version of v1alpha1api20201201.APIVersion
// Deprecated version of APIVersion. Use v1beta20201201.APIVersion instead
// +kubebuilder:validation:Enum={"20201201"}
type APIVersion string

const APIVersionValue = APIVersion("20201201")

// Storage version of v1alpha1api20201201.Redis_STATUS
// Deprecated version of Redis_STATUS. Use v1beta20201201.Redis_STATUS instead
type Redis_STATUS struct {
	Conditions          []conditions.Condition                           `json:"conditions,omitempty"`
	EnableNonSslPort    *bool                                            `json:"enableNonSslPort,omitempty"`
	Location            *string                                          `json:"location,omitempty"`
	MinimumTlsVersion   *string                                          `json:"minimumTlsVersion,omitempty"`
	PropertyBag         genruntime.PropertyBag                           `json:"$propertyBag,omitempty"`
	PublicNetworkAccess *string                                          `json:"publicNetworkAccess,omitempty"`
	RedisConfiguration  *RedisCreateProperties_RedisConfiguration_STATUS `json:"redisConfiguration,omitempty"`
	RedisVersion        *string                                          `json:"redisVersion,omitempty"`
	ReplicasPerMaster   *int                                             `json:"replicasPerMaster,omitempty"`
	ReplicasPerPrimary  *int                                             `json:"replicasPerPrimary,omitempty"`
	ShardCount          *int                                             `json:"shardCount,omitempty"`
	Sku                 *Sku_STATUS                                      `json:"sku,omitempty"`
	StaticIP            *string                                          `json:"staticIP,omitempty"`
	SubnetId            *string                                          `json:"subnetId,omitempty"`
	Tags                map[string]string                                `json:"tags,omitempty"`
	TenantSettings      map[string]string                                `json:"tenantSettings,omitempty"`
	Zones               []string                                         `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Redis_STATUS{}

// ConvertStatusFrom populates our Redis_STATUS from the provided source
func (redis *Redis_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20201201s.Redis_STATUS)
	if ok {
		// Populate our instance from source
		return redis.AssignPropertiesFromRedis_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20201201s.Redis_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = redis.AssignPropertiesFromRedis_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Redis_STATUS
func (redis *Redis_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20201201s.Redis_STATUS)
	if ok {
		// Populate destination from our instance
		return redis.AssignPropertiesToRedis_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20201201s.Redis_STATUS{}
	err := redis.AssignPropertiesToRedis_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromRedis_STATUS populates our Redis_STATUS from the provided source Redis_STATUS
func (redis *Redis_STATUS) AssignPropertiesFromRedis_STATUS(source *v20201201s.Redis_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	redis.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// Location
	redis.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	redis.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// PublicNetworkAccess
	redis.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// RedisConfiguration
	if source.RedisConfiguration != nil {
		var redisConfiguration RedisCreateProperties_RedisConfiguration_STATUS
		err := redisConfiguration.AssignPropertiesFromRedisCreateProperties_RedisConfiguration_STATUS(source.RedisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRedisCreateProperties_RedisConfiguration_STATUS() to populate field RedisConfiguration")
		}
		redis.RedisConfiguration = &redisConfiguration
	} else {
		redis.RedisConfiguration = nil
	}

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var sku_STATUSStash alpha20210301s.Sku_STATUS
		err := sku_STATUSStash.AssignPropertiesFromSku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_STATUS() to populate field Sku_STATUSStash from Sku")
		}
		var sku Sku_STATUS
		err = sku.AssignPropertiesFromSku_STATUS(&sku_STATUSStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_STATUS() to populate field Sku from Sku_STATUSStash")
		}
		redis.Sku = &sku
	} else {
		redis.Sku = nil
	}

	// StaticIP
	redis.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetId
	redis.SubnetId = genruntime.ClonePointerToString(source.SubnetId)

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		redis.PropertyBag = propertyBag
	} else {
		redis.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedis_STATUS populates the provided destination Redis_STATUS from our Redis_STATUS
func (redis *Redis_STATUS) AssignPropertiesToRedis_STATUS(destination *v20201201s.Redis_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(redis.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(redis.Conditions)

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redis.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(redis.MinimumTlsVersion)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(redis.PublicNetworkAccess)

	// RedisConfiguration
	if redis.RedisConfiguration != nil {
		var redisConfiguration v20201201s.RedisCreateProperties_RedisConfiguration_STATUS
		err := redis.RedisConfiguration.AssignPropertiesToRedisCreateProperties_RedisConfiguration_STATUS(&redisConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRedisCreateProperties_RedisConfiguration_STATUS() to populate field RedisConfiguration")
		}
		destination.RedisConfiguration = &redisConfiguration
	} else {
		destination.RedisConfiguration = nil
	}

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	if redis.Sku != nil {
		var sku_STATUSStash alpha20210301s.Sku_STATUS
		err := redis.Sku.AssignPropertiesToSku_STATUS(&sku_STATUSStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_STATUS() to populate field Sku_STATUSStash from Sku")
		}
		var sku v20201201s.Sku_STATUS
		err = sku_STATUSStash.AssignPropertiesToSku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_STATUS() to populate field Sku from Sku_STATUSStash")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(redis.StaticIP)

	// SubnetId
	destination.SubnetId = genruntime.ClonePointerToString(redis.SubnetId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.Redis_Spec
type Redis_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName         string             `json:"azureName,omitempty"`
	EnableNonSslPort  *bool              `json:"enableNonSslPort,omitempty"`
	Location          *string            `json:"location,omitempty"`
	MinimumTlsVersion *string            `json:"minimumTlsVersion,omitempty"`
	OperatorSpec      *RedisOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion   string             `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag         genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	PublicNetworkAccess *string                            `json:"publicNetworkAccess,omitempty"`
	RedisConfiguration  map[string]string                  `json:"redisConfiguration,omitempty"`
	RedisVersion        *string                            `json:"redisVersion,omitempty"`
	ReplicasPerMaster   *int                               `json:"replicasPerMaster,omitempty"`
	ReplicasPerPrimary  *int                               `json:"replicasPerPrimary,omitempty"`
	ShardCount          *int                               `json:"shardCount,omitempty"`
	Sku                 *Sku                               `json:"sku,omitempty"`
	StaticIP            *string                            `json:"staticIP,omitempty"`
	SubnetReference     *genruntime.ResourceReference      `armReference:"SubnetId" json:"subnetReference,omitempty"`
	Tags                map[string]string                  `json:"tags,omitempty"`
	TenantSettings      map[string]string                  `json:"tenantSettings,omitempty"`
	Zones               []string                           `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Redis_Spec{}

// ConvertSpecFrom populates our Redis_Spec from the provided source
func (redis *Redis_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20201201s.Redis_Spec)
	if ok {
		// Populate our instance from source
		return redis.AssignPropertiesFromRedis_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20201201s.Redis_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redis.AssignPropertiesFromRedis_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Redis_Spec
func (redis *Redis_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20201201s.Redis_Spec)
	if ok {
		// Populate destination from our instance
		return redis.AssignPropertiesToRedis_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20201201s.Redis_Spec{}
	err := redis.AssignPropertiesToRedis_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedis_Spec populates our Redis_Spec from the provided source Redis_Spec
func (redis *Redis_Spec) AssignPropertiesFromRedis_Spec(source *v20201201s.Redis_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	redis.AzureName = source.AzureName

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// Location
	redis.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	redis.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec RedisOperatorSpec
		err := operatorSpec.AssignPropertiesFromRedisOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRedisOperatorSpec() to populate field OperatorSpec")
		}
		redis.OperatorSpec = &operatorSpec
	} else {
		redis.OperatorSpec = nil
	}

	// OriginalVersion
	redis.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		redis.Owner = &owner
	} else {
		redis.Owner = nil
	}

	// PublicNetworkAccess
	redis.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// RedisConfiguration
	redis.RedisConfiguration = genruntime.CloneMapOfStringToString(source.RedisConfiguration)

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var skuStash alpha20210301s.Sku
		err := skuStash.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field SkuStash from Sku")
		}
		var sku Sku
		err = sku.AssignPropertiesFromSku(&skuStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku from SkuStash")
		}
		redis.Sku = &sku
	} else {
		redis.Sku = nil
	}

	// StaticIP
	redis.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetReference
	if source.SubnetReference != nil {
		subnetReference := source.SubnetReference.Copy()
		redis.SubnetReference = &subnetReference
	} else {
		redis.SubnetReference = nil
	}

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		redis.PropertyBag = propertyBag
	} else {
		redis.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedis_Spec populates the provided destination Redis_Spec from our Redis_Spec
func (redis *Redis_Spec) AssignPropertiesToRedis_Spec(destination *v20201201s.Redis_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(redis.PropertyBag)

	// AzureName
	destination.AzureName = redis.AzureName

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redis.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(redis.MinimumTlsVersion)

	// OperatorSpec
	if redis.OperatorSpec != nil {
		var operatorSpec v20201201s.RedisOperatorSpec
		err := redis.OperatorSpec.AssignPropertiesToRedisOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRedisOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = redis.OriginalVersion

	// Owner
	if redis.Owner != nil {
		owner := redis.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(redis.PublicNetworkAccess)

	// RedisConfiguration
	destination.RedisConfiguration = genruntime.CloneMapOfStringToString(redis.RedisConfiguration)

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	if redis.Sku != nil {
		var skuStash alpha20210301s.Sku
		err := redis.Sku.AssignPropertiesToSku(&skuStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field SkuStash from Sku")
		}
		var sku v20201201s.Sku
		err = skuStash.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku from SkuStash")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(redis.StaticIP)

	// SubnetReference
	if redis.SubnetReference != nil {
		subnetReference := redis.SubnetReference.Copy()
		destination.SubnetReference = &subnetReference
	} else {
		destination.SubnetReference = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisCreateProperties_RedisConfiguration_STATUS
// Deprecated version of RedisCreateProperties_RedisConfiguration_STATUS. Use v1beta20201201.RedisCreateProperties_RedisConfiguration_STATUS instead
type RedisCreateProperties_RedisConfiguration_STATUS struct {
	AdditionalProperties           map[string]string      `json:"additionalProperties,omitempty"`
	AofStorageConnectionString0    *string                `json:"aof-storage-connection-string-0,omitempty"`
	AofStorageConnectionString1    *string                `json:"aof-storage-connection-string-1,omitempty"`
	Maxclients                     *string                `json:"maxclients,omitempty"`
	MaxfragmentationmemoryReserved *string                `json:"maxfragmentationmemory-reserved,omitempty"`
	MaxmemoryDelta                 *string                `json:"maxmemory-delta,omitempty"`
	MaxmemoryPolicy                *string                `json:"maxmemory-policy,omitempty"`
	MaxmemoryReserved              *string                `json:"maxmemory-reserved,omitempty"`
	PropertyBag                    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RdbBackupEnabled               *string                `json:"rdb-backup-enabled,omitempty"`
	RdbBackupFrequency             *string                `json:"rdb-backup-frequency,omitempty"`
	RdbBackupMaxSnapshotCount      *string                `json:"rdb-backup-max-snapshot-count,omitempty"`
	RdbStorageConnectionString     *string                `json:"rdb-storage-connection-string,omitempty"`
	ZonalConfiguration             *string                `json:"zonal-configuration,omitempty"`
}

// AssignPropertiesFromRedisCreateProperties_RedisConfiguration_STATUS populates our RedisCreateProperties_RedisConfiguration_STATUS from the provided source RedisCreateProperties_RedisConfiguration_STATUS
func (configuration *RedisCreateProperties_RedisConfiguration_STATUS) AssignPropertiesFromRedisCreateProperties_RedisConfiguration_STATUS(source *v20201201s.RedisCreateProperties_RedisConfiguration_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AdditionalProperties
	configuration.AdditionalProperties = genruntime.CloneMapOfStringToString(source.AdditionalProperties)

	// AofStorageConnectionString0
	configuration.AofStorageConnectionString0 = genruntime.ClonePointerToString(source.AofStorageConnectionString0)

	// AofStorageConnectionString1
	configuration.AofStorageConnectionString1 = genruntime.ClonePointerToString(source.AofStorageConnectionString1)

	// Maxclients
	configuration.Maxclients = genruntime.ClonePointerToString(source.Maxclients)

	// MaxfragmentationmemoryReserved
	configuration.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(source.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	configuration.MaxmemoryDelta = genruntime.ClonePointerToString(source.MaxmemoryDelta)

	// MaxmemoryPolicy
	configuration.MaxmemoryPolicy = genruntime.ClonePointerToString(source.MaxmemoryPolicy)

	// MaxmemoryReserved
	configuration.MaxmemoryReserved = genruntime.ClonePointerToString(source.MaxmemoryReserved)

	// RdbBackupEnabled
	configuration.RdbBackupEnabled = genruntime.ClonePointerToString(source.RdbBackupEnabled)

	// RdbBackupFrequency
	configuration.RdbBackupFrequency = genruntime.ClonePointerToString(source.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	configuration.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(source.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	configuration.RdbStorageConnectionString = genruntime.ClonePointerToString(source.RdbStorageConnectionString)

	// ZonalConfiguration
	configuration.ZonalConfiguration = genruntime.ClonePointerToString(source.ZonalConfiguration)

	// Update the property bag
	if len(propertyBag) > 0 {
		configuration.PropertyBag = propertyBag
	} else {
		configuration.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisCreateProperties_RedisConfiguration_STATUS populates the provided destination RedisCreateProperties_RedisConfiguration_STATUS from our RedisCreateProperties_RedisConfiguration_STATUS
func (configuration *RedisCreateProperties_RedisConfiguration_STATUS) AssignPropertiesToRedisCreateProperties_RedisConfiguration_STATUS(destination *v20201201s.RedisCreateProperties_RedisConfiguration_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(configuration.PropertyBag)

	// AdditionalProperties
	destination.AdditionalProperties = genruntime.CloneMapOfStringToString(configuration.AdditionalProperties)

	// AofStorageConnectionString0
	destination.AofStorageConnectionString0 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString0)

	// AofStorageConnectionString1
	destination.AofStorageConnectionString1 = genruntime.ClonePointerToString(configuration.AofStorageConnectionString1)

	// Maxclients
	destination.Maxclients = genruntime.ClonePointerToString(configuration.Maxclients)

	// MaxfragmentationmemoryReserved
	destination.MaxfragmentationmemoryReserved = genruntime.ClonePointerToString(configuration.MaxfragmentationmemoryReserved)

	// MaxmemoryDelta
	destination.MaxmemoryDelta = genruntime.ClonePointerToString(configuration.MaxmemoryDelta)

	// MaxmemoryPolicy
	destination.MaxmemoryPolicy = genruntime.ClonePointerToString(configuration.MaxmemoryPolicy)

	// MaxmemoryReserved
	destination.MaxmemoryReserved = genruntime.ClonePointerToString(configuration.MaxmemoryReserved)

	// RdbBackupEnabled
	destination.RdbBackupEnabled = genruntime.ClonePointerToString(configuration.RdbBackupEnabled)

	// RdbBackupFrequency
	destination.RdbBackupFrequency = genruntime.ClonePointerToString(configuration.RdbBackupFrequency)

	// RdbBackupMaxSnapshotCount
	destination.RdbBackupMaxSnapshotCount = genruntime.ClonePointerToString(configuration.RdbBackupMaxSnapshotCount)

	// RdbStorageConnectionString
	destination.RdbStorageConnectionString = genruntime.ClonePointerToString(configuration.RdbStorageConnectionString)

	// ZonalConfiguration
	destination.ZonalConfiguration = genruntime.ClonePointerToString(configuration.ZonalConfiguration)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type RedisOperatorSpec struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Secrets     *RedisOperatorSecrets  `json:"secrets,omitempty"`
}

// AssignPropertiesFromRedisOperatorSpec populates our RedisOperatorSpec from the provided source RedisOperatorSpec
func (operator *RedisOperatorSpec) AssignPropertiesFromRedisOperatorSpec(source *v20201201s.RedisOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Secrets
	if source.Secrets != nil {
		var secret RedisOperatorSecrets
		err := secret.AssignPropertiesFromRedisOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRedisOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		operator.PropertyBag = propertyBag
	} else {
		operator.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisOperatorSpec populates the provided destination RedisOperatorSpec from our RedisOperatorSpec
func (operator *RedisOperatorSpec) AssignPropertiesToRedisOperatorSpec(destination *v20201201s.RedisOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(operator.PropertyBag)

	// Secrets
	if operator.Secrets != nil {
		var secret v20201201s.RedisOperatorSecrets
		err := operator.Secrets.AssignPropertiesToRedisOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRedisOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.Sku
// Deprecated version of Sku. Use v1beta20201201.Sku instead
type Sku struct {
	Capacity    *int                   `json:"capacity,omitempty"`
	Family      *string                `json:"family,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *alpha20210301s.Sku) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	if propertyBag.Contains("Family") {
		var family string
		err := propertyBag.Pull("Family", &family)
		if err != nil {
			return errors.Wrap(err, "pulling 'Family' from propertyBag")
		}

		sku.Family = &family
	} else {
		sku.Family = nil
	}

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		sku.PropertyBag = propertyBag
	} else {
		sku.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *alpha20210301s.Sku) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sku.PropertyBag)

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Family
	if sku.Family != nil {
		propertyBag.Add("Family", *sku.Family)
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.Sku_STATUS
// Deprecated version of Sku_STATUS. Use v1beta20201201.Sku_STATUS instead
type Sku_STATUS struct {
	Capacity    *int                   `json:"capacity,omitempty"`
	Family      *string                `json:"family,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSku_STATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesFromSku_STATUS(source *alpha20210301s.Sku_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	if propertyBag.Contains("Family") {
		var family string
		err := propertyBag.Pull("Family", &family)
		if err != nil {
			return errors.Wrap(err, "pulling 'Family' from propertyBag")
		}

		sku.Family = &family
	} else {
		sku.Family = nil
	}

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		sku.PropertyBag = propertyBag
	} else {
		sku.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku_STATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesToSku_STATUS(destination *alpha20210301s.Sku_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sku.PropertyBag)

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Family
	if sku.Family != nil {
		propertyBag.Add("Family", *sku.Family)
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisOperatorSecrets
type RedisOperatorSecrets struct {
	HostName     *genruntime.SecretDestination `json:"hostName,omitempty"`
	Port         *genruntime.SecretDestination `json:"port,omitempty"`
	PrimaryKey   *genruntime.SecretDestination `json:"primaryKey,omitempty"`
	PropertyBag  genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SSLPort      *genruntime.SecretDestination `json:"sslPort,omitempty"`
	SecondaryKey *genruntime.SecretDestination `json:"secondaryKey,omitempty"`
}

// AssignPropertiesFromRedisOperatorSecrets populates our RedisOperatorSecrets from the provided source RedisOperatorSecrets
func (secrets *RedisOperatorSecrets) AssignPropertiesFromRedisOperatorSecrets(source *v20201201s.RedisOperatorSecrets) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// HostName
	if source.HostName != nil {
		hostName := source.HostName.Copy()
		secrets.HostName = &hostName
	} else {
		secrets.HostName = nil
	}

	// Port
	if source.Port != nil {
		port := source.Port.Copy()
		secrets.Port = &port
	} else {
		secrets.Port = nil
	}

	// PrimaryKey
	if source.PrimaryKey != nil {
		primaryKey := source.PrimaryKey.Copy()
		secrets.PrimaryKey = &primaryKey
	} else {
		secrets.PrimaryKey = nil
	}

	// SSLPort
	if source.SSLPort != nil {
		sslPort := source.SSLPort.Copy()
		secrets.SSLPort = &sslPort
	} else {
		secrets.SSLPort = nil
	}

	// SecondaryKey
	if source.SecondaryKey != nil {
		secondaryKey := source.SecondaryKey.Copy()
		secrets.SecondaryKey = &secondaryKey
	} else {
		secrets.SecondaryKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		secrets.PropertyBag = propertyBag
	} else {
		secrets.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisOperatorSecrets populates the provided destination RedisOperatorSecrets from our RedisOperatorSecrets
func (secrets *RedisOperatorSecrets) AssignPropertiesToRedisOperatorSecrets(destination *v20201201s.RedisOperatorSecrets) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(secrets.PropertyBag)

	// HostName
	if secrets.HostName != nil {
		hostName := secrets.HostName.Copy()
		destination.HostName = &hostName
	} else {
		destination.HostName = nil
	}

	// Port
	if secrets.Port != nil {
		port := secrets.Port.Copy()
		destination.Port = &port
	} else {
		destination.Port = nil
	}

	// PrimaryKey
	if secrets.PrimaryKey != nil {
		primaryKey := secrets.PrimaryKey.Copy()
		destination.PrimaryKey = &primaryKey
	} else {
		destination.PrimaryKey = nil
	}

	// SSLPort
	if secrets.SSLPort != nil {
		sslPort := secrets.SSLPort.Copy()
		destination.SSLPort = &sslPort
	} else {
		destination.SSLPort = nil
	}

	// SecondaryKey
	if secrets.SecondaryKey != nil {
		secondaryKey := secrets.SecondaryKey.Copy()
		destination.SecondaryKey = &secondaryKey
	} else {
		destination.SecondaryKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
