// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201storage

import (
	"fmt"
	alpha20210301s "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	v20201201s "github.com/Azure/azure-service-operator/v2/api/cache/v1beta20201201storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1alpha1api20201201.Redis
// Deprecated version of Redis. Use v1beta20201201.Redis instead
type Redis struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Redis_Spec           `json:"spec,omitempty"`
	Status            RedisResource_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Redis{}

// GetConditions returns the conditions of the resource
func (redis *Redis) GetConditions() conditions.Conditions {
	return redis.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redis *Redis) SetConditions(conditions conditions.Conditions) {
	redis.Status.Conditions = conditions
}

var _ conversion.Convertible = &Redis{}

// ConvertFrom populates our Redis from the provided hub Redis
func (redis *Redis) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20201201s.Redis)
	if !ok {
		return fmt.Errorf("expected cache/v1beta20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesFromRedis(source)
}

// ConvertTo populates the provided hub Redis from our Redis
func (redis *Redis) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20201201s.Redis)
	if !ok {
		return fmt.Errorf("expected cache/v1beta20201201storage/Redis but received %T instead", hub)
	}

	return redis.AssignPropertiesToRedis(destination)
}

var _ genruntime.KubernetesResource = &Redis{}

// AzureName returns the Azure name of the resource
func (redis *Redis) AzureName() string {
	return redis.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2020-12-01"
func (redis Redis) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (redis *Redis) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (redis *Redis) GetSpec() genruntime.ConvertibleSpec {
	return &redis.Spec
}

// GetStatus returns the status of this resource
func (redis *Redis) GetStatus() genruntime.ConvertibleStatus {
	return &redis.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redis"
func (redis *Redis) GetType() string {
	return "Microsoft.Cache/redis"
}

// NewEmptyStatus returns a new empty (blank) status
func (redis *Redis) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RedisResource_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (redis *Redis) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redis.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redis.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redis *Redis) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RedisResource_Status); ok {
		redis.Status = *st
		return nil
	}

	// Convert status to required version
	var st RedisResource_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redis.Status = st
	return nil
}

// AssignPropertiesFromRedis populates our Redis from the provided source Redis
func (redis *Redis) AssignPropertiesFromRedis(source *v20201201s.Redis) error {

	// ObjectMeta
	redis.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Redis_Spec
	err := spec.AssignPropertiesFromRedisSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedisSpec() to populate field Spec")
	}
	redis.Spec = spec

	// Status
	var status RedisResource_Status
	err = status.AssignPropertiesFromRedisResourceStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedisResourceStatus() to populate field Status")
	}
	redis.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedis populates the provided destination Redis from our Redis
func (redis *Redis) AssignPropertiesToRedis(destination *v20201201s.Redis) error {

	// ObjectMeta
	destination.ObjectMeta = *redis.ObjectMeta.DeepCopy()

	// Spec
	var spec v20201201s.Redis_Spec
	err := redis.Spec.AssignPropertiesToRedisSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedisSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20201201s.RedisResource_Status
	err = redis.Status.AssignPropertiesToRedisResourceStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedisResourceStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redis *Redis) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redis.Spec.OriginalVersion,
		Kind:    "Redis",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1alpha1api20201201.Redis
// Deprecated version of Redis. Use v1beta20201201.Redis instead
type RedisList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Redis `json:"items"`
}

// Storage version of v1alpha1api20201201.APIVersion
// Deprecated version of APIVersion. Use v1beta20201201.APIVersion instead
// +kubebuilder:validation:Enum={"2020-12-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2020-12-01")

// Storage version of v1alpha1api20201201.RedisResource_Status
// Deprecated version of RedisResource_Status. Use v1beta20201201.RedisResource_Status instead
type RedisResource_Status struct {
	Conditions                 []conditions.Condition                                 `json:"conditions,omitempty"`
	EnableNonSslPort           *bool                                                  `json:"enableNonSslPort,omitempty"`
	HostName                   *string                                                `json:"hostName,omitempty"`
	Id                         *string                                                `json:"id,omitempty"`
	Instances                  []RedisInstanceDetails_Status                          `json:"instances,omitempty"`
	LinkedServers              []RedisLinkedServer_Status                             `json:"linkedServers,omitempty"`
	Location                   *string                                                `json:"location,omitempty"`
	MinimumTlsVersion          *string                                                `json:"minimumTlsVersion,omitempty"`
	Name                       *string                                                `json:"name,omitempty"`
	Port                       *int                                                   `json:"port,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	PropertyBag                genruntime.PropertyBag                                 `json:"$propertyBag,omitempty"`
	ProvisioningState          *string                                                `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *string                                                `json:"publicNetworkAccess,omitempty"`
	RedisConfiguration         map[string]string                                      `json:"redisConfiguration,omitempty"`
	RedisVersion               *string                                                `json:"redisVersion,omitempty"`
	ReplicasPerMaster          *int                                                   `json:"replicasPerMaster,omitempty"`
	ReplicasPerPrimary         *int                                                   `json:"replicasPerPrimary,omitempty"`
	ShardCount                 *int                                                   `json:"shardCount,omitempty"`
	Sku                        *Sku_Status                                            `json:"sku,omitempty"`
	SslPort                    *int                                                   `json:"sslPort,omitempty"`
	StaticIP                   *string                                                `json:"staticIP,omitempty"`
	SubnetId                   *string                                                `json:"subnetId,omitempty"`
	Tags                       map[string]string                                      `json:"tags,omitempty"`
	TenantSettings             map[string]string                                      `json:"tenantSettings,omitempty"`
	Type                       *string                                                `json:"type,omitempty"`
	Zones                      []string                                               `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RedisResource_Status{}

// ConvertStatusFrom populates our RedisResource_Status from the provided source
func (resource *RedisResource_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20201201s.RedisResource_Status)
	if ok {
		// Populate our instance from source
		return resource.AssignPropertiesFromRedisResourceStatus(src)
	}

	// Convert to an intermediate form
	src = &v20201201s.RedisResource_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = resource.AssignPropertiesFromRedisResourceStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RedisResource_Status
func (resource *RedisResource_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20201201s.RedisResource_Status)
	if ok {
		// Populate destination from our instance
		return resource.AssignPropertiesToRedisResourceStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20201201s.RedisResource_Status{}
	err := resource.AssignPropertiesToRedisResourceStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignPropertiesFromRedisResourceStatus populates our RedisResource_Status from the provided source RedisResource_Status
func (resource *RedisResource_Status) AssignPropertiesFromRedisResourceStatus(source *v20201201s.RedisResource_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	resource.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		resource.EnableNonSslPort = &enableNonSslPort
	} else {
		resource.EnableNonSslPort = nil
	}

	// HostName
	resource.HostName = genruntime.ClonePointerToString(source.HostName)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Instances
	if source.Instances != nil {
		instanceList := make([]RedisInstanceDetails_Status, len(source.Instances))
		for instanceIndex, instanceItem := range source.Instances {
			// Shadow the loop variable to avoid aliasing
			instanceItem := instanceItem
			var instance RedisInstanceDetails_Status
			err := instance.AssignPropertiesFromRedisInstanceDetailsStatus(&instanceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRedisInstanceDetailsStatus() to populate field Instances")
			}
			instanceList[instanceIndex] = instance
		}
		resource.Instances = instanceList
	} else {
		resource.Instances = nil
	}

	// LinkedServers
	if source.LinkedServers != nil {
		linkedServerList := make([]RedisLinkedServer_Status, len(source.LinkedServers))
		for linkedServerIndex, linkedServerItem := range source.LinkedServers {
			// Shadow the loop variable to avoid aliasing
			linkedServerItem := linkedServerItem
			var linkedServer RedisLinkedServer_Status
			err := linkedServer.AssignPropertiesFromRedisLinkedServerStatus(&linkedServerItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromRedisLinkedServerStatus() to populate field LinkedServers")
			}
			linkedServerList[linkedServerIndex] = linkedServer
		}
		resource.LinkedServers = linkedServerList
	} else {
		resource.LinkedServers = nil
	}

	// Location
	resource.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	resource.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// Name
	resource.Name = genruntime.ClonePointerToString(source.Name)

	// Port
	resource.Port = genruntime.ClonePointerToInt(source.Port)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnectionStatusSubResourceEmbeddedStash alpha20210301s.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionStatusSubResourceEmbeddedStash.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnection_Status_SubResourceEmbeddedStash from PrivateEndpointConnections")
			}
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err = privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionStatusSubResourceEmbeddedStash)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections from PrivateEndpointConnection_Status_SubResourceEmbeddedStash")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		resource.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		resource.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	resource.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// PublicNetworkAccess
	resource.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// RedisConfiguration
	resource.RedisConfiguration = genruntime.CloneMapOfStringToString(source.RedisConfiguration)

	// RedisVersion
	resource.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	resource.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	resource.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	resource.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var skuStatusStash alpha20210301s.Sku_Status
		err := skuStatusStash.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku_StatusStash from Sku")
		}
		var sku Sku_Status
		err = sku.AssignPropertiesFromSkuStatus(&skuStatusStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku from Sku_StatusStash")
		}
		resource.Sku = &sku
	} else {
		resource.Sku = nil
	}

	// SslPort
	resource.SslPort = genruntime.ClonePointerToInt(source.SslPort)

	// StaticIP
	resource.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetId
	resource.SubnetId = genruntime.ClonePointerToString(source.SubnetId)

	// Tags
	resource.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	resource.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Type
	resource.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	resource.Zones = genruntime.CloneSliceOfString(source.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		resource.PropertyBag = propertyBag
	} else {
		resource.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisResourceStatus populates the provided destination RedisResource_Status from our RedisResource_Status
func (resource *RedisResource_Status) AssignPropertiesToRedisResourceStatus(destination *v20201201s.RedisResource_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(resource.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(resource.Conditions)

	// EnableNonSslPort
	if resource.EnableNonSslPort != nil {
		enableNonSslPort := *resource.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(resource.HostName)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Instances
	if resource.Instances != nil {
		instanceList := make([]v20201201s.RedisInstanceDetails_Status, len(resource.Instances))
		for instanceIndex, instanceItem := range resource.Instances {
			// Shadow the loop variable to avoid aliasing
			instanceItem := instanceItem
			var instance v20201201s.RedisInstanceDetails_Status
			err := instanceItem.AssignPropertiesToRedisInstanceDetailsStatus(&instance)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRedisInstanceDetailsStatus() to populate field Instances")
			}
			instanceList[instanceIndex] = instance
		}
		destination.Instances = instanceList
	} else {
		destination.Instances = nil
	}

	// LinkedServers
	if resource.LinkedServers != nil {
		linkedServerList := make([]v20201201s.RedisLinkedServer_Status, len(resource.LinkedServers))
		for linkedServerIndex, linkedServerItem := range resource.LinkedServers {
			// Shadow the loop variable to avoid aliasing
			linkedServerItem := linkedServerItem
			var linkedServer v20201201s.RedisLinkedServer_Status
			err := linkedServerItem.AssignPropertiesToRedisLinkedServerStatus(&linkedServer)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToRedisLinkedServerStatus() to populate field LinkedServers")
			}
			linkedServerList[linkedServerIndex] = linkedServer
		}
		destination.LinkedServers = linkedServerList
	} else {
		destination.LinkedServers = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(resource.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(resource.MinimumTlsVersion)

	// Name
	destination.Name = genruntime.ClonePointerToString(resource.Name)

	// Port
	destination.Port = genruntime.ClonePointerToInt(resource.Port)

	// PrivateEndpointConnections
	if resource.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20201201s.PrivateEndpointConnection_Status_SubResourceEmbedded, len(resource.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range resource.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnectionStatusSubResourceEmbeddedStash alpha20210301s.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionStatusSubResourceEmbeddedStash)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnection_Status_SubResourceEmbeddedStash from PrivateEndpointConnections")
			}
			var privateEndpointConnection v20201201s.PrivateEndpointConnection_Status_SubResourceEmbedded
			err = privateEndpointConnectionStatusSubResourceEmbeddedStash.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections from PrivateEndpointConnection_Status_SubResourceEmbeddedStash")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(resource.ProvisioningState)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(resource.PublicNetworkAccess)

	// RedisConfiguration
	destination.RedisConfiguration = genruntime.CloneMapOfStringToString(resource.RedisConfiguration)

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(resource.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(resource.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(resource.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(resource.ShardCount)

	// Sku
	if resource.Sku != nil {
		var skuStatusStash alpha20210301s.Sku_Status
		err := resource.Sku.AssignPropertiesToSkuStatus(&skuStatusStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku_StatusStash from Sku")
		}
		var sku v20201201s.Sku_Status
		err = skuStatusStash.AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku from Sku_StatusStash")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SslPort
	destination.SslPort = genruntime.ClonePointerToInt(resource.SslPort)

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(resource.StaticIP)

	// SubnetId
	destination.SubnetId = genruntime.ClonePointerToString(resource.SubnetId)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(resource.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(resource.TenantSettings)

	// Type
	destination.Type = genruntime.ClonePointerToString(resource.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(resource.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.Redis_Spec
type Redis_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName         string             `json:"azureName,omitempty"`
	EnableNonSslPort  *bool              `json:"enableNonSslPort,omitempty"`
	Location          *string            `json:"location,omitempty"`
	MinimumTlsVersion *string            `json:"minimumTlsVersion,omitempty"`
	OperatorSpec      *RedisOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion   string             `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag         genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	PublicNetworkAccess *string                            `json:"publicNetworkAccess,omitempty"`
	RedisConfiguration  map[string]string                  `json:"redisConfiguration,omitempty"`
	RedisVersion        *string                            `json:"redisVersion,omitempty"`
	ReplicasPerMaster   *int                               `json:"replicasPerMaster,omitempty"`
	ReplicasPerPrimary  *int                               `json:"replicasPerPrimary,omitempty"`
	ShardCount          *int                               `json:"shardCount,omitempty"`
	Sku                 *Sku                               `json:"sku,omitempty"`
	StaticIP            *string                            `json:"staticIP,omitempty"`
	SubnetReference     *genruntime.ResourceReference      `armReference:"SubnetId" json:"subnetReference,omitempty"`
	Tags                map[string]string                  `json:"tags,omitempty"`
	TenantSettings      map[string]string                  `json:"tenantSettings,omitempty"`
	Zones               []string                           `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Redis_Spec{}

// ConvertSpecFrom populates our Redis_Spec from the provided source
func (redis *Redis_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20201201s.Redis_Spec)
	if ok {
		// Populate our instance from source
		return redis.AssignPropertiesFromRedisSpec(src)
	}

	// Convert to an intermediate form
	src = &v20201201s.Redis_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redis.AssignPropertiesFromRedisSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Redis_Spec
func (redis *Redis_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20201201s.Redis_Spec)
	if ok {
		// Populate destination from our instance
		return redis.AssignPropertiesToRedisSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20201201s.Redis_Spec{}
	err := redis.AssignPropertiesToRedisSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedisSpec populates our Redis_Spec from the provided source Redis_Spec
func (redis *Redis_Spec) AssignPropertiesFromRedisSpec(source *v20201201s.Redis_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	redis.AzureName = source.AzureName

	// EnableNonSslPort
	if source.EnableNonSslPort != nil {
		enableNonSslPort := *source.EnableNonSslPort
		redis.EnableNonSslPort = &enableNonSslPort
	} else {
		redis.EnableNonSslPort = nil
	}

	// Location
	redis.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	redis.MinimumTlsVersion = genruntime.ClonePointerToString(source.MinimumTlsVersion)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec RedisOperatorSpec
		err := operatorSpec.AssignPropertiesFromRedisOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRedisOperatorSpec() to populate field OperatorSpec")
		}
		redis.OperatorSpec = &operatorSpec
	} else {
		redis.OperatorSpec = nil
	}

	// OriginalVersion
	redis.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		redis.Owner = &owner
	} else {
		redis.Owner = nil
	}

	// PublicNetworkAccess
	redis.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// RedisConfiguration
	redis.RedisConfiguration = genruntime.CloneMapOfStringToString(source.RedisConfiguration)

	// RedisVersion
	redis.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ReplicasPerMaster
	redis.ReplicasPerMaster = genruntime.ClonePointerToInt(source.ReplicasPerMaster)

	// ReplicasPerPrimary
	redis.ReplicasPerPrimary = genruntime.ClonePointerToInt(source.ReplicasPerPrimary)

	// ShardCount
	redis.ShardCount = genruntime.ClonePointerToInt(source.ShardCount)

	// Sku
	if source.Sku != nil {
		var skuStash alpha20210301s.Sku
		err := skuStash.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field SkuStash from Sku")
		}
		var sku Sku
		err = sku.AssignPropertiesFromSku(&skuStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku from SkuStash")
		}
		redis.Sku = &sku
	} else {
		redis.Sku = nil
	}

	// StaticIP
	redis.StaticIP = genruntime.ClonePointerToString(source.StaticIP)

	// SubnetReference
	if source.SubnetReference != nil {
		subnetReference := source.SubnetReference.Copy()
		redis.SubnetReference = &subnetReference
	} else {
		redis.SubnetReference = nil
	}

	// Tags
	redis.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TenantSettings
	redis.TenantSettings = genruntime.CloneMapOfStringToString(source.TenantSettings)

	// Zones
	redis.Zones = genruntime.CloneSliceOfString(source.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		redis.PropertyBag = propertyBag
	} else {
		redis.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisSpec populates the provided destination Redis_Spec from our Redis_Spec
func (redis *Redis_Spec) AssignPropertiesToRedisSpec(destination *v20201201s.Redis_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(redis.PropertyBag)

	// AzureName
	destination.AzureName = redis.AzureName

	// EnableNonSslPort
	if redis.EnableNonSslPort != nil {
		enableNonSslPort := *redis.EnableNonSslPort
		destination.EnableNonSslPort = &enableNonSslPort
	} else {
		destination.EnableNonSslPort = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(redis.Location)

	// MinimumTlsVersion
	destination.MinimumTlsVersion = genruntime.ClonePointerToString(redis.MinimumTlsVersion)

	// OperatorSpec
	if redis.OperatorSpec != nil {
		var operatorSpec v20201201s.RedisOperatorSpec
		err := redis.OperatorSpec.AssignPropertiesToRedisOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRedisOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = redis.OriginalVersion

	// Owner
	if redis.Owner != nil {
		owner := redis.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(redis.PublicNetworkAccess)

	// RedisConfiguration
	destination.RedisConfiguration = genruntime.CloneMapOfStringToString(redis.RedisConfiguration)

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(redis.RedisVersion)

	// ReplicasPerMaster
	destination.ReplicasPerMaster = genruntime.ClonePointerToInt(redis.ReplicasPerMaster)

	// ReplicasPerPrimary
	destination.ReplicasPerPrimary = genruntime.ClonePointerToInt(redis.ReplicasPerPrimary)

	// ShardCount
	destination.ShardCount = genruntime.ClonePointerToInt(redis.ShardCount)

	// Sku
	if redis.Sku != nil {
		var skuStash alpha20210301s.Sku
		err := redis.Sku.AssignPropertiesToSku(&skuStash)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field SkuStash from Sku")
		}
		var sku v20201201s.Sku
		err = skuStash.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku from SkuStash")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StaticIP
	destination.StaticIP = genruntime.ClonePointerToString(redis.StaticIP)

	// SubnetReference
	if redis.SubnetReference != nil {
		subnetReference := redis.SubnetReference.Copy()
		destination.SubnetReference = &subnetReference
	} else {
		destination.SubnetReference = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redis.Tags)

	// TenantSettings
	destination.TenantSettings = genruntime.CloneMapOfStringToString(redis.TenantSettings)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redis.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.PrivateEndpointConnection_Status_SubResourceEmbedded
// Deprecated version of PrivateEndpointConnection_Status_SubResourceEmbedded. Use v1beta20201201.PrivateEndpointConnection_Status_SubResourceEmbedded instead
type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *alpha20210301s.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		embedded.PropertyBag = propertyBag
	} else {
		embedded.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *alpha20210301s.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(embedded.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisInstanceDetails_Status
// Deprecated version of RedisInstanceDetails_Status. Use v1beta20201201.RedisInstanceDetails_Status instead
type RedisInstanceDetails_Status struct {
	IsMaster    *bool                  `json:"isMaster,omitempty"`
	IsPrimary   *bool                  `json:"isPrimary,omitempty"`
	NonSslPort  *int                   `json:"nonSslPort,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ShardId     *int                   `json:"shardId,omitempty"`
	SslPort     *int                   `json:"sslPort,omitempty"`
	Zone        *string                `json:"zone,omitempty"`
}

// AssignPropertiesFromRedisInstanceDetailsStatus populates our RedisInstanceDetails_Status from the provided source RedisInstanceDetails_Status
func (details *RedisInstanceDetails_Status) AssignPropertiesFromRedisInstanceDetailsStatus(source *v20201201s.RedisInstanceDetails_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// IsMaster
	if source.IsMaster != nil {
		isMaster := *source.IsMaster
		details.IsMaster = &isMaster
	} else {
		details.IsMaster = nil
	}

	// IsPrimary
	if source.IsPrimary != nil {
		isPrimary := *source.IsPrimary
		details.IsPrimary = &isPrimary
	} else {
		details.IsPrimary = nil
	}

	// NonSslPort
	details.NonSslPort = genruntime.ClonePointerToInt(source.NonSslPort)

	// ShardId
	details.ShardId = genruntime.ClonePointerToInt(source.ShardId)

	// SslPort
	details.SslPort = genruntime.ClonePointerToInt(source.SslPort)

	// Zone
	details.Zone = genruntime.ClonePointerToString(source.Zone)

	// Update the property bag
	if len(propertyBag) > 0 {
		details.PropertyBag = propertyBag
	} else {
		details.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisInstanceDetailsStatus populates the provided destination RedisInstanceDetails_Status from our RedisInstanceDetails_Status
func (details *RedisInstanceDetails_Status) AssignPropertiesToRedisInstanceDetailsStatus(destination *v20201201s.RedisInstanceDetails_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(details.PropertyBag)

	// IsMaster
	if details.IsMaster != nil {
		isMaster := *details.IsMaster
		destination.IsMaster = &isMaster
	} else {
		destination.IsMaster = nil
	}

	// IsPrimary
	if details.IsPrimary != nil {
		isPrimary := *details.IsPrimary
		destination.IsPrimary = &isPrimary
	} else {
		destination.IsPrimary = nil
	}

	// NonSslPort
	destination.NonSslPort = genruntime.ClonePointerToInt(details.NonSslPort)

	// ShardId
	destination.ShardId = genruntime.ClonePointerToInt(details.ShardId)

	// SslPort
	destination.SslPort = genruntime.ClonePointerToInt(details.SslPort)

	// Zone
	destination.Zone = genruntime.ClonePointerToString(details.Zone)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisLinkedServer_Status
// Deprecated version of RedisLinkedServer_Status. Use v1beta20201201.RedisLinkedServer_Status instead
type RedisLinkedServer_Status struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromRedisLinkedServerStatus populates our RedisLinkedServer_Status from the provided source RedisLinkedServer_Status
func (server *RedisLinkedServer_Status) AssignPropertiesFromRedisLinkedServerStatus(source *v20201201s.RedisLinkedServer_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	server.Id = genruntime.ClonePointerToString(source.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		server.PropertyBag = propertyBag
	} else {
		server.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisLinkedServerStatus populates the provided destination RedisLinkedServer_Status from our RedisLinkedServer_Status
func (server *RedisLinkedServer_Status) AssignPropertiesToRedisLinkedServerStatus(destination *v20201201s.RedisLinkedServer_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(server.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(server.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type RedisOperatorSpec struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Secrets     *RedisOperatorSecrets  `json:"secrets,omitempty"`
}

// AssignPropertiesFromRedisOperatorSpec populates our RedisOperatorSpec from the provided source RedisOperatorSpec
func (operator *RedisOperatorSpec) AssignPropertiesFromRedisOperatorSpec(source *v20201201s.RedisOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Secrets
	if source.Secrets != nil {
		var secret RedisOperatorSecrets
		err := secret.AssignPropertiesFromRedisOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRedisOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		operator.PropertyBag = propertyBag
	} else {
		operator.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisOperatorSpec populates the provided destination RedisOperatorSpec from our RedisOperatorSpec
func (operator *RedisOperatorSpec) AssignPropertiesToRedisOperatorSpec(destination *v20201201s.RedisOperatorSpec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(operator.PropertyBag)

	// Secrets
	if operator.Secrets != nil {
		var secret v20201201s.RedisOperatorSecrets
		err := operator.Secrets.AssignPropertiesToRedisOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRedisOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.Sku
// Deprecated version of Sku. Use v1beta20201201.Sku instead
type Sku struct {
	Capacity    *int                   `json:"capacity,omitempty"`
	Family      *string                `json:"family,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *alpha20210301s.Sku) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	if propertyBag.Contains("Family") {
		var family string
		err := propertyBag.Pull("Family", &family)
		if err != nil {
			return errors.Wrap(err, "pulling 'Family' from propertyBag")
		}

		sku.Family = &family
	} else {
		sku.Family = nil
	}

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		sku.PropertyBag = propertyBag
	} else {
		sku.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *alpha20210301s.Sku) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sku.PropertyBag)

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Family
	if sku.Family != nil {
		propertyBag.Add("Family", *sku.Family)
	} else {
		propertyBag.Remove("Family")
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.Sku_Status
// Deprecated version of Sku_Status. Use v1beta20201201.Sku_Status instead
type Sku_Status struct {
	Capacity    *int                   `json:"capacity,omitempty"`
	Family      *string                `json:"family,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSkuStatus(source *alpha20210301s.Sku_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	if propertyBag.Contains("Family") {
		var family string
		err := propertyBag.Pull("Family", &family)
		if err != nil {
			return errors.Wrap(err, "pulling 'Family' from propertyBag")
		}

		sku.Family = &family
	} else {
		sku.Family = nil
	}

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		sku.PropertyBag = propertyBag
	} else {
		sku.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSkuStatus(destination *alpha20210301s.Sku_Status) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(sku.PropertyBag)

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Family
	if sku.Family != nil {
		propertyBag.Add("Family", *sku.Family)
	} else {
		propertyBag.Remove("Family")
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Storage version of v1alpha1api20201201.RedisOperatorSecrets
type RedisOperatorSecrets struct {
	HostName     *genruntime.SecretDestination `json:"hostName,omitempty"`
	Port         *genruntime.SecretDestination `json:"port,omitempty"`
	PrimaryKey   *genruntime.SecretDestination `json:"primaryKey,omitempty"`
	PropertyBag  genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SSLPort      *genruntime.SecretDestination `json:"sslPort,omitempty"`
	SecondaryKey *genruntime.SecretDestination `json:"secondaryKey,omitempty"`
}

// AssignPropertiesFromRedisOperatorSecrets populates our RedisOperatorSecrets from the provided source RedisOperatorSecrets
func (secrets *RedisOperatorSecrets) AssignPropertiesFromRedisOperatorSecrets(source *v20201201s.RedisOperatorSecrets) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// HostName
	if source.HostName != nil {
		hostName := source.HostName.Copy()
		secrets.HostName = &hostName
	} else {
		secrets.HostName = nil
	}

	// Port
	if source.Port != nil {
		port := source.Port.Copy()
		secrets.Port = &port
	} else {
		secrets.Port = nil
	}

	// PrimaryKey
	if source.PrimaryKey != nil {
		primaryKey := source.PrimaryKey.Copy()
		secrets.PrimaryKey = &primaryKey
	} else {
		secrets.PrimaryKey = nil
	}

	// SSLPort
	if source.SSLPort != nil {
		sslPort := source.SSLPort.Copy()
		secrets.SSLPort = &sslPort
	} else {
		secrets.SSLPort = nil
	}

	// SecondaryKey
	if source.SecondaryKey != nil {
		secondaryKey := source.SecondaryKey.Copy()
		secrets.SecondaryKey = &secondaryKey
	} else {
		secrets.SecondaryKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		secrets.PropertyBag = propertyBag
	} else {
		secrets.PropertyBag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRedisOperatorSecrets populates the provided destination RedisOperatorSecrets from our RedisOperatorSecrets
func (secrets *RedisOperatorSecrets) AssignPropertiesToRedisOperatorSecrets(destination *v20201201s.RedisOperatorSecrets) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(secrets.PropertyBag)

	// HostName
	if secrets.HostName != nil {
		hostName := secrets.HostName.Copy()
		destination.HostName = &hostName
	} else {
		destination.HostName = nil
	}

	// Port
	if secrets.Port != nil {
		port := secrets.Port.Copy()
		destination.Port = &port
	} else {
		destination.Port = nil
	}

	// PrimaryKey
	if secrets.PrimaryKey != nil {
		primaryKey := secrets.PrimaryKey.Copy()
		destination.PrimaryKey = &primaryKey
	} else {
		destination.PrimaryKey = nil
	}

	// SSLPort
	if secrets.SSLPort != nil {
		sslPort := secrets.SSLPort.Copy()
		destination.SSLPort = &sslPort
	} else {
		destination.SSLPort = nil
	}

	// SecondaryKey
	if secrets.SecondaryKey != nil {
		secondaryKey := secrets.SecondaryKey.Copy()
		destination.SecondaryKey = &secondaryKey
	} else {
		destination.SecondaryKey = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Redis{}, &RedisList{})
}
