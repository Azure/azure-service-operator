// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisEnterprise_Database_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisEnterprise_Database_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisEnterprise_Database_STATUS_ARM, RedisEnterprise_Database_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisEnterprise_Database_STATUS_ARM runs a test to see if a specific instance of RedisEnterprise_Database_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisEnterprise_Database_STATUS_ARM(subject RedisEnterprise_Database_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisEnterprise_Database_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisEnterprise_Database_STATUS_ARM instances for property testing - lazily instantiated by
// RedisEnterprise_Database_STATUS_ARMGenerator()
var redisEnterprise_Database_STATUS_ARMGenerator gopter.Gen

// RedisEnterprise_Database_STATUS_ARMGenerator returns a generator of RedisEnterprise_Database_STATUS_ARM instances for property testing.
// We first initialize redisEnterprise_Database_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisEnterprise_Database_STATUS_ARMGenerator() gopter.Gen {
	if redisEnterprise_Database_STATUS_ARMGenerator != nil {
		return redisEnterprise_Database_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM(generators)
	redisEnterprise_Database_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_Database_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM(generators)
	redisEnterprise_Database_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_Database_STATUS_ARM{}), generators)

	return redisEnterprise_Database_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisEnterprise_Database_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabaseProperties_STATUS_ARMGenerator())
}

func Test_DatabaseProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseProperties_STATUS_ARM, DatabaseProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseProperties_STATUS_ARM runs a test to see if a specific instance of DatabaseProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseProperties_STATUS_ARM(subject DatabaseProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseProperties_STATUS_ARMGenerator()
var databaseProperties_STATUS_ARMGenerator gopter.Gen

// DatabaseProperties_STATUS_ARMGenerator returns a generator of DatabaseProperties_STATUS_ARM instances for property testing.
// We first initialize databaseProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseProperties_STATUS_ARMGenerator() gopter.Gen {
	if databaseProperties_STATUS_ARMGenerator != nil {
		return databaseProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM(generators)
	databaseProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseProperties_STATUS_ARM(generators)
	databaseProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_STATUS_ARM{}), generators)

	return databaseProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientProtocol"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_ClientProtocol_STATUS_Encrypted, DatabaseProperties_ClientProtocol_STATUS_Plaintext))
	gens["ClusteringPolicy"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_ClusteringPolicy_STATUS_EnterpriseCluster, DatabaseProperties_ClusteringPolicy_STATUS_OSSCluster))
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_EvictionPolicy_STATUS_AllKeysLFU,
		DatabaseProperties_EvictionPolicy_STATUS_AllKeysLRU,
		DatabaseProperties_EvictionPolicy_STATUS_AllKeysRandom,
		DatabaseProperties_EvictionPolicy_STATUS_NoEviction,
		DatabaseProperties_EvictionPolicy_STATUS_VolatileLFU,
		DatabaseProperties_EvictionPolicy_STATUS_VolatileLRU,
		DatabaseProperties_EvictionPolicy_STATUS_VolatileRandom,
		DatabaseProperties_EvictionPolicy_STATUS_VolatileTTL))
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Creating,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Updating))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ResourceState_STATUS_CreateFailed,
		ResourceState_STATUS_Creating,
		ResourceState_STATUS_DeleteFailed,
		ResourceState_STATUS_Deleting,
		ResourceState_STATUS_DisableFailed,
		ResourceState_STATUS_Disabled,
		ResourceState_STATUS_Disabling,
		ResourceState_STATUS_EnableFailed,
		ResourceState_STATUS_Enabling,
		ResourceState_STATUS_Running,
		ResourceState_STATUS_UpdateFailed,
		ResourceState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForDatabaseProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Modules"] = gen.SliceOf(Module_STATUS_ARMGenerator())
	gens["Persistence"] = gen.PtrOf(Persistence_STATUS_ARMGenerator())
}

func Test_Module_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Module_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForModule_STATUS_ARM, Module_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForModule_STATUS_ARM runs a test to see if a specific instance of Module_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForModule_STATUS_ARM(subject Module_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Module_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Module_STATUS_ARM instances for property testing - lazily instantiated by Module_STATUS_ARMGenerator()
var module_STATUS_ARMGenerator gopter.Gen

// Module_STATUS_ARMGenerator returns a generator of Module_STATUS_ARM instances for property testing.
func Module_STATUS_ARMGenerator() gopter.Gen {
	if module_STATUS_ARMGenerator != nil {
		return module_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForModule_STATUS_ARM(generators)
	module_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Module_STATUS_ARM{}), generators)

	return module_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForModule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForModule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Args"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_Persistence_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Persistence_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPersistence_STATUS_ARM, Persistence_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPersistence_STATUS_ARM runs a test to see if a specific instance of Persistence_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPersistence_STATUS_ARM(subject Persistence_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Persistence_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Persistence_STATUS_ARM instances for property testing - lazily instantiated by
// Persistence_STATUS_ARMGenerator()
var persistence_STATUS_ARMGenerator gopter.Gen

// Persistence_STATUS_ARMGenerator returns a generator of Persistence_STATUS_ARM instances for property testing.
func Persistence_STATUS_ARMGenerator() gopter.Gen {
	if persistence_STATUS_ARMGenerator != nil {
		return persistence_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPersistence_STATUS_ARM(generators)
	persistence_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Persistence_STATUS_ARM{}), generators)

	return persistence_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPersistence_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPersistence_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AofEnabled"] = gen.PtrOf(gen.Bool())
	gens["AofFrequency"] = gen.PtrOf(gen.OneConstOf(Persistence_AofFrequency_STATUS_1S, Persistence_AofFrequency_STATUS_Always))
	gens["RdbEnabled"] = gen.PtrOf(gen.Bool())
	gens["RdbFrequency"] = gen.PtrOf(gen.OneConstOf(Persistence_RdbFrequency_STATUS_12H, Persistence_RdbFrequency_STATUS_1H, Persistence_RdbFrequency_STATUS_6H))
}
