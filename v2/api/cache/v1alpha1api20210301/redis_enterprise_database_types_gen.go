// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /redisenterprise/resource-manager/Microsoft.Cache/stable/2021-03-01/redisenterprise.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
type RedisEnterpriseDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisEnterpriseDatabases_SPEC `json:"spec,omitempty"`
	Status            Database_Status               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RedisEnterpriseDatabase{}

// GetConditions returns the conditions of the resource
func (database *RedisEnterpriseDatabase) GetConditions() conditions.Conditions {
	return database.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (database *RedisEnterpriseDatabase) SetConditions(conditions conditions.Conditions) {
	database.Status.Conditions = conditions
}

var _ conversion.Convertible = &RedisEnterpriseDatabase{}

// ConvertFrom populates our RedisEnterpriseDatabase from the provided hub RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210301storage.RedisEnterpriseDatabase)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20210301storage/RedisEnterpriseDatabase but received %T instead", hub)
	}

	return database.AssignPropertiesFromRedisEnterpriseDatabase(source)
}

// ConvertTo populates the provided hub RedisEnterpriseDatabase from our RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210301storage.RedisEnterpriseDatabase)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20210301storage/RedisEnterpriseDatabase but received %T instead", hub)
	}

	return database.AssignPropertiesToRedisEnterpriseDatabase(destination)
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20210301-redisenterprisedatabase,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redisenterprisedatabases,verbs=create;update,versions=v1alpha1api20210301,name=default.v1alpha1api20210301.redisenterprisedatabases.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &RedisEnterpriseDatabase{}

// Default applies defaults to the RedisEnterpriseDatabase resource
func (database *RedisEnterpriseDatabase) Default() {
	database.defaultImpl()
	var temp interface{} = database
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (database *RedisEnterpriseDatabase) defaultAzureName() {
	if database.Spec.AzureName == "" {
		database.Spec.AzureName = database.Name
	}
}

// defaultImpl applies the code generated defaults to the RedisEnterpriseDatabase resource
func (database *RedisEnterpriseDatabase) defaultImpl() { database.defaultAzureName() }

var _ genruntime.KubernetesResource = &RedisEnterpriseDatabase{}

// AzureName returns the Azure name of the resource
func (database *RedisEnterpriseDatabase) AzureName() string {
	return database.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-03-01"
func (database RedisEnterpriseDatabase) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (database *RedisEnterpriseDatabase) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (database *RedisEnterpriseDatabase) GetSpec() genruntime.ConvertibleSpec {
	return &database.Spec
}

// GetStatus returns the status of this resource
func (database *RedisEnterpriseDatabase) GetStatus() genruntime.ConvertibleStatus {
	return &database.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (database *RedisEnterpriseDatabase) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (database *RedisEnterpriseDatabase) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Database_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (database *RedisEnterpriseDatabase) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(database.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  database.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (database *RedisEnterpriseDatabase) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Database_Status); ok {
		database.Status = *st
		return nil
	}

	// Convert status to required version
	var st Database_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	database.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20210301-redisenterprisedatabase,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redisenterprisedatabases,verbs=create;update,versions=v1alpha1api20210301,name=validate.v1alpha1api20210301.redisenterprisedatabases.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &RedisEnterpriseDatabase{}

// ValidateCreate validates the creation of the resource
func (database *RedisEnterpriseDatabase) ValidateCreate() error {
	validations := database.createValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (database *RedisEnterpriseDatabase) ValidateDelete() error {
	validations := database.deleteValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (database *RedisEnterpriseDatabase) ValidateUpdate(old runtime.Object) error {
	validations := database.updateValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (database *RedisEnterpriseDatabase) createValidations() []func() error {
	return []func() error{database.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (database *RedisEnterpriseDatabase) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (database *RedisEnterpriseDatabase) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return database.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (database *RedisEnterpriseDatabase) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&database.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRedisEnterpriseDatabase populates our RedisEnterpriseDatabase from the provided source RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) AssignPropertiesFromRedisEnterpriseDatabase(source *v1alpha1api20210301storage.RedisEnterpriseDatabase) error {

	// ObjectMeta
	database.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec RedisEnterpriseDatabases_SPEC
	err := spec.AssignPropertiesFromRedisEnterpriseDatabases_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedisEnterpriseDatabases_SPEC() to populate field Spec")
	}
	database.Spec = spec

	// Status
	var status Database_Status
	err = status.AssignPropertiesFromDatabase_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabase_Status() to populate field Status")
	}
	database.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedisEnterpriseDatabase populates the provided destination RedisEnterpriseDatabase from our RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) AssignPropertiesToRedisEnterpriseDatabase(destination *v1alpha1api20210301storage.RedisEnterpriseDatabase) error {

	// ObjectMeta
	destination.ObjectMeta = *database.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC
	err := database.Spec.AssignPropertiesToRedisEnterpriseDatabases_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedisEnterpriseDatabases_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210301storage.Database_Status
	err = database.Status.AssignPropertiesToDatabase_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabase_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (database *RedisEnterpriseDatabase) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: database.Spec.OriginalVersion(),
		Kind:    "RedisEnterpriseDatabase",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /redisenterprise/resource-manager/Microsoft.Cache/stable/2021-03-01/redisenterprise.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
type RedisEnterpriseDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisEnterpriseDatabase `json:"items"`
}

type Database_Status struct {
	//ClientProtocol: Specifies whether redis clients can connect using TLS-encrypted
	//or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol *DatabaseProperties_ClientProtocol_Status `json:"clientProtocol,omitempty"`

	//ClusteringPolicy: Clustering policy - default is OSSCluster. Specified at create
	//time.
	ClusteringPolicy *DatabaseProperties_ClusteringPolicy_Status `json:"clusteringPolicy,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//EvictionPolicy: Redis eviction policy - default is VolatileLRU
	EvictionPolicy *DatabaseProperties_EvictionPolicy_Status `json:"evictionPolicy,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Modules: Optional set of redis modules to enable in this database - modules can
	//only be added at creation time.
	Modules []Module_Status `json:"modules,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//Persistence: Persistence settings
	Persistence *Persistence_Status `json:"persistence,omitempty"`

	//Port: TCP port of the database endpoint. Specified at create time. Defaults to
	//an available port.
	Port *int `json:"port,omitempty"`

	//ProvisioningState: Current provisioning status of the database
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceState: Current resource status of the database
	ResourceState *ResourceState_Status `json:"resourceState,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Database_Status{}

// ConvertStatusFrom populates our Database_Status from the provided source
func (database *Database_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210301storage.Database_Status)
	if ok {
		// Populate our instance from source
		return database.AssignPropertiesFromDatabase_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210301storage.Database_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = database.AssignPropertiesFromDatabase_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Database_Status
func (database *Database_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210301storage.Database_Status)
	if ok {
		// Populate destination from our instance
		return database.AssignPropertiesToDatabase_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210301storage.Database_Status{}
	err := database.AssignPropertiesToDatabase_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Database_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (database *Database_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Database_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (database *Database_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Database_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Database_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientProtocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClientProtocol != nil {
			clientProtocol := *typedInput.Properties.ClientProtocol
			database.ClientProtocol = &clientProtocol
		}
	}

	// Set property ‘ClusteringPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusteringPolicy != nil {
			clusteringPolicy := *typedInput.Properties.ClusteringPolicy
			database.ClusteringPolicy = &clusteringPolicy
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘EvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EvictionPolicy != nil {
			evictionPolicy := *typedInput.Properties.EvictionPolicy
			database.EvictionPolicy = &evictionPolicy
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		database.Id = &id
	}

	// Set property ‘Modules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Modules {
			var item1 Module_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			database.Modules = append(database.Modules, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		database.Name = &name
	}

	// Set property ‘Persistence’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Persistence != nil {
			var persistence1 Persistence_Status
			err := persistence1.PopulateFromARM(owner, *typedInput.Properties.Persistence)
			if err != nil {
				return err
			}
			persistence := persistence1
			database.Persistence = &persistence
		}
	}

	// Set property ‘Port’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Port != nil {
			port := *typedInput.Properties.Port
			database.Port = &port
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			database.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceState != nil {
			resourceState := *typedInput.Properties.ResourceState
			database.ResourceState = &resourceState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		database.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromDatabase_Status populates our Database_Status from the provided source Database_Status
func (database *Database_Status) AssignPropertiesFromDatabase_Status(source *v1alpha1api20210301storage.Database_Status) error {

	// ClientProtocol
	if source.ClientProtocol != nil {
		clientProtocol := DatabaseProperties_ClientProtocol_Status(*source.ClientProtocol)
		database.ClientProtocol = &clientProtocol
	} else {
		database.ClientProtocol = nil
	}

	// ClusteringPolicy
	if source.ClusteringPolicy != nil {
		clusteringPolicy := DatabaseProperties_ClusteringPolicy_Status(*source.ClusteringPolicy)
		database.ClusteringPolicy = &clusteringPolicy
	} else {
		database.ClusteringPolicy = nil
	}

	// Conditions
	database.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EvictionPolicy
	if source.EvictionPolicy != nil {
		evictionPolicy := DatabaseProperties_EvictionPolicy_Status(*source.EvictionPolicy)
		database.EvictionPolicy = &evictionPolicy
	} else {
		database.EvictionPolicy = nil
	}

	// Id
	database.Id = genruntime.ClonePointerToString(source.Id)

	// Modules
	if source.Modules != nil {
		moduleList := make([]Module_Status, len(source.Modules))
		for moduleIndex, moduleItem := range source.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module Module_Status
			err := module.AssignPropertiesFromModule_Status(&moduleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromModule_Status() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		database.Modules = moduleList
	} else {
		database.Modules = nil
	}

	// Name
	database.Name = genruntime.ClonePointerToString(source.Name)

	// Persistence
	if source.Persistence != nil {
		var persistence Persistence_Status
		err := persistence.AssignPropertiesFromPersistence_Status(source.Persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPersistence_Status() to populate field Persistence")
		}
		database.Persistence = &persistence
	} else {
		database.Persistence = nil
	}

	// Port
	database.Port = genruntime.ClonePointerToInt(source.Port)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		database.ProvisioningState = &provisioningState
	} else {
		database.ProvisioningState = nil
	}

	// ResourceState
	if source.ResourceState != nil {
		resourceState := ResourceState_Status(*source.ResourceState)
		database.ResourceState = &resourceState
	} else {
		database.ResourceState = nil
	}

	// Type
	database.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToDatabase_Status populates the provided destination Database_Status from our Database_Status
func (database *Database_Status) AssignPropertiesToDatabase_Status(destination *v1alpha1api20210301storage.Database_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientProtocol
	if database.ClientProtocol != nil {
		clientProtocol := string(*database.ClientProtocol)
		destination.ClientProtocol = &clientProtocol
	} else {
		destination.ClientProtocol = nil
	}

	// ClusteringPolicy
	if database.ClusteringPolicy != nil {
		clusteringPolicy := string(*database.ClusteringPolicy)
		destination.ClusteringPolicy = &clusteringPolicy
	} else {
		destination.ClusteringPolicy = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(database.Conditions)

	// EvictionPolicy
	if database.EvictionPolicy != nil {
		evictionPolicy := string(*database.EvictionPolicy)
		destination.EvictionPolicy = &evictionPolicy
	} else {
		destination.EvictionPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(database.Id)

	// Modules
	if database.Modules != nil {
		moduleList := make([]v1alpha1api20210301storage.Module_Status, len(database.Modules))
		for moduleIndex, moduleItem := range database.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module v1alpha1api20210301storage.Module_Status
			err := moduleItem.AssignPropertiesToModule_Status(&module)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToModule_Status() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		destination.Modules = moduleList
	} else {
		destination.Modules = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(database.Name)

	// Persistence
	if database.Persistence != nil {
		var persistence v1alpha1api20210301storage.Persistence_Status
		err := database.Persistence.AssignPropertiesToPersistence_Status(&persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPersistence_Status() to populate field Persistence")
		}
		destination.Persistence = &persistence
	} else {
		destination.Persistence = nil
	}

	// Port
	destination.Port = genruntime.ClonePointerToInt(database.Port)

	// ProvisioningState
	if database.ProvisioningState != nil {
		provisioningState := string(*database.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceState
	if database.ResourceState != nil {
		resourceState := string(*database.ResourceState)
		destination.ResourceState = &resourceState
	} else {
		destination.ResourceState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(database.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RedisEnterpriseDatabases_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//ClientProtocol: Specifies whether redis clients can connect using TLS-encrypted
	//or plaintext redis protocols. Default is TLS-encrypted.
	ClientProtocol *DatabaseProperties_ClientProtocol_Spec `json:"clientProtocol,omitempty"`

	//ClusteringPolicy: Clustering policy - default is OSSCluster. Specified at create
	//time.
	ClusteringPolicy *DatabaseProperties_ClusteringPolicy_Spec `json:"clusteringPolicy,omitempty"`

	//EvictionPolicy: Redis eviction policy - default is VolatileLRU
	EvictionPolicy *DatabaseProperties_EvictionPolicy_Spec `json:"evictionPolicy,omitempty"`

	//Modules: Optional set of redis modules to enable in this database - modules can
	//only be added at creation time.
	Modules []Module_Spec `json:"modules,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Persistence: Persistence settings
	Persistence *Persistence_Spec `json:"persistence,omitempty"`

	//Port: TCP port of the database endpoint. Specified at create time. Defaults to
	//an available port.
	Port *int `json:"port,omitempty"`
}

var _ genruntime.ARMTransformer = &RedisEnterpriseDatabases_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *RedisEnterpriseDatabases_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result RedisEnterpriseDatabases_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.ClientProtocol != nil ||
		spec.ClusteringPolicy != nil ||
		spec.EvictionPolicy != nil ||
		spec.Modules != nil ||
		spec.Persistence != nil ||
		spec.Port != nil {
		result.Properties = &DatabaseProperties_SpecARM{}
	}
	if spec.ClientProtocol != nil {
		clientProtocol := *spec.ClientProtocol
		result.Properties.ClientProtocol = &clientProtocol
	}
	if spec.ClusteringPolicy != nil {
		clusteringPolicy := *spec.ClusteringPolicy
		result.Properties.ClusteringPolicy = &clusteringPolicy
	}
	if spec.EvictionPolicy != nil {
		evictionPolicy := *spec.EvictionPolicy
		result.Properties.EvictionPolicy = &evictionPolicy
	}
	for _, item := range spec.Modules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Modules = append(result.Properties.Modules, itemARM.(Module_SpecARM))
	}
	if spec.Persistence != nil {
		persistenceARM, err := (*spec.Persistence).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		persistence := persistenceARM.(Persistence_SpecARM)
		result.Properties.Persistence = &persistence
	}
	if spec.Port != nil {
		port := *spec.Port
		result.Properties.Port = &port
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *RedisEnterpriseDatabases_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisEnterpriseDatabases_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *RedisEnterpriseDatabases_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisEnterpriseDatabases_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisEnterpriseDatabases_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ClientProtocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClientProtocol != nil {
			clientProtocol := *typedInput.Properties.ClientProtocol
			spec.ClientProtocol = &clientProtocol
		}
	}

	// Set property ‘ClusteringPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusteringPolicy != nil {
			clusteringPolicy := *typedInput.Properties.ClusteringPolicy
			spec.ClusteringPolicy = &clusteringPolicy
		}
	}

	// Set property ‘EvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EvictionPolicy != nil {
			evictionPolicy := *typedInput.Properties.EvictionPolicy
			spec.EvictionPolicy = &evictionPolicy
		}
	}

	// Set property ‘Modules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Modules {
			var item1 Module_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			spec.Modules = append(spec.Modules, item1)
		}
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Persistence’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Persistence != nil {
			var persistence1 Persistence_Spec
			err := persistence1.PopulateFromARM(owner, *typedInput.Properties.Persistence)
			if err != nil {
				return err
			}
			persistence := persistence1
			spec.Persistence = &persistence
		}
	}

	// Set property ‘Port’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Port != nil {
			port := *typedInput.Properties.Port
			spec.Port = &port
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RedisEnterpriseDatabases_SPEC{}

// ConvertSpecFrom populates our RedisEnterpriseDatabases_SPEC from the provided source
func (spec *RedisEnterpriseDatabases_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromRedisEnterpriseDatabases_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromRedisEnterpriseDatabases_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RedisEnterpriseDatabases_SPEC
func (spec *RedisEnterpriseDatabases_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToRedisEnterpriseDatabases_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC{}
	err := spec.AssignPropertiesToRedisEnterpriseDatabases_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedisEnterpriseDatabases_SPEC populates our RedisEnterpriseDatabases_SPEC from the provided source RedisEnterpriseDatabases_SPEC
func (spec *RedisEnterpriseDatabases_SPEC) AssignPropertiesFromRedisEnterpriseDatabases_SPEC(source *v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// ClientProtocol
	if source.ClientProtocol != nil {
		clientProtocol := DatabaseProperties_ClientProtocol_Spec(*source.ClientProtocol)
		spec.ClientProtocol = &clientProtocol
	} else {
		spec.ClientProtocol = nil
	}

	// ClusteringPolicy
	if source.ClusteringPolicy != nil {
		clusteringPolicy := DatabaseProperties_ClusteringPolicy_Spec(*source.ClusteringPolicy)
		spec.ClusteringPolicy = &clusteringPolicy
	} else {
		spec.ClusteringPolicy = nil
	}

	// EvictionPolicy
	if source.EvictionPolicy != nil {
		evictionPolicy := DatabaseProperties_EvictionPolicy_Spec(*source.EvictionPolicy)
		spec.EvictionPolicy = &evictionPolicy
	} else {
		spec.EvictionPolicy = nil
	}

	// Modules
	if source.Modules != nil {
		moduleList := make([]Module_Spec, len(source.Modules))
		for moduleIndex, moduleItem := range source.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module Module_Spec
			err := module.AssignPropertiesFromModule_Spec(&moduleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromModule_Spec() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		spec.Modules = moduleList
	} else {
		spec.Modules = nil
	}

	// Owner
	spec.Owner = source.Owner.Copy()

	// Persistence
	if source.Persistence != nil {
		var persistence Persistence_Spec
		err := persistence.AssignPropertiesFromPersistence_Spec(source.Persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPersistence_Spec() to populate field Persistence")
		}
		spec.Persistence = &persistence
	} else {
		spec.Persistence = nil
	}

	// Port
	spec.Port = genruntime.ClonePointerToInt(source.Port)

	// No error
	return nil
}

// AssignPropertiesToRedisEnterpriseDatabases_SPEC populates the provided destination RedisEnterpriseDatabases_SPEC from our RedisEnterpriseDatabases_SPEC
func (spec *RedisEnterpriseDatabases_SPEC) AssignPropertiesToRedisEnterpriseDatabases_SPEC(destination *v1alpha1api20210301storage.RedisEnterpriseDatabases_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// ClientProtocol
	if spec.ClientProtocol != nil {
		clientProtocol := string(*spec.ClientProtocol)
		destination.ClientProtocol = &clientProtocol
	} else {
		destination.ClientProtocol = nil
	}

	// ClusteringPolicy
	if spec.ClusteringPolicy != nil {
		clusteringPolicy := string(*spec.ClusteringPolicy)
		destination.ClusteringPolicy = &clusteringPolicy
	} else {
		destination.ClusteringPolicy = nil
	}

	// EvictionPolicy
	if spec.EvictionPolicy != nil {
		evictionPolicy := string(*spec.EvictionPolicy)
		destination.EvictionPolicy = &evictionPolicy
	} else {
		destination.EvictionPolicy = nil
	}

	// Modules
	if spec.Modules != nil {
		moduleList := make([]v1alpha1api20210301storage.Module_Spec, len(spec.Modules))
		for moduleIndex, moduleItem := range spec.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module v1alpha1api20210301storage.Module_Spec
			err := moduleItem.AssignPropertiesToModule_Spec(&module)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToModule_Spec() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		destination.Modules = moduleList
	} else {
		destination.Modules = nil
	}

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// Persistence
	if spec.Persistence != nil {
		var persistence v1alpha1api20210301storage.Persistence_Spec
		err := spec.Persistence.AssignPropertiesToPersistence_Spec(&persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPersistence_Spec() to populate field Persistence")
		}
		destination.Persistence = &persistence
	} else {
		destination.Persistence = nil
	}

	// Port
	destination.Port = genruntime.ClonePointerToInt(spec.Port)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *RedisEnterpriseDatabases_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *RedisEnterpriseDatabases_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

// +kubebuilder:validation:Enum={"Encrypted","Plaintext"}
type DatabaseProperties_ClientProtocol_Spec string

const (
	DatabaseProperties_ClientProtocol_SpecEncrypted = DatabaseProperties_ClientProtocol_Spec("Encrypted")
	DatabaseProperties_ClientProtocol_SpecPlaintext = DatabaseProperties_ClientProtocol_Spec("Plaintext")
)

// +kubebuilder:validation:Enum={"EnterpriseCluster","OSSCluster"}
type DatabaseProperties_ClusteringPolicy_Spec string

const (
	DatabaseProperties_ClusteringPolicy_SpecEnterpriseCluster = DatabaseProperties_ClusteringPolicy_Spec("EnterpriseCluster")
	DatabaseProperties_ClusteringPolicy_SpecOSSCluster        = DatabaseProperties_ClusteringPolicy_Spec("OSSCluster")
)

// +kubebuilder:validation:Enum={"AllKeysLFU","AllKeysLRU","AllKeysRandom","NoEviction","VolatileLFU","VolatileLRU","VolatileRandom","VolatileTTL"}
type DatabaseProperties_EvictionPolicy_Spec string

const (
	DatabaseProperties_EvictionPolicy_SpecAllKeysLFU     = DatabaseProperties_EvictionPolicy_Spec("AllKeysLFU")
	DatabaseProperties_EvictionPolicy_SpecAllKeysLRU     = DatabaseProperties_EvictionPolicy_Spec("AllKeysLRU")
	DatabaseProperties_EvictionPolicy_SpecAllKeysRandom  = DatabaseProperties_EvictionPolicy_Spec("AllKeysRandom")
	DatabaseProperties_EvictionPolicy_SpecNoEviction     = DatabaseProperties_EvictionPolicy_Spec("NoEviction")
	DatabaseProperties_EvictionPolicy_SpecVolatileLFU    = DatabaseProperties_EvictionPolicy_Spec("VolatileLFU")
	DatabaseProperties_EvictionPolicy_SpecVolatileLRU    = DatabaseProperties_EvictionPolicy_Spec("VolatileLRU")
	DatabaseProperties_EvictionPolicy_SpecVolatileRandom = DatabaseProperties_EvictionPolicy_Spec("VolatileRandom")
	DatabaseProperties_EvictionPolicy_SpecVolatileTTL    = DatabaseProperties_EvictionPolicy_Spec("VolatileTTL")
)

type Module_Spec struct {
	//Args: Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE
	//400'.
	Args *string `json:"args,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name string `json:"name"`
}

var _ genruntime.ARMTransformer = &Module_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (module *Module_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if module == nil {
		return nil, nil
	}
	var result Module_SpecARM

	// Set property ‘Args’:
	if module.Args != nil {
		args := *module.Args
		result.Args = &args
	}

	// Set property ‘Name’:
	result.Name = module.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (module *Module_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Module_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (module *Module_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Module_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Module_SpecARM, got %T", armInput)
	}

	// Set property ‘Args’:
	if typedInput.Args != nil {
		args := *typedInput.Args
		module.Args = &args
	}

	// Set property ‘Name’:
	module.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromModule_Spec populates our Module_Spec from the provided source Module_Spec
func (module *Module_Spec) AssignPropertiesFromModule_Spec(source *v1alpha1api20210301storage.Module_Spec) error {

	// Args
	module.Args = genruntime.ClonePointerToString(source.Args)

	// Name
	module.Name = genruntime.GetOptionalStringValue(source.Name)

	// No error
	return nil
}

// AssignPropertiesToModule_Spec populates the provided destination Module_Spec from our Module_Spec
func (module *Module_Spec) AssignPropertiesToModule_Spec(destination *v1alpha1api20210301storage.Module_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Args
	destination.Args = genruntime.ClonePointerToString(module.Args)

	// Name
	name := module.Name
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Module_Status struct {
	//Args: Configuration options for the module, e.g. 'ERROR_RATE 0.00 INITIAL_SIZE
	//400'.
	Args *string `json:"args,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the module, e.g. 'RedisBloom', 'RediSearch', 'RedisTimeSeries'
	Name string `json:"name"`

	//Version: The version of the module, e.g. '1.0'.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &Module_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (module *Module_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Module_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (module *Module_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Module_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Module_StatusARM, got %T", armInput)
	}

	// Set property ‘Args’:
	if typedInput.Args != nil {
		args := *typedInput.Args
		module.Args = &args
	}

	// Set property ‘Name’:
	module.Name = typedInput.Name

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		module.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromModule_Status populates our Module_Status from the provided source Module_Status
func (module *Module_Status) AssignPropertiesFromModule_Status(source *v1alpha1api20210301storage.Module_Status) error {

	// Args
	module.Args = genruntime.ClonePointerToString(source.Args)

	// Name
	module.Name = genruntime.GetOptionalStringValue(source.Name)

	// Version
	module.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToModule_Status populates the provided destination Module_Status from our Module_Status
func (module *Module_Status) AssignPropertiesToModule_Status(destination *v1alpha1api20210301storage.Module_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Args
	destination.Args = genruntime.ClonePointerToString(module.Args)

	// Name
	name := module.Name
	destination.Name = &name

	// Version
	destination.Version = genruntime.ClonePointerToString(module.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Persistence_Spec struct {
	//AofEnabled: Sets whether AOF is enabled.
	AofEnabled *bool `json:"aofEnabled,omitempty"`

	//AofFrequency: Sets the frequency at which data is written to disk.
	AofFrequency *Persistence_AofFrequency_Spec `json:"aofFrequency,omitempty"`

	//RdbEnabled: Sets whether RDB is enabled.
	RdbEnabled *bool `json:"rdbEnabled,omitempty"`

	//RdbFrequency: Sets the frequency at which a snapshot of the database is created.
	RdbFrequency *Persistence_RdbFrequency_Spec `json:"rdbFrequency,omitempty"`
}

var _ genruntime.ARMTransformer = &Persistence_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (persistence *Persistence_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if persistence == nil {
		return nil, nil
	}
	var result Persistence_SpecARM

	// Set property ‘AofEnabled’:
	if persistence.AofEnabled != nil {
		aofEnabled := *persistence.AofEnabled
		result.AofEnabled = &aofEnabled
	}

	// Set property ‘AofFrequency’:
	if persistence.AofFrequency != nil {
		aofFrequency := *persistence.AofFrequency
		result.AofFrequency = &aofFrequency
	}

	// Set property ‘RdbEnabled’:
	if persistence.RdbEnabled != nil {
		rdbEnabled := *persistence.RdbEnabled
		result.RdbEnabled = &rdbEnabled
	}

	// Set property ‘RdbFrequency’:
	if persistence.RdbFrequency != nil {
		rdbFrequency := *persistence.RdbFrequency
		result.RdbFrequency = &rdbFrequency
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (persistence *Persistence_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Persistence_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (persistence *Persistence_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Persistence_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Persistence_SpecARM, got %T", armInput)
	}

	// Set property ‘AofEnabled’:
	if typedInput.AofEnabled != nil {
		aofEnabled := *typedInput.AofEnabled
		persistence.AofEnabled = &aofEnabled
	}

	// Set property ‘AofFrequency’:
	if typedInput.AofFrequency != nil {
		aofFrequency := *typedInput.AofFrequency
		persistence.AofFrequency = &aofFrequency
	}

	// Set property ‘RdbEnabled’:
	if typedInput.RdbEnabled != nil {
		rdbEnabled := *typedInput.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	}

	// Set property ‘RdbFrequency’:
	if typedInput.RdbFrequency != nil {
		rdbFrequency := *typedInput.RdbFrequency
		persistence.RdbFrequency = &rdbFrequency
	}

	// No error
	return nil
}

// AssignPropertiesFromPersistence_Spec populates our Persistence_Spec from the provided source Persistence_Spec
func (persistence *Persistence_Spec) AssignPropertiesFromPersistence_Spec(source *v1alpha1api20210301storage.Persistence_Spec) error {

	// AofEnabled
	if source.AofEnabled != nil {
		aofEnabled := *source.AofEnabled
		persistence.AofEnabled = &aofEnabled
	} else {
		persistence.AofEnabled = nil
	}

	// AofFrequency
	if source.AofFrequency != nil {
		aofFrequency := Persistence_AofFrequency_Spec(*source.AofFrequency)
		persistence.AofFrequency = &aofFrequency
	} else {
		persistence.AofFrequency = nil
	}

	// RdbEnabled
	if source.RdbEnabled != nil {
		rdbEnabled := *source.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	} else {
		persistence.RdbEnabled = nil
	}

	// RdbFrequency
	if source.RdbFrequency != nil {
		rdbFrequency := Persistence_RdbFrequency_Spec(*source.RdbFrequency)
		persistence.RdbFrequency = &rdbFrequency
	} else {
		persistence.RdbFrequency = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPersistence_Spec populates the provided destination Persistence_Spec from our Persistence_Spec
func (persistence *Persistence_Spec) AssignPropertiesToPersistence_Spec(destination *v1alpha1api20210301storage.Persistence_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AofEnabled
	if persistence.AofEnabled != nil {
		aofEnabled := *persistence.AofEnabled
		destination.AofEnabled = &aofEnabled
	} else {
		destination.AofEnabled = nil
	}

	// AofFrequency
	if persistence.AofFrequency != nil {
		aofFrequency := string(*persistence.AofFrequency)
		destination.AofFrequency = &aofFrequency
	} else {
		destination.AofFrequency = nil
	}

	// RdbEnabled
	if persistence.RdbEnabled != nil {
		rdbEnabled := *persistence.RdbEnabled
		destination.RdbEnabled = &rdbEnabled
	} else {
		destination.RdbEnabled = nil
	}

	// RdbFrequency
	if persistence.RdbFrequency != nil {
		rdbFrequency := string(*persistence.RdbFrequency)
		destination.RdbFrequency = &rdbFrequency
	} else {
		destination.RdbFrequency = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Persistence_Status struct {
	//AofEnabled: Sets whether AOF is enabled.
	AofEnabled *bool `json:"aofEnabled,omitempty"`

	//AofFrequency: Sets the frequency at which data is written to disk.
	AofFrequency *Persistence_AofFrequency_Status `json:"aofFrequency,omitempty"`

	//RdbEnabled: Sets whether RDB is enabled.
	RdbEnabled *bool `json:"rdbEnabled,omitempty"`

	//RdbFrequency: Sets the frequency at which a snapshot of the database is created.
	RdbFrequency *Persistence_RdbFrequency_Status `json:"rdbFrequency,omitempty"`
}

var _ genruntime.FromARMConverter = &Persistence_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (persistence *Persistence_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Persistence_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (persistence *Persistence_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Persistence_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Persistence_StatusARM, got %T", armInput)
	}

	// Set property ‘AofEnabled’:
	if typedInput.AofEnabled != nil {
		aofEnabled := *typedInput.AofEnabled
		persistence.AofEnabled = &aofEnabled
	}

	// Set property ‘AofFrequency’:
	if typedInput.AofFrequency != nil {
		aofFrequency := *typedInput.AofFrequency
		persistence.AofFrequency = &aofFrequency
	}

	// Set property ‘RdbEnabled’:
	if typedInput.RdbEnabled != nil {
		rdbEnabled := *typedInput.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	}

	// Set property ‘RdbFrequency’:
	if typedInput.RdbFrequency != nil {
		rdbFrequency := *typedInput.RdbFrequency
		persistence.RdbFrequency = &rdbFrequency
	}

	// No error
	return nil
}

// AssignPropertiesFromPersistence_Status populates our Persistence_Status from the provided source Persistence_Status
func (persistence *Persistence_Status) AssignPropertiesFromPersistence_Status(source *v1alpha1api20210301storage.Persistence_Status) error {

	// AofEnabled
	if source.AofEnabled != nil {
		aofEnabled := *source.AofEnabled
		persistence.AofEnabled = &aofEnabled
	} else {
		persistence.AofEnabled = nil
	}

	// AofFrequency
	if source.AofFrequency != nil {
		aofFrequency := Persistence_AofFrequency_Status(*source.AofFrequency)
		persistence.AofFrequency = &aofFrequency
	} else {
		persistence.AofFrequency = nil
	}

	// RdbEnabled
	if source.RdbEnabled != nil {
		rdbEnabled := *source.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	} else {
		persistence.RdbEnabled = nil
	}

	// RdbFrequency
	if source.RdbFrequency != nil {
		rdbFrequency := Persistence_RdbFrequency_Status(*source.RdbFrequency)
		persistence.RdbFrequency = &rdbFrequency
	} else {
		persistence.RdbFrequency = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPersistence_Status populates the provided destination Persistence_Status from our Persistence_Status
func (persistence *Persistence_Status) AssignPropertiesToPersistence_Status(destination *v1alpha1api20210301storage.Persistence_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AofEnabled
	if persistence.AofEnabled != nil {
		aofEnabled := *persistence.AofEnabled
		destination.AofEnabled = &aofEnabled
	} else {
		destination.AofEnabled = nil
	}

	// AofFrequency
	if persistence.AofFrequency != nil {
		aofFrequency := string(*persistence.AofFrequency)
		destination.AofFrequency = &aofFrequency
	} else {
		destination.AofFrequency = nil
	}

	// RdbEnabled
	if persistence.RdbEnabled != nil {
		rdbEnabled := *persistence.RdbEnabled
		destination.RdbEnabled = &rdbEnabled
	} else {
		destination.RdbEnabled = nil
	}

	// RdbFrequency
	if persistence.RdbFrequency != nil {
		rdbFrequency := string(*persistence.RdbFrequency)
		destination.RdbFrequency = &rdbFrequency
	} else {
		destination.RdbFrequency = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"1s","always"}
type Persistence_AofFrequency_Spec string

const (
	Persistence_AofFrequency_Spec1S     = Persistence_AofFrequency_Spec("1s")
	Persistence_AofFrequency_SpecAlways = Persistence_AofFrequency_Spec("always")
)

// +kubebuilder:validation:Enum={"12h","1h","6h"}
type Persistence_RdbFrequency_Spec string

const (
	Persistence_RdbFrequency_Spec12H = Persistence_RdbFrequency_Spec("12h")
	Persistence_RdbFrequency_Spec1H  = Persistence_RdbFrequency_Spec("1h")
	Persistence_RdbFrequency_Spec6H  = Persistence_RdbFrequency_Spec("6h")
)

func init() {
	SchemeBuilder.Register(&RedisEnterpriseDatabase{}, &RedisEnterpriseDatabaseList{})
}
