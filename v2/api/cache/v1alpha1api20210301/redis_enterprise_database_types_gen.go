// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"fmt"
	alpha20210301s "github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of RedisEnterpriseDatabase. Use v1beta20210301.RedisEnterpriseDatabase instead
type RedisEnterpriseDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisEnterprise_Database_Spec   `json:"spec,omitempty"`
	Status            RedisEnterprise_Database_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RedisEnterpriseDatabase{}

// GetConditions returns the conditions of the resource
func (database *RedisEnterpriseDatabase) GetConditions() conditions.Conditions {
	return database.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (database *RedisEnterpriseDatabase) SetConditions(conditions conditions.Conditions) {
	database.Status.Conditions = conditions
}

var _ conversion.Convertible = &RedisEnterpriseDatabase{}

// ConvertFrom populates our RedisEnterpriseDatabase from the provided hub RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210301s.RedisEnterpriseDatabase

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = database.AssignProperties_From_RedisEnterpriseDatabase(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to database")
	}

	return nil
}

// ConvertTo populates the provided hub RedisEnterpriseDatabase from our RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210301s.RedisEnterpriseDatabase
	err := database.AssignProperties_To_RedisEnterpriseDatabase(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from database")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20210301-redisenterprisedatabase,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redisenterprisedatabases,verbs=create;update,versions=v1alpha1api20210301,name=default.v1alpha1api20210301.redisenterprisedatabases.cache.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &RedisEnterpriseDatabase{}

// Default applies defaults to the RedisEnterpriseDatabase resource
func (database *RedisEnterpriseDatabase) Default() {
	database.defaultImpl()
	var temp interface{} = database
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (database *RedisEnterpriseDatabase) defaultAzureName() {
	if database.Spec.AzureName == "" {
		database.Spec.AzureName = database.Name
	}
}

// defaultImpl applies the code generated defaults to the RedisEnterpriseDatabase resource
func (database *RedisEnterpriseDatabase) defaultImpl() { database.defaultAzureName() }

var _ genruntime.KubernetesResource = &RedisEnterpriseDatabase{}

// AzureName returns the Azure name of the resource
func (database *RedisEnterpriseDatabase) AzureName() string {
	return database.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-03-01"
func (database RedisEnterpriseDatabase) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (database *RedisEnterpriseDatabase) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (database *RedisEnterpriseDatabase) GetSpec() genruntime.ConvertibleSpec {
	return &database.Spec
}

// GetStatus returns the status of this resource
func (database *RedisEnterpriseDatabase) GetStatus() genruntime.ConvertibleStatus {
	return &database.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redisEnterprise/databases"
func (database *RedisEnterpriseDatabase) GetType() string {
	return "Microsoft.Cache/redisEnterprise/databases"
}

// NewEmptyStatus returns a new empty (blank) status
func (database *RedisEnterpriseDatabase) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RedisEnterprise_Database_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (database *RedisEnterpriseDatabase) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(database.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  database.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (database *RedisEnterpriseDatabase) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RedisEnterprise_Database_STATUS); ok {
		database.Status = *st
		return nil
	}

	// Convert status to required version
	var st RedisEnterprise_Database_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	database.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20210301-redisenterprisedatabase,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redisenterprisedatabases,verbs=create;update,versions=v1alpha1api20210301,name=validate.v1alpha1api20210301.redisenterprisedatabases.cache.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &RedisEnterpriseDatabase{}

// ValidateCreate validates the creation of the resource
func (database *RedisEnterpriseDatabase) ValidateCreate() error {
	validations := database.createValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (database *RedisEnterpriseDatabase) ValidateDelete() error {
	validations := database.deleteValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (database *RedisEnterpriseDatabase) ValidateUpdate(old runtime.Object) error {
	validations := database.updateValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (database *RedisEnterpriseDatabase) createValidations() []func() error {
	return []func() error{database.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (database *RedisEnterpriseDatabase) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (database *RedisEnterpriseDatabase) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return database.validateResourceReferences()
		},
		database.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (database *RedisEnterpriseDatabase) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&database.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (database *RedisEnterpriseDatabase) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*RedisEnterpriseDatabase)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, database)
}

// AssignProperties_From_RedisEnterpriseDatabase populates our RedisEnterpriseDatabase from the provided source RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) AssignProperties_From_RedisEnterpriseDatabase(source *alpha20210301s.RedisEnterpriseDatabase) error {

	// ObjectMeta
	database.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec RedisEnterprise_Database_Spec
	err := spec.AssignProperties_From_RedisEnterprise_Database_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_RedisEnterprise_Database_Spec() to populate field Spec")
	}
	database.Spec = spec

	// Status
	var status RedisEnterprise_Database_STATUS
	err = status.AssignProperties_From_RedisEnterprise_Database_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_RedisEnterprise_Database_STATUS() to populate field Status")
	}
	database.Status = status

	// No error
	return nil
}

// AssignProperties_To_RedisEnterpriseDatabase populates the provided destination RedisEnterpriseDatabase from our RedisEnterpriseDatabase
func (database *RedisEnterpriseDatabase) AssignProperties_To_RedisEnterpriseDatabase(destination *alpha20210301s.RedisEnterpriseDatabase) error {

	// ObjectMeta
	destination.ObjectMeta = *database.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210301s.RedisEnterprise_Database_Spec
	err := database.Spec.AssignProperties_To_RedisEnterprise_Database_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_RedisEnterprise_Database_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210301s.RedisEnterprise_Database_STATUS
	err = database.Status.AssignProperties_To_RedisEnterprise_Database_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_RedisEnterprise_Database_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (database *RedisEnterpriseDatabase) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: database.Spec.OriginalVersion(),
		Kind:    "RedisEnterpriseDatabase",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of RedisEnterpriseDatabase. Use v1beta20210301.RedisEnterpriseDatabase instead
type RedisEnterpriseDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisEnterpriseDatabase `json:"items"`
}

type RedisEnterprise_Database_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName        string                               `json:"azureName,omitempty"`
	ClientProtocol   *DatabaseProperties_ClientProtocol   `json:"clientProtocol,omitempty"`
	ClusteringPolicy *DatabaseProperties_ClusteringPolicy `json:"clusteringPolicy,omitempty"`
	EvictionPolicy   *DatabaseProperties_EvictionPolicy   `json:"evictionPolicy,omitempty"`
	Modules          []Module                             `json:"modules,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a cache.azure.com/RedisEnterprise resource
	Owner       *genruntime.KnownResourceReference `group:"cache.azure.com" json:"owner,omitempty" kind:"RedisEnterprise"`
	Persistence *Persistence                       `json:"persistence,omitempty"`
	Port        *int                               `json:"port,omitempty"`
}

var _ genruntime.ARMTransformer = &RedisEnterprise_Database_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (database *RedisEnterprise_Database_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if database == nil {
		return nil, nil
	}
	result := &RedisEnterprise_Database_Spec_ARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if database.ClientProtocol != nil ||
		database.ClusteringPolicy != nil ||
		database.EvictionPolicy != nil ||
		database.Modules != nil ||
		database.Persistence != nil ||
		database.Port != nil {
		result.Properties = &DatabaseProperties_ARM{}
	}
	if database.ClientProtocol != nil {
		clientProtocol := *database.ClientProtocol
		result.Properties.ClientProtocol = &clientProtocol
	}
	if database.ClusteringPolicy != nil {
		clusteringPolicy := *database.ClusteringPolicy
		result.Properties.ClusteringPolicy = &clusteringPolicy
	}
	if database.EvictionPolicy != nil {
		evictionPolicy := *database.EvictionPolicy
		result.Properties.EvictionPolicy = &evictionPolicy
	}
	for _, item := range database.Modules {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Modules = append(result.Properties.Modules, *item_ARM.(*Module_ARM))
	}
	if database.Persistence != nil {
		persistence_ARM, err := (*database.Persistence).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		persistence := *persistence_ARM.(*Persistence_ARM)
		result.Properties.Persistence = &persistence
	}
	if database.Port != nil {
		port := *database.Port
		result.Properties.Port = &port
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (database *RedisEnterprise_Database_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisEnterprise_Database_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (database *RedisEnterprise_Database_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisEnterprise_Database_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisEnterprise_Database_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	database.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ClientProtocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClientProtocol != nil {
			clientProtocol := *typedInput.Properties.ClientProtocol
			database.ClientProtocol = &clientProtocol
		}
	}

	// Set property ‘ClusteringPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusteringPolicy != nil {
			clusteringPolicy := *typedInput.Properties.ClusteringPolicy
			database.ClusteringPolicy = &clusteringPolicy
		}
	}

	// Set property ‘EvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EvictionPolicy != nil {
			evictionPolicy := *typedInput.Properties.EvictionPolicy
			database.EvictionPolicy = &evictionPolicy
		}
	}

	// Set property ‘Modules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Modules {
			var item1 Module
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			database.Modules = append(database.Modules, item1)
		}
	}

	// Set property ‘Owner’:
	database.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘Persistence’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Persistence != nil {
			var persistence1 Persistence
			err := persistence1.PopulateFromARM(owner, *typedInput.Properties.Persistence)
			if err != nil {
				return err
			}
			persistence := persistence1
			database.Persistence = &persistence
		}
	}

	// Set property ‘Port’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Port != nil {
			port := *typedInput.Properties.Port
			database.Port = &port
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RedisEnterprise_Database_Spec{}

// ConvertSpecFrom populates our RedisEnterprise_Database_Spec from the provided source
func (database *RedisEnterprise_Database_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210301s.RedisEnterprise_Database_Spec)
	if ok {
		// Populate our instance from source
		return database.AssignProperties_From_RedisEnterprise_Database_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210301s.RedisEnterprise_Database_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = database.AssignProperties_From_RedisEnterprise_Database_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RedisEnterprise_Database_Spec
func (database *RedisEnterprise_Database_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210301s.RedisEnterprise_Database_Spec)
	if ok {
		// Populate destination from our instance
		return database.AssignProperties_To_RedisEnterprise_Database_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210301s.RedisEnterprise_Database_Spec{}
	err := database.AssignProperties_To_RedisEnterprise_Database_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_RedisEnterprise_Database_Spec populates our RedisEnterprise_Database_Spec from the provided source RedisEnterprise_Database_Spec
func (database *RedisEnterprise_Database_Spec) AssignProperties_From_RedisEnterprise_Database_Spec(source *alpha20210301s.RedisEnterprise_Database_Spec) error {

	// AzureName
	database.AzureName = source.AzureName

	// ClientProtocol
	if source.ClientProtocol != nil {
		clientProtocol := DatabaseProperties_ClientProtocol(*source.ClientProtocol)
		database.ClientProtocol = &clientProtocol
	} else {
		database.ClientProtocol = nil
	}

	// ClusteringPolicy
	if source.ClusteringPolicy != nil {
		clusteringPolicy := DatabaseProperties_ClusteringPolicy(*source.ClusteringPolicy)
		database.ClusteringPolicy = &clusteringPolicy
	} else {
		database.ClusteringPolicy = nil
	}

	// EvictionPolicy
	if source.EvictionPolicy != nil {
		evictionPolicy := DatabaseProperties_EvictionPolicy(*source.EvictionPolicy)
		database.EvictionPolicy = &evictionPolicy
	} else {
		database.EvictionPolicy = nil
	}

	// Modules
	if source.Modules != nil {
		moduleList := make([]Module, len(source.Modules))
		for moduleIndex, moduleItem := range source.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module Module
			err := module.AssignProperties_From_Module(&moduleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Module() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		database.Modules = moduleList
	} else {
		database.Modules = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		database.Owner = &owner
	} else {
		database.Owner = nil
	}

	// Persistence
	if source.Persistence != nil {
		var persistence Persistence
		err := persistence.AssignProperties_From_Persistence(source.Persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Persistence() to populate field Persistence")
		}
		database.Persistence = &persistence
	} else {
		database.Persistence = nil
	}

	// Port
	database.Port = genruntime.ClonePointerToInt(source.Port)

	// No error
	return nil
}

// AssignProperties_To_RedisEnterprise_Database_Spec populates the provided destination RedisEnterprise_Database_Spec from our RedisEnterprise_Database_Spec
func (database *RedisEnterprise_Database_Spec) AssignProperties_To_RedisEnterprise_Database_Spec(destination *alpha20210301s.RedisEnterprise_Database_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = database.AzureName

	// ClientProtocol
	if database.ClientProtocol != nil {
		clientProtocol := string(*database.ClientProtocol)
		destination.ClientProtocol = &clientProtocol
	} else {
		destination.ClientProtocol = nil
	}

	// ClusteringPolicy
	if database.ClusteringPolicy != nil {
		clusteringPolicy := string(*database.ClusteringPolicy)
		destination.ClusteringPolicy = &clusteringPolicy
	} else {
		destination.ClusteringPolicy = nil
	}

	// EvictionPolicy
	if database.EvictionPolicy != nil {
		evictionPolicy := string(*database.EvictionPolicy)
		destination.EvictionPolicy = &evictionPolicy
	} else {
		destination.EvictionPolicy = nil
	}

	// Modules
	if database.Modules != nil {
		moduleList := make([]alpha20210301s.Module, len(database.Modules))
		for moduleIndex, moduleItem := range database.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module alpha20210301s.Module
			err := moduleItem.AssignProperties_To_Module(&module)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Module() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		destination.Modules = moduleList
	} else {
		destination.Modules = nil
	}

	// OriginalVersion
	destination.OriginalVersion = database.OriginalVersion()

	// Owner
	if database.Owner != nil {
		owner := database.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Persistence
	if database.Persistence != nil {
		var persistence alpha20210301s.Persistence
		err := database.Persistence.AssignProperties_To_Persistence(&persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Persistence() to populate field Persistence")
		}
		destination.Persistence = &persistence
	} else {
		destination.Persistence = nil
	}

	// Port
	destination.Port = genruntime.ClonePointerToInt(database.Port)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (database *RedisEnterprise_Database_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (database *RedisEnterprise_Database_Spec) SetAzureName(azureName string) {
	database.AzureName = azureName
}

// Deprecated version of RedisEnterprise_Database_STATUS. Use v1beta20210301.RedisEnterprise_Database_STATUS instead
type RedisEnterprise_Database_STATUS struct {
	ClientProtocol   *DatabaseProperties_ClientProtocol_STATUS   `json:"clientProtocol,omitempty"`
	ClusteringPolicy *DatabaseProperties_ClusteringPolicy_STATUS `json:"clusteringPolicy,omitempty"`

	// Conditions: The observed state of the resource
	Conditions        []conditions.Condition                    `json:"conditions,omitempty"`
	EvictionPolicy    *DatabaseProperties_EvictionPolicy_STATUS `json:"evictionPolicy,omitempty"`
	Id                *string                                   `json:"id,omitempty"`
	Modules           []Module_STATUS                           `json:"modules,omitempty"`
	Name              *string                                   `json:"name,omitempty"`
	Persistence       *Persistence_STATUS                       `json:"persistence,omitempty"`
	Port              *int                                      `json:"port,omitempty"`
	ProvisioningState *ProvisioningState_STATUS                 `json:"provisioningState,omitempty"`
	ResourceState     *ResourceState_STATUS                     `json:"resourceState,omitempty"`
	Type              *string                                   `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RedisEnterprise_Database_STATUS{}

// ConvertStatusFrom populates our RedisEnterprise_Database_STATUS from the provided source
func (database *RedisEnterprise_Database_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210301s.RedisEnterprise_Database_STATUS)
	if ok {
		// Populate our instance from source
		return database.AssignProperties_From_RedisEnterprise_Database_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210301s.RedisEnterprise_Database_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = database.AssignProperties_From_RedisEnterprise_Database_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RedisEnterprise_Database_STATUS
func (database *RedisEnterprise_Database_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210301s.RedisEnterprise_Database_STATUS)
	if ok {
		// Populate destination from our instance
		return database.AssignProperties_To_RedisEnterprise_Database_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210301s.RedisEnterprise_Database_STATUS{}
	err := database.AssignProperties_To_RedisEnterprise_Database_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RedisEnterprise_Database_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (database *RedisEnterprise_Database_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisEnterprise_Database_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (database *RedisEnterprise_Database_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisEnterprise_Database_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisEnterprise_Database_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘ClientProtocol’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClientProtocol != nil {
			clientProtocol := *typedInput.Properties.ClientProtocol
			database.ClientProtocol = &clientProtocol
		}
	}

	// Set property ‘ClusteringPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ClusteringPolicy != nil {
			clusteringPolicy := *typedInput.Properties.ClusteringPolicy
			database.ClusteringPolicy = &clusteringPolicy
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘EvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EvictionPolicy != nil {
			evictionPolicy := *typedInput.Properties.EvictionPolicy
			database.EvictionPolicy = &evictionPolicy
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		database.Id = &id
	}

	// Set property ‘Modules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Modules {
			var item1 Module_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			database.Modules = append(database.Modules, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		database.Name = &name
	}

	// Set property ‘Persistence’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Persistence != nil {
			var persistence1 Persistence_STATUS
			err := persistence1.PopulateFromARM(owner, *typedInput.Properties.Persistence)
			if err != nil {
				return err
			}
			persistence := persistence1
			database.Persistence = &persistence
		}
	}

	// Set property ‘Port’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Port != nil {
			port := *typedInput.Properties.Port
			database.Port = &port
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			database.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceState != nil {
			resourceState := *typedInput.Properties.ResourceState
			database.ResourceState = &resourceState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		database.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_RedisEnterprise_Database_STATUS populates our RedisEnterprise_Database_STATUS from the provided source RedisEnterprise_Database_STATUS
func (database *RedisEnterprise_Database_STATUS) AssignProperties_From_RedisEnterprise_Database_STATUS(source *alpha20210301s.RedisEnterprise_Database_STATUS) error {

	// ClientProtocol
	if source.ClientProtocol != nil {
		clientProtocol := DatabaseProperties_ClientProtocol_STATUS(*source.ClientProtocol)
		database.ClientProtocol = &clientProtocol
	} else {
		database.ClientProtocol = nil
	}

	// ClusteringPolicy
	if source.ClusteringPolicy != nil {
		clusteringPolicy := DatabaseProperties_ClusteringPolicy_STATUS(*source.ClusteringPolicy)
		database.ClusteringPolicy = &clusteringPolicy
	} else {
		database.ClusteringPolicy = nil
	}

	// Conditions
	database.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// EvictionPolicy
	if source.EvictionPolicy != nil {
		evictionPolicy := DatabaseProperties_EvictionPolicy_STATUS(*source.EvictionPolicy)
		database.EvictionPolicy = &evictionPolicy
	} else {
		database.EvictionPolicy = nil
	}

	// Id
	database.Id = genruntime.ClonePointerToString(source.Id)

	// Modules
	if source.Modules != nil {
		moduleList := make([]Module_STATUS, len(source.Modules))
		for moduleIndex, moduleItem := range source.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module Module_STATUS
			err := module.AssignProperties_From_Module_STATUS(&moduleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Module_STATUS() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		database.Modules = moduleList
	} else {
		database.Modules = nil
	}

	// Name
	database.Name = genruntime.ClonePointerToString(source.Name)

	// Persistence
	if source.Persistence != nil {
		var persistence Persistence_STATUS
		err := persistence.AssignProperties_From_Persistence_STATUS(source.Persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Persistence_STATUS() to populate field Persistence")
		}
		database.Persistence = &persistence
	} else {
		database.Persistence = nil
	}

	// Port
	database.Port = genruntime.ClonePointerToInt(source.Port)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_STATUS(*source.ProvisioningState)
		database.ProvisioningState = &provisioningState
	} else {
		database.ProvisioningState = nil
	}

	// ResourceState
	if source.ResourceState != nil {
		resourceState := ResourceState_STATUS(*source.ResourceState)
		database.ResourceState = &resourceState
	} else {
		database.ResourceState = nil
	}

	// Type
	database.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_RedisEnterprise_Database_STATUS populates the provided destination RedisEnterprise_Database_STATUS from our RedisEnterprise_Database_STATUS
func (database *RedisEnterprise_Database_STATUS) AssignProperties_To_RedisEnterprise_Database_STATUS(destination *alpha20210301s.RedisEnterprise_Database_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientProtocol
	if database.ClientProtocol != nil {
		clientProtocol := string(*database.ClientProtocol)
		destination.ClientProtocol = &clientProtocol
	} else {
		destination.ClientProtocol = nil
	}

	// ClusteringPolicy
	if database.ClusteringPolicy != nil {
		clusteringPolicy := string(*database.ClusteringPolicy)
		destination.ClusteringPolicy = &clusteringPolicy
	} else {
		destination.ClusteringPolicy = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(database.Conditions)

	// EvictionPolicy
	if database.EvictionPolicy != nil {
		evictionPolicy := string(*database.EvictionPolicy)
		destination.EvictionPolicy = &evictionPolicy
	} else {
		destination.EvictionPolicy = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(database.Id)

	// Modules
	if database.Modules != nil {
		moduleList := make([]alpha20210301s.Module_STATUS, len(database.Modules))
		for moduleIndex, moduleItem := range database.Modules {
			// Shadow the loop variable to avoid aliasing
			moduleItem := moduleItem
			var module alpha20210301s.Module_STATUS
			err := moduleItem.AssignProperties_To_Module_STATUS(&module)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Module_STATUS() to populate field Modules")
			}
			moduleList[moduleIndex] = module
		}
		destination.Modules = moduleList
	} else {
		destination.Modules = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(database.Name)

	// Persistence
	if database.Persistence != nil {
		var persistence alpha20210301s.Persistence_STATUS
		err := database.Persistence.AssignProperties_To_Persistence_STATUS(&persistence)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Persistence_STATUS() to populate field Persistence")
		}
		destination.Persistence = &persistence
	} else {
		destination.Persistence = nil
	}

	// Port
	destination.Port = genruntime.ClonePointerToInt(database.Port)

	// ProvisioningState
	if database.ProvisioningState != nil {
		provisioningState := string(*database.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceState
	if database.ResourceState != nil {
		resourceState := string(*database.ResourceState)
		destination.ResourceState = &resourceState
	} else {
		destination.ResourceState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(database.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DatabaseProperties_ClientProtocol. Use v1beta20210301.DatabaseProperties_ClientProtocol instead
// +kubebuilder:validation:Enum={"Encrypted","Plaintext"}
type DatabaseProperties_ClientProtocol string

const (
	DatabaseProperties_ClientProtocol_Encrypted = DatabaseProperties_ClientProtocol("Encrypted")
	DatabaseProperties_ClientProtocol_Plaintext = DatabaseProperties_ClientProtocol("Plaintext")
)

// Deprecated version of DatabaseProperties_ClientProtocol_STATUS. Use
// v1beta20210301.DatabaseProperties_ClientProtocol_STATUS instead
type DatabaseProperties_ClientProtocol_STATUS string

const (
	DatabaseProperties_ClientProtocol_STATUS_Encrypted = DatabaseProperties_ClientProtocol_STATUS("Encrypted")
	DatabaseProperties_ClientProtocol_STATUS_Plaintext = DatabaseProperties_ClientProtocol_STATUS("Plaintext")
)

// Deprecated version of DatabaseProperties_ClusteringPolicy. Use v1beta20210301.DatabaseProperties_ClusteringPolicy instead
// +kubebuilder:validation:Enum={"EnterpriseCluster","OSSCluster"}
type DatabaseProperties_ClusteringPolicy string

const (
	DatabaseProperties_ClusteringPolicy_EnterpriseCluster = DatabaseProperties_ClusteringPolicy("EnterpriseCluster")
	DatabaseProperties_ClusteringPolicy_OSSCluster        = DatabaseProperties_ClusteringPolicy("OSSCluster")
)

// Deprecated version of DatabaseProperties_ClusteringPolicy_STATUS. Use
// v1beta20210301.DatabaseProperties_ClusteringPolicy_STATUS instead
type DatabaseProperties_ClusteringPolicy_STATUS string

const (
	DatabaseProperties_ClusteringPolicy_STATUS_EnterpriseCluster = DatabaseProperties_ClusteringPolicy_STATUS("EnterpriseCluster")
	DatabaseProperties_ClusteringPolicy_STATUS_OSSCluster        = DatabaseProperties_ClusteringPolicy_STATUS("OSSCluster")
)

// Deprecated version of DatabaseProperties_EvictionPolicy. Use v1beta20210301.DatabaseProperties_EvictionPolicy instead
// +kubebuilder:validation:Enum={"AllKeysLFU","AllKeysLRU","AllKeysRandom","NoEviction","VolatileLFU","VolatileLRU","VolatileRandom","VolatileTTL"}
type DatabaseProperties_EvictionPolicy string

const (
	DatabaseProperties_EvictionPolicy_AllKeysLFU     = DatabaseProperties_EvictionPolicy("AllKeysLFU")
	DatabaseProperties_EvictionPolicy_AllKeysLRU     = DatabaseProperties_EvictionPolicy("AllKeysLRU")
	DatabaseProperties_EvictionPolicy_AllKeysRandom  = DatabaseProperties_EvictionPolicy("AllKeysRandom")
	DatabaseProperties_EvictionPolicy_NoEviction     = DatabaseProperties_EvictionPolicy("NoEviction")
	DatabaseProperties_EvictionPolicy_VolatileLFU    = DatabaseProperties_EvictionPolicy("VolatileLFU")
	DatabaseProperties_EvictionPolicy_VolatileLRU    = DatabaseProperties_EvictionPolicy("VolatileLRU")
	DatabaseProperties_EvictionPolicy_VolatileRandom = DatabaseProperties_EvictionPolicy("VolatileRandom")
	DatabaseProperties_EvictionPolicy_VolatileTTL    = DatabaseProperties_EvictionPolicy("VolatileTTL")
)

// Deprecated version of DatabaseProperties_EvictionPolicy_STATUS. Use
// v1beta20210301.DatabaseProperties_EvictionPolicy_STATUS instead
type DatabaseProperties_EvictionPolicy_STATUS string

const (
	DatabaseProperties_EvictionPolicy_STATUS_AllKeysLFU     = DatabaseProperties_EvictionPolicy_STATUS("AllKeysLFU")
	DatabaseProperties_EvictionPolicy_STATUS_AllKeysLRU     = DatabaseProperties_EvictionPolicy_STATUS("AllKeysLRU")
	DatabaseProperties_EvictionPolicy_STATUS_AllKeysRandom  = DatabaseProperties_EvictionPolicy_STATUS("AllKeysRandom")
	DatabaseProperties_EvictionPolicy_STATUS_NoEviction     = DatabaseProperties_EvictionPolicy_STATUS("NoEviction")
	DatabaseProperties_EvictionPolicy_STATUS_VolatileLFU    = DatabaseProperties_EvictionPolicy_STATUS("VolatileLFU")
	DatabaseProperties_EvictionPolicy_STATUS_VolatileLRU    = DatabaseProperties_EvictionPolicy_STATUS("VolatileLRU")
	DatabaseProperties_EvictionPolicy_STATUS_VolatileRandom = DatabaseProperties_EvictionPolicy_STATUS("VolatileRandom")
	DatabaseProperties_EvictionPolicy_STATUS_VolatileTTL    = DatabaseProperties_EvictionPolicy_STATUS("VolatileTTL")
)

// Deprecated version of Module. Use v1beta20210301.Module instead
type Module struct {
	Args *string `json:"args,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Module{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (module *Module) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if module == nil {
		return nil, nil
	}
	result := &Module_ARM{}

	// Set property ‘Args’:
	if module.Args != nil {
		args := *module.Args
		result.Args = &args
	}

	// Set property ‘Name’:
	if module.Name != nil {
		name := *module.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (module *Module) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Module_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (module *Module) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Module_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Module_ARM, got %T", armInput)
	}

	// Set property ‘Args’:
	if typedInput.Args != nil {
		args := *typedInput.Args
		module.Args = &args
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		module.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_Module populates our Module from the provided source Module
func (module *Module) AssignProperties_From_Module(source *alpha20210301s.Module) error {

	// Args
	module.Args = genruntime.ClonePointerToString(source.Args)

	// Name
	module.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignProperties_To_Module populates the provided destination Module from our Module
func (module *Module) AssignProperties_To_Module(destination *alpha20210301s.Module) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Args
	destination.Args = genruntime.ClonePointerToString(module.Args)

	// Name
	destination.Name = genruntime.ClonePointerToString(module.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Module_STATUS. Use v1beta20210301.Module_STATUS instead
type Module_STATUS struct {
	Args    *string `json:"args,omitempty"`
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &Module_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (module *Module_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Module_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (module *Module_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Module_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Module_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Args’:
	if typedInput.Args != nil {
		args := *typedInput.Args
		module.Args = &args
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		module.Name = &name
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		module.Version = &version
	}

	// No error
	return nil
}

// AssignProperties_From_Module_STATUS populates our Module_STATUS from the provided source Module_STATUS
func (module *Module_STATUS) AssignProperties_From_Module_STATUS(source *alpha20210301s.Module_STATUS) error {

	// Args
	module.Args = genruntime.ClonePointerToString(source.Args)

	// Name
	module.Name = genruntime.ClonePointerToString(source.Name)

	// Version
	module.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignProperties_To_Module_STATUS populates the provided destination Module_STATUS from our Module_STATUS
func (module *Module_STATUS) AssignProperties_To_Module_STATUS(destination *alpha20210301s.Module_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Args
	destination.Args = genruntime.ClonePointerToString(module.Args)

	// Name
	destination.Name = genruntime.ClonePointerToString(module.Name)

	// Version
	destination.Version = genruntime.ClonePointerToString(module.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Persistence. Use v1beta20210301.Persistence instead
type Persistence struct {
	AofEnabled   *bool                     `json:"aofEnabled,omitempty"`
	AofFrequency *Persistence_AofFrequency `json:"aofFrequency,omitempty"`
	RdbEnabled   *bool                     `json:"rdbEnabled,omitempty"`
	RdbFrequency *Persistence_RdbFrequency `json:"rdbFrequency,omitempty"`
}

var _ genruntime.ARMTransformer = &Persistence{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (persistence *Persistence) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if persistence == nil {
		return nil, nil
	}
	result := &Persistence_ARM{}

	// Set property ‘AofEnabled’:
	if persistence.AofEnabled != nil {
		aofEnabled := *persistence.AofEnabled
		result.AofEnabled = &aofEnabled
	}

	// Set property ‘AofFrequency’:
	if persistence.AofFrequency != nil {
		aofFrequency := *persistence.AofFrequency
		result.AofFrequency = &aofFrequency
	}

	// Set property ‘RdbEnabled’:
	if persistence.RdbEnabled != nil {
		rdbEnabled := *persistence.RdbEnabled
		result.RdbEnabled = &rdbEnabled
	}

	// Set property ‘RdbFrequency’:
	if persistence.RdbFrequency != nil {
		rdbFrequency := *persistence.RdbFrequency
		result.RdbFrequency = &rdbFrequency
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (persistence *Persistence) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Persistence_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (persistence *Persistence) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Persistence_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Persistence_ARM, got %T", armInput)
	}

	// Set property ‘AofEnabled’:
	if typedInput.AofEnabled != nil {
		aofEnabled := *typedInput.AofEnabled
		persistence.AofEnabled = &aofEnabled
	}

	// Set property ‘AofFrequency’:
	if typedInput.AofFrequency != nil {
		aofFrequency := *typedInput.AofFrequency
		persistence.AofFrequency = &aofFrequency
	}

	// Set property ‘RdbEnabled’:
	if typedInput.RdbEnabled != nil {
		rdbEnabled := *typedInput.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	}

	// Set property ‘RdbFrequency’:
	if typedInput.RdbFrequency != nil {
		rdbFrequency := *typedInput.RdbFrequency
		persistence.RdbFrequency = &rdbFrequency
	}

	// No error
	return nil
}

// AssignProperties_From_Persistence populates our Persistence from the provided source Persistence
func (persistence *Persistence) AssignProperties_From_Persistence(source *alpha20210301s.Persistence) error {

	// AofEnabled
	if source.AofEnabled != nil {
		aofEnabled := *source.AofEnabled
		persistence.AofEnabled = &aofEnabled
	} else {
		persistence.AofEnabled = nil
	}

	// AofFrequency
	if source.AofFrequency != nil {
		aofFrequency := Persistence_AofFrequency(*source.AofFrequency)
		persistence.AofFrequency = &aofFrequency
	} else {
		persistence.AofFrequency = nil
	}

	// RdbEnabled
	if source.RdbEnabled != nil {
		rdbEnabled := *source.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	} else {
		persistence.RdbEnabled = nil
	}

	// RdbFrequency
	if source.RdbFrequency != nil {
		rdbFrequency := Persistence_RdbFrequency(*source.RdbFrequency)
		persistence.RdbFrequency = &rdbFrequency
	} else {
		persistence.RdbFrequency = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Persistence populates the provided destination Persistence from our Persistence
func (persistence *Persistence) AssignProperties_To_Persistence(destination *alpha20210301s.Persistence) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AofEnabled
	if persistence.AofEnabled != nil {
		aofEnabled := *persistence.AofEnabled
		destination.AofEnabled = &aofEnabled
	} else {
		destination.AofEnabled = nil
	}

	// AofFrequency
	if persistence.AofFrequency != nil {
		aofFrequency := string(*persistence.AofFrequency)
		destination.AofFrequency = &aofFrequency
	} else {
		destination.AofFrequency = nil
	}

	// RdbEnabled
	if persistence.RdbEnabled != nil {
		rdbEnabled := *persistence.RdbEnabled
		destination.RdbEnabled = &rdbEnabled
	} else {
		destination.RdbEnabled = nil
	}

	// RdbFrequency
	if persistence.RdbFrequency != nil {
		rdbFrequency := string(*persistence.RdbFrequency)
		destination.RdbFrequency = &rdbFrequency
	} else {
		destination.RdbFrequency = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Persistence_STATUS. Use v1beta20210301.Persistence_STATUS instead
type Persistence_STATUS struct {
	AofEnabled   *bool                            `json:"aofEnabled,omitempty"`
	AofFrequency *Persistence_AofFrequency_STATUS `json:"aofFrequency,omitempty"`
	RdbEnabled   *bool                            `json:"rdbEnabled,omitempty"`
	RdbFrequency *Persistence_RdbFrequency_STATUS `json:"rdbFrequency,omitempty"`
}

var _ genruntime.FromARMConverter = &Persistence_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (persistence *Persistence_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Persistence_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (persistence *Persistence_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Persistence_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Persistence_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AofEnabled’:
	if typedInput.AofEnabled != nil {
		aofEnabled := *typedInput.AofEnabled
		persistence.AofEnabled = &aofEnabled
	}

	// Set property ‘AofFrequency’:
	if typedInput.AofFrequency != nil {
		aofFrequency := *typedInput.AofFrequency
		persistence.AofFrequency = &aofFrequency
	}

	// Set property ‘RdbEnabled’:
	if typedInput.RdbEnabled != nil {
		rdbEnabled := *typedInput.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	}

	// Set property ‘RdbFrequency’:
	if typedInput.RdbFrequency != nil {
		rdbFrequency := *typedInput.RdbFrequency
		persistence.RdbFrequency = &rdbFrequency
	}

	// No error
	return nil
}

// AssignProperties_From_Persistence_STATUS populates our Persistence_STATUS from the provided source Persistence_STATUS
func (persistence *Persistence_STATUS) AssignProperties_From_Persistence_STATUS(source *alpha20210301s.Persistence_STATUS) error {

	// AofEnabled
	if source.AofEnabled != nil {
		aofEnabled := *source.AofEnabled
		persistence.AofEnabled = &aofEnabled
	} else {
		persistence.AofEnabled = nil
	}

	// AofFrequency
	if source.AofFrequency != nil {
		aofFrequency := Persistence_AofFrequency_STATUS(*source.AofFrequency)
		persistence.AofFrequency = &aofFrequency
	} else {
		persistence.AofFrequency = nil
	}

	// RdbEnabled
	if source.RdbEnabled != nil {
		rdbEnabled := *source.RdbEnabled
		persistence.RdbEnabled = &rdbEnabled
	} else {
		persistence.RdbEnabled = nil
	}

	// RdbFrequency
	if source.RdbFrequency != nil {
		rdbFrequency := Persistence_RdbFrequency_STATUS(*source.RdbFrequency)
		persistence.RdbFrequency = &rdbFrequency
	} else {
		persistence.RdbFrequency = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Persistence_STATUS populates the provided destination Persistence_STATUS from our Persistence_STATUS
func (persistence *Persistence_STATUS) AssignProperties_To_Persistence_STATUS(destination *alpha20210301s.Persistence_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AofEnabled
	if persistence.AofEnabled != nil {
		aofEnabled := *persistence.AofEnabled
		destination.AofEnabled = &aofEnabled
	} else {
		destination.AofEnabled = nil
	}

	// AofFrequency
	if persistence.AofFrequency != nil {
		aofFrequency := string(*persistence.AofFrequency)
		destination.AofFrequency = &aofFrequency
	} else {
		destination.AofFrequency = nil
	}

	// RdbEnabled
	if persistence.RdbEnabled != nil {
		rdbEnabled := *persistence.RdbEnabled
		destination.RdbEnabled = &rdbEnabled
	} else {
		destination.RdbEnabled = nil
	}

	// RdbFrequency
	if persistence.RdbFrequency != nil {
		rdbFrequency := string(*persistence.RdbFrequency)
		destination.RdbFrequency = &rdbFrequency
	} else {
		destination.RdbFrequency = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Persistence_AofFrequency. Use v1beta20210301.Persistence_AofFrequency instead
// +kubebuilder:validation:Enum={"1s","always"}
type Persistence_AofFrequency string

const (
	Persistence_AofFrequency_1S     = Persistence_AofFrequency("1s")
	Persistence_AofFrequency_Always = Persistence_AofFrequency("always")
)

// Deprecated version of Persistence_AofFrequency_STATUS. Use v1beta20210301.Persistence_AofFrequency_STATUS instead
type Persistence_AofFrequency_STATUS string

const (
	Persistence_AofFrequency_STATUS_1S     = Persistence_AofFrequency_STATUS("1s")
	Persistence_AofFrequency_STATUS_Always = Persistence_AofFrequency_STATUS("always")
)

// Deprecated version of Persistence_RdbFrequency. Use v1beta20210301.Persistence_RdbFrequency instead
// +kubebuilder:validation:Enum={"12h","1h","6h"}
type Persistence_RdbFrequency string

const (
	Persistence_RdbFrequency_12H = Persistence_RdbFrequency("12h")
	Persistence_RdbFrequency_1H  = Persistence_RdbFrequency("1h")
	Persistence_RdbFrequency_6H  = Persistence_RdbFrequency("6h")
)

// Deprecated version of Persistence_RdbFrequency_STATUS. Use v1beta20210301.Persistence_RdbFrequency_STATUS instead
type Persistence_RdbFrequency_STATUS string

const (
	Persistence_RdbFrequency_STATUS_12H = Persistence_RdbFrequency_STATUS("12h")
	Persistence_RdbFrequency_STATUS_1H  = Persistence_RdbFrequency_STATUS("1h")
	Persistence_RdbFrequency_STATUS_6H  = Persistence_RdbFrequency_STATUS("6h")
)

func init() {
	SchemeBuilder.Register(&RedisEnterpriseDatabase{}, &RedisEnterpriseDatabaseList{})
}
