// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Cluster_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Cluster_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCluster_StatusARM, Cluster_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCluster_StatusARM runs a test to see if a specific instance of Cluster_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCluster_StatusARM(subject Cluster_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Cluster_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Cluster_StatusARM instances for property testing - lazily instantiated by Cluster_StatusARMGenerator()
var cluster_statusARMGenerator gopter.Gen

// Cluster_StatusARMGenerator returns a generator of Cluster_StatusARM instances for property testing.
// We first initialize cluster_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Cluster_StatusARMGenerator() gopter.Gen {
	if cluster_statusARMGenerator != nil {
		return cluster_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCluster_StatusARM(generators)
	cluster_statusARMGenerator = gen.Struct(reflect.TypeOf(Cluster_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCluster_StatusARM(generators)
	AddRelatedPropertyGeneratorsForCluster_StatusARM(generators)
	cluster_statusARMGenerator = gen.Struct(reflect.TypeOf(Cluster_StatusARM{}), generators)

	return cluster_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForCluster_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCluster_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCluster_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCluster_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ClusterProperties_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_StatusARMGenerator())
}

func Test_ClusterProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterProperties_StatusARM, ClusterProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterProperties_StatusARM runs a test to see if a specific instance of ClusterProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterProperties_StatusARM(subject ClusterProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterProperties_StatusARM instances for property testing - lazily instantiated by
//ClusterProperties_StatusARMGenerator()
var clusterProperties_statusARMGenerator gopter.Gen

// ClusterProperties_StatusARMGenerator returns a generator of ClusterProperties_StatusARM instances for property testing.
// We first initialize clusterProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ClusterProperties_StatusARMGenerator() gopter.Gen {
	if clusterProperties_statusARMGenerator != nil {
		return clusterProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_StatusARM(generators)
	clusterProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForClusterProperties_StatusARM(generators)
	clusterProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_StatusARM{}), generators)

	return clusterProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_MinimumTlsVersion_Status10, ClusterProperties_MinimumTlsVersion_Status11, ClusterProperties_MinimumTlsVersion_Status12))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_StatusCanceled,
		ProvisioningState_StatusCreating,
		ProvisioningState_StatusDeleting,
		ProvisioningState_StatusFailed,
		ProvisioningState_StatusSucceeded,
		ProvisioningState_StatusUpdating))
	gens["RedisVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ResourceState_StatusCreateFailed,
		ResourceState_StatusCreating,
		ResourceState_StatusDeleteFailed,
		ResourceState_StatusDeleting,
		ResourceState_StatusDisableFailed,
		ResourceState_StatusDisabled,
		ResourceState_StatusDisabling,
		ResourceState_StatusEnableFailed,
		ResourceState_StatusEnabling,
		ResourceState_StatusRunning,
		ResourceState_StatusUpdateFailed,
		ResourceState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForClusterProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForClusterProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_Status_SubResourceEmbeddedARMGenerator())
}

func Test_Sku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_StatusARM, Sku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_StatusARM runs a test to see if a specific instance of Sku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_StatusARM(subject Sku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_StatusARM instances for property testing - lazily instantiated by Sku_StatusARMGenerator()
var sku_statusARMGenerator gopter.Gen

// Sku_StatusARMGenerator returns a generator of Sku_StatusARM instances for property testing.
func Sku_StatusARMGenerator() gopter.Gen {
	if sku_statusARMGenerator != nil {
		return sku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_StatusARM(generators)
	sku_statusARMGenerator = gen.Struct(reflect.TypeOf(Sku_StatusARM{}), generators)

	return sku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_StatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.OneConstOf(
		Sku_Name_StatusEnterpriseFlash_F1500,
		Sku_Name_StatusEnterpriseFlash_F300,
		Sku_Name_StatusEnterpriseFlash_F700,
		Sku_Name_StatusEnterprise_E10,
		Sku_Name_StatusEnterprise_E100,
		Sku_Name_StatusEnterprise_E20,
		Sku_Name_StatusEnterprise_E50)
}

func Test_PrivateEndpointConnection_Status_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_Status_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_Status_SubResourceEmbeddedARM, PrivateEndpointConnection_Status_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_Status_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_Status_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_Status_SubResourceEmbeddedARM(subject PrivateEndpointConnection_Status_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_Status_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_Status_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by PrivateEndpointConnection_Status_SubResourceEmbeddedARMGenerator()
var privateEndpointConnection_status_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnection_Status_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_Status_SubResourceEmbeddedARM instances for property testing.
func PrivateEndpointConnection_Status_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnection_status_subResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnection_status_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_status_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnection_status_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
