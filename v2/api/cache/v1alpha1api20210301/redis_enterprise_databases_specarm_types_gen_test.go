// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisEnterpriseDatabases_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisEnterpriseDatabases_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisEnterpriseDatabasesSPECARM, RedisEnterpriseDatabasesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisEnterpriseDatabasesSPECARM runs a test to see if a specific instance of RedisEnterpriseDatabases_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisEnterpriseDatabasesSPECARM(subject RedisEnterpriseDatabases_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisEnterpriseDatabases_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisEnterpriseDatabases_SPECARM instances for property testing - lazily instantiated by
//RedisEnterpriseDatabasesSPECARMGenerator()
var redisEnterpriseDatabasesSPECARMGenerator gopter.Gen

// RedisEnterpriseDatabasesSPECARMGenerator returns a generator of RedisEnterpriseDatabases_SPECARM instances for property testing.
// We first initialize redisEnterpriseDatabasesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisEnterpriseDatabasesSPECARMGenerator() gopter.Gen {
	if redisEnterpriseDatabasesSPECARMGenerator != nil {
		return redisEnterpriseDatabasesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM(generators)
	redisEnterpriseDatabasesSPECARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterpriseDatabases_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM(generators)
	redisEnterpriseDatabasesSPECARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterpriseDatabases_SPECARM{}), generators)

	return redisEnterpriseDatabasesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisEnterpriseDatabasesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabasePropertiesSpecARMGenerator())
}

func Test_DatabaseProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabasePropertiesSpecARM, DatabasePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabasePropertiesSpecARM runs a test to see if a specific instance of DatabaseProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabasePropertiesSpecARM(subject DatabaseProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_SpecARM instances for property testing - lazily instantiated by
//DatabasePropertiesSpecARMGenerator()
var databasePropertiesSpecARMGenerator gopter.Gen

// DatabasePropertiesSpecARMGenerator returns a generator of DatabaseProperties_SpecARM instances for property testing.
// We first initialize databasePropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabasePropertiesSpecARMGenerator() gopter.Gen {
	if databasePropertiesSpecARMGenerator != nil {
		return databasePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabasePropertiesSpecARM(generators)
	databasePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabasePropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForDatabasePropertiesSpecARM(generators)
	databasePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_SpecARM{}), generators)

	return databasePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabasePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabasePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["ClientProtocol"] = gen.PtrOf(gen.OneConstOf(DatabasePropertiesSpecClientProtocolEncrypted, DatabasePropertiesSpecClientProtocolPlaintext))
	gens["ClusteringPolicy"] = gen.PtrOf(gen.OneConstOf(DatabasePropertiesSpecClusteringPolicyEnterpriseCluster, DatabasePropertiesSpecClusteringPolicyOSSCluster))
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(
		DatabasePropertiesSpecEvictionPolicyAllKeysLFU,
		DatabasePropertiesSpecEvictionPolicyAllKeysLRU,
		DatabasePropertiesSpecEvictionPolicyAllKeysRandom,
		DatabasePropertiesSpecEvictionPolicyNoEviction,
		DatabasePropertiesSpecEvictionPolicyVolatileLFU,
		DatabasePropertiesSpecEvictionPolicyVolatileLRU,
		DatabasePropertiesSpecEvictionPolicyVolatileRandom,
		DatabasePropertiesSpecEvictionPolicyVolatileTTL))
	gens["Port"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDatabasePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabasePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Modules"] = gen.SliceOf(ModuleSpecARMGenerator())
	gens["Persistence"] = gen.PtrOf(PersistenceSpecARMGenerator())
}

func Test_Module_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Module_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForModuleSpecARM, ModuleSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForModuleSpecARM runs a test to see if a specific instance of Module_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForModuleSpecARM(subject Module_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Module_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Module_SpecARM instances for property testing - lazily instantiated by ModuleSpecARMGenerator()
var moduleSpecARMGenerator gopter.Gen

// ModuleSpecARMGenerator returns a generator of Module_SpecARM instances for property testing.
func ModuleSpecARMGenerator() gopter.Gen {
	if moduleSpecARMGenerator != nil {
		return moduleSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForModuleSpecARM(generators)
	moduleSpecARMGenerator = gen.Struct(reflect.TypeOf(Module_SpecARM{}), generators)

	return moduleSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForModuleSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForModuleSpecARM(gens map[string]gopter.Gen) {
	gens["Args"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

func Test_Persistence_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Persistence_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPersistenceSpecARM, PersistenceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPersistenceSpecARM runs a test to see if a specific instance of Persistence_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPersistenceSpecARM(subject Persistence_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Persistence_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Persistence_SpecARM instances for property testing - lazily instantiated by PersistenceSpecARMGenerator()
var persistenceSpecARMGenerator gopter.Gen

// PersistenceSpecARMGenerator returns a generator of Persistence_SpecARM instances for property testing.
func PersistenceSpecARMGenerator() gopter.Gen {
	if persistenceSpecARMGenerator != nil {
		return persistenceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPersistenceSpecARM(generators)
	persistenceSpecARMGenerator = gen.Struct(reflect.TypeOf(Persistence_SpecARM{}), generators)

	return persistenceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForPersistenceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPersistenceSpecARM(gens map[string]gopter.Gen) {
	gens["AofEnabled"] = gen.PtrOf(gen.Bool())
	gens["AofFrequency"] = gen.PtrOf(gen.OneConstOf(PersistenceSpecAofFrequency1S, PersistenceSpecAofFrequencyAlways))
	gens["RdbEnabled"] = gen.PtrOf(gen.Bool())
	gens["RdbFrequency"] = gen.PtrOf(gen.OneConstOf(PersistenceSpecRdbFrequency12H, PersistenceSpecRdbFrequency1H, PersistenceSpecRdbFrequency6H))
}
