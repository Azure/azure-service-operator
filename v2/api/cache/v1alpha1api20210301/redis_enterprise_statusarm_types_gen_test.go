// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisEnterprise_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisEnterprise_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisEnterprise_STATUSARM, RedisEnterprise_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisEnterprise_STATUSARM runs a test to see if a specific instance of RedisEnterprise_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisEnterprise_STATUSARM(subject RedisEnterprise_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisEnterprise_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisEnterprise_STATUSARM instances for property testing - lazily instantiated by
// RedisEnterprise_STATUSARMGenerator()
var redisEnterprise_STATUSARMGenerator gopter.Gen

// RedisEnterprise_STATUSARMGenerator returns a generator of RedisEnterprise_STATUSARM instances for property testing.
// We first initialize redisEnterprise_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisEnterprise_STATUSARMGenerator() gopter.Gen {
	if redisEnterprise_STATUSARMGenerator != nil {
		return redisEnterprise_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_STATUSARM(generators)
	redisEnterprise_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForRedisEnterprise_STATUSARM(generators)
	redisEnterprise_STATUSARMGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_STATUSARM{}), generators)

	return redisEnterprise_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForRedisEnterprise_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisEnterprise_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisEnterprise_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisEnterprise_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ClusterProperties_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSARMGenerator())
}

func Test_ClusterProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterProperties_STATUSARM, ClusterProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterProperties_STATUSARM runs a test to see if a specific instance of ClusterProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterProperties_STATUSARM(subject ClusterProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterProperties_STATUSARM instances for property testing - lazily instantiated by
// ClusterProperties_STATUSARMGenerator()
var clusterProperties_STATUSARMGenerator gopter.Gen

// ClusterProperties_STATUSARMGenerator returns a generator of ClusterProperties_STATUSARM instances for property testing.
// We first initialize clusterProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ClusterProperties_STATUSARMGenerator() gopter.Gen {
	if clusterProperties_STATUSARMGenerator != nil {
		return clusterProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_STATUSARM(generators)
	clusterProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForClusterProperties_STATUSARM(generators)
	clusterProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_STATUSARM{}), generators)

	return clusterProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_MinimumTlsVersion_10_STATUS, ClusterProperties_MinimumTlsVersion_11_STATUS, ClusterProperties_MinimumTlsVersion_12_STATUS))
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_Canceled_STATUS,
		ProvisioningState_Creating_STATUS,
		ProvisioningState_Deleting_STATUS,
		ProvisioningState_Failed_STATUS,
		ProvisioningState_Succeeded_STATUS,
		ProvisioningState_Updating_STATUS))
	gens["RedisVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ResourceState_CreateFailed_STATUS,
		ResourceState_Creating_STATUS,
		ResourceState_DeleteFailed_STATUS,
		ResourceState_Deleting_STATUS,
		ResourceState_DisableFailed_STATUS,
		ResourceState_Disabled_STATUS,
		ResourceState_Disabling_STATUS,
		ResourceState_EnableFailed_STATUS,
		ResourceState_Enabling_STATUS,
		ResourceState_Running_STATUS,
		ResourceState_UpdateFailed_STATUS,
		ResourceState_Updating_STATUS))
}

// AddRelatedPropertyGeneratorsForClusterProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForClusterProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUSARMGenerator())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUSARM, Sku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by Sku_STATUSARMGenerator()
var sku_STATUSARMGenerator gopter.Gen

// Sku_STATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func Sku_STATUSARMGenerator() gopter.Gen {
	if sku_STATUSARMGenerator != nil {
		return sku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUSARM(generators)
	sku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return sku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		Sku_Name_EnterpriseFlash_F1500_STATUS,
		Sku_Name_EnterpriseFlash_F300_STATUS,
		Sku_Name_EnterpriseFlash_F700_STATUS,
		Sku_Name_Enterprise_E10_STATUS,
		Sku_Name_Enterprise_E100_STATUS,
		Sku_Name_Enterprise_E20_STATUS,
		Sku_Name_Enterprise_E50_STATUS))
}

func Test_PrivateEndpointConnection_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM, PrivateEndpointConnection_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUSARM(subject PrivateEndpointConnection_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUSARMGenerator()
var privateEndpointConnection_STATUSARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUSARMGenerator returns a generator of PrivateEndpointConnection_STATUSARM instances for property testing.
func PrivateEndpointConnection_STATUSARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUSARMGenerator != nil {
		return privateEndpointConnection_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(generators)
	privateEndpointConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUSARM{}), generators)

	return privateEndpointConnection_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
