// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/cache/v1alpha1api20210301storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-03-01/Microsoft.Cache.Enterprise.json#/resourceDefinitions/redisEnterprise
type RedisEnterprise struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedisEnterprise_Spec `json:"spec,omitempty"`
	Status            Cluster_Status       `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RedisEnterprise{}

// GetConditions returns the conditions of the resource
func (redisEnterprise *RedisEnterprise) GetConditions() conditions.Conditions {
	return redisEnterprise.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (redisEnterprise *RedisEnterprise) SetConditions(conditions conditions.Conditions) {
	redisEnterprise.Status.Conditions = conditions
}

var _ conversion.Convertible = &RedisEnterprise{}

// ConvertFrom populates our RedisEnterprise from the provided hub RedisEnterprise
func (redisEnterprise *RedisEnterprise) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210301storage.RedisEnterprise)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20210301storage/RedisEnterprise but received %T instead", hub)
	}

	return redisEnterprise.AssignPropertiesFromRedisEnterprise(source)
}

// ConvertTo populates the provided hub RedisEnterprise from our RedisEnterprise
func (redisEnterprise *RedisEnterprise) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210301storage.RedisEnterprise)
	if !ok {
		return fmt.Errorf("expected storage:cache/v1alpha1api20210301storage/RedisEnterprise but received %T instead", hub)
	}

	return redisEnterprise.AssignPropertiesToRedisEnterprise(destination)
}

// +kubebuilder:webhook:path=/mutate-cache-azure-com-v1alpha1api20210301-redisenterprise,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redisenterprises,verbs=create;update,versions=v1alpha1api20210301,name=default.v1alpha1api20210301.redisenterprises.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &RedisEnterprise{}

// Default applies defaults to the RedisEnterprise resource
func (redisEnterprise *RedisEnterprise) Default() {
	redisEnterprise.defaultImpl()
	var temp interface{} = redisEnterprise
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (redisEnterprise *RedisEnterprise) defaultAzureName() {
	if redisEnterprise.Spec.AzureName == "" {
		redisEnterprise.Spec.AzureName = redisEnterprise.Name
	}
}

// defaultImpl applies the code generated defaults to the RedisEnterprise resource
func (redisEnterprise *RedisEnterprise) defaultImpl() { redisEnterprise.defaultAzureName() }

var _ genruntime.KubernetesResource = &RedisEnterprise{}

// AzureName returns the Azure name of the resource
func (redisEnterprise *RedisEnterprise) AzureName() string {
	return redisEnterprise.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-03-01"
func (redisEnterprise RedisEnterprise) GetAPIVersion() string {
	return "2021-03-01"
}

// GetResourceKind returns the kind of the resource
func (redisEnterprise *RedisEnterprise) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (redisEnterprise *RedisEnterprise) GetSpec() genruntime.ConvertibleSpec {
	return &redisEnterprise.Spec
}

// GetStatus returns the status of this resource
func (redisEnterprise *RedisEnterprise) GetStatus() genruntime.ConvertibleStatus {
	return &redisEnterprise.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cache/redisEnterprise"
func (redisEnterprise *RedisEnterprise) GetType() string {
	return "Microsoft.Cache/redisEnterprise"
}

// NewEmptyStatus returns a new empty (blank) status
func (redisEnterprise *RedisEnterprise) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Cluster_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (redisEnterprise *RedisEnterprise) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(redisEnterprise.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  redisEnterprise.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (redisEnterprise *RedisEnterprise) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Cluster_Status); ok {
		redisEnterprise.Status = *st
		return nil
	}

	// Convert status to required version
	var st Cluster_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	redisEnterprise.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cache-azure-com-v1alpha1api20210301-redisenterprise,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cache.azure.com,resources=redisenterprises,verbs=create;update,versions=v1alpha1api20210301,name=validate.v1alpha1api20210301.redisenterprises.cache.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &RedisEnterprise{}

// ValidateCreate validates the creation of the resource
func (redisEnterprise *RedisEnterprise) ValidateCreate() error {
	validations := redisEnterprise.createValidations()
	var temp interface{} = redisEnterprise
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (redisEnterprise *RedisEnterprise) ValidateDelete() error {
	validations := redisEnterprise.deleteValidations()
	var temp interface{} = redisEnterprise
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (redisEnterprise *RedisEnterprise) ValidateUpdate(old runtime.Object) error {
	validations := redisEnterprise.updateValidations()
	var temp interface{} = redisEnterprise
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (redisEnterprise *RedisEnterprise) createValidations() []func() error {
	return []func() error{redisEnterprise.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (redisEnterprise *RedisEnterprise) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (redisEnterprise *RedisEnterprise) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return redisEnterprise.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (redisEnterprise *RedisEnterprise) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&redisEnterprise.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRedisEnterprise populates our RedisEnterprise from the provided source RedisEnterprise
func (redisEnterprise *RedisEnterprise) AssignPropertiesFromRedisEnterprise(source *v1alpha1api20210301storage.RedisEnterprise) error {

	// ObjectMeta
	redisEnterprise.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec RedisEnterprise_Spec
	err := spec.AssignPropertiesFromRedisEnterpriseSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRedisEnterpriseSpec() to populate field Spec")
	}
	redisEnterprise.Spec = spec

	// Status
	var status Cluster_Status
	err = status.AssignPropertiesFromClusterStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromClusterStatus() to populate field Status")
	}
	redisEnterprise.Status = status

	// No error
	return nil
}

// AssignPropertiesToRedisEnterprise populates the provided destination RedisEnterprise from our RedisEnterprise
func (redisEnterprise *RedisEnterprise) AssignPropertiesToRedisEnterprise(destination *v1alpha1api20210301storage.RedisEnterprise) error {

	// ObjectMeta
	destination.ObjectMeta = *redisEnterprise.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210301storage.RedisEnterprise_Spec
	err := redisEnterprise.Spec.AssignPropertiesToRedisEnterpriseSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRedisEnterpriseSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210301storage.Cluster_Status
	err = redisEnterprise.Status.AssignPropertiesToClusterStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToClusterStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (redisEnterprise *RedisEnterprise) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: redisEnterprise.Spec.OriginalVersion(),
		Kind:    "RedisEnterprise",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-03-01/Microsoft.Cache.Enterprise.json#/resourceDefinitions/redisEnterprise
type RedisEnterpriseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisEnterprise `json:"items"`
}

type Cluster_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//HostName: DNS name of the cluster endpoint
	HostName *string `json:"hostName,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: The minimum TLS version for the cluster to support, e.g. '1.2'
	MinimumTlsVersion *ClusterPropertiesStatusMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections associated with
	//the specified RedisEnterprise cluster
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Current provisioning status of the cluster
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//RedisVersion: Version of redis the cluster supports, e.g. '6'
	RedisVersion *string `json:"redisVersion,omitempty"`

	//ResourceState: Current resource status of the cluster
	ResourceState *ResourceState_Status `json:"resourceState,omitempty"`

	//Sku: The SKU to create, which affects price, performance, and features.
	Sku *Sku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//Zones: The Availability Zones where this cluster will be deployed.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Cluster_Status{}

// ConvertStatusFrom populates our Cluster_Status from the provided source
func (clusterStatus *Cluster_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210301storage.Cluster_Status)
	if ok {
		// Populate our instance from source
		return clusterStatus.AssignPropertiesFromClusterStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210301storage.Cluster_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = clusterStatus.AssignPropertiesFromClusterStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Cluster_Status
func (clusterStatus *Cluster_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210301storage.Cluster_Status)
	if ok {
		// Populate destination from our instance
		return clusterStatus.AssignPropertiesToClusterStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210301storage.Cluster_Status{}
	err := clusterStatus.AssignPropertiesToClusterStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Cluster_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (clusterStatus *Cluster_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Cluster_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (clusterStatus *Cluster_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Cluster_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Cluster_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			clusterStatus.HostName = &hostName
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		clusterStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		clusterStatus.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			clusterStatus.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		clusterStatus.Name = &name
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			clusterStatus.PrivateEndpointConnections = append(clusterStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			clusterStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RedisVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RedisVersion != nil {
			redisVersion := *typedInput.Properties.RedisVersion
			clusterStatus.RedisVersion = &redisVersion
		}
	}

	// Set property ‘ResourceState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceState != nil {
			resourceState := *typedInput.Properties.ResourceState
			clusterStatus.ResourceState = &resourceState
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		clusterStatus.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		clusterStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			clusterStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		clusterStatus.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		clusterStatus.Zones = append(clusterStatus.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromClusterStatus populates our Cluster_Status from the provided source Cluster_Status
func (clusterStatus *Cluster_Status) AssignPropertiesFromClusterStatus(source *v1alpha1api20210301storage.Cluster_Status) error {

	// Conditions
	clusterStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// HostName
	clusterStatus.HostName = genruntime.ClonePointerToString(source.HostName)

	// Id
	clusterStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	clusterStatus.Location = genruntime.ClonePointerToString(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := ClusterPropertiesStatusMinimumTlsVersion(*source.MinimumTlsVersion)
		clusterStatus.MinimumTlsVersion = &minimumTlsVersion
	} else {
		clusterStatus.MinimumTlsVersion = nil
	}

	// Name
	clusterStatus.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		clusterStatus.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		clusterStatus.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		clusterStatus.ProvisioningState = &provisioningState
	} else {
		clusterStatus.ProvisioningState = nil
	}

	// RedisVersion
	clusterStatus.RedisVersion = genruntime.ClonePointerToString(source.RedisVersion)

	// ResourceState
	if source.ResourceState != nil {
		resourceState := ResourceState_Status(*source.ResourceState)
		clusterStatus.ResourceState = &resourceState
	} else {
		clusterStatus.ResourceState = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku")
		}
		clusterStatus.Sku = &sku
	} else {
		clusterStatus.Sku = nil
	}

	// Tags
	clusterStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	clusterStatus.Type = genruntime.ClonePointerToString(source.Type)

	// Zones
	clusterStatus.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToClusterStatus populates the provided destination Cluster_Status from our Cluster_Status
func (clusterStatus *Cluster_Status) AssignPropertiesToClusterStatus(destination *v1alpha1api20210301storage.Cluster_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(clusterStatus.Conditions)

	// HostName
	destination.HostName = genruntime.ClonePointerToString(clusterStatus.HostName)

	// Id
	destination.Id = genruntime.ClonePointerToString(clusterStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(clusterStatus.Location)

	// MinimumTlsVersion
	if clusterStatus.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*clusterStatus.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(clusterStatus.Name)

	// PrivateEndpointConnections
	if clusterStatus.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20210301storage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(clusterStatus.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range clusterStatus.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20210301storage.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if clusterStatus.ProvisioningState != nil {
		provisioningState := string(*clusterStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RedisVersion
	destination.RedisVersion = genruntime.ClonePointerToString(clusterStatus.RedisVersion)

	// ResourceState
	if clusterStatus.ResourceState != nil {
		resourceState := string(*clusterStatus.ResourceState)
		destination.ResourceState = &resourceState
	} else {
		destination.ResourceState = nil
	}

	// Sku
	if clusterStatus.Sku != nil {
		var sku v1alpha1api20210301storage.Sku_Status
		err := clusterStatus.Sku.AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(clusterStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(clusterStatus.Type)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(clusterStatus.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-03-01"}
type RedisEnterpriseSpecAPIVersion string

const RedisEnterpriseSpecAPIVersion20210301 = RedisEnterpriseSpecAPIVersion("2021-03-01")

type RedisEnterprise_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The geo-location where the resource lives
	Location string `json:"location,omitempty"`

	//MinimumTlsVersion: The minimum TLS version for the cluster to support, e.g.
	//'1.2'.
	MinimumTlsVersion *ClusterPropertiesMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	//Sku: SKU parameters supplied to the create RedisEnterprise operation.
	Sku Sku `json:"sku"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//Zones: The Availability Zones where this cluster will be deployed.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &RedisEnterprise_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (redisEnterpriseSpec *RedisEnterprise_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if redisEnterpriseSpec == nil {
		return nil, nil
	}
	var result RedisEnterprise_SpecARM

	// Set property ‘Location’:
	result.Location = redisEnterpriseSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if redisEnterpriseSpec.MinimumTlsVersion != nil {
		minimumTlsVersion := *redisEnterpriseSpec.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}

	// Set property ‘Sku’:
	skuARM, err := redisEnterpriseSpec.Sku.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Sku = skuARM.(SkuARM)

	// Set property ‘Tags’:
	if redisEnterpriseSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range redisEnterpriseSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range redisEnterpriseSpec.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (redisEnterpriseSpec *RedisEnterprise_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RedisEnterprise_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (redisEnterpriseSpec *RedisEnterprise_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RedisEnterprise_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RedisEnterprise_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	redisEnterpriseSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	redisEnterpriseSpec.Location = typedInput.Location

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties.MinimumTlsVersion != nil {
		minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
		redisEnterpriseSpec.MinimumTlsVersion = &minimumTlsVersion
	}

	// Set property ‘Owner’:
	redisEnterpriseSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Sku’:
	var sku Sku
	err := sku.PopulateFromARM(owner, typedInput.Sku)
	if err != nil {
		return err
	}
	redisEnterpriseSpec.Sku = sku

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		redisEnterpriseSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			redisEnterpriseSpec.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		redisEnterpriseSpec.Zones = append(redisEnterpriseSpec.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RedisEnterprise_Spec{}

// ConvertSpecFrom populates our RedisEnterprise_Spec from the provided source
func (redisEnterpriseSpec *RedisEnterprise_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210301storage.RedisEnterprise_Spec)
	if ok {
		// Populate our instance from source
		return redisEnterpriseSpec.AssignPropertiesFromRedisEnterpriseSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210301storage.RedisEnterprise_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = redisEnterpriseSpec.AssignPropertiesFromRedisEnterpriseSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RedisEnterprise_Spec
func (redisEnterpriseSpec *RedisEnterprise_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210301storage.RedisEnterprise_Spec)
	if ok {
		// Populate destination from our instance
		return redisEnterpriseSpec.AssignPropertiesToRedisEnterpriseSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210301storage.RedisEnterprise_Spec{}
	err := redisEnterpriseSpec.AssignPropertiesToRedisEnterpriseSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRedisEnterpriseSpec populates our RedisEnterprise_Spec from the provided source RedisEnterprise_Spec
func (redisEnterpriseSpec *RedisEnterprise_Spec) AssignPropertiesFromRedisEnterpriseSpec(source *v1alpha1api20210301storage.RedisEnterprise_Spec) error {

	// AzureName
	redisEnterpriseSpec.AzureName = source.AzureName

	// Location
	redisEnterpriseSpec.Location = genruntime.GetOptionalStringValue(source.Location)

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := ClusterPropertiesMinimumTlsVersion(*source.MinimumTlsVersion)
		redisEnterpriseSpec.MinimumTlsVersion = &minimumTlsVersion
	} else {
		redisEnterpriseSpec.MinimumTlsVersion = nil
	}

	// Owner
	redisEnterpriseSpec.Owner = source.Owner.Copy()

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		redisEnterpriseSpec.Sku = sku
	} else {
		redisEnterpriseSpec.Sku = Sku{}
	}

	// Tags
	redisEnterpriseSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Zones
	redisEnterpriseSpec.Zones = genruntime.CloneSliceOfString(source.Zones)

	// No error
	return nil
}

// AssignPropertiesToRedisEnterpriseSpec populates the provided destination RedisEnterprise_Spec from our RedisEnterprise_Spec
func (redisEnterpriseSpec *RedisEnterprise_Spec) AssignPropertiesToRedisEnterpriseSpec(destination *v1alpha1api20210301storage.RedisEnterprise_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = redisEnterpriseSpec.AzureName

	// Location
	location := redisEnterpriseSpec.Location
	destination.Location = &location

	// MinimumTlsVersion
	if redisEnterpriseSpec.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*redisEnterpriseSpec.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// OriginalVersion
	destination.OriginalVersion = redisEnterpriseSpec.OriginalVersion()

	// Owner
	destination.Owner = redisEnterpriseSpec.Owner.Copy()

	// Sku
	var sku v1alpha1api20210301storage.Sku
	err := redisEnterpriseSpec.Sku.AssignPropertiesToSku(&sku)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
	}
	destination.Sku = &sku

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(redisEnterpriseSpec.Tags)

	// Zones
	destination.Zones = genruntime.CloneSliceOfString(redisEnterpriseSpec.Zones)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (redisEnterpriseSpec *RedisEnterprise_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (redisEnterpriseSpec *RedisEnterprise_Spec) SetAzureName(azureName string) {
	redisEnterpriseSpec.AzureName = azureName
}

// +kubebuilder:validation:Enum={"1.0","1.1","1.2"}
type ClusterPropertiesMinimumTlsVersion string

const (
	ClusterPropertiesMinimumTlsVersion10 = ClusterPropertiesMinimumTlsVersion("1.0")
	ClusterPropertiesMinimumTlsVersion11 = ClusterPropertiesMinimumTlsVersion("1.1")
	ClusterPropertiesMinimumTlsVersion12 = ClusterPropertiesMinimumTlsVersion("1.2")
)

type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v1alpha1api20210301storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	privateEndpointConnectionStatusSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v1alpha1api20210301storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(privateEndpointConnectionStatusSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-03-01/Microsoft.Cache.Enterprise.json#/definitions/Sku
type Sku struct {
	//Capacity: The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending
	//on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...)
	//for Flash SKUs.
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The type of RedisEnterprise cluster to deploy. Possible values:
	//(Enterprise_E10, EnterpriseFlash_F300 etc.).
	Name SkuName `json:"name"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Capacity’:
	if sku.Capacity != nil {
		capacity := *sku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Name’:
	result.Name = sku.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		sku.Capacity = &capacity
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20210301storage.Sku) error {

	// Capacity
	sku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		sku.Name = SkuName(*source.Name)
	} else {
		sku.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20210301storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(sku.Capacity)

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	//Capacity: The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending
	//on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...)
	//for Flash SKUs.
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The type of RedisEnterprise cluster to deploy. Possible values:
	//(Enterprise_E10, EnterpriseFlash_F300 etc.)
	Name SkuStatusName `json:"name"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (skuStatus *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (skuStatus *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		skuStatus.Capacity = &capacity
	}

	// Set property ‘Name’:
	skuStatus.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesFromSkuStatus(source *v1alpha1api20210301storage.Sku_Status) error {

	// Capacity
	skuStatus.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	if source.Name != nil {
		skuStatus.Name = SkuStatusName(*source.Name)
	} else {
		skuStatus.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesToSkuStatus(destination *v1alpha1api20210301storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(skuStatus.Capacity)

	// Name
	name := string(skuStatus.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&RedisEnterprise{}, &RedisEnterpriseList{})
}
