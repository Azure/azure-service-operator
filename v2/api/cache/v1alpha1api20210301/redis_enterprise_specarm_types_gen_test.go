// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RedisEnterprise_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedisEnterprise_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedisEnterprise_SPECARM, RedisEnterprise_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedisEnterprise_SPECARM runs a test to see if a specific instance of RedisEnterprise_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedisEnterprise_SPECARM(subject RedisEnterprise_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedisEnterprise_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedisEnterprise_SPECARM instances for property testing - lazily instantiated by
//RedisEnterprise_SPECARMGenerator()
var redisEnterprise_specarmGenerator gopter.Gen

// RedisEnterprise_SPECARMGenerator returns a generator of RedisEnterprise_SPECARM instances for property testing.
// We first initialize redisEnterprise_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RedisEnterprise_SPECARMGenerator() gopter.Gen {
	if redisEnterprise_specarmGenerator != nil {
		return redisEnterprise_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_SPECARM(generators)
	redisEnterprise_specarmGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedisEnterprise_SPECARM(generators)
	AddRelatedPropertyGeneratorsForRedisEnterprise_SPECARM(generators)
	redisEnterprise_specarmGenerator = gen.Struct(reflect.TypeOf(RedisEnterprise_SPECARM{}), generators)

	return redisEnterprise_specarmGenerator
}

// AddIndependentPropertyGeneratorsForRedisEnterprise_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedisEnterprise_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRedisEnterprise_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRedisEnterprise_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ClusterProperties_SpecARMGenerator())
	gens["Sku"] = Sku_SpecARMGenerator()
}

func Test_ClusterProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClusterProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClusterProperties_SpecARM, ClusterProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClusterProperties_SpecARM runs a test to see if a specific instance of ClusterProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClusterProperties_SpecARM(subject ClusterProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClusterProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClusterProperties_SpecARM instances for property testing - lazily instantiated by
//ClusterProperties_SpecARMGenerator()
var clusterProperties_specARMGenerator gopter.Gen

// ClusterProperties_SpecARMGenerator returns a generator of ClusterProperties_SpecARM instances for property testing.
func ClusterProperties_SpecARMGenerator() gopter.Gen {
	if clusterProperties_specARMGenerator != nil {
		return clusterProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClusterProperties_SpecARM(generators)
	clusterProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ClusterProperties_SpecARM{}), generators)

	return clusterProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForClusterProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClusterProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(ClusterProperties_MinimumTlsVersion_Spec10, ClusterProperties_MinimumTlsVersion_Spec11, ClusterProperties_MinimumTlsVersion_Spec12))
}

func Test_Sku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_SpecARM, Sku_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_SpecARM runs a test to see if a specific instance of Sku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_SpecARM(subject Sku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_SpecARM instances for property testing - lazily instantiated by Sku_SpecARMGenerator()
var sku_specARMGenerator gopter.Gen

// Sku_SpecARMGenerator returns a generator of Sku_SpecARM instances for property testing.
func Sku_SpecARMGenerator() gopter.Gen {
	if sku_specARMGenerator != nil {
		return sku_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_SpecARM(generators)
	sku_specARMGenerator = gen.Struct(reflect.TypeOf(Sku_SpecARM{}), generators)

	return sku_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_SpecARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.OneConstOf(
		Sku_Name_SpecEnterpriseFlash_F1500,
		Sku_Name_SpecEnterpriseFlash_F300,
		Sku_Name_SpecEnterpriseFlash_F700,
		Sku_Name_SpecEnterprise_E10,
		Sku_Name_SpecEnterprise_E100,
		Sku_Name_SpecEnterprise_E20,
		Sku_Name_SpecEnterprise_E50)
}
