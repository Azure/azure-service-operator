// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Database_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Database_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabase_StatusARM, Database_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabase_StatusARM runs a test to see if a specific instance of Database_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabase_StatusARM(subject Database_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Database_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Database_StatusARM instances for property testing - lazily instantiated by Database_StatusARMGenerator()
var database_statusARMGenerator gopter.Gen

// Database_StatusARMGenerator returns a generator of Database_StatusARM instances for property testing.
// We first initialize database_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Database_StatusARMGenerator() gopter.Gen {
	if database_statusARMGenerator != nil {
		return database_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabase_StatusARM(generators)
	database_statusARMGenerator = gen.Struct(reflect.TypeOf(Database_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabase_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDatabase_StatusARM(generators)
	database_statusARMGenerator = gen.Struct(reflect.TypeOf(Database_StatusARM{}), generators)

	return database_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabase_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabase_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabase_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabase_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabaseProperties_StatusARMGenerator())
}

func Test_DatabaseProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseProperties_StatusARM, DatabaseProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseProperties_StatusARM runs a test to see if a specific instance of DatabaseProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseProperties_StatusARM(subject DatabaseProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_StatusARM instances for property testing - lazily instantiated by
//DatabaseProperties_StatusARMGenerator()
var databaseProperties_statusARMGenerator gopter.Gen

// DatabaseProperties_StatusARMGenerator returns a generator of DatabaseProperties_StatusARM instances for property testing.
// We first initialize databaseProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseProperties_StatusARMGenerator() gopter.Gen {
	if databaseProperties_statusARMGenerator != nil {
		return databaseProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_StatusARM(generators)
	databaseProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseProperties_StatusARM(generators)
	databaseProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_StatusARM{}), generators)

	return databaseProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientProtocol"] = gen.PtrOf(gen.AlphaString())
	gens["ClusteringPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["EvictionPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Modules"] = gen.SliceOf(Module_StatusARMGenerator())
	gens["Persistence"] = gen.PtrOf(Persistence_StatusARMGenerator())
}

func Test_Module_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Module_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForModule_StatusARM, Module_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForModule_StatusARM runs a test to see if a specific instance of Module_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForModule_StatusARM(subject Module_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Module_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Module_StatusARM instances for property testing - lazily instantiated by Module_StatusARMGenerator()
var module_statusARMGenerator gopter.Gen

// Module_StatusARMGenerator returns a generator of Module_StatusARM instances for property testing.
func Module_StatusARMGenerator() gopter.Gen {
	if module_statusARMGenerator != nil {
		return module_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForModule_StatusARM(generators)
	module_statusARMGenerator = gen.Struct(reflect.TypeOf(Module_StatusARM{}), generators)

	return module_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForModule_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForModule_StatusARM(gens map[string]gopter.Gen) {
	gens["Args"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_Persistence_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Persistence_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPersistence_StatusARM, Persistence_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPersistence_StatusARM runs a test to see if a specific instance of Persistence_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPersistence_StatusARM(subject Persistence_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Persistence_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Persistence_StatusARM instances for property testing - lazily instantiated by
//Persistence_StatusARMGenerator()
var persistence_statusARMGenerator gopter.Gen

// Persistence_StatusARMGenerator returns a generator of Persistence_StatusARM instances for property testing.
func Persistence_StatusARMGenerator() gopter.Gen {
	if persistence_statusARMGenerator != nil {
		return persistence_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPersistence_StatusARM(generators)
	persistence_statusARMGenerator = gen.Struct(reflect.TypeOf(Persistence_StatusARM{}), generators)

	return persistence_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPersistence_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPersistence_StatusARM(gens map[string]gopter.Gen) {
	gens["AofEnabled"] = gen.PtrOf(gen.Bool())
	gens["AofFrequency"] = gen.PtrOf(gen.AlphaString())
	gens["RdbEnabled"] = gen.PtrOf(gen.Bool())
	gens["RdbFrequency"] = gen.PtrOf(gen.AlphaString())
}
