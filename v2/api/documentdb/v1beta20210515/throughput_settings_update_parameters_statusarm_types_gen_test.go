// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ThroughputSettingsUpdateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsUpdateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsUpdateParameters_STATUSARM, ThroughputSettingsUpdateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsUpdateParameters_STATUSARM runs a test to see if a specific instance of ThroughputSettingsUpdateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsUpdateParameters_STATUSARM(subject ThroughputSettingsUpdateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsUpdateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsUpdateParameters_STATUSARM instances for property testing - lazily instantiated by
// ThroughputSettingsUpdateParameters_STATUSARMGenerator()
var throughputSettingsUpdateParameters_STATUSARMGenerator gopter.Gen

// ThroughputSettingsUpdateParameters_STATUSARMGenerator returns a generator of ThroughputSettingsUpdateParameters_STATUSARM instances for property testing.
// We first initialize throughputSettingsUpdateParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsUpdateParameters_STATUSARMGenerator() gopter.Gen {
	if throughputSettingsUpdateParameters_STATUSARMGenerator != nil {
		return throughputSettingsUpdateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM(generators)
	throughputSettingsUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM(generators)
	throughputSettingsUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateParameters_STATUSARM{}), generators)

	return throughputSettingsUpdateParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ThroughputSettingsUpdateProperties_STATUSARMGenerator())
}

func Test_ThroughputSettingsUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsUpdateProperties_STATUSARM, ThroughputSettingsUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsUpdateProperties_STATUSARM runs a test to see if a specific instance of ThroughputSettingsUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsUpdateProperties_STATUSARM(subject ThroughputSettingsUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsUpdateProperties_STATUSARM instances for property testing - lazily instantiated by
// ThroughputSettingsUpdateProperties_STATUSARMGenerator()
var throughputSettingsUpdateProperties_STATUSARMGenerator gopter.Gen

// ThroughputSettingsUpdateProperties_STATUSARMGenerator returns a generator of ThroughputSettingsUpdateProperties_STATUSARM instances for property testing.
func ThroughputSettingsUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if throughputSettingsUpdateProperties_STATUSARMGenerator != nil {
		return throughputSettingsUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForThroughputSettingsUpdateProperties_STATUSARM(generators)
	throughputSettingsUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateProperties_STATUSARM{}), generators)

	return throughputSettingsUpdateProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForThroughputSettingsUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(ThroughputSettingsResource_STATUSARMGenerator())
}

func Test_ThroughputSettingsResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResource_STATUSARM, ThroughputSettingsResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResource_STATUSARM runs a test to see if a specific instance of ThroughputSettingsResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResource_STATUSARM(subject ThroughputSettingsResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_STATUSARM instances for property testing - lazily instantiated by
// ThroughputSettingsResource_STATUSARMGenerator()
var throughputSettingsResource_STATUSARMGenerator gopter.Gen

// ThroughputSettingsResource_STATUSARMGenerator returns a generator of ThroughputSettingsResource_STATUSARM instances for property testing.
// We first initialize throughputSettingsResource_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResource_STATUSARMGenerator() gopter.Gen {
	if throughputSettingsResource_STATUSARMGenerator != nil {
		return throughputSettingsResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_STATUSARM(generators)
	throughputSettingsResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResource_STATUSARM(generators)
	throughputSettingsResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_STATUSARM{}), generators)

	return throughputSettingsResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["MinimumThroughput"] = gen.PtrOf(gen.AlphaString())
	gens["OfferReplacePending"] = gen.PtrOf(gen.AlphaString())
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResource_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResource_STATUSARMGenerator())
}

func Test_AutoscaleSettingsResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResource_STATUSARM, AutoscaleSettingsResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResource_STATUSARM runs a test to see if a specific instance of AutoscaleSettingsResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResource_STATUSARM(subject AutoscaleSettingsResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_STATUSARM instances for property testing - lazily instantiated by
// AutoscaleSettingsResource_STATUSARMGenerator()
var autoscaleSettingsResource_STATUSARMGenerator gopter.Gen

// AutoscaleSettingsResource_STATUSARMGenerator returns a generator of AutoscaleSettingsResource_STATUSARM instances for property testing.
// We first initialize autoscaleSettingsResource_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResource_STATUSARMGenerator() gopter.Gen {
	if autoscaleSettingsResource_STATUSARMGenerator != nil {
		return autoscaleSettingsResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM(generators)
	autoscaleSettingsResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM(generators)
	autoscaleSettingsResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_STATUSARM{}), generators)

	return autoscaleSettingsResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
	gens["TargetMaxThroughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResource_STATUSARMGenerator())
}

func Test_AutoUpgradePolicyResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResource_STATUSARM, AutoUpgradePolicyResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResource_STATUSARM runs a test to see if a specific instance of AutoUpgradePolicyResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResource_STATUSARM(subject AutoUpgradePolicyResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_STATUSARM instances for property testing - lazily instantiated by
// AutoUpgradePolicyResource_STATUSARMGenerator()
var autoUpgradePolicyResource_STATUSARMGenerator gopter.Gen

// AutoUpgradePolicyResource_STATUSARMGenerator returns a generator of AutoUpgradePolicyResource_STATUSARM instances for property testing.
func AutoUpgradePolicyResource_STATUSARMGenerator() gopter.Gen {
	if autoUpgradePolicyResource_STATUSARMGenerator != nil {
		return autoUpgradePolicyResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_STATUSARM(generators)
	autoUpgradePolicyResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_STATUSARM{}), generators)

	return autoUpgradePolicyResource_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResource_STATUSARMGenerator())
}

func Test_ThroughputPolicyResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResource_STATUSARM, ThroughputPolicyResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResource_STATUSARM runs a test to see if a specific instance of ThroughputPolicyResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResource_STATUSARM(subject ThroughputPolicyResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_STATUSARM instances for property testing - lazily instantiated by
// ThroughputPolicyResource_STATUSARMGenerator()
var throughputPolicyResource_STATUSARMGenerator gopter.Gen

// ThroughputPolicyResource_STATUSARMGenerator returns a generator of ThroughputPolicyResource_STATUSARM instances for property testing.
func ThroughputPolicyResource_STATUSARMGenerator() gopter.Gen {
	if throughputPolicyResource_STATUSARMGenerator != nil {
		return throughputPolicyResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResource_STATUSARM(generators)
	throughputPolicyResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_STATUSARM{}), generators)

	return throughputPolicyResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
