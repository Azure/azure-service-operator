// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlUserDefinedFunctionGetResults_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetResults_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetResults_STATUS_ARM, SqlUserDefinedFunctionGetResults_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetResults_STATUS_ARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetResults_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetResults_STATUS_ARM(subject SqlUserDefinedFunctionGetResults_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetResults_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetResults_STATUS_ARM instances for property testing - lazily instantiated by
// SqlUserDefinedFunctionGetResults_STATUS_ARMGenerator()
var sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetResults_STATUS_ARMGenerator returns a generator of SqlUserDefinedFunctionGetResults_STATUS_ARM instances for property testing.
// We first initialize sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlUserDefinedFunctionGetResults_STATUS_ARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator != nil {
		return sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM(generators)
	sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetResults_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM(generators)
	sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetResults_STATUS_ARM{}), generators)

	return sqlUserDefinedFunctionGetResults_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator())
}

func Test_SqlUserDefinedFunctionGetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUS_ARM, SqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUS_ARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUS_ARM(subject SqlUserDefinedFunctionGetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator()
var sqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator returns a generator of SqlUserDefinedFunctionGetProperties_STATUS_ARM instances for property testing.
func SqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator != nil {
		return sqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUS_ARM(generators)
	sqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetProperties_STATUS_ARM{}), generators)

	return sqlUserDefinedFunctionGetProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator())
}

func Test_SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM, SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM(subject SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM instances for property testing - lazily
// instantiated by SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator()
var sqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator returns a generator of SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM instances for property testing.
func SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator != nil {
		return sqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM(generators)
	sqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM{}), generators)

	return sqlUserDefinedFunctionGetProperties_Resource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
