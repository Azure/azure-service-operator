// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccounts_SqlRoleAssignment_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccounts_SqlRoleAssignment_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_SqlRoleAssignment_SpecARM, DatabaseAccounts_SqlRoleAssignment_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_SqlRoleAssignment_SpecARM runs a test to see if a specific instance of DatabaseAccounts_SqlRoleAssignment_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_SqlRoleAssignment_SpecARM(subject DatabaseAccounts_SqlRoleAssignment_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccounts_SqlRoleAssignment_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccounts_SqlRoleAssignment_SpecARM instances for property testing - lazily instantiated by
// DatabaseAccounts_SqlRoleAssignment_SpecARMGenerator()
var databaseAccounts_SqlRoleAssignment_SpecARMGenerator gopter.Gen

// DatabaseAccounts_SqlRoleAssignment_SpecARMGenerator returns a generator of DatabaseAccounts_SqlRoleAssignment_SpecARM instances for property testing.
// We first initialize databaseAccounts_SqlRoleAssignment_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_SqlRoleAssignment_SpecARMGenerator() gopter.Gen {
	if databaseAccounts_SqlRoleAssignment_SpecARMGenerator != nil {
		return databaseAccounts_SqlRoleAssignment_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM(generators)
	databaseAccounts_SqlRoleAssignment_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlRoleAssignment_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM(generators)
	databaseAccounts_SqlRoleAssignment_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlRoleAssignment_SpecARM{}), generators)

	return databaseAccounts_SqlRoleAssignment_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlRoleAssignment_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlRoleAssignmentResourceARMGenerator())
}

func Test_SqlRoleAssignmentResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlRoleAssignmentResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlRoleAssignmentResourceARM, SqlRoleAssignmentResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlRoleAssignmentResourceARM runs a test to see if a specific instance of SqlRoleAssignmentResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlRoleAssignmentResourceARM(subject SqlRoleAssignmentResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlRoleAssignmentResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlRoleAssignmentResourceARM instances for property testing - lazily instantiated by
// SqlRoleAssignmentResourceARMGenerator()
var sqlRoleAssignmentResourceARMGenerator gopter.Gen

// SqlRoleAssignmentResourceARMGenerator returns a generator of SqlRoleAssignmentResourceARM instances for property testing.
func SqlRoleAssignmentResourceARMGenerator() gopter.Gen {
	if sqlRoleAssignmentResourceARMGenerator != nil {
		return sqlRoleAssignmentResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlRoleAssignmentResourceARM(generators)
	sqlRoleAssignmentResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlRoleAssignmentResourceARM{}), generators)

	return sqlRoleAssignmentResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlRoleAssignmentResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlRoleAssignmentResourceARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["RoleDefinitionId"] = gen.PtrOf(gen.AlphaString())
	gens["Scope"] = gen.PtrOf(gen.AlphaString())
}
