// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBDatabaseCreateUpdateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseCreateUpdateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseCreateUpdateParameters_STATUSARM, MongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseCreateUpdateParameters_STATUSARM runs a test to see if a specific instance of MongoDBDatabaseCreateUpdateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseCreateUpdateParameters_STATUSARM(subject MongoDBDatabaseCreateUpdateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseCreateUpdateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseCreateUpdateParameters_STATUSARM instances for property testing - lazily instantiated by
// MongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator()
var mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator gopter.Gen

// MongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator returns a generator of MongoDBDatabaseCreateUpdateParameters_STATUSARM instances for property testing.
// We first initialize mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator() gopter.Gen {
	if mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator != nil {
		return mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM(generators)
	mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM(generators)
	mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateParameters_STATUSARM{}), generators)

	return mongoDBDatabaseCreateUpdateParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator())
}

func Test_MongoDBDatabaseCreateUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseCreateUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseCreateUpdateProperties_STATUSARM, MongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseCreateUpdateProperties_STATUSARM runs a test to see if a specific instance of MongoDBDatabaseCreateUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseCreateUpdateProperties_STATUSARM(subject MongoDBDatabaseCreateUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseCreateUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseCreateUpdateProperties_STATUSARM instances for property testing - lazily instantiated by
// MongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator()
var mongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator gopter.Gen

// MongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator returns a generator of MongoDBDatabaseCreateUpdateProperties_STATUSARM instances for property testing.
func MongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if mongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator != nil {
		return mongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateProperties_STATUSARM(generators)
	mongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateProperties_STATUSARM{}), generators)

	return mongoDBDatabaseCreateUpdateProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseResource_STATUSARMGenerator())
}

func Test_MongoDBDatabaseResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResource_STATUSARM, MongoDBDatabaseResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResource_STATUSARM runs a test to see if a specific instance of MongoDBDatabaseResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResource_STATUSARM(subject MongoDBDatabaseResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_STATUSARM instances for property testing - lazily instantiated by
// MongoDBDatabaseResource_STATUSARMGenerator()
var mongoDBDatabaseResource_STATUSARMGenerator gopter.Gen

// MongoDBDatabaseResource_STATUSARMGenerator returns a generator of MongoDBDatabaseResource_STATUSARM instances for property testing.
func MongoDBDatabaseResource_STATUSARMGenerator() gopter.Gen {
	if mongoDBDatabaseResource_STATUSARMGenerator != nil {
		return mongoDBDatabaseResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_STATUSARM(generators)
	mongoDBDatabaseResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_STATUSARM{}), generators)

	return mongoDBDatabaseResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
