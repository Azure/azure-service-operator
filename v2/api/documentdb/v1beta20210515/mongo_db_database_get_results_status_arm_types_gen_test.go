// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBDatabaseGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetResultsSTATUSARM, MongoDBDatabaseGetResultsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetResultsSTATUSARM runs a test to see if a specific instance of MongoDBDatabaseGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetResultsSTATUSARM(subject MongoDBDatabaseGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetResults_STATUSARM instances for property testing - lazily instantiated by
// MongoDBDatabaseGetResultsSTATUSARMGenerator()
var mongoDBDatabaseGetResultsSTATUSARMGenerator gopter.Gen

// MongoDBDatabaseGetResultsSTATUSARMGenerator returns a generator of MongoDBDatabaseGetResults_STATUSARM instances for property testing.
// We first initialize mongoDBDatabaseGetResultsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabaseGetResultsSTATUSARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetResultsSTATUSARMGenerator != nil {
		return mongoDBDatabaseGetResultsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM(generators)
	mongoDBDatabaseGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM(generators)
	mongoDBDatabaseGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetResults_STATUSARM{}), generators)

	return mongoDBDatabaseGetResultsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseGetPropertiesSTATUSARMGenerator())
}

func Test_MongoDBDatabaseGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetPropertiesSTATUSARM, MongoDBDatabaseGetPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetPropertiesSTATUSARM runs a test to see if a specific instance of MongoDBDatabaseGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetPropertiesSTATUSARM(subject MongoDBDatabaseGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetProperties_STATUSARM instances for property testing - lazily instantiated by
// MongoDBDatabaseGetPropertiesSTATUSARMGenerator()
var mongoDBDatabaseGetPropertiesSTATUSARMGenerator gopter.Gen

// MongoDBDatabaseGetPropertiesSTATUSARMGenerator returns a generator of MongoDBDatabaseGetProperties_STATUSARM instances for property testing.
func MongoDBDatabaseGetPropertiesSTATUSARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetPropertiesSTATUSARMGenerator != nil {
		return mongoDBDatabaseGetPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseGetPropertiesSTATUSARM(generators)
	mongoDBDatabaseGetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_STATUSARM{}), generators)

	return mongoDBDatabaseGetPropertiesSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseGetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseGetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResourceSTATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator())
}

func Test_MongoDBDatabaseGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetPropertiesSTATUSResourceARM, MongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetPropertiesSTATUSResourceARM runs a test to see if a specific instance of MongoDBDatabaseGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetPropertiesSTATUSResourceARM(subject MongoDBDatabaseGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetProperties_STATUS_ResourceARM instances for property testing - lazily instantiated by
// MongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator()
var mongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator gopter.Gen

// MongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator returns a generator of MongoDBDatabaseGetProperties_STATUS_ResourceARM instances for property testing.
func MongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator != nil {
		return mongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetPropertiesSTATUSResourceARM(generators)
	mongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_STATUS_ResourceARM{}), generators)

	return mongoDBDatabaseGetPropertiesSTATUSResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseGetPropertiesSTATUSResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseGetPropertiesSTATUSResourceARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
