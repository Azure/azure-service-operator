// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabaseCreateUpdateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_STATUSARM, SqlDatabaseCreateUpdateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_STATUSARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_STATUSARM(subject SqlDatabaseCreateUpdateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateParameters_STATUSARM instances for property testing - lazily instantiated by
// SqlDatabaseCreateUpdateParameters_STATUSARMGenerator()
var sqlDatabaseCreateUpdateParameters_STATUSARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateParameters_STATUSARMGenerator returns a generator of SqlDatabaseCreateUpdateParameters_STATUSARM instances for property testing.
// We first initialize sqlDatabaseCreateUpdateParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseCreateUpdateParameters_STATUSARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateParameters_STATUSARMGenerator != nil {
		return sqlDatabaseCreateUpdateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM(generators)
	sqlDatabaseCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM(generators)
	sqlDatabaseCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_STATUSARM{}), generators)

	return sqlDatabaseCreateUpdateParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseCreateUpdateProperties_STATUSARMGenerator())
}

func Test_SqlDatabaseCreateUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_STATUSARM, SqlDatabaseCreateUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_STATUSARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_STATUSARM(subject SqlDatabaseCreateUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlDatabaseCreateUpdateProperties_STATUSARMGenerator()
var sqlDatabaseCreateUpdateProperties_STATUSARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateProperties_STATUSARMGenerator returns a generator of SqlDatabaseCreateUpdateProperties_STATUSARM instances for property testing.
func SqlDatabaseCreateUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateProperties_STATUSARMGenerator != nil {
		return sqlDatabaseCreateUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_STATUSARM(generators)
	sqlDatabaseCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateProperties_STATUSARM{}), generators)

	return sqlDatabaseCreateUpdateProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlDatabaseResource_STATUSARMGenerator())
}

func Test_SqlDatabaseResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_STATUSARM, SqlDatabaseResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_STATUSARM runs a test to see if a specific instance of SqlDatabaseResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_STATUSARM(subject SqlDatabaseResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_STATUSARM instances for property testing - lazily instantiated by
// SqlDatabaseResource_STATUSARMGenerator()
var sqlDatabaseResource_STATUSARMGenerator gopter.Gen

// SqlDatabaseResource_STATUSARMGenerator returns a generator of SqlDatabaseResource_STATUSARM instances for property testing.
func SqlDatabaseResource_STATUSARMGenerator() gopter.Gen {
	if sqlDatabaseResource_STATUSARMGenerator != nil {
		return sqlDatabaseResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_STATUSARM(generators)
	sqlDatabaseResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_STATUSARM{}), generators)

	return sqlDatabaseResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
