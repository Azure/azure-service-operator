// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ThroughputSettingsGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsGetResultsSTATUSARM, ThroughputSettingsGetResultsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsGetResultsSTATUSARM runs a test to see if a specific instance of ThroughputSettingsGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsGetResultsSTATUSARM(subject ThroughputSettingsGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsGetResults_STATUSARM instances for property testing - lazily instantiated by
// ThroughputSettingsGetResultsSTATUSARMGenerator()
var throughputSettingsGetResultsSTATUSARMGenerator gopter.Gen

// ThroughputSettingsGetResultsSTATUSARMGenerator returns a generator of ThroughputSettingsGetResults_STATUSARM instances for property testing.
// We first initialize throughputSettingsGetResultsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsGetResultsSTATUSARMGenerator() gopter.Gen {
	if throughputSettingsGetResultsSTATUSARMGenerator != nil {
		return throughputSettingsGetResultsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM(generators)
	throughputSettingsGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM(generators)
	throughputSettingsGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetResults_STATUSARM{}), generators)

	return throughputSettingsGetResultsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ThroughputSettingsGetPropertiesSTATUSARMGenerator())
}

func Test_ThroughputSettingsGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsGetPropertiesSTATUSARM, ThroughputSettingsGetPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsGetPropertiesSTATUSARM runs a test to see if a specific instance of ThroughputSettingsGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsGetPropertiesSTATUSARM(subject ThroughputSettingsGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsGetProperties_STATUSARM instances for property testing - lazily instantiated by
// ThroughputSettingsGetPropertiesSTATUSARMGenerator()
var throughputSettingsGetPropertiesSTATUSARMGenerator gopter.Gen

// ThroughputSettingsGetPropertiesSTATUSARMGenerator returns a generator of ThroughputSettingsGetProperties_STATUSARM instances for property testing.
func ThroughputSettingsGetPropertiesSTATUSARMGenerator() gopter.Gen {
	if throughputSettingsGetPropertiesSTATUSARMGenerator != nil {
		return throughputSettingsGetPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSARM(generators)
	throughputSettingsGetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetProperties_STATUSARM{}), generators)

	return throughputSettingsGetPropertiesSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(ThroughputSettingsGetPropertiesSTATUSResourceARMGenerator())
}

func Test_ThroughputSettingsGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsGetPropertiesSTATUSResourceARM, ThroughputSettingsGetPropertiesSTATUSResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsGetPropertiesSTATUSResourceARM runs a test to see if a specific instance of ThroughputSettingsGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsGetPropertiesSTATUSResourceARM(subject ThroughputSettingsGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsGetProperties_STATUS_ResourceARM instances for property testing - lazily instantiated
// by ThroughputSettingsGetPropertiesSTATUSResourceARMGenerator()
var throughputSettingsGetPropertiesSTATUSResourceARMGenerator gopter.Gen

// ThroughputSettingsGetPropertiesSTATUSResourceARMGenerator returns a generator of ThroughputSettingsGetProperties_STATUS_ResourceARM instances for property testing.
// We first initialize throughputSettingsGetPropertiesSTATUSResourceARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsGetPropertiesSTATUSResourceARMGenerator() gopter.Gen {
	if throughputSettingsGetPropertiesSTATUSResourceARMGenerator != nil {
		return throughputSettingsGetPropertiesSTATUSResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM(generators)
	throughputSettingsGetPropertiesSTATUSResourceARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetProperties_STATUS_ResourceARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM(generators)
	throughputSettingsGetPropertiesSTATUSResourceARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetProperties_STATUS_ResourceARM{}), generators)

	return throughputSettingsGetPropertiesSTATUSResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["MinimumThroughput"] = gen.PtrOf(gen.AlphaString())
	gens["OfferReplacePending"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Throughput"] = gen.PtrOf(gen.Int())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsGetPropertiesSTATUSResourceARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResourceSTATUSARMGenerator())
}

func Test_AutoscaleSettingsResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResourceSTATUSARM, AutoscaleSettingsResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResourceSTATUSARM runs a test to see if a specific instance of AutoscaleSettingsResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResourceSTATUSARM(subject AutoscaleSettingsResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_STATUSARM instances for property testing - lazily instantiated by
// AutoscaleSettingsResourceSTATUSARMGenerator()
var autoscaleSettingsResourceSTATUSARMGenerator gopter.Gen

// AutoscaleSettingsResourceSTATUSARMGenerator returns a generator of AutoscaleSettingsResource_STATUSARM instances for property testing.
// We first initialize autoscaleSettingsResourceSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResourceSTATUSARMGenerator() gopter.Gen {
	if autoscaleSettingsResourceSTATUSARMGenerator != nil {
		return autoscaleSettingsResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM(generators)
	autoscaleSettingsResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM(generators)
	autoscaleSettingsResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_STATUSARM{}), generators)

	return autoscaleSettingsResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
	gens["TargetMaxThroughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResourceSTATUSARMGenerator())
}

func Test_AutoUpgradePolicyResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResourceSTATUSARM, AutoUpgradePolicyResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResourceSTATUSARM runs a test to see if a specific instance of AutoUpgradePolicyResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResourceSTATUSARM(subject AutoUpgradePolicyResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_STATUSARM instances for property testing - lazily instantiated by
// AutoUpgradePolicyResourceSTATUSARMGenerator()
var autoUpgradePolicyResourceSTATUSARMGenerator gopter.Gen

// AutoUpgradePolicyResourceSTATUSARMGenerator returns a generator of AutoUpgradePolicyResource_STATUSARM instances for property testing.
func AutoUpgradePolicyResourceSTATUSARMGenerator() gopter.Gen {
	if autoUpgradePolicyResourceSTATUSARMGenerator != nil {
		return autoUpgradePolicyResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceSTATUSARM(generators)
	autoUpgradePolicyResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_STATUSARM{}), generators)

	return autoUpgradePolicyResourceSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResourceSTATUSARMGenerator())
}

func Test_ThroughputPolicyResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResourceSTATUSARM, ThroughputPolicyResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResourceSTATUSARM runs a test to see if a specific instance of ThroughputPolicyResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResourceSTATUSARM(subject ThroughputPolicyResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_STATUSARM instances for property testing - lazily instantiated by
// ThroughputPolicyResourceSTATUSARMGenerator()
var throughputPolicyResourceSTATUSARMGenerator gopter.Gen

// ThroughputPolicyResourceSTATUSARMGenerator returns a generator of ThroughputPolicyResource_STATUSARM instances for property testing.
func ThroughputPolicyResourceSTATUSARMGenerator() gopter.Gen {
	if throughputPolicyResourceSTATUSARMGenerator != nil {
		return throughputPolicyResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResourceSTATUSARM(generators)
	throughputPolicyResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_STATUSARM{}), generators)

	return throughputPolicyResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
