// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM, DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM(subject DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM instances for property testing - lazily
// instantiated by DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator()
var databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator != nil {
		return databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM(generators)
	databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM(generators)
	databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM{}), generators)

	return databaseAccountsSqlDatabasesContainersTrigger_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTrigger_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlTriggerGetProperties_STATUSARMGenerator())
}

func Test_SqlTriggerGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerGetProperties_STATUSARM, SqlTriggerGetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerGetProperties_STATUSARM runs a test to see if a specific instance of SqlTriggerGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerGetProperties_STATUSARM(subject SqlTriggerGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerGetProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlTriggerGetProperties_STATUSARMGenerator()
var sqlTriggerGetProperties_STATUSARMGenerator gopter.Gen

// SqlTriggerGetProperties_STATUSARMGenerator returns a generator of SqlTriggerGetProperties_STATUSARM instances for property testing.
func SqlTriggerGetProperties_STATUSARMGenerator() gopter.Gen {
	if sqlTriggerGetProperties_STATUSARMGenerator != nil {
		return sqlTriggerGetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlTriggerGetProperties_STATUSARM(generators)
	sqlTriggerGetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerGetProperties_STATUSARM{}), generators)

	return sqlTriggerGetProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlTriggerGetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlTriggerGetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(SqlTriggerGetProperties_Resource_STATUSARMGenerator())
}

func Test_SqlTriggerGetProperties_Resource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerGetProperties_Resource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerGetProperties_Resource_STATUSARM, SqlTriggerGetProperties_Resource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerGetProperties_Resource_STATUSARM runs a test to see if a specific instance of SqlTriggerGetProperties_Resource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerGetProperties_Resource_STATUSARM(subject SqlTriggerGetProperties_Resource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerGetProperties_Resource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerGetProperties_Resource_STATUSARM instances for property testing - lazily instantiated by
// SqlTriggerGetProperties_Resource_STATUSARMGenerator()
var sqlTriggerGetProperties_Resource_STATUSARMGenerator gopter.Gen

// SqlTriggerGetProperties_Resource_STATUSARMGenerator returns a generator of SqlTriggerGetProperties_Resource_STATUSARM instances for property testing.
func SqlTriggerGetProperties_Resource_STATUSARMGenerator() gopter.Gen {
	if sqlTriggerGetProperties_Resource_STATUSARMGenerator != nil {
		return sqlTriggerGetProperties_Resource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerGetProperties_Resource_STATUSARM(generators)
	sqlTriggerGetProperties_Resource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerGetProperties_Resource_STATUSARM{}), generators)

	return sqlTriggerGetProperties_Resource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlTriggerGetProperties_Resource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlTriggerGetProperties_Resource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["TriggerOperation"] = gen.PtrOf(gen.OneConstOf(
		SqlTriggerGetProperties_Resource_TriggerOperation_All_STATUS,
		SqlTriggerGetProperties_Resource_TriggerOperation_Create_STATUS,
		SqlTriggerGetProperties_Resource_TriggerOperation_Delete_STATUS,
		SqlTriggerGetProperties_Resource_TriggerOperation_Replace_STATUS,
		SqlTriggerGetProperties_Resource_TriggerOperation_Update_STATUS))
	gens["TriggerType"] = gen.PtrOf(gen.OneConstOf(SqlTriggerGetProperties_Resource_TriggerType_Post_STATUS, SqlTriggerGetProperties_Resource_TriggerType_Pre_STATUS))
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
