// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBCollectionCreateUpdateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdateParameters_STATUSARM, MongoDBCollectionCreateUpdateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdateParameters_STATUSARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdateParameters_STATUSARM(subject MongoDBCollectionCreateUpdateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateParameters_STATUSARM instances for property testing - lazily instantiated
// by MongoDBCollectionCreateUpdateParameters_STATUSARMGenerator()
var mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdateParameters_STATUSARMGenerator returns a generator of MongoDBCollectionCreateUpdateParameters_STATUSARM instances for property testing.
// We first initialize mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionCreateUpdateParameters_STATUSARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator != nil {
		return mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM(generators)
	mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM(generators)
	mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateParameters_STATUSARM{}), generators)

	return mongoDBCollectionCreateUpdateParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBCollectionCreateUpdateProperties_STATUSARMGenerator())
}

func Test_MongoDBCollectionCreateUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdateProperties_STATUSARM, MongoDBCollectionCreateUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdateProperties_STATUSARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdateProperties_STATUSARM(subject MongoDBCollectionCreateUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateProperties_STATUSARM instances for property testing - lazily instantiated
// by MongoDBCollectionCreateUpdateProperties_STATUSARMGenerator()
var mongoDBCollectionCreateUpdateProperties_STATUSARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdateProperties_STATUSARMGenerator returns a generator of MongoDBCollectionCreateUpdateProperties_STATUSARM instances for property testing.
func MongoDBCollectionCreateUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdateProperties_STATUSARMGenerator != nil {
		return mongoDBCollectionCreateUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateProperties_STATUSARM(generators)
	mongoDBCollectionCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateProperties_STATUSARM{}), generators)

	return mongoDBCollectionCreateUpdateProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionResource_STATUSARMGenerator())
}

func Test_CreateUpdateOptions_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptions_STATUSARM, CreateUpdateOptions_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptions_STATUSARM runs a test to see if a specific instance of CreateUpdateOptions_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptions_STATUSARM(subject CreateUpdateOptions_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_STATUSARM instances for property testing - lazily instantiated by
// CreateUpdateOptions_STATUSARMGenerator()
var createUpdateOptions_STATUSARMGenerator gopter.Gen

// CreateUpdateOptions_STATUSARMGenerator returns a generator of CreateUpdateOptions_STATUSARM instances for property testing.
// We first initialize createUpdateOptions_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptions_STATUSARMGenerator() gopter.Gen {
	if createUpdateOptions_STATUSARMGenerator != nil {
		return createUpdateOptions_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_STATUSARM(generators)
	createUpdateOptions_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptions_STATUSARM(generators)
	createUpdateOptions_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_STATUSARM{}), generators)

	return createUpdateOptions_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptions_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptions_STATUSARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptions_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptions_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_STATUSARMGenerator())
}

func Test_MongoDBCollectionResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResource_STATUSARM, MongoDBCollectionResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResource_STATUSARM runs a test to see if a specific instance of MongoDBCollectionResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResource_STATUSARM(subject MongoDBCollectionResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_STATUSARM instances for property testing - lazily instantiated by
// MongoDBCollectionResource_STATUSARMGenerator()
var mongoDBCollectionResource_STATUSARMGenerator gopter.Gen

// MongoDBCollectionResource_STATUSARMGenerator returns a generator of MongoDBCollectionResource_STATUSARM instances for property testing.
// We first initialize mongoDBCollectionResource_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResource_STATUSARMGenerator() gopter.Gen {
	if mongoDBCollectionResource_STATUSARMGenerator != nil {
		return mongoDBCollectionResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_STATUSARM(generators)
	mongoDBCollectionResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResource_STATUSARM(generators)
	mongoDBCollectionResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_STATUSARM{}), generators)

	return mongoDBCollectionResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResource_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_STATUSARMGenerator())
}

func Test_AutoscaleSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_STATUSARM, AutoscaleSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_STATUSARM runs a test to see if a specific instance of AutoscaleSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_STATUSARM(subject AutoscaleSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_STATUSARM instances for property testing - lazily instantiated by
// AutoscaleSettings_STATUSARMGenerator()
var autoscaleSettings_STATUSARMGenerator gopter.Gen

// AutoscaleSettings_STATUSARMGenerator returns a generator of AutoscaleSettings_STATUSARM instances for property testing.
func AutoscaleSettings_STATUSARMGenerator() gopter.Gen {
	if autoscaleSettings_STATUSARMGenerator != nil {
		return autoscaleSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUSARM(generators)
	autoscaleSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_STATUSARM{}), generators)

	return autoscaleSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_STATUSARM, MongoIndex_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_STATUSARM runs a test to see if a specific instance of MongoIndex_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_STATUSARM(subject MongoIndex_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_STATUSARM instances for property testing - lazily instantiated by
// MongoIndex_STATUSARMGenerator()
var mongoIndex_STATUSARMGenerator gopter.Gen

// MongoIndex_STATUSARMGenerator returns a generator of MongoIndex_STATUSARM instances for property testing.
func MongoIndex_STATUSARMGenerator() gopter.Gen {
	if mongoIndex_STATUSARMGenerator != nil {
		return mongoIndex_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_STATUSARM(generators)
	mongoIndex_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_STATUSARM{}), generators)

	return mongoIndex_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_STATUSARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_STATUSARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_STATUSARMGenerator())
}

func Test_MongoIndexKeys_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_STATUSARM, MongoIndexKeys_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_STATUSARM runs a test to see if a specific instance of MongoIndexKeys_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_STATUSARM(subject MongoIndexKeys_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_STATUSARM instances for property testing - lazily instantiated by
// MongoIndexKeys_STATUSARMGenerator()
var mongoIndexKeys_STATUSARMGenerator gopter.Gen

// MongoIndexKeys_STATUSARMGenerator returns a generator of MongoIndexKeys_STATUSARM instances for property testing.
func MongoIndexKeys_STATUSARMGenerator() gopter.Gen {
	if mongoIndexKeys_STATUSARMGenerator != nil {
		return mongoIndexKeys_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUSARM(generators)
	mongoIndexKeys_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_STATUSARM{}), generators)

	return mongoIndexKeys_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUSARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_STATUSARM, MongoIndexOptions_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_STATUSARM runs a test to see if a specific instance of MongoIndexOptions_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_STATUSARM(subject MongoIndexOptions_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_STATUSARM instances for property testing - lazily instantiated by
// MongoIndexOptions_STATUSARMGenerator()
var mongoIndexOptions_STATUSARMGenerator gopter.Gen

// MongoIndexOptions_STATUSARMGenerator returns a generator of MongoIndexOptions_STATUSARM instances for property testing.
func MongoIndexOptions_STATUSARMGenerator() gopter.Gen {
	if mongoIndexOptions_STATUSARMGenerator != nil {
		return mongoIndexOptions_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUSARM(generators)
	mongoIndexOptions_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_STATUSARM{}), generators)

	return mongoIndexOptions_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
