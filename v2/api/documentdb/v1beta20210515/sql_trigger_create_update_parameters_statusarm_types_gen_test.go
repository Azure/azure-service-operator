// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlTriggerCreateUpdateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerCreateUpdateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerCreateUpdateParameters_STATUSARM, SqlTriggerCreateUpdateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerCreateUpdateParameters_STATUSARM runs a test to see if a specific instance of SqlTriggerCreateUpdateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerCreateUpdateParameters_STATUSARM(subject SqlTriggerCreateUpdateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerCreateUpdateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerCreateUpdateParameters_STATUSARM instances for property testing - lazily instantiated by
// SqlTriggerCreateUpdateParameters_STATUSARMGenerator()
var sqlTriggerCreateUpdateParameters_STATUSARMGenerator gopter.Gen

// SqlTriggerCreateUpdateParameters_STATUSARMGenerator returns a generator of SqlTriggerCreateUpdateParameters_STATUSARM instances for property testing.
// We first initialize sqlTriggerCreateUpdateParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlTriggerCreateUpdateParameters_STATUSARMGenerator() gopter.Gen {
	if sqlTriggerCreateUpdateParameters_STATUSARMGenerator != nil {
		return sqlTriggerCreateUpdateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM(generators)
	sqlTriggerCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerCreateUpdateParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM(generators)
	sqlTriggerCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerCreateUpdateParameters_STATUSARM{}), generators)

	return sqlTriggerCreateUpdateParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlTriggerCreateUpdateProperties_STATUSARMGenerator())
}

func Test_SqlTriggerCreateUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerCreateUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerCreateUpdateProperties_STATUSARM, SqlTriggerCreateUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerCreateUpdateProperties_STATUSARM runs a test to see if a specific instance of SqlTriggerCreateUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerCreateUpdateProperties_STATUSARM(subject SqlTriggerCreateUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerCreateUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerCreateUpdateProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlTriggerCreateUpdateProperties_STATUSARMGenerator()
var sqlTriggerCreateUpdateProperties_STATUSARMGenerator gopter.Gen

// SqlTriggerCreateUpdateProperties_STATUSARMGenerator returns a generator of SqlTriggerCreateUpdateProperties_STATUSARM instances for property testing.
func SqlTriggerCreateUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if sqlTriggerCreateUpdateProperties_STATUSARMGenerator != nil {
		return sqlTriggerCreateUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdateProperties_STATUSARM(generators)
	sqlTriggerCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerCreateUpdateProperties_STATUSARM{}), generators)

	return sqlTriggerCreateUpdateProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlTriggerResource_STATUSARMGenerator())
}

func Test_SqlTriggerResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerResource_STATUSARM, SqlTriggerResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerResource_STATUSARM runs a test to see if a specific instance of SqlTriggerResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerResource_STATUSARM(subject SqlTriggerResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerResource_STATUSARM instances for property testing - lazily instantiated by
// SqlTriggerResource_STATUSARMGenerator()
var sqlTriggerResource_STATUSARMGenerator gopter.Gen

// SqlTriggerResource_STATUSARMGenerator returns a generator of SqlTriggerResource_STATUSARM instances for property testing.
func SqlTriggerResource_STATUSARMGenerator() gopter.Gen {
	if sqlTriggerResource_STATUSARMGenerator != nil {
		return sqlTriggerResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerResource_STATUSARM(generators)
	sqlTriggerResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerResource_STATUSARM{}), generators)

	return sqlTriggerResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlTriggerResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlTriggerResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["TriggerOperation"] = gen.PtrOf(gen.OneConstOf(
		SqlTriggerResource_TriggerOperation_STATUSAll,
		SqlTriggerResource_TriggerOperation_STATUSCreate,
		SqlTriggerResource_TriggerOperation_STATUSDelete,
		SqlTriggerResource_TriggerOperation_STATUSReplace,
		SqlTriggerResource_TriggerOperation_STATUSUpdate))
	gens["TriggerType"] = gen.PtrOf(gen.OneConstOf(SqlTriggerResource_TriggerType_STATUSPost, SqlTriggerResource_TriggerType_STATUSPre))
}
