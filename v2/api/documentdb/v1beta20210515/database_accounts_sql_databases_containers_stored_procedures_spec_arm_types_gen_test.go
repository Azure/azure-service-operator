// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

<<<<<<<< HEAD:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedure__spec_arm_types_gen_test.go
func Test_DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
========
func Test_DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>>> main:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedures_spec_arm_types_gen_test.go
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<<< HEAD:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedure__spec_arm_types_gen_test.go
		"Round trip of DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM, DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM(subject DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM) string {
========
		"Round trip of DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM, DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM runs a test to see if a specific instance of DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM(subject DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM) string {
>>>>>>>> main:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedures_spec_arm_types_gen_test.go
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<<< HEAD:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedure__spec_arm_types_gen_test.go
	var actual DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM
========
	var actual DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM
>>>>>>>> main:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedures_spec_arm_types_gen_test.go
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<<< HEAD:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedure__spec_arm_types_gen_test.go
// Generator of DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM instances for property testing - lazily
// instantiated by DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator()
var databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator != nil {
		return databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM(generators)
	databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM(generators)
	databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM{}), generators)

	return databaseAccountsSqlDatabasesContainersStoredProcedure_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
========
// Generator of DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM instances for property testing -
// lazily instantiated by DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator()
var databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator gopter.Gen

// DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator returns a generator of DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM instances for property testing.
// We first initialize databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator() gopter.Gen {
	if databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator != nil {
		return databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM(generators)
	databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM(generators)
	databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM{}), generators)

	return databaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM(gens map[string]gopter.Gen) {
>>>>>>>> main:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedures_spec_arm_types_gen_test.go
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

<<<<<<<< HEAD:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedure__spec_arm_types_gen_test.go
// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_SpecARM(gens map[string]gopter.Gen) {
========
// AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedures_SpecARM(gens map[string]gopter.Gen) {
>>>>>>>> main:v2/api/documentdb/v1beta20210515/database_accounts_sql_databases_containers_stored_procedures_spec_arm_types_gen_test.go
	gens["Properties"] = gen.PtrOf(SqlStoredProcedureCreateUpdatePropertiesARMGenerator())
}

func Test_SqlStoredProcedureCreateUpdatePropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureCreateUpdatePropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureCreateUpdatePropertiesARM, SqlStoredProcedureCreateUpdatePropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureCreateUpdatePropertiesARM runs a test to see if a specific instance of SqlStoredProcedureCreateUpdatePropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureCreateUpdatePropertiesARM(subject SqlStoredProcedureCreateUpdatePropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureCreateUpdatePropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureCreateUpdatePropertiesARM instances for property testing - lazily instantiated by
// SqlStoredProcedureCreateUpdatePropertiesARMGenerator()
var sqlStoredProcedureCreateUpdatePropertiesARMGenerator gopter.Gen

// SqlStoredProcedureCreateUpdatePropertiesARMGenerator returns a generator of SqlStoredProcedureCreateUpdatePropertiesARM instances for property testing.
func SqlStoredProcedureCreateUpdatePropertiesARMGenerator() gopter.Gen {
	if sqlStoredProcedureCreateUpdatePropertiesARMGenerator != nil {
		return sqlStoredProcedureCreateUpdatePropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdatePropertiesARM(generators)
	sqlStoredProcedureCreateUpdatePropertiesARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureCreateUpdatePropertiesARM{}), generators)

	return sqlStoredProcedureCreateUpdatePropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdatePropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdatePropertiesARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlStoredProcedureResourceARMGenerator())
}

func Test_SqlStoredProcedureResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureResourceARM, SqlStoredProcedureResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureResourceARM runs a test to see if a specific instance of SqlStoredProcedureResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureResourceARM(subject SqlStoredProcedureResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureResourceARM instances for property testing - lazily instantiated by
// SqlStoredProcedureResourceARMGenerator()
var sqlStoredProcedureResourceARMGenerator gopter.Gen

// SqlStoredProcedureResourceARMGenerator returns a generator of SqlStoredProcedureResourceARM instances for property testing.
func SqlStoredProcedureResourceARMGenerator() gopter.Gen {
	if sqlStoredProcedureResourceARMGenerator != nil {
		return sqlStoredProcedureResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureResourceARM(generators)
	sqlStoredProcedureResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureResourceARM{}), generators)

	return sqlStoredProcedureResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
