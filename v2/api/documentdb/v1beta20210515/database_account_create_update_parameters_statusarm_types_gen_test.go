// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountCreateUpdateParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountCreateUpdateParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountCreateUpdateParameters_STATUSARM, DatabaseAccountCreateUpdateParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountCreateUpdateParameters_STATUSARM runs a test to see if a specific instance of DatabaseAccountCreateUpdateParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountCreateUpdateParameters_STATUSARM(subject DatabaseAccountCreateUpdateParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountCreateUpdateParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountCreateUpdateParameters_STATUSARM instances for property testing - lazily instantiated by
// DatabaseAccountCreateUpdateParameters_STATUSARMGenerator()
var databaseAccountCreateUpdateParameters_STATUSARMGenerator gopter.Gen

// DatabaseAccountCreateUpdateParameters_STATUSARMGenerator returns a generator of DatabaseAccountCreateUpdateParameters_STATUSARM instances for property testing.
// We first initialize databaseAccountCreateUpdateParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountCreateUpdateParameters_STATUSARMGenerator() gopter.Gen {
	if databaseAccountCreateUpdateParameters_STATUSARMGenerator != nil {
		return databaseAccountCreateUpdateParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM(generators)
	databaseAccountCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountCreateUpdateParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM(generators)
	databaseAccountCreateUpdateParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountCreateUpdateParameters_STATUSARM{}), generators)

	return databaseAccountCreateUpdateParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountCreateUpdateParameters_Kind_STATUSGlobalDocumentDB, DatabaseAccountCreateUpdateParameters_Kind_STATUSMongoDB, DatabaseAccountCreateUpdateParameters_Kind_STATUSParse))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(DatabaseAccountCreateUpdateProperties_STATUSARMGenerator())
}

func Test_DatabaseAccountCreateUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountCreateUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountCreateUpdateProperties_STATUSARM, DatabaseAccountCreateUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountCreateUpdateProperties_STATUSARM runs a test to see if a specific instance of DatabaseAccountCreateUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountCreateUpdateProperties_STATUSARM(subject DatabaseAccountCreateUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountCreateUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountCreateUpdateProperties_STATUSARM instances for property testing - lazily instantiated by
// DatabaseAccountCreateUpdateProperties_STATUSARMGenerator()
var databaseAccountCreateUpdateProperties_STATUSARMGenerator gopter.Gen

// DatabaseAccountCreateUpdateProperties_STATUSARMGenerator returns a generator of DatabaseAccountCreateUpdateProperties_STATUSARM instances for property testing.
// We first initialize databaseAccountCreateUpdateProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountCreateUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if databaseAccountCreateUpdateProperties_STATUSARMGenerator != nil {
		return databaseAccountCreateUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM(generators)
	databaseAccountCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountCreateUpdateProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM(generators)
	databaseAccountCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountCreateUpdateProperties_STATUSARM{}), generators)

	return databaseAccountCreateUpdateProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ConnectorOffer"] = gen.PtrOf(gen.OneConstOf(ConnectorOffer_STATUSSmall))
	gens["DatabaseAccountOfferType"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountOfferType_STATUSStandard))
	gens["DefaultIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["DisableKeyBasedMetadataWriteAccess"] = gen.PtrOf(gen.Bool())
	gens["EnableAnalyticalStorage"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticFailover"] = gen.PtrOf(gen.Bool())
	gens["EnableCassandraConnector"] = gen.PtrOf(gen.Bool())
	gens["EnableFreeTier"] = gen.PtrOf(gen.Bool())
	gens["EnableMultipleWriteLocations"] = gen.PtrOf(gen.Bool())
	gens["IsVirtualNetworkFilterEnabled"] = gen.PtrOf(gen.Bool())
	gens["KeyVaultKeyUri"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkAclBypass"] = gen.PtrOf(gen.OneConstOf(NetworkAclBypass_STATUSAzureServices, NetworkAclBypass_STATUSNone))
	gens["NetworkAclBypassResourceIds"] = gen.SliceOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccess_STATUSDisabled, PublicNetworkAccess_STATUSEnabled))
}

// AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageConfiguration"] = gen.PtrOf(AnalyticalStorageConfiguration_STATUSARMGenerator())
	gens["ApiProperties"] = gen.PtrOf(ApiProperties_STATUSARMGenerator())
	gens["BackupPolicy"] = gen.PtrOf(BackupPolicy_STATUSARMGenerator())
	gens["Capabilities"] = gen.SliceOf(Capability_STATUSARMGenerator())
	gens["ConsistencyPolicy"] = gen.PtrOf(ConsistencyPolicy_STATUSARMGenerator())
	gens["Cors"] = gen.SliceOf(CorsPolicy_STATUSARMGenerator())
	gens["IpRules"] = gen.SliceOf(IpAddressOrRange_STATUSARMGenerator())
	gens["Locations"] = gen.SliceOf(Location_STATUSARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRule_STATUSARMGenerator())
}

func Test_ManagedServiceIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUSARM, ManagedServiceIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUSARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUSARM(subject ManagedServiceIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUSARMGenerator()
var managedServiceIdentity_STATUSARMGenerator gopter.Gen

// ManagedServiceIdentity_STATUSARMGenerator returns a generator of ManagedServiceIdentity_STATUSARM instances for property testing.
// We first initialize managedServiceIdentity_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUSARMGenerator() gopter.Gen {
	if managedServiceIdentity_STATUSARMGenerator != nil {
		return managedServiceIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUSARM(generators)
	managedServiceIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUSARM(generators)
	managedServiceIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUSARM{}), generators)

	return managedServiceIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_STATUSNone,
		ManagedServiceIdentity_Type_STATUSSystemAssigned,
		ManagedServiceIdentity_Type_STATUSSystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_STATUSUserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator())
}

func Test_AnalyticalStorageConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AnalyticalStorageConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAnalyticalStorageConfiguration_STATUSARM, AnalyticalStorageConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAnalyticalStorageConfiguration_STATUSARM runs a test to see if a specific instance of AnalyticalStorageConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAnalyticalStorageConfiguration_STATUSARM(subject AnalyticalStorageConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AnalyticalStorageConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AnalyticalStorageConfiguration_STATUSARM instances for property testing - lazily instantiated by
// AnalyticalStorageConfiguration_STATUSARMGenerator()
var analyticalStorageConfiguration_STATUSARMGenerator gopter.Gen

// AnalyticalStorageConfiguration_STATUSARMGenerator returns a generator of AnalyticalStorageConfiguration_STATUSARM instances for property testing.
func AnalyticalStorageConfiguration_STATUSARMGenerator() gopter.Gen {
	if analyticalStorageConfiguration_STATUSARMGenerator != nil {
		return analyticalStorageConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_STATUSARM(generators)
	analyticalStorageConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AnalyticalStorageConfiguration_STATUSARM{}), generators)

	return analyticalStorageConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["SchemaType"] = gen.PtrOf(gen.OneConstOf(AnalyticalStorageSchemaType_STATUSFullFidelity, AnalyticalStorageSchemaType_STATUSWellDefined))
}

func Test_ApiProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiProperties_STATUSARM, ApiProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiProperties_STATUSARM runs a test to see if a specific instance of ApiProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiProperties_STATUSARM(subject ApiProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiProperties_STATUSARM instances for property testing - lazily instantiated by
// ApiProperties_STATUSARMGenerator()
var apiProperties_STATUSARMGenerator gopter.Gen

// ApiProperties_STATUSARMGenerator returns a generator of ApiProperties_STATUSARM instances for property testing.
func ApiProperties_STATUSARMGenerator() gopter.Gen {
	if apiProperties_STATUSARMGenerator != nil {
		return apiProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiProperties_STATUSARM(generators)
	apiProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ApiProperties_STATUSARM{}), generators)

	return apiProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApiProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ServerVersion"] = gen.PtrOf(gen.OneConstOf(ApiProperties_ServerVersion_STATUS32, ApiProperties_ServerVersion_STATUS36, ApiProperties_ServerVersion_STATUS40))
}

func Test_BackupPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupPolicy_STATUSARM, BackupPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupPolicy_STATUSARM runs a test to see if a specific instance of BackupPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupPolicy_STATUSARM(subject BackupPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupPolicy_STATUSARM instances for property testing - lazily instantiated by
// BackupPolicy_STATUSARMGenerator()
var backupPolicy_STATUSARMGenerator gopter.Gen

// BackupPolicy_STATUSARMGenerator returns a generator of BackupPolicy_STATUSARM instances for property testing.
func BackupPolicy_STATUSARMGenerator() gopter.Gen {
	if backupPolicy_STATUSARMGenerator != nil {
		return backupPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupPolicy_STATUSARM(generators)
	backupPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(BackupPolicy_STATUSARM{}), generators)

	return backupPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(BackupPolicyType_STATUSContinuous, BackupPolicyType_STATUSPeriodic))
}

func Test_Capability_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability_STATUSARM, Capability_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability_STATUSARM runs a test to see if a specific instance of Capability_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability_STATUSARM(subject Capability_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUSARM instances for property testing - lazily instantiated by
// Capability_STATUSARMGenerator()
var capability_STATUSARMGenerator gopter.Gen

// Capability_STATUSARMGenerator returns a generator of Capability_STATUSARM instances for property testing.
func Capability_STATUSARMGenerator() gopter.Gen {
	if capability_STATUSARMGenerator != nil {
		return capability_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability_STATUSARM(generators)
	capability_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Capability_STATUSARM{}), generators)

	return capability_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCapability_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ConsistencyPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsistencyPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsistencyPolicy_STATUSARM, ConsistencyPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsistencyPolicy_STATUSARM runs a test to see if a specific instance of ConsistencyPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsistencyPolicy_STATUSARM(subject ConsistencyPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsistencyPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsistencyPolicy_STATUSARM instances for property testing - lazily instantiated by
// ConsistencyPolicy_STATUSARMGenerator()
var consistencyPolicy_STATUSARMGenerator gopter.Gen

// ConsistencyPolicy_STATUSARMGenerator returns a generator of ConsistencyPolicy_STATUSARM instances for property testing.
func ConsistencyPolicy_STATUSARMGenerator() gopter.Gen {
	if consistencyPolicy_STATUSARMGenerator != nil {
		return consistencyPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsistencyPolicy_STATUSARM(generators)
	consistencyPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ConsistencyPolicy_STATUSARM{}), generators)

	return consistencyPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForConsistencyPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsistencyPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["DefaultConsistencyLevel"] = gen.PtrOf(gen.OneConstOf(
		ConsistencyPolicy_DefaultConsistencyLevel_STATUSBoundedStaleness,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUSConsistentPrefix,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUSEventual,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUSSession,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUSStrong))
	gens["MaxIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["MaxStalenessPrefix"] = gen.PtrOf(gen.Int())
}

func Test_CorsPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsPolicy_STATUSARM, CorsPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsPolicy_STATUSARM runs a test to see if a specific instance of CorsPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsPolicy_STATUSARM(subject CorsPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsPolicy_STATUSARM instances for property testing - lazily instantiated by
// CorsPolicy_STATUSARMGenerator()
var corsPolicy_STATUSARMGenerator gopter.Gen

// CorsPolicy_STATUSARMGenerator returns a generator of CorsPolicy_STATUSARM instances for property testing.
func CorsPolicy_STATUSARMGenerator() gopter.Gen {
	if corsPolicy_STATUSARMGenerator != nil {
		return corsPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsPolicy_STATUSARM(generators)
	corsPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CorsPolicy_STATUSARM{}), generators)

	return corsPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedOrigins"] = gen.PtrOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}

func Test_IpAddressOrRange_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddressOrRange_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddressOrRange_STATUSARM, IpAddressOrRange_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddressOrRange_STATUSARM runs a test to see if a specific instance of IpAddressOrRange_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddressOrRange_STATUSARM(subject IpAddressOrRange_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddressOrRange_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddressOrRange_STATUSARM instances for property testing - lazily instantiated by
// IpAddressOrRange_STATUSARMGenerator()
var ipAddressOrRange_STATUSARMGenerator gopter.Gen

// IpAddressOrRange_STATUSARMGenerator returns a generator of IpAddressOrRange_STATUSARM instances for property testing.
func IpAddressOrRange_STATUSARMGenerator() gopter.Gen {
	if ipAddressOrRange_STATUSARMGenerator != nil {
		return ipAddressOrRange_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressOrRange_STATUSARM(generators)
	ipAddressOrRange_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IpAddressOrRange_STATUSARM{}), generators)

	return ipAddressOrRange_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddressOrRange_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddressOrRange_STATUSARM(gens map[string]gopter.Gen) {
	gens["IpAddressOrRange"] = gen.PtrOf(gen.AlphaString())
}

func Test_Location_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Location_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLocation_STATUSARM, Location_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLocation_STATUSARM runs a test to see if a specific instance of Location_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLocation_STATUSARM(subject Location_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Location_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Location_STATUSARM instances for property testing - lazily instantiated by Location_STATUSARMGenerator()
var location_STATUSARMGenerator gopter.Gen

// Location_STATUSARMGenerator returns a generator of Location_STATUSARM instances for property testing.
func Location_STATUSARMGenerator() gopter.Gen {
	if location_STATUSARMGenerator != nil {
		return location_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLocation_STATUSARM(generators)
	location_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Location_STATUSARM{}), generators)

	return location_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForLocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["DocumentEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["FailoverPriority"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsZoneRedundant"] = gen.PtrOf(gen.Bool())
	gens["LocationName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_UserAssignedIdentities_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_UserAssignedIdentities_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUSARM, ManagedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUSARM runs a test to see if a specific instance of ManagedServiceIdentity_UserAssignedIdentities_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUSARM(subject ManagedServiceIdentity_UserAssignedIdentities_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_UserAssignedIdentities_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_UserAssignedIdentities_STATUSARM instances for property testing - lazily
// instantiated by ManagedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator()
var managedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator gopter.Gen

// ManagedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator returns a generator of ManagedServiceIdentity_UserAssignedIdentities_STATUSARM instances for property testing.
func ManagedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator() gopter.Gen {
	if managedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator != nil {
		return managedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUSARM(generators)
	managedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_UserAssignedIdentities_STATUSARM{}), generators)

	return managedServiceIdentity_UserAssignedIdentities_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRule_STATUSARM, VirtualNetworkRule_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRule_STATUSARM runs a test to see if a specific instance of VirtualNetworkRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRule_STATUSARM(subject VirtualNetworkRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkRule_STATUSARMGenerator()
var virtualNetworkRule_STATUSARMGenerator gopter.Gen

// VirtualNetworkRule_STATUSARMGenerator returns a generator of VirtualNetworkRule_STATUSARM instances for property testing.
func VirtualNetworkRule_STATUSARMGenerator() gopter.Gen {
	if virtualNetworkRule_STATUSARMGenerator != nil {
		return virtualNetworkRule_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUSARM(generators)
	virtualNetworkRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_STATUSARM{}), generators)

	return virtualNetworkRule_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVNetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
