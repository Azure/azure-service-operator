// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM, DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM(subject DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM instances for property testing - lazily
// instantiated by DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator()
var databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator != nil {
		return databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM(generators)
	databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM(generators)
	databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM{}), generators)

	return databaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedure_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator())
}

func Test_SqlStoredProcedureCreateUpdateProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureCreateUpdateProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureCreateUpdateProperties_STATUSARM, SqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureCreateUpdateProperties_STATUSARM runs a test to see if a specific instance of SqlStoredProcedureCreateUpdateProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureCreateUpdateProperties_STATUSARM(subject SqlStoredProcedureCreateUpdateProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureCreateUpdateProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureCreateUpdateProperties_STATUSARM instances for property testing - lazily instantiated
// by SqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator()
var sqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator gopter.Gen

// SqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator returns a generator of SqlStoredProcedureCreateUpdateProperties_STATUSARM instances for property testing.
func SqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator() gopter.Gen {
	if sqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator != nil {
		return sqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdateProperties_STATUSARM(generators)
	sqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureCreateUpdateProperties_STATUSARM{}), generators)

	return sqlStoredProcedureCreateUpdateProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdateProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdateProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlStoredProcedureResource_STATUSARMGenerator())
}

func Test_SqlStoredProcedureResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureResource_STATUSARM, SqlStoredProcedureResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureResource_STATUSARM runs a test to see if a specific instance of SqlStoredProcedureResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureResource_STATUSARM(subject SqlStoredProcedureResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureResource_STATUSARM instances for property testing - lazily instantiated by
// SqlStoredProcedureResource_STATUSARMGenerator()
var sqlStoredProcedureResource_STATUSARMGenerator gopter.Gen

// SqlStoredProcedureResource_STATUSARMGenerator returns a generator of SqlStoredProcedureResource_STATUSARM instances for property testing.
func SqlStoredProcedureResource_STATUSARMGenerator() gopter.Gen {
	if sqlStoredProcedureResource_STATUSARMGenerator != nil {
		return sqlStoredProcedureResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_STATUSARM(generators)
	sqlStoredProcedureResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureResource_STATUSARM{}), generators)

	return sqlStoredProcedureResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
