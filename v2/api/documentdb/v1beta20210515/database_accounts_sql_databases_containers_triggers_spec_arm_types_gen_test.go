// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM, DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM runs a test to see if a specific instance of DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM(subject DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM instances for property testing - lazily
// instantiated by DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator()
var databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator gopter.Gen

// DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator returns a generator of DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM instances for property testing.
// We first initialize databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator() gopter.Gen {
	if databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator != nil {
		return databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM(generators)
	databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM(generators)
	databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM{}), generators)

	return databaseAccounts_SqlDatabases_Containers_Triggers_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_Triggers_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlTriggerCreateUpdatePropertiesARMGenerator())
}

func Test_SqlTriggerCreateUpdatePropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerCreateUpdatePropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerCreateUpdatePropertiesARM, SqlTriggerCreateUpdatePropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerCreateUpdatePropertiesARM runs a test to see if a specific instance of SqlTriggerCreateUpdatePropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerCreateUpdatePropertiesARM(subject SqlTriggerCreateUpdatePropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerCreateUpdatePropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerCreateUpdatePropertiesARM instances for property testing - lazily instantiated by
// SqlTriggerCreateUpdatePropertiesARMGenerator()
var sqlTriggerCreateUpdatePropertiesARMGenerator gopter.Gen

// SqlTriggerCreateUpdatePropertiesARMGenerator returns a generator of SqlTriggerCreateUpdatePropertiesARM instances for property testing.
func SqlTriggerCreateUpdatePropertiesARMGenerator() gopter.Gen {
	if sqlTriggerCreateUpdatePropertiesARMGenerator != nil {
		return sqlTriggerCreateUpdatePropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdatePropertiesARM(generators)
	sqlTriggerCreateUpdatePropertiesARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerCreateUpdatePropertiesARM{}), generators)

	return sqlTriggerCreateUpdatePropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdatePropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdatePropertiesARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlTriggerResourceARMGenerator())
}

func Test_SqlTriggerResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerResourceARM, SqlTriggerResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerResourceARM runs a test to see if a specific instance of SqlTriggerResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerResourceARM(subject SqlTriggerResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerResourceARM instances for property testing - lazily instantiated by
// SqlTriggerResourceARMGenerator()
var sqlTriggerResourceARMGenerator gopter.Gen

// SqlTriggerResourceARMGenerator returns a generator of SqlTriggerResourceARM instances for property testing.
func SqlTriggerResourceARMGenerator() gopter.Gen {
	if sqlTriggerResourceARMGenerator != nil {
		return sqlTriggerResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerResourceARM(generators)
	sqlTriggerResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerResourceARM{}), generators)

	return sqlTriggerResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlTriggerResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlTriggerResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["TriggerOperation"] = gen.PtrOf(gen.OneConstOf(
		SqlTriggerResource_TriggerOperation_All,
		SqlTriggerResource_TriggerOperation_Create,
		SqlTriggerResource_TriggerOperation_Delete,
		SqlTriggerResource_TriggerOperation_Replace,
		SqlTriggerResource_TriggerOperation_Update))
	gens["TriggerType"] = gen.PtrOf(gen.OneConstOf(SqlTriggerResource_TriggerType_Post, SqlTriggerResource_TriggerType_Pre))
}
