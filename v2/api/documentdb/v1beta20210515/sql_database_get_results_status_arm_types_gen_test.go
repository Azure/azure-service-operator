// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabaseGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseGetResults_STATUSARM, SqlDatabaseGetResults_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseGetResults_STATUSARM runs a test to see if a specific instance of SqlDatabaseGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseGetResults_STATUSARM(subject SqlDatabaseGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseGetResults_STATUSARM instances for property testing - lazily instantiated by
// SqlDatabaseGetResults_STATUSARMGenerator()
var sqlDatabaseGetResults_STATUSARMGenerator gopter.Gen

// SqlDatabaseGetResults_STATUSARMGenerator returns a generator of SqlDatabaseGetResults_STATUSARM instances for property testing.
// We first initialize sqlDatabaseGetResults_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseGetResults_STATUSARMGenerator() gopter.Gen {
	if sqlDatabaseGetResults_STATUSARMGenerator != nil {
		return sqlDatabaseGetResults_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM(generators)
	sqlDatabaseGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM(generators)
	sqlDatabaseGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetResults_STATUSARM{}), generators)

	return sqlDatabaseGetResults_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseGetProperties_STATUSARMGenerator())
}

func Test_SqlDatabaseGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseGetProperties_STATUSARM, SqlDatabaseGetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseGetProperties_STATUSARM runs a test to see if a specific instance of SqlDatabaseGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseGetProperties_STATUSARM(subject SqlDatabaseGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseGetProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlDatabaseGetProperties_STATUSARMGenerator()
var sqlDatabaseGetProperties_STATUSARMGenerator gopter.Gen

// SqlDatabaseGetProperties_STATUSARMGenerator returns a generator of SqlDatabaseGetProperties_STATUSARM instances for property testing.
func SqlDatabaseGetProperties_STATUSARMGenerator() gopter.Gen {
	if sqlDatabaseGetProperties_STATUSARMGenerator != nil {
		return sqlDatabaseGetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseGetProperties_STATUSARM(generators)
	sqlDatabaseGetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetProperties_STATUSARM{}), generators)

	return sqlDatabaseGetProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseGetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseGetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResource_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlDatabaseGetProperties_STATUS_ResourceARMGenerator())
}

func Test_SqlDatabaseGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseGetProperties_STATUS_ResourceARM, SqlDatabaseGetProperties_STATUS_ResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseGetProperties_STATUS_ResourceARM runs a test to see if a specific instance of SqlDatabaseGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseGetProperties_STATUS_ResourceARM(subject SqlDatabaseGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseGetProperties_STATUS_ResourceARM instances for property testing - lazily instantiated by
// SqlDatabaseGetProperties_STATUS_ResourceARMGenerator()
var sqlDatabaseGetProperties_STATUS_ResourceARMGenerator gopter.Gen

// SqlDatabaseGetProperties_STATUS_ResourceARMGenerator returns a generator of SqlDatabaseGetProperties_STATUS_ResourceARM instances for property testing.
func SqlDatabaseGetProperties_STATUS_ResourceARMGenerator() gopter.Gen {
	if sqlDatabaseGetProperties_STATUS_ResourceARMGenerator != nil {
		return sqlDatabaseGetProperties_STATUS_ResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseGetProperties_STATUS_ResourceARM(generators)
	sqlDatabaseGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetProperties_STATUS_ResourceARM{}), generators)

	return sqlDatabaseGetProperties_STATUS_ResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["Colls"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
	gens["Users"] = gen.PtrOf(gen.AlphaString())
}
