// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20231115/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongodbDatabaseThroughputSetting_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseThroughputSetting to hub returns original",
		prop.ForAll(RunResourceConversionTestForMongodbDatabaseThroughputSetting, MongodbDatabaseThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForMongodbDatabaseThroughputSetting tests if a specific instance of MongodbDatabaseThroughputSetting round trips to the hub storage version and back losslessly
func RunResourceConversionTestForMongodbDatabaseThroughputSetting(subject MongodbDatabaseThroughputSetting) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.MongodbDatabaseThroughputSetting
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual MongodbDatabaseThroughputSetting
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseThroughputSetting_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseThroughputSetting to MongodbDatabaseThroughputSetting via AssignProperties_To_MongodbDatabaseThroughputSetting & AssignProperties_From_MongodbDatabaseThroughputSetting returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting, MongodbDatabaseThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting tests if a specific instance of MongodbDatabaseThroughputSetting can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting(subject MongodbDatabaseThroughputSetting) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.MongodbDatabaseThroughputSetting
	err := copied.AssignProperties_To_MongodbDatabaseThroughputSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseThroughputSetting
	err = actual.AssignProperties_From_MongodbDatabaseThroughputSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseThroughputSetting_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseThroughputSetting via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseThroughputSetting, MongodbDatabaseThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseThroughputSetting runs a test to see if a specific instance of MongodbDatabaseThroughputSetting round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseThroughputSetting(subject MongodbDatabaseThroughputSetting) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseThroughputSetting
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseThroughputSetting instances for property testing - lazily instantiated by
// MongodbDatabaseThroughputSettingGenerator()
var mongodbDatabaseThroughputSettingGenerator gopter.Gen

// MongodbDatabaseThroughputSettingGenerator returns a generator of MongodbDatabaseThroughputSetting instances for property testing.
func MongodbDatabaseThroughputSettingGenerator() gopter.Gen {
	if mongodbDatabaseThroughputSettingGenerator != nil {
		return mongodbDatabaseThroughputSettingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting(generators)
	mongodbDatabaseThroughputSettingGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseThroughputSetting{}), generators)

	return mongodbDatabaseThroughputSettingGenerator
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting(gens map[string]gopter.Gen) {
	gens["Spec"] = MongodbDatabaseThroughputSetting_SpecGenerator()
	gens["Status"] = MongodbDatabaseThroughputSetting_STATUSGenerator()
}

func Test_MongodbDatabaseThroughputSettingOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseThroughputSettingOperatorSpec to MongodbDatabaseThroughputSettingOperatorSpec via AssignProperties_To_MongodbDatabaseThroughputSettingOperatorSpec & AssignProperties_From_MongodbDatabaseThroughputSettingOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseThroughputSettingOperatorSpec, MongodbDatabaseThroughputSettingOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseThroughputSettingOperatorSpec tests if a specific instance of MongodbDatabaseThroughputSettingOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseThroughputSettingOperatorSpec(subject MongodbDatabaseThroughputSettingOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.MongodbDatabaseThroughputSettingOperatorSpec
	err := copied.AssignProperties_To_MongodbDatabaseThroughputSettingOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseThroughputSettingOperatorSpec
	err = actual.AssignProperties_From_MongodbDatabaseThroughputSettingOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseThroughputSettingOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseThroughputSettingOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseThroughputSettingOperatorSpec, MongodbDatabaseThroughputSettingOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseThroughputSettingOperatorSpec runs a test to see if a specific instance of MongodbDatabaseThroughputSettingOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseThroughputSettingOperatorSpec(subject MongodbDatabaseThroughputSettingOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseThroughputSettingOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseThroughputSettingOperatorSpec instances for property testing - lazily instantiated by
// MongodbDatabaseThroughputSettingOperatorSpecGenerator()
var mongodbDatabaseThroughputSettingOperatorSpecGenerator gopter.Gen

// MongodbDatabaseThroughputSettingOperatorSpecGenerator returns a generator of MongodbDatabaseThroughputSettingOperatorSpec instances for property testing.
func MongodbDatabaseThroughputSettingOperatorSpecGenerator() gopter.Gen {
	if mongodbDatabaseThroughputSettingOperatorSpecGenerator != nil {
		return mongodbDatabaseThroughputSettingOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	mongodbDatabaseThroughputSettingOperatorSpecGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseThroughputSettingOperatorSpec{}), generators)

	return mongodbDatabaseThroughputSettingOperatorSpecGenerator
}

func Test_MongodbDatabaseThroughputSetting_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseThroughputSetting_STATUS to MongodbDatabaseThroughputSetting_STATUS via AssignProperties_To_MongodbDatabaseThroughputSetting_STATUS & AssignProperties_From_MongodbDatabaseThroughputSetting_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting_STATUS, MongodbDatabaseThroughputSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting_STATUS tests if a specific instance of MongodbDatabaseThroughputSetting_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting_STATUS(subject MongodbDatabaseThroughputSetting_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.MongodbDatabaseThroughputSetting_STATUS
	err := copied.AssignProperties_To_MongodbDatabaseThroughputSetting_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseThroughputSetting_STATUS
	err = actual.AssignProperties_From_MongodbDatabaseThroughputSetting_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseThroughputSetting_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseThroughputSetting_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseThroughputSetting_STATUS, MongodbDatabaseThroughputSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseThroughputSetting_STATUS runs a test to see if a specific instance of MongodbDatabaseThroughputSetting_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseThroughputSetting_STATUS(subject MongodbDatabaseThroughputSetting_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseThroughputSetting_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseThroughputSetting_STATUS instances for property testing - lazily instantiated by
// MongodbDatabaseThroughputSetting_STATUSGenerator()
var mongodbDatabaseThroughputSetting_STATUSGenerator gopter.Gen

// MongodbDatabaseThroughputSetting_STATUSGenerator returns a generator of MongodbDatabaseThroughputSetting_STATUS instances for property testing.
// We first initialize mongodbDatabaseThroughputSetting_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongodbDatabaseThroughputSetting_STATUSGenerator() gopter.Gen {
	if mongodbDatabaseThroughputSetting_STATUSGenerator != nil {
		return mongodbDatabaseThroughputSetting_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS(generators)
	mongodbDatabaseThroughputSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseThroughputSetting_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS(generators)
	AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS(generators)
	mongodbDatabaseThroughputSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseThroughputSetting_STATUS{}), generators)

	return mongodbDatabaseThroughputSetting_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting_STATUS(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(ThroughputSettingsGetProperties_Resource_STATUSGenerator())
}

func Test_MongodbDatabaseThroughputSetting_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseThroughputSetting_Spec to MongodbDatabaseThroughputSetting_Spec via AssignProperties_To_MongodbDatabaseThroughputSetting_Spec & AssignProperties_From_MongodbDatabaseThroughputSetting_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting_Spec, MongodbDatabaseThroughputSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting_Spec tests if a specific instance of MongodbDatabaseThroughputSetting_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseThroughputSetting_Spec(subject MongodbDatabaseThroughputSetting_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.MongodbDatabaseThroughputSetting_Spec
	err := copied.AssignProperties_To_MongodbDatabaseThroughputSetting_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseThroughputSetting_Spec
	err = actual.AssignProperties_From_MongodbDatabaseThroughputSetting_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseThroughputSetting_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseThroughputSetting_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseThroughputSetting_Spec, MongodbDatabaseThroughputSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseThroughputSetting_Spec runs a test to see if a specific instance of MongodbDatabaseThroughputSetting_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseThroughputSetting_Spec(subject MongodbDatabaseThroughputSetting_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseThroughputSetting_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseThroughputSetting_Spec instances for property testing - lazily instantiated by
// MongodbDatabaseThroughputSetting_SpecGenerator()
var mongodbDatabaseThroughputSetting_SpecGenerator gopter.Gen

// MongodbDatabaseThroughputSetting_SpecGenerator returns a generator of MongodbDatabaseThroughputSetting_Spec instances for property testing.
// We first initialize mongodbDatabaseThroughputSetting_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongodbDatabaseThroughputSetting_SpecGenerator() gopter.Gen {
	if mongodbDatabaseThroughputSetting_SpecGenerator != nil {
		return mongodbDatabaseThroughputSetting_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec(generators)
	mongodbDatabaseThroughputSetting_SpecGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseThroughputSetting_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec(generators)
	AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec(generators)
	mongodbDatabaseThroughputSetting_SpecGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseThroughputSetting_Spec{}), generators)

	return mongodbDatabaseThroughputSetting_SpecGenerator
}

// AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseThroughputSetting_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(MongodbDatabaseThroughputSettingOperatorSpecGenerator())
	gens["Resource"] = gen.PtrOf(ThroughputSettingsResourceGenerator())
}
