// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBDatabaseCreateUpdateProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseCreateUpdateProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseCreateUpdateProperties_ARM, MongoDBDatabaseCreateUpdateProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseCreateUpdateProperties_ARM runs a test to see if a specific instance of MongoDBDatabaseCreateUpdateProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseCreateUpdateProperties_ARM(subject MongoDBDatabaseCreateUpdateProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseCreateUpdateProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseCreateUpdateProperties_ARM instances for property testing - lazily instantiated by
// MongoDBDatabaseCreateUpdateProperties_ARMGenerator()
var mongoDBDatabaseCreateUpdateProperties_ARMGenerator gopter.Gen

// MongoDBDatabaseCreateUpdateProperties_ARMGenerator returns a generator of MongoDBDatabaseCreateUpdateProperties_ARM instances for property testing.
func MongoDBDatabaseCreateUpdateProperties_ARMGenerator() gopter.Gen {
	if mongoDBDatabaseCreateUpdateProperties_ARMGenerator != nil {
		return mongoDBDatabaseCreateUpdateProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateProperties_ARM(generators)
	mongoDBDatabaseCreateUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateProperties_ARM{}), generators)

	return mongoDBDatabaseCreateUpdateProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_ARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseResource_ARMGenerator())
}

func Test_MongoDBDatabaseResource_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResource_ARM, MongoDBDatabaseResource_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResource_ARM runs a test to see if a specific instance of MongoDBDatabaseResource_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResource_ARM(subject MongoDBDatabaseResource_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_ARM instances for property testing - lazily instantiated by
// MongoDBDatabaseResource_ARMGenerator()
var mongoDBDatabaseResource_ARMGenerator gopter.Gen

// MongoDBDatabaseResource_ARMGenerator returns a generator of MongoDBDatabaseResource_ARM instances for property testing.
func MongoDBDatabaseResource_ARMGenerator() gopter.Gen {
	if mongoDBDatabaseResource_ARMGenerator != nil {
		return mongoDBDatabaseResource_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_ARM(generators)
	mongoDBDatabaseResource_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_ARM{}), generators)

	return mongoDBDatabaseResource_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_MongodbDatabase_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabase_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabase_Spec_ARM, MongodbDatabase_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabase_Spec_ARM runs a test to see if a specific instance of MongodbDatabase_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabase_Spec_ARM(subject MongodbDatabase_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabase_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabase_Spec_ARM instances for property testing - lazily instantiated by
// MongodbDatabase_Spec_ARMGenerator()
var mongodbDatabase_Spec_ARMGenerator gopter.Gen

// MongodbDatabase_Spec_ARMGenerator returns a generator of MongodbDatabase_Spec_ARM instances for property testing.
// We first initialize mongodbDatabase_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongodbDatabase_Spec_ARMGenerator() gopter.Gen {
	if mongodbDatabase_Spec_ARMGenerator != nil {
		return mongodbDatabase_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbDatabase_Spec_ARM(generators)
	mongodbDatabase_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(MongodbDatabase_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbDatabase_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForMongodbDatabase_Spec_ARM(generators)
	mongodbDatabase_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(MongodbDatabase_Spec_ARM{}), generators)

	return mongodbDatabase_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongodbDatabase_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongodbDatabase_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongodbDatabase_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabase_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseCreateUpdateProperties_ARMGenerator())
}
