// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210515

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
)

type DatabaseAccount_Spec_ARM struct {
	// Identity: Identity for the resource.
	Identity *ManagedServiceIdentity_ARM `json:"identity,omitempty"`

	// Kind: Indicates the type of database account. This can only be set at database account creation.
	Kind *DatabaseAccount_Kind_Spec_ARM `json:"kind,omitempty"`

	// Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties to create and update Azure Cosmos DB database accounts.
	Properties *DatabaseAccountCreateUpdateProperties_ARM `json:"properties,omitempty"`
	Tags       map[string]string                          `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &DatabaseAccount_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (account DatabaseAccount_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (account *DatabaseAccount_Spec_ARM) GetName() string {
	return account.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts"
func (account *DatabaseAccount_Spec_ARM) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts"
}

// +kubebuilder:validation:Enum={"GlobalDocumentDB","MongoDB","Parse"}
type DatabaseAccount_Kind_Spec_ARM string

const (
	DatabaseAccount_Kind_Spec_ARM_GlobalDocumentDB = DatabaseAccount_Kind_Spec_ARM("GlobalDocumentDB")
	DatabaseAccount_Kind_Spec_ARM_MongoDB          = DatabaseAccount_Kind_Spec_ARM("MongoDB")
	DatabaseAccount_Kind_Spec_ARM_Parse            = DatabaseAccount_Kind_Spec_ARM("Parse")
)

// Mapping from string to DatabaseAccount_Kind_Spec_ARM
var databaseAccount_Kind_Spec_ARM_Values = map[string]DatabaseAccount_Kind_Spec_ARM{
	"globaldocumentdb": DatabaseAccount_Kind_Spec_ARM_GlobalDocumentDB,
	"mongodb":          DatabaseAccount_Kind_Spec_ARM_MongoDB,
	"parse":            DatabaseAccount_Kind_Spec_ARM_Parse,
}

// Properties to create and update Azure Cosmos DB database accounts.
type DatabaseAccountCreateUpdateProperties_ARM struct {
	// AnalyticalStorageConfiguration: Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration_ARM `json:"analyticalStorageConfiguration,omitempty"`

	// ApiProperties: API specific properties. Currently, supported only for MongoDB API.
	ApiProperties *ApiProperties_ARM `json:"apiProperties,omitempty"`

	// BackupPolicy: The object representing the policy for taking backups on an account.
	BackupPolicy *BackupPolicy_ARM `json:"backupPolicy,omitempty"`

	// Capabilities: List of Cosmos DB capabilities for the account
	Capabilities []Capability_ARM `json:"capabilities,omitempty"`

	// ConnectorOffer: The cassandra connector offer type for the Cosmos DB database C* account.
	ConnectorOffer *ConnectorOffer_ARM `json:"connectorOffer,omitempty"`

	// ConsistencyPolicy: The consistency policy for the Cosmos DB account.
	ConsistencyPolicy *ConsistencyPolicy_ARM `json:"consistencyPolicy,omitempty"`

	// Cors: The CORS policy for the Cosmos DB database account.
	Cors []CorsPolicy_ARM `json:"cors,omitempty"`

	// DatabaseAccountOfferType: The offer type for the database
	DatabaseAccountOfferType *DatabaseAccountOfferType_ARM `json:"databaseAccountOfferType,omitempty"`

	// DefaultIdentity: The default identity for accessing key vault used in features like customer managed keys. The default
	// identity needs to be explicitly set by the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	// DisableKeyBasedMetadataWriteAccess: Disable write operations on metadata resources (databases, containers, throughput)
	// via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	// EnableAnalyticalStorage: Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	// EnableAutomaticFailover: Enables automatic failover of the write region in the rare event that the region is unavailable
	// due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the
	// failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	// EnableCassandraConnector: Enables the cassandra connector on the Cosmos DB C* account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	// EnableFreeTier: Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	// EnableMultipleWriteLocations: Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	// IpRules: List of IpRules.
	IpRules []IpAddressOrRange_ARM `json:"ipRules,omitempty"`

	// IsVirtualNetworkFilterEnabled: Flag to indicate whether to enable/disable Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	// KeyVaultKeyUri: The URI of the key vault
	KeyVaultKeyUri *string `json:"keyVaultKeyUri,omitempty"`

	// Locations: An array that contains the georeplication locations enabled for the Cosmos DB account.
	Locations []Location_ARM `json:"locations,omitempty"`

	// NetworkAclBypass: Indicates what services are allowed to bypass firewall checks.
	NetworkAclBypass *NetworkAclBypass_ARM `json:"networkAclBypass,omitempty"`

	// NetworkAclBypassResourceIds: An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account.
	NetworkAclBypassResourceIds []string `json:"networkAclBypassResourceIds,omitempty"`

	// PublicNetworkAccess: Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess_ARM `json:"publicNetworkAccess,omitempty"`

	// VirtualNetworkRules: List of Virtual Network ACL rules configured for the Cosmos DB account.
	VirtualNetworkRules []VirtualNetworkRule_ARM `json:"virtualNetworkRules,omitempty"`
}

// Identity for the resource.
type ManagedServiceIdentity_ARM struct {
	// Type: The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly
	// created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
	Type                   *ManagedServiceIdentity_Type_ARM           `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentityDetails_ARM `json:"userAssignedIdentities,omitempty"`
}

// Analytical storage specific properties.
type AnalyticalStorageConfiguration_ARM struct {
	// SchemaType: Describes the types of schema for analytical storage.
	SchemaType *AnalyticalStorageSchemaType_ARM `json:"schemaType,omitempty"`
}

type ApiProperties_ARM struct {
	// ServerVersion: Describes the ServerVersion of an a MongoDB account.
	ServerVersion *ApiProperties_ServerVersion_ARM `json:"serverVersion,omitempty"`
}

type BackupPolicy_ARM struct {
	// Continuous: Mutually exclusive with all other properties
	Continuous *ContinuousModeBackupPolicy_ARM `json:"continuous,omitempty"`

	// Periodic: Mutually exclusive with all other properties
	Periodic *PeriodicModeBackupPolicy_ARM `json:"periodic,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because BackupPolicy_ARM represents a discriminated union (JSON OneOf)
func (policy BackupPolicy_ARM) MarshalJSON() ([]byte, error) {
	if policy.Continuous != nil {
		return json.Marshal(policy.Continuous)
	}
	if policy.Periodic != nil {
		return json.Marshal(policy.Periodic)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the BackupPolicy_ARM
func (policy *BackupPolicy_ARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["type"]
	if discriminator == "Continuous" {
		policy.Continuous = &ContinuousModeBackupPolicy_ARM{}
		return json.Unmarshal(data, policy.Continuous)
	}
	if discriminator == "Periodic" {
		policy.Periodic = &PeriodicModeBackupPolicy_ARM{}
		return json.Unmarshal(data, policy.Periodic)
	}

	// No error
	return nil
}

// Cosmos DB capability object
type Capability_ARM struct {
	// Name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include
	// "EnableTable" and "EnableGremlin".
	Name *string `json:"name,omitempty"`
}

// The cassandra connector offer type for the Cosmos DB C* database account.
// +kubebuilder:validation:Enum={"Small"}
type ConnectorOffer_ARM string

const ConnectorOffer_ARM_Small = ConnectorOffer_ARM("Small")

// Mapping from string to ConnectorOffer_ARM
var connectorOffer_ARM_Values = map[string]ConnectorOffer_ARM{
	"small": ConnectorOffer_ARM_Small,
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicy_ARM struct {
	// DefaultConsistencyLevel: The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel *ConsistencyPolicy_DefaultConsistencyLevel_ARM `json:"defaultConsistencyLevel,omitempty"`

	// MaxIntervalInSeconds: When used with the Bounded Staleness consistency level, this value represents the time amount of
	// staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is
	// set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `json:"maxIntervalInSeconds,omitempty"`

	// MaxStalenessPrefix: When used with the Bounded Staleness consistency level, this value represents the number of stale
	// requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set
	// to 'BoundedStaleness'.
	MaxStalenessPrefix *int `json:"maxStalenessPrefix,omitempty"`
}

// The CORS policy for the Cosmos DB database account.
type CorsPolicy_ARM struct {
	// AllowedHeaders: The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders *string `json:"allowedHeaders,omitempty"`

	// AllowedMethods: The methods (HTTP request verbs) that the origin domain may use for a CORS request.
	AllowedMethods *string `json:"allowedMethods,omitempty"`

	// AllowedOrigins: The origin domains that are permitted to make a request against the service via CORS.
	AllowedOrigins *string `json:"allowedOrigins,omitempty"`

	// ExposedHeaders: The response headers that may be sent in the response to the CORS request and exposed by the browser to
	// the request issuer.
	ExposedHeaders *string `json:"exposedHeaders,omitempty"`

	// MaxAgeInSeconds: The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

// The offer type for the Cosmos DB database account.
// +kubebuilder:validation:Enum={"Standard"}
type DatabaseAccountOfferType_ARM string

const DatabaseAccountOfferType_ARM_Standard = DatabaseAccountOfferType_ARM("Standard")

// Mapping from string to DatabaseAccountOfferType_ARM
var databaseAccountOfferType_ARM_Values = map[string]DatabaseAccountOfferType_ARM{
	"standard": DatabaseAccountOfferType_ARM_Standard,
}

// IpAddressOrRange object
type IpAddressOrRange_ARM struct {
	// IpAddressOrRange: A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be
	// well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12,
	// 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245”
	// or “23.40.210.0/8”.
	IpAddressOrRange *string `json:"ipAddressOrRange,omitempty"`
}

// A region in which the Azure Cosmos DB database account is deployed.
type Location_ARM struct {
	// FailoverPriority: The failover priority of the region. A failover priority of 0 indicates a write region. The maximum
	// value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the
	// regions in which the database account exists.
	FailoverPriority *int `json:"failoverPriority,omitempty"`

	// IsZoneRedundant: Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant *bool `json:"isZoneRedundant,omitempty"`

	// LocationName: The name of the region.
	LocationName *string `json:"locationName,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned,UserAssigned","UserAssigned"}
type ManagedServiceIdentity_Type_ARM string

const (
	ManagedServiceIdentity_Type_ARM_None                       = ManagedServiceIdentity_Type_ARM("None")
	ManagedServiceIdentity_Type_ARM_SystemAssigned             = ManagedServiceIdentity_Type_ARM("SystemAssigned")
	ManagedServiceIdentity_Type_ARM_SystemAssignedUserAssigned = ManagedServiceIdentity_Type_ARM("SystemAssigned,UserAssigned")
	ManagedServiceIdentity_Type_ARM_UserAssigned               = ManagedServiceIdentity_Type_ARM("UserAssigned")
)

// Mapping from string to ManagedServiceIdentity_Type_ARM
var managedServiceIdentity_Type_ARM_Values = map[string]ManagedServiceIdentity_Type_ARM{
	"none":                        ManagedServiceIdentity_Type_ARM_None,
	"systemassigned":              ManagedServiceIdentity_Type_ARM_SystemAssigned,
	"systemassigned,userassigned": ManagedServiceIdentity_Type_ARM_SystemAssignedUserAssigned,
	"userassigned":                ManagedServiceIdentity_Type_ARM_UserAssigned,
}

// Indicates what services are allowed to bypass firewall checks.
// +kubebuilder:validation:Enum={"AzureServices","None"}
type NetworkAclBypass_ARM string

const (
	NetworkAclBypass_ARM_AzureServices = NetworkAclBypass_ARM("AzureServices")
	NetworkAclBypass_ARM_None          = NetworkAclBypass_ARM("None")
)

// Mapping from string to NetworkAclBypass_ARM
var networkAclBypass_ARM_Values = map[string]NetworkAclBypass_ARM{
	"azureservices": NetworkAclBypass_ARM_AzureServices,
	"none":          NetworkAclBypass_ARM_None,
}

// Whether requests from Public Network are allowed
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type PublicNetworkAccess_ARM string

const (
	PublicNetworkAccess_ARM_Disabled = PublicNetworkAccess_ARM("Disabled")
	PublicNetworkAccess_ARM_Enabled  = PublicNetworkAccess_ARM("Enabled")
)

// Mapping from string to PublicNetworkAccess_ARM
var publicNetworkAccess_ARM_Values = map[string]PublicNetworkAccess_ARM{
	"disabled": PublicNetworkAccess_ARM_Disabled,
	"enabled":  PublicNetworkAccess_ARM_Enabled,
}

// Information about the user assigned identity for the resource
type UserAssignedIdentityDetails_ARM struct {
}

// Virtual Network ACL Rule object
type VirtualNetworkRule_ARM struct {
	Id *string `json:"id,omitempty"`

	// IgnoreMissingVNetServiceEndpoint: Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `json:"ignoreMissingVNetServiceEndpoint,omitempty"`
}

// Describes the types of schema for analytical storage.
// +kubebuilder:validation:Enum={"FullFidelity","WellDefined"}
type AnalyticalStorageSchemaType_ARM string

const (
	AnalyticalStorageSchemaType_ARM_FullFidelity = AnalyticalStorageSchemaType_ARM("FullFidelity")
	AnalyticalStorageSchemaType_ARM_WellDefined  = AnalyticalStorageSchemaType_ARM("WellDefined")
)

// Mapping from string to AnalyticalStorageSchemaType_ARM
var analyticalStorageSchemaType_ARM_Values = map[string]AnalyticalStorageSchemaType_ARM{
	"fullfidelity": AnalyticalStorageSchemaType_ARM_FullFidelity,
	"welldefined":  AnalyticalStorageSchemaType_ARM_WellDefined,
}

// +kubebuilder:validation:Enum={"3.2","3.6","4.0"}
type ApiProperties_ServerVersion_ARM string

const (
	ApiProperties_ServerVersion_ARM_32 = ApiProperties_ServerVersion_ARM("3.2")
	ApiProperties_ServerVersion_ARM_36 = ApiProperties_ServerVersion_ARM("3.6")
	ApiProperties_ServerVersion_ARM_40 = ApiProperties_ServerVersion_ARM("4.0")
)

// Mapping from string to ApiProperties_ServerVersion_ARM
var apiProperties_ServerVersion_ARM_Values = map[string]ApiProperties_ServerVersion_ARM{
	"3.2": ApiProperties_ServerVersion_ARM_32,
	"3.6": ApiProperties_ServerVersion_ARM_36,
	"4.0": ApiProperties_ServerVersion_ARM_40,
}

// +kubebuilder:validation:Enum={"BoundedStaleness","ConsistentPrefix","Eventual","Session","Strong"}
type ConsistencyPolicy_DefaultConsistencyLevel_ARM string

const (
	ConsistencyPolicy_DefaultConsistencyLevel_ARM_BoundedStaleness = ConsistencyPolicy_DefaultConsistencyLevel_ARM("BoundedStaleness")
	ConsistencyPolicy_DefaultConsistencyLevel_ARM_ConsistentPrefix = ConsistencyPolicy_DefaultConsistencyLevel_ARM("ConsistentPrefix")
	ConsistencyPolicy_DefaultConsistencyLevel_ARM_Eventual         = ConsistencyPolicy_DefaultConsistencyLevel_ARM("Eventual")
	ConsistencyPolicy_DefaultConsistencyLevel_ARM_Session          = ConsistencyPolicy_DefaultConsistencyLevel_ARM("Session")
	ConsistencyPolicy_DefaultConsistencyLevel_ARM_Strong           = ConsistencyPolicy_DefaultConsistencyLevel_ARM("Strong")
)

// Mapping from string to ConsistencyPolicy_DefaultConsistencyLevel_ARM
var consistencyPolicy_DefaultConsistencyLevel_ARM_Values = map[string]ConsistencyPolicy_DefaultConsistencyLevel_ARM{
	"boundedstaleness": ConsistencyPolicy_DefaultConsistencyLevel_ARM_BoundedStaleness,
	"consistentprefix": ConsistencyPolicy_DefaultConsistencyLevel_ARM_ConsistentPrefix,
	"eventual":         ConsistencyPolicy_DefaultConsistencyLevel_ARM_Eventual,
	"session":          ConsistencyPolicy_DefaultConsistencyLevel_ARM_Session,
	"strong":           ConsistencyPolicy_DefaultConsistencyLevel_ARM_Strong,
}

type ContinuousModeBackupPolicy_ARM struct {
	Type ContinuousModeBackupPolicy_Type_ARM `json:"type,omitempty"`
}

type PeriodicModeBackupPolicy_ARM struct {
	// PeriodicModeProperties: Configuration values for periodic mode backup
	PeriodicModeProperties *PeriodicModeProperties_ARM       `json:"periodicModeProperties,omitempty"`
	Type                   PeriodicModeBackupPolicy_Type_ARM `json:"type,omitempty"`
}

// +kubebuilder:validation:Enum={"Continuous"}
type ContinuousModeBackupPolicy_Type_ARM string

const ContinuousModeBackupPolicy_Type_ARM_Continuous = ContinuousModeBackupPolicy_Type_ARM("Continuous")

// Mapping from string to ContinuousModeBackupPolicy_Type_ARM
var continuousModeBackupPolicy_Type_ARM_Values = map[string]ContinuousModeBackupPolicy_Type_ARM{
	"continuous": ContinuousModeBackupPolicy_Type_ARM_Continuous,
}

// +kubebuilder:validation:Enum={"Periodic"}
type PeriodicModeBackupPolicy_Type_ARM string

const PeriodicModeBackupPolicy_Type_ARM_Periodic = PeriodicModeBackupPolicy_Type_ARM("Periodic")

// Mapping from string to PeriodicModeBackupPolicy_Type_ARM
var periodicModeBackupPolicy_Type_ARM_Values = map[string]PeriodicModeBackupPolicy_Type_ARM{
	"periodic": PeriodicModeBackupPolicy_Type_ARM_Periodic,
}

// Configuration values for periodic mode backup
type PeriodicModeProperties_ARM struct {
	// BackupIntervalInMinutes: An integer representing the interval in minutes between two backups
	BackupIntervalInMinutes *int `json:"backupIntervalInMinutes,omitempty"`

	// BackupRetentionIntervalInHours: An integer representing the time (in hours) that each backup is retained
	BackupRetentionIntervalInHours *int `json:"backupRetentionIntervalInHours,omitempty"`
}
