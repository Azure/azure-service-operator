// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	alpha20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	v20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1beta20210515storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongodbDatabaseCollection_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollection to hub returns original",
		prop.ForAll(RunResourceConversionTestForMongodbDatabaseCollection, MongodbDatabaseCollectionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForMongodbDatabaseCollection tests if a specific instance of MongodbDatabaseCollection round trips to the hub storage version and back losslessly
func RunResourceConversionTestForMongodbDatabaseCollection(subject MongodbDatabaseCollection) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20210515s.MongodbDatabaseCollection
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual MongodbDatabaseCollection
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollection_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollection to MongodbDatabaseCollection via AssignPropertiesToMongodbDatabaseCollection & AssignPropertiesFromMongodbDatabaseCollection returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseCollection, MongodbDatabaseCollectionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseCollection tests if a specific instance of MongodbDatabaseCollection can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseCollection(subject MongodbDatabaseCollection) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongodbDatabaseCollection
	err := copied.AssignPropertiesToMongodbDatabaseCollection(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseCollection
	err = actual.AssignPropertiesFromMongodbDatabaseCollection(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollection_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseCollection via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseCollection, MongodbDatabaseCollectionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseCollection runs a test to see if a specific instance of MongodbDatabaseCollection round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseCollection(subject MongodbDatabaseCollection) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseCollection
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseCollection instances for property testing - lazily instantiated by
// MongodbDatabaseCollectionGenerator()
var mongodbDatabaseCollectionGenerator gopter.Gen

// MongodbDatabaseCollectionGenerator returns a generator of MongodbDatabaseCollection instances for property testing.
func MongodbDatabaseCollectionGenerator() gopter.Gen {
	if mongodbDatabaseCollectionGenerator != nil {
		return mongodbDatabaseCollectionGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongodbDatabaseCollection(generators)
	mongodbDatabaseCollectionGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseCollection{}), generators)

	return mongodbDatabaseCollectionGenerator
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseCollection is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseCollection(gens map[string]gopter.Gen) {
<<<<<<< HEAD
	gens["Spec"] = DatabaseAccountsMongodbDatabasesCollection_SpecGenerator()
	gens["Status"] = DatabaseAccountsMongodbDatabasesCollection_STATUSGenerator()
=======
	gens["Spec"] = DatabaseAccountsMongodbDatabasesCollectionsSpecGenerator()
	gens["Status"] = MongoDBCollectionGetResultsSTATUSGenerator()
>>>>>>> main
}

func Test_DatabaseAccountsMongodbDatabasesCollection_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DatabaseAccountsMongodbDatabasesCollection_STATUS to DatabaseAccountsMongodbDatabasesCollection_STATUS via AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS & AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollection_STATUS, DatabaseAccountsMongodbDatabasesCollection_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollection_STATUS tests if a specific instance of DatabaseAccountsMongodbDatabasesCollection_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollection_STATUS(subject DatabaseAccountsMongodbDatabasesCollection_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.DatabaseAccountsMongodbDatabasesCollection_STATUS
	err := copied.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DatabaseAccountsMongodbDatabasesCollection_STATUS
	err = actual.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DatabaseAccountsMongodbDatabasesCollection_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabasesCollection_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollection_STATUS, DatabaseAccountsMongodbDatabasesCollection_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollection_STATUS runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollection_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollection_STATUS(subject DatabaseAccountsMongodbDatabasesCollection_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabasesCollection_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabasesCollection_STATUS instances for property testing - lazily instantiated
// by DatabaseAccountsMongodbDatabasesCollection_STATUSGenerator()
var databaseAccountsMongodbDatabasesCollection_STATUSGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollection_STATUSGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollection_STATUS instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollection_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollection_STATUSGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollection_STATUSGenerator != nil {
		return databaseAccountsMongodbDatabasesCollection_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS(generators)
	databaseAccountsMongodbDatabasesCollection_STATUSGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollection_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS(generators)
	databaseAccountsMongodbDatabasesCollection_STATUSGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollection_STATUS{}), generators)

	return databaseAccountsMongodbDatabasesCollection_STATUSGenerator
}

<<<<<<< HEAD
// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS(gens map[string]gopter.Gen) {
=======
// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSpec(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionResourceGenerator())
}

func Test_MongoDBCollectionGetResults_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoDBCollectionGetResults_STATUS to MongoDBCollectionGetResults_STATUS via AssignPropertiesToMongoDBCollectionGetResultsSTATUS & AssignPropertiesFromMongoDBCollectionGetResultsSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollectionGetResultsSTATUS, MongoDBCollectionGetResultsSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollectionGetResultsSTATUS tests if a specific instance of MongoDBCollectionGetResults_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollectionGetResultsSTATUS(subject MongoDBCollectionGetResults_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoDBCollectionGetResults_STATUS
	err := copied.AssignPropertiesToMongoDBCollectionGetResultsSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoDBCollectionGetResults_STATUS
	err = actual.AssignPropertiesFromMongoDBCollectionGetResultsSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoDBCollectionGetResults_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetResults_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetResultsSTATUS, MongoDBCollectionGetResultsSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetResultsSTATUS runs a test to see if a specific instance of MongoDBCollectionGetResults_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetResultsSTATUS(subject MongoDBCollectionGetResults_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetResults_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetResults_STATUS instances for property testing - lazily instantiated by
// MongoDBCollectionGetResultsSTATUSGenerator()
var mongoDBCollectionGetResultsSTATUSGenerator gopter.Gen

// MongoDBCollectionGetResultsSTATUSGenerator returns a generator of MongoDBCollectionGetResults_STATUS instances for property testing.
// We first initialize mongoDBCollectionGetResultsSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetResultsSTATUSGenerator() gopter.Gen {
	if mongoDBCollectionGetResultsSTATUSGenerator != nil {
		return mongoDBCollectionGetResultsSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS(generators)
	mongoDBCollectionGetResultsSTATUSGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetResults_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS(generators)
	mongoDBCollectionGetResultsSTATUSGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetResults_STATUS{}), generators)

	return mongoDBCollectionGetResultsSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

<<<<<<< HEAD
// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_STATUS(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResource_STATUSGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionGetProperties_Resource_STATUSGenerator())
}

func Test_DatabaseAccountsMongodbDatabasesCollection_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
=======
// AddRelatedPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetResultsSTATUS(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResourceSTATUSGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionGetPropertiesSTATUSResourceGenerator())
}

func Test_MongoDBCollectionGetProperties_STATUS_Resource_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip from DatabaseAccountsMongodbDatabasesCollection_Spec to DatabaseAccountsMongodbDatabasesCollection_Spec via AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec & AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollection_Spec, DatabaseAccountsMongodbDatabasesCollection_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollection_Spec tests if a specific instance of DatabaseAccountsMongodbDatabasesCollection_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollection_Spec(subject DatabaseAccountsMongodbDatabasesCollection_Spec) string {
=======
		"Round trip from MongoDBCollectionGetProperties_STATUS_Resource to MongoDBCollectionGetProperties_STATUS_Resource via AssignPropertiesToMongoDBCollectionGetPropertiesSTATUSResource & AssignPropertiesFromMongoDBCollectionGetPropertiesSTATUSResource returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollectionGetPropertiesSTATUSResource, MongoDBCollectionGetPropertiesSTATUSResourceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollectionGetPropertiesSTATUSResource tests if a specific instance of MongoDBCollectionGetProperties_STATUS_Resource can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollectionGetPropertiesSTATUSResource(subject MongoDBCollectionGetProperties_STATUS_Resource) string {
>>>>>>> main
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
<<<<<<< HEAD
	var other alpha20210515s.DatabaseAccountsMongodbDatabasesCollection_Spec
	err := copied.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollection_Spec(&other)
=======
	var other alpha20210515s.MongoDBCollectionGetProperties_STATUS_Resource
	err := copied.AssignPropertiesToMongoDBCollectionGetPropertiesSTATUSResource(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
<<<<<<< HEAD
	var actual DatabaseAccountsMongodbDatabasesCollection_Spec
	err = actual.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollection_Spec(&other)
=======
	var actual MongoDBCollectionGetProperties_STATUS_Resource
	err = actual.AssignPropertiesFromMongoDBCollectionGetPropertiesSTATUSResource(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
func Test_DatabaseAccountsMongodbDatabasesCollection_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
=======
func Test_MongoDBCollectionGetProperties_STATUS_Resource_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
>>>>>>> main
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip of DatabaseAccountsMongodbDatabasesCollection_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollection_Spec, DatabaseAccountsMongodbDatabasesCollection_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollection_Spec runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollection_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollection_Spec(subject DatabaseAccountsMongodbDatabasesCollection_Spec) string {
=======
		"Round trip of MongoDBCollectionGetProperties_STATUS_Resource via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetPropertiesSTATUSResource, MongoDBCollectionGetPropertiesSTATUSResourceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetPropertiesSTATUSResource runs a test to see if a specific instance of MongoDBCollectionGetProperties_STATUS_Resource round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetPropertiesSTATUSResource(subject MongoDBCollectionGetProperties_STATUS_Resource) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
<<<<<<< HEAD
	var actual DatabaseAccountsMongodbDatabasesCollection_Spec
=======
	var actual MongoDBCollectionGetProperties_STATUS_Resource
>>>>>>> main
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of DatabaseAccountsMongodbDatabasesCollection_Spec instances for property testing - lazily instantiated by
// DatabaseAccountsMongodbDatabasesCollection_SpecGenerator()
var databaseAccountsMongodbDatabasesCollection_SpecGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollection_SpecGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollection_Spec instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollection_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollection_SpecGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollection_SpecGenerator != nil {
		return databaseAccountsMongodbDatabasesCollection_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec(generators)
	databaseAccountsMongodbDatabasesCollection_SpecGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollection_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec(generators)
	databaseAccountsMongodbDatabasesCollection_SpecGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollection_Spec{}), generators)

	return databaseAccountsMongodbDatabasesCollection_SpecGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollection_Spec(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionResourceGenerator())
}

func Test_MongoDBCollectionGetProperties_Resource_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoDBCollectionGetProperties_Resource_STATUS to MongoDBCollectionGetProperties_Resource_STATUS via AssignPropertiesToMongoDBCollectionGetProperties_Resource_STATUS & AssignPropertiesFromMongoDBCollectionGetProperties_Resource_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollectionGetProperties_Resource_STATUS, MongoDBCollectionGetProperties_Resource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollectionGetProperties_Resource_STATUS tests if a specific instance of MongoDBCollectionGetProperties_Resource_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollectionGetProperties_Resource_STATUS(subject MongoDBCollectionGetProperties_Resource_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoDBCollectionGetProperties_Resource_STATUS
	err := copied.AssignPropertiesToMongoDBCollectionGetProperties_Resource_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoDBCollectionGetProperties_Resource_STATUS
	err = actual.AssignPropertiesFromMongoDBCollectionGetProperties_Resource_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoDBCollectionGetProperties_Resource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetProperties_Resource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetProperties_Resource_STATUS, MongoDBCollectionGetProperties_Resource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetProperties_Resource_STATUS runs a test to see if a specific instance of MongoDBCollectionGetProperties_Resource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetProperties_Resource_STATUS(subject MongoDBCollectionGetProperties_Resource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetProperties_Resource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetProperties_Resource_STATUS instances for property testing - lazily instantiated by
// MongoDBCollectionGetProperties_Resource_STATUSGenerator()
var mongoDBCollectionGetProperties_Resource_STATUSGenerator gopter.Gen

// MongoDBCollectionGetProperties_Resource_STATUSGenerator returns a generator of MongoDBCollectionGetProperties_Resource_STATUS instances for property testing.
// We first initialize mongoDBCollectionGetProperties_Resource_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetProperties_Resource_STATUSGenerator() gopter.Gen {
	if mongoDBCollectionGetProperties_Resource_STATUSGenerator != nil {
		return mongoDBCollectionGetProperties_Resource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS(generators)
	mongoDBCollectionGetProperties_Resource_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_Resource_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS(generators)
	mongoDBCollectionGetProperties_Resource_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_Resource_STATUS{}), generators)

	return mongoDBCollectionGetProperties_Resource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS(gens map[string]gopter.Gen) {
=======
// Generator of MongoDBCollectionGetProperties_STATUS_Resource instances for property testing - lazily instantiated by
// MongoDBCollectionGetPropertiesSTATUSResourceGenerator()
var mongoDBCollectionGetPropertiesSTATUSResourceGenerator gopter.Gen

// MongoDBCollectionGetPropertiesSTATUSResourceGenerator returns a generator of MongoDBCollectionGetProperties_STATUS_Resource instances for property testing.
// We first initialize mongoDBCollectionGetPropertiesSTATUSResourceGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetPropertiesSTATUSResourceGenerator() gopter.Gen {
	if mongoDBCollectionGetPropertiesSTATUSResourceGenerator != nil {
		return mongoDBCollectionGetPropertiesSTATUSResourceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource(generators)
	mongoDBCollectionGetPropertiesSTATUSResourceGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_STATUS_Resource{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource(generators)
	mongoDBCollectionGetPropertiesSTATUSResourceGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_STATUS_Resource{}), generators)

	return mongoDBCollectionGetPropertiesSTATUSResourceGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

<<<<<<< HEAD
// AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_STATUSGenerator())
=======
// AddRelatedPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetPropertiesSTATUSResource(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndexSTATUSGenerator())
>>>>>>> main
}

func Test_MongoDBCollectionResource_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoDBCollectionResource to MongoDBCollectionResource via AssignPropertiesToMongoDBCollectionResource & AssignPropertiesFromMongoDBCollectionResource returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollectionResource, MongoDBCollectionResourceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollectionResource tests if a specific instance of MongoDBCollectionResource can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollectionResource(subject MongoDBCollectionResource) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoDBCollectionResource
	err := copied.AssignPropertiesToMongoDBCollectionResource(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoDBCollectionResource
	err = actual.AssignPropertiesFromMongoDBCollectionResource(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoDBCollectionResource_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResource, MongoDBCollectionResourceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResource runs a test to see if a specific instance of MongoDBCollectionResource round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResource(subject MongoDBCollectionResource) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource instances for property testing - lazily instantiated by
// MongoDBCollectionResourceGenerator()
var mongoDBCollectionResourceGenerator gopter.Gen

// MongoDBCollectionResourceGenerator returns a generator of MongoDBCollectionResource instances for property testing.
// We first initialize mongoDBCollectionResourceGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResourceGenerator() gopter.Gen {
	if mongoDBCollectionResourceGenerator != nil {
		return mongoDBCollectionResourceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource(generators)
	mongoDBCollectionResourceGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResource(generators)
	mongoDBCollectionResourceGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource{}), generators)

	return mongoDBCollectionResourceGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResource is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResource(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResource is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResource(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndexGenerator())
}

func Test_MongoIndex_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndex to MongoIndex via AssignPropertiesToMongoIndex & AssignPropertiesFromMongoIndex returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndex, MongoIndexGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndex tests if a specific instance of MongoIndex can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndex(subject MongoIndex) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoIndex
	err := copied.AssignPropertiesToMongoIndex(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndex
	err = actual.AssignPropertiesFromMongoIndex(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndex_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex, MongoIndexGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex runs a test to see if a specific instance of MongoIndex round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex(subject MongoIndex) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex instances for property testing - lazily instantiated by MongoIndexGenerator()
var mongoIndexGenerator gopter.Gen

// MongoIndexGenerator returns a generator of MongoIndex instances for property testing.
func MongoIndexGenerator() gopter.Gen {
	if mongoIndexGenerator != nil {
		return mongoIndexGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex(generators)
	mongoIndexGenerator = gen.Struct(reflect.TypeOf(MongoIndex{}), generators)

	return mongoIndexGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeysGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptionsGenerator())
}

func Test_MongoIndex_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip from MongoIndex_STATUS to MongoIndex_STATUS via AssignPropertiesToMongoIndex_STATUS & AssignPropertiesFromMongoIndex_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndex_STATUS, MongoIndex_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndex_STATUS tests if a specific instance of MongoIndex_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndex_STATUS(subject MongoIndex_STATUS) string {
=======
		"Round trip from MongoIndex_STATUS to MongoIndex_STATUS via AssignPropertiesToMongoIndexSTATUS & AssignPropertiesFromMongoIndexSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexSTATUS, MongoIndexSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexSTATUS tests if a specific instance of MongoIndex_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexSTATUS(subject MongoIndex_STATUS) string {
>>>>>>> main
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoIndex_STATUS
<<<<<<< HEAD
	err := copied.AssignPropertiesToMongoIndex_STATUS(&other)
=======
	err := copied.AssignPropertiesToMongoIndexSTATUS(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndex_STATUS
<<<<<<< HEAD
	err = actual.AssignPropertiesFromMongoIndex_STATUS(&other)
=======
	err = actual.AssignPropertiesFromMongoIndexSTATUS(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndex_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_STATUS via JSON returns original",
<<<<<<< HEAD
		prop.ForAll(RunJSONSerializationTestForMongoIndex_STATUS, MongoIndex_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_STATUS runs a test to see if a specific instance of MongoIndex_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_STATUS(subject MongoIndex_STATUS) string {
=======
		prop.ForAll(RunJSONSerializationTestForMongoIndexSTATUS, MongoIndexSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexSTATUS runs a test to see if a specific instance of MongoIndex_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexSTATUS(subject MongoIndex_STATUS) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

<<<<<<< HEAD
// Generator of MongoIndex_STATUS instances for property testing - lazily instantiated by MongoIndex_STATUSGenerator()
var mongoIndex_STATUSGenerator gopter.Gen

// MongoIndex_STATUSGenerator returns a generator of MongoIndex_STATUS instances for property testing.
func MongoIndex_STATUSGenerator() gopter.Gen {
	if mongoIndex_STATUSGenerator != nil {
		return mongoIndex_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_STATUS(generators)
	mongoIndex_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoIndex_STATUS{}), generators)

	return mongoIndex_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_STATUS(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_STATUSGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_STATUSGenerator())
=======
// Generator of MongoIndex_STATUS instances for property testing - lazily instantiated by MongoIndexSTATUSGenerator()
var mongoIndexSTATUSGenerator gopter.Gen

// MongoIndexSTATUSGenerator returns a generator of MongoIndex_STATUS instances for property testing.
func MongoIndexSTATUSGenerator() gopter.Gen {
	if mongoIndexSTATUSGenerator != nil {
		return mongoIndexSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndexSTATUS(generators)
	mongoIndexSTATUSGenerator = gen.Struct(reflect.TypeOf(MongoIndex_STATUS{}), generators)

	return mongoIndexSTATUSGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndexSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndexSTATUS(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeysSTATUSGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptionsSTATUSGenerator())
>>>>>>> main
}

func Test_MongoIndexKeys_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndexKeys to MongoIndexKeys via AssignPropertiesToMongoIndexKeys & AssignPropertiesFromMongoIndexKeys returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexKeys, MongoIndexKeysGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexKeys tests if a specific instance of MongoIndexKeys can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexKeys(subject MongoIndexKeys) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoIndexKeys
	err := copied.AssignPropertiesToMongoIndexKeys(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexKeys
	err = actual.AssignPropertiesFromMongoIndexKeys(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexKeys_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys, MongoIndexKeysGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys runs a test to see if a specific instance of MongoIndexKeys round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys(subject MongoIndexKeys) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys instances for property testing - lazily instantiated by MongoIndexKeysGenerator()
var mongoIndexKeysGenerator gopter.Gen

// MongoIndexKeysGenerator returns a generator of MongoIndexKeys instances for property testing.
func MongoIndexKeysGenerator() gopter.Gen {
	if mongoIndexKeysGenerator != nil {
		return mongoIndexKeysGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys(generators)
	mongoIndexKeysGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys{}), generators)

	return mongoIndexKeysGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexKeys_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip from MongoIndexKeys_STATUS to MongoIndexKeys_STATUS via AssignPropertiesToMongoIndexKeys_STATUS & AssignPropertiesFromMongoIndexKeys_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexKeys_STATUS, MongoIndexKeys_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexKeys_STATUS tests if a specific instance of MongoIndexKeys_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexKeys_STATUS(subject MongoIndexKeys_STATUS) string {
=======
		"Round trip from MongoIndexKeys_STATUS to MongoIndexKeys_STATUS via AssignPropertiesToMongoIndexKeysSTATUS & AssignPropertiesFromMongoIndexKeysSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexKeysSTATUS, MongoIndexKeysSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexKeysSTATUS tests if a specific instance of MongoIndexKeys_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexKeysSTATUS(subject MongoIndexKeys_STATUS) string {
>>>>>>> main
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoIndexKeys_STATUS
<<<<<<< HEAD
	err := copied.AssignPropertiesToMongoIndexKeys_STATUS(&other)
=======
	err := copied.AssignPropertiesToMongoIndexKeysSTATUS(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexKeys_STATUS
<<<<<<< HEAD
	err = actual.AssignPropertiesFromMongoIndexKeys_STATUS(&other)
=======
	err = actual.AssignPropertiesFromMongoIndexKeysSTATUS(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexKeys_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_STATUS via JSON returns original",
<<<<<<< HEAD
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_STATUS, MongoIndexKeys_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_STATUS runs a test to see if a specific instance of MongoIndexKeys_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_STATUS(subject MongoIndexKeys_STATUS) string {
=======
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeysSTATUS, MongoIndexKeysSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeysSTATUS runs a test to see if a specific instance of MongoIndexKeys_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeysSTATUS(subject MongoIndexKeys_STATUS) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_STATUS instances for property testing - lazily instantiated by
<<<<<<< HEAD
// MongoIndexKeys_STATUSGenerator()
var mongoIndexKeys_STATUSGenerator gopter.Gen

// MongoIndexKeys_STATUSGenerator returns a generator of MongoIndexKeys_STATUS instances for property testing.
func MongoIndexKeys_STATUSGenerator() gopter.Gen {
	if mongoIndexKeys_STATUSGenerator != nil {
		return mongoIndexKeys_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUS(generators)
	mongoIndexKeys_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_STATUS{}), generators)

	return mongoIndexKeys_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUS(gens map[string]gopter.Gen) {
=======
// MongoIndexKeysSTATUSGenerator()
var mongoIndexKeysSTATUSGenerator gopter.Gen

// MongoIndexKeysSTATUSGenerator returns a generator of MongoIndexKeys_STATUS instances for property testing.
func MongoIndexKeysSTATUSGenerator() gopter.Gen {
	if mongoIndexKeysSTATUSGenerator != nil {
		return mongoIndexKeysSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeysSTATUS(generators)
	mongoIndexKeysSTATUSGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_STATUS{}), generators)

	return mongoIndexKeysSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeysSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeysSTATUS(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndexOptions to MongoIndexOptions via AssignPropertiesToMongoIndexOptions & AssignPropertiesFromMongoIndexOptions returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexOptions, MongoIndexOptionsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexOptions tests if a specific instance of MongoIndexOptions can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexOptions(subject MongoIndexOptions) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoIndexOptions
	err := copied.AssignPropertiesToMongoIndexOptions(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexOptions
	err = actual.AssignPropertiesFromMongoIndexOptions(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexOptions_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions, MongoIndexOptionsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions runs a test to see if a specific instance of MongoIndexOptions round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions(subject MongoIndexOptions) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions instances for property testing - lazily instantiated by MongoIndexOptionsGenerator()
var mongoIndexOptionsGenerator gopter.Gen

// MongoIndexOptionsGenerator returns a generator of MongoIndexOptions instances for property testing.
func MongoIndexOptionsGenerator() gopter.Gen {
	if mongoIndexOptionsGenerator != nil {
		return mongoIndexOptionsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions(generators)
	mongoIndexOptionsGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions{}), generators)

	return mongoIndexOptionsGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}

func Test_MongoIndexOptions_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
<<<<<<< HEAD
		"Round trip from MongoIndexOptions_STATUS to MongoIndexOptions_STATUS via AssignPropertiesToMongoIndexOptions_STATUS & AssignPropertiesFromMongoIndexOptions_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexOptions_STATUS, MongoIndexOptions_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexOptions_STATUS tests if a specific instance of MongoIndexOptions_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexOptions_STATUS(subject MongoIndexOptions_STATUS) string {
=======
		"Round trip from MongoIndexOptions_STATUS to MongoIndexOptions_STATUS via AssignPropertiesToMongoIndexOptionsSTATUS & AssignPropertiesFromMongoIndexOptionsSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexOptionsSTATUS, MongoIndexOptionsSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexOptionsSTATUS tests if a specific instance of MongoIndexOptions_STATUS can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexOptionsSTATUS(subject MongoIndexOptions_STATUS) string {
>>>>>>> main
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other alpha20210515s.MongoIndexOptions_STATUS
<<<<<<< HEAD
	err := copied.AssignPropertiesToMongoIndexOptions_STATUS(&other)
=======
	err := copied.AssignPropertiesToMongoIndexOptionsSTATUS(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexOptions_STATUS
<<<<<<< HEAD
	err = actual.AssignPropertiesFromMongoIndexOptions_STATUS(&other)
=======
	err = actual.AssignPropertiesFromMongoIndexOptionsSTATUS(&other)
>>>>>>> main
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexOptions_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_STATUS via JSON returns original",
<<<<<<< HEAD
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_STATUS, MongoIndexOptions_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_STATUS runs a test to see if a specific instance of MongoIndexOptions_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_STATUS(subject MongoIndexOptions_STATUS) string {
=======
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptionsSTATUS, MongoIndexOptionsSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptionsSTATUS runs a test to see if a specific instance of MongoIndexOptions_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptionsSTATUS(subject MongoIndexOptions_STATUS) string {
>>>>>>> main
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_STATUS instances for property testing - lazily instantiated by
<<<<<<< HEAD
// MongoIndexOptions_STATUSGenerator()
var mongoIndexOptions_STATUSGenerator gopter.Gen

// MongoIndexOptions_STATUSGenerator returns a generator of MongoIndexOptions_STATUS instances for property testing.
func MongoIndexOptions_STATUSGenerator() gopter.Gen {
	if mongoIndexOptions_STATUSGenerator != nil {
		return mongoIndexOptions_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUS(generators)
	mongoIndexOptions_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_STATUS{}), generators)

	return mongoIndexOptions_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUS(gens map[string]gopter.Gen) {
=======
// MongoIndexOptionsSTATUSGenerator()
var mongoIndexOptionsSTATUSGenerator gopter.Gen

// MongoIndexOptionsSTATUSGenerator returns a generator of MongoIndexOptions_STATUS instances for property testing.
func MongoIndexOptionsSTATUSGenerator() gopter.Gen {
	if mongoIndexOptionsSTATUSGenerator != nil {
		return mongoIndexOptionsSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptionsSTATUS(generators)
	mongoIndexOptionsSTATUSGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_STATUS{}), generators)

	return mongoIndexOptionsSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptionsSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptionsSTATUS(gens map[string]gopter.Gen) {
>>>>>>> main
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
