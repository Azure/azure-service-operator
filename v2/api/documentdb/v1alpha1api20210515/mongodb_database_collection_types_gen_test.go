// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongodbDatabaseCollection_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollection to hub returns original",
		prop.ForAll(RunResourceConversionTestForMongodbDatabaseCollection, MongodbDatabaseCollectionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForMongodbDatabaseCollection tests if a specific instance of MongodbDatabaseCollection round trips to the hub storage version and back losslessly
func RunResourceConversionTestForMongodbDatabaseCollection(subject MongodbDatabaseCollection) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20210515storage.MongodbDatabaseCollection
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual MongodbDatabaseCollection
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollection_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollection to MongodbDatabaseCollection via AssignPropertiesToMongodbDatabaseCollection & AssignPropertiesFromMongodbDatabaseCollection returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseCollection, MongodbDatabaseCollectionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseCollection tests if a specific instance of MongodbDatabaseCollection can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseCollection(subject MongodbDatabaseCollection) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongodbDatabaseCollection
	err := copied.AssignPropertiesToMongodbDatabaseCollection(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseCollection
	err = actual.AssignPropertiesFromMongodbDatabaseCollection(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollection_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseCollection via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseCollection, MongodbDatabaseCollectionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseCollection runs a test to see if a specific instance of MongodbDatabaseCollection round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseCollection(subject MongodbDatabaseCollection) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseCollection
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseCollection instances for property testing - lazily instantiated by
//MongodbDatabaseCollectionGenerator()
var mongodbDatabaseCollectionGenerator gopter.Gen

// MongodbDatabaseCollectionGenerator returns a generator of MongodbDatabaseCollection instances for property testing.
func MongodbDatabaseCollectionGenerator() gopter.Gen {
	if mongodbDatabaseCollectionGenerator != nil {
		return mongodbDatabaseCollectionGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongodbDatabaseCollection(generators)
	mongodbDatabaseCollectionGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseCollection{}), generators)

	return mongodbDatabaseCollectionGenerator
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseCollection is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseCollection(gens map[string]gopter.Gen) {
	gens["Spec"] = DatabaseAccountsMongodbDatabasesCollections_SPECGenerator()
	gens["Status"] = MongoDBCollection_StatusGenerator()
}

func Test_DatabaseAccountsMongodbDatabasesCollections_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DatabaseAccountsMongodbDatabasesCollections_SPEC to DatabaseAccountsMongodbDatabasesCollections_SPEC via AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC & AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollections_SPEC, DatabaseAccountsMongodbDatabasesCollections_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollections_SPEC tests if a specific instance of DatabaseAccountsMongodbDatabasesCollections_SPEC can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollections_SPEC(subject DatabaseAccountsMongodbDatabasesCollections_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC
	err := copied.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DatabaseAccountsMongodbDatabasesCollections_SPEC
	err = actual.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DatabaseAccountsMongodbDatabasesCollections_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabasesCollections_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollections_SPEC, DatabaseAccountsMongodbDatabasesCollections_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollections_SPEC runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollections_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollections_SPEC(subject DatabaseAccountsMongodbDatabasesCollections_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabasesCollections_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabasesCollections_SPEC instances for property testing - lazily instantiated by
//DatabaseAccountsMongodbDatabasesCollections_SPECGenerator()
var databaseAccountsMongodbDatabasesCollections_specGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollections_SPECGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollections_SPEC instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollections_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollections_SPECGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollections_specGenerator != nil {
		return databaseAccountsMongodbDatabasesCollections_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC(generators)
	databaseAccountsMongodbDatabasesCollections_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollections_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC(generators)
	databaseAccountsMongodbDatabasesCollections_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollections_SPEC{}), generators)

	return databaseAccountsMongodbDatabasesCollections_specGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollections_SPEC(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecGenerator())
	gens["Resource"] = MongoDBCollectionResource_SpecGenerator()
}

func Test_MongoDBCollection_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoDBCollection_Status to MongoDBCollection_Status via AssignPropertiesToMongoDBCollection_Status & AssignPropertiesFromMongoDBCollection_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollection_Status, MongoDBCollection_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollection_Status tests if a specific instance of MongoDBCollection_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollection_Status(subject MongoDBCollection_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoDBCollection_Status
	err := copied.AssignPropertiesToMongoDBCollection_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoDBCollection_Status
	err = actual.AssignPropertiesFromMongoDBCollection_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoDBCollection_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollection_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollection_Status, MongoDBCollection_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollection_Status runs a test to see if a specific instance of MongoDBCollection_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollection_Status(subject MongoDBCollection_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollection_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollection_Status instances for property testing - lazily instantiated by
//MongoDBCollection_StatusGenerator()
var mongoDBCollection_statusGenerator gopter.Gen

// MongoDBCollection_StatusGenerator returns a generator of MongoDBCollection_Status instances for property testing.
// We first initialize mongoDBCollection_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollection_StatusGenerator() gopter.Gen {
	if mongoDBCollection_statusGenerator != nil {
		return mongoDBCollection_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollection_Status(generators)
	mongoDBCollection_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBCollection_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollection_Status(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollection_Status(generators)
	mongoDBCollection_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBCollection_Status{}), generators)

	return mongoDBCollection_statusGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollection_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollection_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollection_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollection_Status(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionResource_StatusGenerator())
}

func Test_MongoDBCollectionResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoDBCollectionResource_Spec to MongoDBCollectionResource_Spec via AssignPropertiesToMongoDBCollectionResource_Spec & AssignPropertiesFromMongoDBCollectionResource_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollectionResource_Spec, MongoDBCollectionResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollectionResource_Spec tests if a specific instance of MongoDBCollectionResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollectionResource_Spec(subject MongoDBCollectionResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoDBCollectionResource_Spec
	err := copied.AssignPropertiesToMongoDBCollectionResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoDBCollectionResource_Spec
	err = actual.AssignPropertiesFromMongoDBCollectionResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoDBCollectionResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResource_Spec, MongoDBCollectionResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResource_Spec runs a test to see if a specific instance of MongoDBCollectionResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResource_Spec(subject MongoDBCollectionResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_Spec instances for property testing - lazily instantiated by
//MongoDBCollectionResource_SpecGenerator()
var mongoDBCollectionResource_specGenerator gopter.Gen

// MongoDBCollectionResource_SpecGenerator returns a generator of MongoDBCollectionResource_Spec instances for property testing.
// We first initialize mongoDBCollectionResource_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResource_SpecGenerator() gopter.Gen {
	if mongoDBCollectionResource_specGenerator != nil {
		return mongoDBCollectionResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Spec(generators)
	mongoDBCollectionResource_specGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Spec(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResource_Spec(generators)
	mongoDBCollectionResource_specGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_Spec{}), generators)

	return mongoDBCollectionResource_specGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Spec(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.AlphaString()
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResource_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResource_Spec(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_SpecGenerator())
}

func Test_MongoDBCollectionResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoDBCollectionResource_Status to MongoDBCollectionResource_Status via AssignPropertiesToMongoDBCollectionResource_Status & AssignPropertiesFromMongoDBCollectionResource_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoDBCollectionResource_Status, MongoDBCollectionResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoDBCollectionResource_Status tests if a specific instance of MongoDBCollectionResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoDBCollectionResource_Status(subject MongoDBCollectionResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoDBCollectionResource_Status
	err := copied.AssignPropertiesToMongoDBCollectionResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoDBCollectionResource_Status
	err = actual.AssignPropertiesFromMongoDBCollectionResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoDBCollectionResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResource_Status, MongoDBCollectionResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResource_Status runs a test to see if a specific instance of MongoDBCollectionResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResource_Status(subject MongoDBCollectionResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_Status instances for property testing - lazily instantiated by
//MongoDBCollectionResource_StatusGenerator()
var mongoDBCollectionResource_statusGenerator gopter.Gen

// MongoDBCollectionResource_StatusGenerator returns a generator of MongoDBCollectionResource_Status instances for property testing.
// We first initialize mongoDBCollectionResource_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResource_StatusGenerator() gopter.Gen {
	if mongoDBCollectionResource_statusGenerator != nil {
		return mongoDBCollectionResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Status(generators)
	mongoDBCollectionResource_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Status(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResource_Status(generators)
	mongoDBCollectionResource_statusGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_Status{}), generators)

	return mongoDBCollectionResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResource_Status(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.AlphaString()
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResource_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResource_Status(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_StatusGenerator())
}

func Test_MongoIndex_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndex_Spec to MongoIndex_Spec via AssignPropertiesToMongoIndex_Spec & AssignPropertiesFromMongoIndex_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndex_Spec, MongoIndex_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndex_Spec tests if a specific instance of MongoIndex_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndex_Spec(subject MongoIndex_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoIndex_Spec
	err := copied.AssignPropertiesToMongoIndex_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndex_Spec
	err = actual.AssignPropertiesFromMongoIndex_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndex_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_Spec, MongoIndex_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_Spec runs a test to see if a specific instance of MongoIndex_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_Spec(subject MongoIndex_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_Spec instances for property testing - lazily instantiated by MongoIndex_SpecGenerator()
var mongoIndex_specGenerator gopter.Gen

// MongoIndex_SpecGenerator returns a generator of MongoIndex_Spec instances for property testing.
func MongoIndex_SpecGenerator() gopter.Gen {
	if mongoIndex_specGenerator != nil {
		return mongoIndex_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_Spec(generators)
	mongoIndex_specGenerator = gen.Struct(reflect.TypeOf(MongoIndex_Spec{}), generators)

	return mongoIndex_specGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_Spec(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_SpecGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_SpecGenerator())
}

func Test_MongoIndex_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndex_Status to MongoIndex_Status via AssignPropertiesToMongoIndex_Status & AssignPropertiesFromMongoIndex_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndex_Status, MongoIndex_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndex_Status tests if a specific instance of MongoIndex_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndex_Status(subject MongoIndex_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoIndex_Status
	err := copied.AssignPropertiesToMongoIndex_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndex_Status
	err = actual.AssignPropertiesFromMongoIndex_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndex_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_Status, MongoIndex_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_Status runs a test to see if a specific instance of MongoIndex_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_Status(subject MongoIndex_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_Status instances for property testing - lazily instantiated by MongoIndex_StatusGenerator()
var mongoIndex_statusGenerator gopter.Gen

// MongoIndex_StatusGenerator returns a generator of MongoIndex_Status instances for property testing.
func MongoIndex_StatusGenerator() gopter.Gen {
	if mongoIndex_statusGenerator != nil {
		return mongoIndex_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_Status(generators)
	mongoIndex_statusGenerator = gen.Struct(reflect.TypeOf(MongoIndex_Status{}), generators)

	return mongoIndex_statusGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_Status(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_StatusGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_StatusGenerator())
}

func Test_MongoIndexKeys_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndexKeys_Spec to MongoIndexKeys_Spec via AssignPropertiesToMongoIndexKeys_Spec & AssignPropertiesFromMongoIndexKeys_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexKeys_Spec, MongoIndexKeys_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexKeys_Spec tests if a specific instance of MongoIndexKeys_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexKeys_Spec(subject MongoIndexKeys_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoIndexKeys_Spec
	err := copied.AssignPropertiesToMongoIndexKeys_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexKeys_Spec
	err = actual.AssignPropertiesFromMongoIndexKeys_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexKeys_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_Spec, MongoIndexKeys_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_Spec runs a test to see if a specific instance of MongoIndexKeys_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_Spec(subject MongoIndexKeys_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_Spec instances for property testing - lazily instantiated by
//MongoIndexKeys_SpecGenerator()
var mongoIndexKeys_specGenerator gopter.Gen

// MongoIndexKeys_SpecGenerator returns a generator of MongoIndexKeys_Spec instances for property testing.
func MongoIndexKeys_SpecGenerator() gopter.Gen {
	if mongoIndexKeys_specGenerator != nil {
		return mongoIndexKeys_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_Spec(generators)
	mongoIndexKeys_specGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_Spec{}), generators)

	return mongoIndexKeys_specGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_Spec(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexKeys_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndexKeys_Status to MongoIndexKeys_Status via AssignPropertiesToMongoIndexKeys_Status & AssignPropertiesFromMongoIndexKeys_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexKeys_Status, MongoIndexKeys_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexKeys_Status tests if a specific instance of MongoIndexKeys_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexKeys_Status(subject MongoIndexKeys_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoIndexKeys_Status
	err := copied.AssignPropertiesToMongoIndexKeys_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexKeys_Status
	err = actual.AssignPropertiesFromMongoIndexKeys_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexKeys_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_Status, MongoIndexKeys_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_Status runs a test to see if a specific instance of MongoIndexKeys_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_Status(subject MongoIndexKeys_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_Status instances for property testing - lazily instantiated by
//MongoIndexKeys_StatusGenerator()
var mongoIndexKeys_statusGenerator gopter.Gen

// MongoIndexKeys_StatusGenerator returns a generator of MongoIndexKeys_Status instances for property testing.
func MongoIndexKeys_StatusGenerator() gopter.Gen {
	if mongoIndexKeys_statusGenerator != nil {
		return mongoIndexKeys_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_Status(generators)
	mongoIndexKeys_statusGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_Status{}), generators)

	return mongoIndexKeys_statusGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_Status(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndexOptions_Spec to MongoIndexOptions_Spec via AssignPropertiesToMongoIndexOptions_Spec & AssignPropertiesFromMongoIndexOptions_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexOptions_Spec, MongoIndexOptions_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexOptions_Spec tests if a specific instance of MongoIndexOptions_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexOptions_Spec(subject MongoIndexOptions_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoIndexOptions_Spec
	err := copied.AssignPropertiesToMongoIndexOptions_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexOptions_Spec
	err = actual.AssignPropertiesFromMongoIndexOptions_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexOptions_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_Spec, MongoIndexOptions_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_Spec runs a test to see if a specific instance of MongoIndexOptions_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_Spec(subject MongoIndexOptions_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_Spec instances for property testing - lazily instantiated by
//MongoIndexOptions_SpecGenerator()
var mongoIndexOptions_specGenerator gopter.Gen

// MongoIndexOptions_SpecGenerator returns a generator of MongoIndexOptions_Spec instances for property testing.
func MongoIndexOptions_SpecGenerator() gopter.Gen {
	if mongoIndexOptions_specGenerator != nil {
		return mongoIndexOptions_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_Spec(generators)
	mongoIndexOptions_specGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_Spec{}), generators)

	return mongoIndexOptions_specGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_Spec(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}

func Test_MongoIndexOptions_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongoIndexOptions_Status to MongoIndexOptions_Status via AssignPropertiesToMongoIndexOptions_Status & AssignPropertiesFromMongoIndexOptions_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongoIndexOptions_Status, MongoIndexOptions_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongoIndexOptions_Status tests if a specific instance of MongoIndexOptions_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongoIndexOptions_Status(subject MongoIndexOptions_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongoIndexOptions_Status
	err := copied.AssignPropertiesToMongoIndexOptions_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongoIndexOptions_Status
	err = actual.AssignPropertiesFromMongoIndexOptions_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongoIndexOptions_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_Status, MongoIndexOptions_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_Status runs a test to see if a specific instance of MongoIndexOptions_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_Status(subject MongoIndexOptions_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_Status instances for property testing - lazily instantiated by
//MongoIndexOptions_StatusGenerator()
var mongoIndexOptions_statusGenerator gopter.Gen

// MongoIndexOptions_StatusGenerator returns a generator of MongoIndexOptions_Status instances for property testing.
func MongoIndexOptions_StatusGenerator() gopter.Gen {
	if mongoIndexOptions_statusGenerator != nil {
		return mongoIndexOptions_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_Status(generators)
	mongoIndexOptions_statusGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_Status{}), generators)

	return mongoIndexOptions_statusGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_Status(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
