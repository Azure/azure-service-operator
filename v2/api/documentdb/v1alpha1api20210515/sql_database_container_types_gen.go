// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	alpha20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of SqlDatabaseContainer. Use v1beta20210515.SqlDatabaseContainer instead
type SqlDatabaseContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccounts_SqlDatabases_Containers_Spec `json:"spec,omitempty"`
	Status            SqlContainerGetResults_STATUS                 `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainer{}

// GetConditions returns the conditions of the resource
func (container *SqlDatabaseContainer) GetConditions() conditions.Conditions {
	return container.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (container *SqlDatabaseContainer) SetConditions(conditions conditions.Conditions) {
	container.Status.Conditions = conditions
}

var _ conversion.Convertible = &SqlDatabaseContainer{}

// ConvertFrom populates our SqlDatabaseContainer from the provided hub SqlDatabaseContainer
func (container *SqlDatabaseContainer) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210515s.SqlDatabaseContainer

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = container.AssignProperties_From_SqlDatabaseContainer(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to container")
	}

	return nil
}

// ConvertTo populates the provided hub SqlDatabaseContainer from our SqlDatabaseContainer
func (container *SqlDatabaseContainer) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210515s.SqlDatabaseContainer
	err := container.AssignProperties_To_SqlDatabaseContainer(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from container")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainer,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=sqldatabasecontainers,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.sqldatabasecontainers.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &SqlDatabaseContainer{}

// Default applies defaults to the SqlDatabaseContainer resource
func (container *SqlDatabaseContainer) Default() {
	container.defaultImpl()
	var temp interface{} = container
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (container *SqlDatabaseContainer) defaultAzureName() {
	if container.Spec.AzureName == "" {
		container.Spec.AzureName = container.Name
	}
}

// defaultImpl applies the code generated defaults to the SqlDatabaseContainer resource
func (container *SqlDatabaseContainer) defaultImpl() { container.defaultAzureName() }

var _ genruntime.KubernetesResource = &SqlDatabaseContainer{}

// AzureName returns the Azure name of the resource
func (container *SqlDatabaseContainer) AzureName() string {
	return container.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (container SqlDatabaseContainer) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (container *SqlDatabaseContainer) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (container *SqlDatabaseContainer) GetSpec() genruntime.ConvertibleSpec {
	return &container.Spec
}

// GetStatus returns the status of this resource
func (container *SqlDatabaseContainer) GetStatus() genruntime.ConvertibleStatus {
	return &container.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
func (container *SqlDatabaseContainer) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
}

// NewEmptyStatus returns a new empty (blank) status
func (container *SqlDatabaseContainer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlContainerGetResults_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (container *SqlDatabaseContainer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(container.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  container.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (container *SqlDatabaseContainer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlContainerGetResults_STATUS); ok {
		container.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlContainerGetResults_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	container.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainer,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=sqldatabasecontainers,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.sqldatabasecontainers.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &SqlDatabaseContainer{}

// ValidateCreate validates the creation of the resource
func (container *SqlDatabaseContainer) ValidateCreate() error {
	validations := container.createValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (container *SqlDatabaseContainer) ValidateDelete() error {
	validations := container.deleteValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (container *SqlDatabaseContainer) ValidateUpdate(old runtime.Object) error {
	validations := container.updateValidations()
	var temp interface{} = container
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (container *SqlDatabaseContainer) createValidations() []func() error {
	return []func() error{container.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (container *SqlDatabaseContainer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (container *SqlDatabaseContainer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return container.validateResourceReferences()
		},
		container.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (container *SqlDatabaseContainer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&container.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (container *SqlDatabaseContainer) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*SqlDatabaseContainer)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, container)
}

// AssignProperties_From_SqlDatabaseContainer populates our SqlDatabaseContainer from the provided source SqlDatabaseContainer
func (container *SqlDatabaseContainer) AssignProperties_From_SqlDatabaseContainer(source *alpha20210515s.SqlDatabaseContainer) error {

	// ObjectMeta
	container.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccounts_SqlDatabases_Containers_Spec
	err := spec.AssignProperties_From_DatabaseAccounts_SqlDatabases_Containers_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DatabaseAccounts_SqlDatabases_Containers_Spec() to populate field Spec")
	}
	container.Spec = spec

	// Status
	var status SqlContainerGetResults_STATUS
	err = status.AssignProperties_From_SqlContainerGetResults_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_SqlContainerGetResults_STATUS() to populate field Status")
	}
	container.Status = status

	// No error
	return nil
}

// AssignProperties_To_SqlDatabaseContainer populates the provided destination SqlDatabaseContainer from our SqlDatabaseContainer
func (container *SqlDatabaseContainer) AssignProperties_To_SqlDatabaseContainer(destination *alpha20210515s.SqlDatabaseContainer) error {

	// ObjectMeta
	destination.ObjectMeta = *container.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec
	err := container.Spec.AssignProperties_To_DatabaseAccounts_SqlDatabases_Containers_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DatabaseAccounts_SqlDatabases_Containers_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210515s.SqlContainerGetResults_STATUS
	err = container.Status.AssignProperties_To_SqlContainerGetResults_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_SqlContainerGetResults_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (container *SqlDatabaseContainer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: container.Spec.OriginalVersion(),
		Kind:    "SqlDatabaseContainer",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of SqlDatabaseContainer. Use v1beta20210515.SqlDatabaseContainer instead
type SqlDatabaseContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainer `json:"items"`
}

type DatabaseAccounts_SqlDatabases_Containers_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string               `json:"azureName,omitempty"`
	Location  *string              `json:"location,omitempty"`
	Options   *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a documentdb.azure.com/SqlDatabase resource
	Owner *genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner,omitempty" kind:"SqlDatabase"`

	// +kubebuilder:validation:Required
	Resource *SqlContainerResource `json:"resource,omitempty"`
	Tags     map[string]string     `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccounts_SqlDatabases_Containers_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if containers == nil {
		return nil, nil
	}
	result := &DatabaseAccounts_SqlDatabases_Containers_SpecARM{}

	// Set property ‘Location’:
	if containers.Location != nil {
		location := *containers.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if containers.Options != nil || containers.Resource != nil {
		result.Properties = &SqlContainerCreateUpdatePropertiesARM{}
	}
	if containers.Options != nil {
		optionsARM, err := (*containers.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := *optionsARM.(*CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	if containers.Resource != nil {
		resourceARM, err := (*containers.Resource).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		resource := *resourceARM.(*SqlContainerResourceARM)
		result.Properties.Resource = &resource
	}

	// Set property ‘Tags’:
	if containers.Tags != nil {
		result.Tags = make(map[string]string, len(containers.Tags))
		for key, value := range containers.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccounts_SqlDatabases_Containers_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccounts_SqlDatabases_Containers_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccounts_SqlDatabases_Containers_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	containers.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		containers.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 CreateUpdateOptions
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			containers.Options = &options
		}
	}

	// Set property ‘Owner’:
	containers.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlContainerResource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			containers.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		containers.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			containers.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccounts_SqlDatabases_Containers_Spec{}

// ConvertSpecFrom populates our DatabaseAccounts_SqlDatabases_Containers_Spec from the provided source
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec)
	if ok {
		// Populate our instance from source
		return containers.AssignProperties_From_DatabaseAccounts_SqlDatabases_Containers_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = containers.AssignProperties_From_DatabaseAccounts_SqlDatabases_Containers_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccounts_SqlDatabases_Containers_Spec
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec)
	if ok {
		// Populate destination from our instance
		return containers.AssignProperties_To_DatabaseAccounts_SqlDatabases_Containers_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec{}
	err := containers.AssignProperties_To_DatabaseAccounts_SqlDatabases_Containers_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_DatabaseAccounts_SqlDatabases_Containers_Spec populates our DatabaseAccounts_SqlDatabases_Containers_Spec from the provided source DatabaseAccounts_SqlDatabases_Containers_Spec
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) AssignProperties_From_DatabaseAccounts_SqlDatabases_Containers_Spec(source *alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec) error {

	// AzureName
	containers.AzureName = source.AzureName

	// Location
	containers.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignProperties_From_CreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CreateUpdateOptions() to populate field Options")
		}
		containers.Options = &option
	} else {
		containers.Options = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		containers.Owner = &owner
	} else {
		containers.Owner = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlContainerResource
		err := resource.AssignProperties_From_SqlContainerResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SqlContainerResource() to populate field Resource")
		}
		containers.Resource = &resource
	} else {
		containers.Resource = nil
	}

	// Tags
	containers.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_DatabaseAccounts_SqlDatabases_Containers_Spec populates the provided destination DatabaseAccounts_SqlDatabases_Containers_Spec from our DatabaseAccounts_SqlDatabases_Containers_Spec
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) AssignProperties_To_DatabaseAccounts_SqlDatabases_Containers_Spec(destination *alpha20210515s.DatabaseAccounts_SqlDatabases_Containers_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = containers.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(containers.Location)

	// Options
	if containers.Options != nil {
		var option alpha20210515s.CreateUpdateOptions
		err := containers.Options.AssignProperties_To_CreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CreateUpdateOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = containers.OriginalVersion()

	// Owner
	if containers.Owner != nil {
		owner := containers.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Resource
	if containers.Resource != nil {
		var resource alpha20210515s.SqlContainerResource
		err := containers.Resource.AssignProperties_To_SqlContainerResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SqlContainerResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(containers.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (containers *DatabaseAccounts_SqlDatabases_Containers_Spec) SetAzureName(azureName string) {
	containers.AzureName = azureName
}

// Deprecated version of SqlContainerGetResults_STATUS. Use v1beta20210515.SqlContainerGetResults_STATUS instead
type SqlContainerGetResults_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition                     `json:"conditions,omitempty"`
	Id         *string                                    `json:"id,omitempty"`
	Location   *string                                    `json:"location,omitempty"`
	Name       *string                                    `json:"name,omitempty"`
	Options    *OptionsResource_STATUS                    `json:"options,omitempty"`
	Resource   *SqlContainerGetProperties_STATUS_Resource `json:"resource,omitempty"`
	Tags       map[string]string                          `json:"tags,omitempty"`
	Type       *string                                    `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlContainerGetResults_STATUS{}

// ConvertStatusFrom populates our SqlContainerGetResults_STATUS from the provided source
func (results *SqlContainerGetResults_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210515s.SqlContainerGetResults_STATUS)
	if ok {
		// Populate our instance from source
		return results.AssignProperties_From_SqlContainerGetResults_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210515s.SqlContainerGetResults_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = results.AssignProperties_From_SqlContainerGetResults_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlContainerGetResults_STATUS
func (results *SqlContainerGetResults_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210515s.SqlContainerGetResults_STATUS)
	if ok {
		// Populate destination from our instance
		return results.AssignProperties_To_SqlContainerGetResults_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210515s.SqlContainerGetResults_STATUS{}
	err := results.AssignProperties_To_SqlContainerGetResults_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SqlContainerGetResults_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (results *SqlContainerGetResults_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlContainerGetResults_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (results *SqlContainerGetResults_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlContainerGetResults_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlContainerGetResults_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		results.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		results.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		results.Name = &name
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 OptionsResource_STATUS
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			results.Options = &options
		}
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlContainerGetProperties_STATUS_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			results.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		results.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			results.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		results.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_SqlContainerGetResults_STATUS populates our SqlContainerGetResults_STATUS from the provided source SqlContainerGetResults_STATUS
func (results *SqlContainerGetResults_STATUS) AssignProperties_From_SqlContainerGetResults_STATUS(source *alpha20210515s.SqlContainerGetResults_STATUS) error {

	// Conditions
	results.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	results.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	results.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	results.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option OptionsResource_STATUS
		err := option.AssignProperties_From_OptionsResource_STATUS(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OptionsResource_STATUS() to populate field Options")
		}
		results.Options = &option
	} else {
		results.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlContainerGetProperties_STATUS_Resource
		err := resource.AssignProperties_From_SqlContainerGetProperties_STATUS_Resource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SqlContainerGetProperties_STATUS_Resource() to populate field Resource")
		}
		results.Resource = &resource
	} else {
		results.Resource = nil
	}

	// Tags
	results.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	results.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_SqlContainerGetResults_STATUS populates the provided destination SqlContainerGetResults_STATUS from our SqlContainerGetResults_STATUS
func (results *SqlContainerGetResults_STATUS) AssignProperties_To_SqlContainerGetResults_STATUS(destination *alpha20210515s.SqlContainerGetResults_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(results.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(results.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(results.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(results.Name)

	// Options
	if results.Options != nil {
		var option alpha20210515s.OptionsResource_STATUS
		err := results.Options.AssignProperties_To_OptionsResource_STATUS(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OptionsResource_STATUS() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if results.Resource != nil {
		var resource alpha20210515s.SqlContainerGetProperties_STATUS_Resource
		err := results.Resource.AssignProperties_To_SqlContainerGetProperties_STATUS_Resource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SqlContainerGetProperties_STATUS_Resource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(results.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(results.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SqlContainerGetProperties_STATUS_Resource. Use v1beta20210515.SqlContainerGetProperties_STATUS_Resource instead
type SqlContainerGetProperties_STATUS_Resource struct {
	AnalyticalStorageTtl     *int                             `json:"analyticalStorageTtl,omitempty"`
	ConflictResolutionPolicy *ConflictResolutionPolicy_STATUS `json:"conflictResolutionPolicy,omitempty"`
	DefaultTtl               *int                             `json:"defaultTtl,omitempty"`
	Etag                     *string                          `json:"_etag,omitempty"`
	Id                       *string                          `json:"id,omitempty"`
	IndexingPolicy           *IndexingPolicy_STATUS           `json:"indexingPolicy,omitempty"`
	PartitionKey             *ContainerPartitionKey_STATUS    `json:"partitionKey,omitempty"`
	Rid                      *string                          `json:"_rid,omitempty"`
	Ts                       *float64                         `json:"_ts,omitempty"`
	UniqueKeyPolicy          *UniqueKeyPolicy_STATUS          `json:"uniqueKeyPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &SqlContainerGetProperties_STATUS_Resource{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SqlContainerGetProperties_STATUS_Resource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlContainerGetProperties_STATUS_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SqlContainerGetProperties_STATUS_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlContainerGetProperties_STATUS_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlContainerGetProperties_STATUS_ResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		resource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘ConflictResolutionPolicy’:
	if typedInput.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy1 ConflictResolutionPolicy_STATUS
		err := conflictResolutionPolicy1.PopulateFromARM(owner, *typedInput.ConflictResolutionPolicy)
		if err != nil {
			return err
		}
		conflictResolutionPolicy := conflictResolutionPolicy1
		resource.ConflictResolutionPolicy = &conflictResolutionPolicy
	}

	// Set property ‘DefaultTtl’:
	if typedInput.DefaultTtl != nil {
		defaultTtl := *typedInput.DefaultTtl
		resource.DefaultTtl = &defaultTtl
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		resource.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// Set property ‘IndexingPolicy’:
	if typedInput.IndexingPolicy != nil {
		var indexingPolicy1 IndexingPolicy_STATUS
		err := indexingPolicy1.PopulateFromARM(owner, *typedInput.IndexingPolicy)
		if err != nil {
			return err
		}
		indexingPolicy := indexingPolicy1
		resource.IndexingPolicy = &indexingPolicy
	}

	// Set property ‘PartitionKey’:
	if typedInput.PartitionKey != nil {
		var partitionKey1 ContainerPartitionKey_STATUS
		err := partitionKey1.PopulateFromARM(owner, *typedInput.PartitionKey)
		if err != nil {
			return err
		}
		partitionKey := partitionKey1
		resource.PartitionKey = &partitionKey
	}

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		resource.Rid = &rid
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		resource.Ts = &ts
	}

	// Set property ‘UniqueKeyPolicy’:
	if typedInput.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy1 UniqueKeyPolicy_STATUS
		err := uniqueKeyPolicy1.PopulateFromARM(owner, *typedInput.UniqueKeyPolicy)
		if err != nil {
			return err
		}
		uniqueKeyPolicy := uniqueKeyPolicy1
		resource.UniqueKeyPolicy = &uniqueKeyPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_SqlContainerGetProperties_STATUS_Resource populates our SqlContainerGetProperties_STATUS_Resource from the provided source SqlContainerGetProperties_STATUS_Resource
func (resource *SqlContainerGetProperties_STATUS_Resource) AssignProperties_From_SqlContainerGetProperties_STATUS_Resource(source *alpha20210515s.SqlContainerGetProperties_STATUS_Resource) error {

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy ConflictResolutionPolicy_STATUS
		err := conflictResolutionPolicy.AssignProperties_From_ConflictResolutionPolicy_STATUS(source.ConflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ConflictResolutionPolicy_STATUS() to populate field ConflictResolutionPolicy")
		}
		resource.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		resource.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	resource.DefaultTtl = genruntime.ClonePointerToInt(source.DefaultTtl)

	// Etag
	resource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// IndexingPolicy
	if source.IndexingPolicy != nil {
		var indexingPolicy IndexingPolicy_STATUS
		err := indexingPolicy.AssignProperties_From_IndexingPolicy_STATUS(source.IndexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_IndexingPolicy_STATUS() to populate field IndexingPolicy")
		}
		resource.IndexingPolicy = &indexingPolicy
	} else {
		resource.IndexingPolicy = nil
	}

	// PartitionKey
	if source.PartitionKey != nil {
		var partitionKey ContainerPartitionKey_STATUS
		err := partitionKey.AssignProperties_From_ContainerPartitionKey_STATUS(source.PartitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ContainerPartitionKey_STATUS() to populate field PartitionKey")
		}
		resource.PartitionKey = &partitionKey
	} else {
		resource.PartitionKey = nil
	}

	// Rid
	resource.Rid = genruntime.ClonePointerToString(source.Rid)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		resource.Ts = &t
	} else {
		resource.Ts = nil
	}

	// UniqueKeyPolicy
	if source.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy UniqueKeyPolicy_STATUS
		err := uniqueKeyPolicy.AssignProperties_From_UniqueKeyPolicy_STATUS(source.UniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UniqueKeyPolicy_STATUS() to populate field UniqueKeyPolicy")
		}
		resource.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		resource.UniqueKeyPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SqlContainerGetProperties_STATUS_Resource populates the provided destination SqlContainerGetProperties_STATUS_Resource from our SqlContainerGetProperties_STATUS_Resource
func (resource *SqlContainerGetProperties_STATUS_Resource) AssignProperties_To_SqlContainerGetProperties_STATUS_Resource(destination *alpha20210515s.SqlContainerGetProperties_STATUS_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if resource.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy alpha20210515s.ConflictResolutionPolicy_STATUS
		err := resource.ConflictResolutionPolicy.AssignProperties_To_ConflictResolutionPolicy_STATUS(&conflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ConflictResolutionPolicy_STATUS() to populate field ConflictResolutionPolicy")
		}
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	destination.DefaultTtl = genruntime.ClonePointerToInt(resource.DefaultTtl)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(resource.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// IndexingPolicy
	if resource.IndexingPolicy != nil {
		var indexingPolicy alpha20210515s.IndexingPolicy_STATUS
		err := resource.IndexingPolicy.AssignProperties_To_IndexingPolicy_STATUS(&indexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_IndexingPolicy_STATUS() to populate field IndexingPolicy")
		}
		destination.IndexingPolicy = &indexingPolicy
	} else {
		destination.IndexingPolicy = nil
	}

	// PartitionKey
	if resource.PartitionKey != nil {
		var partitionKey alpha20210515s.ContainerPartitionKey_STATUS
		err := resource.PartitionKey.AssignProperties_To_ContainerPartitionKey_STATUS(&partitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ContainerPartitionKey_STATUS() to populate field PartitionKey")
		}
		destination.PartitionKey = &partitionKey
	} else {
		destination.PartitionKey = nil
	}

	// Rid
	destination.Rid = genruntime.ClonePointerToString(resource.Rid)

	// Ts
	if resource.Ts != nil {
		t := *resource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// UniqueKeyPolicy
	if resource.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy alpha20210515s.UniqueKeyPolicy_STATUS
		err := resource.UniqueKeyPolicy.AssignProperties_To_UniqueKeyPolicy_STATUS(&uniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UniqueKeyPolicy_STATUS() to populate field UniqueKeyPolicy")
		}
		destination.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		destination.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SqlContainerResource. Use v1beta20210515.SqlContainerResource instead
type SqlContainerResource struct {
	AnalyticalStorageTtl     *int                      `json:"analyticalStorageTtl,omitempty"`
	ConflictResolutionPolicy *ConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`
	DefaultTtl               *int                      `json:"defaultTtl,omitempty"`

	// +kubebuilder:validation:Required
	Id              *string                `json:"id,omitempty"`
	IndexingPolicy  *IndexingPolicy        `json:"indexingPolicy,omitempty"`
	PartitionKey    *ContainerPartitionKey `json:"partitionKey,omitempty"`
	UniqueKeyPolicy *UniqueKeyPolicy       `json:"uniqueKeyPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &SqlContainerResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *SqlContainerResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &SqlContainerResourceARM{}

	// Set property ‘AnalyticalStorageTtl’:
	if resource.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *resource.AnalyticalStorageTtl
		result.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘ConflictResolutionPolicy’:
	if resource.ConflictResolutionPolicy != nil {
		conflictResolutionPolicyARM, err := (*resource.ConflictResolutionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		conflictResolutionPolicy := *conflictResolutionPolicyARM.(*ConflictResolutionPolicyARM)
		result.ConflictResolutionPolicy = &conflictResolutionPolicy
	}

	// Set property ‘DefaultTtl’:
	if resource.DefaultTtl != nil {
		defaultTtl := *resource.DefaultTtl
		result.DefaultTtl = &defaultTtl
	}

	// Set property ‘Id’:
	if resource.Id != nil {
		id := *resource.Id
		result.Id = &id
	}

	// Set property ‘IndexingPolicy’:
	if resource.IndexingPolicy != nil {
		indexingPolicyARM, err := (*resource.IndexingPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		indexingPolicy := *indexingPolicyARM.(*IndexingPolicyARM)
		result.IndexingPolicy = &indexingPolicy
	}

	// Set property ‘PartitionKey’:
	if resource.PartitionKey != nil {
		partitionKeyARM, err := (*resource.PartitionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		partitionKey := *partitionKeyARM.(*ContainerPartitionKeyARM)
		result.PartitionKey = &partitionKey
	}

	// Set property ‘UniqueKeyPolicy’:
	if resource.UniqueKeyPolicy != nil {
		uniqueKeyPolicyARM, err := (*resource.UniqueKeyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		uniqueKeyPolicy := *uniqueKeyPolicyARM.(*UniqueKeyPolicyARM)
		result.UniqueKeyPolicy = &uniqueKeyPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SqlContainerResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlContainerResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SqlContainerResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlContainerResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlContainerResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		resource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘ConflictResolutionPolicy’:
	if typedInput.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy1 ConflictResolutionPolicy
		err := conflictResolutionPolicy1.PopulateFromARM(owner, *typedInput.ConflictResolutionPolicy)
		if err != nil {
			return err
		}
		conflictResolutionPolicy := conflictResolutionPolicy1
		resource.ConflictResolutionPolicy = &conflictResolutionPolicy
	}

	// Set property ‘DefaultTtl’:
	if typedInput.DefaultTtl != nil {
		defaultTtl := *typedInput.DefaultTtl
		resource.DefaultTtl = &defaultTtl
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// Set property ‘IndexingPolicy’:
	if typedInput.IndexingPolicy != nil {
		var indexingPolicy1 IndexingPolicy
		err := indexingPolicy1.PopulateFromARM(owner, *typedInput.IndexingPolicy)
		if err != nil {
			return err
		}
		indexingPolicy := indexingPolicy1
		resource.IndexingPolicy = &indexingPolicy
	}

	// Set property ‘PartitionKey’:
	if typedInput.PartitionKey != nil {
		var partitionKey1 ContainerPartitionKey
		err := partitionKey1.PopulateFromARM(owner, *typedInput.PartitionKey)
		if err != nil {
			return err
		}
		partitionKey := partitionKey1
		resource.PartitionKey = &partitionKey
	}

	// Set property ‘UniqueKeyPolicy’:
	if typedInput.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy1 UniqueKeyPolicy
		err := uniqueKeyPolicy1.PopulateFromARM(owner, *typedInput.UniqueKeyPolicy)
		if err != nil {
			return err
		}
		uniqueKeyPolicy := uniqueKeyPolicy1
		resource.UniqueKeyPolicy = &uniqueKeyPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_SqlContainerResource populates our SqlContainerResource from the provided source SqlContainerResource
func (resource *SqlContainerResource) AssignProperties_From_SqlContainerResource(source *alpha20210515s.SqlContainerResource) error {

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy ConflictResolutionPolicy
		err := conflictResolutionPolicy.AssignProperties_From_ConflictResolutionPolicy(source.ConflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ConflictResolutionPolicy() to populate field ConflictResolutionPolicy")
		}
		resource.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		resource.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	resource.DefaultTtl = genruntime.ClonePointerToInt(source.DefaultTtl)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// IndexingPolicy
	if source.IndexingPolicy != nil {
		var indexingPolicy IndexingPolicy
		err := indexingPolicy.AssignProperties_From_IndexingPolicy(source.IndexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_IndexingPolicy() to populate field IndexingPolicy")
		}
		resource.IndexingPolicy = &indexingPolicy
	} else {
		resource.IndexingPolicy = nil
	}

	// PartitionKey
	if source.PartitionKey != nil {
		var partitionKey ContainerPartitionKey
		err := partitionKey.AssignProperties_From_ContainerPartitionKey(source.PartitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ContainerPartitionKey() to populate field PartitionKey")
		}
		resource.PartitionKey = &partitionKey
	} else {
		resource.PartitionKey = nil
	}

	// UniqueKeyPolicy
	if source.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy UniqueKeyPolicy
		err := uniqueKeyPolicy.AssignProperties_From_UniqueKeyPolicy(source.UniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UniqueKeyPolicy() to populate field UniqueKeyPolicy")
		}
		resource.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		resource.UniqueKeyPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SqlContainerResource populates the provided destination SqlContainerResource from our SqlContainerResource
func (resource *SqlContainerResource) AssignProperties_To_SqlContainerResource(destination *alpha20210515s.SqlContainerResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if resource.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy alpha20210515s.ConflictResolutionPolicy
		err := resource.ConflictResolutionPolicy.AssignProperties_To_ConflictResolutionPolicy(&conflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ConflictResolutionPolicy() to populate field ConflictResolutionPolicy")
		}
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	destination.DefaultTtl = genruntime.ClonePointerToInt(resource.DefaultTtl)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// IndexingPolicy
	if resource.IndexingPolicy != nil {
		var indexingPolicy alpha20210515s.IndexingPolicy
		err := resource.IndexingPolicy.AssignProperties_To_IndexingPolicy(&indexingPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_IndexingPolicy() to populate field IndexingPolicy")
		}
		destination.IndexingPolicy = &indexingPolicy
	} else {
		destination.IndexingPolicy = nil
	}

	// PartitionKey
	if resource.PartitionKey != nil {
		var partitionKey alpha20210515s.ContainerPartitionKey
		err := resource.PartitionKey.AssignProperties_To_ContainerPartitionKey(&partitionKey)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ContainerPartitionKey() to populate field PartitionKey")
		}
		destination.PartitionKey = &partitionKey
	} else {
		destination.PartitionKey = nil
	}

	// UniqueKeyPolicy
	if resource.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy alpha20210515s.UniqueKeyPolicy
		err := resource.UniqueKeyPolicy.AssignProperties_To_UniqueKeyPolicy(&uniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UniqueKeyPolicy() to populate field UniqueKeyPolicy")
		}
		destination.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		destination.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ConflictResolutionPolicy. Use v1beta20210515.ConflictResolutionPolicy instead
type ConflictResolutionPolicy struct {
	ConflictResolutionPath      *string                        `json:"conflictResolutionPath,omitempty"`
	ConflictResolutionProcedure *string                        `json:"conflictResolutionProcedure,omitempty"`
	Mode                        *ConflictResolutionPolicy_Mode `json:"mode,omitempty"`
}

var _ genruntime.ARMTransformer = &ConflictResolutionPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *ConflictResolutionPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &ConflictResolutionPolicyARM{}

	// Set property ‘ConflictResolutionPath’:
	if policy.ConflictResolutionPath != nil {
		conflictResolutionPath := *policy.ConflictResolutionPath
		result.ConflictResolutionPath = &conflictResolutionPath
	}

	// Set property ‘ConflictResolutionProcedure’:
	if policy.ConflictResolutionProcedure != nil {
		conflictResolutionProcedure := *policy.ConflictResolutionProcedure
		result.ConflictResolutionProcedure = &conflictResolutionProcedure
	}

	// Set property ‘Mode’:
	if policy.Mode != nil {
		mode := *policy.Mode
		result.Mode = &mode
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ConflictResolutionPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConflictResolutionPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ConflictResolutionPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConflictResolutionPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConflictResolutionPolicyARM, got %T", armInput)
	}

	// Set property ‘ConflictResolutionPath’:
	if typedInput.ConflictResolutionPath != nil {
		conflictResolutionPath := *typedInput.ConflictResolutionPath
		policy.ConflictResolutionPath = &conflictResolutionPath
	}

	// Set property ‘ConflictResolutionProcedure’:
	if typedInput.ConflictResolutionProcedure != nil {
		conflictResolutionProcedure := *typedInput.ConflictResolutionProcedure
		policy.ConflictResolutionProcedure = &conflictResolutionProcedure
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		policy.Mode = &mode
	}

	// No error
	return nil
}

// AssignProperties_From_ConflictResolutionPolicy populates our ConflictResolutionPolicy from the provided source ConflictResolutionPolicy
func (policy *ConflictResolutionPolicy) AssignProperties_From_ConflictResolutionPolicy(source *alpha20210515s.ConflictResolutionPolicy) error {

	// ConflictResolutionPath
	policy.ConflictResolutionPath = genruntime.ClonePointerToString(source.ConflictResolutionPath)

	// ConflictResolutionProcedure
	policy.ConflictResolutionProcedure = genruntime.ClonePointerToString(source.ConflictResolutionProcedure)

	// Mode
	if source.Mode != nil {
		mode := ConflictResolutionPolicy_Mode(*source.Mode)
		policy.Mode = &mode
	} else {
		policy.Mode = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ConflictResolutionPolicy populates the provided destination ConflictResolutionPolicy from our ConflictResolutionPolicy
func (policy *ConflictResolutionPolicy) AssignProperties_To_ConflictResolutionPolicy(destination *alpha20210515s.ConflictResolutionPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConflictResolutionPath
	destination.ConflictResolutionPath = genruntime.ClonePointerToString(policy.ConflictResolutionPath)

	// ConflictResolutionProcedure
	destination.ConflictResolutionProcedure = genruntime.ClonePointerToString(policy.ConflictResolutionProcedure)

	// Mode
	if policy.Mode != nil {
		mode := string(*policy.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ConflictResolutionPolicy_STATUS. Use v1beta20210515.ConflictResolutionPolicy_STATUS instead
type ConflictResolutionPolicy_STATUS struct {
	ConflictResolutionPath      *string                               `json:"conflictResolutionPath,omitempty"`
	ConflictResolutionProcedure *string                               `json:"conflictResolutionProcedure,omitempty"`
	Mode                        *ConflictResolutionPolicy_STATUS_Mode `json:"mode,omitempty"`
}

var _ genruntime.FromARMConverter = &ConflictResolutionPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ConflictResolutionPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConflictResolutionPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ConflictResolutionPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConflictResolutionPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConflictResolutionPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘ConflictResolutionPath’:
	if typedInput.ConflictResolutionPath != nil {
		conflictResolutionPath := *typedInput.ConflictResolutionPath
		policy.ConflictResolutionPath = &conflictResolutionPath
	}

	// Set property ‘ConflictResolutionProcedure’:
	if typedInput.ConflictResolutionProcedure != nil {
		conflictResolutionProcedure := *typedInput.ConflictResolutionProcedure
		policy.ConflictResolutionProcedure = &conflictResolutionProcedure
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		policy.Mode = &mode
	}

	// No error
	return nil
}

// AssignProperties_From_ConflictResolutionPolicy_STATUS populates our ConflictResolutionPolicy_STATUS from the provided source ConflictResolutionPolicy_STATUS
func (policy *ConflictResolutionPolicy_STATUS) AssignProperties_From_ConflictResolutionPolicy_STATUS(source *alpha20210515s.ConflictResolutionPolicy_STATUS) error {

	// ConflictResolutionPath
	policy.ConflictResolutionPath = genruntime.ClonePointerToString(source.ConflictResolutionPath)

	// ConflictResolutionProcedure
	policy.ConflictResolutionProcedure = genruntime.ClonePointerToString(source.ConflictResolutionProcedure)

	// Mode
	if source.Mode != nil {
		mode := ConflictResolutionPolicy_STATUS_Mode(*source.Mode)
		policy.Mode = &mode
	} else {
		policy.Mode = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ConflictResolutionPolicy_STATUS populates the provided destination ConflictResolutionPolicy_STATUS from our ConflictResolutionPolicy_STATUS
func (policy *ConflictResolutionPolicy_STATUS) AssignProperties_To_ConflictResolutionPolicy_STATUS(destination *alpha20210515s.ConflictResolutionPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConflictResolutionPath
	destination.ConflictResolutionPath = genruntime.ClonePointerToString(policy.ConflictResolutionPath)

	// ConflictResolutionProcedure
	destination.ConflictResolutionProcedure = genruntime.ClonePointerToString(policy.ConflictResolutionProcedure)

	// Mode
	if policy.Mode != nil {
		mode := string(*policy.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ContainerPartitionKey. Use v1beta20210515.ContainerPartitionKey instead
type ContainerPartitionKey struct {
	Kind  *ContainerPartitionKey_Kind `json:"kind,omitempty"`
	Paths []string                    `json:"paths,omitempty"`

	// +kubebuilder:validation:Maximum=2
	// +kubebuilder:validation:Minimum=1
	Version *int `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &ContainerPartitionKey{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (partitionKey *ContainerPartitionKey) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if partitionKey == nil {
		return nil, nil
	}
	result := &ContainerPartitionKeyARM{}

	// Set property ‘Kind’:
	if partitionKey.Kind != nil {
		kind := *partitionKey.Kind
		result.Kind = &kind
	}

	// Set property ‘Paths’:
	for _, item := range partitionKey.Paths {
		result.Paths = append(result.Paths, item)
	}

	// Set property ‘Version’:
	if partitionKey.Version != nil {
		version := *partitionKey.Version
		result.Version = &version
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (partitionKey *ContainerPartitionKey) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ContainerPartitionKeyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (partitionKey *ContainerPartitionKey) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ContainerPartitionKeyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ContainerPartitionKeyARM, got %T", armInput)
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		partitionKey.Kind = &kind
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		partitionKey.Paths = append(partitionKey.Paths, item)
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		partitionKey.Version = &version
	}

	// No error
	return nil
}

// AssignProperties_From_ContainerPartitionKey populates our ContainerPartitionKey from the provided source ContainerPartitionKey
func (partitionKey *ContainerPartitionKey) AssignProperties_From_ContainerPartitionKey(source *alpha20210515s.ContainerPartitionKey) error {

	// Kind
	if source.Kind != nil {
		kind := ContainerPartitionKey_Kind(*source.Kind)
		partitionKey.Kind = &kind
	} else {
		partitionKey.Kind = nil
	}

	// Paths
	partitionKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// Version
	if source.Version != nil {
		version := *source.Version
		partitionKey.Version = &version
	} else {
		partitionKey.Version = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ContainerPartitionKey populates the provided destination ContainerPartitionKey from our ContainerPartitionKey
func (partitionKey *ContainerPartitionKey) AssignProperties_To_ContainerPartitionKey(destination *alpha20210515s.ContainerPartitionKey) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Kind
	if partitionKey.Kind != nil {
		kind := string(*partitionKey.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(partitionKey.Paths)

	// Version
	if partitionKey.Version != nil {
		version := *partitionKey.Version
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ContainerPartitionKey_STATUS. Use v1beta20210515.ContainerPartitionKey_STATUS instead
type ContainerPartitionKey_STATUS struct {
	Kind      *ContainerPartitionKey_STATUS_Kind `json:"kind,omitempty"`
	Paths     []string                           `json:"paths,omitempty"`
	SystemKey *bool                              `json:"systemKey,omitempty"`
	Version   *int                               `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &ContainerPartitionKey_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (partitionKey *ContainerPartitionKey_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ContainerPartitionKey_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (partitionKey *ContainerPartitionKey_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ContainerPartitionKey_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ContainerPartitionKey_STATUSARM, got %T", armInput)
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		partitionKey.Kind = &kind
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		partitionKey.Paths = append(partitionKey.Paths, item)
	}

	// Set property ‘SystemKey’:
	if typedInput.SystemKey != nil {
		systemKey := *typedInput.SystemKey
		partitionKey.SystemKey = &systemKey
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		partitionKey.Version = &version
	}

	// No error
	return nil
}

// AssignProperties_From_ContainerPartitionKey_STATUS populates our ContainerPartitionKey_STATUS from the provided source ContainerPartitionKey_STATUS
func (partitionKey *ContainerPartitionKey_STATUS) AssignProperties_From_ContainerPartitionKey_STATUS(source *alpha20210515s.ContainerPartitionKey_STATUS) error {

	// Kind
	if source.Kind != nil {
		kind := ContainerPartitionKey_STATUS_Kind(*source.Kind)
		partitionKey.Kind = &kind
	} else {
		partitionKey.Kind = nil
	}

	// Paths
	partitionKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// SystemKey
	if source.SystemKey != nil {
		systemKey := *source.SystemKey
		partitionKey.SystemKey = &systemKey
	} else {
		partitionKey.SystemKey = nil
	}

	// Version
	partitionKey.Version = genruntime.ClonePointerToInt(source.Version)

	// No error
	return nil
}

// AssignProperties_To_ContainerPartitionKey_STATUS populates the provided destination ContainerPartitionKey_STATUS from our ContainerPartitionKey_STATUS
func (partitionKey *ContainerPartitionKey_STATUS) AssignProperties_To_ContainerPartitionKey_STATUS(destination *alpha20210515s.ContainerPartitionKey_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Kind
	if partitionKey.Kind != nil {
		kind := string(*partitionKey.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(partitionKey.Paths)

	// SystemKey
	if partitionKey.SystemKey != nil {
		systemKey := *partitionKey.SystemKey
		destination.SystemKey = &systemKey
	} else {
		destination.SystemKey = nil
	}

	// Version
	destination.Version = genruntime.ClonePointerToInt(partitionKey.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IndexingPolicy. Use v1beta20210515.IndexingPolicy instead
type IndexingPolicy struct {
	Automatic        *bool                        `json:"automatic,omitempty"`
	CompositeIndexes [][]CompositePath            `json:"compositeIndexes,omitempty"`
	ExcludedPaths    []ExcludedPath               `json:"excludedPaths,omitempty"`
	IncludedPaths    []IncludedPath               `json:"includedPaths,omitempty"`
	IndexingMode     *IndexingPolicy_IndexingMode `json:"indexingMode,omitempty"`
	SpatialIndexes   []SpatialSpec                `json:"spatialIndexes,omitempty"`
}

var _ genruntime.ARMTransformer = &IndexingPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *IndexingPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &IndexingPolicyARM{}

	// Set property ‘Automatic’:
	if policy.Automatic != nil {
		automatic := *policy.Automatic
		result.Automatic = &automatic
	}

	// Set property ‘CompositeIndexes’:
	for _, item := range policy.CompositeIndexes {
		var itemTemp []CompositePathARM
		for _, item1 := range item {
			item1ARM, err := item1.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			itemTemp = append(itemTemp, *item1ARM.(*CompositePathARM))
		}
		result.CompositeIndexes = append(result.CompositeIndexes, itemTemp)
	}

	// Set property ‘ExcludedPaths’:
	for _, item := range policy.ExcludedPaths {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ExcludedPaths = append(result.ExcludedPaths, *itemARM.(*ExcludedPathARM))
	}

	// Set property ‘IncludedPaths’:
	for _, item := range policy.IncludedPaths {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IncludedPaths = append(result.IncludedPaths, *itemARM.(*IncludedPathARM))
	}

	// Set property ‘IndexingMode’:
	if policy.IndexingMode != nil {
		indexingMode := *policy.IndexingMode
		result.IndexingMode = &indexingMode
	}

	// Set property ‘SpatialIndexes’:
	for _, item := range policy.SpatialIndexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.SpatialIndexes = append(result.SpatialIndexes, *itemARM.(*SpatialSpecARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IndexingPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IndexingPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IndexingPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IndexingPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IndexingPolicyARM, got %T", armInput)
	}

	// Set property ‘Automatic’:
	if typedInput.Automatic != nil {
		automatic := *typedInput.Automatic
		policy.Automatic = &automatic
	}

	// Set property ‘CompositeIndexes’:
	for _, item := range typedInput.CompositeIndexes {
		var itemTemp []CompositePath
		for _, item1 := range item {
			var item2 CompositePath
			err := item2.PopulateFromARM(owner, item1)
			if err != nil {
				return err
			}
			itemTemp = append(itemTemp, item2)
		}
		policy.CompositeIndexes = append(policy.CompositeIndexes, itemTemp)
	}

	// Set property ‘ExcludedPaths’:
	for _, item := range typedInput.ExcludedPaths {
		var item1 ExcludedPath
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.ExcludedPaths = append(policy.ExcludedPaths, item1)
	}

	// Set property ‘IncludedPaths’:
	for _, item := range typedInput.IncludedPaths {
		var item1 IncludedPath
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.IncludedPaths = append(policy.IncludedPaths, item1)
	}

	// Set property ‘IndexingMode’:
	if typedInput.IndexingMode != nil {
		indexingMode := *typedInput.IndexingMode
		policy.IndexingMode = &indexingMode
	}

	// Set property ‘SpatialIndexes’:
	for _, item := range typedInput.SpatialIndexes {
		var item1 SpatialSpec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.SpatialIndexes = append(policy.SpatialIndexes, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_IndexingPolicy populates our IndexingPolicy from the provided source IndexingPolicy
func (policy *IndexingPolicy) AssignProperties_From_IndexingPolicy(source *alpha20210515s.IndexingPolicy) error {

	// Automatic
	if source.Automatic != nil {
		automatic := *source.Automatic
		policy.Automatic = &automatic
	} else {
		policy.Automatic = nil
	}

	// CompositeIndexes
	if source.CompositeIndexes != nil {
		compositeIndexList := make([][]CompositePath, len(source.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range source.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]CompositePath, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal CompositePath
					err := compositeIndexLocal.AssignProperties_From_CompositePath(&compositeIndexItem1)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_From_CompositePath() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		policy.CompositeIndexes = compositeIndexList
	} else {
		policy.CompositeIndexes = nil
	}

	// ExcludedPaths
	if source.ExcludedPaths != nil {
		excludedPathList := make([]ExcludedPath, len(source.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range source.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath ExcludedPath
			err := excludedPath.AssignProperties_From_ExcludedPath(&excludedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ExcludedPath() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		policy.ExcludedPaths = excludedPathList
	} else {
		policy.ExcludedPaths = nil
	}

	// IncludedPaths
	if source.IncludedPaths != nil {
		includedPathList := make([]IncludedPath, len(source.IncludedPaths))
		for includedPathIndex, includedPathItem := range source.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath IncludedPath
			err := includedPath.AssignProperties_From_IncludedPath(&includedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_IncludedPath() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		policy.IncludedPaths = includedPathList
	} else {
		policy.IncludedPaths = nil
	}

	// IndexingMode
	if source.IndexingMode != nil {
		indexingMode := IndexingPolicy_IndexingMode(*source.IndexingMode)
		policy.IndexingMode = &indexingMode
	} else {
		policy.IndexingMode = nil
	}

	// SpatialIndexes
	if source.SpatialIndexes != nil {
		spatialIndexList := make([]SpatialSpec, len(source.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range source.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal SpatialSpec
			err := spatialIndexLocal.AssignProperties_From_SpatialSpec(&spatialIndexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SpatialSpec() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		policy.SpatialIndexes = spatialIndexList
	} else {
		policy.SpatialIndexes = nil
	}

	// No error
	return nil
}

// AssignProperties_To_IndexingPolicy populates the provided destination IndexingPolicy from our IndexingPolicy
func (policy *IndexingPolicy) AssignProperties_To_IndexingPolicy(destination *alpha20210515s.IndexingPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Automatic
	if policy.Automatic != nil {
		automatic := *policy.Automatic
		destination.Automatic = &automatic
	} else {
		destination.Automatic = nil
	}

	// CompositeIndexes
	if policy.CompositeIndexes != nil {
		compositeIndexList := make([][]alpha20210515s.CompositePath, len(policy.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range policy.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]alpha20210515s.CompositePath, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal alpha20210515s.CompositePath
					err := compositeIndexItem1.AssignProperties_To_CompositePath(&compositeIndexLocal)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_To_CompositePath() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		destination.CompositeIndexes = compositeIndexList
	} else {
		destination.CompositeIndexes = nil
	}

	// ExcludedPaths
	if policy.ExcludedPaths != nil {
		excludedPathList := make([]alpha20210515s.ExcludedPath, len(policy.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range policy.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath alpha20210515s.ExcludedPath
			err := excludedPathItem.AssignProperties_To_ExcludedPath(&excludedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ExcludedPath() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		destination.ExcludedPaths = excludedPathList
	} else {
		destination.ExcludedPaths = nil
	}

	// IncludedPaths
	if policy.IncludedPaths != nil {
		includedPathList := make([]alpha20210515s.IncludedPath, len(policy.IncludedPaths))
		for includedPathIndex, includedPathItem := range policy.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath alpha20210515s.IncludedPath
			err := includedPathItem.AssignProperties_To_IncludedPath(&includedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_IncludedPath() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		destination.IncludedPaths = includedPathList
	} else {
		destination.IncludedPaths = nil
	}

	// IndexingMode
	if policy.IndexingMode != nil {
		indexingMode := string(*policy.IndexingMode)
		destination.IndexingMode = &indexingMode
	} else {
		destination.IndexingMode = nil
	}

	// SpatialIndexes
	if policy.SpatialIndexes != nil {
		spatialIndexList := make([]alpha20210515s.SpatialSpec, len(policy.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range policy.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal alpha20210515s.SpatialSpec
			err := spatialIndexItem.AssignProperties_To_SpatialSpec(&spatialIndexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SpatialSpec() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		destination.SpatialIndexes = spatialIndexList
	} else {
		destination.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IndexingPolicy_STATUS. Use v1beta20210515.IndexingPolicy_STATUS instead
type IndexingPolicy_STATUS struct {
	Automatic        *bool                               `json:"automatic,omitempty"`
	CompositeIndexes [][]CompositePath_STATUS            `json:"compositeIndexes,omitempty"`
	ExcludedPaths    []ExcludedPath_STATUS               `json:"excludedPaths,omitempty"`
	IncludedPaths    []IncludedPath_STATUS               `json:"includedPaths,omitempty"`
	IndexingMode     *IndexingPolicy_STATUS_IndexingMode `json:"indexingMode,omitempty"`
	SpatialIndexes   []SpatialSpec_STATUS                `json:"spatialIndexes,omitempty"`
}

var _ genruntime.FromARMConverter = &IndexingPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *IndexingPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IndexingPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *IndexingPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IndexingPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IndexingPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘Automatic’:
	if typedInput.Automatic != nil {
		automatic := *typedInput.Automatic
		policy.Automatic = &automatic
	}

	// Set property ‘CompositeIndexes’:
	for _, item := range typedInput.CompositeIndexes {
		var itemTemp []CompositePath_STATUS
		for _, item1 := range item {
			var item2 CompositePath_STATUS
			err := item2.PopulateFromARM(owner, item1)
			if err != nil {
				return err
			}
			itemTemp = append(itemTemp, item2)
		}
		policy.CompositeIndexes = append(policy.CompositeIndexes, itemTemp)
	}

	// Set property ‘ExcludedPaths’:
	for _, item := range typedInput.ExcludedPaths {
		var item1 ExcludedPath_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.ExcludedPaths = append(policy.ExcludedPaths, item1)
	}

	// Set property ‘IncludedPaths’:
	for _, item := range typedInput.IncludedPaths {
		var item1 IncludedPath_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.IncludedPaths = append(policy.IncludedPaths, item1)
	}

	// Set property ‘IndexingMode’:
	if typedInput.IndexingMode != nil {
		indexingMode := *typedInput.IndexingMode
		policy.IndexingMode = &indexingMode
	}

	// Set property ‘SpatialIndexes’:
	for _, item := range typedInput.SpatialIndexes {
		var item1 SpatialSpec_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.SpatialIndexes = append(policy.SpatialIndexes, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_IndexingPolicy_STATUS populates our IndexingPolicy_STATUS from the provided source IndexingPolicy_STATUS
func (policy *IndexingPolicy_STATUS) AssignProperties_From_IndexingPolicy_STATUS(source *alpha20210515s.IndexingPolicy_STATUS) error {

	// Automatic
	if source.Automatic != nil {
		automatic := *source.Automatic
		policy.Automatic = &automatic
	} else {
		policy.Automatic = nil
	}

	// CompositeIndexes
	if source.CompositeIndexes != nil {
		compositeIndexList := make([][]CompositePath_STATUS, len(source.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range source.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]CompositePath_STATUS, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal CompositePath_STATUS
					err := compositeIndexLocal.AssignProperties_From_CompositePath_STATUS(&compositeIndexItem1)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_From_CompositePath_STATUS() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		policy.CompositeIndexes = compositeIndexList
	} else {
		policy.CompositeIndexes = nil
	}

	// ExcludedPaths
	if source.ExcludedPaths != nil {
		excludedPathList := make([]ExcludedPath_STATUS, len(source.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range source.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath ExcludedPath_STATUS
			err := excludedPath.AssignProperties_From_ExcludedPath_STATUS(&excludedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ExcludedPath_STATUS() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		policy.ExcludedPaths = excludedPathList
	} else {
		policy.ExcludedPaths = nil
	}

	// IncludedPaths
	if source.IncludedPaths != nil {
		includedPathList := make([]IncludedPath_STATUS, len(source.IncludedPaths))
		for includedPathIndex, includedPathItem := range source.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath IncludedPath_STATUS
			err := includedPath.AssignProperties_From_IncludedPath_STATUS(&includedPathItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_IncludedPath_STATUS() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		policy.IncludedPaths = includedPathList
	} else {
		policy.IncludedPaths = nil
	}

	// IndexingMode
	if source.IndexingMode != nil {
		indexingMode := IndexingPolicy_STATUS_IndexingMode(*source.IndexingMode)
		policy.IndexingMode = &indexingMode
	} else {
		policy.IndexingMode = nil
	}

	// SpatialIndexes
	if source.SpatialIndexes != nil {
		spatialIndexList := make([]SpatialSpec_STATUS, len(source.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range source.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal SpatialSpec_STATUS
			err := spatialIndexLocal.AssignProperties_From_SpatialSpec_STATUS(&spatialIndexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SpatialSpec_STATUS() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		policy.SpatialIndexes = spatialIndexList
	} else {
		policy.SpatialIndexes = nil
	}

	// No error
	return nil
}

// AssignProperties_To_IndexingPolicy_STATUS populates the provided destination IndexingPolicy_STATUS from our IndexingPolicy_STATUS
func (policy *IndexingPolicy_STATUS) AssignProperties_To_IndexingPolicy_STATUS(destination *alpha20210515s.IndexingPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Automatic
	if policy.Automatic != nil {
		automatic := *policy.Automatic
		destination.Automatic = &automatic
	} else {
		destination.Automatic = nil
	}

	// CompositeIndexes
	if policy.CompositeIndexes != nil {
		compositeIndexList := make([][]alpha20210515s.CompositePath_STATUS, len(policy.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range policy.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]alpha20210515s.CompositePath_STATUS, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal alpha20210515s.CompositePath_STATUS
					err := compositeIndexItem1.AssignProperties_To_CompositePath_STATUS(&compositeIndexLocal)
					if err != nil {
						return errors.Wrap(err, "calling AssignProperties_To_CompositePath_STATUS() to populate field CompositeIndexes")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		destination.CompositeIndexes = compositeIndexList
	} else {
		destination.CompositeIndexes = nil
	}

	// ExcludedPaths
	if policy.ExcludedPaths != nil {
		excludedPathList := make([]alpha20210515s.ExcludedPath_STATUS, len(policy.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range policy.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath alpha20210515s.ExcludedPath_STATUS
			err := excludedPathItem.AssignProperties_To_ExcludedPath_STATUS(&excludedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ExcludedPath_STATUS() to populate field ExcludedPaths")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		destination.ExcludedPaths = excludedPathList
	} else {
		destination.ExcludedPaths = nil
	}

	// IncludedPaths
	if policy.IncludedPaths != nil {
		includedPathList := make([]alpha20210515s.IncludedPath_STATUS, len(policy.IncludedPaths))
		for includedPathIndex, includedPathItem := range policy.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath alpha20210515s.IncludedPath_STATUS
			err := includedPathItem.AssignProperties_To_IncludedPath_STATUS(&includedPath)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_IncludedPath_STATUS() to populate field IncludedPaths")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		destination.IncludedPaths = includedPathList
	} else {
		destination.IncludedPaths = nil
	}

	// IndexingMode
	if policy.IndexingMode != nil {
		indexingMode := string(*policy.IndexingMode)
		destination.IndexingMode = &indexingMode
	} else {
		destination.IndexingMode = nil
	}

	// SpatialIndexes
	if policy.SpatialIndexes != nil {
		spatialIndexList := make([]alpha20210515s.SpatialSpec_STATUS, len(policy.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range policy.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal alpha20210515s.SpatialSpec_STATUS
			err := spatialIndexItem.AssignProperties_To_SpatialSpec_STATUS(&spatialIndexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SpatialSpec_STATUS() to populate field SpatialIndexes")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		destination.SpatialIndexes = spatialIndexList
	} else {
		destination.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UniqueKeyPolicy. Use v1beta20210515.UniqueKeyPolicy instead
type UniqueKeyPolicy struct {
	UniqueKeys []UniqueKey `json:"uniqueKeys,omitempty"`
}

var _ genruntime.ARMTransformer = &UniqueKeyPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *UniqueKeyPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &UniqueKeyPolicyARM{}

	// Set property ‘UniqueKeys’:
	for _, item := range policy.UniqueKeys {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.UniqueKeys = append(result.UniqueKeys, *itemARM.(*UniqueKeyARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *UniqueKeyPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKeyPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *UniqueKeyPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKeyPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKeyPolicyARM, got %T", armInput)
	}

	// Set property ‘UniqueKeys’:
	for _, item := range typedInput.UniqueKeys {
		var item1 UniqueKey
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.UniqueKeys = append(policy.UniqueKeys, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_UniqueKeyPolicy populates our UniqueKeyPolicy from the provided source UniqueKeyPolicy
func (policy *UniqueKeyPolicy) AssignProperties_From_UniqueKeyPolicy(source *alpha20210515s.UniqueKeyPolicy) error {

	// UniqueKeys
	if source.UniqueKeys != nil {
		uniqueKeyList := make([]UniqueKey, len(source.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range source.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey UniqueKey
			err := uniqueKey.AssignProperties_From_UniqueKey(&uniqueKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UniqueKey() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		policy.UniqueKeys = uniqueKeyList
	} else {
		policy.UniqueKeys = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UniqueKeyPolicy populates the provided destination UniqueKeyPolicy from our UniqueKeyPolicy
func (policy *UniqueKeyPolicy) AssignProperties_To_UniqueKeyPolicy(destination *alpha20210515s.UniqueKeyPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UniqueKeys
	if policy.UniqueKeys != nil {
		uniqueKeyList := make([]alpha20210515s.UniqueKey, len(policy.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range policy.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey alpha20210515s.UniqueKey
			err := uniqueKeyItem.AssignProperties_To_UniqueKey(&uniqueKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UniqueKey() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		destination.UniqueKeys = uniqueKeyList
	} else {
		destination.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UniqueKeyPolicy_STATUS. Use v1beta20210515.UniqueKeyPolicy_STATUS instead
type UniqueKeyPolicy_STATUS struct {
	UniqueKeys []UniqueKey_STATUS `json:"uniqueKeys,omitempty"`
}

var _ genruntime.FromARMConverter = &UniqueKeyPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *UniqueKeyPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKeyPolicy_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *UniqueKeyPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKeyPolicy_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKeyPolicy_STATUSARM, got %T", armInput)
	}

	// Set property ‘UniqueKeys’:
	for _, item := range typedInput.UniqueKeys {
		var item1 UniqueKey_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.UniqueKeys = append(policy.UniqueKeys, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_UniqueKeyPolicy_STATUS populates our UniqueKeyPolicy_STATUS from the provided source UniqueKeyPolicy_STATUS
func (policy *UniqueKeyPolicy_STATUS) AssignProperties_From_UniqueKeyPolicy_STATUS(source *alpha20210515s.UniqueKeyPolicy_STATUS) error {

	// UniqueKeys
	if source.UniqueKeys != nil {
		uniqueKeyList := make([]UniqueKey_STATUS, len(source.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range source.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey UniqueKey_STATUS
			err := uniqueKey.AssignProperties_From_UniqueKey_STATUS(&uniqueKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UniqueKey_STATUS() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		policy.UniqueKeys = uniqueKeyList
	} else {
		policy.UniqueKeys = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UniqueKeyPolicy_STATUS populates the provided destination UniqueKeyPolicy_STATUS from our UniqueKeyPolicy_STATUS
func (policy *UniqueKeyPolicy_STATUS) AssignProperties_To_UniqueKeyPolicy_STATUS(destination *alpha20210515s.UniqueKeyPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UniqueKeys
	if policy.UniqueKeys != nil {
		uniqueKeyList := make([]alpha20210515s.UniqueKey_STATUS, len(policy.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range policy.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey alpha20210515s.UniqueKey_STATUS
			err := uniqueKeyItem.AssignProperties_To_UniqueKey_STATUS(&uniqueKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UniqueKey_STATUS() to populate field UniqueKeys")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		destination.UniqueKeys = uniqueKeyList
	} else {
		destination.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CompositePath. Use v1beta20210515.CompositePath instead
type CompositePath struct {
	Order *CompositePath_Order `json:"order,omitempty"`
	Path  *string              `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &CompositePath{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (path *CompositePath) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if path == nil {
		return nil, nil
	}
	result := &CompositePathARM{}

	// Set property ‘Order’:
	if path.Order != nil {
		order := *path.Order
		result.Order = &order
	}

	// Set property ‘Path’:
	if path.Path != nil {
		path1 := *path.Path
		result.Path = &path1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (path *CompositePath) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CompositePathARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (path *CompositePath) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CompositePathARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CompositePathARM, got %T", armInput)
	}

	// Set property ‘Order’:
	if typedInput.Order != nil {
		order := *typedInput.Order
		path.Order = &order
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path1 := *typedInput.Path
		path.Path = &path1
	}

	// No error
	return nil
}

// AssignProperties_From_CompositePath populates our CompositePath from the provided source CompositePath
func (path *CompositePath) AssignProperties_From_CompositePath(source *alpha20210515s.CompositePath) error {

	// Order
	if source.Order != nil {
		order := CompositePath_Order(*source.Order)
		path.Order = &order
	} else {
		path.Order = nil
	}

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignProperties_To_CompositePath populates the provided destination CompositePath from our CompositePath
func (path *CompositePath) AssignProperties_To_CompositePath(destination *alpha20210515s.CompositePath) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Order
	if path.Order != nil {
		order := string(*path.Order)
		destination.Order = &order
	} else {
		destination.Order = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of CompositePath_STATUS. Use v1beta20210515.CompositePath_STATUS instead
type CompositePath_STATUS struct {
	Order *CompositePath_STATUS_Order `json:"order,omitempty"`
	Path  *string                     `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &CompositePath_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (path *CompositePath_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CompositePath_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (path *CompositePath_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CompositePath_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CompositePath_STATUSARM, got %T", armInput)
	}

	// Set property ‘Order’:
	if typedInput.Order != nil {
		order := *typedInput.Order
		path.Order = &order
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path1 := *typedInput.Path
		path.Path = &path1
	}

	// No error
	return nil
}

// AssignProperties_From_CompositePath_STATUS populates our CompositePath_STATUS from the provided source CompositePath_STATUS
func (path *CompositePath_STATUS) AssignProperties_From_CompositePath_STATUS(source *alpha20210515s.CompositePath_STATUS) error {

	// Order
	if source.Order != nil {
		order := CompositePath_STATUS_Order(*source.Order)
		path.Order = &order
	} else {
		path.Order = nil
	}

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignProperties_To_CompositePath_STATUS populates the provided destination CompositePath_STATUS from our CompositePath_STATUS
func (path *CompositePath_STATUS) AssignProperties_To_CompositePath_STATUS(destination *alpha20210515s.CompositePath_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Order
	if path.Order != nil {
		order := string(*path.Order)
		destination.Order = &order
	} else {
		destination.Order = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExcludedPath. Use v1beta20210515.ExcludedPath instead
type ExcludedPath struct {
	Path *string `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &ExcludedPath{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (path *ExcludedPath) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if path == nil {
		return nil, nil
	}
	result := &ExcludedPathARM{}

	// Set property ‘Path’:
	if path.Path != nil {
		path1 := *path.Path
		result.Path = &path1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (path *ExcludedPath) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExcludedPathARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (path *ExcludedPath) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExcludedPathARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExcludedPathARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path1 := *typedInput.Path
		path.Path = &path1
	}

	// No error
	return nil
}

// AssignProperties_From_ExcludedPath populates our ExcludedPath from the provided source ExcludedPath
func (path *ExcludedPath) AssignProperties_From_ExcludedPath(source *alpha20210515s.ExcludedPath) error {

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignProperties_To_ExcludedPath populates the provided destination ExcludedPath from our ExcludedPath
func (path *ExcludedPath) AssignProperties_To_ExcludedPath(destination *alpha20210515s.ExcludedPath) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExcludedPath_STATUS. Use v1beta20210515.ExcludedPath_STATUS instead
type ExcludedPath_STATUS struct {
	Path *string `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &ExcludedPath_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (path *ExcludedPath_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExcludedPath_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (path *ExcludedPath_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExcludedPath_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExcludedPath_STATUSARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path1 := *typedInput.Path
		path.Path = &path1
	}

	// No error
	return nil
}

// AssignProperties_From_ExcludedPath_STATUS populates our ExcludedPath_STATUS from the provided source ExcludedPath_STATUS
func (path *ExcludedPath_STATUS) AssignProperties_From_ExcludedPath_STATUS(source *alpha20210515s.ExcludedPath_STATUS) error {

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignProperties_To_ExcludedPath_STATUS populates the provided destination ExcludedPath_STATUS from our ExcludedPath_STATUS
func (path *ExcludedPath_STATUS) AssignProperties_To_ExcludedPath_STATUS(destination *alpha20210515s.ExcludedPath_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IncludedPath. Use v1beta20210515.IncludedPath instead
type IncludedPath struct {
	Indexes []Indexes `json:"indexes,omitempty"`
	Path    *string   `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &IncludedPath{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (path *IncludedPath) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if path == nil {
		return nil, nil
	}
	result := &IncludedPathARM{}

	// Set property ‘Indexes’:
	for _, item := range path.Indexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Indexes = append(result.Indexes, *itemARM.(*IndexesARM))
	}

	// Set property ‘Path’:
	if path.Path != nil {
		path1 := *path.Path
		result.Path = &path1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (path *IncludedPath) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IncludedPathARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (path *IncludedPath) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IncludedPathARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IncludedPathARM, got %T", armInput)
	}

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 Indexes
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		path.Indexes = append(path.Indexes, item1)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path1 := *typedInput.Path
		path.Path = &path1
	}

	// No error
	return nil
}

// AssignProperties_From_IncludedPath populates our IncludedPath from the provided source IncludedPath
func (path *IncludedPath) AssignProperties_From_IncludedPath(source *alpha20210515s.IncludedPath) error {

	// Indexes
	if source.Indexes != nil {
		indexList := make([]Indexes, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal Indexes
			err := indexLocal.AssignProperties_From_Indexes(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Indexes() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		path.Indexes = indexList
	} else {
		path.Indexes = nil
	}

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignProperties_To_IncludedPath populates the provided destination IncludedPath from our IncludedPath
func (path *IncludedPath) AssignProperties_To_IncludedPath(destination *alpha20210515s.IncludedPath) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Indexes
	if path.Indexes != nil {
		indexList := make([]alpha20210515s.Indexes, len(path.Indexes))
		for index, indexItem := range path.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal alpha20210515s.Indexes
			err := indexItem.AssignProperties_To_Indexes(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Indexes() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IncludedPath_STATUS. Use v1beta20210515.IncludedPath_STATUS instead
type IncludedPath_STATUS struct {
	Indexes []Indexes_STATUS `json:"indexes,omitempty"`
	Path    *string          `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &IncludedPath_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (path *IncludedPath_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IncludedPath_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (path *IncludedPath_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IncludedPath_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IncludedPath_STATUSARM, got %T", armInput)
	}

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 Indexes_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		path.Indexes = append(path.Indexes, item1)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path1 := *typedInput.Path
		path.Path = &path1
	}

	// No error
	return nil
}

// AssignProperties_From_IncludedPath_STATUS populates our IncludedPath_STATUS from the provided source IncludedPath_STATUS
func (path *IncludedPath_STATUS) AssignProperties_From_IncludedPath_STATUS(source *alpha20210515s.IncludedPath_STATUS) error {

	// Indexes
	if source.Indexes != nil {
		indexList := make([]Indexes_STATUS, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal Indexes_STATUS
			err := indexLocal.AssignProperties_From_Indexes_STATUS(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Indexes_STATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		path.Indexes = indexList
	} else {
		path.Indexes = nil
	}

	// Path
	path.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignProperties_To_IncludedPath_STATUS populates the provided destination IncludedPath_STATUS from our IncludedPath_STATUS
func (path *IncludedPath_STATUS) AssignProperties_To_IncludedPath_STATUS(destination *alpha20210515s.IncludedPath_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Indexes
	if path.Indexes != nil {
		indexList := make([]alpha20210515s.Indexes_STATUS, len(path.Indexes))
		for index, indexItem := range path.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal alpha20210515s.Indexes_STATUS
			err := indexItem.AssignProperties_To_Indexes_STATUS(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Indexes_STATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(path.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SpatialSpec. Use v1beta20210515.SpatialSpec instead
type SpatialSpec struct {
	Path  *string             `json:"path,omitempty"`
	Types []SpatialSpec_Types `json:"types,omitempty"`
}

var _ genruntime.ARMTransformer = &SpatialSpec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spatial *SpatialSpec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spatial == nil {
		return nil, nil
	}
	result := &SpatialSpecARM{}

	// Set property ‘Path’:
	if spatial.Path != nil {
		path := *spatial.Path
		result.Path = &path
	}

	// Set property ‘Types’:
	for _, item := range spatial.Types {
		result.Types = append(result.Types, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spatial *SpatialSpec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SpatialSpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spatial *SpatialSpec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SpatialSpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SpatialSpecARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		spatial.Path = &path
	}

	// Set property ‘Types’:
	for _, item := range typedInput.Types {
		spatial.Types = append(spatial.Types, item)
	}

	// No error
	return nil
}

// AssignProperties_From_SpatialSpec populates our SpatialSpec from the provided source SpatialSpec
func (spatial *SpatialSpec) AssignProperties_From_SpatialSpec(source *alpha20210515s.SpatialSpec) error {

	// Path
	spatial.Path = genruntime.ClonePointerToString(source.Path)

	// Types
	if source.Types != nil {
		typeList := make([]SpatialSpec_Types, len(source.Types))
		for typeIndex, typeItem := range source.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = SpatialSpec_Types(typeItem)
		}
		spatial.Types = typeList
	} else {
		spatial.Types = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SpatialSpec populates the provided destination SpatialSpec from our SpatialSpec
func (spatial *SpatialSpec) AssignProperties_To_SpatialSpec(destination *alpha20210515s.SpatialSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(spatial.Path)

	// Types
	if spatial.Types != nil {
		typeList := make([]string, len(spatial.Types))
		for typeIndex, typeItem := range spatial.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = string(typeItem)
		}
		destination.Types = typeList
	} else {
		destination.Types = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SpatialSpec_STATUS. Use v1beta20210515.SpatialSpec_STATUS instead
type SpatialSpec_STATUS struct {
	Path  *string              `json:"path,omitempty"`
	Types []SpatialType_STATUS `json:"types,omitempty"`
}

var _ genruntime.FromARMConverter = &SpatialSpec_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spatial *SpatialSpec_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SpatialSpec_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spatial *SpatialSpec_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SpatialSpec_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SpatialSpec_STATUSARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		spatial.Path = &path
	}

	// Set property ‘Types’:
	for _, item := range typedInput.Types {
		spatial.Types = append(spatial.Types, item)
	}

	// No error
	return nil
}

// AssignProperties_From_SpatialSpec_STATUS populates our SpatialSpec_STATUS from the provided source SpatialSpec_STATUS
func (spatial *SpatialSpec_STATUS) AssignProperties_From_SpatialSpec_STATUS(source *alpha20210515s.SpatialSpec_STATUS) error {

	// Path
	spatial.Path = genruntime.ClonePointerToString(source.Path)

	// Types
	if source.Types != nil {
		typeList := make([]SpatialType_STATUS, len(source.Types))
		for typeIndex, typeItem := range source.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = SpatialType_STATUS(typeItem)
		}
		spatial.Types = typeList
	} else {
		spatial.Types = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SpatialSpec_STATUS populates the provided destination SpatialSpec_STATUS from our SpatialSpec_STATUS
func (spatial *SpatialSpec_STATUS) AssignProperties_To_SpatialSpec_STATUS(destination *alpha20210515s.SpatialSpec_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(spatial.Path)

	// Types
	if spatial.Types != nil {
		typeList := make([]string, len(spatial.Types))
		for typeIndex, typeItem := range spatial.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = string(typeItem)
		}
		destination.Types = typeList
	} else {
		destination.Types = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UniqueKey. Use v1beta20210515.UniqueKey instead
type UniqueKey struct {
	Paths []string `json:"paths,omitempty"`
}

var _ genruntime.ARMTransformer = &UniqueKey{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (uniqueKey *UniqueKey) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if uniqueKey == nil {
		return nil, nil
	}
	result := &UniqueKeyARM{}

	// Set property ‘Paths’:
	for _, item := range uniqueKey.Paths {
		result.Paths = append(result.Paths, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (uniqueKey *UniqueKey) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKeyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (uniqueKey *UniqueKey) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKeyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKeyARM, got %T", armInput)
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		uniqueKey.Paths = append(uniqueKey.Paths, item)
	}

	// No error
	return nil
}

// AssignProperties_From_UniqueKey populates our UniqueKey from the provided source UniqueKey
func (uniqueKey *UniqueKey) AssignProperties_From_UniqueKey(source *alpha20210515s.UniqueKey) error {

	// Paths
	uniqueKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// No error
	return nil
}

// AssignProperties_To_UniqueKey populates the provided destination UniqueKey from our UniqueKey
func (uniqueKey *UniqueKey) AssignProperties_To_UniqueKey(destination *alpha20210515s.UniqueKey) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(uniqueKey.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UniqueKey_STATUS. Use v1beta20210515.UniqueKey_STATUS instead
type UniqueKey_STATUS struct {
	Paths []string `json:"paths,omitempty"`
}

var _ genruntime.FromARMConverter = &UniqueKey_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (uniqueKey *UniqueKey_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKey_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (uniqueKey *UniqueKey_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKey_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKey_STATUSARM, got %T", armInput)
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		uniqueKey.Paths = append(uniqueKey.Paths, item)
	}

	// No error
	return nil
}

// AssignProperties_From_UniqueKey_STATUS populates our UniqueKey_STATUS from the provided source UniqueKey_STATUS
func (uniqueKey *UniqueKey_STATUS) AssignProperties_From_UniqueKey_STATUS(source *alpha20210515s.UniqueKey_STATUS) error {

	// Paths
	uniqueKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// No error
	return nil
}

// AssignProperties_To_UniqueKey_STATUS populates the provided destination UniqueKey_STATUS from our UniqueKey_STATUS
func (uniqueKey *UniqueKey_STATUS) AssignProperties_To_UniqueKey_STATUS(destination *alpha20210515s.UniqueKey_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(uniqueKey.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Indexes. Use v1beta20210515.Indexes instead
type Indexes struct {
	DataType  *Indexes_DataType `json:"dataType,omitempty"`
	Kind      *Indexes_Kind     `json:"kind,omitempty"`
	Precision *int              `json:"precision,omitempty"`
}

var _ genruntime.ARMTransformer = &Indexes{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (indexes *Indexes) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if indexes == nil {
		return nil, nil
	}
	result := &IndexesARM{}

	// Set property ‘DataType’:
	if indexes.DataType != nil {
		dataType := *indexes.DataType
		result.DataType = &dataType
	}

	// Set property ‘Kind’:
	if indexes.Kind != nil {
		kind := *indexes.Kind
		result.Kind = &kind
	}

	// Set property ‘Precision’:
	if indexes.Precision != nil {
		precision := *indexes.Precision
		result.Precision = &precision
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (indexes *Indexes) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IndexesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (indexes *Indexes) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IndexesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IndexesARM, got %T", armInput)
	}

	// Set property ‘DataType’:
	if typedInput.DataType != nil {
		dataType := *typedInput.DataType
		indexes.DataType = &dataType
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		indexes.Kind = &kind
	}

	// Set property ‘Precision’:
	if typedInput.Precision != nil {
		precision := *typedInput.Precision
		indexes.Precision = &precision
	}

	// No error
	return nil
}

// AssignProperties_From_Indexes populates our Indexes from the provided source Indexes
func (indexes *Indexes) AssignProperties_From_Indexes(source *alpha20210515s.Indexes) error {

	// DataType
	if source.DataType != nil {
		dataType := Indexes_DataType(*source.DataType)
		indexes.DataType = &dataType
	} else {
		indexes.DataType = nil
	}

	// Kind
	if source.Kind != nil {
		kind := Indexes_Kind(*source.Kind)
		indexes.Kind = &kind
	} else {
		indexes.Kind = nil
	}

	// Precision
	indexes.Precision = genruntime.ClonePointerToInt(source.Precision)

	// No error
	return nil
}

// AssignProperties_To_Indexes populates the provided destination Indexes from our Indexes
func (indexes *Indexes) AssignProperties_To_Indexes(destination *alpha20210515s.Indexes) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataType
	if indexes.DataType != nil {
		dataType := string(*indexes.DataType)
		destination.DataType = &dataType
	} else {
		destination.DataType = nil
	}

	// Kind
	if indexes.Kind != nil {
		kind := string(*indexes.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Precision
	destination.Precision = genruntime.ClonePointerToInt(indexes.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Indexes_STATUS. Use v1beta20210515.Indexes_STATUS instead
type Indexes_STATUS struct {
	DataType  *Indexes_STATUS_DataType `json:"dataType,omitempty"`
	Kind      *Indexes_STATUS_Kind     `json:"kind,omitempty"`
	Precision *int                     `json:"precision,omitempty"`
}

var _ genruntime.FromARMConverter = &Indexes_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (indexes *Indexes_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Indexes_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (indexes *Indexes_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Indexes_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Indexes_STATUSARM, got %T", armInput)
	}

	// Set property ‘DataType’:
	if typedInput.DataType != nil {
		dataType := *typedInput.DataType
		indexes.DataType = &dataType
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		indexes.Kind = &kind
	}

	// Set property ‘Precision’:
	if typedInput.Precision != nil {
		precision := *typedInput.Precision
		indexes.Precision = &precision
	}

	// No error
	return nil
}

// AssignProperties_From_Indexes_STATUS populates our Indexes_STATUS from the provided source Indexes_STATUS
func (indexes *Indexes_STATUS) AssignProperties_From_Indexes_STATUS(source *alpha20210515s.Indexes_STATUS) error {

	// DataType
	if source.DataType != nil {
		dataType := Indexes_STATUS_DataType(*source.DataType)
		indexes.DataType = &dataType
	} else {
		indexes.DataType = nil
	}

	// Kind
	if source.Kind != nil {
		kind := Indexes_STATUS_Kind(*source.Kind)
		indexes.Kind = &kind
	} else {
		indexes.Kind = nil
	}

	// Precision
	indexes.Precision = genruntime.ClonePointerToInt(source.Precision)

	// No error
	return nil
}

// AssignProperties_To_Indexes_STATUS populates the provided destination Indexes_STATUS from our Indexes_STATUS
func (indexes *Indexes_STATUS) AssignProperties_To_Indexes_STATUS(destination *alpha20210515s.Indexes_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataType
	if indexes.DataType != nil {
		dataType := string(*indexes.DataType)
		destination.DataType = &dataType
	} else {
		destination.DataType = nil
	}

	// Kind
	if indexes.Kind != nil {
		kind := string(*indexes.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Precision
	destination.Precision = genruntime.ClonePointerToInt(indexes.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainer{}, &SqlDatabaseContainerList{})
}
