// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabase_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabase_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabase_StatusARM, SqlDatabase_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabase_StatusARM runs a test to see if a specific instance of SqlDatabase_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabase_StatusARM(subject SqlDatabase_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabase_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabase_StatusARM instances for property testing - lazily instantiated by
//SqlDatabase_StatusARMGenerator()
var sqlDatabase_statusARMGenerator gopter.Gen

// SqlDatabase_StatusARMGenerator returns a generator of SqlDatabase_StatusARM instances for property testing.
// We first initialize sqlDatabase_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabase_StatusARMGenerator() gopter.Gen {
	if sqlDatabase_statusARMGenerator != nil {
		return sqlDatabase_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabase_StatusARM(generators)
	sqlDatabase_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabase_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabase_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabase_StatusARM(generators)
	sqlDatabase_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabase_StatusARM{}), generators)

	return sqlDatabase_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabase_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabase_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabase_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabase_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseProperties_StatusARMGenerator())
}

func Test_SqlDatabaseProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseProperties_StatusARM, SqlDatabaseProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseProperties_StatusARM runs a test to see if a specific instance of SqlDatabaseProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseProperties_StatusARM(subject SqlDatabaseProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseProperties_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseProperties_StatusARMGenerator()
var sqlDatabaseProperties_statusARMGenerator gopter.Gen

// SqlDatabaseProperties_StatusARMGenerator returns a generator of SqlDatabaseProperties_StatusARM instances for property testing.
func SqlDatabaseProperties_StatusARMGenerator() gopter.Gen {
	if sqlDatabaseProperties_statusARMGenerator != nil {
		return sqlDatabaseProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseProperties_StatusARM(generators)
	sqlDatabaseProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseProperties_StatusARM{}), generators)

	return sqlDatabaseProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = SqlDatabaseResource_StatusARMGenerator()
}

func Test_SqlDatabaseResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_StatusARM, SqlDatabaseResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_StatusARM runs a test to see if a specific instance of SqlDatabaseResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_StatusARM(subject SqlDatabaseResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseResource_StatusARMGenerator()
var sqlDatabaseResource_statusARMGenerator gopter.Gen

// SqlDatabaseResource_StatusARMGenerator returns a generator of SqlDatabaseResource_StatusARM instances for property testing.
func SqlDatabaseResource_StatusARMGenerator() gopter.Gen {
	if sqlDatabaseResource_statusARMGenerator != nil {
		return sqlDatabaseResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_StatusARM(generators)
	sqlDatabaseResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_StatusARM{}), generators)

	return sqlDatabaseResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
