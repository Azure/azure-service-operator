// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabaseCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_StatusARM, SqlDatabaseCreateUpdateParameters_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_StatusARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateParameters_StatusARM(subject SqlDatabaseCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateParameters_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseCreateUpdateParameters_StatusARMGenerator()
var sqlDatabaseCreateUpdateParameters_statusARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateParameters_StatusARMGenerator returns a generator of SqlDatabaseCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize sqlDatabaseCreateUpdateParameters_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseCreateUpdateParameters_StatusARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateParameters_statusARMGenerator != nil {
		return sqlDatabaseCreateUpdateParameters_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM(generators)
	sqlDatabaseCreateUpdateParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM(generators)
	sqlDatabaseCreateUpdateParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_StatusARM{}), generators)

	return sqlDatabaseCreateUpdateParameters_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseCreateUpdateProperties_StatusARMGenerator())
}

func Test_SqlDatabaseCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_StatusARM, SqlDatabaseCreateUpdateProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_StatusARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_StatusARM(subject SqlDatabaseCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateProperties_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseCreateUpdateProperties_StatusARMGenerator()
var sqlDatabaseCreateUpdateProperties_statusARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateProperties_StatusARMGenerator returns a generator of SqlDatabaseCreateUpdateProperties_StatusARM instances for property testing.
func SqlDatabaseCreateUpdateProperties_StatusARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateProperties_statusARMGenerator != nil {
		return sqlDatabaseCreateUpdateProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_StatusARM(generators)
	sqlDatabaseCreateUpdateProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateProperties_StatusARM{}), generators)

	return sqlDatabaseCreateUpdateProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = SqlDatabaseResource_StatusARMGenerator()
}

func Test_SqlDatabaseResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_StatusARM, SqlDatabaseResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_StatusARM runs a test to see if a specific instance of SqlDatabaseResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_StatusARM(subject SqlDatabaseResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseResource_StatusARMGenerator()
var sqlDatabaseResource_statusARMGenerator gopter.Gen

// SqlDatabaseResource_StatusARMGenerator returns a generator of SqlDatabaseResource_StatusARM instances for property testing.
func SqlDatabaseResource_StatusARMGenerator() gopter.Gen {
	if sqlDatabaseResource_statusARMGenerator != nil {
		return sqlDatabaseResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_StatusARM(generators)
	sqlDatabaseResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_StatusARM{}), generators)

	return sqlDatabaseResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
