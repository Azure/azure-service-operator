// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabaseCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateParametersStatusARM, SqlDatabaseCreateUpdateParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateParametersStatusARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateParametersStatusARM(subject SqlDatabaseCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateParameters_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseCreateUpdateParametersStatusARMGenerator()
var sqlDatabaseCreateUpdateParametersStatusARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateParametersStatusARMGenerator returns a generator of SqlDatabaseCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize sqlDatabaseCreateUpdateParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseCreateUpdateParametersStatusARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateParametersStatusARMGenerator != nil {
		return sqlDatabaseCreateUpdateParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM(generators)
	sqlDatabaseCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM(generators)
	sqlDatabaseCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateParameters_StatusARM{}), generators)

	return sqlDatabaseCreateUpdateParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseCreateUpdatePropertiesStatusARMGenerator())
}

func Test_SqlDatabaseCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdatePropertiesStatusARM, SqlDatabaseCreateUpdatePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdatePropertiesStatusARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdatePropertiesStatusARM(subject SqlDatabaseCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateProperties_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseCreateUpdatePropertiesStatusARMGenerator()
var sqlDatabaseCreateUpdatePropertiesStatusARMGenerator gopter.Gen

// SqlDatabaseCreateUpdatePropertiesStatusARMGenerator returns a generator of SqlDatabaseCreateUpdateProperties_StatusARM instances for property testing.
func SqlDatabaseCreateUpdatePropertiesStatusARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdatePropertiesStatusARMGenerator != nil {
		return sqlDatabaseCreateUpdatePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdatePropertiesStatusARM(generators)
	sqlDatabaseCreateUpdatePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateProperties_StatusARM{}), generators)

	return sqlDatabaseCreateUpdatePropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdatePropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdatePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsStatusARMGenerator())
	gens["Resource"] = SqlDatabaseResourceStatusARMGenerator()
}

func Test_SqlDatabaseResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResourceStatusARM, SqlDatabaseResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResourceStatusARM runs a test to see if a specific instance of SqlDatabaseResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResourceStatusARM(subject SqlDatabaseResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseResourceStatusARMGenerator()
var sqlDatabaseResourceStatusARMGenerator gopter.Gen

// SqlDatabaseResourceStatusARMGenerator returns a generator of SqlDatabaseResource_StatusARM instances for property testing.
func SqlDatabaseResourceStatusARMGenerator() gopter.Gen {
	if sqlDatabaseResourceStatusARMGenerator != nil {
		return sqlDatabaseResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResourceStatusARM(generators)
	sqlDatabaseResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_StatusARM{}), generators)

	return sqlDatabaseResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
