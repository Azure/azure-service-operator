// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM, DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM(subject DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM instances for property testing - lazily
//instantiated by DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARMGenerator()
var databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator != nil {
		return databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM(generators)
	databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM(generators)
	databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM{}), generators)

	return databaseAccountsSqlDatabasesContainersStoredProcedures_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersStoredProcedures_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = SqlStoredProcedureProperties_SpecARMGenerator()
}

func Test_SqlStoredProcedureProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureProperties_SpecARM, SqlStoredProcedureProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureProperties_SpecARM runs a test to see if a specific instance of SqlStoredProcedureProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureProperties_SpecARM(subject SqlStoredProcedureProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureProperties_SpecARM instances for property testing - lazily instantiated by
//SqlStoredProcedureProperties_SpecARMGenerator()
var sqlStoredProcedureProperties_specARMGenerator gopter.Gen

// SqlStoredProcedureProperties_SpecARMGenerator returns a generator of SqlStoredProcedureProperties_SpecARM instances for property testing.
func SqlStoredProcedureProperties_SpecARMGenerator() gopter.Gen {
	if sqlStoredProcedureProperties_specARMGenerator != nil {
		return sqlStoredProcedureProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureProperties_SpecARM(generators)
	sqlStoredProcedureProperties_specARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureProperties_SpecARM{}), generators)

	return sqlStoredProcedureProperties_specARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecARMGenerator())
	gens["Resource"] = SqlStoredProcedureResource_SpecARMGenerator()
}

func Test_SqlStoredProcedureResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureResource_SpecARM, SqlStoredProcedureResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureResource_SpecARM runs a test to see if a specific instance of SqlStoredProcedureResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureResource_SpecARM(subject SqlStoredProcedureResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureResource_SpecARM instances for property testing - lazily instantiated by
//SqlStoredProcedureResource_SpecARMGenerator()
var sqlStoredProcedureResource_specARMGenerator gopter.Gen

// SqlStoredProcedureResource_SpecARMGenerator returns a generator of SqlStoredProcedureResource_SpecARM instances for property testing.
func SqlStoredProcedureResource_SpecARMGenerator() gopter.Gen {
	if sqlStoredProcedureResource_specARMGenerator != nil {
		return sqlStoredProcedureResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_SpecARM(generators)
	sqlStoredProcedureResource_specARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureResource_SpecARM{}), generators)

	return sqlStoredProcedureResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
