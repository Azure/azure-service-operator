// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBCollectionGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetResults_STATUSARM, MongoDBCollectionGetResults_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetResults_STATUSARM runs a test to see if a specific instance of MongoDBCollectionGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetResults_STATUSARM(subject MongoDBCollectionGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetResults_STATUSARM instances for property testing - lazily instantiated by
// MongoDBCollectionGetResults_STATUSARMGenerator()
var mongoDBCollectionGetResults_STATUSARMGenerator gopter.Gen

// MongoDBCollectionGetResults_STATUSARMGenerator returns a generator of MongoDBCollectionGetResults_STATUSARM instances for property testing.
// We first initialize mongoDBCollectionGetResults_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetResults_STATUSARMGenerator() gopter.Gen {
	if mongoDBCollectionGetResults_STATUSARMGenerator != nil {
		return mongoDBCollectionGetResults_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM(generators)
	mongoDBCollectionGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM(generators)
	mongoDBCollectionGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetResults_STATUSARM{}), generators)

	return mongoDBCollectionGetResults_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBCollectionGetProperties_STATUSARMGenerator())
}

func Test_MongoDBCollectionGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUSARM, MongoDBCollectionGetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUSARM runs a test to see if a specific instance of MongoDBCollectionGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUSARM(subject MongoDBCollectionGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetProperties_STATUSARM instances for property testing - lazily instantiated by
// MongoDBCollectionGetProperties_STATUSARMGenerator()
var mongoDBCollectionGetProperties_STATUSARMGenerator gopter.Gen

// MongoDBCollectionGetProperties_STATUSARMGenerator returns a generator of MongoDBCollectionGetProperties_STATUSARM instances for property testing.
func MongoDBCollectionGetProperties_STATUSARMGenerator() gopter.Gen {
	if mongoDBCollectionGetProperties_STATUSARMGenerator != nil {
		return mongoDBCollectionGetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUSARM(generators)
	mongoDBCollectionGetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_STATUSARM{}), generators)

	return mongoDBCollectionGetProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResource_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionGetProperties_STATUS_ResourceARMGenerator())
}

func Test_MongoDBCollectionGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUS_ResourceARM, MongoDBCollectionGetProperties_STATUS_ResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUS_ResourceARM runs a test to see if a specific instance of MongoDBCollectionGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUS_ResourceARM(subject MongoDBCollectionGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetProperties_STATUS_ResourceARM instances for property testing - lazily instantiated
// by MongoDBCollectionGetProperties_STATUS_ResourceARMGenerator()
var mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator gopter.Gen

// MongoDBCollectionGetProperties_STATUS_ResourceARMGenerator returns a generator of MongoDBCollectionGetProperties_STATUS_ResourceARM instances for property testing.
// We first initialize mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetProperties_STATUS_ResourceARMGenerator() gopter.Gen {
	if mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator != nil {
		return mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM(generators)
	mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_STATUS_ResourceARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM(generators)
	mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_STATUS_ResourceARM{}), generators)

	return mongoDBCollectionGetProperties_STATUS_ResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_STATUSARMGenerator())
}

func Test_OptionsResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OptionsResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOptionsResource_STATUSARM, OptionsResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOptionsResource_STATUSARM runs a test to see if a specific instance of OptionsResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOptionsResource_STATUSARM(subject OptionsResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OptionsResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OptionsResource_STATUSARM instances for property testing - lazily instantiated by
// OptionsResource_STATUSARMGenerator()
var optionsResource_STATUSARMGenerator gopter.Gen

// OptionsResource_STATUSARMGenerator returns a generator of OptionsResource_STATUSARM instances for property testing.
// We first initialize optionsResource_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OptionsResource_STATUSARMGenerator() gopter.Gen {
	if optionsResource_STATUSARMGenerator != nil {
		return optionsResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptionsResource_STATUSARM(generators)
	optionsResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(OptionsResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptionsResource_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForOptionsResource_STATUSARM(generators)
	optionsResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(OptionsResource_STATUSARM{}), generators)

	return optionsResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForOptionsResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOptionsResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForOptionsResource_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOptionsResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_STATUSARMGenerator())
}

func Test_AutoscaleSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_STATUSARM, AutoscaleSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_STATUSARM runs a test to see if a specific instance of AutoscaleSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_STATUSARM(subject AutoscaleSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_STATUSARM instances for property testing - lazily instantiated by
// AutoscaleSettings_STATUSARMGenerator()
var autoscaleSettings_STATUSARMGenerator gopter.Gen

// AutoscaleSettings_STATUSARMGenerator returns a generator of AutoscaleSettings_STATUSARM instances for property testing.
func AutoscaleSettings_STATUSARMGenerator() gopter.Gen {
	if autoscaleSettings_STATUSARMGenerator != nil {
		return autoscaleSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUSARM(generators)
	autoscaleSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_STATUSARM{}), generators)

	return autoscaleSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_STATUSARM, MongoIndex_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_STATUSARM runs a test to see if a specific instance of MongoIndex_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_STATUSARM(subject MongoIndex_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_STATUSARM instances for property testing - lazily instantiated by
// MongoIndex_STATUSARMGenerator()
var mongoIndex_STATUSARMGenerator gopter.Gen

// MongoIndex_STATUSARMGenerator returns a generator of MongoIndex_STATUSARM instances for property testing.
func MongoIndex_STATUSARMGenerator() gopter.Gen {
	if mongoIndex_STATUSARMGenerator != nil {
		return mongoIndex_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_STATUSARM(generators)
	mongoIndex_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_STATUSARM{}), generators)

	return mongoIndex_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_STATUSARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_STATUSARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_STATUSARMGenerator())
}

func Test_MongoIndexKeys_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_STATUSARM, MongoIndexKeys_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_STATUSARM runs a test to see if a specific instance of MongoIndexKeys_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_STATUSARM(subject MongoIndexKeys_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_STATUSARM instances for property testing - lazily instantiated by
// MongoIndexKeys_STATUSARMGenerator()
var mongoIndexKeys_STATUSARMGenerator gopter.Gen

// MongoIndexKeys_STATUSARMGenerator returns a generator of MongoIndexKeys_STATUSARM instances for property testing.
func MongoIndexKeys_STATUSARMGenerator() gopter.Gen {
	if mongoIndexKeys_STATUSARMGenerator != nil {
		return mongoIndexKeys_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUSARM(generators)
	mongoIndexKeys_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_STATUSARM{}), generators)

	return mongoIndexKeys_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUSARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_STATUSARM, MongoIndexOptions_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_STATUSARM runs a test to see if a specific instance of MongoIndexOptions_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_STATUSARM(subject MongoIndexOptions_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_STATUSARM instances for property testing - lazily instantiated by
// MongoIndexOptions_STATUSARMGenerator()
var mongoIndexOptions_STATUSARMGenerator gopter.Gen

// MongoIndexOptions_STATUSARMGenerator returns a generator of MongoIndexOptions_STATUSARM instances for property testing.
func MongoIndexOptions_STATUSARMGenerator() gopter.Gen {
	if mongoIndexOptions_STATUSARMGenerator != nil {
		return mongoIndexOptions_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUSARM(generators)
	mongoIndexOptions_STATUSARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_STATUSARM{}), generators)

	return mongoIndexOptions_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
