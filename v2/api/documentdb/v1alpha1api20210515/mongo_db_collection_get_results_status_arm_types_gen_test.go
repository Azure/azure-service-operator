// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBCollectionGetResults_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetResults_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetResults_STATUS_ARM, MongoDBCollectionGetResults_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetResults_STATUS_ARM runs a test to see if a specific instance of MongoDBCollectionGetResults_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetResults_STATUS_ARM(subject MongoDBCollectionGetResults_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetResults_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetResults_STATUS_ARM instances for property testing - lazily instantiated by
// MongoDBCollectionGetResults_STATUS_ARMGenerator()
var mongoDBCollectionGetResults_STATUS_ARMGenerator gopter.Gen

// MongoDBCollectionGetResults_STATUS_ARMGenerator returns a generator of MongoDBCollectionGetResults_STATUS_ARM instances for property testing.
// We first initialize mongoDBCollectionGetResults_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetResults_STATUS_ARMGenerator() gopter.Gen {
	if mongoDBCollectionGetResults_STATUS_ARMGenerator != nil {
		return mongoDBCollectionGetResults_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM(generators)
	mongoDBCollectionGetResults_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetResults_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM(generators)
	mongoDBCollectionGetResults_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetResults_STATUS_ARM{}), generators)

	return mongoDBCollectionGetResults_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetResults_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBCollectionGetProperties_STATUS_ARMGenerator())
}

func Test_MongoDBCollectionGetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUS_ARM, MongoDBCollectionGetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUS_ARM runs a test to see if a specific instance of MongoDBCollectionGetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetProperties_STATUS_ARM(subject MongoDBCollectionGetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// MongoDBCollectionGetProperties_STATUS_ARMGenerator()
var mongoDBCollectionGetProperties_STATUS_ARMGenerator gopter.Gen

// MongoDBCollectionGetProperties_STATUS_ARMGenerator returns a generator of MongoDBCollectionGetProperties_STATUS_ARM instances for property testing.
func MongoDBCollectionGetProperties_STATUS_ARMGenerator() gopter.Gen {
	if mongoDBCollectionGetProperties_STATUS_ARMGenerator != nil {
		return mongoDBCollectionGetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ARM(generators)
	mongoDBCollectionGetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_STATUS_ARM{}), generators)

	return mongoDBCollectionGetProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResource_STATUS_ARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator())
}

func Test_MongoDBCollectionGetProperties_Resource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionGetProperties_Resource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionGetProperties_Resource_STATUS_ARM, MongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionGetProperties_Resource_STATUS_ARM runs a test to see if a specific instance of MongoDBCollectionGetProperties_Resource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionGetProperties_Resource_STATUS_ARM(subject MongoDBCollectionGetProperties_Resource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionGetProperties_Resource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionGetProperties_Resource_STATUS_ARM instances for property testing - lazily instantiated
// by MongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator()
var mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator gopter.Gen

// MongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator returns a generator of MongoDBCollectionGetProperties_Resource_STATUS_ARM instances for property testing.
// We first initialize mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator() gopter.Gen {
	if mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator != nil {
		return mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM(generators)
	mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_Resource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM(generators)
	mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionGetProperties_Resource_STATUS_ARM{}), generators)

	return mongoDBCollectionGetProperties_Resource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_STATUS_ARMGenerator())
}

func Test_OptionsResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OptionsResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOptionsResource_STATUS_ARM, OptionsResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOptionsResource_STATUS_ARM runs a test to see if a specific instance of OptionsResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOptionsResource_STATUS_ARM(subject OptionsResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OptionsResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OptionsResource_STATUS_ARM instances for property testing - lazily instantiated by
// OptionsResource_STATUS_ARMGenerator()
var optionsResource_STATUS_ARMGenerator gopter.Gen

// OptionsResource_STATUS_ARMGenerator returns a generator of OptionsResource_STATUS_ARM instances for property testing.
// We first initialize optionsResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OptionsResource_STATUS_ARMGenerator() gopter.Gen {
	if optionsResource_STATUS_ARMGenerator != nil {
		return optionsResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM(generators)
	optionsResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OptionsResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOptionsResource_STATUS_ARM(generators)
	optionsResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OptionsResource_STATUS_ARM{}), generators)

	return optionsResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForOptionsResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOptionsResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_STATUS_ARMGenerator())
}

func Test_AutoscaleSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_STATUS_ARM, AutoscaleSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_STATUS_ARM runs a test to see if a specific instance of AutoscaleSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_STATUS_ARM(subject AutoscaleSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_STATUS_ARM instances for property testing - lazily instantiated by
// AutoscaleSettings_STATUS_ARMGenerator()
var autoscaleSettings_STATUS_ARMGenerator gopter.Gen

// AutoscaleSettings_STATUS_ARMGenerator returns a generator of AutoscaleSettings_STATUS_ARM instances for property testing.
func AutoscaleSettings_STATUS_ARMGenerator() gopter.Gen {
	if autoscaleSettings_STATUS_ARMGenerator != nil {
		return autoscaleSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUS_ARM(generators)
	autoscaleSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_STATUS_ARM{}), generators)

	return autoscaleSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_STATUS_ARM, MongoIndex_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_STATUS_ARM runs a test to see if a specific instance of MongoIndex_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_STATUS_ARM(subject MongoIndex_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_STATUS_ARM instances for property testing - lazily instantiated by
// MongoIndex_STATUS_ARMGenerator()
var mongoIndex_STATUS_ARMGenerator gopter.Gen

// MongoIndex_STATUS_ARMGenerator returns a generator of MongoIndex_STATUS_ARM instances for property testing.
func MongoIndex_STATUS_ARMGenerator() gopter.Gen {
	if mongoIndex_STATUS_ARMGenerator != nil {
		return mongoIndex_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_STATUS_ARM(generators)
	mongoIndex_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_STATUS_ARM{}), generators)

	return mongoIndex_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_STATUS_ARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_STATUS_ARMGenerator())
}

func Test_MongoIndexKeys_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_STATUS_ARM, MongoIndexKeys_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_STATUS_ARM runs a test to see if a specific instance of MongoIndexKeys_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_STATUS_ARM(subject MongoIndexKeys_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_STATUS_ARM instances for property testing - lazily instantiated by
// MongoIndexKeys_STATUS_ARMGenerator()
var mongoIndexKeys_STATUS_ARMGenerator gopter.Gen

// MongoIndexKeys_STATUS_ARMGenerator returns a generator of MongoIndexKeys_STATUS_ARM instances for property testing.
func MongoIndexKeys_STATUS_ARMGenerator() gopter.Gen {
	if mongoIndexKeys_STATUS_ARMGenerator != nil {
		return mongoIndexKeys_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUS_ARM(generators)
	mongoIndexKeys_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_STATUS_ARM{}), generators)

	return mongoIndexKeys_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_STATUS_ARM, MongoIndexOptions_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_STATUS_ARM runs a test to see if a specific instance of MongoIndexOptions_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_STATUS_ARM(subject MongoIndexOptions_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_STATUS_ARM instances for property testing - lazily instantiated by
// MongoIndexOptions_STATUS_ARMGenerator()
var mongoIndexOptions_STATUS_ARMGenerator gopter.Gen

// MongoIndexOptions_STATUS_ARMGenerator returns a generator of MongoIndexOptions_STATUS_ARM instances for property testing.
func MongoIndexOptions_STATUS_ARMGenerator() gopter.Gen {
	if mongoIndexOptions_STATUS_ARMGenerator != nil {
		return mongoIndexOptions_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUS_ARM(generators)
	mongoIndexOptions_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_STATUS_ARM{}), generators)

	return mongoIndexOptions_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
