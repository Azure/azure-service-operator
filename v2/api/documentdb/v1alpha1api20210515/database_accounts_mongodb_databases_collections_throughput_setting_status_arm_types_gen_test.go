// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM, DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM runs a test to see if a specific instance of DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM(subject DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM instances for property
// testing - lazily instantiated by DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator()
var databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator gopter.Gen

// DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator returns a generator of DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM instances for property testing.
// We first initialize databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator() gopter.Gen {
	if databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator != nil {
		return databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM(generators)
	databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM(generators)
	databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM{}), generators)

	return databaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ThroughputSettingsGetProperties_STATUS_ARMGenerator())
}

func Test_ThroughputSettingsGetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsGetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsGetProperties_STATUS_ARM, ThroughputSettingsGetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsGetProperties_STATUS_ARM runs a test to see if a specific instance of ThroughputSettingsGetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsGetProperties_STATUS_ARM(subject ThroughputSettingsGetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsGetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsGetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ThroughputSettingsGetProperties_STATUS_ARMGenerator()
var throughputSettingsGetProperties_STATUS_ARMGenerator gopter.Gen

// ThroughputSettingsGetProperties_STATUS_ARMGenerator returns a generator of ThroughputSettingsGetProperties_STATUS_ARM instances for property testing.
func ThroughputSettingsGetProperties_STATUS_ARMGenerator() gopter.Gen {
	if throughputSettingsGetProperties_STATUS_ARMGenerator != nil {
		return throughputSettingsGetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForThroughputSettingsGetProperties_STATUS_ARM(generators)
	throughputSettingsGetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetProperties_STATUS_ARM{}), generators)

	return throughputSettingsGetProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForThroughputSettingsGetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsGetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(ThroughputSettingsGetProperties_Resource_STATUS_ARMGenerator())
}

func Test_ThroughputSettingsGetProperties_Resource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsGetProperties_Resource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsGetProperties_Resource_STATUS_ARM, ThroughputSettingsGetProperties_Resource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsGetProperties_Resource_STATUS_ARM runs a test to see if a specific instance of ThroughputSettingsGetProperties_Resource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsGetProperties_Resource_STATUS_ARM(subject ThroughputSettingsGetProperties_Resource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsGetProperties_Resource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsGetProperties_Resource_STATUS_ARM instances for property testing - lazily instantiated
// by ThroughputSettingsGetProperties_Resource_STATUS_ARMGenerator()
var throughputSettingsGetProperties_Resource_STATUS_ARMGenerator gopter.Gen

// ThroughputSettingsGetProperties_Resource_STATUS_ARMGenerator returns a generator of ThroughputSettingsGetProperties_Resource_STATUS_ARM instances for property testing.
// We first initialize throughputSettingsGetProperties_Resource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsGetProperties_Resource_STATUS_ARMGenerator() gopter.Gen {
	if throughputSettingsGetProperties_Resource_STATUS_ARMGenerator != nil {
		return throughputSettingsGetProperties_Resource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM(generators)
	throughputSettingsGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetProperties_Resource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM(generators)
	throughputSettingsGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsGetProperties_Resource_STATUS_ARM{}), generators)

	return throughputSettingsGetProperties_Resource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["MinimumThroughput"] = gen.PtrOf(gen.AlphaString())
	gens["OfferReplacePending"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Throughput"] = gen.PtrOf(gen.Int())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResource_STATUS_ARMGenerator())
}

func Test_AutoscaleSettingsResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResource_STATUS_ARM, AutoscaleSettingsResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResource_STATUS_ARM runs a test to see if a specific instance of AutoscaleSettingsResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResource_STATUS_ARM(subject AutoscaleSettingsResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_STATUS_ARM instances for property testing - lazily instantiated by
// AutoscaleSettingsResource_STATUS_ARMGenerator()
var autoscaleSettingsResource_STATUS_ARMGenerator gopter.Gen

// AutoscaleSettingsResource_STATUS_ARMGenerator returns a generator of AutoscaleSettingsResource_STATUS_ARM instances for property testing.
// We first initialize autoscaleSettingsResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResource_STATUS_ARMGenerator() gopter.Gen {
	if autoscaleSettingsResource_STATUS_ARMGenerator != nil {
		return autoscaleSettingsResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM(generators)
	autoscaleSettingsResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM(generators)
	autoscaleSettingsResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_STATUS_ARM{}), generators)

	return autoscaleSettingsResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
	gens["TargetMaxThroughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResource_STATUS_ARMGenerator())
}

func Test_AutoUpgradePolicyResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResource_STATUS_ARM, AutoUpgradePolicyResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResource_STATUS_ARM runs a test to see if a specific instance of AutoUpgradePolicyResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResource_STATUS_ARM(subject AutoUpgradePolicyResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_STATUS_ARM instances for property testing - lazily instantiated by
// AutoUpgradePolicyResource_STATUS_ARMGenerator()
var autoUpgradePolicyResource_STATUS_ARMGenerator gopter.Gen

// AutoUpgradePolicyResource_STATUS_ARMGenerator returns a generator of AutoUpgradePolicyResource_STATUS_ARM instances for property testing.
func AutoUpgradePolicyResource_STATUS_ARMGenerator() gopter.Gen {
	if autoUpgradePolicyResource_STATUS_ARMGenerator != nil {
		return autoUpgradePolicyResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_STATUS_ARM(generators)
	autoUpgradePolicyResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_STATUS_ARM{}), generators)

	return autoUpgradePolicyResource_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResource_STATUS_ARMGenerator())
}

func Test_ThroughputPolicyResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResource_STATUS_ARM, ThroughputPolicyResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResource_STATUS_ARM runs a test to see if a specific instance of ThroughputPolicyResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResource_STATUS_ARM(subject ThroughputPolicyResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_STATUS_ARM instances for property testing - lazily instantiated by
// ThroughputPolicyResource_STATUS_ARMGenerator()
var throughputPolicyResource_STATUS_ARMGenerator gopter.Gen

// ThroughputPolicyResource_STATUS_ARMGenerator returns a generator of ThroughputPolicyResource_STATUS_ARM instances for property testing.
func ThroughputPolicyResource_STATUS_ARMGenerator() gopter.Gen {
	if throughputPolicyResource_STATUS_ARMGenerator != nil {
		return throughputPolicyResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResource_STATUS_ARM(generators)
	throughputPolicyResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_STATUS_ARM{}), generators)

	return throughputPolicyResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
