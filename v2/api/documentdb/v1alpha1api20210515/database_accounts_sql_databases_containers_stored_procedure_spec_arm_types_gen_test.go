// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM, DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM runs a test to see if a specific instance of DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM(subject DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM instances for property testing -
// lazily instantiated by DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator()
var databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator gopter.Gen

// DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator returns a generator of DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM instances for property testing.
// We first initialize databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator() gopter.Gen {
	if databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator != nil {
		return databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM(generators)
	databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM(generators)
	databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM{}), generators)

	return databaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabases_Containers_StoredProcedure_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlStoredProcedureCreateUpdateProperties_ARMGenerator())
}

func Test_SqlStoredProcedureCreateUpdateProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureCreateUpdateProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureCreateUpdateProperties_ARM, SqlStoredProcedureCreateUpdateProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureCreateUpdateProperties_ARM runs a test to see if a specific instance of SqlStoredProcedureCreateUpdateProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureCreateUpdateProperties_ARM(subject SqlStoredProcedureCreateUpdateProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureCreateUpdateProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureCreateUpdateProperties_ARM instances for property testing - lazily instantiated by
// SqlStoredProcedureCreateUpdateProperties_ARMGenerator()
var sqlStoredProcedureCreateUpdateProperties_ARMGenerator gopter.Gen

// SqlStoredProcedureCreateUpdateProperties_ARMGenerator returns a generator of SqlStoredProcedureCreateUpdateProperties_ARM instances for property testing.
func SqlStoredProcedureCreateUpdateProperties_ARMGenerator() gopter.Gen {
	if sqlStoredProcedureCreateUpdateProperties_ARMGenerator != nil {
		return sqlStoredProcedureCreateUpdateProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdateProperties_ARM(generators)
	sqlStoredProcedureCreateUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureCreateUpdateProperties_ARM{}), generators)

	return sqlStoredProcedureCreateUpdateProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdateProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureCreateUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_ARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlStoredProcedureResource_ARMGenerator())
}

func Test_SqlStoredProcedureResource_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureResource_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureResource_ARM, SqlStoredProcedureResource_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureResource_ARM runs a test to see if a specific instance of SqlStoredProcedureResource_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureResource_ARM(subject SqlStoredProcedureResource_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureResource_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureResource_ARM instances for property testing - lazily instantiated by
// SqlStoredProcedureResource_ARMGenerator()
var sqlStoredProcedureResource_ARMGenerator gopter.Gen

// SqlStoredProcedureResource_ARMGenerator returns a generator of SqlStoredProcedureResource_ARM instances for property testing.
func SqlStoredProcedureResource_ARMGenerator() gopter.Gen {
	if sqlStoredProcedureResource_ARMGenerator != nil {
		return sqlStoredProcedureResource_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_ARM(generators)
	sqlStoredProcedureResource_ARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureResource_ARM{}), generators)

	return sqlStoredProcedureResource_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_ARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
