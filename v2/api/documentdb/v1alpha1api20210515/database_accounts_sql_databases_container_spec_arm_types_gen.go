// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

// Deprecated version of DatabaseAccounts_SqlDatabases_Container_Spec. Use v1beta20210515.DatabaseAccounts_SqlDatabases_Container_Spec instead
type DatabaseAccounts_SqlDatabases_Container_SpecARM struct {
	Location   *string                                `json:"location,omitempty"`
	Name       string                                 `json:"name,omitempty"`
	Properties *SqlContainerCreateUpdatePropertiesARM `json:"properties,omitempty"`
	Tags       map[string]string                      `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &DatabaseAccounts_SqlDatabases_Container_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (container DatabaseAccounts_SqlDatabases_Container_SpecARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (container *DatabaseAccounts_SqlDatabases_Container_SpecARM) GetName() string {
	return container.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
func (container *DatabaseAccounts_SqlDatabases_Container_SpecARM) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
}

// Deprecated version of SqlContainerCreateUpdateProperties. Use v1beta20210515.SqlContainerCreateUpdateProperties instead
type SqlContainerCreateUpdatePropertiesARM struct {
	Options  *CreateUpdateOptionsARM  `json:"options,omitempty"`
	Resource *SqlContainerResourceARM `json:"resource,omitempty"`
}

// Deprecated version of SqlContainerResource. Use v1beta20210515.SqlContainerResource instead
type SqlContainerResourceARM struct {
	AnalyticalStorageTtl     *int                         `json:"analyticalStorageTtl,omitempty"`
	ConflictResolutionPolicy *ConflictResolutionPolicyARM `json:"conflictResolutionPolicy,omitempty"`
	DefaultTtl               *int                         `json:"defaultTtl,omitempty"`
	Id                       *string                      `json:"id,omitempty"`
	IndexingPolicy           *IndexingPolicyARM           `json:"indexingPolicy,omitempty"`
	PartitionKey             *ContainerPartitionKeyARM    `json:"partitionKey,omitempty"`
	UniqueKeyPolicy          *UniqueKeyPolicyARM          `json:"uniqueKeyPolicy,omitempty"`
}

// Deprecated version of ConflictResolutionPolicy. Use v1beta20210515.ConflictResolutionPolicy instead
type ConflictResolutionPolicyARM struct {
	ConflictResolutionPath      *string                        `json:"conflictResolutionPath,omitempty"`
	ConflictResolutionProcedure *string                        `json:"conflictResolutionProcedure,omitempty"`
	Mode                        *ConflictResolutionPolicy_Mode `json:"mode,omitempty"`
}

// Deprecated version of ContainerPartitionKey. Use v1beta20210515.ContainerPartitionKey instead
type ContainerPartitionKeyARM struct {
	Kind    *ContainerPartitionKey_Kind `json:"kind,omitempty"`
	Paths   []string                    `json:"paths,omitempty"`
	Version *int                        `json:"version,omitempty"`
}

// Deprecated version of IndexingPolicy. Use v1beta20210515.IndexingPolicy instead
type IndexingPolicyARM struct {
	Automatic        *bool                        `json:"automatic,omitempty"`
	CompositeIndexes [][]CompositePathARM         `json:"compositeIndexes,omitempty"`
	ExcludedPaths    []ExcludedPathARM            `json:"excludedPaths,omitempty"`
	IncludedPaths    []IncludedPathARM            `json:"includedPaths,omitempty"`
	IndexingMode     *IndexingPolicy_IndexingMode `json:"indexingMode,omitempty"`
	SpatialIndexes   []SpatialSpecARM             `json:"spatialIndexes,omitempty"`
}

// Deprecated version of UniqueKeyPolicy. Use v1beta20210515.UniqueKeyPolicy instead
type UniqueKeyPolicyARM struct {
	UniqueKeys []UniqueKeyARM `json:"uniqueKeys,omitempty"`
}

// Deprecated version of CompositePath. Use v1beta20210515.CompositePath instead
type CompositePathARM struct {
	Order *CompositePath_Order `json:"order,omitempty"`
	Path  *string              `json:"path,omitempty"`
}

// Deprecated version of ConflictResolutionPolicy_Mode. Use v1beta20210515.ConflictResolutionPolicy_Mode instead
// +kubebuilder:validation:Enum={"Custom","LastWriterWins"}
type ConflictResolutionPolicy_Mode string

const (
	ConflictResolutionPolicy_Mode_Custom         = ConflictResolutionPolicy_Mode("Custom")
	ConflictResolutionPolicy_Mode_LastWriterWins = ConflictResolutionPolicy_Mode("LastWriterWins")
)

// Deprecated version of ContainerPartitionKey_Kind. Use v1beta20210515.ContainerPartitionKey_Kind instead
// +kubebuilder:validation:Enum={"Hash","MultiHash","Range"}
type ContainerPartitionKey_Kind string

const (
	ContainerPartitionKey_Kind_Hash      = ContainerPartitionKey_Kind("Hash")
	ContainerPartitionKey_Kind_MultiHash = ContainerPartitionKey_Kind("MultiHash")
	ContainerPartitionKey_Kind_Range     = ContainerPartitionKey_Kind("Range")
)

// Deprecated version of ExcludedPath. Use v1beta20210515.ExcludedPath instead
type ExcludedPathARM struct {
	Path *string `json:"path,omitempty"`
}

// Deprecated version of IncludedPath. Use v1beta20210515.IncludedPath instead
type IncludedPathARM struct {
	Indexes []IndexesARM `json:"indexes,omitempty"`
	Path    *string      `json:"path,omitempty"`
}

// Deprecated version of IndexingPolicy_IndexingMode. Use v1beta20210515.IndexingPolicy_IndexingMode instead
// +kubebuilder:validation:Enum={"consistent","lazy","none"}
type IndexingPolicy_IndexingMode string

const (
	IndexingPolicy_IndexingMode_Consistent = IndexingPolicy_IndexingMode("consistent")
	IndexingPolicy_IndexingMode_Lazy       = IndexingPolicy_IndexingMode("lazy")
	IndexingPolicy_IndexingMode_None       = IndexingPolicy_IndexingMode("none")
)

// Deprecated version of SpatialSpec. Use v1beta20210515.SpatialSpec instead
type SpatialSpecARM struct {
	Path  *string             `json:"path,omitempty"`
	Types []SpatialSpec_Types `json:"types,omitempty"`
}

// Deprecated version of UniqueKey. Use v1beta20210515.UniqueKey instead
type UniqueKeyARM struct {
	Paths []string `json:"paths,omitempty"`
}

// Deprecated version of CompositePath_Order. Use v1beta20210515.CompositePath_Order instead
// +kubebuilder:validation:Enum={"ascending","descending"}
type CompositePath_Order string

const (
	CompositePath_Order_Ascending  = CompositePath_Order("ascending")
	CompositePath_Order_Descending = CompositePath_Order("descending")
)

// Deprecated version of Indexes. Use v1beta20210515.Indexes instead
type IndexesARM struct {
	DataType  *Indexes_DataType `json:"dataType,omitempty"`
	Kind      *Indexes_Kind     `json:"kind,omitempty"`
	Precision *int              `json:"precision,omitempty"`
}

// Deprecated version of SpatialSpec_Types. Use v1beta20210515.SpatialSpec_Types instead
// +kubebuilder:validation:Enum={"LineString","MultiPolygon","Point","Polygon"}
type SpatialSpec_Types string

const (
	SpatialSpec_Types_LineString   = SpatialSpec_Types("LineString")
	SpatialSpec_Types_MultiPolygon = SpatialSpec_Types("MultiPolygon")
	SpatialSpec_Types_Point        = SpatialSpec_Types("Point")
	SpatialSpec_Types_Polygon      = SpatialSpec_Types("Polygon")
)

// Deprecated version of Indexes_DataType. Use v1beta20210515.Indexes_DataType instead
// +kubebuilder:validation:Enum={"LineString","MultiPolygon","Number","Point","Polygon","String"}
type Indexes_DataType string

const (
	Indexes_DataType_LineString   = Indexes_DataType("LineString")
	Indexes_DataType_MultiPolygon = Indexes_DataType("MultiPolygon")
	Indexes_DataType_Number       = Indexes_DataType("Number")
	Indexes_DataType_Point        = Indexes_DataType("Point")
	Indexes_DataType_Polygon      = Indexes_DataType("Polygon")
	Indexes_DataType_String       = Indexes_DataType("String")
)

// Deprecated version of Indexes_Kind. Use v1beta20210515.Indexes_Kind instead
// +kubebuilder:validation:Enum={"Hash","Range","Spatial"}
type Indexes_Kind string

const (
	Indexes_Kind_Hash    = Indexes_Kind("Hash")
	Indexes_Kind_Range   = Indexes_Kind("Range")
	Indexes_Kind_Spatial = Indexes_Kind("Spatial")
)
