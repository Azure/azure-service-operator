// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ThroughputSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettings_StatusARM, ThroughputSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettings_StatusARM runs a test to see if a specific instance of ThroughputSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettings_StatusARM(subject ThroughputSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettings_StatusARM instances for property testing - lazily instantiated by
//ThroughputSettings_StatusARMGenerator()
var throughputSettings_statusARMGenerator gopter.Gen

// ThroughputSettings_StatusARMGenerator returns a generator of ThroughputSettings_StatusARM instances for property testing.
// We first initialize throughputSettings_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettings_StatusARMGenerator() gopter.Gen {
	if throughputSettings_statusARMGenerator != nil {
		return throughputSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettings_StatusARM(generators)
	throughputSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettings_StatusARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettings_StatusARM(generators)
	throughputSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettings_StatusARM{}), generators)

	return throughputSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForThroughputSettings_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ThroughputSettingsProperties_StatusARMGenerator())
}

func Test_ThroughputSettingsProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsProperties_StatusARM, ThroughputSettingsProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsProperties_StatusARM runs a test to see if a specific instance of ThroughputSettingsProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsProperties_StatusARM(subject ThroughputSettingsProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsProperties_StatusARM instances for property testing - lazily instantiated by
//ThroughputSettingsProperties_StatusARMGenerator()
var throughputSettingsProperties_statusARMGenerator gopter.Gen

// ThroughputSettingsProperties_StatusARMGenerator returns a generator of ThroughputSettingsProperties_StatusARM instances for property testing.
func ThroughputSettingsProperties_StatusARMGenerator() gopter.Gen {
	if throughputSettingsProperties_statusARMGenerator != nil {
		return throughputSettingsProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForThroughputSettingsProperties_StatusARM(generators)
	throughputSettingsProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsProperties_StatusARM{}), generators)

	return throughputSettingsProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForThroughputSettingsProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Resource"] = ThroughputSettingsResource_StatusARMGenerator()
}

func Test_ThroughputSettingsResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResource_StatusARM, ThroughputSettingsResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResource_StatusARM runs a test to see if a specific instance of ThroughputSettingsResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResource_StatusARM(subject ThroughputSettingsResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_StatusARM instances for property testing - lazily instantiated by
//ThroughputSettingsResource_StatusARMGenerator()
var throughputSettingsResource_statusARMGenerator gopter.Gen

// ThroughputSettingsResource_StatusARMGenerator returns a generator of ThroughputSettingsResource_StatusARM instances for property testing.
// We first initialize throughputSettingsResource_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResource_StatusARMGenerator() gopter.Gen {
	if throughputSettingsResource_statusARMGenerator != nil {
		return throughputSettingsResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_StatusARM(generators)
	throughputSettingsResource_statusARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_StatusARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResource_StatusARM(generators)
	throughputSettingsResource_statusARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_StatusARM{}), generators)

	return throughputSettingsResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResource_StatusARM(gens map[string]gopter.Gen) {
	gens["MinimumThroughput"] = gen.PtrOf(gen.AlphaString())
	gens["OfferReplacePending"] = gen.PtrOf(gen.AlphaString())
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResource_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResource_StatusARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResource_StatusARMGenerator())
}

func Test_AutoscaleSettingsResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResource_StatusARM, AutoscaleSettingsResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResource_StatusARM runs a test to see if a specific instance of AutoscaleSettingsResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResource_StatusARM(subject AutoscaleSettingsResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_StatusARM instances for property testing - lazily instantiated by
//AutoscaleSettingsResource_StatusARMGenerator()
var autoscaleSettingsResource_statusARMGenerator gopter.Gen

// AutoscaleSettingsResource_StatusARMGenerator returns a generator of AutoscaleSettingsResource_StatusARM instances for property testing.
// We first initialize autoscaleSettingsResource_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResource_StatusARMGenerator() gopter.Gen {
	if autoscaleSettingsResource_statusARMGenerator != nil {
		return autoscaleSettingsResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_StatusARM(generators)
	autoscaleSettingsResource_statusARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_StatusARM(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_StatusARM(generators)
	autoscaleSettingsResource_statusARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_StatusARM{}), generators)

	return autoscaleSettingsResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_StatusARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.Int()
	gens["TargetMaxThroughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_StatusARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResource_StatusARMGenerator())
}

func Test_AutoUpgradePolicyResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResource_StatusARM, AutoUpgradePolicyResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResource_StatusARM runs a test to see if a specific instance of AutoUpgradePolicyResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResource_StatusARM(subject AutoUpgradePolicyResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_StatusARM instances for property testing - lazily instantiated by
//AutoUpgradePolicyResource_StatusARMGenerator()
var autoUpgradePolicyResource_statusARMGenerator gopter.Gen

// AutoUpgradePolicyResource_StatusARMGenerator returns a generator of AutoUpgradePolicyResource_StatusARM instances for property testing.
func AutoUpgradePolicyResource_StatusARMGenerator() gopter.Gen {
	if autoUpgradePolicyResource_statusARMGenerator != nil {
		return autoUpgradePolicyResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_StatusARM(generators)
	autoUpgradePolicyResource_statusARMGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_StatusARM{}), generators)

	return autoUpgradePolicyResource_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_StatusARM(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResource_StatusARMGenerator())
}

func Test_ThroughputPolicyResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResource_StatusARM, ThroughputPolicyResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResource_StatusARM runs a test to see if a specific instance of ThroughputPolicyResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResource_StatusARM(subject ThroughputPolicyResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_StatusARM instances for property testing - lazily instantiated by
//ThroughputPolicyResource_StatusARMGenerator()
var throughputPolicyResource_statusARMGenerator gopter.Gen

// ThroughputPolicyResource_StatusARMGenerator returns a generator of ThroughputPolicyResource_StatusARM instances for property testing.
func ThroughputPolicyResource_StatusARMGenerator() gopter.Gen {
	if throughputPolicyResource_statusARMGenerator != nil {
		return throughputPolicyResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResource_StatusARM(generators)
	throughputPolicyResource_statusARMGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_StatusARM{}), generators)

	return throughputPolicyResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResource_StatusARM(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
