// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM, DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM(subject DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM instances for property testing -
//lazily instantiated by DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARMGenerator()
var databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator != nil {
		return databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM(generators)
	databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM(generators)
	databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM{}), generators)

	return databaseAccountsSqlDatabasesContainersUserDefinedFunctions_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = SqlUserDefinedFunctionProperties_SpecARMGenerator()
}

func Test_SqlUserDefinedFunctionProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionProperties_SpecARM, SqlUserDefinedFunctionProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionProperties_SpecARM runs a test to see if a specific instance of SqlUserDefinedFunctionProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionProperties_SpecARM(subject SqlUserDefinedFunctionProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionProperties_SpecARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionProperties_SpecARMGenerator()
var sqlUserDefinedFunctionProperties_specARMGenerator gopter.Gen

// SqlUserDefinedFunctionProperties_SpecARMGenerator returns a generator of SqlUserDefinedFunctionProperties_SpecARM instances for property testing.
func SqlUserDefinedFunctionProperties_SpecARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionProperties_specARMGenerator != nil {
		return sqlUserDefinedFunctionProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionProperties_SpecARM(generators)
	sqlUserDefinedFunctionProperties_specARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionProperties_SpecARM{}), generators)

	return sqlUserDefinedFunctionProperties_specARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecARMGenerator())
	gens["Resource"] = SqlUserDefinedFunctionResource_SpecARMGenerator()
}

func Test_SqlUserDefinedFunctionResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionResource_SpecARM, SqlUserDefinedFunctionResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionResource_SpecARM runs a test to see if a specific instance of SqlUserDefinedFunctionResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionResource_SpecARM(subject SqlUserDefinedFunctionResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionResource_SpecARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionResource_SpecARMGenerator()
var sqlUserDefinedFunctionResource_specARMGenerator gopter.Gen

// SqlUserDefinedFunctionResource_SpecARMGenerator returns a generator of SqlUserDefinedFunctionResource_SpecARM instances for property testing.
func SqlUserDefinedFunctionResource_SpecARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionResource_specARMGenerator != nil {
		return sqlUserDefinedFunctionResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_SpecARM(generators)
	sqlUserDefinedFunctionResource_specARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionResource_SpecARM{}), generators)

	return sqlUserDefinedFunctionResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
