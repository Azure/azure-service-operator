// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM, DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM(subject DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM instances for property testing -
//lazily instantiated by DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARMGenerator()
var databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARMGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARMGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator != nil {
		return databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM(generators)
	databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM(generators)
	databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM{}), generators)

	return databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = ThroughputSettingsProperties_SpecARMGenerator()
}

func Test_ThroughputSettingsProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsProperties_SpecARM, ThroughputSettingsProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsProperties_SpecARM runs a test to see if a specific instance of ThroughputSettingsProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsProperties_SpecARM(subject ThroughputSettingsProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsProperties_SpecARM instances for property testing - lazily instantiated by
//ThroughputSettingsProperties_SpecARMGenerator()
var throughputSettingsProperties_specARMGenerator gopter.Gen

// ThroughputSettingsProperties_SpecARMGenerator returns a generator of ThroughputSettingsProperties_SpecARM instances for property testing.
func ThroughputSettingsProperties_SpecARMGenerator() gopter.Gen {
	if throughputSettingsProperties_specARMGenerator != nil {
		return throughputSettingsProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForThroughputSettingsProperties_SpecARM(generators)
	throughputSettingsProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsProperties_SpecARM{}), generators)

	return throughputSettingsProperties_specARMGenerator
}

// AddRelatedPropertyGeneratorsForThroughputSettingsProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Resource"] = ThroughputSettingsResource_SpecARMGenerator()
}

func Test_ThroughputSettingsResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResource_SpecARM, ThroughputSettingsResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResource_SpecARM runs a test to see if a specific instance of ThroughputSettingsResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResource_SpecARM(subject ThroughputSettingsResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_SpecARM instances for property testing - lazily instantiated by
//ThroughputSettingsResource_SpecARMGenerator()
var throughputSettingsResource_specARMGenerator gopter.Gen

// ThroughputSettingsResource_SpecARMGenerator returns a generator of ThroughputSettingsResource_SpecARM instances for property testing.
// We first initialize throughputSettingsResource_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResource_SpecARMGenerator() gopter.Gen {
	if throughputSettingsResource_specARMGenerator != nil {
		return throughputSettingsResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_SpecARM(generators)
	throughputSettingsResource_specARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_SpecARM(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResource_SpecARM(generators)
	throughputSettingsResource_specARMGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_SpecARM{}), generators)

	return throughputSettingsResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResource_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResource_SpecARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResource_SpecARMGenerator())
}

func Test_AutoscaleSettingsResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResource_SpecARM, AutoscaleSettingsResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResource_SpecARM runs a test to see if a specific instance of AutoscaleSettingsResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResource_SpecARM(subject AutoscaleSettingsResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_SpecARM instances for property testing - lazily instantiated by
//AutoscaleSettingsResource_SpecARMGenerator()
var autoscaleSettingsResource_specARMGenerator gopter.Gen

// AutoscaleSettingsResource_SpecARMGenerator returns a generator of AutoscaleSettingsResource_SpecARM instances for property testing.
// We first initialize autoscaleSettingsResource_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResource_SpecARMGenerator() gopter.Gen {
	if autoscaleSettingsResource_specARMGenerator != nil {
		return autoscaleSettingsResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_SpecARM(generators)
	autoscaleSettingsResource_specARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_SpecARM(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_SpecARM(generators)
	autoscaleSettingsResource_specARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_SpecARM{}), generators)

	return autoscaleSettingsResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_SpecARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.Int()
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_SpecARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResource_SpecARMGenerator())
}

func Test_AutoUpgradePolicyResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResource_SpecARM, AutoUpgradePolicyResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResource_SpecARM runs a test to see if a specific instance of AutoUpgradePolicyResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResource_SpecARM(subject AutoUpgradePolicyResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_SpecARM instances for property testing - lazily instantiated by
//AutoUpgradePolicyResource_SpecARMGenerator()
var autoUpgradePolicyResource_specARMGenerator gopter.Gen

// AutoUpgradePolicyResource_SpecARMGenerator returns a generator of AutoUpgradePolicyResource_SpecARM instances for property testing.
func AutoUpgradePolicyResource_SpecARMGenerator() gopter.Gen {
	if autoUpgradePolicyResource_specARMGenerator != nil {
		return autoUpgradePolicyResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_SpecARM(generators)
	autoUpgradePolicyResource_specARMGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_SpecARM{}), generators)

	return autoUpgradePolicyResource_specARMGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_SpecARM(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResource_SpecARMGenerator())
}

func Test_ThroughputPolicyResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResource_SpecARM, ThroughputPolicyResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResource_SpecARM runs a test to see if a specific instance of ThroughputPolicyResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResource_SpecARM(subject ThroughputPolicyResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_SpecARM instances for property testing - lazily instantiated by
//ThroughputPolicyResource_SpecARMGenerator()
var throughputPolicyResource_specARMGenerator gopter.Gen

// ThroughputPolicyResource_SpecARMGenerator returns a generator of ThroughputPolicyResource_SpecARM instances for property testing.
func ThroughputPolicyResource_SpecARMGenerator() gopter.Gen {
	if throughputPolicyResource_specARMGenerator != nil {
		return throughputPolicyResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResource_SpecARM(generators)
	throughputPolicyResource_specARMGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_SpecARM{}), generators)

	return throughputPolicyResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResource_SpecARM(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
