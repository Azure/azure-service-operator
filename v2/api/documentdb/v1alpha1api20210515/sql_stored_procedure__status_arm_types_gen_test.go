// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlStoredProcedure_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedure_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedure_StatusARM, SqlStoredProcedure_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedure_StatusARM runs a test to see if a specific instance of SqlStoredProcedure_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedure_StatusARM(subject SqlStoredProcedure_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedure_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedure_StatusARM instances for property testing - lazily instantiated by
//SqlStoredProcedure_StatusARMGenerator()
var sqlStoredProcedure_statusARMGenerator gopter.Gen

// SqlStoredProcedure_StatusARMGenerator returns a generator of SqlStoredProcedure_StatusARM instances for property testing.
// We first initialize sqlStoredProcedure_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlStoredProcedure_StatusARMGenerator() gopter.Gen {
	if sqlStoredProcedure_statusARMGenerator != nil {
		return sqlStoredProcedure_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedure_StatusARM(generators)
	sqlStoredProcedure_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedure_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedure_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlStoredProcedure_StatusARM(generators)
	sqlStoredProcedure_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedure_StatusARM{}), generators)

	return sqlStoredProcedure_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedure_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedure_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedure_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedure_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlStoredProcedureProperties_StatusARMGenerator())
}

func Test_SqlStoredProcedureProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureProperties_StatusARM, SqlStoredProcedureProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureProperties_StatusARM runs a test to see if a specific instance of SqlStoredProcedureProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureProperties_StatusARM(subject SqlStoredProcedureProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureProperties_StatusARM instances for property testing - lazily instantiated by
//SqlStoredProcedureProperties_StatusARMGenerator()
var sqlStoredProcedureProperties_statusARMGenerator gopter.Gen

// SqlStoredProcedureProperties_StatusARMGenerator returns a generator of SqlStoredProcedureProperties_StatusARM instances for property testing.
func SqlStoredProcedureProperties_StatusARMGenerator() gopter.Gen {
	if sqlStoredProcedureProperties_statusARMGenerator != nil {
		return sqlStoredProcedureProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureProperties_StatusARM(generators)
	sqlStoredProcedureProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureProperties_StatusARM{}), generators)

	return sqlStoredProcedureProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = SqlStoredProcedureResource_StatusARMGenerator()
}

func Test_SqlStoredProcedureResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureResource_StatusARM, SqlStoredProcedureResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureResource_StatusARM runs a test to see if a specific instance of SqlStoredProcedureResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureResource_StatusARM(subject SqlStoredProcedureResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureResource_StatusARM instances for property testing - lazily instantiated by
//SqlStoredProcedureResource_StatusARMGenerator()
var sqlStoredProcedureResource_statusARMGenerator gopter.Gen

// SqlStoredProcedureResource_StatusARMGenerator returns a generator of SqlStoredProcedureResource_StatusARM instances for property testing.
func SqlStoredProcedureResource_StatusARMGenerator() gopter.Gen {
	if sqlStoredProcedureResource_statusARMGenerator != nil {
		return sqlStoredProcedureResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_StatusARM(generators)
	sqlStoredProcedureResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureResource_StatusARM{}), generators)

	return sqlStoredProcedureResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
