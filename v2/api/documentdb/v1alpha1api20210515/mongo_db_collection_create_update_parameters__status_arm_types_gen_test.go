// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBCollectionCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdateParametersStatusARM, MongoDBCollectionCreateUpdateParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdateParametersStatusARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdateParametersStatusARM(subject MongoDBCollectionCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateParameters_StatusARM instances for property testing - lazily instantiated
//by MongoDBCollectionCreateUpdateParametersStatusARMGenerator()
var mongoDBCollectionCreateUpdateParametersStatusARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdateParametersStatusARMGenerator returns a generator of MongoDBCollectionCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize mongoDBCollectionCreateUpdateParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionCreateUpdateParametersStatusARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdateParametersStatusARMGenerator != nil {
		return mongoDBCollectionCreateUpdateParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM(generators)
	mongoDBCollectionCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM(generators)
	mongoDBCollectionCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateParameters_StatusARM{}), generators)

	return mongoDBCollectionCreateUpdateParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBCollectionCreateUpdatePropertiesStatusARMGenerator())
}

func Test_MongoDBCollectionCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdatePropertiesStatusARM, MongoDBCollectionCreateUpdatePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdatePropertiesStatusARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdatePropertiesStatusARM(subject MongoDBCollectionCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateProperties_StatusARM instances for property testing - lazily instantiated
//by MongoDBCollectionCreateUpdatePropertiesStatusARMGenerator()
var mongoDBCollectionCreateUpdatePropertiesStatusARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdatePropertiesStatusARMGenerator returns a generator of MongoDBCollectionCreateUpdateProperties_StatusARM instances for property testing.
func MongoDBCollectionCreateUpdatePropertiesStatusARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdatePropertiesStatusARMGenerator != nil {
		return mongoDBCollectionCreateUpdatePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdatePropertiesStatusARM(generators)
	mongoDBCollectionCreateUpdatePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateProperties_StatusARM{}), generators)

	return mongoDBCollectionCreateUpdatePropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdatePropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdatePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsStatusARMGenerator())
	gens["Resource"] = MongoDBCollectionResourceStatusARMGenerator()
}

func Test_CreateUpdateOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptionsStatusARM, CreateUpdateOptionsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptionsStatusARM runs a test to see if a specific instance of CreateUpdateOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptionsStatusARM(subject CreateUpdateOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_StatusARM instances for property testing - lazily instantiated by
//CreateUpdateOptionsStatusARMGenerator()
var createUpdateOptionsStatusARMGenerator gopter.Gen

// CreateUpdateOptionsStatusARMGenerator returns a generator of CreateUpdateOptions_StatusARM instances for property testing.
// We first initialize createUpdateOptionsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptionsStatusARMGenerator() gopter.Gen {
	if createUpdateOptionsStatusARMGenerator != nil {
		return createUpdateOptionsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptionsStatusARM(generators)
	createUpdateOptionsStatusARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptionsStatusARM(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptionsStatusARM(generators)
	createUpdateOptionsStatusARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_StatusARM{}), generators)

	return createUpdateOptionsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptionsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptionsStatusARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptionsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptionsStatusARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsStatusARMGenerator())
}

func Test_MongoDBCollectionResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResourceStatusARM, MongoDBCollectionResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResourceStatusARM runs a test to see if a specific instance of MongoDBCollectionResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResourceStatusARM(subject MongoDBCollectionResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_StatusARM instances for property testing - lazily instantiated by
//MongoDBCollectionResourceStatusARMGenerator()
var mongoDBCollectionResourceStatusARMGenerator gopter.Gen

// MongoDBCollectionResourceStatusARMGenerator returns a generator of MongoDBCollectionResource_StatusARM instances for property testing.
// We first initialize mongoDBCollectionResourceStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResourceStatusARMGenerator() gopter.Gen {
	if mongoDBCollectionResourceStatusARMGenerator != nil {
		return mongoDBCollectionResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResourceStatusARM(generators)
	mongoDBCollectionResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResourceStatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResourceStatusARM(generators)
	mongoDBCollectionResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_StatusARM{}), generators)

	return mongoDBCollectionResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResourceStatusARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.AlphaString()
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResourceStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndexStatusARMGenerator())
}

func Test_AutoscaleSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsStatusARM, AutoscaleSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsStatusARM runs a test to see if a specific instance of AutoscaleSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsStatusARM(subject AutoscaleSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_StatusARM instances for property testing - lazily instantiated by
//AutoscaleSettingsStatusARMGenerator()
var autoscaleSettingsStatusARMGenerator gopter.Gen

// AutoscaleSettingsStatusARMGenerator returns a generator of AutoscaleSettings_StatusARM instances for property testing.
func AutoscaleSettingsStatusARMGenerator() gopter.Gen {
	if autoscaleSettingsStatusARMGenerator != nil {
		return autoscaleSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsStatusARM(generators)
	autoscaleSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_StatusARM{}), generators)

	return autoscaleSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexStatusARM, MongoIndexStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexStatusARM runs a test to see if a specific instance of MongoIndex_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexStatusARM(subject MongoIndex_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_StatusARM instances for property testing - lazily instantiated by
//MongoIndexStatusARMGenerator()
var mongoIndexStatusARMGenerator gopter.Gen

// MongoIndexStatusARMGenerator returns a generator of MongoIndex_StatusARM instances for property testing.
func MongoIndexStatusARMGenerator() gopter.Gen {
	if mongoIndexStatusARMGenerator != nil {
		return mongoIndexStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndexStatusARM(generators)
	mongoIndexStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_StatusARM{}), generators)

	return mongoIndexStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndexStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndexStatusARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeysStatusARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptionsStatusARMGenerator())
}

func Test_MongoIndexKeys_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeysStatusARM, MongoIndexKeysStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeysStatusARM runs a test to see if a specific instance of MongoIndexKeys_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeysStatusARM(subject MongoIndexKeys_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_StatusARM instances for property testing - lazily instantiated by
//MongoIndexKeysStatusARMGenerator()
var mongoIndexKeysStatusARMGenerator gopter.Gen

// MongoIndexKeysStatusARMGenerator returns a generator of MongoIndexKeys_StatusARM instances for property testing.
func MongoIndexKeysStatusARMGenerator() gopter.Gen {
	if mongoIndexKeysStatusARMGenerator != nil {
		return mongoIndexKeysStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeysStatusARM(generators)
	mongoIndexKeysStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_StatusARM{}), generators)

	return mongoIndexKeysStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeysStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeysStatusARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptionsStatusARM, MongoIndexOptionsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptionsStatusARM runs a test to see if a specific instance of MongoIndexOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptionsStatusARM(subject MongoIndexOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_StatusARM instances for property testing - lazily instantiated by
//MongoIndexOptionsStatusARMGenerator()
var mongoIndexOptionsStatusARMGenerator gopter.Gen

// MongoIndexOptionsStatusARMGenerator returns a generator of MongoIndexOptions_StatusARM instances for property testing.
func MongoIndexOptionsStatusARMGenerator() gopter.Gen {
	if mongoIndexOptionsStatusARMGenerator != nil {
		return mongoIndexOptionsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptionsStatusARM(generators)
	mongoIndexOptionsStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_StatusARM{}), generators)

	return mongoIndexOptionsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptionsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptionsStatusARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
