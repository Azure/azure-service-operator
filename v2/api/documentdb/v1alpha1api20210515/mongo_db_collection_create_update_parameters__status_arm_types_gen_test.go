// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBCollectionCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdateParameters_StatusARM, MongoDBCollectionCreateUpdateParameters_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdateParameters_StatusARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdateParameters_StatusARM(subject MongoDBCollectionCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateParameters_StatusARM instances for property testing - lazily instantiated
//by MongoDBCollectionCreateUpdateParameters_StatusARMGenerator()
var mongoDBCollectionCreateUpdateParameters_statusARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdateParameters_StatusARMGenerator returns a generator of MongoDBCollectionCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize mongoDBCollectionCreateUpdateParameters_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionCreateUpdateParameters_StatusARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdateParameters_statusARMGenerator != nil {
		return mongoDBCollectionCreateUpdateParameters_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM(generators)
	mongoDBCollectionCreateUpdateParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM(generators)
	mongoDBCollectionCreateUpdateParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateParameters_StatusARM{}), generators)

	return mongoDBCollectionCreateUpdateParameters_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBCollectionCreateUpdateProperties_StatusARMGenerator())
}

func Test_MongoDBCollectionCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdateProperties_StatusARM, MongoDBCollectionCreateUpdateProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdateProperties_StatusARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdateProperties_StatusARM(subject MongoDBCollectionCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateProperties_StatusARM instances for property testing - lazily instantiated
//by MongoDBCollectionCreateUpdateProperties_StatusARMGenerator()
var mongoDBCollectionCreateUpdateProperties_statusARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdateProperties_StatusARMGenerator returns a generator of MongoDBCollectionCreateUpdateProperties_StatusARM instances for property testing.
func MongoDBCollectionCreateUpdateProperties_StatusARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdateProperties_statusARMGenerator != nil {
		return mongoDBCollectionCreateUpdateProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateProperties_StatusARM(generators)
	mongoDBCollectionCreateUpdateProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateProperties_StatusARM{}), generators)

	return mongoDBCollectionCreateUpdateProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdateProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = MongoDBCollectionResource_StatusARMGenerator()
}

func Test_CreateUpdateOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptions_StatusARM, CreateUpdateOptions_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptions_StatusARM runs a test to see if a specific instance of CreateUpdateOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptions_StatusARM(subject CreateUpdateOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_StatusARM instances for property testing - lazily instantiated by
//CreateUpdateOptions_StatusARMGenerator()
var createUpdateOptions_statusARMGenerator gopter.Gen

// CreateUpdateOptions_StatusARMGenerator returns a generator of CreateUpdateOptions_StatusARM instances for property testing.
// We first initialize createUpdateOptions_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptions_StatusARMGenerator() gopter.Gen {
	if createUpdateOptions_statusARMGenerator != nil {
		return createUpdateOptions_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM(generators)
	createUpdateOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptions_StatusARM(generators)
	createUpdateOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_StatusARM{}), generators)

	return createUpdateOptions_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptions_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_StatusARMGenerator())
}

func Test_MongoDBCollectionResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResource_StatusARM, MongoDBCollectionResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResource_StatusARM runs a test to see if a specific instance of MongoDBCollectionResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResource_StatusARM(subject MongoDBCollectionResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_StatusARM instances for property testing - lazily instantiated by
//MongoDBCollectionResource_StatusARMGenerator()
var mongoDBCollectionResource_statusARMGenerator gopter.Gen

// MongoDBCollectionResource_StatusARMGenerator returns a generator of MongoDBCollectionResource_StatusARM instances for property testing.
// We first initialize mongoDBCollectionResource_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResource_StatusARMGenerator() gopter.Gen {
	if mongoDBCollectionResource_statusARMGenerator != nil {
		return mongoDBCollectionResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM(generators)
	mongoDBCollectionResource_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResource_StatusARM(generators)
	mongoDBCollectionResource_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_StatusARM{}), generators)

	return mongoDBCollectionResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.AlphaString()
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResource_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_StatusARMGenerator())
}

func Test_AutoscaleSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_StatusARM, AutoscaleSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_StatusARM runs a test to see if a specific instance of AutoscaleSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_StatusARM(subject AutoscaleSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_StatusARM instances for property testing - lazily instantiated by
//AutoscaleSettings_StatusARMGenerator()
var autoscaleSettings_statusARMGenerator gopter.Gen

// AutoscaleSettings_StatusARMGenerator returns a generator of AutoscaleSettings_StatusARM instances for property testing.
func AutoscaleSettings_StatusARMGenerator() gopter.Gen {
	if autoscaleSettings_statusARMGenerator != nil {
		return autoscaleSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_StatusARM(generators)
	autoscaleSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_StatusARM{}), generators)

	return autoscaleSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_StatusARM, MongoIndex_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_StatusARM runs a test to see if a specific instance of MongoIndex_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_StatusARM(subject MongoIndex_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_StatusARM instances for property testing - lazily instantiated by
//MongoIndex_StatusARMGenerator()
var mongoIndex_statusARMGenerator gopter.Gen

// MongoIndex_StatusARMGenerator returns a generator of MongoIndex_StatusARM instances for property testing.
func MongoIndex_StatusARMGenerator() gopter.Gen {
	if mongoIndex_statusARMGenerator != nil {
		return mongoIndex_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_StatusARM(generators)
	mongoIndex_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_StatusARM{}), generators)

	return mongoIndex_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_StatusARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_StatusARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_StatusARMGenerator())
}

func Test_MongoIndexKeys_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_StatusARM, MongoIndexKeys_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_StatusARM runs a test to see if a specific instance of MongoIndexKeys_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_StatusARM(subject MongoIndexKeys_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_StatusARM instances for property testing - lazily instantiated by
//MongoIndexKeys_StatusARMGenerator()
var mongoIndexKeys_statusARMGenerator gopter.Gen

// MongoIndexKeys_StatusARMGenerator returns a generator of MongoIndexKeys_StatusARM instances for property testing.
func MongoIndexKeys_StatusARMGenerator() gopter.Gen {
	if mongoIndexKeys_statusARMGenerator != nil {
		return mongoIndexKeys_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_StatusARM(generators)
	mongoIndexKeys_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_StatusARM{}), generators)

	return mongoIndexKeys_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_StatusARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_StatusARM, MongoIndexOptions_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_StatusARM runs a test to see if a specific instance of MongoIndexOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_StatusARM(subject MongoIndexOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_StatusARM instances for property testing - lazily instantiated by
//MongoIndexOptions_StatusARMGenerator()
var mongoIndexOptions_statusARMGenerator gopter.Gen

// MongoIndexOptions_StatusARMGenerator returns a generator of MongoIndexOptions_StatusARM instances for property testing.
func MongoIndexOptions_StatusARMGenerator() gopter.Gen {
	if mongoIndexOptions_statusARMGenerator != nil {
		return mongoIndexOptions_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_StatusARM(generators)
	mongoIndexOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_StatusARM{}), generators)

	return mongoIndexOptions_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
