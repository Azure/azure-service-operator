// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	alpha20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of MongodbDatabaseCollection. Use v1beta20210515.MongodbDatabaseCollection instead
type MongodbDatabaseCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabasesCollections_Spec `json:"spec,omitempty"`
	Status            MongoDBCollectionGetResults_STATUS               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollection{}

// GetConditions returns the conditions of the resource
func (collection *MongodbDatabaseCollection) GetConditions() conditions.Conditions {
	return collection.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (collection *MongodbDatabaseCollection) SetConditions(conditions conditions.Conditions) {
	collection.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbDatabaseCollection{}

// ConvertFrom populates our MongodbDatabaseCollection from the provided hub MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210515s.MongodbDatabaseCollection

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = collection.AssignPropertiesFromMongodbDatabaseCollection(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to collection")
	}

	return nil
}

// ConvertTo populates the provided hub MongodbDatabaseCollection from our MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210515s.MongodbDatabaseCollection
	err := collection.AssignPropertiesToMongodbDatabaseCollection(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from collection")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollection,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollections,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabasecollections.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &MongodbDatabaseCollection{}

// Default applies defaults to the MongodbDatabaseCollection resource
func (collection *MongodbDatabaseCollection) Default() {
	collection.defaultImpl()
	var temp interface{} = collection
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (collection *MongodbDatabaseCollection) defaultAzureName() {
	if collection.Spec.AzureName == "" {
		collection.Spec.AzureName = collection.Name
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabaseCollection resource
func (collection *MongodbDatabaseCollection) defaultImpl() { collection.defaultAzureName() }

var _ genruntime.KubernetesResource = &MongodbDatabaseCollection{}

// AzureName returns the Azure name of the resource
func (collection *MongodbDatabaseCollection) AzureName() string {
	return collection.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (collection MongodbDatabaseCollection) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (collection *MongodbDatabaseCollection) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (collection *MongodbDatabaseCollection) GetSpec() genruntime.ConvertibleSpec {
	return &collection.Spec
}

// GetStatus returns the status of this resource
func (collection *MongodbDatabaseCollection) GetStatus() genruntime.ConvertibleStatus {
	return &collection.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections"
func (collection *MongodbDatabaseCollection) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections"
}

// NewEmptyStatus returns a new empty (blank) status
func (collection *MongodbDatabaseCollection) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MongoDBCollectionGetResults_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (collection *MongodbDatabaseCollection) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(collection.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  collection.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (collection *MongodbDatabaseCollection) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MongoDBCollectionGetResults_STATUS); ok {
		collection.Status = *st
		return nil
	}

	// Convert status to required version
	var st MongoDBCollectionGetResults_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	collection.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollection,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollections,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabasecollections.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &MongodbDatabaseCollection{}

// ValidateCreate validates the creation of the resource
func (collection *MongodbDatabaseCollection) ValidateCreate() error {
	validations := collection.createValidations()
	var temp interface{} = collection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (collection *MongodbDatabaseCollection) ValidateDelete() error {
	validations := collection.deleteValidations()
	var temp interface{} = collection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (collection *MongodbDatabaseCollection) ValidateUpdate(old runtime.Object) error {
	validations := collection.updateValidations()
	var temp interface{} = collection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (collection *MongodbDatabaseCollection) createValidations() []func() error {
	return []func() error{collection.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (collection *MongodbDatabaseCollection) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (collection *MongodbDatabaseCollection) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return collection.validateResourceReferences()
		},
		collection.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (collection *MongodbDatabaseCollection) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&collection.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (collection *MongodbDatabaseCollection) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*MongodbDatabaseCollection)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, collection)
}

// AssignPropertiesFromMongodbDatabaseCollection populates our MongodbDatabaseCollection from the provided source MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) AssignPropertiesFromMongodbDatabaseCollection(source *alpha20210515s.MongodbDatabaseCollection) error {

	// ObjectMeta
	collection.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsMongodbDatabasesCollections_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec() to populate field Spec")
	}
	collection.Spec = spec

	// Status
	var status MongoDBCollectionGetResults_STATUS
	err = status.AssignPropertiesFromMongoDBCollectionGetResultsSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionGetResultsSTATUS() to populate field Status")
	}
	collection.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabaseCollection populates the provided destination MongodbDatabaseCollection from our MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) AssignPropertiesToMongodbDatabaseCollection(destination *alpha20210515s.MongodbDatabaseCollection) error {

	// ObjectMeta
	destination.ObjectMeta = *collection.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec
	err := collection.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210515s.MongoDBCollectionGetResults_STATUS
	err = collection.Status.AssignPropertiesToMongoDBCollectionGetResultsSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionGetResultsSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (collection *MongodbDatabaseCollection) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: collection.Spec.OriginalVersion(),
		Kind:    "MongodbDatabaseCollection",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of MongodbDatabaseCollection. Use v1beta20210515.MongodbDatabaseCollection instead
type MongodbDatabaseCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollection `json:"items"`
}

type DatabaseAccountsMongodbDatabasesCollections_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string               `json:"azureName,omitempty"`
	Location  *string              `json:"location,omitempty"`
	Options   *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a documentdb.azure.com/MongodbDatabase resource
	Owner *genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner,omitempty" kind:"MongodbDatabase"`

	// +kubebuilder:validation:Required
	Resource *MongoDBCollectionResource `json:"resource,omitempty"`
	Tags     map[string]string          `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsMongodbDatabasesCollections_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if collections == nil {
		return nil, nil
	}
	result := &DatabaseAccountsMongodbDatabasesCollections_SpecARM{}

	// Set property ‘Location’:
	if collections.Location != nil {
		location := *collections.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if collections.Options != nil || collections.Resource != nil {
		result.Properties = &MongoDBCollectionCreateUpdatePropertiesARM{}
	}
	if collections.Options != nil {
		optionsARM, err := (*collections.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := *optionsARM.(*CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	if collections.Resource != nil {
		resourceARM, err := (*collections.Resource).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		resource := *resourceARM.(*MongoDBCollectionResourceARM)
		result.Properties.Resource = &resource
	}

	// Set property ‘Tags’:
	if collections.Tags != nil {
		result.Tags = make(map[string]string, len(collections.Tags))
		for key, value := range collections.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsMongodbDatabasesCollections_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsMongodbDatabasesCollections_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsMongodbDatabasesCollections_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	collections.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		collections.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 CreateUpdateOptions
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			collections.Options = &options
		}
	}

	// Set property ‘Owner’:
	collections.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 MongoDBCollectionResource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			collections.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		collections.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			collections.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabasesCollections_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabasesCollections_Spec from the provided source
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec)
	if ok {
		// Populate our instance from source
		return collections.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = collections.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollections_Spec
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec)
	if ok {
		// Populate destination from our instance
		return collections.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec{}
	err := collections.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec populates our DatabaseAccountsMongodbDatabasesCollections_Spec from the provided source DatabaseAccountsMongodbDatabasesCollections_Spec
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(source *alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec) error {

	// AzureName
	collections.AzureName = source.AzureName

	// Location
	collections.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreateUpdateOptions() to populate field Options")
		}
		collections.Options = &option
	} else {
		collections.Options = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		collections.Owner = &owner
	} else {
		collections.Owner = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionResource
		err := resource.AssignPropertiesFromMongoDBCollectionResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionResource() to populate field Resource")
		}
		collections.Resource = &resource
	} else {
		collections.Resource = nil
	}

	// Tags
	collections.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec populates the provided destination DatabaseAccountsMongodbDatabasesCollections_Spec from our DatabaseAccountsMongodbDatabasesCollections_Spec
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(destination *alpha20210515s.DatabaseAccountsMongodbDatabasesCollections_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = collections.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(collections.Location)

	// Options
	if collections.Options != nil {
		var option alpha20210515s.CreateUpdateOptions
		err := collections.Options.AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreateUpdateOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = collections.OriginalVersion()

	// Owner
	if collections.Owner != nil {
		owner := collections.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Resource
	if collections.Resource != nil {
		var resource alpha20210515s.MongoDBCollectionResource
		err := collections.Resource.AssignPropertiesToMongoDBCollectionResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(collections.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (collections *DatabaseAccountsMongodbDatabasesCollections_Spec) SetAzureName(azureName string) {
	collections.AzureName = azureName
}

// Deprecated version of MongoDBCollectionGetResults_STATUS. Use v1beta20210515.MongoDBCollectionGetResults_STATUS instead
type MongoDBCollectionGetResults_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition                          `json:"conditions,omitempty"`
	Id         *string                                         `json:"id,omitempty"`
	Location   *string                                         `json:"location,omitempty"`
	Name       *string                                         `json:"name,omitempty"`
	Options    *OptionsResource_STATUS                         `json:"options,omitempty"`
	Resource   *MongoDBCollectionGetProperties_STATUS_Resource `json:"resource,omitempty"`
	Tags       map[string]string                               `json:"tags,omitempty"`
	Type       *string                                         `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MongoDBCollectionGetResults_STATUS{}

// ConvertStatusFrom populates our MongoDBCollectionGetResults_STATUS from the provided source
func (results *MongoDBCollectionGetResults_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210515s.MongoDBCollectionGetResults_STATUS)
	if ok {
		// Populate our instance from source
		return results.AssignPropertiesFromMongoDBCollectionGetResultsSTATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210515s.MongoDBCollectionGetResults_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = results.AssignPropertiesFromMongoDBCollectionGetResultsSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our MongoDBCollectionGetResults_STATUS
func (results *MongoDBCollectionGetResults_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210515s.MongoDBCollectionGetResults_STATUS)
	if ok {
		// Populate destination from our instance
		return results.AssignPropertiesToMongoDBCollectionGetResultsSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210515s.MongoDBCollectionGetResults_STATUS{}
	err := results.AssignPropertiesToMongoDBCollectionGetResultsSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &MongoDBCollectionGetResults_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (results *MongoDBCollectionGetResults_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionGetResults_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (results *MongoDBCollectionGetResults_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionGetResults_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionGetResults_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		results.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		results.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		results.Name = &name
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 OptionsResource_STATUS
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			results.Options = &options
		}
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 MongoDBCollectionGetProperties_STATUS_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			results.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		results.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			results.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		results.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionGetResultsSTATUS populates our MongoDBCollectionGetResults_STATUS from the provided source MongoDBCollectionGetResults_STATUS
func (results *MongoDBCollectionGetResults_STATUS) AssignPropertiesFromMongoDBCollectionGetResultsSTATUS(source *alpha20210515s.MongoDBCollectionGetResults_STATUS) error {

	// Conditions
	results.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	results.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	results.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	results.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option OptionsResource_STATUS
		err := option.AssignPropertiesFromOptionsResourceSTATUS(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromOptionsResourceSTATUS() to populate field Options")
		}
		results.Options = &option
	} else {
		results.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionGetProperties_STATUS_Resource
		err := resource.AssignPropertiesFromMongoDBCollectionGetPropertiesSTATUSResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionGetPropertiesSTATUSResource() to populate field Resource")
		}
		results.Resource = &resource
	} else {
		results.Resource = nil
	}

	// Tags
	results.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	results.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionGetResultsSTATUS populates the provided destination MongoDBCollectionGetResults_STATUS from our MongoDBCollectionGetResults_STATUS
func (results *MongoDBCollectionGetResults_STATUS) AssignPropertiesToMongoDBCollectionGetResultsSTATUS(destination *alpha20210515s.MongoDBCollectionGetResults_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(results.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(results.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(results.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(results.Name)

	// Options
	if results.Options != nil {
		var option alpha20210515s.OptionsResource_STATUS
		err := results.Options.AssignPropertiesToOptionsResourceSTATUS(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToOptionsResourceSTATUS() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if results.Resource != nil {
		var resource alpha20210515s.MongoDBCollectionGetProperties_STATUS_Resource
		err := results.Resource.AssignPropertiesToMongoDBCollectionGetPropertiesSTATUSResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionGetPropertiesSTATUSResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(results.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(results.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoDBCollectionGetProperties_STATUS_Resource. Use v1beta20210515.MongoDBCollectionGetProperties_STATUS_Resource instead
type MongoDBCollectionGetProperties_STATUS_Resource struct {
	AnalyticalStorageTtl *int                `json:"analyticalStorageTtl,omitempty"`
	Etag                 *string             `json:"_etag,omitempty"`
	Id                   *string             `json:"id,omitempty"`
	Indexes              []MongoIndex_STATUS `json:"indexes,omitempty"`
	Rid                  *string             `json:"_rid,omitempty"`
	ShardKey             map[string]string   `json:"shardKey,omitempty"`
	Ts                   *float64            `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoDBCollectionGetProperties_STATUS_Resource{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *MongoDBCollectionGetProperties_STATUS_Resource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionGetProperties_STATUS_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *MongoDBCollectionGetProperties_STATUS_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionGetProperties_STATUS_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionGetProperties_STATUS_ResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		resource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		resource.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 MongoIndex_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resource.Indexes = append(resource.Indexes, item1)
	}

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		resource.Rid = &rid
	}

	// Set property ‘ShardKey’:
	if typedInput.ShardKey != nil {
		resource.ShardKey = make(map[string]string, len(typedInput.ShardKey))
		for key, value := range typedInput.ShardKey {
			resource.ShardKey[key] = value
		}
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		resource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionGetPropertiesSTATUSResource populates our MongoDBCollectionGetProperties_STATUS_Resource from the provided source MongoDBCollectionGetProperties_STATUS_Resource
func (resource *MongoDBCollectionGetProperties_STATUS_Resource) AssignPropertiesFromMongoDBCollectionGetPropertiesSTATUSResource(source *alpha20210515s.MongoDBCollectionGetProperties_STATUS_Resource) error {

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Etag
	resource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex_STATUS, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex_STATUS
			err := indexLocal.AssignPropertiesFromMongoIndexSTATUS(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexSTATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		resource.Indexes = indexList
	} else {
		resource.Indexes = nil
	}

	// Rid
	resource.Rid = genruntime.ClonePointerToString(source.Rid)

	// ShardKey
	resource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		resource.Ts = &t
	} else {
		resource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionGetPropertiesSTATUSResource populates the provided destination MongoDBCollectionGetProperties_STATUS_Resource from our MongoDBCollectionGetProperties_STATUS_Resource
func (resource *MongoDBCollectionGetProperties_STATUS_Resource) AssignPropertiesToMongoDBCollectionGetPropertiesSTATUSResource(destination *alpha20210515s.MongoDBCollectionGetProperties_STATUS_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(resource.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Indexes
	if resource.Indexes != nil {
		indexList := make([]alpha20210515s.MongoIndex_STATUS, len(resource.Indexes))
		for index, indexItem := range resource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal alpha20210515s.MongoIndex_STATUS
			err := indexItem.AssignPropertiesToMongoIndexSTATUS(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToMongoIndexSTATUS() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Rid
	destination.Rid = genruntime.ClonePointerToString(resource.Rid)

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(resource.ShardKey)

	// Ts
	if resource.Ts != nil {
		t := *resource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoDBCollectionResource. Use v1beta20210515.MongoDBCollectionResource instead
type MongoDBCollectionResource struct {
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	// +kubebuilder:validation:Required
	Id       *string           `json:"id,omitempty"`
	Indexes  []MongoIndex      `json:"indexes,omitempty"`
	ShardKey map[string]string `json:"shardKey,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoDBCollectionResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *MongoDBCollectionResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &MongoDBCollectionResourceARM{}

	// Set property ‘AnalyticalStorageTtl’:
	if resource.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *resource.AnalyticalStorageTtl
		result.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	if resource.Id != nil {
		id := *resource.Id
		result.Id = &id
	}

	// Set property ‘Indexes’:
	for _, item := range resource.Indexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Indexes = append(result.Indexes, *itemARM.(*MongoIndexARM))
	}

	// Set property ‘ShardKey’:
	if resource.ShardKey != nil {
		result.ShardKey = make(map[string]string, len(resource.ShardKey))
		for key, value := range resource.ShardKey {
			result.ShardKey[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *MongoDBCollectionResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *MongoDBCollectionResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		resource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 MongoIndex
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resource.Indexes = append(resource.Indexes, item1)
	}

	// Set property ‘ShardKey’:
	if typedInput.ShardKey != nil {
		resource.ShardKey = make(map[string]string, len(typedInput.ShardKey))
		for key, value := range typedInput.ShardKey {
			resource.ShardKey[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionResource populates our MongoDBCollectionResource from the provided source MongoDBCollectionResource
func (resource *MongoDBCollectionResource) AssignPropertiesFromMongoDBCollectionResource(source *alpha20210515s.MongoDBCollectionResource) error {

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex
			err := indexLocal.AssignPropertiesFromMongoIndex(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromMongoIndex() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		resource.Indexes = indexList
	} else {
		resource.Indexes = nil
	}

	// ShardKey
	resource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionResource populates the provided destination MongoDBCollectionResource from our MongoDBCollectionResource
func (resource *MongoDBCollectionResource) AssignPropertiesToMongoDBCollectionResource(destination *alpha20210515s.MongoDBCollectionResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Indexes
	if resource.Indexes != nil {
		indexList := make([]alpha20210515s.MongoIndex, len(resource.Indexes))
		for index, indexItem := range resource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal alpha20210515s.MongoIndex
			err := indexItem.AssignPropertiesToMongoIndex(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToMongoIndex() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(resource.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoIndex. Use v1beta20210515.MongoIndex instead
type MongoIndex struct {
	Key     *MongoIndexKeys    `json:"key,omitempty"`
	Options *MongoIndexOptions `json:"options,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndex{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (index *MongoIndex) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if index == nil {
		return nil, nil
	}
	result := &MongoIndexARM{}

	// Set property ‘Key’:
	if index.Key != nil {
		keyARM, err := (*index.Key).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		key := *keyARM.(*MongoIndexKeysARM)
		result.Key = &key
	}

	// Set property ‘Options’:
	if index.Options != nil {
		optionsARM, err := (*index.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := *optionsARM.(*MongoIndexOptionsARM)
		result.Options = &options
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (index *MongoIndex) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (index *MongoIndex) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		var key1 MongoIndexKeys
		err := key1.PopulateFromARM(owner, *typedInput.Key)
		if err != nil {
			return err
		}
		key := key1
		index.Key = &key
	}

	// Set property ‘Options’:
	if typedInput.Options != nil {
		var options1 MongoIndexOptions
		err := options1.PopulateFromARM(owner, *typedInput.Options)
		if err != nil {
			return err
		}
		options := options1
		index.Options = &options
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndex populates our MongoIndex from the provided source MongoIndex
func (index *MongoIndex) AssignPropertiesFromMongoIndex(source *alpha20210515s.MongoIndex) error {

	// Key
	if source.Key != nil {
		var key MongoIndexKeys
		err := key.AssignPropertiesFromMongoIndexKeys(source.Key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexKeys() to populate field Key")
		}
		index.Key = &key
	} else {
		index.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions
		err := option.AssignPropertiesFromMongoIndexOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexOptions() to populate field Options")
		}
		index.Options = &option
	} else {
		index.Options = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndex populates the provided destination MongoIndex from our MongoIndex
func (index *MongoIndex) AssignPropertiesToMongoIndex(destination *alpha20210515s.MongoIndex) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	if index.Key != nil {
		var key alpha20210515s.MongoIndexKeys
		err := index.Key.AssignPropertiesToMongoIndexKeys(&key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexKeys() to populate field Key")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if index.Options != nil {
		var option alpha20210515s.MongoIndexOptions
		err := index.Options.AssignPropertiesToMongoIndexOptions(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexOptions() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoIndex_STATUS. Use v1beta20210515.MongoIndex_STATUS instead
type MongoIndex_STATUS struct {
	Key     *MongoIndexKeys_STATUS    `json:"key,omitempty"`
	Options *MongoIndexOptions_STATUS `json:"options,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndex_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (index *MongoIndex_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndex_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (index *MongoIndex_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndex_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndex_STATUSARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		var key1 MongoIndexKeys_STATUS
		err := key1.PopulateFromARM(owner, *typedInput.Key)
		if err != nil {
			return err
		}
		key := key1
		index.Key = &key
	}

	// Set property ‘Options’:
	if typedInput.Options != nil {
		var options1 MongoIndexOptions_STATUS
		err := options1.PopulateFromARM(owner, *typedInput.Options)
		if err != nil {
			return err
		}
		options := options1
		index.Options = &options
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexSTATUS populates our MongoIndex_STATUS from the provided source MongoIndex_STATUS
func (index *MongoIndex_STATUS) AssignPropertiesFromMongoIndexSTATUS(source *alpha20210515s.MongoIndex_STATUS) error {

	// Key
	if source.Key != nil {
		var key MongoIndexKeys_STATUS
		err := key.AssignPropertiesFromMongoIndexKeysSTATUS(source.Key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexKeysSTATUS() to populate field Key")
		}
		index.Key = &key
	} else {
		index.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions_STATUS
		err := option.AssignPropertiesFromMongoIndexOptionsSTATUS(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexOptionsSTATUS() to populate field Options")
		}
		index.Options = &option
	} else {
		index.Options = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexSTATUS populates the provided destination MongoIndex_STATUS from our MongoIndex_STATUS
func (index *MongoIndex_STATUS) AssignPropertiesToMongoIndexSTATUS(destination *alpha20210515s.MongoIndex_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	if index.Key != nil {
		var key alpha20210515s.MongoIndexKeys_STATUS
		err := index.Key.AssignPropertiesToMongoIndexKeysSTATUS(&key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexKeysSTATUS() to populate field Key")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if index.Options != nil {
		var option alpha20210515s.MongoIndexOptions_STATUS
		err := index.Options.AssignPropertiesToMongoIndexOptionsSTATUS(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexOptionsSTATUS() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoIndexKeys. Use v1beta20210515.MongoIndexKeys instead
type MongoIndexKeys struct {
	Keys []string `json:"keys,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndexKeys{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (keys *MongoIndexKeys) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if keys == nil {
		return nil, nil
	}
	result := &MongoIndexKeysARM{}

	// Set property ‘Keys’:
	for _, item := range keys.Keys {
		result.Keys = append(result.Keys, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keys *MongoIndexKeys) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexKeysARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keys *MongoIndexKeys) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexKeysARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexKeysARM, got %T", armInput)
	}

	// Set property ‘Keys’:
	for _, item := range typedInput.Keys {
		keys.Keys = append(keys.Keys, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexKeys populates our MongoIndexKeys from the provided source MongoIndexKeys
func (keys *MongoIndexKeys) AssignPropertiesFromMongoIndexKeys(source *alpha20210515s.MongoIndexKeys) error {

	// Keys
	keys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeys populates the provided destination MongoIndexKeys from our MongoIndexKeys
func (keys *MongoIndexKeys) AssignPropertiesToMongoIndexKeys(destination *alpha20210515s.MongoIndexKeys) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(keys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoIndexKeys_STATUS. Use v1beta20210515.MongoIndexKeys_STATUS instead
type MongoIndexKeys_STATUS struct {
	Keys []string `json:"keys,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndexKeys_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keys *MongoIndexKeys_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexKeys_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keys *MongoIndexKeys_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexKeys_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexKeys_STATUSARM, got %T", armInput)
	}

	// Set property ‘Keys’:
	for _, item := range typedInput.Keys {
		keys.Keys = append(keys.Keys, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexKeysSTATUS populates our MongoIndexKeys_STATUS from the provided source MongoIndexKeys_STATUS
func (keys *MongoIndexKeys_STATUS) AssignPropertiesFromMongoIndexKeysSTATUS(source *alpha20210515s.MongoIndexKeys_STATUS) error {

	// Keys
	keys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeysSTATUS populates the provided destination MongoIndexKeys_STATUS from our MongoIndexKeys_STATUS
func (keys *MongoIndexKeys_STATUS) AssignPropertiesToMongoIndexKeysSTATUS(destination *alpha20210515s.MongoIndexKeys_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(keys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoIndexOptions. Use v1beta20210515.MongoIndexOptions instead
type MongoIndexOptions struct {
	ExpireAfterSeconds *int  `json:"expireAfterSeconds,omitempty"`
	Unique             *bool `json:"unique,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndexOptions{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (options *MongoIndexOptions) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if options == nil {
		return nil, nil
	}
	result := &MongoIndexOptionsARM{}

	// Set property ‘ExpireAfterSeconds’:
	if options.ExpireAfterSeconds != nil {
		expireAfterSeconds := *options.ExpireAfterSeconds
		result.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if options.Unique != nil {
		unique := *options.Unique
		result.Unique = &unique
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (options *MongoIndexOptions) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexOptionsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (options *MongoIndexOptions) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexOptionsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexOptionsARM, got %T", armInput)
	}

	// Set property ‘ExpireAfterSeconds’:
	if typedInput.ExpireAfterSeconds != nil {
		expireAfterSeconds := *typedInput.ExpireAfterSeconds
		options.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if typedInput.Unique != nil {
		unique := *typedInput.Unique
		options.Unique = &unique
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexOptions populates our MongoIndexOptions from the provided source MongoIndexOptions
func (options *MongoIndexOptions) AssignPropertiesFromMongoIndexOptions(source *alpha20210515s.MongoIndexOptions) error {

	// ExpireAfterSeconds
	options.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		options.Unique = &unique
	} else {
		options.Unique = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptions populates the provided destination MongoIndexOptions from our MongoIndexOptions
func (options *MongoIndexOptions) AssignPropertiesToMongoIndexOptions(destination *alpha20210515s.MongoIndexOptions) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(options.ExpireAfterSeconds)

	// Unique
	if options.Unique != nil {
		unique := *options.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MongoIndexOptions_STATUS. Use v1beta20210515.MongoIndexOptions_STATUS instead
type MongoIndexOptions_STATUS struct {
	ExpireAfterSeconds *int  `json:"expireAfterSeconds,omitempty"`
	Unique             *bool `json:"unique,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndexOptions_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (options *MongoIndexOptions_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexOptions_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (options *MongoIndexOptions_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexOptions_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexOptions_STATUSARM, got %T", armInput)
	}

	// Set property ‘ExpireAfterSeconds’:
	if typedInput.ExpireAfterSeconds != nil {
		expireAfterSeconds := *typedInput.ExpireAfterSeconds
		options.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if typedInput.Unique != nil {
		unique := *typedInput.Unique
		options.Unique = &unique
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexOptionsSTATUS populates our MongoIndexOptions_STATUS from the provided source MongoIndexOptions_STATUS
func (options *MongoIndexOptions_STATUS) AssignPropertiesFromMongoIndexOptionsSTATUS(source *alpha20210515s.MongoIndexOptions_STATUS) error {

	// ExpireAfterSeconds
	options.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		options.Unique = &unique
	} else {
		options.Unique = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptionsSTATUS populates the provided destination MongoIndexOptions_STATUS from our MongoIndexOptions_STATUS
func (options *MongoIndexOptions_STATUS) AssignPropertiesToMongoIndexOptionsSTATUS(destination *alpha20210515s.MongoIndexOptions_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(options.ExpireAfterSeconds)

	// Unique
	if options.Unique != nil {
		unique := *options.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollection{}, &MongodbDatabaseCollectionList{})
}
