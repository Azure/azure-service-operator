// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_mongodbDatabases_collections
type MongodbDatabaseCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabasesCollections_Spec `json:"spec,omitempty"`
	Status            MongoDBCollectionGetResults_Status               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollection{}

// GetConditions returns the conditions of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) GetConditions() conditions.Conditions {
	return mongodbDatabaseCollection.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (mongodbDatabaseCollection *MongodbDatabaseCollection) SetConditions(conditions conditions.Conditions) {
	mongodbDatabaseCollection.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbDatabaseCollection{}

// ConvertFrom populates our MongodbDatabaseCollection from the provided hub MongodbDatabaseCollection
func (mongodbDatabaseCollection *MongodbDatabaseCollection) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210515storage.MongodbDatabaseCollection)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/MongodbDatabaseCollection but received %T instead", hub)
	}

	return mongodbDatabaseCollection.AssignPropertiesFromMongodbDatabaseCollection(source)
}

// ConvertTo populates the provided hub MongodbDatabaseCollection from our MongodbDatabaseCollection
func (mongodbDatabaseCollection *MongodbDatabaseCollection) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210515storage.MongodbDatabaseCollection)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/MongodbDatabaseCollection but received %T instead", hub)
	}

	return mongodbDatabaseCollection.AssignPropertiesToMongodbDatabaseCollection(destination)
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollection,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollections,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabasecollections.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &MongodbDatabaseCollection{}

// Default applies defaults to the MongodbDatabaseCollection resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) Default() {
	mongodbDatabaseCollection.defaultImpl()
	var temp interface{} = mongodbDatabaseCollection
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (mongodbDatabaseCollection *MongodbDatabaseCollection) defaultAzureName() {
	if mongodbDatabaseCollection.Spec.AzureName == "" {
		mongodbDatabaseCollection.Spec.AzureName = mongodbDatabaseCollection.Name
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabaseCollection resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) defaultImpl() {
	mongodbDatabaseCollection.defaultAzureName()
}

var _ genruntime.KubernetesResource = &MongodbDatabaseCollection{}

// AzureName returns the Azure name of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) AzureName() string {
	return mongodbDatabaseCollection.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (mongodbDatabaseCollection MongodbDatabaseCollection) GetAPIVersion() string {
	return "2021-05-15"
}

// GetResourceKind returns the kind of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) GetSpec() genruntime.ConvertibleSpec {
	return &mongodbDatabaseCollection.Spec
}

// GetStatus returns the status of this resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) GetStatus() genruntime.ConvertibleStatus {
	return &mongodbDatabaseCollection.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections"
func (mongodbDatabaseCollection *MongodbDatabaseCollection) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections"
}

// NewEmptyStatus returns a new empty (blank) status
func (mongodbDatabaseCollection *MongodbDatabaseCollection) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MongoDBCollectionGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (mongodbDatabaseCollection *MongodbDatabaseCollection) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(mongodbDatabaseCollection.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  mongodbDatabaseCollection.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MongoDBCollectionGetResults_Status); ok {
		mongodbDatabaseCollection.Status = *st
		return nil
	}

	// Convert status to required version
	var st MongoDBCollectionGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	mongodbDatabaseCollection.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollection,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollections,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabasecollections.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &MongodbDatabaseCollection{}

// ValidateCreate validates the creation of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) ValidateCreate() error {
	validations := mongodbDatabaseCollection.createValidations()
	var temp interface{} = mongodbDatabaseCollection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) ValidateDelete() error {
	validations := mongodbDatabaseCollection.deleteValidations()
	var temp interface{} = mongodbDatabaseCollection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) ValidateUpdate(old runtime.Object) error {
	validations := mongodbDatabaseCollection.updateValidations()
	var temp interface{} = mongodbDatabaseCollection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) createValidations() []func() error {
	return []func() error{mongodbDatabaseCollection.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return mongodbDatabaseCollection.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (mongodbDatabaseCollection *MongodbDatabaseCollection) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&mongodbDatabaseCollection.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromMongodbDatabaseCollection populates our MongodbDatabaseCollection from the provided source MongodbDatabaseCollection
func (mongodbDatabaseCollection *MongodbDatabaseCollection) AssignPropertiesFromMongodbDatabaseCollection(source *v1alpha1api20210515storage.MongodbDatabaseCollection) error {

	// ObjectMeta
	mongodbDatabaseCollection.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsMongodbDatabasesCollections_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec()")
	}
	mongodbDatabaseCollection.Spec = spec

	// Status
	var status MongoDBCollectionGetResults_Status
	err = status.AssignPropertiesFromMongoDBCollectionGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromMongoDBCollectionGetResultsStatus()")
	}
	mongodbDatabaseCollection.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabaseCollection populates the provided destination MongodbDatabaseCollection from our MongodbDatabaseCollection
func (mongodbDatabaseCollection *MongodbDatabaseCollection) AssignPropertiesToMongodbDatabaseCollection(destination *v1alpha1api20210515storage.MongodbDatabaseCollection) error {

	// ObjectMeta
	destination.ObjectMeta = *mongodbDatabaseCollection.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec
	err := mongodbDatabaseCollection.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.MongoDBCollectionGetResults_Status
	err = mongodbDatabaseCollection.Status.AssignPropertiesToMongoDBCollectionGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToMongoDBCollectionGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (mongodbDatabaseCollection *MongodbDatabaseCollection) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: mongodbDatabaseCollection.Spec.OriginalVersion(),
		Kind:    "MongodbDatabaseCollection",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_mongodbDatabases_collections
type MongodbDatabaseCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollection `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-05-15"}
type DatabaseAccountsMongodbDatabasesCollectionsSpecAPIVersion string

const DatabaseAccountsMongodbDatabasesCollectionsSpecAPIVersion20210515 = DatabaseAccountsMongodbDatabasesCollectionsSpecAPIVersion("2021-05-15")

type DatabaseAccountsMongodbDatabasesCollections_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: CreateUpdateOptions are a list of key-value pairs that describe the
	//resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and
	//"Throughput"
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner" kind:"MongodbDatabase"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB MongoDB collection resource object
	Resource MongoDBCollectionResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsMongodbDatabasesCollections_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsMongodbDatabasesCollectionsSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsMongodbDatabasesCollections_SpecARM

	// Set property ‘Location’:
	if databaseAccountsMongodbDatabasesCollectionsSpec.Location != nil {
		location := *databaseAccountsMongodbDatabasesCollectionsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsMongodbDatabasesCollectionsSpec.Options != nil {
		optionsARM, err := (*databaseAccountsMongodbDatabasesCollectionsSpec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	resourceARM, err := databaseAccountsMongodbDatabasesCollectionsSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(MongoDBCollectionResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsMongodbDatabasesCollectionsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsMongodbDatabasesCollectionsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsMongodbDatabasesCollections_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsMongodbDatabasesCollections_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsMongodbDatabasesCollections_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	databaseAccountsMongodbDatabasesCollectionsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsMongodbDatabasesCollectionsSpec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		databaseAccountsMongodbDatabasesCollectionsSpec.Options = &options
	}

	// Set property ‘Owner’:
	databaseAccountsMongodbDatabasesCollectionsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource MongoDBCollectionResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsMongodbDatabasesCollectionsSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsMongodbDatabasesCollectionsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsMongodbDatabasesCollectionsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabasesCollections_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabasesCollections_Spec from the provided source
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsMongodbDatabasesCollectionsSpec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsMongodbDatabasesCollectionsSpec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollections_Spec
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsMongodbDatabasesCollectionsSpec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec{}
	err := databaseAccountsMongodbDatabasesCollectionsSpec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec populates our DatabaseAccountsMongodbDatabasesCollections_Spec from the provided source DatabaseAccountsMongodbDatabasesCollections_Spec
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsSpec(source *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec) error {

	// AzureName
	databaseAccountsMongodbDatabasesCollectionsSpec.AzureName = source.AzureName

	// Location
	databaseAccountsMongodbDatabasesCollectionsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromCreateUpdateOptions()")
		}
		databaseAccountsMongodbDatabasesCollectionsSpec.Options = &option
	} else {
		databaseAccountsMongodbDatabasesCollectionsSpec.Options = nil
	}

	// Owner
	databaseAccountsMongodbDatabasesCollectionsSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionResource
		err := resource.AssignPropertiesFromMongoDBCollectionResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromMongoDBCollectionResource()")
		}
		databaseAccountsMongodbDatabasesCollectionsSpec.Resource = resource
	} else {
		databaseAccountsMongodbDatabasesCollectionsSpec.Resource = MongoDBCollectionResource{}
	}

	// Tags
	databaseAccountsMongodbDatabasesCollectionsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec populates the provided destination DatabaseAccountsMongodbDatabasesCollections_Spec from our DatabaseAccountsMongodbDatabasesCollections_Spec
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsSpec(destination *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = databaseAccountsMongodbDatabasesCollectionsSpec.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(databaseAccountsMongodbDatabasesCollectionsSpec.Location)

	// Options
	if databaseAccountsMongodbDatabasesCollectionsSpec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions
		err := (*databaseAccountsMongodbDatabasesCollectionsSpec.Options).AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToCreateUpdateOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsMongodbDatabasesCollectionsSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsMongodbDatabasesCollectionsSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.MongoDBCollectionResource
	err := databaseAccountsMongodbDatabasesCollectionsSpec.Resource.AssignPropertiesToMongoDBCollectionResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToMongoDBCollectionResource()")
	}
	destination.Resource = &resource

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(databaseAccountsMongodbDatabasesCollectionsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsMongodbDatabasesCollectionsSpec *DatabaseAccountsMongodbDatabasesCollections_Spec) SetAzureName(azureName string) {
	databaseAccountsMongodbDatabasesCollectionsSpec.AzureName = azureName
}

type MongoDBCollectionGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                         `json:"name,omitempty"`
	Options  *OptionsResource_Status                         `json:"options,omitempty"`
	Resource *MongoDBCollectionGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                               `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MongoDBCollectionGetResults_Status{}

// ConvertStatusFrom populates our MongoDBCollectionGetResults_Status from the provided source
func (mongoDBCollectionGetResultsStatus *MongoDBCollectionGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.MongoDBCollectionGetResults_Status)
	if ok {
		// Populate our instance from source
		return mongoDBCollectionGetResultsStatus.AssignPropertiesFromMongoDBCollectionGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.MongoDBCollectionGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = mongoDBCollectionGetResultsStatus.AssignPropertiesFromMongoDBCollectionGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our MongoDBCollectionGetResults_Status
func (mongoDBCollectionGetResultsStatus *MongoDBCollectionGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.MongoDBCollectionGetResults_Status)
	if ok {
		// Populate destination from our instance
		return mongoDBCollectionGetResultsStatus.AssignPropertiesToMongoDBCollectionGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.MongoDBCollectionGetResults_Status{}
	err := mongoDBCollectionGetResultsStatus.AssignPropertiesToMongoDBCollectionGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &MongoDBCollectionGetResults_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoDBCollectionGetResultsStatus *MongoDBCollectionGetResults_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoDBCollectionGetResultsStatus *MongoDBCollectionGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		mongoDBCollectionGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		mongoDBCollectionGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		mongoDBCollectionGetResultsStatus.Name = &name
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 OptionsResource_Status
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			mongoDBCollectionGetResultsStatus.Options = &options
		}
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 MongoDBCollectionGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			mongoDBCollectionGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		mongoDBCollectionGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			mongoDBCollectionGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		mongoDBCollectionGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionGetResultsStatus populates our MongoDBCollectionGetResults_Status from the provided source MongoDBCollectionGetResults_Status
func (mongoDBCollectionGetResultsStatus *MongoDBCollectionGetResults_Status) AssignPropertiesFromMongoDBCollectionGetResultsStatus(source *v1alpha1api20210515storage.MongoDBCollectionGetResults_Status) error {

	// Conditions
	mongoDBCollectionGetResultsStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	mongoDBCollectionGetResultsStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	mongoDBCollectionGetResultsStatus.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	mongoDBCollectionGetResultsStatus.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option OptionsResource_Status
		err := option.AssignPropertiesFromOptionsResourceStatus(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromOptionsResourceStatus()")
		}
		mongoDBCollectionGetResultsStatus.Options = &option
	} else {
		mongoDBCollectionGetResultsStatus.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionGetProperties_Status_Resource
		err := resource.AssignPropertiesFromMongoDBCollectionGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromMongoDBCollectionGetPropertiesStatusResource()")
		}
		mongoDBCollectionGetResultsStatus.Resource = &resource
	} else {
		mongoDBCollectionGetResultsStatus.Resource = nil
	}

	// Tags
	mongoDBCollectionGetResultsStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	mongoDBCollectionGetResultsStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionGetResultsStatus populates the provided destination MongoDBCollectionGetResults_Status from our MongoDBCollectionGetResults_Status
func (mongoDBCollectionGetResultsStatus *MongoDBCollectionGetResults_Status) AssignPropertiesToMongoDBCollectionGetResultsStatus(destination *v1alpha1api20210515storage.MongoDBCollectionGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(mongoDBCollectionGetResultsStatus.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(mongoDBCollectionGetResultsStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(mongoDBCollectionGetResultsStatus.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(mongoDBCollectionGetResultsStatus.Name)

	// Options
	if mongoDBCollectionGetResultsStatus.Options != nil {
		var option v1alpha1api20210515storage.OptionsResource_Status
		err := (*mongoDBCollectionGetResultsStatus.Options).AssignPropertiesToOptionsResourceStatus(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToOptionsResourceStatus()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if mongoDBCollectionGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.MongoDBCollectionGetProperties_Status_Resource
		err := (*mongoDBCollectionGetResultsStatus.Resource).AssignPropertiesToMongoDBCollectionGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToMongoDBCollectionGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(mongoDBCollectionGetResultsStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(mongoDBCollectionGetResultsStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoDBCollectionGetProperties_Status_Resource struct {
	//AnalyticalStorageTtl: Analytical TTL.
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB MongoDB collection
	Id string `json:"id"`

	//Indexes: List of index keys
	Indexes []MongoIndex_Status `json:"indexes,omitempty"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//ShardKey: A key-value pair of shard keys to be applied for the request.
	ShardKey map[string]string `json:"shardKey,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoDBCollectionGetProperties_Status_Resource{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoDBCollectionGetPropertiesStatusResource *MongoDBCollectionGetProperties_Status_Resource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoDBCollectionGetPropertiesStatusResource *MongoDBCollectionGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		mongoDBCollectionGetPropertiesStatusResource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		mongoDBCollectionGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘Id’:
	mongoDBCollectionGetPropertiesStatusResource.Id = typedInput.Id

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 MongoIndex_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		mongoDBCollectionGetPropertiesStatusResource.Indexes = append(mongoDBCollectionGetPropertiesStatusResource.Indexes, item1)
	}

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		mongoDBCollectionGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘ShardKey’:
	if typedInput.ShardKey != nil {
		mongoDBCollectionGetPropertiesStatusResource.ShardKey = make(map[string]string)
		for key, value := range typedInput.ShardKey {
			mongoDBCollectionGetPropertiesStatusResource.ShardKey[key] = value
		}
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		mongoDBCollectionGetPropertiesStatusResource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionGetPropertiesStatusResource populates our MongoDBCollectionGetProperties_Status_Resource from the provided source MongoDBCollectionGetProperties_Status_Resource
func (mongoDBCollectionGetPropertiesStatusResource *MongoDBCollectionGetProperties_Status_Resource) AssignPropertiesFromMongoDBCollectionGetPropertiesStatusResource(source *v1alpha1api20210515storage.MongoDBCollectionGetProperties_Status_Resource) error {

	// AnalyticalStorageTtl
	mongoDBCollectionGetPropertiesStatusResource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Etag
	mongoDBCollectionGetPropertiesStatusResource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	mongoDBCollectionGetPropertiesStatusResource.Id = genruntime.GetOptionalStringValue(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex_Status, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex_Status
			err := indexLocal.AssignPropertiesFromMongoIndexStatus(&indexItem)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesFromMongoIndexStatus()")
			}
			indexList[index] = indexLocal
		}
		mongoDBCollectionGetPropertiesStatusResource.Indexes = indexList
	} else {
		mongoDBCollectionGetPropertiesStatusResource.Indexes = nil
	}

	// Rid
	mongoDBCollectionGetPropertiesStatusResource.Rid = genruntime.ClonePointerToString(source.Rid)

	// ShardKey
	mongoDBCollectionGetPropertiesStatusResource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		mongoDBCollectionGetPropertiesStatusResource.Ts = &t
	} else {
		mongoDBCollectionGetPropertiesStatusResource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionGetPropertiesStatusResource populates the provided destination MongoDBCollectionGetProperties_Status_Resource from our MongoDBCollectionGetProperties_Status_Resource
func (mongoDBCollectionGetPropertiesStatusResource *MongoDBCollectionGetProperties_Status_Resource) AssignPropertiesToMongoDBCollectionGetPropertiesStatusResource(destination *v1alpha1api20210515storage.MongoDBCollectionGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(mongoDBCollectionGetPropertiesStatusResource.AnalyticalStorageTtl)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(mongoDBCollectionGetPropertiesStatusResource.Etag)

	// Id
	id := mongoDBCollectionGetPropertiesStatusResource.Id
	destination.Id = &id

	// Indexes
	if mongoDBCollectionGetPropertiesStatusResource.Indexes != nil {
		indexList := make([]v1alpha1api20210515storage.MongoIndex_Status, len(mongoDBCollectionGetPropertiesStatusResource.Indexes))
		for index, indexItem := range mongoDBCollectionGetPropertiesStatusResource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v1alpha1api20210515storage.MongoIndex_Status
			err := indexItem.AssignPropertiesToMongoIndexStatus(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesToMongoIndexStatus()")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Rid
	destination.Rid = genruntime.ClonePointerToString(mongoDBCollectionGetPropertiesStatusResource.Rid)

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(mongoDBCollectionGetPropertiesStatusResource.ShardKey)

	// Ts
	if mongoDBCollectionGetPropertiesStatusResource.Ts != nil {
		t := *mongoDBCollectionGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/MongoDBCollectionResource
type MongoDBCollectionResource struct {
	//AnalyticalStorageTtl: Analytical TTL.
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB MongoDB collection
	Id string `json:"id"`

	//Indexes: List of index keys
	Indexes []MongoIndex `json:"indexes,omitempty"`

	//ShardKey: The shard key and partition kind pair, only support "Hash" partition
	//kind
	ShardKey map[string]string `json:"shardKey,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoDBCollectionResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (mongoDBCollectionResource *MongoDBCollectionResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if mongoDBCollectionResource == nil {
		return nil, nil
	}
	var result MongoDBCollectionResourceARM

	// Set property ‘AnalyticalStorageTtl’:
	if mongoDBCollectionResource.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *mongoDBCollectionResource.AnalyticalStorageTtl
		result.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	result.Id = mongoDBCollectionResource.Id

	// Set property ‘Indexes’:
	for _, item := range mongoDBCollectionResource.Indexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Indexes = append(result.Indexes, itemARM.(MongoIndexARM))
	}

	// Set property ‘ShardKey’:
	if mongoDBCollectionResource.ShardKey != nil {
		result.ShardKey = make(map[string]string)
		for key, value := range mongoDBCollectionResource.ShardKey {
			result.ShardKey[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoDBCollectionResource *MongoDBCollectionResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoDBCollectionResource *MongoDBCollectionResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		mongoDBCollectionResource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	mongoDBCollectionResource.Id = typedInput.Id

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 MongoIndex
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		mongoDBCollectionResource.Indexes = append(mongoDBCollectionResource.Indexes, item1)
	}

	// Set property ‘ShardKey’:
	if typedInput.ShardKey != nil {
		mongoDBCollectionResource.ShardKey = make(map[string]string)
		for key, value := range typedInput.ShardKey {
			mongoDBCollectionResource.ShardKey[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionResource populates our MongoDBCollectionResource from the provided source MongoDBCollectionResource
func (mongoDBCollectionResource *MongoDBCollectionResource) AssignPropertiesFromMongoDBCollectionResource(source *v1alpha1api20210515storage.MongoDBCollectionResource) error {

	// AnalyticalStorageTtl
	mongoDBCollectionResource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Id
	mongoDBCollectionResource.Id = genruntime.GetOptionalStringValue(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex
			err := indexLocal.AssignPropertiesFromMongoIndex(&indexItem)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesFromMongoIndex()")
			}
			indexList[index] = indexLocal
		}
		mongoDBCollectionResource.Indexes = indexList
	} else {
		mongoDBCollectionResource.Indexes = nil
	}

	// ShardKey
	mongoDBCollectionResource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionResource populates the provided destination MongoDBCollectionResource from our MongoDBCollectionResource
func (mongoDBCollectionResource *MongoDBCollectionResource) AssignPropertiesToMongoDBCollectionResource(destination *v1alpha1api20210515storage.MongoDBCollectionResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(mongoDBCollectionResource.AnalyticalStorageTtl)

	// Id
	id := mongoDBCollectionResource.Id
	destination.Id = &id

	// Indexes
	if mongoDBCollectionResource.Indexes != nil {
		indexList := make([]v1alpha1api20210515storage.MongoIndex, len(mongoDBCollectionResource.Indexes))
		for index, indexItem := range mongoDBCollectionResource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v1alpha1api20210515storage.MongoIndex
			err := indexItem.AssignPropertiesToMongoIndex(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesToMongoIndex()")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(mongoDBCollectionResource.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/MongoIndex
type MongoIndex struct {
	//Key: Cosmos DB MongoDB collection resource object
	Key *MongoIndexKeys `json:"key,omitempty"`

	//Options: Cosmos DB MongoDB collection index options
	Options *MongoIndexOptions `json:"options,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndex{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (mongoIndex *MongoIndex) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if mongoIndex == nil {
		return nil, nil
	}
	var result MongoIndexARM

	// Set property ‘Key’:
	if mongoIndex.Key != nil {
		keyARM, err := (*mongoIndex.Key).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		key := keyARM.(MongoIndexKeysARM)
		result.Key = &key
	}

	// Set property ‘Options’:
	if mongoIndex.Options != nil {
		optionsARM, err := (*mongoIndex.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(MongoIndexOptionsARM)
		result.Options = &options
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoIndex *MongoIndex) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoIndex *MongoIndex) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		var key1 MongoIndexKeys
		err := key1.PopulateFromARM(owner, *typedInput.Key)
		if err != nil {
			return err
		}
		key := key1
		mongoIndex.Key = &key
	}

	// Set property ‘Options’:
	if typedInput.Options != nil {
		var options1 MongoIndexOptions
		err := options1.PopulateFromARM(owner, *typedInput.Options)
		if err != nil {
			return err
		}
		options := options1
		mongoIndex.Options = &options
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndex populates our MongoIndex from the provided source MongoIndex
func (mongoIndex *MongoIndex) AssignPropertiesFromMongoIndex(source *v1alpha1api20210515storage.MongoIndex) error {

	// Key
	if source.Key != nil {
		var key MongoIndexKeys
		err := key.AssignPropertiesFromMongoIndexKeys(source.Key)
		if err != nil {
			return errors.Wrap(err, "populating Key from Key, calling AssignPropertiesFromMongoIndexKeys()")
		}
		mongoIndex.Key = &key
	} else {
		mongoIndex.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions
		err := option.AssignPropertiesFromMongoIndexOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromMongoIndexOptions()")
		}
		mongoIndex.Options = &option
	} else {
		mongoIndex.Options = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndex populates the provided destination MongoIndex from our MongoIndex
func (mongoIndex *MongoIndex) AssignPropertiesToMongoIndex(destination *v1alpha1api20210515storage.MongoIndex) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	if mongoIndex.Key != nil {
		var key v1alpha1api20210515storage.MongoIndexKeys
		err := (*mongoIndex.Key).AssignPropertiesToMongoIndexKeys(&key)
		if err != nil {
			return errors.Wrap(err, "populating Key from Key, calling AssignPropertiesToMongoIndexKeys()")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if mongoIndex.Options != nil {
		var option v1alpha1api20210515storage.MongoIndexOptions
		err := (*mongoIndex.Options).AssignPropertiesToMongoIndexOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToMongoIndexOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndex_Status struct {
	//Key: Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeys_Status `json:"key,omitempty"`

	//Options: Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptions_Status `json:"options,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndex_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoIndexStatus *MongoIndex_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndex_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoIndexStatus *MongoIndex_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndex_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndex_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		var key1 MongoIndexKeys_Status
		err := key1.PopulateFromARM(owner, *typedInput.Key)
		if err != nil {
			return err
		}
		key := key1
		mongoIndexStatus.Key = &key
	}

	// Set property ‘Options’:
	if typedInput.Options != nil {
		var options1 MongoIndexOptions_Status
		err := options1.PopulateFromARM(owner, *typedInput.Options)
		if err != nil {
			return err
		}
		options := options1
		mongoIndexStatus.Options = &options
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexStatus populates our MongoIndex_Status from the provided source MongoIndex_Status
func (mongoIndexStatus *MongoIndex_Status) AssignPropertiesFromMongoIndexStatus(source *v1alpha1api20210515storage.MongoIndex_Status) error {

	// Key
	if source.Key != nil {
		var key MongoIndexKeys_Status
		err := key.AssignPropertiesFromMongoIndexKeysStatus(source.Key)
		if err != nil {
			return errors.Wrap(err, "populating Key from Key, calling AssignPropertiesFromMongoIndexKeysStatus()")
		}
		mongoIndexStatus.Key = &key
	} else {
		mongoIndexStatus.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions_Status
		err := option.AssignPropertiesFromMongoIndexOptionsStatus(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromMongoIndexOptionsStatus()")
		}
		mongoIndexStatus.Options = &option
	} else {
		mongoIndexStatus.Options = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexStatus populates the provided destination MongoIndex_Status from our MongoIndex_Status
func (mongoIndexStatus *MongoIndex_Status) AssignPropertiesToMongoIndexStatus(destination *v1alpha1api20210515storage.MongoIndex_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	if mongoIndexStatus.Key != nil {
		var key v1alpha1api20210515storage.MongoIndexKeys_Status
		err := (*mongoIndexStatus.Key).AssignPropertiesToMongoIndexKeysStatus(&key)
		if err != nil {
			return errors.Wrap(err, "populating Key from Key, calling AssignPropertiesToMongoIndexKeysStatus()")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if mongoIndexStatus.Options != nil {
		var option v1alpha1api20210515storage.MongoIndexOptions_Status
		err := (*mongoIndexStatus.Options).AssignPropertiesToMongoIndexOptionsStatus(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToMongoIndexOptionsStatus()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/MongoIndexKeys
type MongoIndexKeys struct {
	//Keys: List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `json:"keys,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndexKeys{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (mongoIndexKeys *MongoIndexKeys) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if mongoIndexKeys == nil {
		return nil, nil
	}
	var result MongoIndexKeysARM

	// Set property ‘Keys’:
	for _, item := range mongoIndexKeys.Keys {
		result.Keys = append(result.Keys, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoIndexKeys *MongoIndexKeys) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexKeysARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoIndexKeys *MongoIndexKeys) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexKeysARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexKeysARM, got %T", armInput)
	}

	// Set property ‘Keys’:
	for _, item := range typedInput.Keys {
		mongoIndexKeys.Keys = append(mongoIndexKeys.Keys, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexKeys populates our MongoIndexKeys from the provided source MongoIndexKeys
func (mongoIndexKeys *MongoIndexKeys) AssignPropertiesFromMongoIndexKeys(source *v1alpha1api20210515storage.MongoIndexKeys) error {

	// Keys
	mongoIndexKeys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeys populates the provided destination MongoIndexKeys from our MongoIndexKeys
func (mongoIndexKeys *MongoIndexKeys) AssignPropertiesToMongoIndexKeys(destination *v1alpha1api20210515storage.MongoIndexKeys) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(mongoIndexKeys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndexKeys_Status struct {
	//Keys: List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `json:"keys,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndexKeys_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoIndexKeysStatus *MongoIndexKeys_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexKeys_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoIndexKeysStatus *MongoIndexKeys_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexKeys_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexKeys_StatusARM, got %T", armInput)
	}

	// Set property ‘Keys’:
	for _, item := range typedInput.Keys {
		mongoIndexKeysStatus.Keys = append(mongoIndexKeysStatus.Keys, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexKeysStatus populates our MongoIndexKeys_Status from the provided source MongoIndexKeys_Status
func (mongoIndexKeysStatus *MongoIndexKeys_Status) AssignPropertiesFromMongoIndexKeysStatus(source *v1alpha1api20210515storage.MongoIndexKeys_Status) error {

	// Keys
	mongoIndexKeysStatus.Keys = genruntime.CloneSliceOfString(source.Keys)

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeysStatus populates the provided destination MongoIndexKeys_Status from our MongoIndexKeys_Status
func (mongoIndexKeysStatus *MongoIndexKeys_Status) AssignPropertiesToMongoIndexKeysStatus(destination *v1alpha1api20210515storage.MongoIndexKeys_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(mongoIndexKeysStatus.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/MongoIndexOptions
type MongoIndexOptions struct {
	//ExpireAfterSeconds: Expire after seconds
	ExpireAfterSeconds *int `json:"expireAfterSeconds,omitempty"`

	//Unique: Is unique or not
	Unique *bool `json:"unique,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndexOptions{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (mongoIndexOptions *MongoIndexOptions) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if mongoIndexOptions == nil {
		return nil, nil
	}
	var result MongoIndexOptionsARM

	// Set property ‘ExpireAfterSeconds’:
	if mongoIndexOptions.ExpireAfterSeconds != nil {
		expireAfterSeconds := *mongoIndexOptions.ExpireAfterSeconds
		result.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if mongoIndexOptions.Unique != nil {
		unique := *mongoIndexOptions.Unique
		result.Unique = &unique
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoIndexOptions *MongoIndexOptions) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexOptionsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoIndexOptions *MongoIndexOptions) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexOptionsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexOptionsARM, got %T", armInput)
	}

	// Set property ‘ExpireAfterSeconds’:
	if typedInput.ExpireAfterSeconds != nil {
		expireAfterSeconds := *typedInput.ExpireAfterSeconds
		mongoIndexOptions.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if typedInput.Unique != nil {
		unique := *typedInput.Unique
		mongoIndexOptions.Unique = &unique
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexOptions populates our MongoIndexOptions from the provided source MongoIndexOptions
func (mongoIndexOptions *MongoIndexOptions) AssignPropertiesFromMongoIndexOptions(source *v1alpha1api20210515storage.MongoIndexOptions) error {

	// ExpireAfterSeconds
	mongoIndexOptions.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		mongoIndexOptions.Unique = &unique
	} else {
		mongoIndexOptions.Unique = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptions populates the provided destination MongoIndexOptions from our MongoIndexOptions
func (mongoIndexOptions *MongoIndexOptions) AssignPropertiesToMongoIndexOptions(destination *v1alpha1api20210515storage.MongoIndexOptions) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(mongoIndexOptions.ExpireAfterSeconds)

	// Unique
	if mongoIndexOptions.Unique != nil {
		unique := *mongoIndexOptions.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndexOptions_Status struct {
	//ExpireAfterSeconds: Expire after seconds
	ExpireAfterSeconds *int `json:"expireAfterSeconds,omitempty"`

	//Unique: Is unique or not
	Unique *bool `json:"unique,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndexOptions_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoIndexOptionsStatus *MongoIndexOptions_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexOptions_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoIndexOptionsStatus *MongoIndexOptions_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexOptions_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexOptions_StatusARM, got %T", armInput)
	}

	// Set property ‘ExpireAfterSeconds’:
	if typedInput.ExpireAfterSeconds != nil {
		expireAfterSeconds := *typedInput.ExpireAfterSeconds
		mongoIndexOptionsStatus.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if typedInput.Unique != nil {
		unique := *typedInput.Unique
		mongoIndexOptionsStatus.Unique = &unique
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexOptionsStatus populates our MongoIndexOptions_Status from the provided source MongoIndexOptions_Status
func (mongoIndexOptionsStatus *MongoIndexOptions_Status) AssignPropertiesFromMongoIndexOptionsStatus(source *v1alpha1api20210515storage.MongoIndexOptions_Status) error {

	// ExpireAfterSeconds
	mongoIndexOptionsStatus.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		mongoIndexOptionsStatus.Unique = &unique
	} else {
		mongoIndexOptionsStatus.Unique = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptionsStatus populates the provided destination MongoIndexOptions_Status from our MongoIndexOptions_Status
func (mongoIndexOptionsStatus *MongoIndexOptions_Status) AssignPropertiesToMongoIndexOptionsStatus(destination *v1alpha1api20210515storage.MongoIndexOptions_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(mongoIndexOptionsStatus.ExpireAfterSeconds)

	// Unique
	if mongoIndexOptionsStatus.Unique != nil {
		unique := *mongoIndexOptionsStatus.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollection{}, &MongodbDatabaseCollectionList{})
}
