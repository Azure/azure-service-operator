// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-05-15/cosmos-db.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}
type MongodbDatabaseCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabasesCollections_SPEC `json:"spec,omitempty"`
	Status            MongoDBCollection_Status                         `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollection{}

// GetConditions returns the conditions of the resource
func (collection *MongodbDatabaseCollection) GetConditions() conditions.Conditions {
	return collection.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (collection *MongodbDatabaseCollection) SetConditions(conditions conditions.Conditions) {
	collection.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbDatabaseCollection{}

// ConvertFrom populates our MongodbDatabaseCollection from the provided hub MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210515storage.MongodbDatabaseCollection)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/MongodbDatabaseCollection but received %T instead", hub)
	}

	return collection.AssignPropertiesFromMongodbDatabaseCollection(source)
}

// ConvertTo populates the provided hub MongodbDatabaseCollection from our MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210515storage.MongodbDatabaseCollection)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/MongodbDatabaseCollection but received %T instead", hub)
	}

	return collection.AssignPropertiesToMongodbDatabaseCollection(destination)
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollection,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollections,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabasecollections.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &MongodbDatabaseCollection{}

// Default applies defaults to the MongodbDatabaseCollection resource
func (collection *MongodbDatabaseCollection) Default() {
	collection.defaultImpl()
	var temp interface{} = collection
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (collection *MongodbDatabaseCollection) defaultAzureName() {
	if collection.Spec.AzureName == "" {
		collection.Spec.AzureName = collection.Name
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabaseCollection resource
func (collection *MongodbDatabaseCollection) defaultImpl() { collection.defaultAzureName() }

var _ genruntime.KubernetesResource = &MongodbDatabaseCollection{}

// AzureName returns the Azure name of the resource
func (collection *MongodbDatabaseCollection) AzureName() string {
	return collection.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (collection MongodbDatabaseCollection) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (collection *MongodbDatabaseCollection) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (collection *MongodbDatabaseCollection) GetSpec() genruntime.ConvertibleSpec {
	return &collection.Spec
}

// GetStatus returns the status of this resource
func (collection *MongodbDatabaseCollection) GetStatus() genruntime.ConvertibleStatus {
	return &collection.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (collection *MongodbDatabaseCollection) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (collection *MongodbDatabaseCollection) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MongoDBCollection_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (collection *MongodbDatabaseCollection) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(collection.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  collection.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (collection *MongodbDatabaseCollection) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MongoDBCollection_Status); ok {
		collection.Status = *st
		return nil
	}

	// Convert status to required version
	var st MongoDBCollection_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	collection.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollection,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollections,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabasecollections.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &MongodbDatabaseCollection{}

// ValidateCreate validates the creation of the resource
func (collection *MongodbDatabaseCollection) ValidateCreate() error {
	validations := collection.createValidations()
	var temp interface{} = collection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (collection *MongodbDatabaseCollection) ValidateDelete() error {
	validations := collection.deleteValidations()
	var temp interface{} = collection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (collection *MongodbDatabaseCollection) ValidateUpdate(old runtime.Object) error {
	validations := collection.updateValidations()
	var temp interface{} = collection
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (collection *MongodbDatabaseCollection) createValidations() []func() error {
	return []func() error{collection.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (collection *MongodbDatabaseCollection) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (collection *MongodbDatabaseCollection) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return collection.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (collection *MongodbDatabaseCollection) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&collection.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromMongodbDatabaseCollection populates our MongodbDatabaseCollection from the provided source MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) AssignPropertiesFromMongodbDatabaseCollection(source *v1alpha1api20210515storage.MongodbDatabaseCollection) error {

	// ObjectMeta
	collection.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsMongodbDatabasesCollections_SPEC
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC() to populate field Spec")
	}
	collection.Spec = spec

	// Status
	var status MongoDBCollection_Status
	err = status.AssignPropertiesFromMongoDBCollection_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollection_Status() to populate field Status")
	}
	collection.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabaseCollection populates the provided destination MongodbDatabaseCollection from our MongodbDatabaseCollection
func (collection *MongodbDatabaseCollection) AssignPropertiesToMongodbDatabaseCollection(destination *v1alpha1api20210515storage.MongodbDatabaseCollection) error {

	// ObjectMeta
	destination.ObjectMeta = *collection.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC
	err := collection.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.MongoDBCollection_Status
	err = collection.Status.AssignPropertiesToMongoDBCollection_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollection_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (collection *MongodbDatabaseCollection) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: collection.Spec.OriginalVersion(),
		Kind:    "MongodbDatabaseCollection",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-05-15/cosmos-db.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}
type MongodbDatabaseCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollection `json:"items"`
}

type DatabaseAccountsMongodbDatabasesCollections_SPEC struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: A key-value pair of options to be applied for the request. This
	//corresponds to the headers sent with the request.
	Options *CreateUpdateOptions_Spec `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	//Resource: The standard JSON format of a MongoDB collection
	Resource MongoDBCollectionResource_Spec `json:"resource"`
	Tags     map[string]string              `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsMongodbDatabasesCollections_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result DatabaseAccountsMongodbDatabasesCollections_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Location’:
	if spec.Location != nil {
		location := *spec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.Options != nil {
		optionsARM, err := (*spec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptions_SpecARM)
		result.Properties.Options = &options
	}
	resourceARM, err := spec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(MongoDBCollectionResource_SpecARM)

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsMongodbDatabasesCollections_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsMongodbDatabasesCollections_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsMongodbDatabasesCollections_SPECARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		spec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions_Spec
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		spec.Options = &options
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource MongoDBCollectionResource_Spec
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	spec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabasesCollections_SPEC{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabasesCollections_SPEC from the provided source
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollections_SPEC
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC{}
	err := spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC populates our DatabaseAccountsMongodbDatabasesCollections_SPEC from the provided source DatabaseAccountsMongodbDatabasesCollections_SPEC
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollections_SPEC(source *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC) error {

	// AzureName
	spec.AzureName = source.AzureName

	// Location
	spec.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions_Spec
		err := option.AssignPropertiesFromCreateUpdateOptions_Spec(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreateUpdateOptions_Spec() to populate field Options")
		}
		spec.Options = &option
	} else {
		spec.Options = nil
	}

	// Owner
	spec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionResource_Spec
		err := resource.AssignPropertiesFromMongoDBCollectionResource_Spec(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionResource_Spec() to populate field Resource")
		}
		spec.Resource = resource
	} else {
		spec.Resource = MongoDBCollectionResource_Spec{}
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC populates the provided destination DatabaseAccountsMongodbDatabasesCollections_SPEC from our DatabaseAccountsMongodbDatabasesCollections_SPEC
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollections_SPEC(destination *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollections_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = spec.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(spec.Location)

	// Options
	if spec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions_Spec
		err := spec.Options.AssignPropertiesToCreateUpdateOptions_Spec(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreateUpdateOptions_Spec() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.MongoDBCollectionResource_Spec
	err := spec.Resource.AssignPropertiesToMongoDBCollectionResource_Spec(&resource)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionResource_Spec() to populate field Resource")
	}
	destination.Resource = &resource

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *DatabaseAccountsMongodbDatabasesCollections_SPEC) SetAzureName(azureName string) {
	spec.AzureName = azureName
}

type MongoDBCollection_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name *string `json:"name,omitempty"`

	//Options: A key-value pair of options to be applied for the request. This
	//corresponds to the headers sent with the request.
	Options *CreateUpdateOptions_Status `json:"options,omitempty"`

	//Resource: The standard JSON format of a MongoDB collection
	Resource *MongoDBCollectionResource_Status `json:"resource,omitempty"`
	Tags     map[string]string                 `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MongoDBCollection_Status{}

// ConvertStatusFrom populates our MongoDBCollection_Status from the provided source
func (collection *MongoDBCollection_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.MongoDBCollection_Status)
	if ok {
		// Populate our instance from source
		return collection.AssignPropertiesFromMongoDBCollection_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.MongoDBCollection_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = collection.AssignPropertiesFromMongoDBCollection_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our MongoDBCollection_Status
func (collection *MongoDBCollection_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.MongoDBCollection_Status)
	if ok {
		// Populate destination from our instance
		return collection.AssignPropertiesToMongoDBCollection_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.MongoDBCollection_Status{}
	err := collection.AssignPropertiesToMongoDBCollection_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &MongoDBCollection_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (collection *MongoDBCollection_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollection_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (collection *MongoDBCollection_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollection_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollection_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		collection.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		collection.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		collection.Name = &name
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 CreateUpdateOptions_Status
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			collection.Options = &options
		}
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp MongoDBCollectionResource_Status
		var temp1 MongoDBCollectionResource_Status
		err := temp1.PopulateFromARM(owner, typedInput.Properties.Resource)
		if err != nil {
			return err
		}
		temp = temp1
		collection.Resource = &temp
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		collection.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			collection.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		collection.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollection_Status populates our MongoDBCollection_Status from the provided source MongoDBCollection_Status
func (collection *MongoDBCollection_Status) AssignPropertiesFromMongoDBCollection_Status(source *v1alpha1api20210515storage.MongoDBCollection_Status) error {

	// Conditions
	collection.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	collection.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	collection.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	collection.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions_Status
		err := option.AssignPropertiesFromCreateUpdateOptions_Status(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromCreateUpdateOptions_Status() to populate field Options")
		}
		collection.Options = &option
	} else {
		collection.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBCollectionResource_Status
		err := resource.AssignPropertiesFromMongoDBCollectionResource_Status(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoDBCollectionResource_Status() to populate field Resource")
		}
		collection.Resource = &resource
	} else {
		collection.Resource = nil
	}

	// Tags
	collection.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	collection.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollection_Status populates the provided destination MongoDBCollection_Status from our MongoDBCollection_Status
func (collection *MongoDBCollection_Status) AssignPropertiesToMongoDBCollection_Status(destination *v1alpha1api20210515storage.MongoDBCollection_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(collection.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(collection.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(collection.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(collection.Name)

	// Options
	if collection.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions_Status
		err := collection.Options.AssignPropertiesToCreateUpdateOptions_Status(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToCreateUpdateOptions_Status() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if collection.Resource != nil {
		var resource v1alpha1api20210515storage.MongoDBCollectionResource_Status
		err := collection.Resource.AssignPropertiesToMongoDBCollectionResource_Status(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoDBCollectionResource_Status() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(collection.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(collection.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoDBCollectionResource_Spec struct {
	//AnalyticalStorageTtl: Analytical TTL.
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB MongoDB collection
	Id string `json:"id"`

	//Indexes: List of index keys
	Indexes []MongoIndex_Spec `json:"indexes,omitempty"`

	//ShardKey: A key-value pair of shard keys to be applied for the request.
	ShardKey map[string]string `json:"shardKey,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoDBCollectionResource_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *MongoDBCollectionResource_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result MongoDBCollectionResource_SpecARM

	// Set property ‘AnalyticalStorageTtl’:
	if resource.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *resource.AnalyticalStorageTtl
		result.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	result.Id = resource.Id

	// Set property ‘Indexes’:
	for _, item := range resource.Indexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Indexes = append(result.Indexes, itemARM.(MongoIndex_SpecARM))
	}

	// Set property ‘ShardKey’:
	if resource.ShardKey != nil {
		result.ShardKey = make(map[string]string)
		for key, value := range resource.ShardKey {
			result.ShardKey[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *MongoDBCollectionResource_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionResource_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *MongoDBCollectionResource_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionResource_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionResource_SpecARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		resource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	resource.Id = typedInput.Id

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 MongoIndex_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resource.Indexes = append(resource.Indexes, item1)
	}

	// Set property ‘ShardKey’:
	if typedInput.ShardKey != nil {
		resource.ShardKey = make(map[string]string)
		for key, value := range typedInput.ShardKey {
			resource.ShardKey[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionResource_Spec populates our MongoDBCollectionResource_Spec from the provided source MongoDBCollectionResource_Spec
func (resource *MongoDBCollectionResource_Spec) AssignPropertiesFromMongoDBCollectionResource_Spec(source *v1alpha1api20210515storage.MongoDBCollectionResource_Spec) error {

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Id
	resource.Id = genruntime.GetOptionalStringValue(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex_Spec, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex_Spec
			err := indexLocal.AssignPropertiesFromMongoIndex_Spec(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromMongoIndex_Spec() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		resource.Indexes = indexList
	} else {
		resource.Indexes = nil
	}

	// ShardKey
	resource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionResource_Spec populates the provided destination MongoDBCollectionResource_Spec from our MongoDBCollectionResource_Spec
func (resource *MongoDBCollectionResource_Spec) AssignPropertiesToMongoDBCollectionResource_Spec(destination *v1alpha1api20210515storage.MongoDBCollectionResource_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// Id
	id := resource.Id
	destination.Id = &id

	// Indexes
	if resource.Indexes != nil {
		indexList := make([]v1alpha1api20210515storage.MongoIndex_Spec, len(resource.Indexes))
		for index, indexItem := range resource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v1alpha1api20210515storage.MongoIndex_Spec
			err := indexItem.AssignPropertiesToMongoIndex_Spec(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToMongoIndex_Spec() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(resource.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoDBCollectionResource_Status struct {
	//AnalyticalStorageTtl: Analytical TTL.
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB MongoDB collection
	Id string `json:"id"`

	//Indexes: List of index keys
	Indexes []MongoIndex_Status `json:"indexes,omitempty"`

	//ShardKey: A key-value pair of shard keys to be applied for the request.
	ShardKey map[string]string `json:"shardKey,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoDBCollectionResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *MongoDBCollectionResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBCollectionResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *MongoDBCollectionResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBCollectionResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBCollectionResource_StatusARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		resource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘Id’:
	resource.Id = typedInput.Id

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 MongoIndex_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resource.Indexes = append(resource.Indexes, item1)
	}

	// Set property ‘ShardKey’:
	if typedInput.ShardKey != nil {
		resource.ShardKey = make(map[string]string)
		for key, value := range typedInput.ShardKey {
			resource.ShardKey[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBCollectionResource_Status populates our MongoDBCollectionResource_Status from the provided source MongoDBCollectionResource_Status
func (resource *MongoDBCollectionResource_Status) AssignPropertiesFromMongoDBCollectionResource_Status(source *v1alpha1api20210515storage.MongoDBCollectionResource_Status) error {

	// AnalyticalStorageTtl
	resource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// Id
	resource.Id = genruntime.GetOptionalStringValue(source.Id)

	// Indexes
	if source.Indexes != nil {
		indexList := make([]MongoIndex_Status, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal MongoIndex_Status
			err := indexLocal.AssignPropertiesFromMongoIndex_Status(&indexItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromMongoIndex_Status() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		resource.Indexes = indexList
	} else {
		resource.Indexes = nil
	}

	// ShardKey
	resource.ShardKey = genruntime.CloneMapOfStringToString(source.ShardKey)

	// No error
	return nil
}

// AssignPropertiesToMongoDBCollectionResource_Status populates the provided destination MongoDBCollectionResource_Status from our MongoDBCollectionResource_Status
func (resource *MongoDBCollectionResource_Status) AssignPropertiesToMongoDBCollectionResource_Status(destination *v1alpha1api20210515storage.MongoDBCollectionResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(resource.AnalyticalStorageTtl)

	// Id
	id := resource.Id
	destination.Id = &id

	// Indexes
	if resource.Indexes != nil {
		indexList := make([]v1alpha1api20210515storage.MongoIndex_Status, len(resource.Indexes))
		for index, indexItem := range resource.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v1alpha1api20210515storage.MongoIndex_Status
			err := indexItem.AssignPropertiesToMongoIndex_Status(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToMongoIndex_Status() to populate field Indexes")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// ShardKey
	destination.ShardKey = genruntime.CloneMapOfStringToString(resource.ShardKey)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndex_Spec struct {
	//Key: Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeys_Spec `json:"key,omitempty"`

	//Options: Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptions_Spec `json:"options,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndex_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (index *MongoIndex_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if index == nil {
		return nil, nil
	}
	var result MongoIndex_SpecARM

	// Set property ‘Key’:
	if index.Key != nil {
		keyARM, err := (*index.Key).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		key := keyARM.(MongoIndexKeys_SpecARM)
		result.Key = &key
	}

	// Set property ‘Options’:
	if index.Options != nil {
		optionsARM, err := (*index.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(MongoIndexOptions_SpecARM)
		result.Options = &options
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (index *MongoIndex_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndex_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (index *MongoIndex_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndex_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndex_SpecARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		var key1 MongoIndexKeys_Spec
		err := key1.PopulateFromARM(owner, *typedInput.Key)
		if err != nil {
			return err
		}
		key := key1
		index.Key = &key
	}

	// Set property ‘Options’:
	if typedInput.Options != nil {
		var options1 MongoIndexOptions_Spec
		err := options1.PopulateFromARM(owner, *typedInput.Options)
		if err != nil {
			return err
		}
		options := options1
		index.Options = &options
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndex_Spec populates our MongoIndex_Spec from the provided source MongoIndex_Spec
func (index *MongoIndex_Spec) AssignPropertiesFromMongoIndex_Spec(source *v1alpha1api20210515storage.MongoIndex_Spec) error {

	// Key
	if source.Key != nil {
		var key MongoIndexKeys_Spec
		err := key.AssignPropertiesFromMongoIndexKeys_Spec(source.Key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexKeys_Spec() to populate field Key")
		}
		index.Key = &key
	} else {
		index.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions_Spec
		err := option.AssignPropertiesFromMongoIndexOptions_Spec(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexOptions_Spec() to populate field Options")
		}
		index.Options = &option
	} else {
		index.Options = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndex_Spec populates the provided destination MongoIndex_Spec from our MongoIndex_Spec
func (index *MongoIndex_Spec) AssignPropertiesToMongoIndex_Spec(destination *v1alpha1api20210515storage.MongoIndex_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	if index.Key != nil {
		var key v1alpha1api20210515storage.MongoIndexKeys_Spec
		err := index.Key.AssignPropertiesToMongoIndexKeys_Spec(&key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexKeys_Spec() to populate field Key")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if index.Options != nil {
		var option v1alpha1api20210515storage.MongoIndexOptions_Spec
		err := index.Options.AssignPropertiesToMongoIndexOptions_Spec(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexOptions_Spec() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndex_Status struct {
	//Key: Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeys_Status `json:"key,omitempty"`

	//Options: Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptions_Status `json:"options,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndex_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (index *MongoIndex_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndex_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (index *MongoIndex_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndex_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndex_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		var key1 MongoIndexKeys_Status
		err := key1.PopulateFromARM(owner, *typedInput.Key)
		if err != nil {
			return err
		}
		key := key1
		index.Key = &key
	}

	// Set property ‘Options’:
	if typedInput.Options != nil {
		var options1 MongoIndexOptions_Status
		err := options1.PopulateFromARM(owner, *typedInput.Options)
		if err != nil {
			return err
		}
		options := options1
		index.Options = &options
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndex_Status populates our MongoIndex_Status from the provided source MongoIndex_Status
func (index *MongoIndex_Status) AssignPropertiesFromMongoIndex_Status(source *v1alpha1api20210515storage.MongoIndex_Status) error {

	// Key
	if source.Key != nil {
		var key MongoIndexKeys_Status
		err := key.AssignPropertiesFromMongoIndexKeys_Status(source.Key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexKeys_Status() to populate field Key")
		}
		index.Key = &key
	} else {
		index.Key = nil
	}

	// Options
	if source.Options != nil {
		var option MongoIndexOptions_Status
		err := option.AssignPropertiesFromMongoIndexOptions_Status(source.Options)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMongoIndexOptions_Status() to populate field Options")
		}
		index.Options = &option
	} else {
		index.Options = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndex_Status populates the provided destination MongoIndex_Status from our MongoIndex_Status
func (index *MongoIndex_Status) AssignPropertiesToMongoIndex_Status(destination *v1alpha1api20210515storage.MongoIndex_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	if index.Key != nil {
		var key v1alpha1api20210515storage.MongoIndexKeys_Status
		err := index.Key.AssignPropertiesToMongoIndexKeys_Status(&key)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexKeys_Status() to populate field Key")
		}
		destination.Key = &key
	} else {
		destination.Key = nil
	}

	// Options
	if index.Options != nil {
		var option v1alpha1api20210515storage.MongoIndexOptions_Status
		err := index.Options.AssignPropertiesToMongoIndexOptions_Status(&option)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMongoIndexOptions_Status() to populate field Options")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndexKeys_Spec struct {
	//Keys: List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `json:"keys,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndexKeys_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (keys *MongoIndexKeys_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if keys == nil {
		return nil, nil
	}
	var result MongoIndexKeys_SpecARM

	// Set property ‘Keys’:
	for _, item := range keys.Keys {
		result.Keys = append(result.Keys, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keys *MongoIndexKeys_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexKeys_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keys *MongoIndexKeys_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexKeys_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexKeys_SpecARM, got %T", armInput)
	}

	// Set property ‘Keys’:
	for _, item := range typedInput.Keys {
		keys.Keys = append(keys.Keys, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexKeys_Spec populates our MongoIndexKeys_Spec from the provided source MongoIndexKeys_Spec
func (keys *MongoIndexKeys_Spec) AssignPropertiesFromMongoIndexKeys_Spec(source *v1alpha1api20210515storage.MongoIndexKeys_Spec) error {

	// Keys
	keys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeys_Spec populates the provided destination MongoIndexKeys_Spec from our MongoIndexKeys_Spec
func (keys *MongoIndexKeys_Spec) AssignPropertiesToMongoIndexKeys_Spec(destination *v1alpha1api20210515storage.MongoIndexKeys_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(keys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndexKeys_Status struct {
	//Keys: List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `json:"keys,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndexKeys_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keys *MongoIndexKeys_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexKeys_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keys *MongoIndexKeys_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexKeys_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexKeys_StatusARM, got %T", armInput)
	}

	// Set property ‘Keys’:
	for _, item := range typedInput.Keys {
		keys.Keys = append(keys.Keys, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexKeys_Status populates our MongoIndexKeys_Status from the provided source MongoIndexKeys_Status
func (keys *MongoIndexKeys_Status) AssignPropertiesFromMongoIndexKeys_Status(source *v1alpha1api20210515storage.MongoIndexKeys_Status) error {

	// Keys
	keys.Keys = genruntime.CloneSliceOfString(source.Keys)

	// No error
	return nil
}

// AssignPropertiesToMongoIndexKeys_Status populates the provided destination MongoIndexKeys_Status from our MongoIndexKeys_Status
func (keys *MongoIndexKeys_Status) AssignPropertiesToMongoIndexKeys_Status(destination *v1alpha1api20210515storage.MongoIndexKeys_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keys
	destination.Keys = genruntime.CloneSliceOfString(keys.Keys)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndexOptions_Spec struct {
	//ExpireAfterSeconds: Expire after seconds
	ExpireAfterSeconds *int `json:"expireAfterSeconds,omitempty"`

	//Unique: Is unique or not
	Unique *bool `json:"unique,omitempty"`
}

var _ genruntime.ARMTransformer = &MongoIndexOptions_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (options *MongoIndexOptions_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if options == nil {
		return nil, nil
	}
	var result MongoIndexOptions_SpecARM

	// Set property ‘ExpireAfterSeconds’:
	if options.ExpireAfterSeconds != nil {
		expireAfterSeconds := *options.ExpireAfterSeconds
		result.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if options.Unique != nil {
		unique := *options.Unique
		result.Unique = &unique
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (options *MongoIndexOptions_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexOptions_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (options *MongoIndexOptions_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexOptions_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexOptions_SpecARM, got %T", armInput)
	}

	// Set property ‘ExpireAfterSeconds’:
	if typedInput.ExpireAfterSeconds != nil {
		expireAfterSeconds := *typedInput.ExpireAfterSeconds
		options.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if typedInput.Unique != nil {
		unique := *typedInput.Unique
		options.Unique = &unique
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexOptions_Spec populates our MongoIndexOptions_Spec from the provided source MongoIndexOptions_Spec
func (options *MongoIndexOptions_Spec) AssignPropertiesFromMongoIndexOptions_Spec(source *v1alpha1api20210515storage.MongoIndexOptions_Spec) error {

	// ExpireAfterSeconds
	options.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		options.Unique = &unique
	} else {
		options.Unique = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptions_Spec populates the provided destination MongoIndexOptions_Spec from our MongoIndexOptions_Spec
func (options *MongoIndexOptions_Spec) AssignPropertiesToMongoIndexOptions_Spec(destination *v1alpha1api20210515storage.MongoIndexOptions_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(options.ExpireAfterSeconds)

	// Unique
	if options.Unique != nil {
		unique := *options.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoIndexOptions_Status struct {
	//ExpireAfterSeconds: Expire after seconds
	ExpireAfterSeconds *int `json:"expireAfterSeconds,omitempty"`

	//Unique: Is unique or not
	Unique *bool `json:"unique,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoIndexOptions_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (options *MongoIndexOptions_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoIndexOptions_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (options *MongoIndexOptions_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoIndexOptions_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoIndexOptions_StatusARM, got %T", armInput)
	}

	// Set property ‘ExpireAfterSeconds’:
	if typedInput.ExpireAfterSeconds != nil {
		expireAfterSeconds := *typedInput.ExpireAfterSeconds
		options.ExpireAfterSeconds = &expireAfterSeconds
	}

	// Set property ‘Unique’:
	if typedInput.Unique != nil {
		unique := *typedInput.Unique
		options.Unique = &unique
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoIndexOptions_Status populates our MongoIndexOptions_Status from the provided source MongoIndexOptions_Status
func (options *MongoIndexOptions_Status) AssignPropertiesFromMongoIndexOptions_Status(source *v1alpha1api20210515storage.MongoIndexOptions_Status) error {

	// ExpireAfterSeconds
	options.ExpireAfterSeconds = genruntime.ClonePointerToInt(source.ExpireAfterSeconds)

	// Unique
	if source.Unique != nil {
		unique := *source.Unique
		options.Unique = &unique
	} else {
		options.Unique = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoIndexOptions_Status populates the provided destination MongoIndexOptions_Status from our MongoIndexOptions_Status
func (options *MongoIndexOptions_Status) AssignPropertiesToMongoIndexOptions_Status(destination *v1alpha1api20210515storage.MongoIndexOptions_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpireAfterSeconds
	destination.ExpireAfterSeconds = genruntime.ClonePointerToInt(options.ExpireAfterSeconds)

	// Unique
	if options.Unique != nil {
		unique := *options.Unique
		destination.Unique = &unique
	} else {
		destination.Unique = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollection{}, &MongodbDatabaseCollectionList{})
}
