// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM, DatabaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM(subject DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM instances for property testing - lazily
//instantiated by DatabaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator()
var databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator != nil {
		return databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM(generators)
	databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM(generators)
	databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM{}), generators)

	return databaseAccountsSqlDatabasesContainersTriggersSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggersSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = SqlTriggerCreateUpdatePropertiesSpecARMGenerator()
}

func Test_SqlTriggerCreateUpdateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerCreateUpdateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerCreateUpdatePropertiesSpecARM, SqlTriggerCreateUpdatePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerCreateUpdatePropertiesSpecARM runs a test to see if a specific instance of SqlTriggerCreateUpdateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerCreateUpdatePropertiesSpecARM(subject SqlTriggerCreateUpdateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerCreateUpdateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerCreateUpdateProperties_SpecARM instances for property testing - lazily instantiated by
//SqlTriggerCreateUpdatePropertiesSpecARMGenerator()
var sqlTriggerCreateUpdatePropertiesSpecARMGenerator gopter.Gen

// SqlTriggerCreateUpdatePropertiesSpecARMGenerator returns a generator of SqlTriggerCreateUpdateProperties_SpecARM instances for property testing.
func SqlTriggerCreateUpdatePropertiesSpecARMGenerator() gopter.Gen {
	if sqlTriggerCreateUpdatePropertiesSpecARMGenerator != nil {
		return sqlTriggerCreateUpdatePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdatePropertiesSpecARM(generators)
	sqlTriggerCreateUpdatePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerCreateUpdateProperties_SpecARM{}), generators)

	return sqlTriggerCreateUpdatePropertiesSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdatePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlTriggerCreateUpdatePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsSpecARMGenerator())
	gens["Resource"] = SqlTriggerResourceSpecARMGenerator()
}

func Test_SqlTriggerResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerResourceSpecARM, SqlTriggerResourceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerResourceSpecARM runs a test to see if a specific instance of SqlTriggerResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerResourceSpecARM(subject SqlTriggerResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerResource_SpecARM instances for property testing - lazily instantiated by
//SqlTriggerResourceSpecARMGenerator()
var sqlTriggerResourceSpecARMGenerator gopter.Gen

// SqlTriggerResourceSpecARMGenerator returns a generator of SqlTriggerResource_SpecARM instances for property testing.
func SqlTriggerResourceSpecARMGenerator() gopter.Gen {
	if sqlTriggerResourceSpecARMGenerator != nil {
		return sqlTriggerResourceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerResourceSpecARM(generators)
	sqlTriggerResourceSpecARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerResource_SpecARM{}), generators)

	return sqlTriggerResourceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlTriggerResourceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlTriggerResourceSpecARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
	gens["TriggerOperation"] = gen.PtrOf(gen.OneConstOf(
		SqlTriggerResourceSpecTriggerOperationAll,
		SqlTriggerResourceSpecTriggerOperationCreate,
		SqlTriggerResourceSpecTriggerOperationDelete,
		SqlTriggerResourceSpecTriggerOperationReplace,
		SqlTriggerResourceSpecTriggerOperationUpdate))
	gens["TriggerType"] = gen.PtrOf(gen.OneConstOf(SqlTriggerResourceSpecTriggerTypePost, SqlTriggerResourceSpecTriggerTypePre))
}
