// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM, DatabaseAccountsSqlDatabasesContainersTriggers_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM(subject DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM instances for property testing - lazily
//instantiated by DatabaseAccountsSqlDatabasesContainersTriggers_SPECARMGenerator()
var databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersTriggers_SPECARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersTriggers_SPECARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator != nil {
		return databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM(generators)
	databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM(generators)
	databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersTriggers_SPECARM{}), generators)

	return databaseAccountsSqlDatabasesContainersTriggers_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersTriggers_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = SqlTriggerProperties_SpecARMGenerator()
}

func Test_SqlTriggerProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerProperties_SpecARM, SqlTriggerProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerProperties_SpecARM runs a test to see if a specific instance of SqlTriggerProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerProperties_SpecARM(subject SqlTriggerProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerProperties_SpecARM instances for property testing - lazily instantiated by
//SqlTriggerProperties_SpecARMGenerator()
var sqlTriggerProperties_specARMGenerator gopter.Gen

// SqlTriggerProperties_SpecARMGenerator returns a generator of SqlTriggerProperties_SpecARM instances for property testing.
func SqlTriggerProperties_SpecARMGenerator() gopter.Gen {
	if sqlTriggerProperties_specARMGenerator != nil {
		return sqlTriggerProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlTriggerProperties_SpecARM(generators)
	sqlTriggerProperties_specARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerProperties_SpecARM{}), generators)

	return sqlTriggerProperties_specARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlTriggerProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlTriggerProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecARMGenerator())
	gens["Resource"] = SqlTriggerResource_SpecARMGenerator()
}

func Test_SqlTriggerResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlTriggerResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlTriggerResource_SpecARM, SqlTriggerResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlTriggerResource_SpecARM runs a test to see if a specific instance of SqlTriggerResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlTriggerResource_SpecARM(subject SqlTriggerResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlTriggerResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlTriggerResource_SpecARM instances for property testing - lazily instantiated by
//SqlTriggerResource_SpecARMGenerator()
var sqlTriggerResource_specARMGenerator gopter.Gen

// SqlTriggerResource_SpecARMGenerator returns a generator of SqlTriggerResource_SpecARM instances for property testing.
func SqlTriggerResource_SpecARMGenerator() gopter.Gen {
	if sqlTriggerResource_specARMGenerator != nil {
		return sqlTriggerResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlTriggerResource_SpecARM(generators)
	sqlTriggerResource_specARMGenerator = gen.Struct(reflect.TypeOf(SqlTriggerResource_SpecARM{}), generators)

	return sqlTriggerResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlTriggerResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlTriggerResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
	gens["TriggerOperation"] = gen.PtrOf(gen.OneConstOf(
		SqlTriggerResource_TriggerOperation_SpecAll,
		SqlTriggerResource_TriggerOperation_SpecCreate,
		SqlTriggerResource_TriggerOperation_SpecDelete,
		SqlTriggerResource_TriggerOperation_SpecReplace,
		SqlTriggerResource_TriggerOperation_SpecUpdate))
	gens["TriggerType"] = gen.PtrOf(gen.OneConstOf(SqlTriggerResource_TriggerType_SpecPost, SqlTriggerResource_TriggerType_SpecPre))
}
