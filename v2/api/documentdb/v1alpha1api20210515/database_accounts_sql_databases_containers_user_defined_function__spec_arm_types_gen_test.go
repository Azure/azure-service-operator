// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM, DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM(subject DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM instances for property testing -
//lazily instantiated by DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARMGenerator()
var databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator gopter.Gen

// DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARMGenerator returns a generator of DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM instances for property testing.
// We first initialize databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator != nil {
		return databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM(generators)
	databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM(generators)
	databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM{}), generators)

	return databaseAccountsSqlDatabasesContainersUserDefinedFunction_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabasesContainersUserDefinedFunction_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = SqlUserDefinedFunctionPropertiesARMGenerator()
}

func Test_SqlUserDefinedFunctionPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionPropertiesARM, SqlUserDefinedFunctionPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionPropertiesARM runs a test to see if a specific instance of SqlUserDefinedFunctionPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionPropertiesARM(subject SqlUserDefinedFunctionPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionPropertiesARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionPropertiesARMGenerator()
var sqlUserDefinedFunctionPropertiesARMGenerator gopter.Gen

// SqlUserDefinedFunctionPropertiesARMGenerator returns a generator of SqlUserDefinedFunctionPropertiesARM instances for property testing.
func SqlUserDefinedFunctionPropertiesARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionPropertiesARMGenerator != nil {
		return sqlUserDefinedFunctionPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionPropertiesARM(generators)
	sqlUserDefinedFunctionPropertiesARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionPropertiesARM{}), generators)

	return sqlUserDefinedFunctionPropertiesARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionPropertiesARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsARMGenerator())
	gens["Resource"] = SqlUserDefinedFunctionResourceARMGenerator()
}

func Test_SqlUserDefinedFunctionResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionResourceARM, SqlUserDefinedFunctionResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionResourceARM runs a test to see if a specific instance of SqlUserDefinedFunctionResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionResourceARM(subject SqlUserDefinedFunctionResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionResourceARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionResourceARMGenerator()
var sqlUserDefinedFunctionResourceARMGenerator gopter.Gen

// SqlUserDefinedFunctionResourceARMGenerator returns a generator of SqlUserDefinedFunctionResourceARM instances for property testing.
func SqlUserDefinedFunctionResourceARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionResourceARMGenerator != nil {
		return sqlUserDefinedFunctionResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResourceARM(generators)
	sqlUserDefinedFunctionResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionResourceARM{}), generators)

	return sqlUserDefinedFunctionResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
