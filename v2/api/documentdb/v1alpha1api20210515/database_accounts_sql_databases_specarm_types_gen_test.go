// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsSqlDatabases_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsSqlDatabases_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsSqlDatabases_SPECARM, DatabaseAccountsSqlDatabases_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsSqlDatabases_SPECARM runs a test to see if a specific instance of DatabaseAccountsSqlDatabases_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsSqlDatabases_SPECARM(subject DatabaseAccountsSqlDatabases_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsSqlDatabases_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsSqlDatabases_SPECARM instances for property testing - lazily instantiated by
//DatabaseAccountsSqlDatabases_SPECARMGenerator()
var databaseAccountsSqlDatabases_specarmGenerator gopter.Gen

// DatabaseAccountsSqlDatabases_SPECARMGenerator returns a generator of DatabaseAccountsSqlDatabases_SPECARM instances for property testing.
// We first initialize databaseAccountsSqlDatabases_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsSqlDatabases_SPECARMGenerator() gopter.Gen {
	if databaseAccountsSqlDatabases_specarmGenerator != nil {
		return databaseAccountsSqlDatabases_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM(generators)
	databaseAccountsSqlDatabases_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabases_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM(generators)
	databaseAccountsSqlDatabases_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsSqlDatabases_SPECARM{}), generators)

	return databaseAccountsSqlDatabases_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsSqlDatabases_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = SqlDatabaseCreateUpdateProperties_SpecARMGenerator()
}

func Test_SqlDatabaseCreateUpdateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_SpecARM, SqlDatabaseCreateUpdateProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_SpecARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_SpecARM(subject SqlDatabaseCreateUpdateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateProperties_SpecARM instances for property testing - lazily instantiated by
//SqlDatabaseCreateUpdateProperties_SpecARMGenerator()
var sqlDatabaseCreateUpdateProperties_specARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateProperties_SpecARMGenerator returns a generator of SqlDatabaseCreateUpdateProperties_SpecARM instances for property testing.
func SqlDatabaseCreateUpdateProperties_SpecARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateProperties_specARMGenerator != nil {
		return sqlDatabaseCreateUpdateProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_SpecARM(generators)
	sqlDatabaseCreateUpdateProperties_specARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateProperties_SpecARM{}), generators)

	return sqlDatabaseCreateUpdateProperties_specARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecARMGenerator())
	gens["Resource"] = SqlDatabaseResource_SpecARMGenerator()
}

func Test_SqlDatabaseResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_SpecARM, SqlDatabaseResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_SpecARM runs a test to see if a specific instance of SqlDatabaseResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_SpecARM(subject SqlDatabaseResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_SpecARM instances for property testing - lazily instantiated by
//SqlDatabaseResource_SpecARMGenerator()
var sqlDatabaseResource_specARMGenerator gopter.Gen

// SqlDatabaseResource_SpecARMGenerator returns a generator of SqlDatabaseResource_SpecARM instances for property testing.
func SqlDatabaseResource_SpecARMGenerator() gopter.Gen {
	if sqlDatabaseResource_specARMGenerator != nil {
		return sqlDatabaseResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_SpecARM(generators)
	sqlDatabaseResource_specARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_SpecARM{}), generators)

	return sqlDatabaseResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
