// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers_triggers
type SqlDatabaseContainerTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsSqlDatabasesContainersTriggers_Spec `json:"spec,omitempty"`
	Status            SqlTriggerGetResults_Status                         `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainerTrigger{}

// GetConditions returns the conditions of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) GetConditions() conditions.Conditions {
	return sqlDatabaseContainerTrigger.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) SetConditions(conditions conditions.Conditions) {
	sqlDatabaseContainerTrigger.Status.Conditions = conditions
}

var _ conversion.Convertible = &SqlDatabaseContainerTrigger{}

// ConvertFrom populates our SqlDatabaseContainerTrigger from the provided hub SqlDatabaseContainerTrigger
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210515storage.SqlDatabaseContainerTrigger)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/SqlDatabaseContainerTrigger but received %T instead", hub)
	}

	return sqlDatabaseContainerTrigger.AssignPropertiesFromSqlDatabaseContainerTrigger(source)
}

// ConvertTo populates the provided hub SqlDatabaseContainerTrigger from our SqlDatabaseContainerTrigger
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210515storage.SqlDatabaseContainerTrigger)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/SqlDatabaseContainerTrigger but received %T instead", hub)
	}

	return sqlDatabaseContainerTrigger.AssignPropertiesToSqlDatabaseContainerTrigger(destination)
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainertrigger,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=sqldatabasecontainertriggers,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.sqldatabasecontainertriggers.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &SqlDatabaseContainerTrigger{}

// Default applies defaults to the SqlDatabaseContainerTrigger resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) Default() {
	sqlDatabaseContainerTrigger.defaultImpl()
	var temp interface{} = sqlDatabaseContainerTrigger
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) defaultAzureName() {
	if sqlDatabaseContainerTrigger.Spec.AzureName == "" {
		sqlDatabaseContainerTrigger.Spec.AzureName = sqlDatabaseContainerTrigger.Name
	}
}

// defaultImpl applies the code generated defaults to the SqlDatabaseContainerTrigger resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) defaultImpl() {
	sqlDatabaseContainerTrigger.defaultAzureName()
}

var _ genruntime.KubernetesResource = &SqlDatabaseContainerTrigger{}

// AzureName returns the Azure name of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) AzureName() string {
	return sqlDatabaseContainerTrigger.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (sqlDatabaseContainerTrigger SqlDatabaseContainerTrigger) GetAPIVersion() string {
	return "2021-05-15"
}

// GetResourceKind returns the kind of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) GetSpec() genruntime.ConvertibleSpec {
	return &sqlDatabaseContainerTrigger.Spec
}

// GetStatus returns the status of this resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) GetStatus() genruntime.ConvertibleStatus {
	return &sqlDatabaseContainerTrigger.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
}

// NewEmptyStatus returns a new empty (blank) status
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlTriggerGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(sqlDatabaseContainerTrigger.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  sqlDatabaseContainerTrigger.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlTriggerGetResults_Status); ok {
		sqlDatabaseContainerTrigger.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlTriggerGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	sqlDatabaseContainerTrigger.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainertrigger,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=sqldatabasecontainertriggers,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.sqldatabasecontainertriggers.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &SqlDatabaseContainerTrigger{}

// ValidateCreate validates the creation of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) ValidateCreate() error {
	validations := sqlDatabaseContainerTrigger.createValidations()
	var temp interface{} = sqlDatabaseContainerTrigger
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) ValidateDelete() error {
	validations := sqlDatabaseContainerTrigger.deleteValidations()
	var temp interface{} = sqlDatabaseContainerTrigger
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) ValidateUpdate(old runtime.Object) error {
	validations := sqlDatabaseContainerTrigger.updateValidations()
	var temp interface{} = sqlDatabaseContainerTrigger
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) createValidations() []func() error {
	return []func() error{sqlDatabaseContainerTrigger.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return sqlDatabaseContainerTrigger.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&sqlDatabaseContainerTrigger.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromSqlDatabaseContainerTrigger populates our SqlDatabaseContainerTrigger from the provided source SqlDatabaseContainerTrigger
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) AssignPropertiesFromSqlDatabaseContainerTrigger(source *v1alpha1api20210515storage.SqlDatabaseContainerTrigger) error {

	// ObjectMeta
	sqlDatabaseContainerTrigger.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsSqlDatabasesContainersTriggers_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersTriggersSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersTriggersSpec()")
	}
	sqlDatabaseContainerTrigger.Spec = spec

	// Status
	var status SqlTriggerGetResults_Status
	err = status.AssignPropertiesFromSqlTriggerGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSqlTriggerGetResultsStatus()")
	}
	sqlDatabaseContainerTrigger.Status = status

	// No error
	return nil
}

// AssignPropertiesToSqlDatabaseContainerTrigger populates the provided destination SqlDatabaseContainerTrigger from our SqlDatabaseContainerTrigger
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) AssignPropertiesToSqlDatabaseContainerTrigger(destination *v1alpha1api20210515storage.SqlDatabaseContainerTrigger) error {

	// ObjectMeta
	destination.ObjectMeta = *sqlDatabaseContainerTrigger.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec
	err := sqlDatabaseContainerTrigger.Spec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersTriggersSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsSqlDatabasesContainersTriggersSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.SqlTriggerGetResults_Status
	err = sqlDatabaseContainerTrigger.Status.AssignPropertiesToSqlTriggerGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSqlTriggerGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (sqlDatabaseContainerTrigger *SqlDatabaseContainerTrigger) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: sqlDatabaseContainerTrigger.Spec.OriginalVersion(),
		Kind:    "SqlDatabaseContainerTrigger",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers_triggers
type SqlDatabaseContainerTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainerTrigger `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-05-15"}
type DatabaseAccountsSqlDatabasesContainersTriggersSpecAPIVersion string

const DatabaseAccountsSqlDatabasesContainersTriggersSpecAPIVersion20210515 = DatabaseAccountsSqlDatabasesContainersTriggersSpecAPIVersion("2021-05-15")

type DatabaseAccountsSqlDatabasesContainersTriggers_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: CreateUpdateOptions are a list of key-value pairs that describe the
	//resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and
	//"Throughput"
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner" kind:"SqlDatabaseContainer"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB SQL trigger resource object
	Resource SqlTriggerResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsSqlDatabasesContainersTriggers_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsSqlDatabasesContainersTriggersSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsSqlDatabasesContainersTriggers_SpecARM

	// Set property ‘Location’:
	if databaseAccountsSqlDatabasesContainersTriggersSpec.Location != nil {
		location := *databaseAccountsSqlDatabasesContainersTriggersSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsSqlDatabasesContainersTriggersSpec.Options != nil {
		optionsARM, err := (*databaseAccountsSqlDatabasesContainersTriggersSpec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	resourceARM, err := databaseAccountsSqlDatabasesContainersTriggersSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(SqlTriggerResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsSqlDatabasesContainersTriggersSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsSqlDatabasesContainersTriggersSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsSqlDatabasesContainersTriggers_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsSqlDatabasesContainersTriggers_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsSqlDatabasesContainersTriggers_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	databaseAccountsSqlDatabasesContainersTriggersSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsSqlDatabasesContainersTriggersSpec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		databaseAccountsSqlDatabasesContainersTriggersSpec.Options = &options
	}

	// Set property ‘Owner’:
	databaseAccountsSqlDatabasesContainersTriggersSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource SqlTriggerResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsSqlDatabasesContainersTriggersSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsSqlDatabasesContainersTriggersSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsSqlDatabasesContainersTriggersSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsSqlDatabasesContainersTriggers_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsSqlDatabasesContainersTriggers_Spec from the provided source
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsSqlDatabasesContainersTriggersSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersTriggersSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsSqlDatabasesContainersTriggersSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersTriggersSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsSqlDatabasesContainersTriggers_Spec
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsSqlDatabasesContainersTriggersSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersTriggersSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec{}
	err := databaseAccountsSqlDatabasesContainersTriggersSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersTriggersSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersTriggersSpec populates our DatabaseAccountsSqlDatabasesContainersTriggers_Spec from the provided source DatabaseAccountsSqlDatabasesContainersTriggers_Spec
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersTriggersSpec(source *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec) error {

	// AzureName
	databaseAccountsSqlDatabasesContainersTriggersSpec.AzureName = source.AzureName

	// Location
	databaseAccountsSqlDatabasesContainersTriggersSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromCreateUpdateOptions()")
		}
		databaseAccountsSqlDatabasesContainersTriggersSpec.Options = &option
	} else {
		databaseAccountsSqlDatabasesContainersTriggersSpec.Options = nil
	}

	// Owner
	databaseAccountsSqlDatabasesContainersTriggersSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource SqlTriggerResource
		err := resource.AssignPropertiesFromSqlTriggerResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlTriggerResource()")
		}
		databaseAccountsSqlDatabasesContainersTriggersSpec.Resource = resource
	} else {
		databaseAccountsSqlDatabasesContainersTriggersSpec.Resource = SqlTriggerResource{}
	}

	// Tags
	databaseAccountsSqlDatabasesContainersTriggersSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsSqlDatabasesContainersTriggersSpec populates the provided destination DatabaseAccountsSqlDatabasesContainersTriggers_Spec from our DatabaseAccountsSqlDatabasesContainersTriggers_Spec
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) AssignPropertiesToDatabaseAccountsSqlDatabasesContainersTriggersSpec(destination *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersTriggers_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = databaseAccountsSqlDatabasesContainersTriggersSpec.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(databaseAccountsSqlDatabasesContainersTriggersSpec.Location)

	// Options
	if databaseAccountsSqlDatabasesContainersTriggersSpec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions
		err := (*databaseAccountsSqlDatabasesContainersTriggersSpec.Options).AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToCreateUpdateOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsSqlDatabasesContainersTriggersSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsSqlDatabasesContainersTriggersSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.SqlTriggerResource
	err := databaseAccountsSqlDatabasesContainersTriggersSpec.Resource.AssignPropertiesToSqlTriggerResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlTriggerResource()")
	}
	destination.Resource = &resource

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(databaseAccountsSqlDatabasesContainersTriggersSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsSqlDatabasesContainersTriggersSpec *DatabaseAccountsSqlDatabasesContainersTriggers_Spec) SetAzureName(azureName string) {
	databaseAccountsSqlDatabasesContainersTriggersSpec.AzureName = azureName
}

type SqlTriggerGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                  `json:"name,omitempty"`
	Resource *SqlTriggerGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                        `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlTriggerGetResults_Status{}

// ConvertStatusFrom populates our SqlTriggerGetResults_Status from the provided source
func (sqlTriggerGetResultsStatus *SqlTriggerGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.SqlTriggerGetResults_Status)
	if ok {
		// Populate our instance from source
		return sqlTriggerGetResultsStatus.AssignPropertiesFromSqlTriggerGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.SqlTriggerGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sqlTriggerGetResultsStatus.AssignPropertiesFromSqlTriggerGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlTriggerGetResults_Status
func (sqlTriggerGetResultsStatus *SqlTriggerGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.SqlTriggerGetResults_Status)
	if ok {
		// Populate destination from our instance
		return sqlTriggerGetResultsStatus.AssignPropertiesToSqlTriggerGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.SqlTriggerGetResults_Status{}
	err := sqlTriggerGetResultsStatus.AssignPropertiesToSqlTriggerGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SqlTriggerGetResults_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlTriggerGetResultsStatus *SqlTriggerGetResults_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlTriggerGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlTriggerGetResultsStatus *SqlTriggerGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlTriggerGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlTriggerGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sqlTriggerGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		sqlTriggerGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sqlTriggerGetResultsStatus.Name = &name
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlTriggerGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			sqlTriggerGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		sqlTriggerGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			sqlTriggerGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		sqlTriggerGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlTriggerGetResultsStatus populates our SqlTriggerGetResults_Status from the provided source SqlTriggerGetResults_Status
func (sqlTriggerGetResultsStatus *SqlTriggerGetResults_Status) AssignPropertiesFromSqlTriggerGetResultsStatus(source *v1alpha1api20210515storage.SqlTriggerGetResults_Status) error {

	// Conditions
	sqlTriggerGetResultsStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	sqlTriggerGetResultsStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	sqlTriggerGetResultsStatus.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	sqlTriggerGetResultsStatus.Name = genruntime.ClonePointerToString(source.Name)

	// Resource
	if source.Resource != nil {
		var resource SqlTriggerGetProperties_Status_Resource
		err := resource.AssignPropertiesFromSqlTriggerGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlTriggerGetPropertiesStatusResource()")
		}
		sqlTriggerGetResultsStatus.Resource = &resource
	} else {
		sqlTriggerGetResultsStatus.Resource = nil
	}

	// Tags
	sqlTriggerGetResultsStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	sqlTriggerGetResultsStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToSqlTriggerGetResultsStatus populates the provided destination SqlTriggerGetResults_Status from our SqlTriggerGetResults_Status
func (sqlTriggerGetResultsStatus *SqlTriggerGetResults_Status) AssignPropertiesToSqlTriggerGetResultsStatus(destination *v1alpha1api20210515storage.SqlTriggerGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(sqlTriggerGetResultsStatus.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(sqlTriggerGetResultsStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(sqlTriggerGetResultsStatus.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(sqlTriggerGetResultsStatus.Name)

	// Resource
	if sqlTriggerGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.SqlTriggerGetProperties_Status_Resource
		err := (*sqlTriggerGetResultsStatus.Resource).AssignPropertiesToSqlTriggerGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlTriggerGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(sqlTriggerGetResultsStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(sqlTriggerGetResultsStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SqlTriggerGetProperties_Status_Resource struct {
	//Body: Body of the Trigger
	Body *string `json:"body,omitempty"`

	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL trigger
	Id string `json:"id"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//TriggerOperation: The operation the trigger is associated with
	TriggerOperation *SqlTriggerGetPropertiesStatusResourceTriggerOperation `json:"triggerOperation,omitempty"`

	//TriggerType: Type of the Trigger
	TriggerType *SqlTriggerGetPropertiesStatusResourceTriggerType `json:"triggerType,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &SqlTriggerGetProperties_Status_Resource{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlTriggerGetPropertiesStatusResource *SqlTriggerGetProperties_Status_Resource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlTriggerGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlTriggerGetPropertiesStatusResource *SqlTriggerGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlTriggerGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlTriggerGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘Body’:
	if typedInput.Body != nil {
		body := *typedInput.Body
		sqlTriggerGetPropertiesStatusResource.Body = &body
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		sqlTriggerGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘Id’:
	sqlTriggerGetPropertiesStatusResource.Id = typedInput.Id

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		sqlTriggerGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘TriggerOperation’:
	if typedInput.TriggerOperation != nil {
		triggerOperation := *typedInput.TriggerOperation
		sqlTriggerGetPropertiesStatusResource.TriggerOperation = &triggerOperation
	}

	// Set property ‘TriggerType’:
	if typedInput.TriggerType != nil {
		triggerType := *typedInput.TriggerType
		sqlTriggerGetPropertiesStatusResource.TriggerType = &triggerType
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		sqlTriggerGetPropertiesStatusResource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlTriggerGetPropertiesStatusResource populates our SqlTriggerGetProperties_Status_Resource from the provided source SqlTriggerGetProperties_Status_Resource
func (sqlTriggerGetPropertiesStatusResource *SqlTriggerGetProperties_Status_Resource) AssignPropertiesFromSqlTriggerGetPropertiesStatusResource(source *v1alpha1api20210515storage.SqlTriggerGetProperties_Status_Resource) error {

	// Body
	sqlTriggerGetPropertiesStatusResource.Body = genruntime.ClonePointerToString(source.Body)

	// Etag
	sqlTriggerGetPropertiesStatusResource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	sqlTriggerGetPropertiesStatusResource.Id = genruntime.GetOptionalStringValue(source.Id)

	// Rid
	sqlTriggerGetPropertiesStatusResource.Rid = genruntime.ClonePointerToString(source.Rid)

	// TriggerOperation
	if source.TriggerOperation != nil {
		triggerOperation := SqlTriggerGetPropertiesStatusResourceTriggerOperation(*source.TriggerOperation)
		sqlTriggerGetPropertiesStatusResource.TriggerOperation = &triggerOperation
	} else {
		sqlTriggerGetPropertiesStatusResource.TriggerOperation = nil
	}

	// TriggerType
	if source.TriggerType != nil {
		triggerType := SqlTriggerGetPropertiesStatusResourceTriggerType(*source.TriggerType)
		sqlTriggerGetPropertiesStatusResource.TriggerType = &triggerType
	} else {
		sqlTriggerGetPropertiesStatusResource.TriggerType = nil
	}

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		sqlTriggerGetPropertiesStatusResource.Ts = &t
	} else {
		sqlTriggerGetPropertiesStatusResource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlTriggerGetPropertiesStatusResource populates the provided destination SqlTriggerGetProperties_Status_Resource from our SqlTriggerGetProperties_Status_Resource
func (sqlTriggerGetPropertiesStatusResource *SqlTriggerGetProperties_Status_Resource) AssignPropertiesToSqlTriggerGetPropertiesStatusResource(destination *v1alpha1api20210515storage.SqlTriggerGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	destination.Body = genruntime.ClonePointerToString(sqlTriggerGetPropertiesStatusResource.Body)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(sqlTriggerGetPropertiesStatusResource.Etag)

	// Id
	id := sqlTriggerGetPropertiesStatusResource.Id
	destination.Id = &id

	// Rid
	destination.Rid = genruntime.ClonePointerToString(sqlTriggerGetPropertiesStatusResource.Rid)

	// TriggerOperation
	if sqlTriggerGetPropertiesStatusResource.TriggerOperation != nil {
		triggerOperation := string(*sqlTriggerGetPropertiesStatusResource.TriggerOperation)
		destination.TriggerOperation = &triggerOperation
	} else {
		destination.TriggerOperation = nil
	}

	// TriggerType
	if sqlTriggerGetPropertiesStatusResource.TriggerType != nil {
		triggerType := string(*sqlTriggerGetPropertiesStatusResource.TriggerType)
		destination.TriggerType = &triggerType
	} else {
		destination.TriggerType = nil
	}

	// Ts
	if sqlTriggerGetPropertiesStatusResource.Ts != nil {
		t := *sqlTriggerGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/SqlTriggerResource
type SqlTriggerResource struct {
	//Body: Body of the Trigger
	Body *string `json:"body,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL trigger
	Id string `json:"id"`

	//TriggerOperation: The operation the trigger is associated with.
	TriggerOperation *SqlTriggerResourceTriggerOperation `json:"triggerOperation,omitempty"`

	//TriggerType: Type of the Trigger.
	TriggerType *SqlTriggerResourceTriggerType `json:"triggerType,omitempty"`
}

var _ genruntime.ARMTransformer = &SqlTriggerResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sqlTriggerResource *SqlTriggerResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sqlTriggerResource == nil {
		return nil, nil
	}
	var result SqlTriggerResourceARM

	// Set property ‘Body’:
	if sqlTriggerResource.Body != nil {
		body := *sqlTriggerResource.Body
		result.Body = &body
	}

	// Set property ‘Id’:
	result.Id = sqlTriggerResource.Id

	// Set property ‘TriggerOperation’:
	if sqlTriggerResource.TriggerOperation != nil {
		triggerOperation := *sqlTriggerResource.TriggerOperation
		result.TriggerOperation = &triggerOperation
	}

	// Set property ‘TriggerType’:
	if sqlTriggerResource.TriggerType != nil {
		triggerType := *sqlTriggerResource.TriggerType
		result.TriggerType = &triggerType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlTriggerResource *SqlTriggerResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlTriggerResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlTriggerResource *SqlTriggerResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlTriggerResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlTriggerResourceARM, got %T", armInput)
	}

	// Set property ‘Body’:
	if typedInput.Body != nil {
		body := *typedInput.Body
		sqlTriggerResource.Body = &body
	}

	// Set property ‘Id’:
	sqlTriggerResource.Id = typedInput.Id

	// Set property ‘TriggerOperation’:
	if typedInput.TriggerOperation != nil {
		triggerOperation := *typedInput.TriggerOperation
		sqlTriggerResource.TriggerOperation = &triggerOperation
	}

	// Set property ‘TriggerType’:
	if typedInput.TriggerType != nil {
		triggerType := *typedInput.TriggerType
		sqlTriggerResource.TriggerType = &triggerType
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlTriggerResource populates our SqlTriggerResource from the provided source SqlTriggerResource
func (sqlTriggerResource *SqlTriggerResource) AssignPropertiesFromSqlTriggerResource(source *v1alpha1api20210515storage.SqlTriggerResource) error {

	// Body
	sqlTriggerResource.Body = genruntime.ClonePointerToString(source.Body)

	// Id
	sqlTriggerResource.Id = genruntime.GetOptionalStringValue(source.Id)

	// TriggerOperation
	if source.TriggerOperation != nil {
		triggerOperation := SqlTriggerResourceTriggerOperation(*source.TriggerOperation)
		sqlTriggerResource.TriggerOperation = &triggerOperation
	} else {
		sqlTriggerResource.TriggerOperation = nil
	}

	// TriggerType
	if source.TriggerType != nil {
		triggerType := SqlTriggerResourceTriggerType(*source.TriggerType)
		sqlTriggerResource.TriggerType = &triggerType
	} else {
		sqlTriggerResource.TriggerType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlTriggerResource populates the provided destination SqlTriggerResource from our SqlTriggerResource
func (sqlTriggerResource *SqlTriggerResource) AssignPropertiesToSqlTriggerResource(destination *v1alpha1api20210515storage.SqlTriggerResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	destination.Body = genruntime.ClonePointerToString(sqlTriggerResource.Body)

	// Id
	id := sqlTriggerResource.Id
	destination.Id = &id

	// TriggerOperation
	if sqlTriggerResource.TriggerOperation != nil {
		triggerOperation := string(*sqlTriggerResource.TriggerOperation)
		destination.TriggerOperation = &triggerOperation
	} else {
		destination.TriggerOperation = nil
	}

	// TriggerType
	if sqlTriggerResource.TriggerType != nil {
		triggerType := string(*sqlTriggerResource.TriggerType)
		destination.TriggerType = &triggerType
	} else {
		destination.TriggerType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SqlTriggerGetPropertiesStatusResourceTriggerOperation string

const (
	SqlTriggerGetPropertiesStatusResourceTriggerOperationAll     = SqlTriggerGetPropertiesStatusResourceTriggerOperation("All")
	SqlTriggerGetPropertiesStatusResourceTriggerOperationCreate  = SqlTriggerGetPropertiesStatusResourceTriggerOperation("Create")
	SqlTriggerGetPropertiesStatusResourceTriggerOperationDelete  = SqlTriggerGetPropertiesStatusResourceTriggerOperation("Delete")
	SqlTriggerGetPropertiesStatusResourceTriggerOperationReplace = SqlTriggerGetPropertiesStatusResourceTriggerOperation("Replace")
	SqlTriggerGetPropertiesStatusResourceTriggerOperationUpdate  = SqlTriggerGetPropertiesStatusResourceTriggerOperation("Update")
)

type SqlTriggerGetPropertiesStatusResourceTriggerType string

const (
	SqlTriggerGetPropertiesStatusResourceTriggerTypePost = SqlTriggerGetPropertiesStatusResourceTriggerType("Post")
	SqlTriggerGetPropertiesStatusResourceTriggerTypePre  = SqlTriggerGetPropertiesStatusResourceTriggerType("Pre")
)

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainerTrigger{}, &SqlDatabaseContainerTriggerList{})
}
