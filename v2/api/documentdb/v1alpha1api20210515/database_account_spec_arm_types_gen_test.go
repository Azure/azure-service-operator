// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccount_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccount_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccount_Spec_ARM, DatabaseAccount_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccount_Spec_ARM runs a test to see if a specific instance of DatabaseAccount_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccount_Spec_ARM(subject DatabaseAccount_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccount_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccount_Spec_ARM instances for property testing - lazily instantiated by
// DatabaseAccount_Spec_ARMGenerator()
var databaseAccount_Spec_ARMGenerator gopter.Gen

// DatabaseAccount_Spec_ARMGenerator returns a generator of DatabaseAccount_Spec_ARM instances for property testing.
// We first initialize databaseAccount_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccount_Spec_ARMGenerator() gopter.Gen {
	if databaseAccount_Spec_ARMGenerator != nil {
		return databaseAccount_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccount_Spec_ARM(generators)
	databaseAccount_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccount_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccount_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccount_Spec_ARM(generators)
	databaseAccount_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccount_Spec_ARM{}), generators)

	return databaseAccount_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccount_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccount_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(DatabaseAccount_Kind_Spec_GlobalDocumentDB, DatabaseAccount_Kind_Spec_MongoDB, DatabaseAccount_Kind_Spec_Parse))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccount_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccount_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_ARMGenerator())
	gens["Properties"] = gen.PtrOf(DatabaseAccountCreateUpdateProperties_ARMGenerator())
}

func Test_DatabaseAccountCreateUpdateProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountCreateUpdateProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountCreateUpdateProperties_ARM, DatabaseAccountCreateUpdateProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountCreateUpdateProperties_ARM runs a test to see if a specific instance of DatabaseAccountCreateUpdateProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountCreateUpdateProperties_ARM(subject DatabaseAccountCreateUpdateProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountCreateUpdateProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountCreateUpdateProperties_ARM instances for property testing - lazily instantiated by
// DatabaseAccountCreateUpdateProperties_ARMGenerator()
var databaseAccountCreateUpdateProperties_ARMGenerator gopter.Gen

// DatabaseAccountCreateUpdateProperties_ARMGenerator returns a generator of DatabaseAccountCreateUpdateProperties_ARM instances for property testing.
// We first initialize databaseAccountCreateUpdateProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountCreateUpdateProperties_ARMGenerator() gopter.Gen {
	if databaseAccountCreateUpdateProperties_ARMGenerator != nil {
		return databaseAccountCreateUpdateProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM(generators)
	databaseAccountCreateUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountCreateUpdateProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM(generators)
	databaseAccountCreateUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountCreateUpdateProperties_ARM{}), generators)

	return databaseAccountCreateUpdateProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["ConnectorOffer"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountCreateUpdateProperties_ConnectorOffer_Small))
	gens["DatabaseAccountOfferType"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountCreateUpdateProperties_DatabaseAccountOfferType_Standard))
	gens["DefaultIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["DisableKeyBasedMetadataWriteAccess"] = gen.PtrOf(gen.Bool())
	gens["EnableAnalyticalStorage"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticFailover"] = gen.PtrOf(gen.Bool())
	gens["EnableCassandraConnector"] = gen.PtrOf(gen.Bool())
	gens["EnableFreeTier"] = gen.PtrOf(gen.Bool())
	gens["EnableMultipleWriteLocations"] = gen.PtrOf(gen.Bool())
	gens["IsVirtualNetworkFilterEnabled"] = gen.PtrOf(gen.Bool())
	gens["KeyVaultKeyUri"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkAclBypass"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountCreateUpdateProperties_NetworkAclBypass_AzureServices, DatabaseAccountCreateUpdateProperties_NetworkAclBypass_None))
	gens["NetworkAclBypassResourceIds"] = gen.SliceOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountCreateUpdateProperties_PublicNetworkAccess_Disabled, DatabaseAccountCreateUpdateProperties_PublicNetworkAccess_Enabled))
}

// AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountCreateUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageConfiguration"] = gen.PtrOf(AnalyticalStorageConfiguration_ARMGenerator())
	gens["ApiProperties"] = gen.PtrOf(ApiProperties_ARMGenerator())
	gens["BackupPolicy"] = gen.PtrOf(BackupPolicy_ARMGenerator())
	gens["Capabilities"] = gen.SliceOf(Capability_ARMGenerator())
	gens["ConsistencyPolicy"] = gen.PtrOf(ConsistencyPolicy_ARMGenerator())
	gens["Cors"] = gen.SliceOf(CorsPolicy_ARMGenerator())
	gens["IpRules"] = gen.SliceOf(IpAddressOrRange_ARMGenerator())
	gens["Locations"] = gen.SliceOf(Location_ARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRule_ARMGenerator())
}

func Test_ManagedServiceIdentity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_ARM, ManagedServiceIdentity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_ARM runs a test to see if a specific instance of ManagedServiceIdentity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_ARM(subject ManagedServiceIdentity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_ARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_ARMGenerator()
var managedServiceIdentity_ARMGenerator gopter.Gen

// ManagedServiceIdentity_ARMGenerator returns a generator of ManagedServiceIdentity_ARM instances for property testing.
func ManagedServiceIdentity_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_ARMGenerator != nil {
		return managedServiceIdentity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM(generators)
	managedServiceIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_ARM{}), generators)

	return managedServiceIdentity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_None,
		ManagedServiceIdentity_Type_SystemAssigned,
		ManagedServiceIdentity_Type_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_UserAssigned))
}

func Test_AnalyticalStorageConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AnalyticalStorageConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAnalyticalStorageConfiguration_ARM, AnalyticalStorageConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAnalyticalStorageConfiguration_ARM runs a test to see if a specific instance of AnalyticalStorageConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAnalyticalStorageConfiguration_ARM(subject AnalyticalStorageConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AnalyticalStorageConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AnalyticalStorageConfiguration_ARM instances for property testing - lazily instantiated by
// AnalyticalStorageConfiguration_ARMGenerator()
var analyticalStorageConfiguration_ARMGenerator gopter.Gen

// AnalyticalStorageConfiguration_ARMGenerator returns a generator of AnalyticalStorageConfiguration_ARM instances for property testing.
func AnalyticalStorageConfiguration_ARMGenerator() gopter.Gen {
	if analyticalStorageConfiguration_ARMGenerator != nil {
		return analyticalStorageConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_ARM(generators)
	analyticalStorageConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(AnalyticalStorageConfiguration_ARM{}), generators)

	return analyticalStorageConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["SchemaType"] = gen.PtrOf(gen.OneConstOf(AnalyticalStorageConfiguration_SchemaType_FullFidelity, AnalyticalStorageConfiguration_SchemaType_WellDefined))
}

func Test_ApiProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiProperties_ARM, ApiProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiProperties_ARM runs a test to see if a specific instance of ApiProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiProperties_ARM(subject ApiProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiProperties_ARM instances for property testing - lazily instantiated by ApiProperties_ARMGenerator()
var apiProperties_ARMGenerator gopter.Gen

// ApiProperties_ARMGenerator returns a generator of ApiProperties_ARM instances for property testing.
func ApiProperties_ARMGenerator() gopter.Gen {
	if apiProperties_ARMGenerator != nil {
		return apiProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiProperties_ARM(generators)
	apiProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApiProperties_ARM{}), generators)

	return apiProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiProperties_ARM(gens map[string]gopter.Gen) {
	gens["ServerVersion"] = gen.PtrOf(gen.OneConstOf(ApiProperties_ServerVersion_32, ApiProperties_ServerVersion_36, ApiProperties_ServerVersion_40))
}

func Test_BackupPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupPolicy_ARM, BackupPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupPolicy_ARM runs a test to see if a specific instance of BackupPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupPolicy_ARM(subject BackupPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupPolicy_ARM instances for property testing - lazily instantiated by BackupPolicy_ARMGenerator()
var backupPolicy_ARMGenerator gopter.Gen

// BackupPolicy_ARMGenerator returns a generator of BackupPolicy_ARM instances for property testing.
func BackupPolicy_ARMGenerator() gopter.Gen {
	if backupPolicy_ARMGenerator != nil {
		return backupPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBackupPolicy_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(BackupPolicy_ARM{}), map[string]gopter.Gen{
			propName: propGen,
		}))
	}
	backupPolicy_ARMGenerator = gen.OneGenOf(gens...)

	return backupPolicy_ARMGenerator
}

// AddRelatedPropertyGeneratorsForBackupPolicy_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Continuous"] = ContinuousModeBackupPolicy_ARMGenerator().Map(func(it ContinuousModeBackupPolicy_ARM) *ContinuousModeBackupPolicy_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["Periodic"] = PeriodicModeBackupPolicy_ARMGenerator().Map(func(it PeriodicModeBackupPolicy_ARM) *PeriodicModeBackupPolicy_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_Capability_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability_ARM, Capability_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability_ARM runs a test to see if a specific instance of Capability_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability_ARM(subject Capability_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_ARM instances for property testing - lazily instantiated by Capability_ARMGenerator()
var capability_ARMGenerator gopter.Gen

// Capability_ARMGenerator returns a generator of Capability_ARM instances for property testing.
func Capability_ARMGenerator() gopter.Gen {
	if capability_ARMGenerator != nil {
		return capability_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability_ARM(generators)
	capability_ARMGenerator = gen.Struct(reflect.TypeOf(Capability_ARM{}), generators)

	return capability_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCapability_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ConsistencyPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsistencyPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsistencyPolicy_ARM, ConsistencyPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsistencyPolicy_ARM runs a test to see if a specific instance of ConsistencyPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsistencyPolicy_ARM(subject ConsistencyPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsistencyPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsistencyPolicy_ARM instances for property testing - lazily instantiated by
// ConsistencyPolicy_ARMGenerator()
var consistencyPolicy_ARMGenerator gopter.Gen

// ConsistencyPolicy_ARMGenerator returns a generator of ConsistencyPolicy_ARM instances for property testing.
func ConsistencyPolicy_ARMGenerator() gopter.Gen {
	if consistencyPolicy_ARMGenerator != nil {
		return consistencyPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsistencyPolicy_ARM(generators)
	consistencyPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(ConsistencyPolicy_ARM{}), generators)

	return consistencyPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForConsistencyPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsistencyPolicy_ARM(gens map[string]gopter.Gen) {
	gens["DefaultConsistencyLevel"] = gen.PtrOf(gen.OneConstOf(
		ConsistencyPolicy_DefaultConsistencyLevel_BoundedStaleness,
		ConsistencyPolicy_DefaultConsistencyLevel_ConsistentPrefix,
		ConsistencyPolicy_DefaultConsistencyLevel_Eventual,
		ConsistencyPolicy_DefaultConsistencyLevel_Session,
		ConsistencyPolicy_DefaultConsistencyLevel_Strong))
	gens["MaxIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["MaxStalenessPrefix"] = gen.PtrOf(gen.Int())
}

func Test_CorsPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsPolicy_ARM, CorsPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsPolicy_ARM runs a test to see if a specific instance of CorsPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsPolicy_ARM(subject CorsPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsPolicy_ARM instances for property testing - lazily instantiated by CorsPolicy_ARMGenerator()
var corsPolicy_ARMGenerator gopter.Gen

// CorsPolicy_ARMGenerator returns a generator of CorsPolicy_ARM instances for property testing.
func CorsPolicy_ARMGenerator() gopter.Gen {
	if corsPolicy_ARMGenerator != nil {
		return corsPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsPolicy_ARM(generators)
	corsPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(CorsPolicy_ARM{}), generators)

	return corsPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsPolicy_ARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedOrigins"] = gen.PtrOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}

func Test_IpAddressOrRange_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddressOrRange_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddressOrRange_ARM, IpAddressOrRange_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddressOrRange_ARM runs a test to see if a specific instance of IpAddressOrRange_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddressOrRange_ARM(subject IpAddressOrRange_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddressOrRange_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddressOrRange_ARM instances for property testing - lazily instantiated by
// IpAddressOrRange_ARMGenerator()
var ipAddressOrRange_ARMGenerator gopter.Gen

// IpAddressOrRange_ARMGenerator returns a generator of IpAddressOrRange_ARM instances for property testing.
func IpAddressOrRange_ARMGenerator() gopter.Gen {
	if ipAddressOrRange_ARMGenerator != nil {
		return ipAddressOrRange_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressOrRange_ARM(generators)
	ipAddressOrRange_ARMGenerator = gen.Struct(reflect.TypeOf(IpAddressOrRange_ARM{}), generators)

	return ipAddressOrRange_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddressOrRange_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddressOrRange_ARM(gens map[string]gopter.Gen) {
	gens["IpAddressOrRange"] = gen.PtrOf(gen.AlphaString())
}

func Test_Location_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Location_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLocation_ARM, Location_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLocation_ARM runs a test to see if a specific instance of Location_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLocation_ARM(subject Location_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Location_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Location_ARM instances for property testing - lazily instantiated by Location_ARMGenerator()
var location_ARMGenerator gopter.Gen

// Location_ARMGenerator returns a generator of Location_ARM instances for property testing.
func Location_ARMGenerator() gopter.Gen {
	if location_ARMGenerator != nil {
		return location_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLocation_ARM(generators)
	location_ARMGenerator = gen.Struct(reflect.TypeOf(Location_ARM{}), generators)

	return location_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLocation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLocation_ARM(gens map[string]gopter.Gen) {
	gens["FailoverPriority"] = gen.PtrOf(gen.Int())
	gens["IsZoneRedundant"] = gen.PtrOf(gen.Bool())
	gens["LocationName"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRule_ARM, VirtualNetworkRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRule_ARM runs a test to see if a specific instance of VirtualNetworkRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRule_ARM(subject VirtualNetworkRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_ARM instances for property testing - lazily instantiated by
// VirtualNetworkRule_ARMGenerator()
var virtualNetworkRule_ARMGenerator gopter.Gen

// VirtualNetworkRule_ARMGenerator returns a generator of VirtualNetworkRule_ARM instances for property testing.
func VirtualNetworkRule_ARMGenerator() gopter.Gen {
	if virtualNetworkRule_ARMGenerator != nil {
		return virtualNetworkRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRule_ARM(generators)
	virtualNetworkRule_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_ARM{}), generators)

	return virtualNetworkRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRule_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVNetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}

func Test_ContinuousModeBackupPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContinuousModeBackupPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContinuousModeBackupPolicy_ARM, ContinuousModeBackupPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContinuousModeBackupPolicy_ARM runs a test to see if a specific instance of ContinuousModeBackupPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContinuousModeBackupPolicy_ARM(subject ContinuousModeBackupPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContinuousModeBackupPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContinuousModeBackupPolicy_ARM instances for property testing - lazily instantiated by
// ContinuousModeBackupPolicy_ARMGenerator()
var continuousModeBackupPolicy_ARMGenerator gopter.Gen

// ContinuousModeBackupPolicy_ARMGenerator returns a generator of ContinuousModeBackupPolicy_ARM instances for property testing.
func ContinuousModeBackupPolicy_ARMGenerator() gopter.Gen {
	if continuousModeBackupPolicy_ARMGenerator != nil {
		return continuousModeBackupPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContinuousModeBackupPolicy_ARM(generators)
	continuousModeBackupPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(ContinuousModeBackupPolicy_ARM{}), generators)

	return continuousModeBackupPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContinuousModeBackupPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContinuousModeBackupPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.OneConstOf(ContinuousModeBackupPolicy_Type_Continuous)
}

func Test_PeriodicModeBackupPolicy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PeriodicModeBackupPolicy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPeriodicModeBackupPolicy_ARM, PeriodicModeBackupPolicy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPeriodicModeBackupPolicy_ARM runs a test to see if a specific instance of PeriodicModeBackupPolicy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPeriodicModeBackupPolicy_ARM(subject PeriodicModeBackupPolicy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PeriodicModeBackupPolicy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PeriodicModeBackupPolicy_ARM instances for property testing - lazily instantiated by
// PeriodicModeBackupPolicy_ARMGenerator()
var periodicModeBackupPolicy_ARMGenerator gopter.Gen

// PeriodicModeBackupPolicy_ARMGenerator returns a generator of PeriodicModeBackupPolicy_ARM instances for property testing.
// We first initialize periodicModeBackupPolicy_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PeriodicModeBackupPolicy_ARMGenerator() gopter.Gen {
	if periodicModeBackupPolicy_ARMGenerator != nil {
		return periodicModeBackupPolicy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPeriodicModeBackupPolicy_ARM(generators)
	periodicModeBackupPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(PeriodicModeBackupPolicy_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPeriodicModeBackupPolicy_ARM(generators)
	AddRelatedPropertyGeneratorsForPeriodicModeBackupPolicy_ARM(generators)
	periodicModeBackupPolicy_ARMGenerator = gen.Struct(reflect.TypeOf(PeriodicModeBackupPolicy_ARM{}), generators)

	return periodicModeBackupPolicy_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPeriodicModeBackupPolicy_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPeriodicModeBackupPolicy_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.OneConstOf(PeriodicModeBackupPolicy_Type_Periodic)
}

// AddRelatedPropertyGeneratorsForPeriodicModeBackupPolicy_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPeriodicModeBackupPolicy_ARM(gens map[string]gopter.Gen) {
	gens["PeriodicModeProperties"] = gen.PtrOf(PeriodicModeProperties_ARMGenerator())
}

func Test_PeriodicModeProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PeriodicModeProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPeriodicModeProperties_ARM, PeriodicModeProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPeriodicModeProperties_ARM runs a test to see if a specific instance of PeriodicModeProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPeriodicModeProperties_ARM(subject PeriodicModeProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PeriodicModeProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PeriodicModeProperties_ARM instances for property testing - lazily instantiated by
// PeriodicModeProperties_ARMGenerator()
var periodicModeProperties_ARMGenerator gopter.Gen

// PeriodicModeProperties_ARMGenerator returns a generator of PeriodicModeProperties_ARM instances for property testing.
func PeriodicModeProperties_ARMGenerator() gopter.Gen {
	if periodicModeProperties_ARMGenerator != nil {
		return periodicModeProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPeriodicModeProperties_ARM(generators)
	periodicModeProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PeriodicModeProperties_ARM{}), generators)

	return periodicModeProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPeriodicModeProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPeriodicModeProperties_ARM(gens map[string]gopter.Gen) {
	gens["BackupIntervalInMinutes"] = gen.PtrOf(gen.Int())
	gens["BackupRetentionIntervalInHours"] = gen.PtrOf(gen.Int())
}
