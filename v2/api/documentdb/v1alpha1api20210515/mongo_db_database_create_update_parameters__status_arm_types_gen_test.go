// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBDatabaseCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseCreateUpdateParametersStatusARM, MongoDBDatabaseCreateUpdateParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseCreateUpdateParametersStatusARM runs a test to see if a specific instance of MongoDBDatabaseCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseCreateUpdateParametersStatusARM(subject MongoDBDatabaseCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseCreateUpdateParameters_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseCreateUpdateParametersStatusARMGenerator()
var mongoDBDatabaseCreateUpdateParametersStatusARMGenerator gopter.Gen

// MongoDBDatabaseCreateUpdateParametersStatusARMGenerator returns a generator of MongoDBDatabaseCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize mongoDBDatabaseCreateUpdateParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabaseCreateUpdateParametersStatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseCreateUpdateParametersStatusARMGenerator != nil {
		return mongoDBDatabaseCreateUpdateParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM(generators)
	mongoDBDatabaseCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM(generators)
	mongoDBDatabaseCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateParameters_StatusARM{}), generators)

	return mongoDBDatabaseCreateUpdateParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator())
}

func Test_MongoDBDatabaseCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseCreateUpdatePropertiesStatusARM, MongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseCreateUpdatePropertiesStatusARM runs a test to see if a specific instance of MongoDBDatabaseCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseCreateUpdatePropertiesStatusARM(subject MongoDBDatabaseCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseCreateUpdateProperties_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator()
var mongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator gopter.Gen

// MongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator returns a generator of MongoDBDatabaseCreateUpdateProperties_StatusARM instances for property testing.
func MongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator != nil {
		return mongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdatePropertiesStatusARM(generators)
	mongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateProperties_StatusARM{}), generators)

	return mongoDBDatabaseCreateUpdatePropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdatePropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdatePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsStatusARMGenerator())
	gens["Resource"] = MongoDBDatabaseResourceStatusARMGenerator()
}

func Test_MongoDBDatabaseResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResourceStatusARM, MongoDBDatabaseResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResourceStatusARM runs a test to see if a specific instance of MongoDBDatabaseResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResourceStatusARM(subject MongoDBDatabaseResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseResourceStatusARMGenerator()
var mongoDBDatabaseResourceStatusARMGenerator gopter.Gen

// MongoDBDatabaseResourceStatusARMGenerator returns a generator of MongoDBDatabaseResource_StatusARM instances for property testing.
func MongoDBDatabaseResourceStatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseResourceStatusARMGenerator != nil {
		return mongoDBDatabaseResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResourceStatusARM(generators)
	mongoDBDatabaseResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_StatusARM{}), generators)

	return mongoDBDatabaseResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
