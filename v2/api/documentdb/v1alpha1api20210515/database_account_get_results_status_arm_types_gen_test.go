// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountGetResults_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountGetResults_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountGetResults_STATUS_ARM, DatabaseAccountGetResults_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountGetResults_STATUS_ARM runs a test to see if a specific instance of DatabaseAccountGetResults_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountGetResults_STATUS_ARM(subject DatabaseAccountGetResults_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountGetResults_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountGetResults_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseAccountGetResults_STATUS_ARMGenerator()
var databaseAccountGetResults_STATUS_ARMGenerator gopter.Gen

// DatabaseAccountGetResults_STATUS_ARMGenerator returns a generator of DatabaseAccountGetResults_STATUS_ARM instances for property testing.
// We first initialize databaseAccountGetResults_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountGetResults_STATUS_ARMGenerator() gopter.Gen {
	if databaseAccountGetResults_STATUS_ARMGenerator != nil {
		return databaseAccountGetResults_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM(generators)
	databaseAccountGetResults_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetResults_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM(generators)
	databaseAccountGetResults_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetResults_STATUS_ARM{}), generators)

	return databaseAccountGetResults_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountGetResults_Kind_STATUS_GlobalDocumentDB, DatabaseAccountGetResults_Kind_STATUS_MongoDB, DatabaseAccountGetResults_Kind_STATUS_Parse))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountGetResults_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(DatabaseAccountGetProperties_STATUS_ARMGenerator())
}

func Test_DatabaseAccountGetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountGetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountGetProperties_STATUS_ARM, DatabaseAccountGetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountGetProperties_STATUS_ARM runs a test to see if a specific instance of DatabaseAccountGetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountGetProperties_STATUS_ARM(subject DatabaseAccountGetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountGetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountGetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseAccountGetProperties_STATUS_ARMGenerator()
var databaseAccountGetProperties_STATUS_ARMGenerator gopter.Gen

// DatabaseAccountGetProperties_STATUS_ARMGenerator returns a generator of DatabaseAccountGetProperties_STATUS_ARM instances for property testing.
// We first initialize databaseAccountGetProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountGetProperties_STATUS_ARMGenerator() gopter.Gen {
	if databaseAccountGetProperties_STATUS_ARMGenerator != nil {
		return databaseAccountGetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM(generators)
	databaseAccountGetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM(generators)
	databaseAccountGetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetProperties_STATUS_ARM{}), generators)

	return databaseAccountGetProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ConnectorOffer"] = gen.PtrOf(gen.OneConstOf(ConnectorOffer_STATUS_Small))
	gens["DatabaseAccountOfferType"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountOfferType_STATUS_Standard))
	gens["DefaultIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["DisableKeyBasedMetadataWriteAccess"] = gen.PtrOf(gen.Bool())
	gens["DocumentEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAnalyticalStorage"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticFailover"] = gen.PtrOf(gen.Bool())
	gens["EnableCassandraConnector"] = gen.PtrOf(gen.Bool())
	gens["EnableFreeTier"] = gen.PtrOf(gen.Bool())
	gens["EnableMultipleWriteLocations"] = gen.PtrOf(gen.Bool())
	gens["IsVirtualNetworkFilterEnabled"] = gen.PtrOf(gen.Bool())
	gens["KeyVaultKeyUri"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkAclBypass"] = gen.PtrOf(gen.OneConstOf(NetworkAclBypass_STATUS_AzureServices, NetworkAclBypass_STATUS_None))
	gens["NetworkAclBypassResourceIds"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccess_STATUS_Disabled, PublicNetworkAccess_STATUS_Enabled))
}

// AddRelatedPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountGetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageConfiguration"] = gen.PtrOf(AnalyticalStorageConfiguration_STATUS_ARMGenerator())
	gens["ApiProperties"] = gen.PtrOf(ApiProperties_STATUS_ARMGenerator())
	gens["BackupPolicy"] = gen.PtrOf(BackupPolicy_STATUS_ARMGenerator())
	gens["Capabilities"] = gen.SliceOf(Capability_STATUS_ARMGenerator())
	gens["ConsistencyPolicy"] = gen.PtrOf(ConsistencyPolicy_STATUS_ARMGenerator())
	gens["Cors"] = gen.SliceOf(CorsPolicy_STATUS_ARMGenerator())
	gens["FailoverPolicies"] = gen.SliceOf(FailoverPolicy_STATUS_ARMGenerator())
	gens["IpRules"] = gen.SliceOf(IpAddressOrRange_STATUS_ARMGenerator())
	gens["Locations"] = gen.SliceOf(Location_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator())
	gens["ReadLocations"] = gen.SliceOf(Location_STATUS_ARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRule_STATUS_ARMGenerator())
	gens["WriteLocations"] = gen.SliceOf(Location_STATUS_ARMGenerator())
}

func Test_ManagedServiceIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM, ManagedServiceIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM(subject ManagedServiceIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUS_ARMGenerator()
var managedServiceIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedServiceIdentity_STATUS_ARMGenerator returns a generator of ManagedServiceIdentity_STATUS_ARM instances for property testing.
// We first initialize managedServiceIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_STATUS_ARMGenerator != nil {
		return managedServiceIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	return managedServiceIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_STATUS_None,
		ManagedServiceIdentity_Type_STATUS_SystemAssigned,
		ManagedServiceIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator())
}

func Test_AnalyticalStorageConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AnalyticalStorageConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAnalyticalStorageConfiguration_STATUS_ARM, AnalyticalStorageConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAnalyticalStorageConfiguration_STATUS_ARM runs a test to see if a specific instance of AnalyticalStorageConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAnalyticalStorageConfiguration_STATUS_ARM(subject AnalyticalStorageConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AnalyticalStorageConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AnalyticalStorageConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// AnalyticalStorageConfiguration_STATUS_ARMGenerator()
var analyticalStorageConfiguration_STATUS_ARMGenerator gopter.Gen

// AnalyticalStorageConfiguration_STATUS_ARMGenerator returns a generator of AnalyticalStorageConfiguration_STATUS_ARM instances for property testing.
func AnalyticalStorageConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if analyticalStorageConfiguration_STATUS_ARMGenerator != nil {
		return analyticalStorageConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_STATUS_ARM(generators)
	analyticalStorageConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AnalyticalStorageConfiguration_STATUS_ARM{}), generators)

	return analyticalStorageConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAnalyticalStorageConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SchemaType"] = gen.PtrOf(gen.OneConstOf(AnalyticalStorageSchemaType_STATUS_FullFidelity, AnalyticalStorageSchemaType_STATUS_WellDefined))
}

func Test_ApiProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiProperties_STATUS_ARM, ApiProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiProperties_STATUS_ARM runs a test to see if a specific instance of ApiProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiProperties_STATUS_ARM(subject ApiProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ApiProperties_STATUS_ARMGenerator()
var apiProperties_STATUS_ARMGenerator gopter.Gen

// ApiProperties_STATUS_ARMGenerator returns a generator of ApiProperties_STATUS_ARM instances for property testing.
func ApiProperties_STATUS_ARMGenerator() gopter.Gen {
	if apiProperties_STATUS_ARMGenerator != nil {
		return apiProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiProperties_STATUS_ARM(generators)
	apiProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiProperties_STATUS_ARM{}), generators)

	return apiProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ServerVersion"] = gen.PtrOf(gen.OneConstOf(ApiProperties_ServerVersion_STATUS_32, ApiProperties_ServerVersion_STATUS_36, ApiProperties_ServerVersion_STATUS_40))
}

func Test_BackupPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupPolicy_STATUS_ARM, BackupPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupPolicy_STATUS_ARM runs a test to see if a specific instance of BackupPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupPolicy_STATUS_ARM(subject BackupPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// BackupPolicy_STATUS_ARMGenerator()
var backupPolicy_STATUS_ARMGenerator gopter.Gen

// BackupPolicy_STATUS_ARMGenerator returns a generator of BackupPolicy_STATUS_ARM instances for property testing.
func BackupPolicy_STATUS_ARMGenerator() gopter.Gen {
	if backupPolicy_STATUS_ARMGenerator != nil {
		return backupPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM(generators)
	backupPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupPolicy_STATUS_ARM{}), generators)

	return backupPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(BackupPolicyType_STATUS_Continuous, BackupPolicyType_STATUS_Periodic))
}

func Test_Capability_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability_STATUS_ARM, Capability_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability_STATUS_ARM runs a test to see if a specific instance of Capability_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability_STATUS_ARM(subject Capability_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUS_ARM instances for property testing - lazily instantiated by
// Capability_STATUS_ARMGenerator()
var capability_STATUS_ARMGenerator gopter.Gen

// Capability_STATUS_ARMGenerator returns a generator of Capability_STATUS_ARM instances for property testing.
func Capability_STATUS_ARMGenerator() gopter.Gen {
	if capability_STATUS_ARMGenerator != nil {
		return capability_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability_STATUS_ARM(generators)
	capability_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Capability_STATUS_ARM{}), generators)

	return capability_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCapability_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ConsistencyPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsistencyPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsistencyPolicy_STATUS_ARM, ConsistencyPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsistencyPolicy_STATUS_ARM runs a test to see if a specific instance of ConsistencyPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsistencyPolicy_STATUS_ARM(subject ConsistencyPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsistencyPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsistencyPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// ConsistencyPolicy_STATUS_ARMGenerator()
var consistencyPolicy_STATUS_ARMGenerator gopter.Gen

// ConsistencyPolicy_STATUS_ARMGenerator returns a generator of ConsistencyPolicy_STATUS_ARM instances for property testing.
func ConsistencyPolicy_STATUS_ARMGenerator() gopter.Gen {
	if consistencyPolicy_STATUS_ARMGenerator != nil {
		return consistencyPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsistencyPolicy_STATUS_ARM(generators)
	consistencyPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ConsistencyPolicy_STATUS_ARM{}), generators)

	return consistencyPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForConsistencyPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsistencyPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultConsistencyLevel"] = gen.PtrOf(gen.OneConstOf(
		ConsistencyPolicy_DefaultConsistencyLevel_STATUS_BoundedStaleness,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUS_ConsistentPrefix,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUS_Eventual,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUS_Session,
		ConsistencyPolicy_DefaultConsistencyLevel_STATUS_Strong))
	gens["MaxIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["MaxStalenessPrefix"] = gen.PtrOf(gen.Int())
}

func Test_CorsPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsPolicy_STATUS_ARM, CorsPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsPolicy_STATUS_ARM runs a test to see if a specific instance of CorsPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsPolicy_STATUS_ARM(subject CorsPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// CorsPolicy_STATUS_ARMGenerator()
var corsPolicy_STATUS_ARMGenerator gopter.Gen

// CorsPolicy_STATUS_ARMGenerator returns a generator of CorsPolicy_STATUS_ARM instances for property testing.
func CorsPolicy_STATUS_ARMGenerator() gopter.Gen {
	if corsPolicy_STATUS_ARMGenerator != nil {
		return corsPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsPolicy_STATUS_ARM(generators)
	corsPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CorsPolicy_STATUS_ARM{}), generators)

	return corsPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedOrigins"] = gen.PtrOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}

func Test_FailoverPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverPolicy_STATUS_ARM, FailoverPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverPolicy_STATUS_ARM runs a test to see if a specific instance of FailoverPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverPolicy_STATUS_ARM(subject FailoverPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// FailoverPolicy_STATUS_ARMGenerator()
var failoverPolicy_STATUS_ARMGenerator gopter.Gen

// FailoverPolicy_STATUS_ARMGenerator returns a generator of FailoverPolicy_STATUS_ARM instances for property testing.
func FailoverPolicy_STATUS_ARMGenerator() gopter.Gen {
	if failoverPolicy_STATUS_ARMGenerator != nil {
		return failoverPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverPolicy_STATUS_ARM(generators)
	failoverPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FailoverPolicy_STATUS_ARM{}), generators)

	return failoverPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFailoverPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FailoverPriority"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["LocationName"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpAddressOrRange_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddressOrRange_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddressOrRange_STATUS_ARM, IpAddressOrRange_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddressOrRange_STATUS_ARM runs a test to see if a specific instance of IpAddressOrRange_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddressOrRange_STATUS_ARM(subject IpAddressOrRange_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddressOrRange_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddressOrRange_STATUS_ARM instances for property testing - lazily instantiated by
// IpAddressOrRange_STATUS_ARMGenerator()
var ipAddressOrRange_STATUS_ARMGenerator gopter.Gen

// IpAddressOrRange_STATUS_ARMGenerator returns a generator of IpAddressOrRange_STATUS_ARM instances for property testing.
func IpAddressOrRange_STATUS_ARMGenerator() gopter.Gen {
	if ipAddressOrRange_STATUS_ARMGenerator != nil {
		return ipAddressOrRange_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressOrRange_STATUS_ARM(generators)
	ipAddressOrRange_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpAddressOrRange_STATUS_ARM{}), generators)

	return ipAddressOrRange_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddressOrRange_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddressOrRange_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IpAddressOrRange"] = gen.PtrOf(gen.AlphaString())
}

func Test_Location_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Location_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLocation_STATUS_ARM, Location_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLocation_STATUS_ARM runs a test to see if a specific instance of Location_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLocation_STATUS_ARM(subject Location_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Location_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Location_STATUS_ARM instances for property testing - lazily instantiated by
// Location_STATUS_ARMGenerator()
var location_STATUS_ARMGenerator gopter.Gen

// Location_STATUS_ARMGenerator returns a generator of Location_STATUS_ARM instances for property testing.
func Location_STATUS_ARMGenerator() gopter.Gen {
	if location_STATUS_ARMGenerator != nil {
		return location_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLocation_STATUS_ARM(generators)
	location_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Location_STATUS_ARM{}), generators)

	return location_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLocation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DocumentEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["FailoverPriority"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsZoneRedundant"] = gen.PtrOf(gen.Bool())
	gens["LocationName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM, ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM runs a test to see if a specific instance of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM(subject ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator()
var managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator gopter.Gen

// ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator returns a generator of ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing.
func ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator != nil {
		return managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM(generators)
	managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM{}), generators)

	return managedServiceIdentity_UserAssignedIdentities_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_UserAssignedIdentities_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM, PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM(subject PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM instances for property testing - lazily
// instantiated by PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator()
var privateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM instances for property testing.
func PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM(generators)
	privateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM{}), generators)

	return privateEndpointConnection_STATUS_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRule_STATUS_ARM, VirtualNetworkRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRule_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRule_STATUS_ARM(subject VirtualNetworkRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkRule_STATUS_ARMGenerator()
var virtualNetworkRule_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkRule_STATUS_ARMGenerator returns a generator of VirtualNetworkRule_STATUS_ARM instances for property testing.
func VirtualNetworkRule_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkRule_STATUS_ARMGenerator != nil {
		return virtualNetworkRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUS_ARM(generators)
	virtualNetworkRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_STATUS_ARM{}), generators)

	return virtualNetworkRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVNetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
