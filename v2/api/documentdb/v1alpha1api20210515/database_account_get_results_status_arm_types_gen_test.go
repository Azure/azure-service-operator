// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountGetResultsSTATUSARM, DatabaseAccountGetResultsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountGetResultsSTATUSARM runs a test to see if a specific instance of DatabaseAccountGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountGetResultsSTATUSARM(subject DatabaseAccountGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountGetResults_STATUSARM instances for property testing - lazily instantiated by
// DatabaseAccountGetResultsSTATUSARMGenerator()
var databaseAccountGetResultsSTATUSARMGenerator gopter.Gen

// DatabaseAccountGetResultsSTATUSARMGenerator returns a generator of DatabaseAccountGetResults_STATUSARM instances for property testing.
// We first initialize databaseAccountGetResultsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountGetResultsSTATUSARMGenerator() gopter.Gen {
	if databaseAccountGetResultsSTATUSARMGenerator != nil {
		return databaseAccountGetResultsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM(generators)
	databaseAccountGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM(generators)
	databaseAccountGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetResults_STATUSARM{}), generators)

	return databaseAccountGetResultsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountGetResultsSTATUSKind_GlobalDocumentDB, DatabaseAccountGetResultsSTATUSKind_MongoDB, DatabaseAccountGetResultsSTATUSKind_Parse))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentitySTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(DatabaseAccountGetPropertiesSTATUSARMGenerator())
}

func Test_DatabaseAccountGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountGetPropertiesSTATUSARM, DatabaseAccountGetPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountGetPropertiesSTATUSARM runs a test to see if a specific instance of DatabaseAccountGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountGetPropertiesSTATUSARM(subject DatabaseAccountGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountGetProperties_STATUSARM instances for property testing - lazily instantiated by
// DatabaseAccountGetPropertiesSTATUSARMGenerator()
var databaseAccountGetPropertiesSTATUSARMGenerator gopter.Gen

// DatabaseAccountGetPropertiesSTATUSARMGenerator returns a generator of DatabaseAccountGetProperties_STATUSARM instances for property testing.
// We first initialize databaseAccountGetPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountGetPropertiesSTATUSARMGenerator() gopter.Gen {
	if databaseAccountGetPropertiesSTATUSARMGenerator != nil {
		return databaseAccountGetPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM(generators)
	databaseAccountGetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM(generators)
	databaseAccountGetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountGetProperties_STATUSARM{}), generators)

	return databaseAccountGetPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ConnectorOffer"] = gen.PtrOf(gen.OneConstOf(ConnectorOffer_STATUS_Small))
	gens["DatabaseAccountOfferType"] = gen.PtrOf(gen.OneConstOf(DatabaseAccountOfferType_STATUS_Standard))
	gens["DefaultIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["DisableKeyBasedMetadataWriteAccess"] = gen.PtrOf(gen.Bool())
	gens["DocumentEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAnalyticalStorage"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticFailover"] = gen.PtrOf(gen.Bool())
	gens["EnableCassandraConnector"] = gen.PtrOf(gen.Bool())
	gens["EnableFreeTier"] = gen.PtrOf(gen.Bool())
	gens["EnableMultipleWriteLocations"] = gen.PtrOf(gen.Bool())
	gens["IsVirtualNetworkFilterEnabled"] = gen.PtrOf(gen.Bool())
	gens["KeyVaultKeyUri"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkAclBypass"] = gen.PtrOf(gen.OneConstOf(NetworkAclBypass_STATUS_AzureServices, NetworkAclBypass_STATUS_None))
	gens["NetworkAclBypassResourceIds"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccess_STATUS_Disabled, PublicNetworkAccess_STATUS_Enabled))
}

// AddRelatedPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountGetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageConfiguration"] = gen.PtrOf(AnalyticalStorageConfigurationSTATUSARMGenerator())
	gens["ApiProperties"] = gen.PtrOf(ApiPropertiesSTATUSARMGenerator())
	gens["BackupPolicy"] = gen.PtrOf(BackupPolicySTATUSARMGenerator())
	gens["Capabilities"] = gen.SliceOf(CapabilitySTATUSARMGenerator())
	gens["ConsistencyPolicy"] = gen.PtrOf(ConsistencyPolicySTATUSARMGenerator())
	gens["Cors"] = gen.SliceOf(CorsPolicySTATUSARMGenerator())
	gens["FailoverPolicies"] = gen.SliceOf(FailoverPolicySTATUSARMGenerator())
	gens["IpRules"] = gen.SliceOf(IpAddressOrRangeSTATUSARMGenerator())
	gens["Locations"] = gen.SliceOf(LocationSTATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator())
	gens["ReadLocations"] = gen.SliceOf(LocationSTATUSARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRuleSTATUSARMGenerator())
	gens["WriteLocations"] = gen.SliceOf(LocationSTATUSARMGenerator())
}

func Test_ManagedServiceIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentitySTATUSARM, ManagedServiceIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentitySTATUSARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentitySTATUSARM(subject ManagedServiceIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedServiceIdentitySTATUSARMGenerator()
var managedServiceIdentitySTATUSARMGenerator gopter.Gen

// ManagedServiceIdentitySTATUSARMGenerator returns a generator of ManagedServiceIdentity_STATUSARM instances for property testing.
// We first initialize managedServiceIdentitySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentitySTATUSARMGenerator() gopter.Gen {
	if managedServiceIdentitySTATUSARMGenerator != nil {
		return managedServiceIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSARM(generators)
	managedServiceIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentitySTATUSARM(generators)
	managedServiceIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUSARM{}), generators)

	return managedServiceIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentitySTATUSType_None,
		ManagedServiceIdentitySTATUSType_SystemAssigned,
		ManagedServiceIdentitySTATUSType_SystemAssignedUserAssigned,
		ManagedServiceIdentitySTATUSType_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentitySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator())
}

func Test_AnalyticalStorageConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AnalyticalStorageConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAnalyticalStorageConfigurationSTATUSARM, AnalyticalStorageConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAnalyticalStorageConfigurationSTATUSARM runs a test to see if a specific instance of AnalyticalStorageConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAnalyticalStorageConfigurationSTATUSARM(subject AnalyticalStorageConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AnalyticalStorageConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AnalyticalStorageConfiguration_STATUSARM instances for property testing - lazily instantiated by
// AnalyticalStorageConfigurationSTATUSARMGenerator()
var analyticalStorageConfigurationSTATUSARMGenerator gopter.Gen

// AnalyticalStorageConfigurationSTATUSARMGenerator returns a generator of AnalyticalStorageConfiguration_STATUSARM instances for property testing.
func AnalyticalStorageConfigurationSTATUSARMGenerator() gopter.Gen {
	if analyticalStorageConfigurationSTATUSARMGenerator != nil {
		return analyticalStorageConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAnalyticalStorageConfigurationSTATUSARM(generators)
	analyticalStorageConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AnalyticalStorageConfiguration_STATUSARM{}), generators)

	return analyticalStorageConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAnalyticalStorageConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAnalyticalStorageConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["SchemaType"] = gen.PtrOf(gen.OneConstOf(AnalyticalStorageSchemaType_STATUS_FullFidelity, AnalyticalStorageSchemaType_STATUS_WellDefined))
}

func Test_ApiProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiPropertiesSTATUSARM, ApiPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiPropertiesSTATUSARM runs a test to see if a specific instance of ApiProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiPropertiesSTATUSARM(subject ApiProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiProperties_STATUSARM instances for property testing - lazily instantiated by
// ApiPropertiesSTATUSARMGenerator()
var apiPropertiesSTATUSARMGenerator gopter.Gen

// ApiPropertiesSTATUSARMGenerator returns a generator of ApiProperties_STATUSARM instances for property testing.
func ApiPropertiesSTATUSARMGenerator() gopter.Gen {
	if apiPropertiesSTATUSARMGenerator != nil {
		return apiPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiPropertiesSTATUSARM(generators)
	apiPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ApiProperties_STATUSARM{}), generators)

	return apiPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForApiPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ServerVersion"] = gen.PtrOf(gen.OneConstOf(ApiPropertiesSTATUSServerVersion_32, ApiPropertiesSTATUSServerVersion_36, ApiPropertiesSTATUSServerVersion_40))
}

func Test_BackupPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupPolicySTATUSARM, BackupPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupPolicySTATUSARM runs a test to see if a specific instance of BackupPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupPolicySTATUSARM(subject BackupPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupPolicy_STATUSARM instances for property testing - lazily instantiated by
// BackupPolicySTATUSARMGenerator()
var backupPolicySTATUSARMGenerator gopter.Gen

// BackupPolicySTATUSARMGenerator returns a generator of BackupPolicy_STATUSARM instances for property testing.
func BackupPolicySTATUSARMGenerator() gopter.Gen {
	if backupPolicySTATUSARMGenerator != nil {
		return backupPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupPolicySTATUSARM(generators)
	backupPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(BackupPolicy_STATUSARM{}), generators)

	return backupPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(BackupPolicyType_STATUS_Continuous, BackupPolicyType_STATUS_Periodic))
}

func Test_Capability_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapabilitySTATUSARM, CapabilitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapabilitySTATUSARM runs a test to see if a specific instance of Capability_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapabilitySTATUSARM(subject Capability_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUSARM instances for property testing - lazily instantiated by
// CapabilitySTATUSARMGenerator()
var capabilitySTATUSARMGenerator gopter.Gen

// CapabilitySTATUSARMGenerator returns a generator of Capability_STATUSARM instances for property testing.
func CapabilitySTATUSARMGenerator() gopter.Gen {
	if capabilitySTATUSARMGenerator != nil {
		return capabilitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapabilitySTATUSARM(generators)
	capabilitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(Capability_STATUSARM{}), generators)

	return capabilitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCapabilitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapabilitySTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ConsistencyPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConsistencyPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConsistencyPolicySTATUSARM, ConsistencyPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConsistencyPolicySTATUSARM runs a test to see if a specific instance of ConsistencyPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConsistencyPolicySTATUSARM(subject ConsistencyPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConsistencyPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConsistencyPolicy_STATUSARM instances for property testing - lazily instantiated by
// ConsistencyPolicySTATUSARMGenerator()
var consistencyPolicySTATUSARMGenerator gopter.Gen

// ConsistencyPolicySTATUSARMGenerator returns a generator of ConsistencyPolicy_STATUSARM instances for property testing.
func ConsistencyPolicySTATUSARMGenerator() gopter.Gen {
	if consistencyPolicySTATUSARMGenerator != nil {
		return consistencyPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConsistencyPolicySTATUSARM(generators)
	consistencyPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ConsistencyPolicy_STATUSARM{}), generators)

	return consistencyPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForConsistencyPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConsistencyPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["DefaultConsistencyLevel"] = gen.PtrOf(gen.OneConstOf(
		ConsistencyPolicySTATUSDefaultConsistencyLevel_BoundedStaleness,
		ConsistencyPolicySTATUSDefaultConsistencyLevel_ConsistentPrefix,
		ConsistencyPolicySTATUSDefaultConsistencyLevel_Eventual,
		ConsistencyPolicySTATUSDefaultConsistencyLevel_Session,
		ConsistencyPolicySTATUSDefaultConsistencyLevel_Strong))
	gens["MaxIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["MaxStalenessPrefix"] = gen.PtrOf(gen.Int())
}

func Test_CorsPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsPolicySTATUSARM, CorsPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsPolicySTATUSARM runs a test to see if a specific instance of CorsPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsPolicySTATUSARM(subject CorsPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsPolicy_STATUSARM instances for property testing - lazily instantiated by
// CorsPolicySTATUSARMGenerator()
var corsPolicySTATUSARMGenerator gopter.Gen

// CorsPolicySTATUSARMGenerator returns a generator of CorsPolicy_STATUSARM instances for property testing.
func CorsPolicySTATUSARMGenerator() gopter.Gen {
	if corsPolicySTATUSARMGenerator != nil {
		return corsPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsPolicySTATUSARM(generators)
	corsPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(CorsPolicy_STATUSARM{}), generators)

	return corsPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["AllowedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedMethods"] = gen.PtrOf(gen.AlphaString())
	gens["AllowedOrigins"] = gen.PtrOf(gen.AlphaString())
	gens["ExposedHeaders"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgeInSeconds"] = gen.PtrOf(gen.Int())
}

func Test_FailoverPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverPolicySTATUSARM, FailoverPolicySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverPolicySTATUSARM runs a test to see if a specific instance of FailoverPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverPolicySTATUSARM(subject FailoverPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverPolicy_STATUSARM instances for property testing - lazily instantiated by
// FailoverPolicySTATUSARMGenerator()
var failoverPolicySTATUSARMGenerator gopter.Gen

// FailoverPolicySTATUSARMGenerator returns a generator of FailoverPolicy_STATUSARM instances for property testing.
func FailoverPolicySTATUSARMGenerator() gopter.Gen {
	if failoverPolicySTATUSARMGenerator != nil {
		return failoverPolicySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverPolicySTATUSARM(generators)
	failoverPolicySTATUSARMGenerator = gen.Struct(reflect.TypeOf(FailoverPolicy_STATUSARM{}), generators)

	return failoverPolicySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForFailoverPolicySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverPolicySTATUSARM(gens map[string]gopter.Gen) {
	gens["FailoverPriority"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["LocationName"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpAddressOrRange_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddressOrRange_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddressOrRangeSTATUSARM, IpAddressOrRangeSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddressOrRangeSTATUSARM runs a test to see if a specific instance of IpAddressOrRange_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddressOrRangeSTATUSARM(subject IpAddressOrRange_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddressOrRange_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddressOrRange_STATUSARM instances for property testing - lazily instantiated by
// IpAddressOrRangeSTATUSARMGenerator()
var ipAddressOrRangeSTATUSARMGenerator gopter.Gen

// IpAddressOrRangeSTATUSARMGenerator returns a generator of IpAddressOrRange_STATUSARM instances for property testing.
func IpAddressOrRangeSTATUSARMGenerator() gopter.Gen {
	if ipAddressOrRangeSTATUSARMGenerator != nil {
		return ipAddressOrRangeSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressOrRangeSTATUSARM(generators)
	ipAddressOrRangeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(IpAddressOrRange_STATUSARM{}), generators)

	return ipAddressOrRangeSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddressOrRangeSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddressOrRangeSTATUSARM(gens map[string]gopter.Gen) {
	gens["IpAddressOrRange"] = gen.PtrOf(gen.AlphaString())
}

func Test_Location_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Location_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLocationSTATUSARM, LocationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLocationSTATUSARM runs a test to see if a specific instance of Location_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLocationSTATUSARM(subject Location_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Location_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Location_STATUSARM instances for property testing - lazily instantiated by LocationSTATUSARMGenerator()
var locationSTATUSARMGenerator gopter.Gen

// LocationSTATUSARMGenerator returns a generator of Location_STATUSARM instances for property testing.
func LocationSTATUSARMGenerator() gopter.Gen {
	if locationSTATUSARMGenerator != nil {
		return locationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLocationSTATUSARM(generators)
	locationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Location_STATUSARM{}), generators)

	return locationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForLocationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLocationSTATUSARM(gens map[string]gopter.Gen) {
	gens["DocumentEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["FailoverPriority"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsZoneRedundant"] = gen.PtrOf(gen.Bool())
	gens["LocationName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentitySTATUSUserAssignedIdentitiesARM, ManagedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentitySTATUSUserAssignedIdentitiesARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentitySTATUSUserAssignedIdentitiesARM(subject ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ManagedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator()
var managedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator gopter.Gen

// ManagedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator returns a generator of ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing.
func ManagedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if managedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator != nil {
		return managedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSUserAssignedIdentitiesARM(generators)
	managedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_UserAssignedIdentitiesARM{}), generators)

	return managedServiceIdentitySTATUSUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentitySTATUSUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM, PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(subject PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator()
var privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM instances for property testing.
func PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(generators)
	privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRuleSTATUSARM, VirtualNetworkRuleSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRuleSTATUSARM runs a test to see if a specific instance of VirtualNetworkRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRuleSTATUSARM(subject VirtualNetworkRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_STATUSARM instances for property testing - lazily instantiated by
// VirtualNetworkRuleSTATUSARMGenerator()
var virtualNetworkRuleSTATUSARMGenerator gopter.Gen

// VirtualNetworkRuleSTATUSARMGenerator returns a generator of VirtualNetworkRule_STATUSARM instances for property testing.
func VirtualNetworkRuleSTATUSARMGenerator() gopter.Gen {
	if virtualNetworkRuleSTATUSARMGenerator != nil {
		return virtualNetworkRuleSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRuleSTATUSARM(generators)
	virtualNetworkRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_STATUSARM{}), generators)

	return virtualNetworkRuleSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRuleSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVNetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
