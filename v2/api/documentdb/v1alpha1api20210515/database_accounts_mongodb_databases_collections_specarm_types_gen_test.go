// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsMongodbDatabasesCollections_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabasesCollections_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsSPECARM, DatabaseAccountsMongodbDatabasesCollectionsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsSPECARM runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollections_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsSPECARM(subject DatabaseAccountsMongodbDatabasesCollections_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabasesCollections_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabasesCollections_SPECARM instances for property testing - lazily instantiated
//by DatabaseAccountsMongodbDatabasesCollectionsSPECARMGenerator()
var databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollectionsSPECARMGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollections_SPECARM instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollectionsSPECARMGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator != nil {
		return databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM(generators)
	databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollections_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM(generators)
	databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollections_SPECARM{}), generators)

	return databaseAccountsMongodbDatabasesCollectionsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = MongoDBCollectionCreateUpdatePropertiesSpecARMGenerator()
}

func Test_MongoDBCollectionCreateUpdateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionCreateUpdateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionCreateUpdatePropertiesSpecARM, MongoDBCollectionCreateUpdatePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionCreateUpdatePropertiesSpecARM runs a test to see if a specific instance of MongoDBCollectionCreateUpdateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionCreateUpdatePropertiesSpecARM(subject MongoDBCollectionCreateUpdateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionCreateUpdateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionCreateUpdateProperties_SpecARM instances for property testing - lazily instantiated by
//MongoDBCollectionCreateUpdatePropertiesSpecARMGenerator()
var mongoDBCollectionCreateUpdatePropertiesSpecARMGenerator gopter.Gen

// MongoDBCollectionCreateUpdatePropertiesSpecARMGenerator returns a generator of MongoDBCollectionCreateUpdateProperties_SpecARM instances for property testing.
func MongoDBCollectionCreateUpdatePropertiesSpecARMGenerator() gopter.Gen {
	if mongoDBCollectionCreateUpdatePropertiesSpecARMGenerator != nil {
		return mongoDBCollectionCreateUpdatePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdatePropertiesSpecARM(generators)
	mongoDBCollectionCreateUpdatePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionCreateUpdateProperties_SpecARM{}), generators)

	return mongoDBCollectionCreateUpdatePropertiesSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdatePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionCreateUpdatePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsSpecARMGenerator())
	gens["Resource"] = MongoDBCollectionResourceSpecARMGenerator()
}

func Test_CreateUpdateOptions_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptionsSpecARM, CreateUpdateOptionsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptionsSpecARM runs a test to see if a specific instance of CreateUpdateOptions_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptionsSpecARM(subject CreateUpdateOptions_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_SpecARM instances for property testing - lazily instantiated by
//CreateUpdateOptionsSpecARMGenerator()
var createUpdateOptionsSpecARMGenerator gopter.Gen

// CreateUpdateOptionsSpecARMGenerator returns a generator of CreateUpdateOptions_SpecARM instances for property testing.
// We first initialize createUpdateOptionsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptionsSpecARMGenerator() gopter.Gen {
	if createUpdateOptionsSpecARMGenerator != nil {
		return createUpdateOptionsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptionsSpecARM(generators)
	createUpdateOptionsSpecARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptionsSpecARM(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptionsSpecARM(generators)
	createUpdateOptionsSpecARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_SpecARM{}), generators)

	return createUpdateOptionsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptionsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptionsSpecARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptionsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptionsSpecARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsSpecARMGenerator())
}

func Test_MongoDBCollectionResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResourceSpecARM, MongoDBCollectionResourceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResourceSpecARM runs a test to see if a specific instance of MongoDBCollectionResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResourceSpecARM(subject MongoDBCollectionResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_SpecARM instances for property testing - lazily instantiated by
//MongoDBCollectionResourceSpecARMGenerator()
var mongoDBCollectionResourceSpecARMGenerator gopter.Gen

// MongoDBCollectionResourceSpecARMGenerator returns a generator of MongoDBCollectionResource_SpecARM instances for property testing.
// We first initialize mongoDBCollectionResourceSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResourceSpecARMGenerator() gopter.Gen {
	if mongoDBCollectionResourceSpecARMGenerator != nil {
		return mongoDBCollectionResourceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResourceSpecARM(generators)
	mongoDBCollectionResourceSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResourceSpecARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResourceSpecARM(generators)
	mongoDBCollectionResourceSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_SpecARM{}), generators)

	return mongoDBCollectionResourceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResourceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResourceSpecARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.AlphaString()
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResourceSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResourceSpecARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndexSpecARMGenerator())
}

func Test_AutoscaleSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsSpecARM, AutoscaleSettingsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsSpecARM runs a test to see if a specific instance of AutoscaleSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsSpecARM(subject AutoscaleSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_SpecARM instances for property testing - lazily instantiated by
//AutoscaleSettingsSpecARMGenerator()
var autoscaleSettingsSpecARMGenerator gopter.Gen

// AutoscaleSettingsSpecARMGenerator returns a generator of AutoscaleSettings_SpecARM instances for property testing.
func AutoscaleSettingsSpecARMGenerator() gopter.Gen {
	if autoscaleSettingsSpecARMGenerator != nil {
		return autoscaleSettingsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsSpecARM(generators)
	autoscaleSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_SpecARM{}), generators)

	return autoscaleSettingsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexSpecARM, MongoIndexSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexSpecARM runs a test to see if a specific instance of MongoIndex_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexSpecARM(subject MongoIndex_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_SpecARM instances for property testing - lazily instantiated by MongoIndexSpecARMGenerator()
var mongoIndexSpecARMGenerator gopter.Gen

// MongoIndexSpecARMGenerator returns a generator of MongoIndex_SpecARM instances for property testing.
func MongoIndexSpecARMGenerator() gopter.Gen {
	if mongoIndexSpecARMGenerator != nil {
		return mongoIndexSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndexSpecARM(generators)
	mongoIndexSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_SpecARM{}), generators)

	return mongoIndexSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndexSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndexSpecARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeysSpecARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptionsSpecARMGenerator())
}

func Test_MongoIndexKeys_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeysSpecARM, MongoIndexKeysSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeysSpecARM runs a test to see if a specific instance of MongoIndexKeys_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeysSpecARM(subject MongoIndexKeys_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_SpecARM instances for property testing - lazily instantiated by
//MongoIndexKeysSpecARMGenerator()
var mongoIndexKeysSpecARMGenerator gopter.Gen

// MongoIndexKeysSpecARMGenerator returns a generator of MongoIndexKeys_SpecARM instances for property testing.
func MongoIndexKeysSpecARMGenerator() gopter.Gen {
	if mongoIndexKeysSpecARMGenerator != nil {
		return mongoIndexKeysSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeysSpecARM(generators)
	mongoIndexKeysSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_SpecARM{}), generators)

	return mongoIndexKeysSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeysSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeysSpecARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptionsSpecARM, MongoIndexOptionsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptionsSpecARM runs a test to see if a specific instance of MongoIndexOptions_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptionsSpecARM(subject MongoIndexOptions_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_SpecARM instances for property testing - lazily instantiated by
//MongoIndexOptionsSpecARMGenerator()
var mongoIndexOptionsSpecARMGenerator gopter.Gen

// MongoIndexOptionsSpecARMGenerator returns a generator of MongoIndexOptions_SpecARM instances for property testing.
func MongoIndexOptionsSpecARMGenerator() gopter.Gen {
	if mongoIndexOptionsSpecARMGenerator != nil {
		return mongoIndexOptionsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptionsSpecARM(generators)
	mongoIndexOptionsSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_SpecARM{}), generators)

	return mongoIndexOptionsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptionsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptionsSpecARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
