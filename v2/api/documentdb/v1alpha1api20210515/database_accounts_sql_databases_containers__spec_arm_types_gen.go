// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

// Deprecated version of DatabaseAccountsSqlDatabasesContainers_Spec. Use v1beta20210515.DatabaseAccountsSqlDatabasesContainers_Spec instead
type DatabaseAccountsSqlDatabasesContainers_SpecARM struct {
	Location   *string                                `json:"location,omitempty"`
	Name       string                                 `json:"name,omitempty"`
	Properties *SqlContainerCreateUpdatePropertiesARM `json:"properties,omitempty"`
	Tags       map[string]string                      `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &DatabaseAccountsSqlDatabasesContainers_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (containers DatabaseAccountsSqlDatabasesContainers_SpecARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (containers *DatabaseAccountsSqlDatabasesContainers_SpecARM) GetName() string {
	return containers.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
func (containers *DatabaseAccountsSqlDatabasesContainers_SpecARM) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
}

// Deprecated version of SqlContainerCreateUpdateProperties. Use v1beta20210515.SqlContainerCreateUpdateProperties instead
type SqlContainerCreateUpdatePropertiesARM struct {
	Options  *CreateUpdateOptionsARM  `json:"options,omitempty"`
	Resource *SqlContainerResourceARM `json:"resource,omitempty"`
}

// Deprecated version of SqlContainerResource. Use v1beta20210515.SqlContainerResource instead
type SqlContainerResourceARM struct {
	AnalyticalStorageTtl     *int                         `json:"analyticalStorageTtl,omitempty"`
	ConflictResolutionPolicy *ConflictResolutionPolicyARM `json:"conflictResolutionPolicy,omitempty"`
	DefaultTtl               *int                         `json:"defaultTtl,omitempty"`
	Id                       *string                      `json:"id,omitempty"`
	IndexingPolicy           *IndexingPolicyARM           `json:"indexingPolicy,omitempty"`
	PartitionKey             *ContainerPartitionKeyARM    `json:"partitionKey,omitempty"`
	UniqueKeyPolicy          *UniqueKeyPolicyARM          `json:"uniqueKeyPolicy,omitempty"`
}

// Deprecated version of ConflictResolutionPolicy. Use v1beta20210515.ConflictResolutionPolicy instead
type ConflictResolutionPolicyARM struct {
	ConflictResolutionPath      *string                       `json:"conflictResolutionPath,omitempty"`
	ConflictResolutionProcedure *string                       `json:"conflictResolutionProcedure,omitempty"`
	Mode                        *ConflictResolutionPolicyMode `json:"mode,omitempty"`
}

// Deprecated version of ContainerPartitionKey. Use v1beta20210515.ContainerPartitionKey instead
type ContainerPartitionKeyARM struct {
	Kind    *ContainerPartitionKeyKind `json:"kind,omitempty"`
	Paths   []string                   `json:"paths,omitempty"`
	Version *int                       `json:"version,omitempty"`
}

// Deprecated version of IndexingPolicy. Use v1beta20210515.IndexingPolicy instead
type IndexingPolicyARM struct {
	Automatic        *bool                       `json:"automatic,omitempty"`
	CompositeIndexes [][]CompositePathARM        `json:"compositeIndexes,omitempty"`
	ExcludedPaths    []ExcludedPathARM           `json:"excludedPaths,omitempty"`
	IncludedPaths    []IncludedPathARM           `json:"includedPaths,omitempty"`
	IndexingMode     *IndexingPolicyIndexingMode `json:"indexingMode,omitempty"`
	SpatialIndexes   []SpatialSpecARM            `json:"spatialIndexes,omitempty"`
}

// Deprecated version of UniqueKeyPolicy. Use v1beta20210515.UniqueKeyPolicy instead
type UniqueKeyPolicyARM struct {
	UniqueKeys []UniqueKeyARM `json:"uniqueKeys,omitempty"`
}

// Deprecated version of CompositePath. Use v1beta20210515.CompositePath instead
type CompositePathARM struct {
	Order *CompositePathOrder `json:"order,omitempty"`
	Path  *string             `json:"path,omitempty"`
}

// Deprecated version of ConflictResolutionPolicyMode. Use v1beta20210515.ConflictResolutionPolicyMode instead
// +kubebuilder:validation:Enum={"Custom","LastWriterWins"}
type ConflictResolutionPolicyMode string

const (
	ConflictResolutionPolicyMode_Custom         = ConflictResolutionPolicyMode("Custom")
	ConflictResolutionPolicyMode_LastWriterWins = ConflictResolutionPolicyMode("LastWriterWins")
)

// Deprecated version of ContainerPartitionKeyKind. Use v1beta20210515.ContainerPartitionKeyKind instead
// +kubebuilder:validation:Enum={"Hash","MultiHash","Range"}
type ContainerPartitionKeyKind string

const (
	ContainerPartitionKeyKind_Hash      = ContainerPartitionKeyKind("Hash")
	ContainerPartitionKeyKind_MultiHash = ContainerPartitionKeyKind("MultiHash")
	ContainerPartitionKeyKind_Range     = ContainerPartitionKeyKind("Range")
)

// Deprecated version of ExcludedPath. Use v1beta20210515.ExcludedPath instead
type ExcludedPathARM struct {
	Path *string `json:"path,omitempty"`
}

// Deprecated version of IncludedPath. Use v1beta20210515.IncludedPath instead
type IncludedPathARM struct {
	Indexes []IndexesARM `json:"indexes,omitempty"`
	Path    *string      `json:"path,omitempty"`
}

// Deprecated version of IndexingPolicyIndexingMode. Use v1beta20210515.IndexingPolicyIndexingMode instead
// +kubebuilder:validation:Enum={"consistent","lazy","none"}
type IndexingPolicyIndexingMode string

const (
	IndexingPolicyIndexingMode_Consistent = IndexingPolicyIndexingMode("consistent")
	IndexingPolicyIndexingMode_Lazy       = IndexingPolicyIndexingMode("lazy")
	IndexingPolicyIndexingMode_None       = IndexingPolicyIndexingMode("none")
)

// Deprecated version of SpatialSpec. Use v1beta20210515.SpatialSpec instead
type SpatialSpecARM struct {
	Path  *string            `json:"path,omitempty"`
	Types []SpatialSpecTypes `json:"types,omitempty"`
}

// Deprecated version of UniqueKey. Use v1beta20210515.UniqueKey instead
type UniqueKeyARM struct {
	Paths []string `json:"paths,omitempty"`
}

// Deprecated version of CompositePathOrder. Use v1beta20210515.CompositePathOrder instead
// +kubebuilder:validation:Enum={"ascending","descending"}
type CompositePathOrder string

const (
	CompositePathOrder_Ascending  = CompositePathOrder("ascending")
	CompositePathOrder_Descending = CompositePathOrder("descending")
)

// Deprecated version of Indexes. Use v1beta20210515.Indexes instead
type IndexesARM struct {
	DataType  *IndexesDataType `json:"dataType,omitempty"`
	Kind      *IndexesKind     `json:"kind,omitempty"`
	Precision *int             `json:"precision,omitempty"`
}

// Deprecated version of SpatialSpecTypes. Use v1beta20210515.SpatialSpecTypes instead
// +kubebuilder:validation:Enum={"LineString","MultiPolygon","Point","Polygon"}
type SpatialSpecTypes string

const (
	SpatialSpecTypes_LineString   = SpatialSpecTypes("LineString")
	SpatialSpecTypes_MultiPolygon = SpatialSpecTypes("MultiPolygon")
	SpatialSpecTypes_Point        = SpatialSpecTypes("Point")
	SpatialSpecTypes_Polygon      = SpatialSpecTypes("Polygon")
)

// Deprecated version of IndexesDataType. Use v1beta20210515.IndexesDataType instead
// +kubebuilder:validation:Enum={"LineString","MultiPolygon","Number","Point","Polygon","String"}
type IndexesDataType string

const (
	IndexesDataType_LineString   = IndexesDataType("LineString")
	IndexesDataType_MultiPolygon = IndexesDataType("MultiPolygon")
	IndexesDataType_Number       = IndexesDataType("Number")
	IndexesDataType_Point        = IndexesDataType("Point")
	IndexesDataType_Polygon      = IndexesDataType("Polygon")
	IndexesDataType_String       = IndexesDataType("String")
)

// Deprecated version of IndexesKind. Use v1beta20210515.IndexesKind instead
// +kubebuilder:validation:Enum={"Hash","Range","Spatial"}
type IndexesKind string

const (
	IndexesKind_Hash    = IndexesKind("Hash")
	IndexesKind_Range   = IndexesKind("Range")
	IndexesKind_Spatial = IndexesKind("Spatial")
)
