// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlUserDefinedFunctionCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateParametersStatusARM, SqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateParametersStatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateParametersStatusARM(subject SqlUserDefinedFunctionCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM instances for property testing - lazily
//instantiated by SqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator()
var sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator gopter.Gen

// SqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator returns a generator of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator != nil {
		return sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM(generators)
	sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM(generators)
	sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionCreateUpdateParameters_StatusARM{}), generators)

	return sqlUserDefinedFunctionCreateUpdateParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator())
}

func Test_SqlUserDefinedFunctionCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdatePropertiesStatusARM, SqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdatePropertiesStatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdatePropertiesStatusARM(subject SqlUserDefinedFunctionCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM instances for property testing - lazily
//instantiated by SqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator()
var sqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator gopter.Gen

// SqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator returns a generator of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM instances for property testing.
func SqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator != nil {
		return sqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdatePropertiesStatusARM(generators)
	sqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionCreateUpdateProperties_StatusARM{}), generators)

	return sqlUserDefinedFunctionCreateUpdatePropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdatePropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdatePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsStatusARMGenerator())
	gens["Resource"] = SqlUserDefinedFunctionResourceStatusARMGenerator()
}

func Test_SqlUserDefinedFunctionResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionResourceStatusARM, SqlUserDefinedFunctionResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionResourceStatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionResourceStatusARM(subject SqlUserDefinedFunctionResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionResource_StatusARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionResourceStatusARMGenerator()
var sqlUserDefinedFunctionResourceStatusARMGenerator gopter.Gen

// SqlUserDefinedFunctionResourceStatusARMGenerator returns a generator of SqlUserDefinedFunctionResource_StatusARM instances for property testing.
func SqlUserDefinedFunctionResourceStatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionResourceStatusARMGenerator != nil {
		return sqlUserDefinedFunctionResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResourceStatusARM(generators)
	sqlUserDefinedFunctionResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionResource_StatusARM{}), generators)

	return sqlUserDefinedFunctionResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
