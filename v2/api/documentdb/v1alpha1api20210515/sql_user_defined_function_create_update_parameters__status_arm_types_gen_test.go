// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlUserDefinedFunctionCreateUpdateParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM, SqlUserDefinedFunctionCreateUpdateParameters_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM(subject SqlUserDefinedFunctionCreateUpdateParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionCreateUpdateParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM instances for property testing - lazily
//instantiated by SqlUserDefinedFunctionCreateUpdateParameters_StatusARMGenerator()
var sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator gopter.Gen

// SqlUserDefinedFunctionCreateUpdateParameters_StatusARMGenerator returns a generator of SqlUserDefinedFunctionCreateUpdateParameters_StatusARM instances for property testing.
// We first initialize sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlUserDefinedFunctionCreateUpdateParameters_StatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator != nil {
		return sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM(generators)
	sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionCreateUpdateParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM(generators)
	sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionCreateUpdateParameters_StatusARM{}), generators)

	return sqlUserDefinedFunctionCreateUpdateParameters_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateParameters_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlUserDefinedFunctionCreateUpdateProperties_StatusARMGenerator())
}

func Test_SqlUserDefinedFunctionCreateUpdateProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateProperties_StatusARM, SqlUserDefinedFunctionCreateUpdateProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateProperties_StatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionCreateUpdateProperties_StatusARM(subject SqlUserDefinedFunctionCreateUpdateProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionCreateUpdateProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM instances for property testing - lazily
//instantiated by SqlUserDefinedFunctionCreateUpdateProperties_StatusARMGenerator()
var sqlUserDefinedFunctionCreateUpdateProperties_statusARMGenerator gopter.Gen

// SqlUserDefinedFunctionCreateUpdateProperties_StatusARMGenerator returns a generator of SqlUserDefinedFunctionCreateUpdateProperties_StatusARM instances for property testing.
func SqlUserDefinedFunctionCreateUpdateProperties_StatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionCreateUpdateProperties_statusARMGenerator != nil {
		return sqlUserDefinedFunctionCreateUpdateProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateProperties_StatusARM(generators)
	sqlUserDefinedFunctionCreateUpdateProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionCreateUpdateProperties_StatusARM{}), generators)

	return sqlUserDefinedFunctionCreateUpdateProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionCreateUpdateProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = SqlUserDefinedFunctionResource_StatusARMGenerator()
}

func Test_SqlUserDefinedFunctionResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionResource_StatusARM, SqlUserDefinedFunctionResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionResource_StatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionResource_StatusARM(subject SqlUserDefinedFunctionResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionResource_StatusARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionResource_StatusARMGenerator()
var sqlUserDefinedFunctionResource_statusARMGenerator gopter.Gen

// SqlUserDefinedFunctionResource_StatusARMGenerator returns a generator of SqlUserDefinedFunctionResource_StatusARM instances for property testing.
func SqlUserDefinedFunctionResource_StatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionResource_statusARMGenerator != nil {
		return sqlUserDefinedFunctionResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_StatusARM(generators)
	sqlUserDefinedFunctionResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionResource_StatusARM{}), generators)

	return sqlUserDefinedFunctionResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
