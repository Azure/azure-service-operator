// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBDatabase_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabase_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabase_StatusARM, MongoDBDatabase_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabase_StatusARM runs a test to see if a specific instance of MongoDBDatabase_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabase_StatusARM(subject MongoDBDatabase_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabase_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabase_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabase_StatusARMGenerator()
var mongoDBDatabase_statusARMGenerator gopter.Gen

// MongoDBDatabase_StatusARMGenerator returns a generator of MongoDBDatabase_StatusARM instances for property testing.
// We first initialize mongoDBDatabase_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabase_StatusARMGenerator() gopter.Gen {
	if mongoDBDatabase_statusARMGenerator != nil {
		return mongoDBDatabase_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabase_StatusARM(generators)
	mongoDBDatabase_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabase_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabase_StatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabase_StatusARM(generators)
	mongoDBDatabase_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabase_StatusARM{}), generators)

	return mongoDBDatabase_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabase_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabase_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabase_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabase_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseProperties_StatusARMGenerator())
}

func Test_MongoDBDatabaseProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseProperties_StatusARM, MongoDBDatabaseProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseProperties_StatusARM runs a test to see if a specific instance of MongoDBDatabaseProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseProperties_StatusARM(subject MongoDBDatabaseProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseProperties_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseProperties_StatusARMGenerator()
var mongoDBDatabaseProperties_statusARMGenerator gopter.Gen

// MongoDBDatabaseProperties_StatusARMGenerator returns a generator of MongoDBDatabaseProperties_StatusARM instances for property testing.
func MongoDBDatabaseProperties_StatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseProperties_statusARMGenerator != nil {
		return mongoDBDatabaseProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseProperties_StatusARM(generators)
	mongoDBDatabaseProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseProperties_StatusARM{}), generators)

	return mongoDBDatabaseProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = MongoDBDatabaseResource_StatusARMGenerator()
}

func Test_MongoDBDatabaseResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResource_StatusARM, MongoDBDatabaseResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResource_StatusARM runs a test to see if a specific instance of MongoDBDatabaseResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResource_StatusARM(subject MongoDBDatabaseResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseResource_StatusARMGenerator()
var mongoDBDatabaseResource_statusARMGenerator gopter.Gen

// MongoDBDatabaseResource_StatusARMGenerator returns a generator of MongoDBDatabaseResource_StatusARM instances for property testing.
func MongoDBDatabaseResource_StatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseResource_statusARMGenerator != nil {
		return mongoDBDatabaseResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_StatusARM(generators)
	mongoDBDatabaseResource_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_StatusARM{}), generators)

	return mongoDBDatabaseResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
