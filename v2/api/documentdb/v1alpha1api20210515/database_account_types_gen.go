// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-05-15/cosmos-db.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
type DatabaseAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccounts_SPEC  `json:"spec,omitempty"`
	Status            DatabaseAccount_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &DatabaseAccount{}

// GetConditions returns the conditions of the resource
func (account *DatabaseAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *DatabaseAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &DatabaseAccount{}

// ConvertFrom populates our DatabaseAccount from the provided hub DatabaseAccount
func (account *DatabaseAccount) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210515storage.DatabaseAccount)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/DatabaseAccount but received %T instead", hub)
	}

	return account.AssignPropertiesFromDatabaseAccount(source)
}

// ConvertTo populates the provided hub DatabaseAccount from our DatabaseAccount
func (account *DatabaseAccount) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210515storage.DatabaseAccount)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/DatabaseAccount but received %T instead", hub)
	}

	return account.AssignPropertiesToDatabaseAccount(destination)
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-databaseaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=databaseaccounts,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.databaseaccounts.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &DatabaseAccount{}

// Default applies defaults to the DatabaseAccount resource
func (account *DatabaseAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *DatabaseAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the DatabaseAccount resource
func (account *DatabaseAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &DatabaseAccount{}

// AzureName returns the Azure name of the resource
func (account *DatabaseAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (account DatabaseAccount) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (account *DatabaseAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (account *DatabaseAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *DatabaseAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (account *DatabaseAccount) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (account *DatabaseAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DatabaseAccount_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *DatabaseAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *DatabaseAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DatabaseAccount_Status); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st DatabaseAccount_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-databaseaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=databaseaccounts,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.databaseaccounts.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &DatabaseAccount{}

// ValidateCreate validates the creation of the resource
func (account *DatabaseAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *DatabaseAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *DatabaseAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *DatabaseAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (account *DatabaseAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *DatabaseAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (account *DatabaseAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromDatabaseAccount populates our DatabaseAccount from the provided source DatabaseAccount
func (account *DatabaseAccount) AssignPropertiesFromDatabaseAccount(source *v1alpha1api20210515storage.DatabaseAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccounts_SPEC
	err := spec.AssignPropertiesFromDatabaseAccounts_SPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccounts_SPEC() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status DatabaseAccount_Status
	err = status.AssignPropertiesFromDatabaseAccount_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccount_Status() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccount populates the provided destination DatabaseAccount from our DatabaseAccount
func (account *DatabaseAccount) AssignPropertiesToDatabaseAccount(destination *v1alpha1api20210515storage.DatabaseAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccounts_SPEC
	err := account.Spec.AssignPropertiesToDatabaseAccounts_SPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccounts_SPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.DatabaseAccount_Status
	err = account.Status.AssignPropertiesToDatabaseAccount_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccount_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *DatabaseAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "DatabaseAccount",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-05-15/cosmos-db.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
type DatabaseAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseAccount `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-05-15"}
type APIVersion string

const APIVersionValue = APIVersion("2021-05-15")

type DatabaseAccount_Status struct {
	//AnalyticalStorageConfiguration: Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration_Status `json:"analyticalStorageConfiguration,omitempty"`

	//ApiProperties: API specific properties. Currently, supported only for MongoDB
	//API.
	ApiProperties *ApiProperties_Status `json:"apiProperties,omitempty"`

	//BackupPolicy: The object representing the policy for taking backups on an
	//account.
	BackupPolicy *BackupPolicy_Status `json:"backupPolicy,omitempty"`

	//Capabilities: List of Cosmos DB capabilities for the account
	Capabilities []Capability_Status `json:"capabilities,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//ConnectorOffer: The cassandra connector offer type for the Cosmos DB database C*
	//account.
	ConnectorOffer *ConnectorOffer_Status `json:"connectorOffer,omitempty"`

	//ConsistencyPolicy: The consistency policy for the Cosmos DB account.
	ConsistencyPolicy *ConsistencyPolicy_Status `json:"consistencyPolicy,omitempty"`

	//Cors: The CORS policy for the Cosmos DB database account.
	Cors []CorsPolicy_Status `json:"cors,omitempty"`

	//DatabaseAccountOfferType: The offer type for the database
	DatabaseAccountOfferType *DatabaseAccountOfferType_Status `json:"databaseAccountOfferType,omitempty"`

	//DefaultIdentity: The default identity for accessing key vault used in features
	//like customer managed keys. The default identity needs to be explicitly set by
	//the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	//DisableKeyBasedMetadataWriteAccess: Disable write operations on metadata
	//resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	//EnableAnalyticalStorage: Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	//EnableAutomaticFailover: Enables automatic failover of the write region in the
	//rare event that the region is unavailable due to an outage. Automatic failover
	//will result in a new write region for the account and is chosen based on the
	//failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	//EnableCassandraConnector: Enables the cassandra connector on the Cosmos DB C*
	//account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	//EnableFreeTier: Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	//EnableMultipleWriteLocations: Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id       *string                        `json:"id,omitempty"`
	Identity *ManagedServiceIdentity_Status `json:"identity,omitempty"`

	//IpRules: List of IpRules.
	IpRules []IpAddressOrRange_Status `json:"ipRules,omitempty"`

	//IsVirtualNetworkFilterEnabled: Flag to indicate whether to enable/disable
	//Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	//KeyVaultKeyUri: The URI of the key vault
	KeyVaultKeyUri *string `json:"keyVaultKeyUri,omitempty"`

	//Kind: Indicates the type of database account. This can only be set at database
	//account creation.
	Kind *DatabaseAccount_Kind_Status `json:"kind,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Locations: An array that contains the georeplication locations enabled for the
	//Cosmos DB account.
	Locations []Location_Status `json:"locations,omitempty"`

	//Name: The name of the ARM resource.
	Name *string `json:"name,omitempty"`

	//NetworkAclBypass: Indicates what services are allowed to bypass firewall checks.
	NetworkAclBypass *NetworkAclBypass_Status `json:"networkAclBypass,omitempty"`

	//NetworkAclBypassResourceIds: An array that contains the Resource Ids for Network
	//Acl Bypass for the Cosmos DB account.
	NetworkAclBypassResourceIds []string `json:"networkAclBypassResourceIds,omitempty"`

	//PublicNetworkAccess: Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess_Status `json:"publicNetworkAccess,omitempty"`
	Tags                map[string]string           `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`

	//VirtualNetworkRules: List of Virtual Network ACL rules configured for the Cosmos
	//DB account.
	VirtualNetworkRules []VirtualNetworkRule_Status `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DatabaseAccount_Status{}

// ConvertStatusFrom populates our DatabaseAccount_Status from the provided source
func (account *DatabaseAccount_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccount_Status)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromDatabaseAccount_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccount_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromDatabaseAccount_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DatabaseAccount_Status
func (account *DatabaseAccount_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccount_Status)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToDatabaseAccount_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccount_Status{}
	err := account.AssignPropertiesToDatabaseAccount_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &DatabaseAccount_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *DatabaseAccount_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccount_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *DatabaseAccount_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccount_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccount_StatusARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AnalyticalStorageConfiguration != nil {
			var analyticalStorageConfiguration1 AnalyticalStorageConfiguration_Status
			err := analyticalStorageConfiguration1.PopulateFromARM(owner, *typedInput.Properties.AnalyticalStorageConfiguration)
			if err != nil {
				return err
			}
			analyticalStorageConfiguration := analyticalStorageConfiguration1
			account.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
		}
	}

	// Set property ‘ApiProperties’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiProperties != nil {
			var apiProperties1 ApiProperties_Status
			err := apiProperties1.PopulateFromARM(owner, *typedInput.Properties.ApiProperties)
			if err != nil {
				return err
			}
			apiProperties := apiProperties1
			account.ApiProperties = &apiProperties
		}
	}

	// Set property ‘BackupPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BackupPolicy != nil {
			var backupPolicy1 BackupPolicy_Status
			err := backupPolicy1.PopulateFromARM(owner, *typedInput.Properties.BackupPolicy)
			if err != nil {
				return err
			}
			backupPolicy := backupPolicy1
			account.BackupPolicy = &backupPolicy
		}
	}

	// Set property ‘Capabilities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Capabilities {
			var item1 Capability_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.Capabilities = append(account.Capabilities, item1)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ConnectorOffer’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConnectorOffer != nil {
			connectorOffer := *typedInput.Properties.ConnectorOffer
			account.ConnectorOffer = &connectorOffer
		}
	}

	// Set property ‘ConsistencyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConsistencyPolicy != nil {
			var consistencyPolicy1 ConsistencyPolicy_Status
			err := consistencyPolicy1.PopulateFromARM(owner, *typedInput.Properties.ConsistencyPolicy)
			if err != nil {
				return err
			}
			consistencyPolicy := consistencyPolicy1
			account.ConsistencyPolicy = &consistencyPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Cors {
			var item1 CorsPolicy_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.Cors = append(account.Cors, item1)
		}
	}

	// Set property ‘DatabaseAccountOfferType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		account.DatabaseAccountOfferType = &typedInput.Properties.DatabaseAccountOfferType
	}

	// Set property ‘DefaultIdentity’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultIdentity != nil {
			defaultIdentity := *typedInput.Properties.DefaultIdentity
			account.DefaultIdentity = &defaultIdentity
		}
	}

	// Set property ‘DisableKeyBasedMetadataWriteAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableKeyBasedMetadataWriteAccess != nil {
			disableKeyBasedMetadataWriteAccess := *typedInput.Properties.DisableKeyBasedMetadataWriteAccess
			account.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
		}
	}

	// Set property ‘EnableAnalyticalStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAnalyticalStorage != nil {
			enableAnalyticalStorage := *typedInput.Properties.EnableAnalyticalStorage
			account.EnableAnalyticalStorage = &enableAnalyticalStorage
		}
	}

	// Set property ‘EnableAutomaticFailover’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAutomaticFailover != nil {
			enableAutomaticFailover := *typedInput.Properties.EnableAutomaticFailover
			account.EnableAutomaticFailover = &enableAutomaticFailover
		}
	}

	// Set property ‘EnableCassandraConnector’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableCassandraConnector != nil {
			enableCassandraConnector := *typedInput.Properties.EnableCassandraConnector
			account.EnableCassandraConnector = &enableCassandraConnector
		}
	}

	// Set property ‘EnableFreeTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableFreeTier != nil {
			enableFreeTier := *typedInput.Properties.EnableFreeTier
			account.EnableFreeTier = &enableFreeTier
		}
	}

	// Set property ‘EnableMultipleWriteLocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableMultipleWriteLocations != nil {
			enableMultipleWriteLocations := *typedInput.Properties.EnableMultipleWriteLocations
			account.EnableMultipleWriteLocations = &enableMultipleWriteLocations
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		account.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedServiceIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘IpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpRules {
			var item1 IpAddressOrRange_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.IpRules = append(account.IpRules, item1)
		}
	}

	// Set property ‘IsVirtualNetworkFilterEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVirtualNetworkFilterEnabled != nil {
			isVirtualNetworkFilterEnabled := *typedInput.Properties.IsVirtualNetworkFilterEnabled
			account.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
		}
	}

	// Set property ‘KeyVaultKeyUri’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultKeyUri != nil {
			keyVaultKeyUri := *typedInput.Properties.KeyVaultKeyUri
			account.KeyVaultKeyUri = &keyVaultKeyUri
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		account.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 Location_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.Locations = append(account.Locations, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		account.Name = &name
	}

	// Set property ‘NetworkAclBypass’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAclBypass != nil {
			networkAclBypass := *typedInput.Properties.NetworkAclBypass
			account.NetworkAclBypass = &networkAclBypass
		}
	}

	// Set property ‘NetworkAclBypassResourceIds’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NetworkAclBypassResourceIds {
			account.NetworkAclBypassResourceIds = append(account.NetworkAclBypassResourceIds, item)
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			account.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		account.Type = &typeVar
	}

	// Set property ‘VirtualNetworkRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualNetworkRules {
			var item1 VirtualNetworkRule_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.VirtualNetworkRules = append(account.VirtualNetworkRules, item1)
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromDatabaseAccount_Status populates our DatabaseAccount_Status from the provided source DatabaseAccount_Status
func (account *DatabaseAccount_Status) AssignPropertiesFromDatabaseAccount_Status(source *v1alpha1api20210515storage.DatabaseAccount_Status) error {

	// AnalyticalStorageConfiguration
	if source.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration AnalyticalStorageConfiguration_Status
		err := analyticalStorageConfiguration.AssignPropertiesFromAnalyticalStorageConfiguration_Status(source.AnalyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAnalyticalStorageConfiguration_Status() to populate field AnalyticalStorageConfiguration")
		}
		account.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		account.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if source.ApiProperties != nil {
		var apiProperty ApiProperties_Status
		err := apiProperty.AssignPropertiesFromApiProperties_Status(source.ApiProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromApiProperties_Status() to populate field ApiProperties")
		}
		account.ApiProperties = &apiProperty
	} else {
		account.ApiProperties = nil
	}

	// BackupPolicy
	if source.BackupPolicy != nil {
		var backupPolicy BackupPolicy_Status
		err := backupPolicy.AssignPropertiesFromBackupPolicy_Status(source.BackupPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBackupPolicy_Status() to populate field BackupPolicy")
		}
		account.BackupPolicy = &backupPolicy
	} else {
		account.BackupPolicy = nil
	}

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability_Status, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability_Status
			err := capability.AssignPropertiesFromCapability_Status(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCapability_Status() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		account.Capabilities = capabilityList
	} else {
		account.Capabilities = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ConnectorOffer
	if source.ConnectorOffer != nil {
		connectorOffer := ConnectorOffer_Status(*source.ConnectorOffer)
		account.ConnectorOffer = &connectorOffer
	} else {
		account.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if source.ConsistencyPolicy != nil {
		var consistencyPolicy ConsistencyPolicy_Status
		err := consistencyPolicy.AssignPropertiesFromConsistencyPolicy_Status(source.ConsistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromConsistencyPolicy_Status() to populate field ConsistencyPolicy")
		}
		account.ConsistencyPolicy = &consistencyPolicy
	} else {
		account.ConsistencyPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		corList := make([]CorsPolicy_Status, len(source.Cors))
		for corIndex, corItem := range source.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor CorsPolicy_Status
			err := cor.AssignPropertiesFromCorsPolicy_Status(&corItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsPolicy_Status() to populate field Cors")
			}
			corList[corIndex] = cor
		}
		account.Cors = corList
	} else {
		account.Cors = nil
	}

	// DatabaseAccountOfferType
	if source.DatabaseAccountOfferType != nil {
		databaseAccountOfferType := DatabaseAccountOfferType_Status(*source.DatabaseAccountOfferType)
		account.DatabaseAccountOfferType = &databaseAccountOfferType
	} else {
		account.DatabaseAccountOfferType = nil
	}

	// DefaultIdentity
	account.DefaultIdentity = genruntime.ClonePointerToString(source.DefaultIdentity)

	// DisableKeyBasedMetadataWriteAccess
	if source.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *source.DisableKeyBasedMetadataWriteAccess
		account.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		account.DisableKeyBasedMetadataWriteAccess = nil
	}

	// EnableAnalyticalStorage
	if source.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *source.EnableAnalyticalStorage
		account.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		account.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if source.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *source.EnableAutomaticFailover
		account.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		account.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if source.EnableCassandraConnector != nil {
		enableCassandraConnector := *source.EnableCassandraConnector
		account.EnableCassandraConnector = &enableCassandraConnector
	} else {
		account.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if source.EnableFreeTier != nil {
		enableFreeTier := *source.EnableFreeTier
		account.EnableFreeTier = &enableFreeTier
	} else {
		account.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if source.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *source.EnableMultipleWriteLocations
		account.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		account.EnableMultipleWriteLocations = nil
	}

	// Id
	account.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity ManagedServiceIdentity_Status
		err := identity.AssignPropertiesFromManagedServiceIdentity_Status(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedServiceIdentity_Status() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IpAddressOrRange_Status, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IpAddressOrRange_Status
			err := ipRule.AssignPropertiesFromIpAddressOrRange_Status(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpAddressOrRange_Status() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		account.IpRules = ipRuleList
	} else {
		account.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if source.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *source.IsVirtualNetworkFilterEnabled
		account.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		account.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	account.KeyVaultKeyUri = genruntime.ClonePointerToString(source.KeyVaultKeyUri)

	// Kind
	if source.Kind != nil {
		kind := DatabaseAccount_Kind_Status(*source.Kind)
		account.Kind = &kind
	} else {
		account.Kind = nil
	}

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]Location_Status, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location Location_Status
			err := location.AssignPropertiesFromLocation_Status(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromLocation_Status() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		account.Locations = locationList
	} else {
		account.Locations = nil
	}

	// Name
	account.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkAclBypass
	if source.NetworkAclBypass != nil {
		networkAclBypass := NetworkAclBypass_Status(*source.NetworkAclBypass)
		account.NetworkAclBypass = &networkAclBypass
	} else {
		account.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	account.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(source.NetworkAclBypassResourceIds)

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccess_Status(*source.PublicNetworkAccess)
		account.PublicNetworkAccess = &publicNetworkAccess
	} else {
		account.PublicNetworkAccess = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	account.Type = genruntime.ClonePointerToString(source.Type)

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_Status, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_Status
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule_Status(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule_Status() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		account.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		account.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccount_Status populates the provided destination DatabaseAccount_Status from our DatabaseAccount_Status
func (account *DatabaseAccount_Status) AssignPropertiesToDatabaseAccount_Status(destination *v1alpha1api20210515storage.DatabaseAccount_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageConfiguration
	if account.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration v1alpha1api20210515storage.AnalyticalStorageConfiguration_Status
		err := account.AnalyticalStorageConfiguration.AssignPropertiesToAnalyticalStorageConfiguration_Status(&analyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAnalyticalStorageConfiguration_Status() to populate field AnalyticalStorageConfiguration")
		}
		destination.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		destination.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if account.ApiProperties != nil {
		var apiProperty v1alpha1api20210515storage.ApiProperties_Status
		err := account.ApiProperties.AssignPropertiesToApiProperties_Status(&apiProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToApiProperties_Status() to populate field ApiProperties")
		}
		destination.ApiProperties = &apiProperty
	} else {
		destination.ApiProperties = nil
	}

	// BackupPolicy
	if account.BackupPolicy != nil {
		var backupPolicy v1alpha1api20210515storage.BackupPolicy_Status
		err := account.BackupPolicy.AssignPropertiesToBackupPolicy_Status(&backupPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBackupPolicy_Status() to populate field BackupPolicy")
		}
		destination.BackupPolicy = &backupPolicy
	} else {
		destination.BackupPolicy = nil
	}

	// Capabilities
	if account.Capabilities != nil {
		capabilityList := make([]v1alpha1api20210515storage.Capability_Status, len(account.Capabilities))
		for capabilityIndex, capabilityItem := range account.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v1alpha1api20210515storage.Capability_Status
			err := capabilityItem.AssignPropertiesToCapability_Status(&capability)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCapability_Status() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// ConnectorOffer
	if account.ConnectorOffer != nil {
		connectorOffer := string(*account.ConnectorOffer)
		destination.ConnectorOffer = &connectorOffer
	} else {
		destination.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if account.ConsistencyPolicy != nil {
		var consistencyPolicy v1alpha1api20210515storage.ConsistencyPolicy_Status
		err := account.ConsistencyPolicy.AssignPropertiesToConsistencyPolicy_Status(&consistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToConsistencyPolicy_Status() to populate field ConsistencyPolicy")
		}
		destination.ConsistencyPolicy = &consistencyPolicy
	} else {
		destination.ConsistencyPolicy = nil
	}

	// Cors
	if account.Cors != nil {
		corList := make([]v1alpha1api20210515storage.CorsPolicy_Status, len(account.Cors))
		for corIndex, corItem := range account.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor v1alpha1api20210515storage.CorsPolicy_Status
			err := corItem.AssignPropertiesToCorsPolicy_Status(&cor)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsPolicy_Status() to populate field Cors")
			}
			corList[corIndex] = cor
		}
		destination.Cors = corList
	} else {
		destination.Cors = nil
	}

	// DatabaseAccountOfferType
	if account.DatabaseAccountOfferType != nil {
		databaseAccountOfferType := string(*account.DatabaseAccountOfferType)
		destination.DatabaseAccountOfferType = &databaseAccountOfferType
	} else {
		destination.DatabaseAccountOfferType = nil
	}

	// DefaultIdentity
	destination.DefaultIdentity = genruntime.ClonePointerToString(account.DefaultIdentity)

	// DisableKeyBasedMetadataWriteAccess
	if account.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *account.DisableKeyBasedMetadataWriteAccess
		destination.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		destination.DisableKeyBasedMetadataWriteAccess = nil
	}

	// EnableAnalyticalStorage
	if account.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *account.EnableAnalyticalStorage
		destination.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		destination.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if account.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *account.EnableAutomaticFailover
		destination.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		destination.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if account.EnableCassandraConnector != nil {
		enableCassandraConnector := *account.EnableCassandraConnector
		destination.EnableCassandraConnector = &enableCassandraConnector
	} else {
		destination.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if account.EnableFreeTier != nil {
		enableFreeTier := *account.EnableFreeTier
		destination.EnableFreeTier = &enableFreeTier
	} else {
		destination.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if account.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *account.EnableMultipleWriteLocations
		destination.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		destination.EnableMultipleWriteLocations = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(account.Id)

	// Identity
	if account.Identity != nil {
		var identity v1alpha1api20210515storage.ManagedServiceIdentity_Status
		err := account.Identity.AssignPropertiesToManagedServiceIdentity_Status(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedServiceIdentity_Status() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IpRules
	if account.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210515storage.IpAddressOrRange_Status, len(account.IpRules))
		for ipRuleIndex, ipRuleItem := range account.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210515storage.IpAddressOrRange_Status
			err := ipRuleItem.AssignPropertiesToIpAddressOrRange_Status(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpAddressOrRange_Status() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if account.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *account.IsVirtualNetworkFilterEnabled
		destination.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		destination.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	destination.KeyVaultKeyUri = genruntime.ClonePointerToString(account.KeyVaultKeyUri)

	// Kind
	if account.Kind != nil {
		kind := string(*account.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// Locations
	if account.Locations != nil {
		locationList := make([]v1alpha1api20210515storage.Location_Status, len(account.Locations))
		for locationIndex, locationItem := range account.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1alpha1api20210515storage.Location_Status
			err := locationItem.AssignPropertiesToLocation_Status(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToLocation_Status() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(account.Name)

	// NetworkAclBypass
	if account.NetworkAclBypass != nil {
		networkAclBypass := string(*account.NetworkAclBypass)
		destination.NetworkAclBypass = &networkAclBypass
	} else {
		destination.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	destination.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(account.NetworkAclBypassResourceIds)

	// PublicNetworkAccess
	if account.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*account.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(account.Type)

	// VirtualNetworkRules
	if account.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v1alpha1api20210515storage.VirtualNetworkRule_Status, len(account.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range account.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v1alpha1api20210515storage.VirtualNetworkRule_Status
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule_Status(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule_Status() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DatabaseAccounts_SPEC struct {
	//AnalyticalStorageConfiguration: Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration_Spec `json:"analyticalStorageConfiguration,omitempty"`

	//ApiProperties: API specific properties. Currently, supported only for MongoDB
	//API.
	ApiProperties *ApiProperties_Spec `json:"apiProperties,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BackupPolicy: The object representing the policy for taking backups on an
	//account.
	BackupPolicy *BackupPolicy_Spec `json:"backupPolicy,omitempty"`

	//Capabilities: List of Cosmos DB capabilities for the account
	Capabilities []Capability_Spec `json:"capabilities,omitempty"`

	//ConnectorOffer: The cassandra connector offer type for the Cosmos DB database C*
	//account.
	ConnectorOffer *ConnectorOffer_Spec `json:"connectorOffer,omitempty"`

	//ConsistencyPolicy: The consistency policy for the Cosmos DB account.
	ConsistencyPolicy *ConsistencyPolicy_Spec `json:"consistencyPolicy,omitempty"`

	//Cors: The CORS policy for the Cosmos DB database account.
	Cors []CorsPolicy_Spec `json:"cors,omitempty"`

	// +kubebuilder:validation:Required
	//DatabaseAccountOfferType: The offer type for the database
	DatabaseAccountOfferType DatabaseAccountOfferType_Spec `json:"databaseAccountOfferType"`

	//DefaultIdentity: The default identity for accessing key vault used in features
	//like customer managed keys. The default identity needs to be explicitly set by
	//the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	//DisableKeyBasedMetadataWriteAccess: Disable write operations on metadata
	//resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	//EnableAnalyticalStorage: Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	//EnableAutomaticFailover: Enables automatic failover of the write region in the
	//rare event that the region is unavailable due to an outage. Automatic failover
	//will result in a new write region for the account and is chosen based on the
	//failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	//EnableCassandraConnector: Enables the cassandra connector on the Cosmos DB C*
	//account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	//EnableFreeTier: Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	//EnableMultipleWriteLocations: Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool                        `json:"enableMultipleWriteLocations,omitempty"`
	Identity                     *ManagedServiceIdentity_Spec `json:"identity,omitempty"`

	//IpRules: List of IpRules.
	IpRules []IpAddressOrRange_Spec `json:"ipRules,omitempty"`

	//IsVirtualNetworkFilterEnabled: Flag to indicate whether to enable/disable
	//Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	//KeyVaultKeyUri: The URI of the key vault
	KeyVaultKeyUri *string `json:"keyVaultKeyUri,omitempty"`

	//Kind: Indicates the type of database account. This can only be set at database
	//account creation.
	Kind *DatabaseAccounts_Kind_SPEC `json:"kind,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Locations: An array that contains the georeplication locations enabled for the
	//Cosmos DB account.
	Locations []Location_Spec `json:"locations"`

	//NetworkAclBypass: Indicates what services are allowed to bypass firewall checks.
	NetworkAclBypass *NetworkAclBypass_Spec `json:"networkAclBypass,omitempty"`

	//NetworkAclBypassResourceIds: An array that contains the Resource Ids for Network
	//Acl Bypass for the Cosmos DB account.
	NetworkAclBypassResourceIds []string `json:"networkAclBypassResourceIds,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicNetworkAccess: Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess_Spec `json:"publicNetworkAccess,omitempty"`
	Tags                map[string]string         `json:"tags,omitempty"`

	//VirtualNetworkRules: List of Virtual Network ACL rules configured for the Cosmos
	//DB account.
	VirtualNetworkRules []VirtualNetworkRule_Spec `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccounts_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *DatabaseAccounts_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result DatabaseAccounts_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Identity’:
	if spec.Identity != nil {
		identityARM, err := (*spec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(ManagedServiceIdentity_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	if spec.Kind != nil {
		kind := *spec.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if spec.Location != nil {
		location := *spec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.AnalyticalStorageConfiguration != nil {
		analyticalStorageConfigurationARM, err := (*spec.AnalyticalStorageConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		analyticalStorageConfiguration := analyticalStorageConfigurationARM.(AnalyticalStorageConfiguration_SpecARM)
		result.Properties.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	}
	if spec.ApiProperties != nil {
		apiPropertiesARM, err := (*spec.ApiProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		apiProperties := apiPropertiesARM.(ApiProperties_SpecARM)
		result.Properties.ApiProperties = &apiProperties
	}
	if spec.BackupPolicy != nil {
		backupPolicyARM, err := (*spec.BackupPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		backupPolicy := backupPolicyARM.(BackupPolicy_SpecARM)
		result.Properties.BackupPolicy = &backupPolicy
	}
	for _, item := range spec.Capabilities {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Capabilities = append(result.Properties.Capabilities, itemARM.(Capability_SpecARM))
	}
	if spec.ConnectorOffer != nil {
		connectorOffer := *spec.ConnectorOffer
		result.Properties.ConnectorOffer = &connectorOffer
	}
	if spec.ConsistencyPolicy != nil {
		consistencyPolicyARM, err := (*spec.ConsistencyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		consistencyPolicy := consistencyPolicyARM.(ConsistencyPolicy_SpecARM)
		result.Properties.ConsistencyPolicy = &consistencyPolicy
	}
	for _, item := range spec.Cors {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Cors = append(result.Properties.Cors, itemARM.(CorsPolicy_SpecARM))
	}
	result.Properties.DatabaseAccountOfferType = spec.DatabaseAccountOfferType
	if spec.DefaultIdentity != nil {
		defaultIdentity := *spec.DefaultIdentity
		result.Properties.DefaultIdentity = &defaultIdentity
	}
	if spec.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *spec.DisableKeyBasedMetadataWriteAccess
		result.Properties.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	}
	if spec.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *spec.EnableAnalyticalStorage
		result.Properties.EnableAnalyticalStorage = &enableAnalyticalStorage
	}
	if spec.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *spec.EnableAutomaticFailover
		result.Properties.EnableAutomaticFailover = &enableAutomaticFailover
	}
	if spec.EnableCassandraConnector != nil {
		enableCassandraConnector := *spec.EnableCassandraConnector
		result.Properties.EnableCassandraConnector = &enableCassandraConnector
	}
	if spec.EnableFreeTier != nil {
		enableFreeTier := *spec.EnableFreeTier
		result.Properties.EnableFreeTier = &enableFreeTier
	}
	if spec.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocations := *spec.EnableMultipleWriteLocations
		result.Properties.EnableMultipleWriteLocations = &enableMultipleWriteLocations
	}
	for _, item := range spec.IpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpRules = append(result.Properties.IpRules, itemARM.(IpAddressOrRange_SpecARM))
	}
	if spec.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *spec.IsVirtualNetworkFilterEnabled
		result.Properties.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	}
	if spec.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *spec.KeyVaultKeyUri
		result.Properties.KeyVaultKeyUri = &keyVaultKeyUri
	}
	for _, item := range spec.Locations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Locations = append(result.Properties.Locations, itemARM.(Location_SpecARM))
	}
	if spec.NetworkAclBypass != nil {
		networkAclBypass := *spec.NetworkAclBypass
		result.Properties.NetworkAclBypass = &networkAclBypass
	}
	for _, item := range spec.NetworkAclBypassResourceIds {
		result.Properties.NetworkAclBypassResourceIds = append(result.Properties.NetworkAclBypassResourceIds, item)
	}
	if spec.PublicNetworkAccess != nil {
		publicNetworkAccess := *spec.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	for _, item := range spec.VirtualNetworkRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.VirtualNetworkRules = append(result.Properties.VirtualNetworkRules, itemARM.(VirtualNetworkRule_SpecARM))
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *DatabaseAccounts_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccounts_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *DatabaseAccounts_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccounts_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccounts_SPECARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageConfiguration’:
	// copying flattened property:
	if typedInput.Properties.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration1 AnalyticalStorageConfiguration_Spec
		err := analyticalStorageConfiguration1.PopulateFromARM(owner, *typedInput.Properties.AnalyticalStorageConfiguration)
		if err != nil {
			return err
		}
		analyticalStorageConfiguration := analyticalStorageConfiguration1
		spec.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	}

	// Set property ‘ApiProperties’:
	// copying flattened property:
	if typedInput.Properties.ApiProperties != nil {
		var apiProperties1 ApiProperties_Spec
		err := apiProperties1.PopulateFromARM(owner, *typedInput.Properties.ApiProperties)
		if err != nil {
			return err
		}
		apiProperties := apiProperties1
		spec.ApiProperties = &apiProperties
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BackupPolicy’:
	// copying flattened property:
	if typedInput.Properties.BackupPolicy != nil {
		var backupPolicy1 BackupPolicy_Spec
		err := backupPolicy1.PopulateFromARM(owner, *typedInput.Properties.BackupPolicy)
		if err != nil {
			return err
		}
		backupPolicy := backupPolicy1
		spec.BackupPolicy = &backupPolicy
	}

	// Set property ‘Capabilities’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Capabilities {
		var item1 Capability_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.Capabilities = append(spec.Capabilities, item1)
	}

	// Set property ‘ConnectorOffer’:
	// copying flattened property:
	if typedInput.Properties.ConnectorOffer != nil {
		connectorOffer := *typedInput.Properties.ConnectorOffer
		spec.ConnectorOffer = &connectorOffer
	}

	// Set property ‘ConsistencyPolicy’:
	// copying flattened property:
	if typedInput.Properties.ConsistencyPolicy != nil {
		var consistencyPolicy1 ConsistencyPolicy_Spec
		err := consistencyPolicy1.PopulateFromARM(owner, *typedInput.Properties.ConsistencyPolicy)
		if err != nil {
			return err
		}
		consistencyPolicy := consistencyPolicy1
		spec.ConsistencyPolicy = &consistencyPolicy
	}

	// Set property ‘Cors’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Cors {
		var item1 CorsPolicy_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.Cors = append(spec.Cors, item1)
	}

	// Set property ‘DatabaseAccountOfferType’:
	// copying flattened property:
	spec.DatabaseAccountOfferType = typedInput.Properties.DatabaseAccountOfferType

	// Set property ‘DefaultIdentity’:
	// copying flattened property:
	if typedInput.Properties.DefaultIdentity != nil {
		defaultIdentity := *typedInput.Properties.DefaultIdentity
		spec.DefaultIdentity = &defaultIdentity
	}

	// Set property ‘DisableKeyBasedMetadataWriteAccess’:
	// copying flattened property:
	if typedInput.Properties.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *typedInput.Properties.DisableKeyBasedMetadataWriteAccess
		spec.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	}

	// Set property ‘EnableAnalyticalStorage’:
	// copying flattened property:
	if typedInput.Properties.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *typedInput.Properties.EnableAnalyticalStorage
		spec.EnableAnalyticalStorage = &enableAnalyticalStorage
	}

	// Set property ‘EnableAutomaticFailover’:
	// copying flattened property:
	if typedInput.Properties.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *typedInput.Properties.EnableAutomaticFailover
		spec.EnableAutomaticFailover = &enableAutomaticFailover
	}

	// Set property ‘EnableCassandraConnector’:
	// copying flattened property:
	if typedInput.Properties.EnableCassandraConnector != nil {
		enableCassandraConnector := *typedInput.Properties.EnableCassandraConnector
		spec.EnableCassandraConnector = &enableCassandraConnector
	}

	// Set property ‘EnableFreeTier’:
	// copying flattened property:
	if typedInput.Properties.EnableFreeTier != nil {
		enableFreeTier := *typedInput.Properties.EnableFreeTier
		spec.EnableFreeTier = &enableFreeTier
	}

	// Set property ‘EnableMultipleWriteLocations’:
	// copying flattened property:
	if typedInput.Properties.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocations := *typedInput.Properties.EnableMultipleWriteLocations
		spec.EnableMultipleWriteLocations = &enableMultipleWriteLocations
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedServiceIdentity_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		spec.Identity = &identity
	}

	// Set property ‘IpRules’:
	// copying flattened property:
	for _, item := range typedInput.Properties.IpRules {
		var item1 IpAddressOrRange_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.IpRules = append(spec.IpRules, item1)
	}

	// Set property ‘IsVirtualNetworkFilterEnabled’:
	// copying flattened property:
	if typedInput.Properties.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *typedInput.Properties.IsVirtualNetworkFilterEnabled
		spec.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	}

	// Set property ‘KeyVaultKeyUri’:
	// copying flattened property:
	if typedInput.Properties.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *typedInput.Properties.KeyVaultKeyUri
		spec.KeyVaultKeyUri = &keyVaultKeyUri
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		spec.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		spec.Location = &location
	}

	// Set property ‘Locations’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Locations {
		var item1 Location_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.Locations = append(spec.Locations, item1)
	}

	// Set property ‘NetworkAclBypass’:
	// copying flattened property:
	if typedInput.Properties.NetworkAclBypass != nil {
		networkAclBypass := *typedInput.Properties.NetworkAclBypass
		spec.NetworkAclBypass = &networkAclBypass
	}

	// Set property ‘NetworkAclBypassResourceIds’:
	// copying flattened property:
	for _, item := range typedInput.Properties.NetworkAclBypassResourceIds {
		spec.NetworkAclBypassResourceIds = append(spec.NetworkAclBypassResourceIds, item)
	}

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		spec.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// Set property ‘VirtualNetworkRules’:
	// copying flattened property:
	for _, item := range typedInput.Properties.VirtualNetworkRules {
		var item1 VirtualNetworkRule_Spec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		spec.VirtualNetworkRules = append(spec.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccounts_SPEC{}

// ConvertSpecFrom populates our DatabaseAccounts_SPEC from the provided source
func (spec *DatabaseAccounts_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccounts_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromDatabaseAccounts_SPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccounts_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromDatabaseAccounts_SPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccounts_SPEC
func (spec *DatabaseAccounts_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccounts_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToDatabaseAccounts_SPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccounts_SPEC{}
	err := spec.AssignPropertiesToDatabaseAccounts_SPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccounts_SPEC populates our DatabaseAccounts_SPEC from the provided source DatabaseAccounts_SPEC
func (spec *DatabaseAccounts_SPEC) AssignPropertiesFromDatabaseAccounts_SPEC(source *v1alpha1api20210515storage.DatabaseAccounts_SPEC) error {

	// AnalyticalStorageConfiguration
	if source.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration AnalyticalStorageConfiguration_Spec
		err := analyticalStorageConfiguration.AssignPropertiesFromAnalyticalStorageConfiguration_Spec(source.AnalyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAnalyticalStorageConfiguration_Spec() to populate field AnalyticalStorageConfiguration")
		}
		spec.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		spec.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if source.ApiProperties != nil {
		var apiProperty ApiProperties_Spec
		err := apiProperty.AssignPropertiesFromApiProperties_Spec(source.ApiProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromApiProperties_Spec() to populate field ApiProperties")
		}
		spec.ApiProperties = &apiProperty
	} else {
		spec.ApiProperties = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// BackupPolicy
	if source.BackupPolicy != nil {
		var backupPolicy BackupPolicy_Spec
		err := backupPolicy.AssignPropertiesFromBackupPolicy_Spec(source.BackupPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBackupPolicy_Spec() to populate field BackupPolicy")
		}
		spec.BackupPolicy = &backupPolicy
	} else {
		spec.BackupPolicy = nil
	}

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability_Spec, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability_Spec
			err := capability.AssignPropertiesFromCapability_Spec(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCapability_Spec() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		spec.Capabilities = capabilityList
	} else {
		spec.Capabilities = nil
	}

	// ConnectorOffer
	if source.ConnectorOffer != nil {
		connectorOffer := ConnectorOffer_Spec(*source.ConnectorOffer)
		spec.ConnectorOffer = &connectorOffer
	} else {
		spec.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if source.ConsistencyPolicy != nil {
		var consistencyPolicy ConsistencyPolicy_Spec
		err := consistencyPolicy.AssignPropertiesFromConsistencyPolicy_Spec(source.ConsistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromConsistencyPolicy_Spec() to populate field ConsistencyPolicy")
		}
		spec.ConsistencyPolicy = &consistencyPolicy
	} else {
		spec.ConsistencyPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		corList := make([]CorsPolicy_Spec, len(source.Cors))
		for corIndex, corItem := range source.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor CorsPolicy_Spec
			err := cor.AssignPropertiesFromCorsPolicy_Spec(&corItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCorsPolicy_Spec() to populate field Cors")
			}
			corList[corIndex] = cor
		}
		spec.Cors = corList
	} else {
		spec.Cors = nil
	}

	// DatabaseAccountOfferType
	if source.DatabaseAccountOfferType != nil {
		spec.DatabaseAccountOfferType = DatabaseAccountOfferType_Spec(*source.DatabaseAccountOfferType)
	} else {
		spec.DatabaseAccountOfferType = ""
	}

	// DefaultIdentity
	spec.DefaultIdentity = genruntime.ClonePointerToString(source.DefaultIdentity)

	// DisableKeyBasedMetadataWriteAccess
	if source.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *source.DisableKeyBasedMetadataWriteAccess
		spec.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		spec.DisableKeyBasedMetadataWriteAccess = nil
	}

	// EnableAnalyticalStorage
	if source.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *source.EnableAnalyticalStorage
		spec.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		spec.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if source.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *source.EnableAutomaticFailover
		spec.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		spec.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if source.EnableCassandraConnector != nil {
		enableCassandraConnector := *source.EnableCassandraConnector
		spec.EnableCassandraConnector = &enableCassandraConnector
	} else {
		spec.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if source.EnableFreeTier != nil {
		enableFreeTier := *source.EnableFreeTier
		spec.EnableFreeTier = &enableFreeTier
	} else {
		spec.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if source.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *source.EnableMultipleWriteLocations
		spec.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		spec.EnableMultipleWriteLocations = nil
	}

	// Identity
	if source.Identity != nil {
		var identity ManagedServiceIdentity_Spec
		err := identity.AssignPropertiesFromManagedServiceIdentity_Spec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedServiceIdentity_Spec() to populate field Identity")
		}
		spec.Identity = &identity
	} else {
		spec.Identity = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IpAddressOrRange_Spec, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IpAddressOrRange_Spec
			err := ipRule.AssignPropertiesFromIpAddressOrRange_Spec(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIpAddressOrRange_Spec() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		spec.IpRules = ipRuleList
	} else {
		spec.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if source.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *source.IsVirtualNetworkFilterEnabled
		spec.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		spec.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	spec.KeyVaultKeyUri = genruntime.ClonePointerToString(source.KeyVaultKeyUri)

	// Kind
	if source.Kind != nil {
		kind := DatabaseAccounts_Kind_SPEC(*source.Kind)
		spec.Kind = &kind
	} else {
		spec.Kind = nil
	}

	// Location
	spec.Location = genruntime.ClonePointerToString(source.Location)

	// Locations
	if source.Locations != nil {
		locationList := make([]Location_Spec, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location Location_Spec
			err := location.AssignPropertiesFromLocation_Spec(&locationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromLocation_Spec() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		spec.Locations = locationList
	} else {
		spec.Locations = nil
	}

	// NetworkAclBypass
	if source.NetworkAclBypass != nil {
		networkAclBypass := NetworkAclBypass_Spec(*source.NetworkAclBypass)
		spec.NetworkAclBypass = &networkAclBypass
	} else {
		spec.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	spec.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(source.NetworkAclBypassResourceIds)

	// Owner
	spec.Owner = source.Owner.Copy()

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccess_Spec(*source.PublicNetworkAccess)
		spec.PublicNetworkAccess = &publicNetworkAccess
	} else {
		spec.PublicNetworkAccess = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_Spec, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_Spec
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule_Spec(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualNetworkRule_Spec() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		spec.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		spec.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccounts_SPEC populates the provided destination DatabaseAccounts_SPEC from our DatabaseAccounts_SPEC
func (spec *DatabaseAccounts_SPEC) AssignPropertiesToDatabaseAccounts_SPEC(destination *v1alpha1api20210515storage.DatabaseAccounts_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageConfiguration
	if spec.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration v1alpha1api20210515storage.AnalyticalStorageConfiguration_Spec
		err := spec.AnalyticalStorageConfiguration.AssignPropertiesToAnalyticalStorageConfiguration_Spec(&analyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAnalyticalStorageConfiguration_Spec() to populate field AnalyticalStorageConfiguration")
		}
		destination.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		destination.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if spec.ApiProperties != nil {
		var apiProperty v1alpha1api20210515storage.ApiProperties_Spec
		err := spec.ApiProperties.AssignPropertiesToApiProperties_Spec(&apiProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToApiProperties_Spec() to populate field ApiProperties")
		}
		destination.ApiProperties = &apiProperty
	} else {
		destination.ApiProperties = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// BackupPolicy
	if spec.BackupPolicy != nil {
		var backupPolicy v1alpha1api20210515storage.BackupPolicy_Spec
		err := spec.BackupPolicy.AssignPropertiesToBackupPolicy_Spec(&backupPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBackupPolicy_Spec() to populate field BackupPolicy")
		}
		destination.BackupPolicy = &backupPolicy
	} else {
		destination.BackupPolicy = nil
	}

	// Capabilities
	if spec.Capabilities != nil {
		capabilityList := make([]v1alpha1api20210515storage.Capability_Spec, len(spec.Capabilities))
		for capabilityIndex, capabilityItem := range spec.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v1alpha1api20210515storage.Capability_Spec
			err := capabilityItem.AssignPropertiesToCapability_Spec(&capability)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCapability_Spec() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// ConnectorOffer
	if spec.ConnectorOffer != nil {
		connectorOffer := string(*spec.ConnectorOffer)
		destination.ConnectorOffer = &connectorOffer
	} else {
		destination.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if spec.ConsistencyPolicy != nil {
		var consistencyPolicy v1alpha1api20210515storage.ConsistencyPolicy_Spec
		err := spec.ConsistencyPolicy.AssignPropertiesToConsistencyPolicy_Spec(&consistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToConsistencyPolicy_Spec() to populate field ConsistencyPolicy")
		}
		destination.ConsistencyPolicy = &consistencyPolicy
	} else {
		destination.ConsistencyPolicy = nil
	}

	// Cors
	if spec.Cors != nil {
		corList := make([]v1alpha1api20210515storage.CorsPolicy_Spec, len(spec.Cors))
		for corIndex, corItem := range spec.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor v1alpha1api20210515storage.CorsPolicy_Spec
			err := corItem.AssignPropertiesToCorsPolicy_Spec(&cor)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCorsPolicy_Spec() to populate field Cors")
			}
			corList[corIndex] = cor
		}
		destination.Cors = corList
	} else {
		destination.Cors = nil
	}

	// DatabaseAccountOfferType
	databaseAccountOfferType := string(spec.DatabaseAccountOfferType)
	destination.DatabaseAccountOfferType = &databaseAccountOfferType

	// DefaultIdentity
	destination.DefaultIdentity = genruntime.ClonePointerToString(spec.DefaultIdentity)

	// DisableKeyBasedMetadataWriteAccess
	if spec.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *spec.DisableKeyBasedMetadataWriteAccess
		destination.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		destination.DisableKeyBasedMetadataWriteAccess = nil
	}

	// EnableAnalyticalStorage
	if spec.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *spec.EnableAnalyticalStorage
		destination.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		destination.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if spec.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *spec.EnableAutomaticFailover
		destination.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		destination.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if spec.EnableCassandraConnector != nil {
		enableCassandraConnector := *spec.EnableCassandraConnector
		destination.EnableCassandraConnector = &enableCassandraConnector
	} else {
		destination.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if spec.EnableFreeTier != nil {
		enableFreeTier := *spec.EnableFreeTier
		destination.EnableFreeTier = &enableFreeTier
	} else {
		destination.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if spec.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *spec.EnableMultipleWriteLocations
		destination.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		destination.EnableMultipleWriteLocations = nil
	}

	// Identity
	if spec.Identity != nil {
		var identity v1alpha1api20210515storage.ManagedServiceIdentity_Spec
		err := spec.Identity.AssignPropertiesToManagedServiceIdentity_Spec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedServiceIdentity_Spec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IpRules
	if spec.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210515storage.IpAddressOrRange_Spec, len(spec.IpRules))
		for ipRuleIndex, ipRuleItem := range spec.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210515storage.IpAddressOrRange_Spec
			err := ipRuleItem.AssignPropertiesToIpAddressOrRange_Spec(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIpAddressOrRange_Spec() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if spec.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *spec.IsVirtualNetworkFilterEnabled
		destination.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		destination.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	destination.KeyVaultKeyUri = genruntime.ClonePointerToString(spec.KeyVaultKeyUri)

	// Kind
	if spec.Kind != nil {
		kind := string(*spec.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(spec.Location)

	// Locations
	if spec.Locations != nil {
		locationList := make([]v1alpha1api20210515storage.Location_Spec, len(spec.Locations))
		for locationIndex, locationItem := range spec.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1alpha1api20210515storage.Location_Spec
			err := locationItem.AssignPropertiesToLocation_Spec(&location)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToLocation_Spec() to populate field Locations")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// NetworkAclBypass
	if spec.NetworkAclBypass != nil {
		networkAclBypass := string(*spec.NetworkAclBypass)
		destination.NetworkAclBypass = &networkAclBypass
	} else {
		destination.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	destination.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(spec.NetworkAclBypassResourceIds)

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// PublicNetworkAccess
	if spec.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*spec.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// VirtualNetworkRules
	if spec.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v1alpha1api20210515storage.VirtualNetworkRule_Spec, len(spec.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range spec.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v1alpha1api20210515storage.VirtualNetworkRule_Spec
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule_Spec(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualNetworkRule_Spec() to populate field VirtualNetworkRules")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *DatabaseAccounts_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *DatabaseAccounts_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type AnalyticalStorageConfiguration_Spec struct {
	SchemaType *AnalyticalStorageSchemaType_Spec `json:"schemaType,omitempty"`
}

var _ genruntime.ARMTransformer = &AnalyticalStorageConfiguration_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *AnalyticalStorageConfiguration_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	var result AnalyticalStorageConfiguration_SpecARM

	// Set property ‘SchemaType’:
	if configuration.SchemaType != nil {
		schemaType := *configuration.SchemaType
		result.SchemaType = &schemaType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *AnalyticalStorageConfiguration_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AnalyticalStorageConfiguration_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *AnalyticalStorageConfiguration_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AnalyticalStorageConfiguration_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AnalyticalStorageConfiguration_SpecARM, got %T", armInput)
	}

	// Set property ‘SchemaType’:
	if typedInput.SchemaType != nil {
		schemaType := *typedInput.SchemaType
		configuration.SchemaType = &schemaType
	}

	// No error
	return nil
}

// AssignPropertiesFromAnalyticalStorageConfiguration_Spec populates our AnalyticalStorageConfiguration_Spec from the provided source AnalyticalStorageConfiguration_Spec
func (configuration *AnalyticalStorageConfiguration_Spec) AssignPropertiesFromAnalyticalStorageConfiguration_Spec(source *v1alpha1api20210515storage.AnalyticalStorageConfiguration_Spec) error {

	// SchemaType
	if source.SchemaType != nil {
		schemaType := AnalyticalStorageSchemaType_Spec(*source.SchemaType)
		configuration.SchemaType = &schemaType
	} else {
		configuration.SchemaType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAnalyticalStorageConfiguration_Spec populates the provided destination AnalyticalStorageConfiguration_Spec from our AnalyticalStorageConfiguration_Spec
func (configuration *AnalyticalStorageConfiguration_Spec) AssignPropertiesToAnalyticalStorageConfiguration_Spec(destination *v1alpha1api20210515storage.AnalyticalStorageConfiguration_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SchemaType
	if configuration.SchemaType != nil {
		schemaType := string(*configuration.SchemaType)
		destination.SchemaType = &schemaType
	} else {
		destination.SchemaType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AnalyticalStorageConfiguration_Status struct {
	SchemaType *AnalyticalStorageSchemaType_Status `json:"schemaType,omitempty"`
}

var _ genruntime.FromARMConverter = &AnalyticalStorageConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *AnalyticalStorageConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AnalyticalStorageConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *AnalyticalStorageConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AnalyticalStorageConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AnalyticalStorageConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘SchemaType’:
	if typedInput.SchemaType != nil {
		schemaType := *typedInput.SchemaType
		configuration.SchemaType = &schemaType
	}

	// No error
	return nil
}

// AssignPropertiesFromAnalyticalStorageConfiguration_Status populates our AnalyticalStorageConfiguration_Status from the provided source AnalyticalStorageConfiguration_Status
func (configuration *AnalyticalStorageConfiguration_Status) AssignPropertiesFromAnalyticalStorageConfiguration_Status(source *v1alpha1api20210515storage.AnalyticalStorageConfiguration_Status) error {

	// SchemaType
	if source.SchemaType != nil {
		schemaType := AnalyticalStorageSchemaType_Status(*source.SchemaType)
		configuration.SchemaType = &schemaType
	} else {
		configuration.SchemaType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAnalyticalStorageConfiguration_Status populates the provided destination AnalyticalStorageConfiguration_Status from our AnalyticalStorageConfiguration_Status
func (configuration *AnalyticalStorageConfiguration_Status) AssignPropertiesToAnalyticalStorageConfiguration_Status(destination *v1alpha1api20210515storage.AnalyticalStorageConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SchemaType
	if configuration.SchemaType != nil {
		schemaType := string(*configuration.SchemaType)
		destination.SchemaType = &schemaType
	} else {
		destination.SchemaType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ApiProperties_Spec struct {
	//ServerVersion: Describes the ServerVersion of an a MongoDB account.
	ServerVersion *ApiProperties_ServerVersion_Spec `json:"serverVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &ApiProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *ApiProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result ApiProperties_SpecARM

	// Set property ‘ServerVersion’:
	if properties.ServerVersion != nil {
		serverVersion := *properties.ServerVersion
		result.ServerVersion = &serverVersion
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ApiProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ApiProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘ServerVersion’:
	if typedInput.ServerVersion != nil {
		serverVersion := *typedInput.ServerVersion
		properties.ServerVersion = &serverVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromApiProperties_Spec populates our ApiProperties_Spec from the provided source ApiProperties_Spec
func (properties *ApiProperties_Spec) AssignPropertiesFromApiProperties_Spec(source *v1alpha1api20210515storage.ApiProperties_Spec) error {

	// ServerVersion
	if source.ServerVersion != nil {
		serverVersion := ApiProperties_ServerVersion_Spec(*source.ServerVersion)
		properties.ServerVersion = &serverVersion
	} else {
		properties.ServerVersion = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApiProperties_Spec populates the provided destination ApiProperties_Spec from our ApiProperties_Spec
func (properties *ApiProperties_Spec) AssignPropertiesToApiProperties_Spec(destination *v1alpha1api20210515storage.ApiProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ServerVersion
	if properties.ServerVersion != nil {
		serverVersion := string(*properties.ServerVersion)
		destination.ServerVersion = &serverVersion
	} else {
		destination.ServerVersion = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ApiProperties_Status struct {
	//ServerVersion: Describes the ServerVersion of an a MongoDB account.
	ServerVersion *ApiProperties_ServerVersion_Status `json:"serverVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *ApiProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *ApiProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘ServerVersion’:
	if typedInput.ServerVersion != nil {
		serverVersion := *typedInput.ServerVersion
		properties.ServerVersion = &serverVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromApiProperties_Status populates our ApiProperties_Status from the provided source ApiProperties_Status
func (properties *ApiProperties_Status) AssignPropertiesFromApiProperties_Status(source *v1alpha1api20210515storage.ApiProperties_Status) error {

	// ServerVersion
	if source.ServerVersion != nil {
		serverVersion := ApiProperties_ServerVersion_Status(*source.ServerVersion)
		properties.ServerVersion = &serverVersion
	} else {
		properties.ServerVersion = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApiProperties_Status populates the provided destination ApiProperties_Status from our ApiProperties_Status
func (properties *ApiProperties_Status) AssignPropertiesToApiProperties_Status(destination *v1alpha1api20210515storage.ApiProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ServerVersion
	if properties.ServerVersion != nil {
		serverVersion := string(*properties.ServerVersion)
		destination.ServerVersion = &serverVersion
	} else {
		destination.ServerVersion = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BackupPolicy_Spec struct {
	// +kubebuilder:validation:Required
	Type BackupPolicyType_Spec `json:"type"`
}

var _ genruntime.ARMTransformer = &BackupPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *BackupPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result BackupPolicy_SpecARM

	// Set property ‘Type’:
	result.Type = policy.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *BackupPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *BackupPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘Type’:
	policy.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromBackupPolicy_Spec populates our BackupPolicy_Spec from the provided source BackupPolicy_Spec
func (policy *BackupPolicy_Spec) AssignPropertiesFromBackupPolicy_Spec(source *v1alpha1api20210515storage.BackupPolicy_Spec) error {

	// Type
	if source.Type != nil {
		policy.Type = BackupPolicyType_Spec(*source.Type)
	} else {
		policy.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBackupPolicy_Spec populates the provided destination BackupPolicy_Spec from our BackupPolicy_Spec
func (policy *BackupPolicy_Spec) AssignPropertiesToBackupPolicy_Spec(destination *v1alpha1api20210515storage.BackupPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(policy.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BackupPolicy_Status struct {
	// +kubebuilder:validation:Required
	Type BackupPolicyType_Status `json:"type"`
}

var _ genruntime.FromARMConverter = &BackupPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *BackupPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *BackupPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Type’:
	policy.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromBackupPolicy_Status populates our BackupPolicy_Status from the provided source BackupPolicy_Status
func (policy *BackupPolicy_Status) AssignPropertiesFromBackupPolicy_Status(source *v1alpha1api20210515storage.BackupPolicy_Status) error {

	// Type
	if source.Type != nil {
		policy.Type = BackupPolicyType_Status(*source.Type)
	} else {
		policy.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBackupPolicy_Status populates the provided destination BackupPolicy_Status from our BackupPolicy_Status
func (policy *BackupPolicy_Status) AssignPropertiesToBackupPolicy_Status(destination *v1alpha1api20210515storage.BackupPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(policy.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Capability_Spec struct {
	//Name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra".
	//Current values also include "EnableTable" and "EnableGremlin".
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Capability_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capability *Capability_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capability == nil {
		return nil, nil
	}
	var result Capability_SpecARM

	// Set property ‘Name’:
	if capability.Name != nil {
		name := *capability.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capability *Capability_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Capability_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capability *Capability_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Capability_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Capability_SpecARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		capability.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromCapability_Spec populates our Capability_Spec from the provided source Capability_Spec
func (capability *Capability_Spec) AssignPropertiesFromCapability_Spec(source *v1alpha1api20210515storage.Capability_Spec) error {

	// Name
	capability.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToCapability_Spec populates the provided destination Capability_Spec from our Capability_Spec
func (capability *Capability_Spec) AssignPropertiesToCapability_Spec(destination *v1alpha1api20210515storage.Capability_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(capability.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Capability_Status struct {
	//Name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra".
	//Current values also include "EnableTable" and "EnableGremlin".
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &Capability_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capability *Capability_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Capability_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capability *Capability_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Capability_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Capability_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		capability.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromCapability_Status populates our Capability_Status from the provided source Capability_Status
func (capability *Capability_Status) AssignPropertiesFromCapability_Status(source *v1alpha1api20210515storage.Capability_Status) error {

	// Name
	capability.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToCapability_Status populates the provided destination Capability_Status from our Capability_Status
func (capability *Capability_Status) AssignPropertiesToCapability_Status(destination *v1alpha1api20210515storage.Capability_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(capability.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Small"}
type ConnectorOffer_Spec string

const ConnectorOffer_SpecSmall = ConnectorOffer_Spec("Small")

type ConnectorOffer_Status string

const ConnectorOffer_StatusSmall = ConnectorOffer_Status("Small")

type ConsistencyPolicy_Spec struct {
	// +kubebuilder:validation:Required
	//DefaultConsistencyLevel: The default consistency level and configuration
	//settings of the Cosmos DB account.
	DefaultConsistencyLevel ConsistencyPolicy_DefaultConsistencyLevel_Spec `json:"defaultConsistencyLevel"`

	// +kubebuilder:validation:Maximum=86400
	// +kubebuilder:validation:Minimum=5
	//MaxIntervalInSeconds: When used with the Bounded Staleness consistency level,
	//this value represents the time amount of staleness (in seconds) tolerated.
	//Accepted range for this value is 5 - 86400. Required when
	//defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `json:"maxIntervalInSeconds,omitempty"`

	// +kubebuilder:validation:Maximum=2147483647
	// +kubebuilder:validation:Minimum=1
	//MaxStalenessPrefix: When used with the Bounded Staleness consistency level, this
	//value represents the number of stale requests tolerated. Accepted range for this
	//value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to
	//'BoundedStaleness'.
	MaxStalenessPrefix *int `json:"maxStalenessPrefix,omitempty"`
}

var _ genruntime.ARMTransformer = &ConsistencyPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *ConsistencyPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result ConsistencyPolicy_SpecARM

	// Set property ‘DefaultConsistencyLevel’:
	result.DefaultConsistencyLevel = policy.DefaultConsistencyLevel

	// Set property ‘MaxIntervalInSeconds’:
	if policy.MaxIntervalInSeconds != nil {
		maxIntervalInSeconds := *policy.MaxIntervalInSeconds
		result.MaxIntervalInSeconds = &maxIntervalInSeconds
	}

	// Set property ‘MaxStalenessPrefix’:
	if policy.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *policy.MaxStalenessPrefix
		result.MaxStalenessPrefix = &maxStalenessPrefix
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ConsistencyPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConsistencyPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ConsistencyPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConsistencyPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConsistencyPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘DefaultConsistencyLevel’:
	policy.DefaultConsistencyLevel = typedInput.DefaultConsistencyLevel

	// Set property ‘MaxIntervalInSeconds’:
	if typedInput.MaxIntervalInSeconds != nil {
		maxIntervalInSeconds := *typedInput.MaxIntervalInSeconds
		policy.MaxIntervalInSeconds = &maxIntervalInSeconds
	}

	// Set property ‘MaxStalenessPrefix’:
	if typedInput.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *typedInput.MaxStalenessPrefix
		policy.MaxStalenessPrefix = &maxStalenessPrefix
	}

	// No error
	return nil
}

// AssignPropertiesFromConsistencyPolicy_Spec populates our ConsistencyPolicy_Spec from the provided source ConsistencyPolicy_Spec
func (policy *ConsistencyPolicy_Spec) AssignPropertiesFromConsistencyPolicy_Spec(source *v1alpha1api20210515storage.ConsistencyPolicy_Spec) error {

	// DefaultConsistencyLevel
	if source.DefaultConsistencyLevel != nil {
		policy.DefaultConsistencyLevel = ConsistencyPolicy_DefaultConsistencyLevel_Spec(*source.DefaultConsistencyLevel)
	} else {
		policy.DefaultConsistencyLevel = ""
	}

	// MaxIntervalInSeconds
	if source.MaxIntervalInSeconds != nil {
		maxIntervalInSecond := *source.MaxIntervalInSeconds
		policy.MaxIntervalInSeconds = &maxIntervalInSecond
	} else {
		policy.MaxIntervalInSeconds = nil
	}

	// MaxStalenessPrefix
	if source.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *source.MaxStalenessPrefix
		policy.MaxStalenessPrefix = &maxStalenessPrefix
	} else {
		policy.MaxStalenessPrefix = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConsistencyPolicy_Spec populates the provided destination ConsistencyPolicy_Spec from our ConsistencyPolicy_Spec
func (policy *ConsistencyPolicy_Spec) AssignPropertiesToConsistencyPolicy_Spec(destination *v1alpha1api20210515storage.ConsistencyPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultConsistencyLevel
	defaultConsistencyLevel := string(policy.DefaultConsistencyLevel)
	destination.DefaultConsistencyLevel = &defaultConsistencyLevel

	// MaxIntervalInSeconds
	if policy.MaxIntervalInSeconds != nil {
		maxIntervalInSecond := *policy.MaxIntervalInSeconds
		destination.MaxIntervalInSeconds = &maxIntervalInSecond
	} else {
		destination.MaxIntervalInSeconds = nil
	}

	// MaxStalenessPrefix
	if policy.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *policy.MaxStalenessPrefix
		destination.MaxStalenessPrefix = &maxStalenessPrefix
	} else {
		destination.MaxStalenessPrefix = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ConsistencyPolicy_Status struct {
	// +kubebuilder:validation:Required
	//DefaultConsistencyLevel: The default consistency level and configuration
	//settings of the Cosmos DB account.
	DefaultConsistencyLevel ConsistencyPolicy_DefaultConsistencyLevel_Status `json:"defaultConsistencyLevel"`

	//MaxIntervalInSeconds: When used with the Bounded Staleness consistency level,
	//this value represents the time amount of staleness (in seconds) tolerated.
	//Accepted range for this value is 5 - 86400. Required when
	//defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `json:"maxIntervalInSeconds,omitempty"`

	//MaxStalenessPrefix: When used with the Bounded Staleness consistency level, this
	//value represents the number of stale requests tolerated. Accepted range for this
	//value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to
	//'BoundedStaleness'.
	MaxStalenessPrefix *int `json:"maxStalenessPrefix,omitempty"`
}

var _ genruntime.FromARMConverter = &ConsistencyPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ConsistencyPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConsistencyPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ConsistencyPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConsistencyPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConsistencyPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘DefaultConsistencyLevel’:
	policy.DefaultConsistencyLevel = typedInput.DefaultConsistencyLevel

	// Set property ‘MaxIntervalInSeconds’:
	if typedInput.MaxIntervalInSeconds != nil {
		maxIntervalInSeconds := *typedInput.MaxIntervalInSeconds
		policy.MaxIntervalInSeconds = &maxIntervalInSeconds
	}

	// Set property ‘MaxStalenessPrefix’:
	if typedInput.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *typedInput.MaxStalenessPrefix
		policy.MaxStalenessPrefix = &maxStalenessPrefix
	}

	// No error
	return nil
}

// AssignPropertiesFromConsistencyPolicy_Status populates our ConsistencyPolicy_Status from the provided source ConsistencyPolicy_Status
func (policy *ConsistencyPolicy_Status) AssignPropertiesFromConsistencyPolicy_Status(source *v1alpha1api20210515storage.ConsistencyPolicy_Status) error {

	// DefaultConsistencyLevel
	if source.DefaultConsistencyLevel != nil {
		policy.DefaultConsistencyLevel = ConsistencyPolicy_DefaultConsistencyLevel_Status(*source.DefaultConsistencyLevel)
	} else {
		policy.DefaultConsistencyLevel = ""
	}

	// MaxIntervalInSeconds
	policy.MaxIntervalInSeconds = genruntime.ClonePointerToInt(source.MaxIntervalInSeconds)

	// MaxStalenessPrefix
	policy.MaxStalenessPrefix = genruntime.ClonePointerToInt(source.MaxStalenessPrefix)

	// No error
	return nil
}

// AssignPropertiesToConsistencyPolicy_Status populates the provided destination ConsistencyPolicy_Status from our ConsistencyPolicy_Status
func (policy *ConsistencyPolicy_Status) AssignPropertiesToConsistencyPolicy_Status(destination *v1alpha1api20210515storage.ConsistencyPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultConsistencyLevel
	defaultConsistencyLevel := string(policy.DefaultConsistencyLevel)
	destination.DefaultConsistencyLevel = &defaultConsistencyLevel

	// MaxIntervalInSeconds
	destination.MaxIntervalInSeconds = genruntime.ClonePointerToInt(policy.MaxIntervalInSeconds)

	// MaxStalenessPrefix
	destination.MaxStalenessPrefix = genruntime.ClonePointerToInt(policy.MaxStalenessPrefix)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsPolicy_Spec struct {
	//AllowedHeaders: The request headers that the origin domain may specify on the
	//CORS request.
	AllowedHeaders *string `json:"allowedHeaders,omitempty"`

	//AllowedMethods: The methods (HTTP request verbs) that the origin domain may use
	//for a CORS request.
	AllowedMethods *string `json:"allowedMethods,omitempty"`

	// +kubebuilder:validation:Required
	//AllowedOrigins: The origin domains that are permitted to make a request against
	//the service via CORS.
	AllowedOrigins string `json:"allowedOrigins"`

	//ExposedHeaders: The response headers that may be sent in the response to the
	//CORS request and exposed by the browser to the request issuer.
	ExposedHeaders *string `json:"exposedHeaders,omitempty"`

	// +kubebuilder:validation:Maximum=2147483647
	// +kubebuilder:validation:Minimum=1
	//MaxAgeInSeconds: The maximum amount time that a browser should cache the
	//preflight OPTIONS request.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *CorsPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result CorsPolicy_SpecARM

	// Set property ‘AllowedHeaders’:
	if policy.AllowedHeaders != nil {
		allowedHeaders := *policy.AllowedHeaders
		result.AllowedHeaders = &allowedHeaders
	}

	// Set property ‘AllowedMethods’:
	if policy.AllowedMethods != nil {
		allowedMethods := *policy.AllowedMethods
		result.AllowedMethods = &allowedMethods
	}

	// Set property ‘AllowedOrigins’:
	result.AllowedOrigins = policy.AllowedOrigins

	// Set property ‘ExposedHeaders’:
	if policy.ExposedHeaders != nil {
		exposedHeaders := *policy.ExposedHeaders
		result.ExposedHeaders = &exposedHeaders
	}

	// Set property ‘MaxAgeInSeconds’:
	if policy.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *policy.MaxAgeInSeconds
		result.MaxAgeInSeconds = &maxAgeInSeconds
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *CorsPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsPolicy_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *CorsPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsPolicy_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsPolicy_SpecARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	if typedInput.AllowedHeaders != nil {
		allowedHeaders := *typedInput.AllowedHeaders
		policy.AllowedHeaders = &allowedHeaders
	}

	// Set property ‘AllowedMethods’:
	if typedInput.AllowedMethods != nil {
		allowedMethods := *typedInput.AllowedMethods
		policy.AllowedMethods = &allowedMethods
	}

	// Set property ‘AllowedOrigins’:
	policy.AllowedOrigins = typedInput.AllowedOrigins

	// Set property ‘ExposedHeaders’:
	if typedInput.ExposedHeaders != nil {
		exposedHeaders := *typedInput.ExposedHeaders
		policy.ExposedHeaders = &exposedHeaders
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		policy.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsPolicy_Spec populates our CorsPolicy_Spec from the provided source CorsPolicy_Spec
func (policy *CorsPolicy_Spec) AssignPropertiesFromCorsPolicy_Spec(source *v1alpha1api20210515storage.CorsPolicy_Spec) error {

	// AllowedHeaders
	policy.AllowedHeaders = genruntime.ClonePointerToString(source.AllowedHeaders)

	// AllowedMethods
	policy.AllowedMethods = genruntime.ClonePointerToString(source.AllowedMethods)

	// AllowedOrigins
	policy.AllowedOrigins = genruntime.GetOptionalStringValue(source.AllowedOrigins)

	// ExposedHeaders
	policy.ExposedHeaders = genruntime.ClonePointerToString(source.ExposedHeaders)

	// MaxAgeInSeconds
	if source.MaxAgeInSeconds != nil {
		maxAgeInSecond := *source.MaxAgeInSeconds
		policy.MaxAgeInSeconds = &maxAgeInSecond
	} else {
		policy.MaxAgeInSeconds = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsPolicy_Spec populates the provided destination CorsPolicy_Spec from our CorsPolicy_Spec
func (policy *CorsPolicy_Spec) AssignPropertiesToCorsPolicy_Spec(destination *v1alpha1api20210515storage.CorsPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.ClonePointerToString(policy.AllowedHeaders)

	// AllowedMethods
	destination.AllowedMethods = genruntime.ClonePointerToString(policy.AllowedMethods)

	// AllowedOrigins
	allowedOrigin := policy.AllowedOrigins
	destination.AllowedOrigins = &allowedOrigin

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.ClonePointerToString(policy.ExposedHeaders)

	// MaxAgeInSeconds
	if policy.MaxAgeInSeconds != nil {
		maxAgeInSecond := *policy.MaxAgeInSeconds
		destination.MaxAgeInSeconds = &maxAgeInSecond
	} else {
		destination.MaxAgeInSeconds = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type CorsPolicy_Status struct {
	//AllowedHeaders: The request headers that the origin domain may specify on the
	//CORS request.
	AllowedHeaders *string `json:"allowedHeaders,omitempty"`

	//AllowedMethods: The methods (HTTP request verbs) that the origin domain may use
	//for a CORS request.
	AllowedMethods *string `json:"allowedMethods,omitempty"`

	// +kubebuilder:validation:Required
	//AllowedOrigins: The origin domains that are permitted to make a request against
	//the service via CORS.
	AllowedOrigins string `json:"allowedOrigins"`

	//ExposedHeaders: The response headers that may be sent in the response to the
	//CORS request and exposed by the browser to the request issuer.
	ExposedHeaders *string `json:"exposedHeaders,omitempty"`

	//MaxAgeInSeconds: The maximum amount time that a browser should cache the
	//preflight OPTIONS request.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *CorsPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *CorsPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	if typedInput.AllowedHeaders != nil {
		allowedHeaders := *typedInput.AllowedHeaders
		policy.AllowedHeaders = &allowedHeaders
	}

	// Set property ‘AllowedMethods’:
	if typedInput.AllowedMethods != nil {
		allowedMethods := *typedInput.AllowedMethods
		policy.AllowedMethods = &allowedMethods
	}

	// Set property ‘AllowedOrigins’:
	policy.AllowedOrigins = typedInput.AllowedOrigins

	// Set property ‘ExposedHeaders’:
	if typedInput.ExposedHeaders != nil {
		exposedHeaders := *typedInput.ExposedHeaders
		policy.ExposedHeaders = &exposedHeaders
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		policy.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsPolicy_Status populates our CorsPolicy_Status from the provided source CorsPolicy_Status
func (policy *CorsPolicy_Status) AssignPropertiesFromCorsPolicy_Status(source *v1alpha1api20210515storage.CorsPolicy_Status) error {

	// AllowedHeaders
	policy.AllowedHeaders = genruntime.ClonePointerToString(source.AllowedHeaders)

	// AllowedMethods
	policy.AllowedMethods = genruntime.ClonePointerToString(source.AllowedMethods)

	// AllowedOrigins
	policy.AllowedOrigins = genruntime.GetOptionalStringValue(source.AllowedOrigins)

	// ExposedHeaders
	policy.ExposedHeaders = genruntime.ClonePointerToString(source.ExposedHeaders)

	// MaxAgeInSeconds
	policy.MaxAgeInSeconds = genruntime.ClonePointerToInt(source.MaxAgeInSeconds)

	// No error
	return nil
}

// AssignPropertiesToCorsPolicy_Status populates the provided destination CorsPolicy_Status from our CorsPolicy_Status
func (policy *CorsPolicy_Status) AssignPropertiesToCorsPolicy_Status(destination *v1alpha1api20210515storage.CorsPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	destination.AllowedHeaders = genruntime.ClonePointerToString(policy.AllowedHeaders)

	// AllowedMethods
	destination.AllowedMethods = genruntime.ClonePointerToString(policy.AllowedMethods)

	// AllowedOrigins
	allowedOrigin := policy.AllowedOrigins
	destination.AllowedOrigins = &allowedOrigin

	// ExposedHeaders
	destination.ExposedHeaders = genruntime.ClonePointerToString(policy.ExposedHeaders)

	// MaxAgeInSeconds
	destination.MaxAgeInSeconds = genruntime.ClonePointerToInt(policy.MaxAgeInSeconds)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Standard"}
type DatabaseAccountOfferType_Spec string

const DatabaseAccountOfferType_SpecStandard = DatabaseAccountOfferType_Spec("Standard")

type DatabaseAccountOfferType_Status string

const DatabaseAccountOfferType_StatusStandard = DatabaseAccountOfferType_Status("Standard")

type IpAddressOrRange_Spec struct {
	//IpAddressOrRange: A single IPv4 address or a single IPv4 address range in CIDR
	//format. Provided IPs must be well-formatted and cannot be contained in one of
	//the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16,
	//since these are not enforceable by the IP address filter. Example of valid
	//inputs: “23.40.210.245” or “23.40.210.0/8”.
	IpAddressOrRange *string `json:"ipAddressOrRange,omitempty"`
}

var _ genruntime.ARMTransformer = &IpAddressOrRange_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (orRange *IpAddressOrRange_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if orRange == nil {
		return nil, nil
	}
	var result IpAddressOrRange_SpecARM

	// Set property ‘IpAddressOrRange’:
	if orRange.IpAddressOrRange != nil {
		ipAddressOrRange := *orRange.IpAddressOrRange
		result.IpAddressOrRange = &ipAddressOrRange
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (orRange *IpAddressOrRange_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpAddressOrRange_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (orRange *IpAddressOrRange_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpAddressOrRange_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpAddressOrRange_SpecARM, got %T", armInput)
	}

	// Set property ‘IpAddressOrRange’:
	if typedInput.IpAddressOrRange != nil {
		ipAddressOrRange := *typedInput.IpAddressOrRange
		orRange.IpAddressOrRange = &ipAddressOrRange
	}

	// No error
	return nil
}

// AssignPropertiesFromIpAddressOrRange_Spec populates our IpAddressOrRange_Spec from the provided source IpAddressOrRange_Spec
func (orRange *IpAddressOrRange_Spec) AssignPropertiesFromIpAddressOrRange_Spec(source *v1alpha1api20210515storage.IpAddressOrRange_Spec) error {

	// IpAddressOrRange
	orRange.IpAddressOrRange = genruntime.ClonePointerToString(source.IpAddressOrRange)

	// No error
	return nil
}

// AssignPropertiesToIpAddressOrRange_Spec populates the provided destination IpAddressOrRange_Spec from our IpAddressOrRange_Spec
func (orRange *IpAddressOrRange_Spec) AssignPropertiesToIpAddressOrRange_Spec(destination *v1alpha1api20210515storage.IpAddressOrRange_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpAddressOrRange
	destination.IpAddressOrRange = genruntime.ClonePointerToString(orRange.IpAddressOrRange)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IpAddressOrRange_Status struct {
	//IpAddressOrRange: A single IPv4 address or a single IPv4 address range in CIDR
	//format. Provided IPs must be well-formatted and cannot be contained in one of
	//the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16,
	//since these are not enforceable by the IP address filter. Example of valid
	//inputs: “23.40.210.245” or “23.40.210.0/8”.
	IpAddressOrRange *string `json:"ipAddressOrRange,omitempty"`
}

var _ genruntime.FromARMConverter = &IpAddressOrRange_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (orRange *IpAddressOrRange_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpAddressOrRange_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (orRange *IpAddressOrRange_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpAddressOrRange_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpAddressOrRange_StatusARM, got %T", armInput)
	}

	// Set property ‘IpAddressOrRange’:
	if typedInput.IpAddressOrRange != nil {
		ipAddressOrRange := *typedInput.IpAddressOrRange
		orRange.IpAddressOrRange = &ipAddressOrRange
	}

	// No error
	return nil
}

// AssignPropertiesFromIpAddressOrRange_Status populates our IpAddressOrRange_Status from the provided source IpAddressOrRange_Status
func (orRange *IpAddressOrRange_Status) AssignPropertiesFromIpAddressOrRange_Status(source *v1alpha1api20210515storage.IpAddressOrRange_Status) error {

	// IpAddressOrRange
	orRange.IpAddressOrRange = genruntime.ClonePointerToString(source.IpAddressOrRange)

	// No error
	return nil
}

// AssignPropertiesToIpAddressOrRange_Status populates the provided destination IpAddressOrRange_Status from our IpAddressOrRange_Status
func (orRange *IpAddressOrRange_Status) AssignPropertiesToIpAddressOrRange_Status(destination *v1alpha1api20210515storage.IpAddressOrRange_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpAddressOrRange
	destination.IpAddressOrRange = genruntime.ClonePointerToString(orRange.IpAddressOrRange)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Location_Spec struct {
	// +kubebuilder:validation:Minimum=0
	//FailoverPriority: The failover priority of the region. A failover priority of 0
	//indicates a write region. The maximum value for a failover priority = (total
	//number of regions - 1). Failover priority values must be unique for each of the
	//regions in which the database account exists.
	FailoverPriority *int `json:"failoverPriority,omitempty"`

	//IsZoneRedundant: Flag to indicate whether or not this region is an
	//AvailabilityZone region
	IsZoneRedundant *bool `json:"isZoneRedundant,omitempty"`

	//LocationName: The name of the region.
	LocationName      *string `json:"locationName,omitempty"`
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

var _ genruntime.ARMTransformer = &Location_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *Location_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	var result Location_SpecARM

	// Set property ‘FailoverPriority’:
	if location.FailoverPriority != nil {
		failoverPriority := *location.FailoverPriority
		result.FailoverPriority = &failoverPriority
	}

	// Set property ‘IsZoneRedundant’:
	if location.IsZoneRedundant != nil {
		isZoneRedundant := *location.IsZoneRedundant
		result.IsZoneRedundant = &isZoneRedundant
	}

	// Set property ‘LocationName’:
	if location.LocationName != nil {
		locationName := *location.LocationName
		result.LocationName = &locationName
	}

	// Set property ‘ProvisioningState’:
	if location.ProvisioningState != nil {
		provisioningState := *location.ProvisioningState
		result.ProvisioningState = &provisioningState
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *Location_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Location_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *Location_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Location_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Location_SpecARM, got %T", armInput)
	}

	// Set property ‘FailoverPriority’:
	if typedInput.FailoverPriority != nil {
		failoverPriority := *typedInput.FailoverPriority
		location.FailoverPriority = &failoverPriority
	}

	// Set property ‘IsZoneRedundant’:
	if typedInput.IsZoneRedundant != nil {
		isZoneRedundant := *typedInput.IsZoneRedundant
		location.IsZoneRedundant = &isZoneRedundant
	}

	// Set property ‘LocationName’:
	if typedInput.LocationName != nil {
		locationName := *typedInput.LocationName
		location.LocationName = &locationName
	}

	// Set property ‘ProvisioningState’:
	if typedInput.ProvisioningState != nil {
		provisioningState := *typedInput.ProvisioningState
		location.ProvisioningState = &provisioningState
	}

	// No error
	return nil
}

// AssignPropertiesFromLocation_Spec populates our Location_Spec from the provided source Location_Spec
func (location *Location_Spec) AssignPropertiesFromLocation_Spec(source *v1alpha1api20210515storage.Location_Spec) error {

	// FailoverPriority
	if source.FailoverPriority != nil {
		failoverPriority := *source.FailoverPriority
		location.FailoverPriority = &failoverPriority
	} else {
		location.FailoverPriority = nil
	}

	// IsZoneRedundant
	if source.IsZoneRedundant != nil {
		isZoneRedundant := *source.IsZoneRedundant
		location.IsZoneRedundant = &isZoneRedundant
	} else {
		location.IsZoneRedundant = nil
	}

	// LocationName
	location.LocationName = genruntime.ClonePointerToString(source.LocationName)

	// ProvisioningState
	location.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// No error
	return nil
}

// AssignPropertiesToLocation_Spec populates the provided destination Location_Spec from our Location_Spec
func (location *Location_Spec) AssignPropertiesToLocation_Spec(destination *v1alpha1api20210515storage.Location_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FailoverPriority
	if location.FailoverPriority != nil {
		failoverPriority := *location.FailoverPriority
		destination.FailoverPriority = &failoverPriority
	} else {
		destination.FailoverPriority = nil
	}

	// IsZoneRedundant
	if location.IsZoneRedundant != nil {
		isZoneRedundant := *location.IsZoneRedundant
		destination.IsZoneRedundant = &isZoneRedundant
	} else {
		destination.IsZoneRedundant = nil
	}

	// LocationName
	destination.LocationName = genruntime.ClonePointerToString(location.LocationName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(location.ProvisioningState)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Location_Status struct {
	//DocumentEndpoint: The connection endpoint for the specific region. Example:
	//https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
	DocumentEndpoint *string `json:"documentEndpoint,omitempty"`

	//FailoverPriority: The failover priority of the region. A failover priority of 0
	//indicates a write region. The maximum value for a failover priority = (total
	//number of regions - 1). Failover priority values must be unique for each of the
	//regions in which the database account exists.
	FailoverPriority *int `json:"failoverPriority,omitempty"`

	//Id: The unique identifier of the region within the database account. Example:
	//&lt;accountName&gt;-&lt;locationName&gt;.
	Id *string `json:"id,omitempty"`

	//IsZoneRedundant: Flag to indicate whether or not this region is an
	//AvailabilityZone region
	IsZoneRedundant *bool `json:"isZoneRedundant,omitempty"`

	//LocationName: The name of the region.
	LocationName      *string `json:"locationName,omitempty"`
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

var _ genruntime.FromARMConverter = &Location_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *Location_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Location_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *Location_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Location_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Location_StatusARM, got %T", armInput)
	}

	// Set property ‘DocumentEndpoint’:
	if typedInput.DocumentEndpoint != nil {
		documentEndpoint := *typedInput.DocumentEndpoint
		location.DocumentEndpoint = &documentEndpoint
	}

	// Set property ‘FailoverPriority’:
	if typedInput.FailoverPriority != nil {
		failoverPriority := *typedInput.FailoverPriority
		location.FailoverPriority = &failoverPriority
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		location.Id = &id
	}

	// Set property ‘IsZoneRedundant’:
	if typedInput.IsZoneRedundant != nil {
		isZoneRedundant := *typedInput.IsZoneRedundant
		location.IsZoneRedundant = &isZoneRedundant
	}

	// Set property ‘LocationName’:
	if typedInput.LocationName != nil {
		locationName := *typedInput.LocationName
		location.LocationName = &locationName
	}

	// Set property ‘ProvisioningState’:
	if typedInput.ProvisioningState != nil {
		provisioningState := *typedInput.ProvisioningState
		location.ProvisioningState = &provisioningState
	}

	// No error
	return nil
}

// AssignPropertiesFromLocation_Status populates our Location_Status from the provided source Location_Status
func (location *Location_Status) AssignPropertiesFromLocation_Status(source *v1alpha1api20210515storage.Location_Status) error {

	// DocumentEndpoint
	location.DocumentEndpoint = genruntime.ClonePointerToString(source.DocumentEndpoint)

	// FailoverPriority
	location.FailoverPriority = genruntime.ClonePointerToInt(source.FailoverPriority)

	// Id
	location.Id = genruntime.ClonePointerToString(source.Id)

	// IsZoneRedundant
	if source.IsZoneRedundant != nil {
		isZoneRedundant := *source.IsZoneRedundant
		location.IsZoneRedundant = &isZoneRedundant
	} else {
		location.IsZoneRedundant = nil
	}

	// LocationName
	location.LocationName = genruntime.ClonePointerToString(source.LocationName)

	// ProvisioningState
	location.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// No error
	return nil
}

// AssignPropertiesToLocation_Status populates the provided destination Location_Status from our Location_Status
func (location *Location_Status) AssignPropertiesToLocation_Status(destination *v1alpha1api20210515storage.Location_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DocumentEndpoint
	destination.DocumentEndpoint = genruntime.ClonePointerToString(location.DocumentEndpoint)

	// FailoverPriority
	destination.FailoverPriority = genruntime.ClonePointerToInt(location.FailoverPriority)

	// Id
	destination.Id = genruntime.ClonePointerToString(location.Id)

	// IsZoneRedundant
	if location.IsZoneRedundant != nil {
		isZoneRedundant := *location.IsZoneRedundant
		destination.IsZoneRedundant = &isZoneRedundant
	} else {
		destination.IsZoneRedundant = nil
	}

	// LocationName
	destination.LocationName = genruntime.ClonePointerToString(location.LocationName)

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(location.ProvisioningState)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedServiceIdentity_Spec struct {
	//Type: The type of identity used for the resource. The type
	//'SystemAssigned,UserAssigned' includes both an implicitly created identity and a
	//set of user assigned identities. The type 'None' will remove any identities from
	//the service.
	Type *ManagedServiceIdentity_Type_Spec `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedServiceIdentity_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *ManagedServiceIdentity_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result ManagedServiceIdentity_SpecARM

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *ManagedServiceIdentity_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedServiceIdentity_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *ManagedServiceIdentity_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedServiceIdentity_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedServiceIdentity_SpecARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedServiceIdentity_Spec populates our ManagedServiceIdentity_Spec from the provided source ManagedServiceIdentity_Spec
func (identity *ManagedServiceIdentity_Spec) AssignPropertiesFromManagedServiceIdentity_Spec(source *v1alpha1api20210515storage.ManagedServiceIdentity_Spec) error {

	// Type
	if source.Type != nil {
		typeVar := ManagedServiceIdentity_Type_Spec(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedServiceIdentity_Spec populates the provided destination ManagedServiceIdentity_Spec from our ManagedServiceIdentity_Spec
func (identity *ManagedServiceIdentity_Spec) AssignPropertiesToManagedServiceIdentity_Spec(destination *v1alpha1api20210515storage.ManagedServiceIdentity_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedServiceIdentity_Status struct {
	//PrincipalId: The principal id of the system assigned identity. This property
	//will only be provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant id of the system assigned identity. This property will only
	//be provided for a system assigned identity.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The type of identity used for the resource. The type
	//'SystemAssigned,UserAssigned' includes both an implicitly created identity and a
	//set of user assigned identities. The type 'None' will remove any identities from
	//the service.
	Type *ManagedServiceIdentity_Type_Status `json:"type,omitempty"`

	//UserAssignedIdentities: The list of user identities associated with resource.
	//The user identity dictionary key references will be ARM resource ids in the
	//form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ManagedServiceIdentity_UserAssignedIdentities_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedServiceIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *ManagedServiceIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedServiceIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *ManagedServiceIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedServiceIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedServiceIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]ManagedServiceIdentity_UserAssignedIdentities_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 ManagedServiceIdentity_UserAssignedIdentities_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedServiceIdentity_Status populates our ManagedServiceIdentity_Status from the provided source ManagedServiceIdentity_Status
func (identity *ManagedServiceIdentity_Status) AssignPropertiesFromManagedServiceIdentity_Status(source *v1alpha1api20210515storage.ManagedServiceIdentity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := ManagedServiceIdentity_Type_Status(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]ManagedServiceIdentity_UserAssignedIdentities_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity ManagedServiceIdentity_UserAssignedIdentities_Status
			err := userAssignedIdentity.AssignPropertiesFromManagedServiceIdentity_UserAssignedIdentities_Status(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromManagedServiceIdentity_UserAssignedIdentities_Status() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedServiceIdentity_Status populates the provided destination ManagedServiceIdentity_Status from our ManagedServiceIdentity_Status
func (identity *ManagedServiceIdentity_Status) AssignPropertiesToManagedServiceIdentity_Status(destination *v1alpha1api20210515storage.ManagedServiceIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210515storage.ManagedServiceIdentity_UserAssignedIdentities_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210515storage.ManagedServiceIdentity_UserAssignedIdentities_Status
			err := userAssignedIdentityValue.AssignPropertiesToManagedServiceIdentity_UserAssignedIdentities_Status(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToManagedServiceIdentity_UserAssignedIdentities_Status() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureServices","None"}
type NetworkAclBypass_Spec string

const (
	NetworkAclBypass_SpecAzureServices = NetworkAclBypass_Spec("AzureServices")
	NetworkAclBypass_SpecNone          = NetworkAclBypass_Spec("None")
)

type NetworkAclBypass_Status string

const (
	NetworkAclBypass_StatusAzureServices = NetworkAclBypass_Status("AzureServices")
	NetworkAclBypass_StatusNone          = NetworkAclBypass_Status("None")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type PublicNetworkAccess_Spec string

const (
	PublicNetworkAccess_SpecDisabled = PublicNetworkAccess_Spec("Disabled")
	PublicNetworkAccess_SpecEnabled  = PublicNetworkAccess_Spec("Enabled")
)

type PublicNetworkAccess_Status string

const (
	PublicNetworkAccess_StatusDisabled = PublicNetworkAccess_Status("Disabled")
	PublicNetworkAccess_StatusEnabled  = PublicNetworkAccess_Status("Enabled")
)

type VirtualNetworkRule_Spec struct {
	//IgnoreMissingVNetServiceEndpoint: Create firewall rule before the virtual
	//network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `json:"ignoreMissingVNetServiceEndpoint,omitempty"`

	//Reference: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkRule_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *VirtualNetworkRule_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result VirtualNetworkRule_SpecARM

	// Set property ‘Id’:
	if rule.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*rule.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘IgnoreMissingVNetServiceEndpoint’:
	if rule.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *rule.IgnoreMissingVNetServiceEndpoint
		result.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_SpecARM, got %T", armInput)
	}

	// Set property ‘IgnoreMissingVNetServiceEndpoint’:
	if typedInput.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *typedInput.IgnoreMissingVNetServiceEndpoint
		rule.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule_Spec populates our VirtualNetworkRule_Spec from the provided source VirtualNetworkRule_Spec
func (rule *VirtualNetworkRule_Spec) AssignPropertiesFromVirtualNetworkRule_Spec(source *v1alpha1api20210515storage.VirtualNetworkRule_Spec) error {

	// IgnoreMissingVNetServiceEndpoint
	if source.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *source.IgnoreMissingVNetServiceEndpoint
		rule.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		rule.IgnoreMissingVNetServiceEndpoint = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		rule.Reference = &reference
	} else {
		rule.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule_Spec populates the provided destination VirtualNetworkRule_Spec from our VirtualNetworkRule_Spec
func (rule *VirtualNetworkRule_Spec) AssignPropertiesToVirtualNetworkRule_Spec(destination *v1alpha1api20210515storage.VirtualNetworkRule_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IgnoreMissingVNetServiceEndpoint
	if rule.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *rule.IgnoreMissingVNetServiceEndpoint
		destination.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		destination.IgnoreMissingVNetServiceEndpoint = nil
	}

	// Reference
	if rule.Reference != nil {
		reference := rule.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type VirtualNetworkRule_Status struct {
	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id *string `json:"id,omitempty"`

	//IgnoreMissingVNetServiceEndpoint: Create firewall rule before the virtual
	//network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `json:"ignoreMissingVNetServiceEndpoint,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *VirtualNetworkRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *VirtualNetworkRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		rule.Id = &id
	}

	// Set property ‘IgnoreMissingVNetServiceEndpoint’:
	if typedInput.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *typedInput.IgnoreMissingVNetServiceEndpoint
		rule.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule_Status populates our VirtualNetworkRule_Status from the provided source VirtualNetworkRule_Status
func (rule *VirtualNetworkRule_Status) AssignPropertiesFromVirtualNetworkRule_Status(source *v1alpha1api20210515storage.VirtualNetworkRule_Status) error {

	// Id
	rule.Id = genruntime.ClonePointerToString(source.Id)

	// IgnoreMissingVNetServiceEndpoint
	if source.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *source.IgnoreMissingVNetServiceEndpoint
		rule.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		rule.IgnoreMissingVNetServiceEndpoint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule_Status populates the provided destination VirtualNetworkRule_Status from our VirtualNetworkRule_Status
func (rule *VirtualNetworkRule_Status) AssignPropertiesToVirtualNetworkRule_Status(destination *v1alpha1api20210515storage.VirtualNetworkRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(rule.Id)

	// IgnoreMissingVNetServiceEndpoint
	if rule.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *rule.IgnoreMissingVNetServiceEndpoint
		destination.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		destination.IgnoreMissingVNetServiceEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"FullFidelity","WellDefined"}
type AnalyticalStorageSchemaType_Spec string

const (
	AnalyticalStorageSchemaType_SpecFullFidelity = AnalyticalStorageSchemaType_Spec("FullFidelity")
	AnalyticalStorageSchemaType_SpecWellDefined  = AnalyticalStorageSchemaType_Spec("WellDefined")
)

type AnalyticalStorageSchemaType_Status string

const (
	AnalyticalStorageSchemaType_StatusFullFidelity = AnalyticalStorageSchemaType_Status("FullFidelity")
	AnalyticalStorageSchemaType_StatusWellDefined  = AnalyticalStorageSchemaType_Status("WellDefined")
)

// +kubebuilder:validation:Enum={"3.2","3.6","4.0"}
type ApiProperties_ServerVersion_Spec string

const (
	ApiProperties_ServerVersion_Spec32 = ApiProperties_ServerVersion_Spec("3.2")
	ApiProperties_ServerVersion_Spec36 = ApiProperties_ServerVersion_Spec("3.6")
	ApiProperties_ServerVersion_Spec40 = ApiProperties_ServerVersion_Spec("4.0")
)

type ApiProperties_ServerVersion_Status string

const (
	ApiProperties_ServerVersion_Status32 = ApiProperties_ServerVersion_Status("3.2")
	ApiProperties_ServerVersion_Status36 = ApiProperties_ServerVersion_Status("3.6")
	ApiProperties_ServerVersion_Status40 = ApiProperties_ServerVersion_Status("4.0")
)

// +kubebuilder:validation:Enum={"Continuous","Periodic"}
type BackupPolicyType_Spec string

const (
	BackupPolicyType_SpecContinuous = BackupPolicyType_Spec("Continuous")
	BackupPolicyType_SpecPeriodic   = BackupPolicyType_Spec("Periodic")
)

type BackupPolicyType_Status string

const (
	BackupPolicyType_StatusContinuous = BackupPolicyType_Status("Continuous")
	BackupPolicyType_StatusPeriodic   = BackupPolicyType_Status("Periodic")
)

// +kubebuilder:validation:Enum={"BoundedStaleness","ConsistentPrefix","Eventual","Session","Strong"}
type ConsistencyPolicy_DefaultConsistencyLevel_Spec string

const (
	ConsistencyPolicy_DefaultConsistencyLevel_SpecBoundedStaleness = ConsistencyPolicy_DefaultConsistencyLevel_Spec("BoundedStaleness")
	ConsistencyPolicy_DefaultConsistencyLevel_SpecConsistentPrefix = ConsistencyPolicy_DefaultConsistencyLevel_Spec("ConsistentPrefix")
	ConsistencyPolicy_DefaultConsistencyLevel_SpecEventual         = ConsistencyPolicy_DefaultConsistencyLevel_Spec("Eventual")
	ConsistencyPolicy_DefaultConsistencyLevel_SpecSession          = ConsistencyPolicy_DefaultConsistencyLevel_Spec("Session")
	ConsistencyPolicy_DefaultConsistencyLevel_SpecStrong           = ConsistencyPolicy_DefaultConsistencyLevel_Spec("Strong")
)

type ConsistencyPolicy_DefaultConsistencyLevel_Status string

const (
	ConsistencyPolicy_DefaultConsistencyLevel_StatusBoundedStaleness = ConsistencyPolicy_DefaultConsistencyLevel_Status("BoundedStaleness")
	ConsistencyPolicy_DefaultConsistencyLevel_StatusConsistentPrefix = ConsistencyPolicy_DefaultConsistencyLevel_Status("ConsistentPrefix")
	ConsistencyPolicy_DefaultConsistencyLevel_StatusEventual         = ConsistencyPolicy_DefaultConsistencyLevel_Status("Eventual")
	ConsistencyPolicy_DefaultConsistencyLevel_StatusSession          = ConsistencyPolicy_DefaultConsistencyLevel_Status("Session")
	ConsistencyPolicy_DefaultConsistencyLevel_StatusStrong           = ConsistencyPolicy_DefaultConsistencyLevel_Status("Strong")
)

type ManagedServiceIdentity_UserAssignedIdentities_Status struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedServiceIdentity_UserAssignedIdentities_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identities *ManagedServiceIdentity_UserAssignedIdentities_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedServiceIdentity_UserAssignedIdentities_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identities *ManagedServiceIdentity_UserAssignedIdentities_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedServiceIdentity_UserAssignedIdentities_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedServiceIdentity_UserAssignedIdentities_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedServiceIdentity_UserAssignedIdentities_Status populates our ManagedServiceIdentity_UserAssignedIdentities_Status from the provided source ManagedServiceIdentity_UserAssignedIdentities_Status
func (identities *ManagedServiceIdentity_UserAssignedIdentities_Status) AssignPropertiesFromManagedServiceIdentity_UserAssignedIdentities_Status(source *v1alpha1api20210515storage.ManagedServiceIdentity_UserAssignedIdentities_Status) error {

	// ClientId
	identities.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identities.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToManagedServiceIdentity_UserAssignedIdentities_Status populates the provided destination ManagedServiceIdentity_UserAssignedIdentities_Status from our ManagedServiceIdentity_UserAssignedIdentities_Status
func (identities *ManagedServiceIdentity_UserAssignedIdentities_Status) AssignPropertiesToManagedServiceIdentity_UserAssignedIdentities_Status(destination *v1alpha1api20210515storage.ManagedServiceIdentity_UserAssignedIdentities_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identities.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identities.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&DatabaseAccount{}, &DatabaseAccountList{})
}
