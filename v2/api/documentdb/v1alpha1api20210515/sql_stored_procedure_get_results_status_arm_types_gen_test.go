// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlStoredProcedureGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureGetResults_STATUSARM, SqlStoredProcedureGetResults_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureGetResults_STATUSARM runs a test to see if a specific instance of SqlStoredProcedureGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureGetResults_STATUSARM(subject SqlStoredProcedureGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureGetResults_STATUSARM instances for property testing - lazily instantiated by
// SqlStoredProcedureGetResults_STATUSARMGenerator()
var sqlStoredProcedureGetResults_STATUSARMGenerator gopter.Gen

// SqlStoredProcedureGetResults_STATUSARMGenerator returns a generator of SqlStoredProcedureGetResults_STATUSARM instances for property testing.
// We first initialize sqlStoredProcedureGetResults_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlStoredProcedureGetResults_STATUSARMGenerator() gopter.Gen {
	if sqlStoredProcedureGetResults_STATUSARMGenerator != nil {
		return sqlStoredProcedureGetResults_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM(generators)
	sqlStoredProcedureGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM(generators)
	sqlStoredProcedureGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetResults_STATUSARM{}), generators)

	return sqlStoredProcedureGetResults_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlStoredProcedureGetProperties_STATUSARMGenerator())
}

func Test_SqlStoredProcedureGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureGetProperties_STATUSARM, SqlStoredProcedureGetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureGetProperties_STATUSARM runs a test to see if a specific instance of SqlStoredProcedureGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureGetProperties_STATUSARM(subject SqlStoredProcedureGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureGetProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlStoredProcedureGetProperties_STATUSARMGenerator()
var sqlStoredProcedureGetProperties_STATUSARMGenerator gopter.Gen

// SqlStoredProcedureGetProperties_STATUSARMGenerator returns a generator of SqlStoredProcedureGetProperties_STATUSARM instances for property testing.
func SqlStoredProcedureGetProperties_STATUSARMGenerator() gopter.Gen {
	if sqlStoredProcedureGetProperties_STATUSARMGenerator != nil {
		return sqlStoredProcedureGetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureGetProperties_STATUSARM(generators)
	sqlStoredProcedureGetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetProperties_STATUSARM{}), generators)

	return sqlStoredProcedureGetProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureGetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureGetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(SqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator())
}

func Test_SqlStoredProcedureGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureGetProperties_STATUS_ResourceARM, SqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureGetProperties_STATUS_ResourceARM runs a test to see if a specific instance of SqlStoredProcedureGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureGetProperties_STATUS_ResourceARM(subject SqlStoredProcedureGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureGetProperties_STATUS_ResourceARM instances for property testing - lazily instantiated
// by SqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator()
var sqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator gopter.Gen

// SqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator returns a generator of SqlStoredProcedureGetProperties_STATUS_ResourceARM instances for property testing.
func SqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator() gopter.Gen {
	if sqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator != nil {
		return sqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureGetProperties_STATUS_ResourceARM(generators)
	sqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetProperties_STATUS_ResourceARM{}), generators)

	return sqlStoredProcedureGetProperties_STATUS_ResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
