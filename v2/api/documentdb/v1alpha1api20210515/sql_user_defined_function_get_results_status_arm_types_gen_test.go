// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlUserDefinedFunctionGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetResults_STATUSARM, SqlUserDefinedFunctionGetResults_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetResults_STATUSARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetResults_STATUSARM(subject SqlUserDefinedFunctionGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetResults_STATUSARM instances for property testing - lazily instantiated by
// SqlUserDefinedFunctionGetResults_STATUSARMGenerator()
var sqlUserDefinedFunctionGetResults_STATUSARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetResults_STATUSARMGenerator returns a generator of SqlUserDefinedFunctionGetResults_STATUSARM instances for property testing.
// We first initialize sqlUserDefinedFunctionGetResults_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlUserDefinedFunctionGetResults_STATUSARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetResults_STATUSARMGenerator != nil {
		return sqlUserDefinedFunctionGetResults_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM(generators)
	sqlUserDefinedFunctionGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM(generators)
	sqlUserDefinedFunctionGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetResults_STATUSARM{}), generators)

	return sqlUserDefinedFunctionGetResults_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlUserDefinedFunctionGetProperties_STATUSARMGenerator())
}

func Test_SqlUserDefinedFunctionGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUSARM, SqlUserDefinedFunctionGetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUSARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUSARM(subject SqlUserDefinedFunctionGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlUserDefinedFunctionGetProperties_STATUSARMGenerator()
var sqlUserDefinedFunctionGetProperties_STATUSARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetProperties_STATUSARMGenerator returns a generator of SqlUserDefinedFunctionGetProperties_STATUSARM instances for property testing.
func SqlUserDefinedFunctionGetProperties_STATUSARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetProperties_STATUSARMGenerator != nil {
		return sqlUserDefinedFunctionGetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUSARM(generators)
	sqlUserDefinedFunctionGetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetProperties_STATUSARM{}), generators)

	return sqlUserDefinedFunctionGetProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(SqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator())
}

func Test_SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUS_ResourceARM, SqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUS_ResourceARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetProperties_STATUS_ResourceARM(subject SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM instances for property testing - lazily
// instantiated by SqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator()
var sqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator returns a generator of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM instances for property testing.
func SqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator != nil {
		return sqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUS_ResourceARM(generators)
	sqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM{}), generators)

	return sqlUserDefinedFunctionGetProperties_STATUS_ResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
