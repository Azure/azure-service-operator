// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlUserDefinedFunctionGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetResultsSTATUSARM, SqlUserDefinedFunctionGetResultsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetResultsSTATUSARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetResultsSTATUSARM(subject SqlUserDefinedFunctionGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetResults_STATUSARM instances for property testing - lazily instantiated by
// SqlUserDefinedFunctionGetResultsSTATUSARMGenerator()
var sqlUserDefinedFunctionGetResultsSTATUSARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetResultsSTATUSARMGenerator returns a generator of SqlUserDefinedFunctionGetResults_STATUSARM instances for property testing.
// We first initialize sqlUserDefinedFunctionGetResultsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlUserDefinedFunctionGetResultsSTATUSARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetResultsSTATUSARMGenerator != nil {
		return sqlUserDefinedFunctionGetResultsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM(generators)
	sqlUserDefinedFunctionGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM(generators)
	sqlUserDefinedFunctionGetResultsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetResults_STATUSARM{}), generators)

	return sqlUserDefinedFunctionGetResultsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetResultsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator())
}

func Test_SqlUserDefinedFunctionGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetPropertiesSTATUSARM, SqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetPropertiesSTATUSARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetPropertiesSTATUSARM(subject SqlUserDefinedFunctionGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator()
var sqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator returns a generator of SqlUserDefinedFunctionGetProperties_STATUSARM instances for property testing.
func SqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator != nil {
		return sqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetPropertiesSTATUSARM(generators)
	sqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetProperties_STATUSARM{}), generators)

	return sqlUserDefinedFunctionGetPropertiesSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionGetPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(SqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator())
}

func Test_SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionGetPropertiesSTATUSResourceARM, SqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionGetPropertiesSTATUSResourceARM runs a test to see if a specific instance of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionGetPropertiesSTATUSResourceARM(subject SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM instances for property testing - lazily
// instantiated by SqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator()
var sqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator gopter.Gen

// SqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator returns a generator of SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM instances for property testing.
func SqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator != nil {
		return sqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetPropertiesSTATUSResourceARM(generators)
	sqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionGetProperties_STATUS_ResourceARM{}), generators)

	return sqlUserDefinedFunctionGetPropertiesSTATUSResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetPropertiesSTATUSResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionGetPropertiesSTATUSResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
