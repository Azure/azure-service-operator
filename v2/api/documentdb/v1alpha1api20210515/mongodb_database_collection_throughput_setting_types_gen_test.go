// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongodbDatabaseCollectionThroughputSetting_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollectionThroughputSetting to hub returns original",
		prop.ForAll(RunResourceConversionTestForMongodbDatabaseCollectionThroughputSetting, MongodbDatabaseCollectionThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForMongodbDatabaseCollectionThroughputSetting tests if a specific instance of MongodbDatabaseCollectionThroughputSetting round trips to the hub storage version and back losslessly
func RunResourceConversionTestForMongodbDatabaseCollectionThroughputSetting(subject MongodbDatabaseCollectionThroughputSetting) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual MongodbDatabaseCollectionThroughputSetting
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollectionThroughputSetting_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollectionThroughputSetting to MongodbDatabaseCollectionThroughputSetting via AssignPropertiesToMongodbDatabaseCollectionThroughputSetting & AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseCollectionThroughputSetting, MongodbDatabaseCollectionThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseCollectionThroughputSetting tests if a specific instance of MongodbDatabaseCollectionThroughputSetting can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseCollectionThroughputSetting(subject MongodbDatabaseCollectionThroughputSetting) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting
	err := copied.AssignPropertiesToMongodbDatabaseCollectionThroughputSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseCollectionThroughputSetting
	err = actual.AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollectionThroughputSetting_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseCollectionThroughputSetting via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseCollectionThroughputSetting, MongodbDatabaseCollectionThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseCollectionThroughputSetting runs a test to see if a specific instance of MongodbDatabaseCollectionThroughputSetting round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseCollectionThroughputSetting(subject MongodbDatabaseCollectionThroughputSetting) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseCollectionThroughputSetting
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseCollectionThroughputSetting instances for property testing - lazily instantiated by
//MongodbDatabaseCollectionThroughputSettingGenerator()
var mongodbDatabaseCollectionThroughputSettingGenerator gopter.Gen

// MongodbDatabaseCollectionThroughputSettingGenerator returns a generator of MongodbDatabaseCollectionThroughputSetting instances for property testing.
func MongodbDatabaseCollectionThroughputSettingGenerator() gopter.Gen {
	if mongodbDatabaseCollectionThroughputSettingGenerator != nil {
		return mongodbDatabaseCollectionThroughputSettingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongodbDatabaseCollectionThroughputSetting(generators)
	mongodbDatabaseCollectionThroughputSettingGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseCollectionThroughputSetting{}), generators)

	return mongodbDatabaseCollectionThroughputSettingGenerator
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseCollectionThroughputSetting is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseCollectionThroughputSetting(gens map[string]gopter.Gen) {
	gens["Spec"] = DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator()
	gens["Status"] = ThroughputSettingsUpdateParametersStatusGenerator()
}

func Test_DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC to DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC via AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC & AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC, DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC tests if a specific instance of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(subject DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC
	err := copied.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC
	err = actual.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC, DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(subject DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC instances for property testing -
//lazily instantiated by DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator()
var databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator != nil {
		return databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(generators)
	databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(generators)
	databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC{}), generators)

	return databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPECGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSPEC(gens map[string]gopter.Gen) {
	gens["Resource"] = ThroughputSettingsResourceSpecGenerator()
}

func Test_ThroughputSettingsUpdateParameters_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputSettingsUpdateParameters_Status to ThroughputSettingsUpdateParameters_Status via AssignPropertiesToThroughputSettingsUpdateParametersStatus & AssignPropertiesFromThroughputSettingsUpdateParametersStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputSettingsUpdateParametersStatus, ThroughputSettingsUpdateParametersStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputSettingsUpdateParametersStatus tests if a specific instance of ThroughputSettingsUpdateParameters_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputSettingsUpdateParametersStatus(subject ThroughputSettingsUpdateParameters_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputSettingsUpdateParameters_Status
	err := copied.AssignPropertiesToThroughputSettingsUpdateParametersStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputSettingsUpdateParameters_Status
	err = actual.AssignPropertiesFromThroughputSettingsUpdateParametersStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputSettingsUpdateParameters_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsUpdateParameters_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsUpdateParametersStatus, ThroughputSettingsUpdateParametersStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsUpdateParametersStatus runs a test to see if a specific instance of ThroughputSettingsUpdateParameters_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsUpdateParametersStatus(subject ThroughputSettingsUpdateParameters_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsUpdateParameters_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsUpdateParameters_Status instances for property testing - lazily instantiated by
//ThroughputSettingsUpdateParametersStatusGenerator()
var throughputSettingsUpdateParametersStatusGenerator gopter.Gen

// ThroughputSettingsUpdateParametersStatusGenerator returns a generator of ThroughputSettingsUpdateParameters_Status instances for property testing.
// We first initialize throughputSettingsUpdateParametersStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsUpdateParametersStatusGenerator() gopter.Gen {
	if throughputSettingsUpdateParametersStatusGenerator != nil {
		return throughputSettingsUpdateParametersStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParametersStatus(generators)
	throughputSettingsUpdateParametersStatusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateParameters_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParametersStatus(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParametersStatus(generators)
	throughputSettingsUpdateParametersStatusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateParameters_Status{}), generators)

	return throughputSettingsUpdateParametersStatusGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParametersStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParametersStatus(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParametersStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParametersStatus(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(ThroughputSettingsResourceStatusGenerator())
}

func Test_ThroughputSettingsResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputSettingsResource_Spec to ThroughputSettingsResource_Spec via AssignPropertiesToThroughputSettingsResourceSpec & AssignPropertiesFromThroughputSettingsResourceSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputSettingsResourceSpec, ThroughputSettingsResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputSettingsResourceSpec tests if a specific instance of ThroughputSettingsResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputSettingsResourceSpec(subject ThroughputSettingsResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputSettingsResource_Spec
	err := copied.AssignPropertiesToThroughputSettingsResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputSettingsResource_Spec
	err = actual.AssignPropertiesFromThroughputSettingsResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputSettingsResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResourceSpec, ThroughputSettingsResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResourceSpec runs a test to see if a specific instance of ThroughputSettingsResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResourceSpec(subject ThroughputSettingsResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_Spec instances for property testing - lazily instantiated by
//ThroughputSettingsResourceSpecGenerator()
var throughputSettingsResourceSpecGenerator gopter.Gen

// ThroughputSettingsResourceSpecGenerator returns a generator of ThroughputSettingsResource_Spec instances for property testing.
// We first initialize throughputSettingsResourceSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResourceSpecGenerator() gopter.Gen {
	if throughputSettingsResourceSpecGenerator != nil {
		return throughputSettingsResourceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResourceSpec(generators)
	throughputSettingsResourceSpecGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResourceSpec(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResourceSpec(generators)
	throughputSettingsResourceSpecGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Spec{}), generators)

	return throughputSettingsResourceSpecGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResourceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResourceSpec(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResourceSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResourceSpec(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResourceSpecGenerator())
}

func Test_ThroughputSettingsResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputSettingsResource_Status to ThroughputSettingsResource_Status via AssignPropertiesToThroughputSettingsResourceStatus & AssignPropertiesFromThroughputSettingsResourceStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputSettingsResourceStatus, ThroughputSettingsResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputSettingsResourceStatus tests if a specific instance of ThroughputSettingsResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputSettingsResourceStatus(subject ThroughputSettingsResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputSettingsResource_Status
	err := copied.AssignPropertiesToThroughputSettingsResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputSettingsResource_Status
	err = actual.AssignPropertiesFromThroughputSettingsResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputSettingsResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResourceStatus, ThroughputSettingsResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResourceStatus runs a test to see if a specific instance of ThroughputSettingsResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResourceStatus(subject ThroughputSettingsResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_Status instances for property testing - lazily instantiated by
//ThroughputSettingsResourceStatusGenerator()
var throughputSettingsResourceStatusGenerator gopter.Gen

// ThroughputSettingsResourceStatusGenerator returns a generator of ThroughputSettingsResource_Status instances for property testing.
// We first initialize throughputSettingsResourceStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResourceStatusGenerator() gopter.Gen {
	if throughputSettingsResourceStatusGenerator != nil {
		return throughputSettingsResourceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResourceStatus(generators)
	throughputSettingsResourceStatusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResourceStatus(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResourceStatus(generators)
	throughputSettingsResourceStatusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Status{}), generators)

	return throughputSettingsResourceStatusGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResourceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResourceStatus(gens map[string]gopter.Gen) {
	gens["MinimumThroughput"] = gen.PtrOf(gen.AlphaString())
	gens["OfferReplacePending"] = gen.PtrOf(gen.AlphaString())
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResourceStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResourceStatus(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResourceStatusGenerator())
}

func Test_AutoscaleSettingsResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoscaleSettingsResource_Spec to AutoscaleSettingsResource_Spec via AssignPropertiesToAutoscaleSettingsResourceSpec & AssignPropertiesFromAutoscaleSettingsResourceSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoscaleSettingsResourceSpec, AutoscaleSettingsResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoscaleSettingsResourceSpec tests if a specific instance of AutoscaleSettingsResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoscaleSettingsResourceSpec(subject AutoscaleSettingsResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoscaleSettingsResource_Spec
	err := copied.AssignPropertiesToAutoscaleSettingsResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoscaleSettingsResource_Spec
	err = actual.AssignPropertiesFromAutoscaleSettingsResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoscaleSettingsResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResourceSpec, AutoscaleSettingsResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResourceSpec runs a test to see if a specific instance of AutoscaleSettingsResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResourceSpec(subject AutoscaleSettingsResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_Spec instances for property testing - lazily instantiated by
//AutoscaleSettingsResourceSpecGenerator()
var autoscaleSettingsResourceSpecGenerator gopter.Gen

// AutoscaleSettingsResourceSpecGenerator returns a generator of AutoscaleSettingsResource_Spec instances for property testing.
// We first initialize autoscaleSettingsResourceSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResourceSpecGenerator() gopter.Gen {
	if autoscaleSettingsResourceSpecGenerator != nil {
		return autoscaleSettingsResourceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSpec(generators)
	autoscaleSettingsResourceSpecGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSpec(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceSpec(generators)
	autoscaleSettingsResourceSpecGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Spec{}), generators)

	return autoscaleSettingsResourceSpecGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceSpec(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.Int()
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceSpec(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResourceSpecGenerator())
}

func Test_AutoscaleSettingsResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoscaleSettingsResource_Status to AutoscaleSettingsResource_Status via AssignPropertiesToAutoscaleSettingsResourceStatus & AssignPropertiesFromAutoscaleSettingsResourceStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoscaleSettingsResourceStatus, AutoscaleSettingsResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoscaleSettingsResourceStatus tests if a specific instance of AutoscaleSettingsResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoscaleSettingsResourceStatus(subject AutoscaleSettingsResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoscaleSettingsResource_Status
	err := copied.AssignPropertiesToAutoscaleSettingsResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoscaleSettingsResource_Status
	err = actual.AssignPropertiesFromAutoscaleSettingsResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoscaleSettingsResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResourceStatus, AutoscaleSettingsResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResourceStatus runs a test to see if a specific instance of AutoscaleSettingsResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResourceStatus(subject AutoscaleSettingsResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_Status instances for property testing - lazily instantiated by
//AutoscaleSettingsResourceStatusGenerator()
var autoscaleSettingsResourceStatusGenerator gopter.Gen

// AutoscaleSettingsResourceStatusGenerator returns a generator of AutoscaleSettingsResource_Status instances for property testing.
// We first initialize autoscaleSettingsResourceStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResourceStatusGenerator() gopter.Gen {
	if autoscaleSettingsResourceStatusGenerator != nil {
		return autoscaleSettingsResourceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceStatus(generators)
	autoscaleSettingsResourceStatusGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceStatus(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceStatus(generators)
	autoscaleSettingsResourceStatusGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Status{}), generators)

	return autoscaleSettingsResourceStatusGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResourceStatus(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.Int()
	gens["TargetMaxThroughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResourceStatus(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResourceStatusGenerator())
}

func Test_AutoUpgradePolicyResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoUpgradePolicyResource_Spec to AutoUpgradePolicyResource_Spec via AssignPropertiesToAutoUpgradePolicyResourceSpec & AssignPropertiesFromAutoUpgradePolicyResourceSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoUpgradePolicyResourceSpec, AutoUpgradePolicyResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoUpgradePolicyResourceSpec tests if a specific instance of AutoUpgradePolicyResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoUpgradePolicyResourceSpec(subject AutoUpgradePolicyResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoUpgradePolicyResource_Spec
	err := copied.AssignPropertiesToAutoUpgradePolicyResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoUpgradePolicyResource_Spec
	err = actual.AssignPropertiesFromAutoUpgradePolicyResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoUpgradePolicyResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResourceSpec, AutoUpgradePolicyResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResourceSpec runs a test to see if a specific instance of AutoUpgradePolicyResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResourceSpec(subject AutoUpgradePolicyResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_Spec instances for property testing - lazily instantiated by
//AutoUpgradePolicyResourceSpecGenerator()
var autoUpgradePolicyResourceSpecGenerator gopter.Gen

// AutoUpgradePolicyResourceSpecGenerator returns a generator of AutoUpgradePolicyResource_Spec instances for property testing.
func AutoUpgradePolicyResourceSpecGenerator() gopter.Gen {
	if autoUpgradePolicyResourceSpecGenerator != nil {
		return autoUpgradePolicyResourceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceSpec(generators)
	autoUpgradePolicyResourceSpecGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_Spec{}), generators)

	return autoUpgradePolicyResourceSpecGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceSpec(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResourceSpecGenerator())
}

func Test_AutoUpgradePolicyResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoUpgradePolicyResource_Status to AutoUpgradePolicyResource_Status via AssignPropertiesToAutoUpgradePolicyResourceStatus & AssignPropertiesFromAutoUpgradePolicyResourceStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoUpgradePolicyResourceStatus, AutoUpgradePolicyResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoUpgradePolicyResourceStatus tests if a specific instance of AutoUpgradePolicyResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoUpgradePolicyResourceStatus(subject AutoUpgradePolicyResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoUpgradePolicyResource_Status
	err := copied.AssignPropertiesToAutoUpgradePolicyResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoUpgradePolicyResource_Status
	err = actual.AssignPropertiesFromAutoUpgradePolicyResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoUpgradePolicyResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResourceStatus, AutoUpgradePolicyResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResourceStatus runs a test to see if a specific instance of AutoUpgradePolicyResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResourceStatus(subject AutoUpgradePolicyResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_Status instances for property testing - lazily instantiated by
//AutoUpgradePolicyResourceStatusGenerator()
var autoUpgradePolicyResourceStatusGenerator gopter.Gen

// AutoUpgradePolicyResourceStatusGenerator returns a generator of AutoUpgradePolicyResource_Status instances for property testing.
func AutoUpgradePolicyResourceStatusGenerator() gopter.Gen {
	if autoUpgradePolicyResourceStatusGenerator != nil {
		return autoUpgradePolicyResourceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceStatus(generators)
	autoUpgradePolicyResourceStatusGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_Status{}), generators)

	return autoUpgradePolicyResourceStatusGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResourceStatus(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResourceStatusGenerator())
}

func Test_ThroughputPolicyResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputPolicyResource_Spec to ThroughputPolicyResource_Spec via AssignPropertiesToThroughputPolicyResourceSpec & AssignPropertiesFromThroughputPolicyResourceSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputPolicyResourceSpec, ThroughputPolicyResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputPolicyResourceSpec tests if a specific instance of ThroughputPolicyResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputPolicyResourceSpec(subject ThroughputPolicyResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputPolicyResource_Spec
	err := copied.AssignPropertiesToThroughputPolicyResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputPolicyResource_Spec
	err = actual.AssignPropertiesFromThroughputPolicyResourceSpec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputPolicyResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResourceSpec, ThroughputPolicyResourceSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResourceSpec runs a test to see if a specific instance of ThroughputPolicyResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResourceSpec(subject ThroughputPolicyResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_Spec instances for property testing - lazily instantiated by
//ThroughputPolicyResourceSpecGenerator()
var throughputPolicyResourceSpecGenerator gopter.Gen

// ThroughputPolicyResourceSpecGenerator returns a generator of ThroughputPolicyResource_Spec instances for property testing.
func ThroughputPolicyResourceSpecGenerator() gopter.Gen {
	if throughputPolicyResourceSpecGenerator != nil {
		return throughputPolicyResourceSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResourceSpec(generators)
	throughputPolicyResourceSpecGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_Spec{}), generators)

	return throughputPolicyResourceSpecGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResourceSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResourceSpec(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_ThroughputPolicyResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputPolicyResource_Status to ThroughputPolicyResource_Status via AssignPropertiesToThroughputPolicyResourceStatus & AssignPropertiesFromThroughputPolicyResourceStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputPolicyResourceStatus, ThroughputPolicyResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputPolicyResourceStatus tests if a specific instance of ThroughputPolicyResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputPolicyResourceStatus(subject ThroughputPolicyResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputPolicyResource_Status
	err := copied.AssignPropertiesToThroughputPolicyResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputPolicyResource_Status
	err = actual.AssignPropertiesFromThroughputPolicyResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputPolicyResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResourceStatus, ThroughputPolicyResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResourceStatus runs a test to see if a specific instance of ThroughputPolicyResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResourceStatus(subject ThroughputPolicyResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_Status instances for property testing - lazily instantiated by
//ThroughputPolicyResourceStatusGenerator()
var throughputPolicyResourceStatusGenerator gopter.Gen

// ThroughputPolicyResourceStatusGenerator returns a generator of ThroughputPolicyResource_Status instances for property testing.
func ThroughputPolicyResourceStatusGenerator() gopter.Gen {
	if throughputPolicyResourceStatusGenerator != nil {
		return throughputPolicyResourceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResourceStatus(generators)
	throughputPolicyResourceStatusGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_Status{}), generators)

	return throughputPolicyResourceStatusGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResourceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResourceStatus(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
