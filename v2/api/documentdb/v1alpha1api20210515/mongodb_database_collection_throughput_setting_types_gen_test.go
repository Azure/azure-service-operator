// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongodbDatabaseCollectionThroughputSetting_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollectionThroughputSetting to hub returns original",
		prop.ForAll(RunResourceConversionTestForMongodbDatabaseCollectionThroughputSetting, MongodbDatabaseCollectionThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForMongodbDatabaseCollectionThroughputSetting tests if a specific instance of MongodbDatabaseCollectionThroughputSetting round trips to the hub storage version and back losslessly
func RunResourceConversionTestForMongodbDatabaseCollectionThroughputSetting(subject MongodbDatabaseCollectionThroughputSetting) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual MongodbDatabaseCollectionThroughputSetting
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollectionThroughputSetting_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MongodbDatabaseCollectionThroughputSetting to MongodbDatabaseCollectionThroughputSetting via AssignPropertiesToMongodbDatabaseCollectionThroughputSetting & AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting returns original",
		prop.ForAll(RunPropertyAssignmentTestForMongodbDatabaseCollectionThroughputSetting, MongodbDatabaseCollectionThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMongodbDatabaseCollectionThroughputSetting tests if a specific instance of MongodbDatabaseCollectionThroughputSetting can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForMongodbDatabaseCollectionThroughputSetting(subject MongodbDatabaseCollectionThroughputSetting) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting
	err := copied.AssignPropertiesToMongodbDatabaseCollectionThroughputSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MongodbDatabaseCollectionThroughputSetting
	err = actual.AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MongodbDatabaseCollectionThroughputSetting_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbDatabaseCollectionThroughputSetting via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbDatabaseCollectionThroughputSetting, MongodbDatabaseCollectionThroughputSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbDatabaseCollectionThroughputSetting runs a test to see if a specific instance of MongodbDatabaseCollectionThroughputSetting round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbDatabaseCollectionThroughputSetting(subject MongodbDatabaseCollectionThroughputSetting) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbDatabaseCollectionThroughputSetting
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbDatabaseCollectionThroughputSetting instances for property testing - lazily instantiated by
//MongodbDatabaseCollectionThroughputSettingGenerator()
var mongodbDatabaseCollectionThroughputSettingGenerator gopter.Gen

// MongodbDatabaseCollectionThroughputSettingGenerator returns a generator of MongodbDatabaseCollectionThroughputSetting instances for property testing.
func MongodbDatabaseCollectionThroughputSettingGenerator() gopter.Gen {
	if mongodbDatabaseCollectionThroughputSettingGenerator != nil {
		return mongodbDatabaseCollectionThroughputSettingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongodbDatabaseCollectionThroughputSetting(generators)
	mongodbDatabaseCollectionThroughputSettingGenerator = gen.Struct(reflect.TypeOf(MongodbDatabaseCollectionThroughputSetting{}), generators)

	return mongodbDatabaseCollectionThroughputSettingGenerator
}

// AddRelatedPropertyGeneratorsForMongodbDatabaseCollectionThroughputSetting is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbDatabaseCollectionThroughputSetting(gens map[string]gopter.Gen) {
	gens["Spec"] = DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECGenerator()
	gens["Status"] = ThroughputSettingsUpdateParameters_StatusGenerator()
}

func Test_DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC to DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC via AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC & AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC, DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC tests if a specific instance of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(subject DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC
	err := copied.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC
	err = actual.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC, DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC runs a test to see if a specific instance of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(subject DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC instances for property testing -
//lazily instantiated by DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECGenerator()
var databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECGenerator returns a generator of DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPECGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator != nil {
		return databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(generators)
	databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(generators)
	databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC{}), generators)

	return databaseAccountsMongodbDatabasesCollectionsThroughputSettings_specGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SPEC(gens map[string]gopter.Gen) {
	gens["Resource"] = ThroughputSettingsResource_SpecGenerator()
}

func Test_ThroughputSettingsUpdateParameters_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputSettingsUpdateParameters_Status to ThroughputSettingsUpdateParameters_Status via AssignPropertiesToThroughputSettingsUpdateParameters_Status & AssignPropertiesFromThroughputSettingsUpdateParameters_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputSettingsUpdateParameters_Status, ThroughputSettingsUpdateParameters_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputSettingsUpdateParameters_Status tests if a specific instance of ThroughputSettingsUpdateParameters_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputSettingsUpdateParameters_Status(subject ThroughputSettingsUpdateParameters_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputSettingsUpdateParameters_Status
	err := copied.AssignPropertiesToThroughputSettingsUpdateParameters_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputSettingsUpdateParameters_Status
	err = actual.AssignPropertiesFromThroughputSettingsUpdateParameters_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputSettingsUpdateParameters_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsUpdateParameters_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsUpdateParameters_Status, ThroughputSettingsUpdateParameters_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsUpdateParameters_Status runs a test to see if a specific instance of ThroughputSettingsUpdateParameters_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsUpdateParameters_Status(subject ThroughputSettingsUpdateParameters_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsUpdateParameters_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsUpdateParameters_Status instances for property testing - lazily instantiated by
//ThroughputSettingsUpdateParameters_StatusGenerator()
var throughputSettingsUpdateParameters_statusGenerator gopter.Gen

// ThroughputSettingsUpdateParameters_StatusGenerator returns a generator of ThroughputSettingsUpdateParameters_Status instances for property testing.
// We first initialize throughputSettingsUpdateParameters_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsUpdateParameters_StatusGenerator() gopter.Gen {
	if throughputSettingsUpdateParameters_statusGenerator != nil {
		return throughputSettingsUpdateParameters_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_Status(generators)
	throughputSettingsUpdateParameters_statusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateParameters_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_Status(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParameters_Status(generators)
	throughputSettingsUpdateParameters_statusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsUpdateParameters_Status{}), generators)

	return throughputSettingsUpdateParameters_statusGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsUpdateParameters_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParameters_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsUpdateParameters_Status(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(ThroughputSettingsResource_StatusGenerator())
}

func Test_ThroughputSettingsResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputSettingsResource_Spec to ThroughputSettingsResource_Spec via AssignPropertiesToThroughputSettingsResource_Spec & AssignPropertiesFromThroughputSettingsResource_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputSettingsResource_Spec, ThroughputSettingsResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputSettingsResource_Spec tests if a specific instance of ThroughputSettingsResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputSettingsResource_Spec(subject ThroughputSettingsResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputSettingsResource_Spec
	err := copied.AssignPropertiesToThroughputSettingsResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputSettingsResource_Spec
	err = actual.AssignPropertiesFromThroughputSettingsResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputSettingsResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResource_Spec, ThroughputSettingsResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResource_Spec runs a test to see if a specific instance of ThroughputSettingsResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResource_Spec(subject ThroughputSettingsResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_Spec instances for property testing - lazily instantiated by
//ThroughputSettingsResource_SpecGenerator()
var throughputSettingsResource_specGenerator gopter.Gen

// ThroughputSettingsResource_SpecGenerator returns a generator of ThroughputSettingsResource_Spec instances for property testing.
// We first initialize throughputSettingsResource_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResource_SpecGenerator() gopter.Gen {
	if throughputSettingsResource_specGenerator != nil {
		return throughputSettingsResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_Spec(generators)
	throughputSettingsResource_specGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_Spec(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResource_Spec(generators)
	throughputSettingsResource_specGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Spec{}), generators)

	return throughputSettingsResource_specGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResource_Spec(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResource_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResource_Spec(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResource_SpecGenerator())
}

func Test_ThroughputSettingsResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputSettingsResource_Status to ThroughputSettingsResource_Status via AssignPropertiesToThroughputSettingsResource_Status & AssignPropertiesFromThroughputSettingsResource_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputSettingsResource_Status, ThroughputSettingsResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputSettingsResource_Status tests if a specific instance of ThroughputSettingsResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputSettingsResource_Status(subject ThroughputSettingsResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputSettingsResource_Status
	err := copied.AssignPropertiesToThroughputSettingsResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputSettingsResource_Status
	err = actual.AssignPropertiesFromThroughputSettingsResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputSettingsResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputSettingsResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputSettingsResource_Status, ThroughputSettingsResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputSettingsResource_Status runs a test to see if a specific instance of ThroughputSettingsResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputSettingsResource_Status(subject ThroughputSettingsResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputSettingsResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputSettingsResource_Status instances for property testing - lazily instantiated by
//ThroughputSettingsResource_StatusGenerator()
var throughputSettingsResource_statusGenerator gopter.Gen

// ThroughputSettingsResource_StatusGenerator returns a generator of ThroughputSettingsResource_Status instances for property testing.
// We first initialize throughputSettingsResource_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ThroughputSettingsResource_StatusGenerator() gopter.Gen {
	if throughputSettingsResource_statusGenerator != nil {
		return throughputSettingsResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_Status(generators)
	throughputSettingsResource_statusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputSettingsResource_Status(generators)
	AddRelatedPropertyGeneratorsForThroughputSettingsResource_Status(generators)
	throughputSettingsResource_statusGenerator = gen.Struct(reflect.TypeOf(ThroughputSettingsResource_Status{}), generators)

	return throughputSettingsResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForThroughputSettingsResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputSettingsResource_Status(gens map[string]gopter.Gen) {
	gens["MinimumThroughput"] = gen.PtrOf(gen.AlphaString())
	gens["OfferReplacePending"] = gen.PtrOf(gen.AlphaString())
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForThroughputSettingsResource_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForThroughputSettingsResource_Status(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettingsResource_StatusGenerator())
}

func Test_AutoscaleSettingsResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoscaleSettingsResource_Spec to AutoscaleSettingsResource_Spec via AssignPropertiesToAutoscaleSettingsResource_Spec & AssignPropertiesFromAutoscaleSettingsResource_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoscaleSettingsResource_Spec, AutoscaleSettingsResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoscaleSettingsResource_Spec tests if a specific instance of AutoscaleSettingsResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoscaleSettingsResource_Spec(subject AutoscaleSettingsResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoscaleSettingsResource_Spec
	err := copied.AssignPropertiesToAutoscaleSettingsResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoscaleSettingsResource_Spec
	err = actual.AssignPropertiesFromAutoscaleSettingsResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoscaleSettingsResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResource_Spec, AutoscaleSettingsResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResource_Spec runs a test to see if a specific instance of AutoscaleSettingsResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResource_Spec(subject AutoscaleSettingsResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_Spec instances for property testing - lazily instantiated by
//AutoscaleSettingsResource_SpecGenerator()
var autoscaleSettingsResource_specGenerator gopter.Gen

// AutoscaleSettingsResource_SpecGenerator returns a generator of AutoscaleSettingsResource_Spec instances for property testing.
// We first initialize autoscaleSettingsResource_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResource_SpecGenerator() gopter.Gen {
	if autoscaleSettingsResource_specGenerator != nil {
		return autoscaleSettingsResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Spec(generators)
	autoscaleSettingsResource_specGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Spec(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_Spec(generators)
	autoscaleSettingsResource_specGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Spec{}), generators)

	return autoscaleSettingsResource_specGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Spec(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.Int()
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_Spec(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResource_SpecGenerator())
}

func Test_AutoscaleSettingsResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoscaleSettingsResource_Status to AutoscaleSettingsResource_Status via AssignPropertiesToAutoscaleSettingsResource_Status & AssignPropertiesFromAutoscaleSettingsResource_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoscaleSettingsResource_Status, AutoscaleSettingsResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoscaleSettingsResource_Status tests if a specific instance of AutoscaleSettingsResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoscaleSettingsResource_Status(subject AutoscaleSettingsResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoscaleSettingsResource_Status
	err := copied.AssignPropertiesToAutoscaleSettingsResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoscaleSettingsResource_Status
	err = actual.AssignPropertiesFromAutoscaleSettingsResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoscaleSettingsResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettingsResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettingsResource_Status, AutoscaleSettingsResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettingsResource_Status runs a test to see if a specific instance of AutoscaleSettingsResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettingsResource_Status(subject AutoscaleSettingsResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettingsResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettingsResource_Status instances for property testing - lazily instantiated by
//AutoscaleSettingsResource_StatusGenerator()
var autoscaleSettingsResource_statusGenerator gopter.Gen

// AutoscaleSettingsResource_StatusGenerator returns a generator of AutoscaleSettingsResource_Status instances for property testing.
// We first initialize autoscaleSettingsResource_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoscaleSettingsResource_StatusGenerator() gopter.Gen {
	if autoscaleSettingsResource_statusGenerator != nil {
		return autoscaleSettingsResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Status(generators)
	autoscaleSettingsResource_statusGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Status(generators)
	AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_Status(generators)
	autoscaleSettingsResource_statusGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettingsResource_Status{}), generators)

	return autoscaleSettingsResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettingsResource_Status(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.Int()
	gens["TargetMaxThroughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoscaleSettingsResource_Status(gens map[string]gopter.Gen) {
	gens["AutoUpgradePolicy"] = gen.PtrOf(AutoUpgradePolicyResource_StatusGenerator())
}

func Test_AutoUpgradePolicyResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoUpgradePolicyResource_Spec to AutoUpgradePolicyResource_Spec via AssignPropertiesToAutoUpgradePolicyResource_Spec & AssignPropertiesFromAutoUpgradePolicyResource_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoUpgradePolicyResource_Spec, AutoUpgradePolicyResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoUpgradePolicyResource_Spec tests if a specific instance of AutoUpgradePolicyResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoUpgradePolicyResource_Spec(subject AutoUpgradePolicyResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoUpgradePolicyResource_Spec
	err := copied.AssignPropertiesToAutoUpgradePolicyResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoUpgradePolicyResource_Spec
	err = actual.AssignPropertiesFromAutoUpgradePolicyResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoUpgradePolicyResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResource_Spec, AutoUpgradePolicyResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResource_Spec runs a test to see if a specific instance of AutoUpgradePolicyResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResource_Spec(subject AutoUpgradePolicyResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_Spec instances for property testing - lazily instantiated by
//AutoUpgradePolicyResource_SpecGenerator()
var autoUpgradePolicyResource_specGenerator gopter.Gen

// AutoUpgradePolicyResource_SpecGenerator returns a generator of AutoUpgradePolicyResource_Spec instances for property testing.
func AutoUpgradePolicyResource_SpecGenerator() gopter.Gen {
	if autoUpgradePolicyResource_specGenerator != nil {
		return autoUpgradePolicyResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_Spec(generators)
	autoUpgradePolicyResource_specGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_Spec{}), generators)

	return autoUpgradePolicyResource_specGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_Spec(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResource_SpecGenerator())
}

func Test_AutoUpgradePolicyResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoUpgradePolicyResource_Status to AutoUpgradePolicyResource_Status via AssignPropertiesToAutoUpgradePolicyResource_Status & AssignPropertiesFromAutoUpgradePolicyResource_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoUpgradePolicyResource_Status, AutoUpgradePolicyResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoUpgradePolicyResource_Status tests if a specific instance of AutoUpgradePolicyResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForAutoUpgradePolicyResource_Status(subject AutoUpgradePolicyResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.AutoUpgradePolicyResource_Status
	err := copied.AssignPropertiesToAutoUpgradePolicyResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoUpgradePolicyResource_Status
	err = actual.AssignPropertiesFromAutoUpgradePolicyResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoUpgradePolicyResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoUpgradePolicyResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoUpgradePolicyResource_Status, AutoUpgradePolicyResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoUpgradePolicyResource_Status runs a test to see if a specific instance of AutoUpgradePolicyResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoUpgradePolicyResource_Status(subject AutoUpgradePolicyResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoUpgradePolicyResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoUpgradePolicyResource_Status instances for property testing - lazily instantiated by
//AutoUpgradePolicyResource_StatusGenerator()
var autoUpgradePolicyResource_statusGenerator gopter.Gen

// AutoUpgradePolicyResource_StatusGenerator returns a generator of AutoUpgradePolicyResource_Status instances for property testing.
func AutoUpgradePolicyResource_StatusGenerator() gopter.Gen {
	if autoUpgradePolicyResource_statusGenerator != nil {
		return autoUpgradePolicyResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_Status(generators)
	autoUpgradePolicyResource_statusGenerator = gen.Struct(reflect.TypeOf(AutoUpgradePolicyResource_Status{}), generators)

	return autoUpgradePolicyResource_statusGenerator
}

// AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoUpgradePolicyResource_Status(gens map[string]gopter.Gen) {
	gens["ThroughputPolicy"] = gen.PtrOf(ThroughputPolicyResource_StatusGenerator())
}

func Test_ThroughputPolicyResource_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputPolicyResource_Spec to ThroughputPolicyResource_Spec via AssignPropertiesToThroughputPolicyResource_Spec & AssignPropertiesFromThroughputPolicyResource_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputPolicyResource_Spec, ThroughputPolicyResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputPolicyResource_Spec tests if a specific instance of ThroughputPolicyResource_Spec can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputPolicyResource_Spec(subject ThroughputPolicyResource_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputPolicyResource_Spec
	err := copied.AssignPropertiesToThroughputPolicyResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputPolicyResource_Spec
	err = actual.AssignPropertiesFromThroughputPolicyResource_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputPolicyResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResource_Spec, ThroughputPolicyResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResource_Spec runs a test to see if a specific instance of ThroughputPolicyResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResource_Spec(subject ThroughputPolicyResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_Spec instances for property testing - lazily instantiated by
//ThroughputPolicyResource_SpecGenerator()
var throughputPolicyResource_specGenerator gopter.Gen

// ThroughputPolicyResource_SpecGenerator returns a generator of ThroughputPolicyResource_Spec instances for property testing.
func ThroughputPolicyResource_SpecGenerator() gopter.Gen {
	if throughputPolicyResource_specGenerator != nil {
		return throughputPolicyResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResource_Spec(generators)
	throughputPolicyResource_specGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_Spec{}), generators)

	return throughputPolicyResource_specGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResource_Spec(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_ThroughputPolicyResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ThroughputPolicyResource_Status to ThroughputPolicyResource_Status via AssignPropertiesToThroughputPolicyResource_Status & AssignPropertiesFromThroughputPolicyResource_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForThroughputPolicyResource_Status, ThroughputPolicyResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForThroughputPolicyResource_Status tests if a specific instance of ThroughputPolicyResource_Status can be assigned to v1alpha1api20210515storage and back losslessly
func RunPropertyAssignmentTestForThroughputPolicyResource_Status(subject ThroughputPolicyResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210515storage.ThroughputPolicyResource_Status
	err := copied.AssignPropertiesToThroughputPolicyResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ThroughputPolicyResource_Status
	err = actual.AssignPropertiesFromThroughputPolicyResource_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ThroughputPolicyResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ThroughputPolicyResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForThroughputPolicyResource_Status, ThroughputPolicyResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForThroughputPolicyResource_Status runs a test to see if a specific instance of ThroughputPolicyResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForThroughputPolicyResource_Status(subject ThroughputPolicyResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ThroughputPolicyResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ThroughputPolicyResource_Status instances for property testing - lazily instantiated by
//ThroughputPolicyResource_StatusGenerator()
var throughputPolicyResource_statusGenerator gopter.Gen

// ThroughputPolicyResource_StatusGenerator returns a generator of ThroughputPolicyResource_Status instances for property testing.
func ThroughputPolicyResource_StatusGenerator() gopter.Gen {
	if throughputPolicyResource_statusGenerator != nil {
		return throughputPolicyResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForThroughputPolicyResource_Status(generators)
	throughputPolicyResource_statusGenerator = gen.Struct(reflect.TypeOf(ThroughputPolicyResource_Status{}), generators)

	return throughputPolicyResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForThroughputPolicyResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForThroughputPolicyResource_Status(gens map[string]gopter.Gen) {
	gens["IncrementPercent"] = gen.PtrOf(gen.Int())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
