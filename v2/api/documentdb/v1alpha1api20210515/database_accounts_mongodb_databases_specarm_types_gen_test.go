// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsMongodbDatabases_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabases_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesSPECARM, DatabaseAccountsMongodbDatabasesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesSPECARM runs a test to see if a specific instance of DatabaseAccountsMongodbDatabases_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabasesSPECARM(subject DatabaseAccountsMongodbDatabases_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabases_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabases_SPECARM instances for property testing - lazily instantiated by
//DatabaseAccountsMongodbDatabasesSPECARMGenerator()
var databaseAccountsMongodbDatabasesSPECARMGenerator gopter.Gen

// DatabaseAccountsMongodbDatabasesSPECARMGenerator returns a generator of DatabaseAccountsMongodbDatabases_SPECARM instances for property testing.
// We first initialize databaseAccountsMongodbDatabasesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabasesSPECARMGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabasesSPECARMGenerator != nil {
		return databaseAccountsMongodbDatabasesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM(generators)
	databaseAccountsMongodbDatabasesSPECARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabases_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM(generators)
	databaseAccountsMongodbDatabasesSPECARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabases_SPECARM{}), generators)

	return databaseAccountsMongodbDatabasesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabasesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = MongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator()
}

func Test_MongoDBDatabaseCreateUpdateProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseCreateUpdateProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseCreateUpdatePropertiesSpecARM, MongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseCreateUpdatePropertiesSpecARM runs a test to see if a specific instance of MongoDBDatabaseCreateUpdateProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseCreateUpdatePropertiesSpecARM(subject MongoDBDatabaseCreateUpdateProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseCreateUpdateProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseCreateUpdateProperties_SpecARM instances for property testing - lazily instantiated by
//MongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator()
var mongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator gopter.Gen

// MongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator returns a generator of MongoDBDatabaseCreateUpdateProperties_SpecARM instances for property testing.
func MongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator() gopter.Gen {
	if mongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator != nil {
		return mongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdatePropertiesSpecARM(generators)
	mongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseCreateUpdateProperties_SpecARM{}), generators)

	return mongoDBDatabaseCreateUpdatePropertiesSpecARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdatePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseCreateUpdatePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptionsSpecARMGenerator())
	gens["Resource"] = MongoDBDatabaseResourceSpecARMGenerator()
}

func Test_MongoDBDatabaseResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResourceSpecARM, MongoDBDatabaseResourceSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResourceSpecARM runs a test to see if a specific instance of MongoDBDatabaseResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResourceSpecARM(subject MongoDBDatabaseResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_SpecARM instances for property testing - lazily instantiated by
//MongoDBDatabaseResourceSpecARMGenerator()
var mongoDBDatabaseResourceSpecARMGenerator gopter.Gen

// MongoDBDatabaseResourceSpecARMGenerator returns a generator of MongoDBDatabaseResource_SpecARM instances for property testing.
func MongoDBDatabaseResourceSpecARMGenerator() gopter.Gen {
	if mongoDBDatabaseResourceSpecARMGenerator != nil {
		return mongoDBDatabaseResourceSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResourceSpecARM(generators)
	mongoDBDatabaseResourceSpecARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_SpecARM{}), generators)

	return mongoDBDatabaseResourceSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResourceSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResourceSpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
