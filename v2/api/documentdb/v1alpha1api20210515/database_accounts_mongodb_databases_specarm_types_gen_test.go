// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccountsMongodbDatabases_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccountsMongodbDatabases_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccountsMongodbDatabases_SPECARM, DatabaseAccountsMongodbDatabases_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccountsMongodbDatabases_SPECARM runs a test to see if a specific instance of DatabaseAccountsMongodbDatabases_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccountsMongodbDatabases_SPECARM(subject DatabaseAccountsMongodbDatabases_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccountsMongodbDatabases_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccountsMongodbDatabases_SPECARM instances for property testing - lazily instantiated by
//DatabaseAccountsMongodbDatabases_SPECARMGenerator()
var databaseAccountsMongodbDatabases_specarmGenerator gopter.Gen

// DatabaseAccountsMongodbDatabases_SPECARMGenerator returns a generator of DatabaseAccountsMongodbDatabases_SPECARM instances for property testing.
// We first initialize databaseAccountsMongodbDatabases_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccountsMongodbDatabases_SPECARMGenerator() gopter.Gen {
	if databaseAccountsMongodbDatabases_specarmGenerator != nil {
		return databaseAccountsMongodbDatabases_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM(generators)
	databaseAccountsMongodbDatabases_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabases_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM(generators)
	databaseAccountsMongodbDatabases_specarmGenerator = gen.Struct(reflect.TypeOf(DatabaseAccountsMongodbDatabases_SPECARM{}), generators)

	return databaseAccountsMongodbDatabases_specarmGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccountsMongodbDatabases_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = MongoDBDatabaseProperties_SpecARMGenerator()
}

func Test_MongoDBDatabaseProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseProperties_SpecARM, MongoDBDatabaseProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseProperties_SpecARM runs a test to see if a specific instance of MongoDBDatabaseProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseProperties_SpecARM(subject MongoDBDatabaseProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseProperties_SpecARM instances for property testing - lazily instantiated by
//MongoDBDatabaseProperties_SpecARMGenerator()
var mongoDBDatabaseProperties_specARMGenerator gopter.Gen

// MongoDBDatabaseProperties_SpecARMGenerator returns a generator of MongoDBDatabaseProperties_SpecARM instances for property testing.
func MongoDBDatabaseProperties_SpecARMGenerator() gopter.Gen {
	if mongoDBDatabaseProperties_specARMGenerator != nil {
		return mongoDBDatabaseProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseProperties_SpecARM(generators)
	mongoDBDatabaseProperties_specARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseProperties_SpecARM{}), generators)

	return mongoDBDatabaseProperties_specARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_SpecARMGenerator())
	gens["Resource"] = MongoDBDatabaseResource_SpecARMGenerator()
}

func Test_MongoDBDatabaseResource_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseResource_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseResource_SpecARM, MongoDBDatabaseResource_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseResource_SpecARM runs a test to see if a specific instance of MongoDBDatabaseResource_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseResource_SpecARM(subject MongoDBDatabaseResource_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseResource_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseResource_SpecARM instances for property testing - lazily instantiated by
//MongoDBDatabaseResource_SpecARMGenerator()
var mongoDBDatabaseResource_specARMGenerator gopter.Gen

// MongoDBDatabaseResource_SpecARMGenerator returns a generator of MongoDBDatabaseResource_SpecARM instances for property testing.
func MongoDBDatabaseResource_SpecARMGenerator() gopter.Gen {
	if mongoDBDatabaseResource_specARMGenerator != nil {
		return mongoDBDatabaseResource_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_SpecARM(generators)
	mongoDBDatabaseResource_specARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseResource_SpecARM{}), generators)

	return mongoDBDatabaseResource_specARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseResource_SpecARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
}
