// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlUserDefinedFunction_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunction_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunction_StatusARM, SqlUserDefinedFunction_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunction_StatusARM runs a test to see if a specific instance of SqlUserDefinedFunction_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunction_StatusARM(subject SqlUserDefinedFunction_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunction_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunction_StatusARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunction_StatusARMGenerator()
var sqlUserDefinedFunction_statusARMGenerator gopter.Gen

// SqlUserDefinedFunction_StatusARMGenerator returns a generator of SqlUserDefinedFunction_StatusARM instances for property testing.
// We first initialize sqlUserDefinedFunction_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlUserDefinedFunction_StatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunction_statusARMGenerator != nil {
		return sqlUserDefinedFunction_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunction_StatusARM(generators)
	sqlUserDefinedFunction_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunction_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunction_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunction_StatusARM(generators)
	sqlUserDefinedFunction_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunction_StatusARM{}), generators)

	return sqlUserDefinedFunction_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunction_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunction_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunction_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunction_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlUserDefinedFunctionProperties_StatusARMGenerator())
}

func Test_SqlUserDefinedFunctionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionProperties_StatusARM, SqlUserDefinedFunctionProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionProperties_StatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionProperties_StatusARM(subject SqlUserDefinedFunctionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionProperties_StatusARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionProperties_StatusARMGenerator()
var sqlUserDefinedFunctionProperties_statusARMGenerator gopter.Gen

// SqlUserDefinedFunctionProperties_StatusARMGenerator returns a generator of SqlUserDefinedFunctionProperties_StatusARM instances for property testing.
func SqlUserDefinedFunctionProperties_StatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionProperties_statusARMGenerator != nil {
		return sqlUserDefinedFunctionProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionProperties_StatusARM(generators)
	sqlUserDefinedFunctionProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionProperties_StatusARM{}), generators)

	return sqlUserDefinedFunctionProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlUserDefinedFunctionProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = SqlUserDefinedFunctionResource_StatusARMGenerator()
}

func Test_SqlUserDefinedFunctionResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlUserDefinedFunctionResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlUserDefinedFunctionResource_StatusARM, SqlUserDefinedFunctionResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlUserDefinedFunctionResource_StatusARM runs a test to see if a specific instance of SqlUserDefinedFunctionResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlUserDefinedFunctionResource_StatusARM(subject SqlUserDefinedFunctionResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlUserDefinedFunctionResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlUserDefinedFunctionResource_StatusARM instances for property testing - lazily instantiated by
//SqlUserDefinedFunctionResource_StatusARMGenerator()
var sqlUserDefinedFunctionResource_statusARMGenerator gopter.Gen

// SqlUserDefinedFunctionResource_StatusARMGenerator returns a generator of SqlUserDefinedFunctionResource_StatusARM instances for property testing.
func SqlUserDefinedFunctionResource_StatusARMGenerator() gopter.Gen {
	if sqlUserDefinedFunctionResource_statusARMGenerator != nil {
		return sqlUserDefinedFunctionResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_StatusARM(generators)
	sqlUserDefinedFunctionResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SqlUserDefinedFunctionResource_StatusARM{}), generators)

	return sqlUserDefinedFunctionResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlUserDefinedFunctionResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
}
