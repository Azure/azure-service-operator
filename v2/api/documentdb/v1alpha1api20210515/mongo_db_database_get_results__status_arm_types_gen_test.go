// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBDatabaseGetResults_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetResults_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetResultsStatusARM, MongoDBDatabaseGetResultsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetResultsStatusARM runs a test to see if a specific instance of MongoDBDatabaseGetResults_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetResultsStatusARM(subject MongoDBDatabaseGetResults_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetResults_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetResults_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseGetResultsStatusARMGenerator()
var mongoDBDatabaseGetResultsStatusARMGenerator gopter.Gen

// MongoDBDatabaseGetResultsStatusARMGenerator returns a generator of MongoDBDatabaseGetResults_StatusARM instances for property testing.
// We first initialize mongoDBDatabaseGetResultsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabaseGetResultsStatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetResultsStatusARMGenerator != nil {
		return mongoDBDatabaseGetResultsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM(generators)
	mongoDBDatabaseGetResultsStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetResults_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM(generators)
	mongoDBDatabaseGetResultsStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetResults_StatusARM{}), generators)

	return mongoDBDatabaseGetResultsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseGetResultsStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseGetPropertiesStatusARMGenerator())
}

func Test_MongoDBDatabaseGetProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetPropertiesStatusARM, MongoDBDatabaseGetPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetPropertiesStatusARM runs a test to see if a specific instance of MongoDBDatabaseGetProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetPropertiesStatusARM(subject MongoDBDatabaseGetProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetProperties_StatusARM instances for property testing - lazily instantiated by
//MongoDBDatabaseGetPropertiesStatusARMGenerator()
var mongoDBDatabaseGetPropertiesStatusARMGenerator gopter.Gen

// MongoDBDatabaseGetPropertiesStatusARMGenerator returns a generator of MongoDBDatabaseGetProperties_StatusARM instances for property testing.
func MongoDBDatabaseGetPropertiesStatusARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetPropertiesStatusARMGenerator != nil {
		return mongoDBDatabaseGetPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseGetPropertiesStatusARM(generators)
	mongoDBDatabaseGetPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_StatusARM{}), generators)

	return mongoDBDatabaseGetPropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseGetPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseGetPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResourceStatusARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseGetPropertiesStatusResourceARMGenerator())
}

func Test_MongoDBDatabaseGetProperties_Status_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetProperties_Status_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetPropertiesStatusResourceARM, MongoDBDatabaseGetPropertiesStatusResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetPropertiesStatusResourceARM runs a test to see if a specific instance of MongoDBDatabaseGetProperties_Status_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetPropertiesStatusResourceARM(subject MongoDBDatabaseGetProperties_Status_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetProperties_Status_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetProperties_Status_ResourceARM instances for property testing - lazily instantiated by
//MongoDBDatabaseGetPropertiesStatusResourceARMGenerator()
var mongoDBDatabaseGetPropertiesStatusResourceARMGenerator gopter.Gen

// MongoDBDatabaseGetPropertiesStatusResourceARMGenerator returns a generator of MongoDBDatabaseGetProperties_Status_ResourceARM instances for property testing.
func MongoDBDatabaseGetPropertiesStatusResourceARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetPropertiesStatusResourceARMGenerator != nil {
		return mongoDBDatabaseGetPropertiesStatusResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetPropertiesStatusResourceARM(generators)
	mongoDBDatabaseGetPropertiesStatusResourceARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_Status_ResourceARM{}), generators)

	return mongoDBDatabaseGetPropertiesStatusResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseGetPropertiesStatusResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseGetPropertiesStatusResourceARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
