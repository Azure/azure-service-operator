// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlContainerGetResults_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlContainerGetResults_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlContainerGetResults_STATUSARM, SqlContainerGetResults_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlContainerGetResults_STATUSARM runs a test to see if a specific instance of SqlContainerGetResults_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlContainerGetResults_STATUSARM(subject SqlContainerGetResults_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlContainerGetResults_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlContainerGetResults_STATUSARM instances for property testing - lazily instantiated by
// SqlContainerGetResults_STATUSARMGenerator()
var sqlContainerGetResults_STATUSARMGenerator gopter.Gen

// SqlContainerGetResults_STATUSARMGenerator returns a generator of SqlContainerGetResults_STATUSARM instances for property testing.
// We first initialize sqlContainerGetResults_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlContainerGetResults_STATUSARMGenerator() gopter.Gen {
	if sqlContainerGetResults_STATUSARMGenerator != nil {
		return sqlContainerGetResults_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlContainerGetResults_STATUSARM(generators)
	sqlContainerGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlContainerGetResults_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlContainerGetResults_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSqlContainerGetResults_STATUSARM(generators)
	sqlContainerGetResults_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlContainerGetResults_STATUSARM{}), generators)

	return sqlContainerGetResults_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlContainerGetResults_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlContainerGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlContainerGetResults_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlContainerGetResults_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlContainerGetProperties_STATUSARMGenerator())
}

func Test_SqlContainerGetProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlContainerGetProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlContainerGetProperties_STATUSARM, SqlContainerGetProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlContainerGetProperties_STATUSARM runs a test to see if a specific instance of SqlContainerGetProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlContainerGetProperties_STATUSARM(subject SqlContainerGetProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlContainerGetProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlContainerGetProperties_STATUSARM instances for property testing - lazily instantiated by
// SqlContainerGetProperties_STATUSARMGenerator()
var sqlContainerGetProperties_STATUSARMGenerator gopter.Gen

// SqlContainerGetProperties_STATUSARMGenerator returns a generator of SqlContainerGetProperties_STATUSARM instances for property testing.
func SqlContainerGetProperties_STATUSARMGenerator() gopter.Gen {
	if sqlContainerGetProperties_STATUSARMGenerator != nil {
		return sqlContainerGetProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlContainerGetProperties_STATUSARM(generators)
	sqlContainerGetProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SqlContainerGetProperties_STATUSARM{}), generators)

	return sqlContainerGetProperties_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlContainerGetProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlContainerGetProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResource_STATUSARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlContainerGetProperties_STATUS_ResourceARMGenerator())
}

func Test_SqlContainerGetProperties_STATUS_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlContainerGetProperties_STATUS_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlContainerGetProperties_STATUS_ResourceARM, SqlContainerGetProperties_STATUS_ResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlContainerGetProperties_STATUS_ResourceARM runs a test to see if a specific instance of SqlContainerGetProperties_STATUS_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlContainerGetProperties_STATUS_ResourceARM(subject SqlContainerGetProperties_STATUS_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlContainerGetProperties_STATUS_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlContainerGetProperties_STATUS_ResourceARM instances for property testing - lazily instantiated by
// SqlContainerGetProperties_STATUS_ResourceARMGenerator()
var sqlContainerGetProperties_STATUS_ResourceARMGenerator gopter.Gen

// SqlContainerGetProperties_STATUS_ResourceARMGenerator returns a generator of SqlContainerGetProperties_STATUS_ResourceARM instances for property testing.
// We first initialize sqlContainerGetProperties_STATUS_ResourceARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlContainerGetProperties_STATUS_ResourceARMGenerator() gopter.Gen {
	if sqlContainerGetProperties_STATUS_ResourceARMGenerator != nil {
		return sqlContainerGetProperties_STATUS_ResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM(generators)
	sqlContainerGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlContainerGetProperties_STATUS_ResourceARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM(generators)
	AddRelatedPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM(generators)
	sqlContainerGetProperties_STATUS_ResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlContainerGetProperties_STATUS_ResourceARM{}), generators)

	return sqlContainerGetProperties_STATUS_ResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["DefaultTtl"] = gen.PtrOf(gen.Int())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlContainerGetProperties_STATUS_ResourceARM(gens map[string]gopter.Gen) {
	gens["ConflictResolutionPolicy"] = gen.PtrOf(ConflictResolutionPolicy_STATUSARMGenerator())
	gens["IndexingPolicy"] = gen.PtrOf(IndexingPolicy_STATUSARMGenerator())
	gens["PartitionKey"] = gen.PtrOf(ContainerPartitionKey_STATUSARMGenerator())
	gens["UniqueKeyPolicy"] = gen.PtrOf(UniqueKeyPolicy_STATUSARMGenerator())
}

func Test_ConflictResolutionPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConflictResolutionPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConflictResolutionPolicy_STATUSARM, ConflictResolutionPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConflictResolutionPolicy_STATUSARM runs a test to see if a specific instance of ConflictResolutionPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConflictResolutionPolicy_STATUSARM(subject ConflictResolutionPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConflictResolutionPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConflictResolutionPolicy_STATUSARM instances for property testing - lazily instantiated by
// ConflictResolutionPolicy_STATUSARMGenerator()
var conflictResolutionPolicy_STATUSARMGenerator gopter.Gen

// ConflictResolutionPolicy_STATUSARMGenerator returns a generator of ConflictResolutionPolicy_STATUSARM instances for property testing.
func ConflictResolutionPolicy_STATUSARMGenerator() gopter.Gen {
	if conflictResolutionPolicy_STATUSARMGenerator != nil {
		return conflictResolutionPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConflictResolutionPolicy_STATUSARM(generators)
	conflictResolutionPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ConflictResolutionPolicy_STATUSARM{}), generators)

	return conflictResolutionPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForConflictResolutionPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConflictResolutionPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["ConflictResolutionPath"] = gen.PtrOf(gen.AlphaString())
	gens["ConflictResolutionProcedure"] = gen.PtrOf(gen.AlphaString())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(ConflictResolutionPolicy_STATUS_Mode_Custom, ConflictResolutionPolicy_STATUS_Mode_LastWriterWins))
}

func Test_ContainerPartitionKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerPartitionKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPartitionKey_STATUSARM, ContainerPartitionKey_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPartitionKey_STATUSARM runs a test to see if a specific instance of ContainerPartitionKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPartitionKey_STATUSARM(subject ContainerPartitionKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerPartitionKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerPartitionKey_STATUSARM instances for property testing - lazily instantiated by
// ContainerPartitionKey_STATUSARMGenerator()
var containerPartitionKey_STATUSARMGenerator gopter.Gen

// ContainerPartitionKey_STATUSARMGenerator returns a generator of ContainerPartitionKey_STATUSARM instances for property testing.
func ContainerPartitionKey_STATUSARMGenerator() gopter.Gen {
	if containerPartitionKey_STATUSARMGenerator != nil {
		return containerPartitionKey_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPartitionKey_STATUSARM(generators)
	containerPartitionKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerPartitionKey_STATUSARM{}), generators)

	return containerPartitionKey_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPartitionKey_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPartitionKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(ContainerPartitionKey_STATUS_Kind_Hash, ContainerPartitionKey_STATUS_Kind_MultiHash, ContainerPartitionKey_STATUS_Kind_Range))
	gens["Paths"] = gen.SliceOf(gen.AlphaString())
	gens["SystemKey"] = gen.PtrOf(gen.Bool())
	gens["Version"] = gen.PtrOf(gen.Int())
}

func Test_IndexingPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IndexingPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIndexingPolicy_STATUSARM, IndexingPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIndexingPolicy_STATUSARM runs a test to see if a specific instance of IndexingPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIndexingPolicy_STATUSARM(subject IndexingPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IndexingPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IndexingPolicy_STATUSARM instances for property testing - lazily instantiated by
// IndexingPolicy_STATUSARMGenerator()
var indexingPolicy_STATUSARMGenerator gopter.Gen

// IndexingPolicy_STATUSARMGenerator returns a generator of IndexingPolicy_STATUSARM instances for property testing.
// We first initialize indexingPolicy_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IndexingPolicy_STATUSARMGenerator() gopter.Gen {
	if indexingPolicy_STATUSARMGenerator != nil {
		return indexingPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIndexingPolicy_STATUSARM(generators)
	indexingPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IndexingPolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIndexingPolicy_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIndexingPolicy_STATUSARM(generators)
	indexingPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IndexingPolicy_STATUSARM{}), generators)

	return indexingPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIndexingPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIndexingPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Automatic"] = gen.PtrOf(gen.Bool())
	gens["IndexingMode"] = gen.PtrOf(gen.OneConstOf(IndexingPolicy_STATUS_IndexingMode_Consistent, IndexingPolicy_STATUS_IndexingMode_Lazy, IndexingPolicy_STATUS_IndexingMode_None))
}

// AddRelatedPropertyGeneratorsForIndexingPolicy_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIndexingPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["CompositeIndexes"] = gen.SliceOf(gen.SliceOf(CompositePath_STATUSARMGenerator()))
	gens["ExcludedPaths"] = gen.SliceOf(ExcludedPath_STATUSARMGenerator())
	gens["IncludedPaths"] = gen.SliceOf(IncludedPath_STATUSARMGenerator())
	gens["SpatialIndexes"] = gen.SliceOf(SpatialSpec_STATUSARMGenerator())
}

func Test_UniqueKeyPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UniqueKeyPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUniqueKeyPolicy_STATUSARM, UniqueKeyPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUniqueKeyPolicy_STATUSARM runs a test to see if a specific instance of UniqueKeyPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUniqueKeyPolicy_STATUSARM(subject UniqueKeyPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UniqueKeyPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UniqueKeyPolicy_STATUSARM instances for property testing - lazily instantiated by
// UniqueKeyPolicy_STATUSARMGenerator()
var uniqueKeyPolicy_STATUSARMGenerator gopter.Gen

// UniqueKeyPolicy_STATUSARMGenerator returns a generator of UniqueKeyPolicy_STATUSARM instances for property testing.
func UniqueKeyPolicy_STATUSARMGenerator() gopter.Gen {
	if uniqueKeyPolicy_STATUSARMGenerator != nil {
		return uniqueKeyPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUniqueKeyPolicy_STATUSARM(generators)
	uniqueKeyPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UniqueKeyPolicy_STATUSARM{}), generators)

	return uniqueKeyPolicy_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForUniqueKeyPolicy_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUniqueKeyPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["UniqueKeys"] = gen.SliceOf(UniqueKey_STATUSARMGenerator())
}

func Test_CompositePath_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CompositePath_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCompositePath_STATUSARM, CompositePath_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCompositePath_STATUSARM runs a test to see if a specific instance of CompositePath_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCompositePath_STATUSARM(subject CompositePath_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CompositePath_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CompositePath_STATUSARM instances for property testing - lazily instantiated by
// CompositePath_STATUSARMGenerator()
var compositePath_STATUSARMGenerator gopter.Gen

// CompositePath_STATUSARMGenerator returns a generator of CompositePath_STATUSARM instances for property testing.
func CompositePath_STATUSARMGenerator() gopter.Gen {
	if compositePath_STATUSARMGenerator != nil {
		return compositePath_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCompositePath_STATUSARM(generators)
	compositePath_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CompositePath_STATUSARM{}), generators)

	return compositePath_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCompositePath_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCompositePath_STATUSARM(gens map[string]gopter.Gen) {
	gens["Order"] = gen.PtrOf(gen.OneConstOf(CompositePath_STATUS_Order_Ascending, CompositePath_STATUS_Order_Descending))
	gens["Path"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExcludedPath_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExcludedPath_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExcludedPath_STATUSARM, ExcludedPath_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExcludedPath_STATUSARM runs a test to see if a specific instance of ExcludedPath_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExcludedPath_STATUSARM(subject ExcludedPath_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExcludedPath_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExcludedPath_STATUSARM instances for property testing - lazily instantiated by
// ExcludedPath_STATUSARMGenerator()
var excludedPath_STATUSARMGenerator gopter.Gen

// ExcludedPath_STATUSARMGenerator returns a generator of ExcludedPath_STATUSARM instances for property testing.
func ExcludedPath_STATUSARMGenerator() gopter.Gen {
	if excludedPath_STATUSARMGenerator != nil {
		return excludedPath_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExcludedPath_STATUSARM(generators)
	excludedPath_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ExcludedPath_STATUSARM{}), generators)

	return excludedPath_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExcludedPath_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExcludedPath_STATUSARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
}

func Test_IncludedPath_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IncludedPath_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIncludedPath_STATUSARM, IncludedPath_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIncludedPath_STATUSARM runs a test to see if a specific instance of IncludedPath_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIncludedPath_STATUSARM(subject IncludedPath_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IncludedPath_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IncludedPath_STATUSARM instances for property testing - lazily instantiated by
// IncludedPath_STATUSARMGenerator()
var includedPath_STATUSARMGenerator gopter.Gen

// IncludedPath_STATUSARMGenerator returns a generator of IncludedPath_STATUSARM instances for property testing.
// We first initialize includedPath_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IncludedPath_STATUSARMGenerator() gopter.Gen {
	if includedPath_STATUSARMGenerator != nil {
		return includedPath_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIncludedPath_STATUSARM(generators)
	includedPath_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IncludedPath_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIncludedPath_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIncludedPath_STATUSARM(generators)
	includedPath_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IncludedPath_STATUSARM{}), generators)

	return includedPath_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIncludedPath_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIncludedPath_STATUSARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForIncludedPath_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIncludedPath_STATUSARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(Indexes_STATUSARMGenerator())
}

func Test_SpatialSpec_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SpatialSpec_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSpatialSpec_STATUSARM, SpatialSpec_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSpatialSpec_STATUSARM runs a test to see if a specific instance of SpatialSpec_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSpatialSpec_STATUSARM(subject SpatialSpec_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SpatialSpec_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SpatialSpec_STATUSARM instances for property testing - lazily instantiated by
// SpatialSpec_STATUSARMGenerator()
var spatialSpec_STATUSARMGenerator gopter.Gen

// SpatialSpec_STATUSARMGenerator returns a generator of SpatialSpec_STATUSARM instances for property testing.
func SpatialSpec_STATUSARMGenerator() gopter.Gen {
	if spatialSpec_STATUSARMGenerator != nil {
		return spatialSpec_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSpatialSpec_STATUSARM(generators)
	spatialSpec_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SpatialSpec_STATUSARM{}), generators)

	return spatialSpec_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSpatialSpec_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSpatialSpec_STATUSARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Types"] = gen.SliceOf(gen.OneConstOf(
		SpatialType_STATUS_LineString,
		SpatialType_STATUS_MultiPolygon,
		SpatialType_STATUS_Point,
		SpatialType_STATUS_Polygon))
}

func Test_UniqueKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UniqueKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUniqueKey_STATUSARM, UniqueKey_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUniqueKey_STATUSARM runs a test to see if a specific instance of UniqueKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUniqueKey_STATUSARM(subject UniqueKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UniqueKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UniqueKey_STATUSARM instances for property testing - lazily instantiated by
// UniqueKey_STATUSARMGenerator()
var uniqueKey_STATUSARMGenerator gopter.Gen

// UniqueKey_STATUSARMGenerator returns a generator of UniqueKey_STATUSARM instances for property testing.
func UniqueKey_STATUSARMGenerator() gopter.Gen {
	if uniqueKey_STATUSARMGenerator != nil {
		return uniqueKey_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUniqueKey_STATUSARM(generators)
	uniqueKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UniqueKey_STATUSARM{}), generators)

	return uniqueKey_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUniqueKey_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUniqueKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["Paths"] = gen.SliceOf(gen.AlphaString())
}

func Test_Indexes_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Indexes_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIndexes_STATUSARM, Indexes_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIndexes_STATUSARM runs a test to see if a specific instance of Indexes_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIndexes_STATUSARM(subject Indexes_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Indexes_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Indexes_STATUSARM instances for property testing - lazily instantiated by Indexes_STATUSARMGenerator()
var indexes_STATUSARMGenerator gopter.Gen

// Indexes_STATUSARMGenerator returns a generator of Indexes_STATUSARM instances for property testing.
func Indexes_STATUSARMGenerator() gopter.Gen {
	if indexes_STATUSARMGenerator != nil {
		return indexes_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIndexes_STATUSARM(generators)
	indexes_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Indexes_STATUSARM{}), generators)

	return indexes_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIndexes_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIndexes_STATUSARM(gens map[string]gopter.Gen) {
	gens["DataType"] = gen.PtrOf(gen.OneConstOf(
		Indexes_STATUS_DataType_LineString,
		Indexes_STATUS_DataType_MultiPolygon,
		Indexes_STATUS_DataType_Number,
		Indexes_STATUS_DataType_Point,
		Indexes_STATUS_DataType_Polygon,
		Indexes_STATUS_DataType_String))
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(Indexes_STATUS_Kind_Hash, Indexes_STATUS_Kind_Range, Indexes_STATUS_Kind_Spatial))
	gens["Precision"] = gen.PtrOf(gen.Int())
}
