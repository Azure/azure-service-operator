// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	alpha20210515s "github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of MongodbDatabaseCollectionThroughputSetting. Use v1beta20210515.MongodbDatabaseCollectionThroughputSetting instead
type MongodbDatabaseCollectionThroughputSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec `json:"spec,omitempty"`
	Status            ThroughputSettingsGetResults_STATUS                                  `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollectionThroughputSetting{}

// GetConditions returns the conditions of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetConditions() conditions.Conditions {
	return setting.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (setting *MongodbDatabaseCollectionThroughputSetting) SetConditions(conditions conditions.Conditions) {
	setting.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbDatabaseCollectionThroughputSetting{}

// ConvertFrom populates our MongodbDatabaseCollectionThroughputSetting from the provided hub MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210515s.MongodbDatabaseCollectionThroughputSetting

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = setting.AssignProperties_From_MongodbDatabaseCollectionThroughputSetting(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to setting")
	}

	return nil
}

// ConvertTo populates the provided hub MongodbDatabaseCollectionThroughputSetting from our MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210515s.MongodbDatabaseCollectionThroughputSetting
	err := setting.AssignProperties_To_MongodbDatabaseCollectionThroughputSetting(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from setting")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollectionthroughputsetting,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabasecollectionthroughputsettings.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &MongodbDatabaseCollectionThroughputSetting{}

// Default applies defaults to the MongodbDatabaseCollectionThroughputSetting resource
func (setting *MongodbDatabaseCollectionThroughputSetting) Default() {
	setting.defaultImpl()
	var temp interface{} = setting
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabaseCollectionThroughputSetting resource
func (setting *MongodbDatabaseCollectionThroughputSetting) defaultImpl() {}

var _ genruntime.KubernetesResource = &MongodbDatabaseCollectionThroughputSetting{}

// AzureName returns the Azure name of the resource (always "default")
func (setting *MongodbDatabaseCollectionThroughputSetting) AzureName() string {
	return "default"
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (setting MongodbDatabaseCollectionThroughputSetting) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetSpec() genruntime.ConvertibleSpec {
	return &setting.Spec
}

// GetStatus returns the status of this resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetStatus() genruntime.ConvertibleStatus {
	return &setting.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings"
func (setting *MongodbDatabaseCollectionThroughputSetting) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings"
}

// NewEmptyStatus returns a new empty (blank) status
func (setting *MongodbDatabaseCollectionThroughputSetting) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ThroughputSettingsGetResults_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (setting *MongodbDatabaseCollectionThroughputSetting) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(setting.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  setting.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (setting *MongodbDatabaseCollectionThroughputSetting) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ThroughputSettingsGetResults_STATUS); ok {
		setting.Status = *st
		return nil
	}

	// Convert status to required version
	var st ThroughputSettingsGetResults_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	setting.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollectionthroughputsetting,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabasecollectionthroughputsettings.documentdb.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &MongodbDatabaseCollectionThroughputSetting{}

// ValidateCreate validates the creation of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) ValidateCreate() error {
	validations := setting.createValidations()
	var temp interface{} = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) ValidateDelete() error {
	validations := setting.deleteValidations()
	var temp interface{} = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) ValidateUpdate(old runtime.Object) error {
	validations := setting.updateValidations()
	var temp interface{} = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) createValidations() []func() error {
	return []func() error{setting.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return setting.validateResourceReferences()
		},
		setting.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (setting *MongodbDatabaseCollectionThroughputSetting) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&setting.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (setting *MongodbDatabaseCollectionThroughputSetting) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*MongodbDatabaseCollectionThroughputSetting)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, setting)
}

// AssignProperties_From_MongodbDatabaseCollectionThroughputSetting populates our MongodbDatabaseCollectionThroughputSetting from the provided source MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) AssignProperties_From_MongodbDatabaseCollectionThroughputSetting(source *alpha20210515s.MongodbDatabaseCollectionThroughputSetting) error {

	// ObjectMeta
	setting.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec
	err := spec.AssignProperties_From_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec() to populate field Spec")
	}
	setting.Spec = spec

	// Status
	var status ThroughputSettingsGetResults_STATUS
	err = status.AssignProperties_From_ThroughputSettingsGetResults_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ThroughputSettingsGetResults_STATUS() to populate field Status")
	}
	setting.Status = status

	// No error
	return nil
}

// AssignProperties_To_MongodbDatabaseCollectionThroughputSetting populates the provided destination MongodbDatabaseCollectionThroughputSetting from our MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) AssignProperties_To_MongodbDatabaseCollectionThroughputSetting(destination *alpha20210515s.MongodbDatabaseCollectionThroughputSetting) error {

	// ObjectMeta
	destination.ObjectMeta = *setting.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec
	err := setting.Spec.AssignProperties_To_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210515s.ThroughputSettingsGetResults_STATUS
	err = setting.Status.AssignProperties_To_ThroughputSettingsGetResults_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ThroughputSettingsGetResults_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: setting.Spec.OriginalVersion(),
		Kind:    "MongodbDatabaseCollectionThroughputSetting",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of MongodbDatabaseCollectionThroughputSetting. Use v1beta20210515.MongodbDatabaseCollectionThroughputSetting instead
type MongodbDatabaseCollectionThroughputSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollectionThroughputSetting `json:"items"`
}

type DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec struct {
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a documentdb.azure.com/MongodbDatabaseCollection resource
	Owner *genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner,omitempty" kind:"MongodbDatabaseCollection"`

	// +kubebuilder:validation:Required
	Resource *ThroughputSettingsResource `json:"resource,omitempty"`
	Tags     map[string]string           `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if setting == nil {
		return nil, nil
	}
	result := &DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec_ARM{}

	// Set property ‘Location’:
	if setting.Location != nil {
		location := *setting.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if setting.Resource != nil {
		result.Properties = &ThroughputSettingsUpdateProperties_ARM{}
	}
	if setting.Resource != nil {
		resource_ARM, err := (*setting.Resource).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		resource := *resource_ARM.(*ThroughputSettingsResource_ARM)
		result.Properties.Resource = &resource
	}

	// Set property ‘Tags’:
	if setting.Tags != nil {
		result.Tags = make(map[string]string, len(setting.Tags))
		for key, value := range setting.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec_ARM, got %T", armInput)
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		setting.Location = &location
	}

	// Set property ‘Owner’:
	setting.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 ThroughputSettingsResource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			setting.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		setting.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			setting.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec{}

// ConvertSpecFrom populates our DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec from the provided source
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec)
	if ok {
		// Populate our instance from source
		return setting.AssignProperties_From_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = setting.AssignProperties_From_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec)
	if ok {
		// Populate destination from our instance
		return setting.AssignProperties_To_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec{}
	err := setting.AssignProperties_To_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec populates our DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec from the provided source DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) AssignProperties_From_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(source *alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) error {

	// Location
	setting.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		setting.Owner = &owner
	} else {
		setting.Owner = nil
	}

	// Resource
	if source.Resource != nil {
		var resource ThroughputSettingsResource
		err := resource.AssignProperties_From_ThroughputSettingsResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ThroughputSettingsResource() to populate field Resource")
		}
		setting.Resource = &resource
	} else {
		setting.Resource = nil
	}

	// Tags
	setting.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec populates the provided destination DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec from our DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) AssignProperties_To_DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec(destination *alpha20210515s.DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Location
	destination.Location = genruntime.ClonePointerToString(setting.Location)

	// OriginalVersion
	destination.OriginalVersion = setting.OriginalVersion()

	// Owner
	if setting.Owner != nil {
		owner := setting.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Resource
	if setting.Resource != nil {
		var resource alpha20210515s.ThroughputSettingsResource
		err := setting.Resource.AssignProperties_To_ThroughputSettingsResource(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ThroughputSettingsResource() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(setting.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (setting *DatabaseAccounts_MongodbDatabases_Collections_ThroughputSetting_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// Deprecated version of ThroughputSettingsGetResults_STATUS. Use v1beta20210515.ThroughputSettingsGetResults_STATUS instead
type ThroughputSettingsGetResults_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition                           `json:"conditions,omitempty"`
	Id         *string                                          `json:"id,omitempty"`
	Location   *string                                          `json:"location,omitempty"`
	Name       *string                                          `json:"name,omitempty"`
	Resource   *ThroughputSettingsGetProperties_Resource_STATUS `json:"resource,omitempty"`
	Tags       map[string]string                                `json:"tags,omitempty"`
	Type       *string                                          `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ThroughputSettingsGetResults_STATUS{}

// ConvertStatusFrom populates our ThroughputSettingsGetResults_STATUS from the provided source
func (results *ThroughputSettingsGetResults_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210515s.ThroughputSettingsGetResults_STATUS)
	if ok {
		// Populate our instance from source
		return results.AssignProperties_From_ThroughputSettingsGetResults_STATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210515s.ThroughputSettingsGetResults_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = results.AssignProperties_From_ThroughputSettingsGetResults_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ThroughputSettingsGetResults_STATUS
func (results *ThroughputSettingsGetResults_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210515s.ThroughputSettingsGetResults_STATUS)
	if ok {
		// Populate destination from our instance
		return results.AssignProperties_To_ThroughputSettingsGetResults_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210515s.ThroughputSettingsGetResults_STATUS{}
	err := results.AssignProperties_To_ThroughputSettingsGetResults_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ThroughputSettingsGetResults_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (results *ThroughputSettingsGetResults_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsGetResults_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (results *ThroughputSettingsGetResults_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsGetResults_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsGetResults_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		results.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		results.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		results.Name = &name
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 ThroughputSettingsGetProperties_Resource_STATUS
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			results.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		results.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			results.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		results.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ThroughputSettingsGetResults_STATUS populates our ThroughputSettingsGetResults_STATUS from the provided source ThroughputSettingsGetResults_STATUS
func (results *ThroughputSettingsGetResults_STATUS) AssignProperties_From_ThroughputSettingsGetResults_STATUS(source *alpha20210515s.ThroughputSettingsGetResults_STATUS) error {

	// Conditions
	results.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	results.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	results.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	results.Name = genruntime.ClonePointerToString(source.Name)

	// Resource
	if source.Resource != nil {
		var resource ThroughputSettingsGetProperties_Resource_STATUS
		err := resource.AssignProperties_From_ThroughputSettingsGetProperties_Resource_STATUS(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ThroughputSettingsGetProperties_Resource_STATUS() to populate field Resource")
		}
		results.Resource = &resource
	} else {
		results.Resource = nil
	}

	// Tags
	results.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	results.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_ThroughputSettingsGetResults_STATUS populates the provided destination ThroughputSettingsGetResults_STATUS from our ThroughputSettingsGetResults_STATUS
func (results *ThroughputSettingsGetResults_STATUS) AssignProperties_To_ThroughputSettingsGetResults_STATUS(destination *alpha20210515s.ThroughputSettingsGetResults_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(results.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(results.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(results.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(results.Name)

	// Resource
	if results.Resource != nil {
		var resource alpha20210515s.ThroughputSettingsGetProperties_Resource_STATUS
		err := results.Resource.AssignProperties_To_ThroughputSettingsGetProperties_Resource_STATUS(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ThroughputSettingsGetProperties_Resource_STATUS() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(results.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(results.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ThroughputSettingsGetProperties_Resource_STATUS. Use v1beta20210515.ThroughputSettingsGetProperties_Resource_STATUS instead
type ThroughputSettingsGetProperties_Resource_STATUS struct {
	AutoscaleSettings   *AutoscaleSettingsResource_STATUS `json:"autoscaleSettings,omitempty"`
	Etag                *string                           `json:"_etag,omitempty"`
	MinimumThroughput   *string                           `json:"minimumThroughput,omitempty"`
	OfferReplacePending *string                           `json:"offerReplacePending,omitempty"`
	Rid                 *string                           `json:"_rid,omitempty"`
	Throughput          *int                              `json:"throughput,omitempty"`
	Ts                  *float64                          `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &ThroughputSettingsGetProperties_Resource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputSettingsGetProperties_Resource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsGetProperties_Resource_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputSettingsGetProperties_Resource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsGetProperties_Resource_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsGetProperties_Resource_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettingsResource_STATUS
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		resource.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		resource.Etag = &etag
	}

	// Set property ‘MinimumThroughput’:
	if typedInput.MinimumThroughput != nil {
		minimumThroughput := *typedInput.MinimumThroughput
		resource.MinimumThroughput = &minimumThroughput
	}

	// Set property ‘OfferReplacePending’:
	if typedInput.OfferReplacePending != nil {
		offerReplacePending := *typedInput.OfferReplacePending
		resource.OfferReplacePending = &offerReplacePending
	}

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		resource.Rid = &rid
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		resource.Throughput = &throughput
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		resource.Ts = &ts
	}

	// No error
	return nil
}

// AssignProperties_From_ThroughputSettingsGetProperties_Resource_STATUS populates our ThroughputSettingsGetProperties_Resource_STATUS from the provided source ThroughputSettingsGetProperties_Resource_STATUS
func (resource *ThroughputSettingsGetProperties_Resource_STATUS) AssignProperties_From_ThroughputSettingsGetProperties_Resource_STATUS(source *alpha20210515s.ThroughputSettingsGetProperties_Resource_STATUS) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettingsResource_STATUS
		err := autoscaleSetting.AssignProperties_From_AutoscaleSettingsResource_STATUS(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AutoscaleSettingsResource_STATUS() to populate field AutoscaleSettings")
		}
		resource.AutoscaleSettings = &autoscaleSetting
	} else {
		resource.AutoscaleSettings = nil
	}

	// Etag
	resource.Etag = genruntime.ClonePointerToString(source.Etag)

	// MinimumThroughput
	resource.MinimumThroughput = genruntime.ClonePointerToString(source.MinimumThroughput)

	// OfferReplacePending
	resource.OfferReplacePending = genruntime.ClonePointerToString(source.OfferReplacePending)

	// Rid
	resource.Rid = genruntime.ClonePointerToString(source.Rid)

	// Throughput
	resource.Throughput = genruntime.ClonePointerToInt(source.Throughput)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		resource.Ts = &t
	} else {
		resource.Ts = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ThroughputSettingsGetProperties_Resource_STATUS populates the provided destination ThroughputSettingsGetProperties_Resource_STATUS from our ThroughputSettingsGetProperties_Resource_STATUS
func (resource *ThroughputSettingsGetProperties_Resource_STATUS) AssignProperties_To_ThroughputSettingsGetProperties_Resource_STATUS(destination *alpha20210515s.ThroughputSettingsGetProperties_Resource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if resource.AutoscaleSettings != nil {
		var autoscaleSetting alpha20210515s.AutoscaleSettingsResource_STATUS
		err := resource.AutoscaleSettings.AssignProperties_To_AutoscaleSettingsResource_STATUS(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AutoscaleSettingsResource_STATUS() to populate field AutoscaleSettings")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(resource.Etag)

	// MinimumThroughput
	destination.MinimumThroughput = genruntime.ClonePointerToString(resource.MinimumThroughput)

	// OfferReplacePending
	destination.OfferReplacePending = genruntime.ClonePointerToString(resource.OfferReplacePending)

	// Rid
	destination.Rid = genruntime.ClonePointerToString(resource.Rid)

	// Throughput
	destination.Throughput = genruntime.ClonePointerToInt(resource.Throughput)

	// Ts
	if resource.Ts != nil {
		t := *resource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ThroughputSettingsResource. Use v1beta20210515.ThroughputSettingsResource instead
type ThroughputSettingsResource struct {
	AutoscaleSettings *AutoscaleSettingsResource `json:"autoscaleSettings,omitempty"`
	Throughput        *int                       `json:"throughput,omitempty"`
}

var _ genruntime.ARMTransformer = &ThroughputSettingsResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *ThroughputSettingsResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &ThroughputSettingsResource_ARM{}

	// Set property ‘AutoscaleSettings’:
	if resource.AutoscaleSettings != nil {
		autoscaleSettings_ARM, err := (*resource.AutoscaleSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoscaleSettings := *autoscaleSettings_ARM.(*AutoscaleSettingsResource_ARM)
		result.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if resource.Throughput != nil {
		throughput := *resource.Throughput
		result.Throughput = &throughput
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputSettingsResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsResource_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputSettingsResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsResource_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsResource_ARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettingsResource
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		resource.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		resource.Throughput = &throughput
	}

	// No error
	return nil
}

// AssignProperties_From_ThroughputSettingsResource populates our ThroughputSettingsResource from the provided source ThroughputSettingsResource
func (resource *ThroughputSettingsResource) AssignProperties_From_ThroughputSettingsResource(source *alpha20210515s.ThroughputSettingsResource) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettingsResource
		err := autoscaleSetting.AssignProperties_From_AutoscaleSettingsResource(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AutoscaleSettingsResource() to populate field AutoscaleSettings")
		}
		resource.AutoscaleSettings = &autoscaleSetting
	} else {
		resource.AutoscaleSettings = nil
	}

	// Throughput
	resource.Throughput = genruntime.ClonePointerToInt(source.Throughput)

	// No error
	return nil
}

// AssignProperties_To_ThroughputSettingsResource populates the provided destination ThroughputSettingsResource from our ThroughputSettingsResource
func (resource *ThroughputSettingsResource) AssignProperties_To_ThroughputSettingsResource(destination *alpha20210515s.ThroughputSettingsResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if resource.AutoscaleSettings != nil {
		var autoscaleSetting alpha20210515s.AutoscaleSettingsResource
		err := resource.AutoscaleSettings.AssignProperties_To_AutoscaleSettingsResource(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AutoscaleSettingsResource() to populate field AutoscaleSettings")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Throughput
	destination.Throughput = genruntime.ClonePointerToInt(resource.Throughput)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AutoscaleSettingsResource. Use v1beta20210515.AutoscaleSettingsResource instead
type AutoscaleSettingsResource struct {
	AutoUpgradePolicy *AutoUpgradePolicyResource `json:"autoUpgradePolicy,omitempty"`

	// +kubebuilder:validation:Required
	MaxThroughput *int `json:"maxThroughput,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoscaleSettingsResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *AutoscaleSettingsResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &AutoscaleSettingsResource_ARM{}

	// Set property ‘AutoUpgradePolicy’:
	if resource.AutoUpgradePolicy != nil {
		autoUpgradePolicy_ARM, err := (*resource.AutoUpgradePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoUpgradePolicy := *autoUpgradePolicy_ARM.(*AutoUpgradePolicyResource_ARM)
		result.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	if resource.MaxThroughput != nil {
		maxThroughput := *resource.MaxThroughput
		result.MaxThroughput = &maxThroughput
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoscaleSettingsResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsResource_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoscaleSettingsResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsResource_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsResource_ARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradePolicy’:
	if typedInput.AutoUpgradePolicy != nil {
		var autoUpgradePolicy1 AutoUpgradePolicyResource
		err := autoUpgradePolicy1.PopulateFromARM(owner, *typedInput.AutoUpgradePolicy)
		if err != nil {
			return err
		}
		autoUpgradePolicy := autoUpgradePolicy1
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	if typedInput.MaxThroughput != nil {
		maxThroughput := *typedInput.MaxThroughput
		resource.MaxThroughput = &maxThroughput
	}

	// No error
	return nil
}

// AssignProperties_From_AutoscaleSettingsResource populates our AutoscaleSettingsResource from the provided source AutoscaleSettingsResource
func (resource *AutoscaleSettingsResource) AssignProperties_From_AutoscaleSettingsResource(source *alpha20210515s.AutoscaleSettingsResource) error {

	// AutoUpgradePolicy
	if source.AutoUpgradePolicy != nil {
		var autoUpgradePolicy AutoUpgradePolicyResource
		err := autoUpgradePolicy.AssignProperties_From_AutoUpgradePolicyResource(source.AutoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AutoUpgradePolicyResource() to populate field AutoUpgradePolicy")
		}
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		resource.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	resource.MaxThroughput = genruntime.ClonePointerToInt(source.MaxThroughput)

	// No error
	return nil
}

// AssignProperties_To_AutoscaleSettingsResource populates the provided destination AutoscaleSettingsResource from our AutoscaleSettingsResource
func (resource *AutoscaleSettingsResource) AssignProperties_To_AutoscaleSettingsResource(destination *alpha20210515s.AutoscaleSettingsResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradePolicy
	if resource.AutoUpgradePolicy != nil {
		var autoUpgradePolicy alpha20210515s.AutoUpgradePolicyResource
		err := resource.AutoUpgradePolicy.AssignProperties_To_AutoUpgradePolicyResource(&autoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AutoUpgradePolicyResource() to populate field AutoUpgradePolicy")
		}
		destination.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		destination.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	destination.MaxThroughput = genruntime.ClonePointerToInt(resource.MaxThroughput)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AutoscaleSettingsResource_STATUS. Use v1beta20210515.AutoscaleSettingsResource_STATUS instead
type AutoscaleSettingsResource_STATUS struct {
	AutoUpgradePolicy   *AutoUpgradePolicyResource_STATUS `json:"autoUpgradePolicy,omitempty"`
	MaxThroughput       *int                              `json:"maxThroughput,omitempty"`
	TargetMaxThroughput *int                              `json:"targetMaxThroughput,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoscaleSettingsResource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoscaleSettingsResource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsResource_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoscaleSettingsResource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsResource_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsResource_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradePolicy’:
	if typedInput.AutoUpgradePolicy != nil {
		var autoUpgradePolicy1 AutoUpgradePolicyResource_STATUS
		err := autoUpgradePolicy1.PopulateFromARM(owner, *typedInput.AutoUpgradePolicy)
		if err != nil {
			return err
		}
		autoUpgradePolicy := autoUpgradePolicy1
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	if typedInput.MaxThroughput != nil {
		maxThroughput := *typedInput.MaxThroughput
		resource.MaxThroughput = &maxThroughput
	}

	// Set property ‘TargetMaxThroughput’:
	if typedInput.TargetMaxThroughput != nil {
		targetMaxThroughput := *typedInput.TargetMaxThroughput
		resource.TargetMaxThroughput = &targetMaxThroughput
	}

	// No error
	return nil
}

// AssignProperties_From_AutoscaleSettingsResource_STATUS populates our AutoscaleSettingsResource_STATUS from the provided source AutoscaleSettingsResource_STATUS
func (resource *AutoscaleSettingsResource_STATUS) AssignProperties_From_AutoscaleSettingsResource_STATUS(source *alpha20210515s.AutoscaleSettingsResource_STATUS) error {

	// AutoUpgradePolicy
	if source.AutoUpgradePolicy != nil {
		var autoUpgradePolicy AutoUpgradePolicyResource_STATUS
		err := autoUpgradePolicy.AssignProperties_From_AutoUpgradePolicyResource_STATUS(source.AutoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AutoUpgradePolicyResource_STATUS() to populate field AutoUpgradePolicy")
		}
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		resource.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	resource.MaxThroughput = genruntime.ClonePointerToInt(source.MaxThroughput)

	// TargetMaxThroughput
	resource.TargetMaxThroughput = genruntime.ClonePointerToInt(source.TargetMaxThroughput)

	// No error
	return nil
}

// AssignProperties_To_AutoscaleSettingsResource_STATUS populates the provided destination AutoscaleSettingsResource_STATUS from our AutoscaleSettingsResource_STATUS
func (resource *AutoscaleSettingsResource_STATUS) AssignProperties_To_AutoscaleSettingsResource_STATUS(destination *alpha20210515s.AutoscaleSettingsResource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradePolicy
	if resource.AutoUpgradePolicy != nil {
		var autoUpgradePolicy alpha20210515s.AutoUpgradePolicyResource_STATUS
		err := resource.AutoUpgradePolicy.AssignProperties_To_AutoUpgradePolicyResource_STATUS(&autoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AutoUpgradePolicyResource_STATUS() to populate field AutoUpgradePolicy")
		}
		destination.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		destination.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	destination.MaxThroughput = genruntime.ClonePointerToInt(resource.MaxThroughput)

	// TargetMaxThroughput
	destination.TargetMaxThroughput = genruntime.ClonePointerToInt(resource.TargetMaxThroughput)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AutoUpgradePolicyResource. Use v1beta20210515.AutoUpgradePolicyResource instead
type AutoUpgradePolicyResource struct {
	ThroughputPolicy *ThroughputPolicyResource `json:"throughputPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoUpgradePolicyResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *AutoUpgradePolicyResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &AutoUpgradePolicyResource_ARM{}

	// Set property ‘ThroughputPolicy’:
	if resource.ThroughputPolicy != nil {
		throughputPolicy_ARM, err := (*resource.ThroughputPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		throughputPolicy := *throughputPolicy_ARM.(*ThroughputPolicyResource_ARM)
		result.ThroughputPolicy = &throughputPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoUpgradePolicyResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoUpgradePolicyResource_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoUpgradePolicyResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoUpgradePolicyResource_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoUpgradePolicyResource_ARM, got %T", armInput)
	}

	// Set property ‘ThroughputPolicy’:
	if typedInput.ThroughputPolicy != nil {
		var throughputPolicy1 ThroughputPolicyResource
		err := throughputPolicy1.PopulateFromARM(owner, *typedInput.ThroughputPolicy)
		if err != nil {
			return err
		}
		throughputPolicy := throughputPolicy1
		resource.ThroughputPolicy = &throughputPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_AutoUpgradePolicyResource populates our AutoUpgradePolicyResource from the provided source AutoUpgradePolicyResource
func (resource *AutoUpgradePolicyResource) AssignProperties_From_AutoUpgradePolicyResource(source *alpha20210515s.AutoUpgradePolicyResource) error {

	// ThroughputPolicy
	if source.ThroughputPolicy != nil {
		var throughputPolicy ThroughputPolicyResource
		err := throughputPolicy.AssignProperties_From_ThroughputPolicyResource(source.ThroughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ThroughputPolicyResource() to populate field ThroughputPolicy")
		}
		resource.ThroughputPolicy = &throughputPolicy
	} else {
		resource.ThroughputPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AutoUpgradePolicyResource populates the provided destination AutoUpgradePolicyResource from our AutoUpgradePolicyResource
func (resource *AutoUpgradePolicyResource) AssignProperties_To_AutoUpgradePolicyResource(destination *alpha20210515s.AutoUpgradePolicyResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ThroughputPolicy
	if resource.ThroughputPolicy != nil {
		var throughputPolicy alpha20210515s.ThroughputPolicyResource
		err := resource.ThroughputPolicy.AssignProperties_To_ThroughputPolicyResource(&throughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ThroughputPolicyResource() to populate field ThroughputPolicy")
		}
		destination.ThroughputPolicy = &throughputPolicy
	} else {
		destination.ThroughputPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AutoUpgradePolicyResource_STATUS. Use v1beta20210515.AutoUpgradePolicyResource_STATUS instead
type AutoUpgradePolicyResource_STATUS struct {
	ThroughputPolicy *ThroughputPolicyResource_STATUS `json:"throughputPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoUpgradePolicyResource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoUpgradePolicyResource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoUpgradePolicyResource_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoUpgradePolicyResource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoUpgradePolicyResource_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoUpgradePolicyResource_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘ThroughputPolicy’:
	if typedInput.ThroughputPolicy != nil {
		var throughputPolicy1 ThroughputPolicyResource_STATUS
		err := throughputPolicy1.PopulateFromARM(owner, *typedInput.ThroughputPolicy)
		if err != nil {
			return err
		}
		throughputPolicy := throughputPolicy1
		resource.ThroughputPolicy = &throughputPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_AutoUpgradePolicyResource_STATUS populates our AutoUpgradePolicyResource_STATUS from the provided source AutoUpgradePolicyResource_STATUS
func (resource *AutoUpgradePolicyResource_STATUS) AssignProperties_From_AutoUpgradePolicyResource_STATUS(source *alpha20210515s.AutoUpgradePolicyResource_STATUS) error {

	// ThroughputPolicy
	if source.ThroughputPolicy != nil {
		var throughputPolicy ThroughputPolicyResource_STATUS
		err := throughputPolicy.AssignProperties_From_ThroughputPolicyResource_STATUS(source.ThroughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ThroughputPolicyResource_STATUS() to populate field ThroughputPolicy")
		}
		resource.ThroughputPolicy = &throughputPolicy
	} else {
		resource.ThroughputPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AutoUpgradePolicyResource_STATUS populates the provided destination AutoUpgradePolicyResource_STATUS from our AutoUpgradePolicyResource_STATUS
func (resource *AutoUpgradePolicyResource_STATUS) AssignProperties_To_AutoUpgradePolicyResource_STATUS(destination *alpha20210515s.AutoUpgradePolicyResource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ThroughputPolicy
	if resource.ThroughputPolicy != nil {
		var throughputPolicy alpha20210515s.ThroughputPolicyResource_STATUS
		err := resource.ThroughputPolicy.AssignProperties_To_ThroughputPolicyResource_STATUS(&throughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ThroughputPolicyResource_STATUS() to populate field ThroughputPolicy")
		}
		destination.ThroughputPolicy = &throughputPolicy
	} else {
		destination.ThroughputPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ThroughputPolicyResource. Use v1beta20210515.ThroughputPolicyResource instead
type ThroughputPolicyResource struct {
	IncrementPercent *int  `json:"incrementPercent,omitempty"`
	IsEnabled        *bool `json:"isEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &ThroughputPolicyResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *ThroughputPolicyResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	result := &ThroughputPolicyResource_ARM{}

	// Set property ‘IncrementPercent’:
	if resource.IncrementPercent != nil {
		incrementPercent := *resource.IncrementPercent
		result.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if resource.IsEnabled != nil {
		isEnabled := *resource.IsEnabled
		result.IsEnabled = &isEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputPolicyResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputPolicyResource_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputPolicyResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputPolicyResource_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputPolicyResource_ARM, got %T", armInput)
	}

	// Set property ‘IncrementPercent’:
	if typedInput.IncrementPercent != nil {
		incrementPercent := *typedInput.IncrementPercent
		resource.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if typedInput.IsEnabled != nil {
		isEnabled := *typedInput.IsEnabled
		resource.IsEnabled = &isEnabled
	}

	// No error
	return nil
}

// AssignProperties_From_ThroughputPolicyResource populates our ThroughputPolicyResource from the provided source ThroughputPolicyResource
func (resource *ThroughputPolicyResource) AssignProperties_From_ThroughputPolicyResource(source *alpha20210515s.ThroughputPolicyResource) error {

	// IncrementPercent
	resource.IncrementPercent = genruntime.ClonePointerToInt(source.IncrementPercent)

	// IsEnabled
	if source.IsEnabled != nil {
		isEnabled := *source.IsEnabled
		resource.IsEnabled = &isEnabled
	} else {
		resource.IsEnabled = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ThroughputPolicyResource populates the provided destination ThroughputPolicyResource from our ThroughputPolicyResource
func (resource *ThroughputPolicyResource) AssignProperties_To_ThroughputPolicyResource(destination *alpha20210515s.ThroughputPolicyResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IncrementPercent
	destination.IncrementPercent = genruntime.ClonePointerToInt(resource.IncrementPercent)

	// IsEnabled
	if resource.IsEnabled != nil {
		isEnabled := *resource.IsEnabled
		destination.IsEnabled = &isEnabled
	} else {
		destination.IsEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ThroughputPolicyResource_STATUS. Use v1beta20210515.ThroughputPolicyResource_STATUS instead
type ThroughputPolicyResource_STATUS struct {
	IncrementPercent *int  `json:"incrementPercent,omitempty"`
	IsEnabled        *bool `json:"isEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &ThroughputPolicyResource_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputPolicyResource_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputPolicyResource_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputPolicyResource_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputPolicyResource_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputPolicyResource_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘IncrementPercent’:
	if typedInput.IncrementPercent != nil {
		incrementPercent := *typedInput.IncrementPercent
		resource.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if typedInput.IsEnabled != nil {
		isEnabled := *typedInput.IsEnabled
		resource.IsEnabled = &isEnabled
	}

	// No error
	return nil
}

// AssignProperties_From_ThroughputPolicyResource_STATUS populates our ThroughputPolicyResource_STATUS from the provided source ThroughputPolicyResource_STATUS
func (resource *ThroughputPolicyResource_STATUS) AssignProperties_From_ThroughputPolicyResource_STATUS(source *alpha20210515s.ThroughputPolicyResource_STATUS) error {

	// IncrementPercent
	resource.IncrementPercent = genruntime.ClonePointerToInt(source.IncrementPercent)

	// IsEnabled
	if source.IsEnabled != nil {
		isEnabled := *source.IsEnabled
		resource.IsEnabled = &isEnabled
	} else {
		resource.IsEnabled = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ThroughputPolicyResource_STATUS populates the provided destination ThroughputPolicyResource_STATUS from our ThroughputPolicyResource_STATUS
func (resource *ThroughputPolicyResource_STATUS) AssignProperties_To_ThroughputPolicyResource_STATUS(destination *alpha20210515s.ThroughputPolicyResource_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IncrementPercent
	destination.IncrementPercent = genruntime.ClonePointerToInt(resource.IncrementPercent)

	// IsEnabled
	if resource.IsEnabled != nil {
		isEnabled := *resource.IsEnabled
		destination.IsEnabled = &isEnabled
	} else {
		destination.IsEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollectionThroughputSetting{}, &MongodbDatabaseCollectionThroughputSettingList{})
}
