// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-05-15/cosmos-db.json
//- ARM URI:
///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default
type MongodbDatabaseCollectionThroughputSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec `json:"spec,omitempty"`
	Status            ThroughputSettings_Status                                         `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollectionThroughputSetting{}

// GetConditions returns the conditions of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetConditions() conditions.Conditions {
	return setting.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (setting *MongodbDatabaseCollectionThroughputSetting) SetConditions(conditions conditions.Conditions) {
	setting.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbDatabaseCollectionThroughputSetting{}

// ConvertFrom populates our MongodbDatabaseCollectionThroughputSetting from the provided hub MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/MongodbDatabaseCollectionThroughputSetting but received %T instead", hub)
	}

	return setting.AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting(source)
}

// ConvertTo populates the provided hub MongodbDatabaseCollectionThroughputSetting from our MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting)
	if !ok {
		return fmt.Errorf("expected storage:documentdb/v1alpha1api20210515storage/MongodbDatabaseCollectionThroughputSetting but received %T instead", hub)
	}

	return setting.AssignPropertiesToMongodbDatabaseCollectionThroughputSetting(destination)
}

// +kubebuilder:webhook:path=/mutate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollectionthroughputsetting,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabasecollectionthroughputsettings.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &MongodbDatabaseCollectionThroughputSetting{}

// Default applies defaults to the MongodbDatabaseCollectionThroughputSetting resource
func (setting *MongodbDatabaseCollectionThroughputSetting) Default() {
	setting.defaultImpl()
	var temp interface{} = setting
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (setting *MongodbDatabaseCollectionThroughputSetting) defaultAzureName() {
	if setting.Spec.AzureName == "" {
		setting.Spec.AzureName = setting.Name
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabaseCollectionThroughputSetting resource
func (setting *MongodbDatabaseCollectionThroughputSetting) defaultImpl() { setting.defaultAzureName() }

var _ genruntime.KubernetesResource = &MongodbDatabaseCollectionThroughputSetting{}

// AzureName returns the Azure name of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) AzureName() string {
	return setting.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-15"
func (setting MongodbDatabaseCollectionThroughputSetting) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetSpec() genruntime.ConvertibleSpec {
	return &setting.Spec
}

// GetStatus returns the status of this resource
func (setting *MongodbDatabaseCollectionThroughputSetting) GetStatus() genruntime.ConvertibleStatus {
	return &setting.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings"
func (setting *MongodbDatabaseCollectionThroughputSetting) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings"
}

// NewEmptyStatus returns a new empty (blank) status
func (setting *MongodbDatabaseCollectionThroughputSetting) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ThroughputSettings_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (setting *MongodbDatabaseCollectionThroughputSetting) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(setting.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  setting.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (setting *MongodbDatabaseCollectionThroughputSetting) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ThroughputSettings_Status); ok {
		setting.Status = *st
		return nil
	}

	// Convert status to required version
	var st ThroughputSettings_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	setting.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollectionthroughputsetting,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabasecollectionthroughputsettings.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &MongodbDatabaseCollectionThroughputSetting{}

// ValidateCreate validates the creation of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) ValidateCreate() error {
	validations := setting.createValidations()
	var temp interface{} = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) ValidateDelete() error {
	validations := setting.deleteValidations()
	var temp interface{} = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) ValidateUpdate(old runtime.Object) error {
	validations := setting.updateValidations()
	var temp interface{} = setting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) createValidations() []func() error {
	return []func() error{setting.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return setting.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (setting *MongodbDatabaseCollectionThroughputSetting) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&setting.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting populates our MongodbDatabaseCollectionThroughputSetting from the provided source MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting(source *v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting) error {

	// ObjectMeta
	setting.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec() to populate field Spec")
	}
	setting.Spec = spec

	// Status
	var status ThroughputSettings_Status
	err = status.AssignPropertiesFromThroughputSettings_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromThroughputSettings_Status() to populate field Status")
	}
	setting.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabaseCollectionThroughputSetting populates the provided destination MongodbDatabaseCollectionThroughputSetting from our MongodbDatabaseCollectionThroughputSetting
func (setting *MongodbDatabaseCollectionThroughputSetting) AssignPropertiesToMongodbDatabaseCollectionThroughputSetting(destination *v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting) error {

	// ObjectMeta
	destination.ObjectMeta = *setting.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec
	err := setting.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.ThroughputSettings_Status
	err = setting.Status.AssignPropertiesToThroughputSettings_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToThroughputSettings_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (setting *MongodbDatabaseCollectionThroughputSetting) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: setting.Spec.OriginalVersion(),
		Kind:    "MongodbDatabaseCollectionThroughputSetting",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-05-15/cosmos-db.json
//- ARM URI:
///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbDatabases/{databaseName}/collections/{collectionName}/throughputSettings/default
type MongodbDatabaseCollectionThroughputSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollectionThroughputSetting `json:"items"`
}

type DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	// +kubebuilder:validation:Required
	//Resource: The standard JSON format of a resource throughput
	Resource ThroughputSettingsResource `json:"resource"`
	Tags     map[string]string          `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if setting == nil {
		return nil, nil
	}
	var result DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = setting.AzureName

	// Set property ‘Location’:
	if setting.Location != nil {
		location := *setting.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	resourceARM, err := setting.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(ThroughputSettingsResourceARM)

	// Set property ‘Tags’:
	if setting.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range setting.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	setting.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		setting.Location = &location
	}

	// Set property ‘Owner’:
	setting.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource ThroughputSettingsResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	setting.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		setting.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			setting.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec from the provided source
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec)
	if ok {
		// Populate our instance from source
		return setting.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = setting.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec)
	if ok {
		// Populate destination from our instance
		return setting.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec{}
	err := setting.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec populates our DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec from the provided source DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(source *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) error {

	// AzureName
	setting.AzureName = source.AzureName

	// Location
	setting.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	setting.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource ThroughputSettingsResource
		err := resource.AssignPropertiesFromThroughputSettingsResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromThroughputSettingsResource() to populate field Resource")
		}
		setting.Resource = resource
	} else {
		setting.Resource = ThroughputSettingsResource{}
	}

	// Tags
	setting.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec populates the provided destination DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec from our DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec(destination *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = setting.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(setting.Location)

	// OriginalVersion
	destination.OriginalVersion = setting.OriginalVersion()

	// Owner
	destination.Owner = setting.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.ThroughputSettingsResource
	err := setting.Resource.AssignPropertiesToThroughputSettingsResource(&resource)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToThroughputSettingsResource() to populate field Resource")
	}
	destination.Resource = &resource

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(setting.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (setting *DatabaseAccountsMongodbDatabasesCollectionsThroughputSetting_Spec) SetAzureName(azureName string) {
	setting.AzureName = azureName
}

type ThroughputSettings_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name *string `json:"name,omitempty"`

	//Resource: The standard JSON format of a resource throughput
	Resource *ThroughputSettingsResource_Status `json:"resource,omitempty"`
	Tags     map[string]string                  `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ThroughputSettings_Status{}

// ConvertStatusFrom populates our ThroughputSettings_Status from the provided source
func (settings *ThroughputSettings_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.ThroughputSettings_Status)
	if ok {
		// Populate our instance from source
		return settings.AssignPropertiesFromThroughputSettings_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.ThroughputSettings_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = settings.AssignPropertiesFromThroughputSettings_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ThroughputSettings_Status
func (settings *ThroughputSettings_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.ThroughputSettings_Status)
	if ok {
		// Populate destination from our instance
		return settings.AssignPropertiesToThroughputSettings_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.ThroughputSettings_Status{}
	err := settings.AssignPropertiesToThroughputSettings_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ThroughputSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ThroughputSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ThroughputSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettings_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		settings.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		settings.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		settings.Name = &name
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		var temp ThroughputSettingsResource_Status
		var temp1 ThroughputSettingsResource_Status
		err := temp1.PopulateFromARM(owner, typedInput.Properties.Resource)
		if err != nil {
			return err
		}
		temp = temp1
		settings.Resource = &temp
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		settings.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			settings.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		settings.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputSettings_Status populates our ThroughputSettings_Status from the provided source ThroughputSettings_Status
func (settings *ThroughputSettings_Status) AssignPropertiesFromThroughputSettings_Status(source *v1alpha1api20210515storage.ThroughputSettings_Status) error {

	// Conditions
	settings.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	settings.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	settings.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	settings.Name = genruntime.ClonePointerToString(source.Name)

	// Resource
	if source.Resource != nil {
		var resource ThroughputSettingsResource_Status
		err := resource.AssignPropertiesFromThroughputSettingsResource_Status(source.Resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromThroughputSettingsResource_Status() to populate field Resource")
		}
		settings.Resource = &resource
	} else {
		settings.Resource = nil
	}

	// Tags
	settings.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	settings.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToThroughputSettings_Status populates the provided destination ThroughputSettings_Status from our ThroughputSettings_Status
func (settings *ThroughputSettings_Status) AssignPropertiesToThroughputSettings_Status(destination *v1alpha1api20210515storage.ThroughputSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(settings.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(settings.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(settings.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(settings.Name)

	// Resource
	if settings.Resource != nil {
		var resource v1alpha1api20210515storage.ThroughputSettingsResource_Status
		err := settings.Resource.AssignPropertiesToThroughputSettingsResource_Status(&resource)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToThroughputSettingsResource_Status() to populate field Resource")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(settings.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(settings.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ThroughputSettingsResource struct {
	//AutoscaleSettings: Cosmos DB resource for autoscale settings. Either throughput
	//is required or autoscaleSettings is required, but not both.
	AutoscaleSettings *AutoscaleSettingsResource `json:"autoscaleSettings,omitempty"`

	//Throughput: Value of the Cosmos DB resource throughput. Either throughput is
	//required or autoscaleSettings is required, but not both.
	Throughput *int `json:"throughput,omitempty"`
}

var _ genruntime.ARMTransformer = &ThroughputSettingsResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *ThroughputSettingsResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result ThroughputSettingsResourceARM

	// Set property ‘AutoscaleSettings’:
	if resource.AutoscaleSettings != nil {
		autoscaleSettingsARM, err := (*resource.AutoscaleSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoscaleSettings := autoscaleSettingsARM.(AutoscaleSettingsResourceARM)
		result.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if resource.Throughput != nil {
		throughput := *resource.Throughput
		result.Throughput = &throughput
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputSettingsResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputSettingsResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsResourceARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettingsResource
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		resource.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		resource.Throughput = &throughput
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputSettingsResource populates our ThroughputSettingsResource from the provided source ThroughputSettingsResource
func (resource *ThroughputSettingsResource) AssignPropertiesFromThroughputSettingsResource(source *v1alpha1api20210515storage.ThroughputSettingsResource) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettingsResource
		err := autoscaleSetting.AssignPropertiesFromAutoscaleSettingsResource(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoscaleSettingsResource() to populate field AutoscaleSettings")
		}
		resource.AutoscaleSettings = &autoscaleSetting
	} else {
		resource.AutoscaleSettings = nil
	}

	// Throughput
	resource.Throughput = genruntime.ClonePointerToInt(source.Throughput)

	// No error
	return nil
}

// AssignPropertiesToThroughputSettingsResource populates the provided destination ThroughputSettingsResource from our ThroughputSettingsResource
func (resource *ThroughputSettingsResource) AssignPropertiesToThroughputSettingsResource(destination *v1alpha1api20210515storage.ThroughputSettingsResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if resource.AutoscaleSettings != nil {
		var autoscaleSetting v1alpha1api20210515storage.AutoscaleSettingsResource
		err := resource.AutoscaleSettings.AssignPropertiesToAutoscaleSettingsResource(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoscaleSettingsResource() to populate field AutoscaleSettings")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Throughput
	destination.Throughput = genruntime.ClonePointerToInt(resource.Throughput)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ThroughputSettingsResource_Status struct {
	//AutoscaleSettings: Cosmos DB resource for autoscale settings. Either throughput
	//is required or autoscaleSettings is required, but not both.
	AutoscaleSettings *AutoscaleSettingsResource_Status `json:"autoscaleSettings,omitempty"`

	//MinimumThroughput: The minimum throughput of the resource
	MinimumThroughput *string `json:"minimumThroughput,omitempty"`

	//OfferReplacePending: The throughput replace is pending
	OfferReplacePending *string `json:"offerReplacePending,omitempty"`

	//Throughput: Value of the Cosmos DB resource throughput. Either throughput is
	//required or autoscaleSettings is required, but not both.
	Throughput *int `json:"throughput,omitempty"`
}

var _ genruntime.FromARMConverter = &ThroughputSettingsResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputSettingsResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputSettingsResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsResource_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettingsResource_Status
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		resource.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘MinimumThroughput’:
	if typedInput.MinimumThroughput != nil {
		minimumThroughput := *typedInput.MinimumThroughput
		resource.MinimumThroughput = &minimumThroughput
	}

	// Set property ‘OfferReplacePending’:
	if typedInput.OfferReplacePending != nil {
		offerReplacePending := *typedInput.OfferReplacePending
		resource.OfferReplacePending = &offerReplacePending
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		resource.Throughput = &throughput
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputSettingsResource_Status populates our ThroughputSettingsResource_Status from the provided source ThroughputSettingsResource_Status
func (resource *ThroughputSettingsResource_Status) AssignPropertiesFromThroughputSettingsResource_Status(source *v1alpha1api20210515storage.ThroughputSettingsResource_Status) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettingsResource_Status
		err := autoscaleSetting.AssignPropertiesFromAutoscaleSettingsResource_Status(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoscaleSettingsResource_Status() to populate field AutoscaleSettings")
		}
		resource.AutoscaleSettings = &autoscaleSetting
	} else {
		resource.AutoscaleSettings = nil
	}

	// MinimumThroughput
	resource.MinimumThroughput = genruntime.ClonePointerToString(source.MinimumThroughput)

	// OfferReplacePending
	resource.OfferReplacePending = genruntime.ClonePointerToString(source.OfferReplacePending)

	// Throughput
	resource.Throughput = genruntime.ClonePointerToInt(source.Throughput)

	// No error
	return nil
}

// AssignPropertiesToThroughputSettingsResource_Status populates the provided destination ThroughputSettingsResource_Status from our ThroughputSettingsResource_Status
func (resource *ThroughputSettingsResource_Status) AssignPropertiesToThroughputSettingsResource_Status(destination *v1alpha1api20210515storage.ThroughputSettingsResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if resource.AutoscaleSettings != nil {
		var autoscaleSetting v1alpha1api20210515storage.AutoscaleSettingsResource_Status
		err := resource.AutoscaleSettings.AssignPropertiesToAutoscaleSettingsResource_Status(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoscaleSettingsResource_Status() to populate field AutoscaleSettings")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// MinimumThroughput
	destination.MinimumThroughput = genruntime.ClonePointerToString(resource.MinimumThroughput)

	// OfferReplacePending
	destination.OfferReplacePending = genruntime.ClonePointerToString(resource.OfferReplacePending)

	// Throughput
	destination.Throughput = genruntime.ClonePointerToInt(resource.Throughput)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AutoscaleSettingsResource struct {
	//AutoUpgradePolicy: Cosmos DB resource auto-upgrade policy
	AutoUpgradePolicy *AutoUpgradePolicyResource `json:"autoUpgradePolicy,omitempty"`

	// +kubebuilder:validation:Required
	//MaxThroughput: Represents maximum throughput container can scale up to.
	MaxThroughput int `json:"maxThroughput"`
}

var _ genruntime.ARMTransformer = &AutoscaleSettingsResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *AutoscaleSettingsResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result AutoscaleSettingsResourceARM

	// Set property ‘AutoUpgradePolicy’:
	if resource.AutoUpgradePolicy != nil {
		autoUpgradePolicyARM, err := (*resource.AutoUpgradePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoUpgradePolicy := autoUpgradePolicyARM.(AutoUpgradePolicyResourceARM)
		result.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	result.MaxThroughput = resource.MaxThroughput
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoscaleSettingsResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoscaleSettingsResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsResourceARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradePolicy’:
	if typedInput.AutoUpgradePolicy != nil {
		var autoUpgradePolicy1 AutoUpgradePolicyResource
		err := autoUpgradePolicy1.PopulateFromARM(owner, *typedInput.AutoUpgradePolicy)
		if err != nil {
			return err
		}
		autoUpgradePolicy := autoUpgradePolicy1
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	resource.MaxThroughput = typedInput.MaxThroughput

	// No error
	return nil
}

// AssignPropertiesFromAutoscaleSettingsResource populates our AutoscaleSettingsResource from the provided source AutoscaleSettingsResource
func (resource *AutoscaleSettingsResource) AssignPropertiesFromAutoscaleSettingsResource(source *v1alpha1api20210515storage.AutoscaleSettingsResource) error {

	// AutoUpgradePolicy
	if source.AutoUpgradePolicy != nil {
		var autoUpgradePolicy AutoUpgradePolicyResource
		err := autoUpgradePolicy.AssignPropertiesFromAutoUpgradePolicyResource(source.AutoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoUpgradePolicyResource() to populate field AutoUpgradePolicy")
		}
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		resource.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	resource.MaxThroughput = genruntime.GetOptionalIntValue(source.MaxThroughput)

	// No error
	return nil
}

// AssignPropertiesToAutoscaleSettingsResource populates the provided destination AutoscaleSettingsResource from our AutoscaleSettingsResource
func (resource *AutoscaleSettingsResource) AssignPropertiesToAutoscaleSettingsResource(destination *v1alpha1api20210515storage.AutoscaleSettingsResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradePolicy
	if resource.AutoUpgradePolicy != nil {
		var autoUpgradePolicy v1alpha1api20210515storage.AutoUpgradePolicyResource
		err := resource.AutoUpgradePolicy.AssignPropertiesToAutoUpgradePolicyResource(&autoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoUpgradePolicyResource() to populate field AutoUpgradePolicy")
		}
		destination.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		destination.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	maxThroughput := resource.MaxThroughput
	destination.MaxThroughput = &maxThroughput

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AutoscaleSettingsResource_Status struct {
	//AutoUpgradePolicy: Cosmos DB resource auto-upgrade policy
	AutoUpgradePolicy *AutoUpgradePolicyResource_Status `json:"autoUpgradePolicy,omitempty"`

	// +kubebuilder:validation:Required
	//MaxThroughput: Represents maximum throughput container can scale up to.
	MaxThroughput int `json:"maxThroughput"`

	//TargetMaxThroughput: Represents target maximum throughput container can scale up
	//to once offer is no longer in pending state.
	TargetMaxThroughput *int `json:"targetMaxThroughput,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoscaleSettingsResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoscaleSettingsResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoscaleSettingsResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsResource_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradePolicy’:
	if typedInput.AutoUpgradePolicy != nil {
		var autoUpgradePolicy1 AutoUpgradePolicyResource_Status
		err := autoUpgradePolicy1.PopulateFromARM(owner, *typedInput.AutoUpgradePolicy)
		if err != nil {
			return err
		}
		autoUpgradePolicy := autoUpgradePolicy1
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	resource.MaxThroughput = typedInput.MaxThroughput

	// Set property ‘TargetMaxThroughput’:
	if typedInput.TargetMaxThroughput != nil {
		targetMaxThroughput := *typedInput.TargetMaxThroughput
		resource.TargetMaxThroughput = &targetMaxThroughput
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoscaleSettingsResource_Status populates our AutoscaleSettingsResource_Status from the provided source AutoscaleSettingsResource_Status
func (resource *AutoscaleSettingsResource_Status) AssignPropertiesFromAutoscaleSettingsResource_Status(source *v1alpha1api20210515storage.AutoscaleSettingsResource_Status) error {

	// AutoUpgradePolicy
	if source.AutoUpgradePolicy != nil {
		var autoUpgradePolicy AutoUpgradePolicyResource_Status
		err := autoUpgradePolicy.AssignPropertiesFromAutoUpgradePolicyResource_Status(source.AutoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoUpgradePolicyResource_Status() to populate field AutoUpgradePolicy")
		}
		resource.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		resource.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	resource.MaxThroughput = genruntime.GetOptionalIntValue(source.MaxThroughput)

	// TargetMaxThroughput
	resource.TargetMaxThroughput = genruntime.ClonePointerToInt(source.TargetMaxThroughput)

	// No error
	return nil
}

// AssignPropertiesToAutoscaleSettingsResource_Status populates the provided destination AutoscaleSettingsResource_Status from our AutoscaleSettingsResource_Status
func (resource *AutoscaleSettingsResource_Status) AssignPropertiesToAutoscaleSettingsResource_Status(destination *v1alpha1api20210515storage.AutoscaleSettingsResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradePolicy
	if resource.AutoUpgradePolicy != nil {
		var autoUpgradePolicy v1alpha1api20210515storage.AutoUpgradePolicyResource_Status
		err := resource.AutoUpgradePolicy.AssignPropertiesToAutoUpgradePolicyResource_Status(&autoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoUpgradePolicyResource_Status() to populate field AutoUpgradePolicy")
		}
		destination.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		destination.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	maxThroughput := resource.MaxThroughput
	destination.MaxThroughput = &maxThroughput

	// TargetMaxThroughput
	destination.TargetMaxThroughput = genruntime.ClonePointerToInt(resource.TargetMaxThroughput)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AutoUpgradePolicyResource struct {
	//ThroughputPolicy: Represents throughput policy which service must adhere to for
	//auto-upgrade
	ThroughputPolicy *ThroughputPolicyResource `json:"throughputPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoUpgradePolicyResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *AutoUpgradePolicyResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result AutoUpgradePolicyResourceARM

	// Set property ‘ThroughputPolicy’:
	if resource.ThroughputPolicy != nil {
		throughputPolicyARM, err := (*resource.ThroughputPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		throughputPolicy := throughputPolicyARM.(ThroughputPolicyResourceARM)
		result.ThroughputPolicy = &throughputPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoUpgradePolicyResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoUpgradePolicyResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoUpgradePolicyResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoUpgradePolicyResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoUpgradePolicyResourceARM, got %T", armInput)
	}

	// Set property ‘ThroughputPolicy’:
	if typedInput.ThroughputPolicy != nil {
		var throughputPolicy1 ThroughputPolicyResource
		err := throughputPolicy1.PopulateFromARM(owner, *typedInput.ThroughputPolicy)
		if err != nil {
			return err
		}
		throughputPolicy := throughputPolicy1
		resource.ThroughputPolicy = &throughputPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoUpgradePolicyResource populates our AutoUpgradePolicyResource from the provided source AutoUpgradePolicyResource
func (resource *AutoUpgradePolicyResource) AssignPropertiesFromAutoUpgradePolicyResource(source *v1alpha1api20210515storage.AutoUpgradePolicyResource) error {

	// ThroughputPolicy
	if source.ThroughputPolicy != nil {
		var throughputPolicy ThroughputPolicyResource
		err := throughputPolicy.AssignPropertiesFromThroughputPolicyResource(source.ThroughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromThroughputPolicyResource() to populate field ThroughputPolicy")
		}
		resource.ThroughputPolicy = &throughputPolicy
	} else {
		resource.ThroughputPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoUpgradePolicyResource populates the provided destination AutoUpgradePolicyResource from our AutoUpgradePolicyResource
func (resource *AutoUpgradePolicyResource) AssignPropertiesToAutoUpgradePolicyResource(destination *v1alpha1api20210515storage.AutoUpgradePolicyResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ThroughputPolicy
	if resource.ThroughputPolicy != nil {
		var throughputPolicy v1alpha1api20210515storage.ThroughputPolicyResource
		err := resource.ThroughputPolicy.AssignPropertiesToThroughputPolicyResource(&throughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToThroughputPolicyResource() to populate field ThroughputPolicy")
		}
		destination.ThroughputPolicy = &throughputPolicy
	} else {
		destination.ThroughputPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AutoUpgradePolicyResource_Status struct {
	//ThroughputPolicy: Represents throughput policy which service must adhere to for
	//auto-upgrade
	ThroughputPolicy *ThroughputPolicyResource_Status `json:"throughputPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoUpgradePolicyResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *AutoUpgradePolicyResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoUpgradePolicyResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *AutoUpgradePolicyResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoUpgradePolicyResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoUpgradePolicyResource_StatusARM, got %T", armInput)
	}

	// Set property ‘ThroughputPolicy’:
	if typedInput.ThroughputPolicy != nil {
		var throughputPolicy1 ThroughputPolicyResource_Status
		err := throughputPolicy1.PopulateFromARM(owner, *typedInput.ThroughputPolicy)
		if err != nil {
			return err
		}
		throughputPolicy := throughputPolicy1
		resource.ThroughputPolicy = &throughputPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoUpgradePolicyResource_Status populates our AutoUpgradePolicyResource_Status from the provided source AutoUpgradePolicyResource_Status
func (resource *AutoUpgradePolicyResource_Status) AssignPropertiesFromAutoUpgradePolicyResource_Status(source *v1alpha1api20210515storage.AutoUpgradePolicyResource_Status) error {

	// ThroughputPolicy
	if source.ThroughputPolicy != nil {
		var throughputPolicy ThroughputPolicyResource_Status
		err := throughputPolicy.AssignPropertiesFromThroughputPolicyResource_Status(source.ThroughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromThroughputPolicyResource_Status() to populate field ThroughputPolicy")
		}
		resource.ThroughputPolicy = &throughputPolicy
	} else {
		resource.ThroughputPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoUpgradePolicyResource_Status populates the provided destination AutoUpgradePolicyResource_Status from our AutoUpgradePolicyResource_Status
func (resource *AutoUpgradePolicyResource_Status) AssignPropertiesToAutoUpgradePolicyResource_Status(destination *v1alpha1api20210515storage.AutoUpgradePolicyResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ThroughputPolicy
	if resource.ThroughputPolicy != nil {
		var throughputPolicy v1alpha1api20210515storage.ThroughputPolicyResource_Status
		err := resource.ThroughputPolicy.AssignPropertiesToThroughputPolicyResource_Status(&throughputPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToThroughputPolicyResource_Status() to populate field ThroughputPolicy")
		}
		destination.ThroughputPolicy = &throughputPolicy
	} else {
		destination.ThroughputPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ThroughputPolicyResource struct {
	//IncrementPercent: Represents the percentage by which throughput can increase
	//every time throughput policy kicks in.
	IncrementPercent *int `json:"incrementPercent,omitempty"`

	//IsEnabled: Determines whether the ThroughputPolicy is active or not
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &ThroughputPolicyResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resource *ThroughputPolicyResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resource == nil {
		return nil, nil
	}
	var result ThroughputPolicyResourceARM

	// Set property ‘IncrementPercent’:
	if resource.IncrementPercent != nil {
		incrementPercent := *resource.IncrementPercent
		result.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if resource.IsEnabled != nil {
		isEnabled := *resource.IsEnabled
		result.IsEnabled = &isEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputPolicyResource) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputPolicyResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputPolicyResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputPolicyResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputPolicyResourceARM, got %T", armInput)
	}

	// Set property ‘IncrementPercent’:
	if typedInput.IncrementPercent != nil {
		incrementPercent := *typedInput.IncrementPercent
		resource.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if typedInput.IsEnabled != nil {
		isEnabled := *typedInput.IsEnabled
		resource.IsEnabled = &isEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputPolicyResource populates our ThroughputPolicyResource from the provided source ThroughputPolicyResource
func (resource *ThroughputPolicyResource) AssignPropertiesFromThroughputPolicyResource(source *v1alpha1api20210515storage.ThroughputPolicyResource) error {

	// IncrementPercent
	resource.IncrementPercent = genruntime.ClonePointerToInt(source.IncrementPercent)

	// IsEnabled
	if source.IsEnabled != nil {
		isEnabled := *source.IsEnabled
		resource.IsEnabled = &isEnabled
	} else {
		resource.IsEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputPolicyResource populates the provided destination ThroughputPolicyResource from our ThroughputPolicyResource
func (resource *ThroughputPolicyResource) AssignPropertiesToThroughputPolicyResource(destination *v1alpha1api20210515storage.ThroughputPolicyResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IncrementPercent
	destination.IncrementPercent = genruntime.ClonePointerToInt(resource.IncrementPercent)

	// IsEnabled
	if resource.IsEnabled != nil {
		isEnabled := *resource.IsEnabled
		destination.IsEnabled = &isEnabled
	} else {
		destination.IsEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ThroughputPolicyResource_Status struct {
	//IncrementPercent: Represents the percentage by which throughput can increase
	//every time throughput policy kicks in.
	IncrementPercent *int `json:"incrementPercent,omitempty"`

	//IsEnabled: Determines whether the ThroughputPolicy is active or not
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &ThroughputPolicyResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *ThroughputPolicyResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputPolicyResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *ThroughputPolicyResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputPolicyResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputPolicyResource_StatusARM, got %T", armInput)
	}

	// Set property ‘IncrementPercent’:
	if typedInput.IncrementPercent != nil {
		incrementPercent := *typedInput.IncrementPercent
		resource.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if typedInput.IsEnabled != nil {
		isEnabled := *typedInput.IsEnabled
		resource.IsEnabled = &isEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputPolicyResource_Status populates our ThroughputPolicyResource_Status from the provided source ThroughputPolicyResource_Status
func (resource *ThroughputPolicyResource_Status) AssignPropertiesFromThroughputPolicyResource_Status(source *v1alpha1api20210515storage.ThroughputPolicyResource_Status) error {

	// IncrementPercent
	resource.IncrementPercent = genruntime.ClonePointerToInt(source.IncrementPercent)

	// IsEnabled
	if source.IsEnabled != nil {
		isEnabled := *source.IsEnabled
		resource.IsEnabled = &isEnabled
	} else {
		resource.IsEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputPolicyResource_Status populates the provided destination ThroughputPolicyResource_Status from our ThroughputPolicyResource_Status
func (resource *ThroughputPolicyResource_Status) AssignPropertiesToThroughputPolicyResource_Status(destination *v1alpha1api20210515storage.ThroughputPolicyResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IncrementPercent
	destination.IncrementPercent = genruntime.ClonePointerToInt(resource.IncrementPercent)

	// IsEnabled
	if resource.IsEnabled != nil {
		isEnabled := *resource.IsEnabled
		destination.IsEnabled = &isEnabled
	} else {
		destination.IsEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollectionThroughputSetting{}, &MongodbDatabaseCollectionThroughputSettingList{})
}
