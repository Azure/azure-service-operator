// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoDBCollection_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollection_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollection_StatusARM, MongoDBCollection_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollection_StatusARM runs a test to see if a specific instance of MongoDBCollection_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollection_StatusARM(subject MongoDBCollection_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollection_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollection_StatusARM instances for property testing - lazily instantiated by
//MongoDBCollection_StatusARMGenerator()
var mongoDBCollection_statusARMGenerator gopter.Gen

// MongoDBCollection_StatusARMGenerator returns a generator of MongoDBCollection_StatusARM instances for property testing.
// We first initialize mongoDBCollection_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollection_StatusARMGenerator() gopter.Gen {
	if mongoDBCollection_statusARMGenerator != nil {
		return mongoDBCollection_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollection_StatusARM(generators)
	mongoDBCollection_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollection_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollection_StatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollection_StatusARM(generators)
	mongoDBCollection_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollection_StatusARM{}), generators)

	return mongoDBCollection_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollection_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollection_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollection_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollection_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBCollectionProperties_StatusARMGenerator())
}

func Test_MongoDBCollectionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionProperties_StatusARM, MongoDBCollectionProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionProperties_StatusARM runs a test to see if a specific instance of MongoDBCollectionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionProperties_StatusARM(subject MongoDBCollectionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionProperties_StatusARM instances for property testing - lazily instantiated by
//MongoDBCollectionProperties_StatusARMGenerator()
var mongoDBCollectionProperties_statusARMGenerator gopter.Gen

// MongoDBCollectionProperties_StatusARMGenerator returns a generator of MongoDBCollectionProperties_StatusARM instances for property testing.
func MongoDBCollectionProperties_StatusARMGenerator() gopter.Gen {
	if mongoDBCollectionProperties_statusARMGenerator != nil {
		return mongoDBCollectionProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBCollectionProperties_StatusARM(generators)
	mongoDBCollectionProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionProperties_StatusARM{}), generators)

	return mongoDBCollectionProperties_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_StatusARMGenerator())
	gens["Resource"] = MongoDBCollectionResource_StatusARMGenerator()
}

func Test_CreateUpdateOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CreateUpdateOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCreateUpdateOptions_StatusARM, CreateUpdateOptions_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCreateUpdateOptions_StatusARM runs a test to see if a specific instance of CreateUpdateOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCreateUpdateOptions_StatusARM(subject CreateUpdateOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CreateUpdateOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CreateUpdateOptions_StatusARM instances for property testing - lazily instantiated by
//CreateUpdateOptions_StatusARMGenerator()
var createUpdateOptions_statusARMGenerator gopter.Gen

// CreateUpdateOptions_StatusARMGenerator returns a generator of CreateUpdateOptions_StatusARM instances for property testing.
// We first initialize createUpdateOptions_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CreateUpdateOptions_StatusARMGenerator() gopter.Gen {
	if createUpdateOptions_statusARMGenerator != nil {
		return createUpdateOptions_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM(generators)
	createUpdateOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM(generators)
	AddRelatedPropertyGeneratorsForCreateUpdateOptions_StatusARM(generators)
	createUpdateOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(CreateUpdateOptions_StatusARM{}), generators)

	return createUpdateOptions_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCreateUpdateOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForCreateUpdateOptions_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCreateUpdateOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_StatusARMGenerator())
}

func Test_MongoDBCollectionResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBCollectionResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBCollectionResource_StatusARM, MongoDBCollectionResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBCollectionResource_StatusARM runs a test to see if a specific instance of MongoDBCollectionResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBCollectionResource_StatusARM(subject MongoDBCollectionResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBCollectionResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBCollectionResource_StatusARM instances for property testing - lazily instantiated by
//MongoDBCollectionResource_StatusARMGenerator()
var mongoDBCollectionResource_statusARMGenerator gopter.Gen

// MongoDBCollectionResource_StatusARMGenerator returns a generator of MongoDBCollectionResource_StatusARM instances for property testing.
// We first initialize mongoDBCollectionResource_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBCollectionResource_StatusARMGenerator() gopter.Gen {
	if mongoDBCollectionResource_statusARMGenerator != nil {
		return mongoDBCollectionResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM(generators)
	mongoDBCollectionResource_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBCollectionResource_StatusARM(generators)
	mongoDBCollectionResource_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoDBCollectionResource_StatusARM{}), generators)

	return mongoDBCollectionResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBCollectionResource_StatusARM(gens map[string]gopter.Gen) {
	gens["AnalyticalStorageTtl"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.AlphaString()
	gens["ShardKey"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoDBCollectionResource_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBCollectionResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Indexes"] = gen.SliceOf(MongoIndex_StatusARMGenerator())
}

func Test_AutoscaleSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_StatusARM, AutoscaleSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_StatusARM runs a test to see if a specific instance of AutoscaleSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_StatusARM(subject AutoscaleSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_StatusARM instances for property testing - lazily instantiated by
//AutoscaleSettings_StatusARMGenerator()
var autoscaleSettings_statusARMGenerator gopter.Gen

// AutoscaleSettings_StatusARMGenerator returns a generator of AutoscaleSettings_StatusARM instances for property testing.
func AutoscaleSettings_StatusARMGenerator() gopter.Gen {
	if autoscaleSettings_statusARMGenerator != nil {
		return autoscaleSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_StatusARM(generators)
	autoscaleSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_StatusARM{}), generators)

	return autoscaleSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_MongoIndex_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndex_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndex_StatusARM, MongoIndex_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndex_StatusARM runs a test to see if a specific instance of MongoIndex_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndex_StatusARM(subject MongoIndex_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndex_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndex_StatusARM instances for property testing - lazily instantiated by
//MongoIndex_StatusARMGenerator()
var mongoIndex_statusARMGenerator gopter.Gen

// MongoIndex_StatusARMGenerator returns a generator of MongoIndex_StatusARM instances for property testing.
func MongoIndex_StatusARMGenerator() gopter.Gen {
	if mongoIndex_statusARMGenerator != nil {
		return mongoIndex_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoIndex_StatusARM(generators)
	mongoIndex_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndex_StatusARM{}), generators)

	return mongoIndex_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoIndex_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoIndex_StatusARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(MongoIndexKeys_StatusARMGenerator())
	gens["Options"] = gen.PtrOf(MongoIndexOptions_StatusARMGenerator())
}

func Test_MongoIndexKeys_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexKeys_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexKeys_StatusARM, MongoIndexKeys_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexKeys_StatusARM runs a test to see if a specific instance of MongoIndexKeys_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexKeys_StatusARM(subject MongoIndexKeys_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexKeys_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexKeys_StatusARM instances for property testing - lazily instantiated by
//MongoIndexKeys_StatusARMGenerator()
var mongoIndexKeys_statusARMGenerator gopter.Gen

// MongoIndexKeys_StatusARMGenerator returns a generator of MongoIndexKeys_StatusARM instances for property testing.
func MongoIndexKeys_StatusARMGenerator() gopter.Gen {
	if mongoIndexKeys_statusARMGenerator != nil {
		return mongoIndexKeys_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexKeys_StatusARM(generators)
	mongoIndexKeys_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexKeys_StatusARM{}), generators)

	return mongoIndexKeys_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexKeys_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexKeys_StatusARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.SliceOf(gen.AlphaString())
}

func Test_MongoIndexOptions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoIndexOptions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoIndexOptions_StatusARM, MongoIndexOptions_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoIndexOptions_StatusARM runs a test to see if a specific instance of MongoIndexOptions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoIndexOptions_StatusARM(subject MongoIndexOptions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoIndexOptions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoIndexOptions_StatusARM instances for property testing - lazily instantiated by
//MongoIndexOptions_StatusARMGenerator()
var mongoIndexOptions_statusARMGenerator gopter.Gen

// MongoIndexOptions_StatusARMGenerator returns a generator of MongoIndexOptions_StatusARM instances for property testing.
func MongoIndexOptions_StatusARMGenerator() gopter.Gen {
	if mongoIndexOptions_statusARMGenerator != nil {
		return mongoIndexOptions_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoIndexOptions_StatusARM(generators)
	mongoIndexOptions_statusARMGenerator = gen.Struct(reflect.TypeOf(MongoIndexOptions_StatusARM{}), generators)

	return mongoIndexOptions_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoIndexOptions_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoIndexOptions_StatusARM(gens map[string]gopter.Gen) {
	gens["ExpireAfterSeconds"] = gen.PtrOf(gen.Int())
	gens["Unique"] = gen.PtrOf(gen.Bool())
}
