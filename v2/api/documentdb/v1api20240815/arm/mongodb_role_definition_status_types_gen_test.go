// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_MongoRoleDefinitionResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoRoleDefinitionResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoRoleDefinitionResource_STATUS, MongoRoleDefinitionResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoRoleDefinitionResource_STATUS runs a test to see if a specific instance of MongoRoleDefinitionResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoRoleDefinitionResource_STATUS(subject MongoRoleDefinitionResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoRoleDefinitionResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoRoleDefinitionResource_STATUS instances for property testing - lazily instantiated by
// MongoRoleDefinitionResource_STATUSGenerator()
var mongoRoleDefinitionResource_STATUSGenerator gopter.Gen

// MongoRoleDefinitionResource_STATUSGenerator returns a generator of MongoRoleDefinitionResource_STATUS instances for property testing.
// We first initialize mongoRoleDefinitionResource_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoRoleDefinitionResource_STATUSGenerator() gopter.Gen {
	if mongoRoleDefinitionResource_STATUSGenerator != nil {
		return mongoRoleDefinitionResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoRoleDefinitionResource_STATUS(generators)
	mongoRoleDefinitionResource_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoRoleDefinitionResource_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoRoleDefinitionResource_STATUS(generators)
	AddRelatedPropertyGeneratorsForMongoRoleDefinitionResource_STATUS(generators)
	mongoRoleDefinitionResource_STATUSGenerator = gen.Struct(reflect.TypeOf(MongoRoleDefinitionResource_STATUS{}), generators)

	return mongoRoleDefinitionResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongoRoleDefinitionResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoRoleDefinitionResource_STATUS(gens map[string]gopter.Gen) {
	gens["DatabaseName"] = gen.PtrOf(gen.AlphaString())
	gens["RoleName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongoRoleDefinitionResource_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoRoleDefinitionResource_STATUS(gens map[string]gopter.Gen) {
	gens["Privileges"] = gen.SliceOf(Privilege_STATUSGenerator())
	gens["Roles"] = gen.SliceOf(Role_STATUSGenerator())
}

func Test_MongodbRoleDefinition_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongodbRoleDefinition_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongodbRoleDefinition_STATUS, MongodbRoleDefinition_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongodbRoleDefinition_STATUS runs a test to see if a specific instance of MongodbRoleDefinition_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForMongodbRoleDefinition_STATUS(subject MongodbRoleDefinition_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongodbRoleDefinition_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongodbRoleDefinition_STATUS instances for property testing - lazily instantiated by
// MongodbRoleDefinition_STATUSGenerator()
var mongodbRoleDefinition_STATUSGenerator gopter.Gen

// MongodbRoleDefinition_STATUSGenerator returns a generator of MongodbRoleDefinition_STATUS instances for property testing.
// We first initialize mongodbRoleDefinition_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongodbRoleDefinition_STATUSGenerator() gopter.Gen {
	if mongodbRoleDefinition_STATUSGenerator != nil {
		return mongodbRoleDefinition_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbRoleDefinition_STATUS(generators)
	mongodbRoleDefinition_STATUSGenerator = gen.Struct(reflect.TypeOf(MongodbRoleDefinition_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongodbRoleDefinition_STATUS(generators)
	AddRelatedPropertyGeneratorsForMongodbRoleDefinition_STATUS(generators)
	mongodbRoleDefinition_STATUSGenerator = gen.Struct(reflect.TypeOf(MongodbRoleDefinition_STATUS{}), generators)

	return mongodbRoleDefinition_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForMongodbRoleDefinition_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongodbRoleDefinition_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMongodbRoleDefinition_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongodbRoleDefinition_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoRoleDefinitionResource_STATUSGenerator())
}

func Test_Privilege_Resource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Privilege_Resource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivilege_Resource_STATUS, Privilege_Resource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivilege_Resource_STATUS runs a test to see if a specific instance of Privilege_Resource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivilege_Resource_STATUS(subject Privilege_Resource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Privilege_Resource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Privilege_Resource_STATUS instances for property testing - lazily instantiated by
// Privilege_Resource_STATUSGenerator()
var privilege_Resource_STATUSGenerator gopter.Gen

// Privilege_Resource_STATUSGenerator returns a generator of Privilege_Resource_STATUS instances for property testing.
func Privilege_Resource_STATUSGenerator() gopter.Gen {
	if privilege_Resource_STATUSGenerator != nil {
		return privilege_Resource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivilege_Resource_STATUS(generators)
	privilege_Resource_STATUSGenerator = gen.Struct(reflect.TypeOf(Privilege_Resource_STATUS{}), generators)

	return privilege_Resource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivilege_Resource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivilege_Resource_STATUS(gens map[string]gopter.Gen) {
	gens["Collection"] = gen.PtrOf(gen.AlphaString())
	gens["Db"] = gen.PtrOf(gen.AlphaString())
}

func Test_Privilege_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Privilege_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivilege_STATUS, Privilege_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivilege_STATUS runs a test to see if a specific instance of Privilege_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivilege_STATUS(subject Privilege_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Privilege_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Privilege_STATUS instances for property testing - lazily instantiated by Privilege_STATUSGenerator()
var privilege_STATUSGenerator gopter.Gen

// Privilege_STATUSGenerator returns a generator of Privilege_STATUS instances for property testing.
// We first initialize privilege_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Privilege_STATUSGenerator() gopter.Gen {
	if privilege_STATUSGenerator != nil {
		return privilege_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivilege_STATUS(generators)
	privilege_STATUSGenerator = gen.Struct(reflect.TypeOf(Privilege_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivilege_STATUS(generators)
	AddRelatedPropertyGeneratorsForPrivilege_STATUS(generators)
	privilege_STATUSGenerator = gen.Struct(reflect.TypeOf(Privilege_STATUS{}), generators)

	return privilege_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivilege_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivilege_STATUS(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivilege_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivilege_STATUS(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(Privilege_Resource_STATUSGenerator())
}

func Test_Role_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Role_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRole_STATUS, Role_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRole_STATUS runs a test to see if a specific instance of Role_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRole_STATUS(subject Role_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Role_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Role_STATUS instances for property testing - lazily instantiated by Role_STATUSGenerator()
var role_STATUSGenerator gopter.Gen

// Role_STATUSGenerator returns a generator of Role_STATUS instances for property testing.
func Role_STATUSGenerator() gopter.Gen {
	if role_STATUSGenerator != nil {
		return role_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRole_STATUS(generators)
	role_STATUSGenerator = gen.Struct(reflect.TypeOf(Role_STATUS{}), generators)

	return role_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRole_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRole_STATUS(gens map[string]gopter.Gen) {
	gens["Db"] = gen.PtrOf(gen.AlphaString())
	gens["Role"] = gen.PtrOf(gen.AlphaString())
}
