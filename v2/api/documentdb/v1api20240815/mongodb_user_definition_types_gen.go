// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240815

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20240815/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/documentdb/v1api20240815/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,documentdb}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2024-08-15/mongorbac.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbUserDefinitions/{mongoUserDefinitionId}
type MongodbUserDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MongodbUserDefinition_Spec   `json:"spec,omitempty"`
	Status            MongodbUserDefinition_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbUserDefinition{}

// GetConditions returns the conditions of the resource
func (definition *MongodbUserDefinition) GetConditions() conditions.Conditions {
	return definition.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (definition *MongodbUserDefinition) SetConditions(conditions conditions.Conditions) {
	definition.Status.Conditions = conditions
}

var _ conversion.Convertible = &MongodbUserDefinition{}

// ConvertFrom populates our MongodbUserDefinition from the provided hub MongodbUserDefinition
func (definition *MongodbUserDefinition) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.MongodbUserDefinition)
	if !ok {
		return fmt.Errorf("expected documentdb/v1api20240815/storage/MongodbUserDefinition but received %T instead", hub)
	}

	return definition.AssignProperties_From_MongodbUserDefinition(source)
}

// ConvertTo populates the provided hub MongodbUserDefinition from our MongodbUserDefinition
func (definition *MongodbUserDefinition) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.MongodbUserDefinition)
	if !ok {
		return fmt.Errorf("expected documentdb/v1api20240815/storage/MongodbUserDefinition but received %T instead", hub)
	}

	return definition.AssignProperties_To_MongodbUserDefinition(destination)
}

var _ configmaps.Exporter = &MongodbUserDefinition{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (definition *MongodbUserDefinition) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if definition.Spec.OperatorSpec == nil {
		return nil
	}
	return definition.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &MongodbUserDefinition{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (definition *MongodbUserDefinition) SecretDestinationExpressions() []*core.DestinationExpression {
	if definition.Spec.OperatorSpec == nil {
		return nil
	}
	return definition.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &MongodbUserDefinition{}

// InitializeSpec initializes the spec for this resource from the given status
func (definition *MongodbUserDefinition) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*MongodbUserDefinition_STATUS); ok {
		return definition.Spec.Initialize_From_MongodbUserDefinition_STATUS(s)
	}

	return fmt.Errorf("expected Status of type MongodbUserDefinition_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &MongodbUserDefinition{}

// AzureName returns the Azure name of the resource
func (definition *MongodbUserDefinition) AzureName() string {
	return definition.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-08-15"
func (definition MongodbUserDefinition) GetAPIVersion() string {
	return "2024-08-15"
}

// GetResourceScope returns the scope of the resource
func (definition *MongodbUserDefinition) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (definition *MongodbUserDefinition) GetSpec() genruntime.ConvertibleSpec {
	return &definition.Spec
}

// GetStatus returns the status of this resource
func (definition *MongodbUserDefinition) GetStatus() genruntime.ConvertibleStatus {
	return &definition.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (definition *MongodbUserDefinition) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbUserDefinitions"
func (definition *MongodbUserDefinition) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbUserDefinitions"
}

// NewEmptyStatus returns a new empty (blank) status
func (definition *MongodbUserDefinition) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MongodbUserDefinition_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (definition *MongodbUserDefinition) Owner() *genruntime.ResourceReference {
	if definition.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(definition.Spec)
	return definition.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (definition *MongodbUserDefinition) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MongodbUserDefinition_STATUS); ok {
		definition.Status = *st
		return nil
	}

	// Convert status to required version
	var st MongodbUserDefinition_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	definition.Status = st
	return nil
}

// AssignProperties_From_MongodbUserDefinition populates our MongodbUserDefinition from the provided source MongodbUserDefinition
func (definition *MongodbUserDefinition) AssignProperties_From_MongodbUserDefinition(source *storage.MongodbUserDefinition) error {

	// ObjectMeta
	definition.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec MongodbUserDefinition_Spec
	err := spec.AssignProperties_From_MongodbUserDefinition_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_MongodbUserDefinition_Spec() to populate field Spec")
	}
	definition.Spec = spec

	// Status
	var status MongodbUserDefinition_STATUS
	err = status.AssignProperties_From_MongodbUserDefinition_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_MongodbUserDefinition_STATUS() to populate field Status")
	}
	definition.Status = status

	// No error
	return nil
}

// AssignProperties_To_MongodbUserDefinition populates the provided destination MongodbUserDefinition from our MongodbUserDefinition
func (definition *MongodbUserDefinition) AssignProperties_To_MongodbUserDefinition(destination *storage.MongodbUserDefinition) error {

	// ObjectMeta
	destination.ObjectMeta = *definition.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.MongodbUserDefinition_Spec
	err := definition.Spec.AssignProperties_To_MongodbUserDefinition_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_MongodbUserDefinition_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.MongodbUserDefinition_STATUS
	err = definition.Status.AssignProperties_To_MongodbUserDefinition_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_MongodbUserDefinition_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (definition *MongodbUserDefinition) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: definition.Spec.OriginalVersion(),
		Kind:    "MongodbUserDefinition",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2024-08-15/mongorbac.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/mongodbUserDefinitions/{mongoUserDefinitionId}
type MongodbUserDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbUserDefinition `json:"items"`
}

type MongodbUserDefinition_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CustomData: A custom definition for the USer Definition.
	CustomData *string `json:"customData,omitempty"`

	// DatabaseName: The database name for which access is being granted for this User Definition.
	DatabaseName *string `json:"databaseName,omitempty"`

	// Mechanisms: The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
	Mechanisms *string `json:"mechanisms,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *MongodbUserDefinitionOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a documentdb.azure.com/DatabaseAccount resource
	Owner *genruntime.KnownResourceReference `group:"documentdb.azure.com" json:"owner,omitempty" kind:"DatabaseAccount"`

	// Password: The password for User Definition. Response does not contain user password.
	Password *genruntime.SecretReference `json:"password,omitempty"`

	// Roles: The set of roles inherited by the User Definition.
	Roles []Role `json:"roles,omitempty"`

	// UserName: The user name for User Definition.
	UserName *string `json:"userName,omitempty"`
}

var _ genruntime.ARMTransformer = &MongodbUserDefinition_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (definition *MongodbUserDefinition_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if definition == nil {
		return nil, nil
	}
	result := &arm.MongodbUserDefinition_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if definition.CustomData != nil ||
		definition.DatabaseName != nil ||
		definition.Mechanisms != nil ||
		definition.Password != nil ||
		definition.Roles != nil ||
		definition.UserName != nil {
		result.Properties = &arm.MongoUserDefinitionResource{}
	}
	if definition.CustomData != nil {
		customData := *definition.CustomData
		result.Properties.CustomData = &customData
	}
	if definition.DatabaseName != nil {
		databaseName := *definition.DatabaseName
		result.Properties.DatabaseName = &databaseName
	}
	if definition.Mechanisms != nil {
		mechanisms := *definition.Mechanisms
		result.Properties.Mechanisms = &mechanisms
	}
	if definition.Password != nil {
		passwordSecret, err := resolved.ResolvedSecrets.Lookup(*definition.Password)
		if err != nil {
			return nil, eris.Wrap(err, "looking up secret for property Password")
		}
		password := passwordSecret
		result.Properties.Password = &password
	}
	for _, item := range definition.Roles {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Roles = append(result.Properties.Roles, *item_ARM.(*arm.Role))
	}
	if definition.UserName != nil {
		userName := *definition.UserName
		result.Properties.UserName = &userName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (definition *MongodbUserDefinition_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.MongodbUserDefinition_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (definition *MongodbUserDefinition_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.MongodbUserDefinition_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.MongodbUserDefinition_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	definition.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "CustomData":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomData != nil {
			customData := *typedInput.Properties.CustomData
			definition.CustomData = &customData
		}
	}

	// Set property "DatabaseName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseName != nil {
			databaseName := *typedInput.Properties.DatabaseName
			definition.DatabaseName = &databaseName
		}
	}

	// Set property "Mechanisms":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Mechanisms != nil {
			mechanisms := *typedInput.Properties.Mechanisms
			definition.Mechanisms = &mechanisms
		}
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	definition.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// no assignment for property "Password"

	// Set property "Roles":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Roles {
			var item1 Role
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			definition.Roles = append(definition.Roles, item1)
		}
	}

	// Set property "UserName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UserName != nil {
			userName := *typedInput.Properties.UserName
			definition.UserName = &userName
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &MongodbUserDefinition_Spec{}

// ConvertSpecFrom populates our MongodbUserDefinition_Spec from the provided source
func (definition *MongodbUserDefinition_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.MongodbUserDefinition_Spec)
	if ok {
		// Populate our instance from source
		return definition.AssignProperties_From_MongodbUserDefinition_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.MongodbUserDefinition_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = definition.AssignProperties_From_MongodbUserDefinition_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our MongodbUserDefinition_Spec
func (definition *MongodbUserDefinition_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.MongodbUserDefinition_Spec)
	if ok {
		// Populate destination from our instance
		return definition.AssignProperties_To_MongodbUserDefinition_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.MongodbUserDefinition_Spec{}
	err := definition.AssignProperties_To_MongodbUserDefinition_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_MongodbUserDefinition_Spec populates our MongodbUserDefinition_Spec from the provided source MongodbUserDefinition_Spec
func (definition *MongodbUserDefinition_Spec) AssignProperties_From_MongodbUserDefinition_Spec(source *storage.MongodbUserDefinition_Spec) error {

	// AzureName
	definition.AzureName = source.AzureName

	// CustomData
	definition.CustomData = genruntime.ClonePointerToString(source.CustomData)

	// DatabaseName
	definition.DatabaseName = genruntime.ClonePointerToString(source.DatabaseName)

	// Mechanisms
	definition.Mechanisms = genruntime.ClonePointerToString(source.Mechanisms)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec MongodbUserDefinitionOperatorSpec
		err := operatorSpec.AssignProperties_From_MongodbUserDefinitionOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_MongodbUserDefinitionOperatorSpec() to populate field OperatorSpec")
		}
		definition.OperatorSpec = &operatorSpec
	} else {
		definition.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		definition.Owner = &owner
	} else {
		definition.Owner = nil
	}

	// Password
	if source.Password != nil {
		password := source.Password.Copy()
		definition.Password = &password
	} else {
		definition.Password = nil
	}

	// Roles
	if source.Roles != nil {
		roleList := make([]Role, len(source.Roles))
		for roleIndex, roleItem := range source.Roles {
			// Shadow the loop variable to avoid aliasing
			roleItem := roleItem
			var role Role
			err := role.AssignProperties_From_Role(&roleItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_Role() to populate field Roles")
			}
			roleList[roleIndex] = role
		}
		definition.Roles = roleList
	} else {
		definition.Roles = nil
	}

	// UserName
	definition.UserName = genruntime.ClonePointerToString(source.UserName)

	// No error
	return nil
}

// AssignProperties_To_MongodbUserDefinition_Spec populates the provided destination MongodbUserDefinition_Spec from our MongodbUserDefinition_Spec
func (definition *MongodbUserDefinition_Spec) AssignProperties_To_MongodbUserDefinition_Spec(destination *storage.MongodbUserDefinition_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = definition.AzureName

	// CustomData
	destination.CustomData = genruntime.ClonePointerToString(definition.CustomData)

	// DatabaseName
	destination.DatabaseName = genruntime.ClonePointerToString(definition.DatabaseName)

	// Mechanisms
	destination.Mechanisms = genruntime.ClonePointerToString(definition.Mechanisms)

	// OperatorSpec
	if definition.OperatorSpec != nil {
		var operatorSpec storage.MongodbUserDefinitionOperatorSpec
		err := definition.OperatorSpec.AssignProperties_To_MongodbUserDefinitionOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_MongodbUserDefinitionOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = definition.OriginalVersion()

	// Owner
	if definition.Owner != nil {
		owner := definition.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Password
	if definition.Password != nil {
		password := definition.Password.Copy()
		destination.Password = &password
	} else {
		destination.Password = nil
	}

	// Roles
	if definition.Roles != nil {
		roleList := make([]storage.Role, len(definition.Roles))
		for roleIndex, roleItem := range definition.Roles {
			// Shadow the loop variable to avoid aliasing
			roleItem := roleItem
			var role storage.Role
			err := roleItem.AssignProperties_To_Role(&role)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_Role() to populate field Roles")
			}
			roleList[roleIndex] = role
		}
		destination.Roles = roleList
	} else {
		destination.Roles = nil
	}

	// UserName
	destination.UserName = genruntime.ClonePointerToString(definition.UserName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_MongodbUserDefinition_STATUS populates our MongodbUserDefinition_Spec from the provided source MongodbUserDefinition_STATUS
func (definition *MongodbUserDefinition_Spec) Initialize_From_MongodbUserDefinition_STATUS(source *MongodbUserDefinition_STATUS) error {

	// CustomData
	definition.CustomData = genruntime.ClonePointerToString(source.CustomData)

	// DatabaseName
	definition.DatabaseName = genruntime.ClonePointerToString(source.DatabaseName)

	// Mechanisms
	definition.Mechanisms = genruntime.ClonePointerToString(source.Mechanisms)

	// Roles
	if source.Roles != nil {
		roleList := make([]Role, len(source.Roles))
		for roleIndex, roleItem := range source.Roles {
			// Shadow the loop variable to avoid aliasing
			roleItem := roleItem
			var role Role
			err := role.Initialize_From_Role_STATUS(&roleItem)
			if err != nil {
				return eris.Wrap(err, "calling Initialize_From_Role_STATUS() to populate field Roles")
			}
			roleList[roleIndex] = role
		}
		definition.Roles = roleList
	} else {
		definition.Roles = nil
	}

	// UserName
	definition.UserName = genruntime.ClonePointerToString(source.UserName)

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (definition *MongodbUserDefinition_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (definition *MongodbUserDefinition_Spec) SetAzureName(azureName string) {
	definition.AzureName = azureName
}

type MongodbUserDefinition_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CustomData: A custom definition for the USer Definition.
	CustomData *string `json:"customData,omitempty"`

	// DatabaseName: The database name for which access is being granted for this User Definition.
	DatabaseName *string `json:"databaseName,omitempty"`

	// Id: The unique resource identifier of the database account.
	Id *string `json:"id,omitempty"`

	// Mechanisms: The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.
	Mechanisms *string `json:"mechanisms,omitempty"`

	// Name: The name of the database account.
	Name *string `json:"name,omitempty"`

	// Roles: The set of roles inherited by the User Definition.
	Roles []Role_STATUS `json:"roles,omitempty"`

	// Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`

	// UserName: The user name for User Definition.
	UserName *string `json:"userName,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MongodbUserDefinition_STATUS{}

// ConvertStatusFrom populates our MongodbUserDefinition_STATUS from the provided source
func (definition *MongodbUserDefinition_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.MongodbUserDefinition_STATUS)
	if ok {
		// Populate our instance from source
		return definition.AssignProperties_From_MongodbUserDefinition_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.MongodbUserDefinition_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = definition.AssignProperties_From_MongodbUserDefinition_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our MongodbUserDefinition_STATUS
func (definition *MongodbUserDefinition_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.MongodbUserDefinition_STATUS)
	if ok {
		// Populate destination from our instance
		return definition.AssignProperties_To_MongodbUserDefinition_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.MongodbUserDefinition_STATUS{}
	err := definition.AssignProperties_To_MongodbUserDefinition_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &MongodbUserDefinition_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (definition *MongodbUserDefinition_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.MongodbUserDefinition_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (definition *MongodbUserDefinition_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.MongodbUserDefinition_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.MongodbUserDefinition_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "CustomData":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomData != nil {
			customData := *typedInput.Properties.CustomData
			definition.CustomData = &customData
		}
	}

	// Set property "DatabaseName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseName != nil {
			databaseName := *typedInput.Properties.DatabaseName
			definition.DatabaseName = &databaseName
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		definition.Id = &id
	}

	// Set property "Mechanisms":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Mechanisms != nil {
			mechanisms := *typedInput.Properties.Mechanisms
			definition.Mechanisms = &mechanisms
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		definition.Name = &name
	}

	// Set property "Roles":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Roles {
			var item1 Role_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			definition.Roles = append(definition.Roles, item1)
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		definition.Type = &typeVar
	}

	// Set property "UserName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UserName != nil {
			userName := *typedInput.Properties.UserName
			definition.UserName = &userName
		}
	}

	// No error
	return nil
}

// AssignProperties_From_MongodbUserDefinition_STATUS populates our MongodbUserDefinition_STATUS from the provided source MongodbUserDefinition_STATUS
func (definition *MongodbUserDefinition_STATUS) AssignProperties_From_MongodbUserDefinition_STATUS(source *storage.MongodbUserDefinition_STATUS) error {

	// Conditions
	definition.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CustomData
	definition.CustomData = genruntime.ClonePointerToString(source.CustomData)

	// DatabaseName
	definition.DatabaseName = genruntime.ClonePointerToString(source.DatabaseName)

	// Id
	definition.Id = genruntime.ClonePointerToString(source.Id)

	// Mechanisms
	definition.Mechanisms = genruntime.ClonePointerToString(source.Mechanisms)

	// Name
	definition.Name = genruntime.ClonePointerToString(source.Name)

	// Roles
	if source.Roles != nil {
		roleList := make([]Role_STATUS, len(source.Roles))
		for roleIndex, roleItem := range source.Roles {
			// Shadow the loop variable to avoid aliasing
			roleItem := roleItem
			var role Role_STATUS
			err := role.AssignProperties_From_Role_STATUS(&roleItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_Role_STATUS() to populate field Roles")
			}
			roleList[roleIndex] = role
		}
		definition.Roles = roleList
	} else {
		definition.Roles = nil
	}

	// Type
	definition.Type = genruntime.ClonePointerToString(source.Type)

	// UserName
	definition.UserName = genruntime.ClonePointerToString(source.UserName)

	// No error
	return nil
}

// AssignProperties_To_MongodbUserDefinition_STATUS populates the provided destination MongodbUserDefinition_STATUS from our MongodbUserDefinition_STATUS
func (definition *MongodbUserDefinition_STATUS) AssignProperties_To_MongodbUserDefinition_STATUS(destination *storage.MongodbUserDefinition_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(definition.Conditions)

	// CustomData
	destination.CustomData = genruntime.ClonePointerToString(definition.CustomData)

	// DatabaseName
	destination.DatabaseName = genruntime.ClonePointerToString(definition.DatabaseName)

	// Id
	destination.Id = genruntime.ClonePointerToString(definition.Id)

	// Mechanisms
	destination.Mechanisms = genruntime.ClonePointerToString(definition.Mechanisms)

	// Name
	destination.Name = genruntime.ClonePointerToString(definition.Name)

	// Roles
	if definition.Roles != nil {
		roleList := make([]storage.Role_STATUS, len(definition.Roles))
		for roleIndex, roleItem := range definition.Roles {
			// Shadow the loop variable to avoid aliasing
			roleItem := roleItem
			var role storage.Role_STATUS
			err := roleItem.AssignProperties_To_Role_STATUS(&role)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_Role_STATUS() to populate field Roles")
			}
			roleList[roleIndex] = role
		}
		destination.Roles = roleList
	} else {
		destination.Roles = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(definition.Type)

	// UserName
	destination.UserName = genruntime.ClonePointerToString(definition.UserName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type MongodbUserDefinitionOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_MongodbUserDefinitionOperatorSpec populates our MongodbUserDefinitionOperatorSpec from the provided source MongodbUserDefinitionOperatorSpec
func (operator *MongodbUserDefinitionOperatorSpec) AssignProperties_From_MongodbUserDefinitionOperatorSpec(source *storage.MongodbUserDefinitionOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_MongodbUserDefinitionOperatorSpec populates the provided destination MongodbUserDefinitionOperatorSpec from our MongodbUserDefinitionOperatorSpec
func (operator *MongodbUserDefinitionOperatorSpec) AssignProperties_To_MongodbUserDefinitionOperatorSpec(destination *storage.MongodbUserDefinitionOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbUserDefinition{}, &MongodbUserDefinitionList{})
}
