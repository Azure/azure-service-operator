// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20231115

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseAccounts_SqlDatabase_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccounts_SqlDatabase_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_SqlDatabase_Spec_ARM, DatabaseAccounts_SqlDatabase_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_SqlDatabase_Spec_ARM runs a test to see if a specific instance of DatabaseAccounts_SqlDatabase_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_SqlDatabase_Spec_ARM(subject DatabaseAccounts_SqlDatabase_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccounts_SqlDatabase_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccounts_SqlDatabase_Spec_ARM instances for property testing - lazily instantiated by
// DatabaseAccounts_SqlDatabase_Spec_ARMGenerator()
var databaseAccounts_SqlDatabase_Spec_ARMGenerator gopter.Gen

// DatabaseAccounts_SqlDatabase_Spec_ARMGenerator returns a generator of DatabaseAccounts_SqlDatabase_Spec_ARM instances for property testing.
// We first initialize databaseAccounts_SqlDatabase_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_SqlDatabase_Spec_ARMGenerator() gopter.Gen {
	if databaseAccounts_SqlDatabase_Spec_ARMGenerator != nil {
		return databaseAccounts_SqlDatabase_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM(generators)
	databaseAccounts_SqlDatabase_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabase_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM(generators)
	databaseAccounts_SqlDatabase_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_SqlDatabase_Spec_ARM{}), generators)

	return databaseAccounts_SqlDatabase_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_SqlDatabase_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseCreateUpdateProperties_ARMGenerator())
}

func Test_SqlDatabaseCreateUpdateProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseCreateUpdateProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_ARM, SqlDatabaseCreateUpdateProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_ARM runs a test to see if a specific instance of SqlDatabaseCreateUpdateProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseCreateUpdateProperties_ARM(subject SqlDatabaseCreateUpdateProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseCreateUpdateProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseCreateUpdateProperties_ARM instances for property testing - lazily instantiated by
// SqlDatabaseCreateUpdateProperties_ARMGenerator()
var sqlDatabaseCreateUpdateProperties_ARMGenerator gopter.Gen

// SqlDatabaseCreateUpdateProperties_ARMGenerator returns a generator of SqlDatabaseCreateUpdateProperties_ARM instances for property testing.
func SqlDatabaseCreateUpdateProperties_ARMGenerator() gopter.Gen {
	if sqlDatabaseCreateUpdateProperties_ARMGenerator != nil {
		return sqlDatabaseCreateUpdateProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_ARM(generators)
	sqlDatabaseCreateUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseCreateUpdateProperties_ARM{}), generators)

	return sqlDatabaseCreateUpdateProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseCreateUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(CreateUpdateOptions_ARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlDatabaseResource_ARMGenerator())
}

func Test_SqlDatabaseResource_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseResource_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseResource_ARM, SqlDatabaseResource_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseResource_ARM runs a test to see if a specific instance of SqlDatabaseResource_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseResource_ARM(subject SqlDatabaseResource_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseResource_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseResource_ARM instances for property testing - lazily instantiated by
// SqlDatabaseResource_ARMGenerator()
var sqlDatabaseResource_ARMGenerator gopter.Gen

// SqlDatabaseResource_ARMGenerator returns a generator of SqlDatabaseResource_ARM instances for property testing.
// We first initialize sqlDatabaseResource_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseResource_ARMGenerator() gopter.Gen {
	if sqlDatabaseResource_ARMGenerator != nil {
		return sqlDatabaseResource_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_ARM(generators)
	sqlDatabaseResource_ARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseResource_ARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseResource_ARM(generators)
	sqlDatabaseResource_ARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseResource_ARM{}), generators)

	return sqlDatabaseResource_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseResource_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseResource_ARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(CreateMode_ARM_Default, CreateMode_ARM_Restore))
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseResource_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseResource_ARM(gens map[string]gopter.Gen) {
	gens["RestoreParameters"] = gen.PtrOf(RestoreParametersBase_ARMGenerator())
}
