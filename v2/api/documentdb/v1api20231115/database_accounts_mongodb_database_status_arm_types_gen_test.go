// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20231115

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AutoscaleSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoscaleSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoscaleSettings_STATUS_ARM, AutoscaleSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoscaleSettings_STATUS_ARM runs a test to see if a specific instance of AutoscaleSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoscaleSettings_STATUS_ARM(subject AutoscaleSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoscaleSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoscaleSettings_STATUS_ARM instances for property testing - lazily instantiated by
// AutoscaleSettings_STATUS_ARMGenerator()
var autoscaleSettings_STATUS_ARMGenerator gopter.Gen

// AutoscaleSettings_STATUS_ARMGenerator returns a generator of AutoscaleSettings_STATUS_ARM instances for property testing.
func AutoscaleSettings_STATUS_ARMGenerator() gopter.Gen {
	if autoscaleSettings_STATUS_ARMGenerator != nil {
		return autoscaleSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUS_ARM(generators)
	autoscaleSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoscaleSettings_STATUS_ARM{}), generators)

	return autoscaleSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoscaleSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MaxThroughput"] = gen.PtrOf(gen.Int())
}

func Test_DatabaseAccounts_MongodbDatabase_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseAccounts_MongodbDatabase_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseAccounts_MongodbDatabase_STATUS_ARM, DatabaseAccounts_MongodbDatabase_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseAccounts_MongodbDatabase_STATUS_ARM runs a test to see if a specific instance of DatabaseAccounts_MongodbDatabase_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseAccounts_MongodbDatabase_STATUS_ARM(subject DatabaseAccounts_MongodbDatabase_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseAccounts_MongodbDatabase_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseAccounts_MongodbDatabase_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseAccounts_MongodbDatabase_STATUS_ARMGenerator()
var databaseAccounts_MongodbDatabase_STATUS_ARMGenerator gopter.Gen

// DatabaseAccounts_MongodbDatabase_STATUS_ARMGenerator returns a generator of DatabaseAccounts_MongodbDatabase_STATUS_ARM instances for property testing.
// We first initialize databaseAccounts_MongodbDatabase_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseAccounts_MongodbDatabase_STATUS_ARMGenerator() gopter.Gen {
	if databaseAccounts_MongodbDatabase_STATUS_ARMGenerator != nil {
		return databaseAccounts_MongodbDatabase_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM(generators)
	databaseAccounts_MongodbDatabase_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_MongodbDatabase_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM(generators)
	databaseAccounts_MongodbDatabase_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseAccounts_MongodbDatabase_STATUS_ARM{}), generators)

	return databaseAccounts_MongodbDatabase_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseAccounts_MongodbDatabase_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(MongoDBDatabaseGetProperties_STATUS_ARMGenerator())
}

func Test_MongoDBDatabaseGetProperties_Resource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetProperties_Resource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetProperties_Resource_STATUS_ARM, MongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetProperties_Resource_STATUS_ARM runs a test to see if a specific instance of MongoDBDatabaseGetProperties_Resource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetProperties_Resource_STATUS_ARM(subject MongoDBDatabaseGetProperties_Resource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetProperties_Resource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetProperties_Resource_STATUS_ARM instances for property testing - lazily instantiated by
// MongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator()
var mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator gopter.Gen

// MongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator returns a generator of MongoDBDatabaseGetProperties_Resource_STATUS_ARM instances for property testing.
// We first initialize mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator != nil {
		return mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM(generators)
	mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_Resource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM(generators)
	mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_Resource_STATUS_ARM{}), generators)

	return mongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(CreateMode_STATUS_Default, CreateMode_STATUS_Restore))
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseGetProperties_Resource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RestoreParameters"] = gen.PtrOf(RestoreParametersBase_STATUS_ARMGenerator())
}

func Test_MongoDBDatabaseGetProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MongoDBDatabaseGetProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMongoDBDatabaseGetProperties_STATUS_ARM, MongoDBDatabaseGetProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMongoDBDatabaseGetProperties_STATUS_ARM runs a test to see if a specific instance of MongoDBDatabaseGetProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMongoDBDatabaseGetProperties_STATUS_ARM(subject MongoDBDatabaseGetProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MongoDBDatabaseGetProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MongoDBDatabaseGetProperties_STATUS_ARM instances for property testing - lazily instantiated by
// MongoDBDatabaseGetProperties_STATUS_ARMGenerator()
var mongoDBDatabaseGetProperties_STATUS_ARMGenerator gopter.Gen

// MongoDBDatabaseGetProperties_STATUS_ARMGenerator returns a generator of MongoDBDatabaseGetProperties_STATUS_ARM instances for property testing.
func MongoDBDatabaseGetProperties_STATUS_ARMGenerator() gopter.Gen {
	if mongoDBDatabaseGetProperties_STATUS_ARMGenerator != nil {
		return mongoDBDatabaseGetProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMongoDBDatabaseGetProperties_STATUS_ARM(generators)
	mongoDBDatabaseGetProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MongoDBDatabaseGetProperties_STATUS_ARM{}), generators)

	return mongoDBDatabaseGetProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMongoDBDatabaseGetProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMongoDBDatabaseGetProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResource_STATUS_ARMGenerator())
	gens["Resource"] = gen.PtrOf(MongoDBDatabaseGetProperties_Resource_STATUS_ARMGenerator())
}

func Test_OptionsResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OptionsResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOptionsResource_STATUS_ARM, OptionsResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOptionsResource_STATUS_ARM runs a test to see if a specific instance of OptionsResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOptionsResource_STATUS_ARM(subject OptionsResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OptionsResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OptionsResource_STATUS_ARM instances for property testing - lazily instantiated by
// OptionsResource_STATUS_ARMGenerator()
var optionsResource_STATUS_ARMGenerator gopter.Gen

// OptionsResource_STATUS_ARMGenerator returns a generator of OptionsResource_STATUS_ARM instances for property testing.
// We first initialize optionsResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OptionsResource_STATUS_ARMGenerator() gopter.Gen {
	if optionsResource_STATUS_ARMGenerator != nil {
		return optionsResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM(generators)
	optionsResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OptionsResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOptionsResource_STATUS_ARM(generators)
	optionsResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OptionsResource_STATUS_ARM{}), generators)

	return optionsResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOptionsResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Throughput"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForOptionsResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOptionsResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoscaleSettings"] = gen.PtrOf(AutoscaleSettings_STATUS_ARMGenerator())
}

func Test_RestoreParametersBase_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RestoreParametersBase_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRestoreParametersBase_STATUS_ARM, RestoreParametersBase_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRestoreParametersBase_STATUS_ARM runs a test to see if a specific instance of RestoreParametersBase_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRestoreParametersBase_STATUS_ARM(subject RestoreParametersBase_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RestoreParametersBase_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RestoreParametersBase_STATUS_ARM instances for property testing - lazily instantiated by
// RestoreParametersBase_STATUS_ARMGenerator()
var restoreParametersBase_STATUS_ARMGenerator gopter.Gen

// RestoreParametersBase_STATUS_ARMGenerator returns a generator of RestoreParametersBase_STATUS_ARM instances for property testing.
func RestoreParametersBase_STATUS_ARMGenerator() gopter.Gen {
	if restoreParametersBase_STATUS_ARMGenerator != nil {
		return restoreParametersBase_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRestoreParametersBase_STATUS_ARM(generators)
	restoreParametersBase_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RestoreParametersBase_STATUS_ARM{}), generators)

	return restoreParametersBase_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRestoreParametersBase_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRestoreParametersBase_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RestoreSource"] = gen.PtrOf(gen.AlphaString())
	gens["RestoreTimestampInUtc"] = gen.PtrOf(gen.AlphaString())
}
